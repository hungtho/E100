
                                   Fri Apr 10 08:31:37 2020           Page 1
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
Command Line:   C:\ghs\comp_201754\asppc.exe -noundefined -stderr=err/BrsHw.err
                -elf -b1 -I../../../bsw/_common -I../../../bsw/eep
                -I../../../bsw/fbl -I../../../bsw/flash -I../../../bsw/flash_xd1
                -I../../../bsw/secmod -I../../../bsw/wrapnv
                -Ic:/ghs/comp_201754/ansi -Ic:/ghs/comp_201754/include/ppc
                -Ic:/ghs/comp_201754/src/libsys -Igendata -Iinclude
                -IC:\ghs\comp_201754\lib\ppc5514 -cpu=ppc560xp
                -patch_dbo=C:\Vector\CBD1800772_D00_Mpc57xx\Demo\DemoFbl\Appl\obj\BrsHw.dbo
                -source=BrsHw.c -o obj\gh_0000csk1.o -list=lst/BrsHw.lst
                C:\Users\owner\AppData\Local\Temp\gh_0000csk1.si
Source File:    C:\Users\owner\AppData\Local\Temp\gh_0000csk1.si
Directory:      C:\Vector\CBD1800772_D00_Mpc57xx\Demo\DemoFbl\Appl
Host OS:        Windows
AS: Copyright (C) 1983-2017 Green Hills Software.  All Rights Reserved.
Release: Compiler v2017.5.4
Build Directory: [Directory] COMP-VAL-WIN50:c:/autoval2/v2017.5-2017-10-03/win32-comp-ecom
Revision: [VCInfo] http://toolsvc/branches/release-branch-2017-5-comp/src@603870 (built by auto-compiler)
Revision Date: Wed Oct 04 11:30:08 2017

Release Date: Wed Oct 04 09:00:05 2017

                             1	#Driver Command: ccppc -DBRS_DERIVATIVE_SPC570S50 -DBRS_OSC_CLK=40
                             2	#		-DBRS_TIMEBASE_CLOCK=80 -DBRS_OS_USECASE_BRS
                             3	#		-DBRS_EVA_BOARD_DEFAULT -DBRS_PLATFORM_MPC57XX -DBRS_COMP_GHS
                             4	#		-DBRSHW_INSTRUCTION_SET_VLE -DBRS_CPU_STARTUP_ID=0
                             5	#		-object_dir=obj -list=lst/BrsHw.lst -stderr=err/BrsHw.err -c -vle
                             6	#		-DC_ENABLE_INSTRUCTION_SET_VLE -D__vle --prototype_warnings
                             7	#		-Odebug -Osize -Ospace -G -dual_debug -nofloatio -cpu=ppc560xp
                             8	#		-noobj -DRAM_48K -inline_prologue -pragma_asm_inline -noSPE
                             9	#		--no_exceptions --no_commons -nokeeptempfiles -pnone
                            10	#		--incorrect_pragma_warnings --slash_comment --long_long
                            11	#		-preprocess_assembly_files -passsource -I../../../bsw/_common
                            12	#		-I../../../bsw/eep -I../../../bsw/fbl -I../../../bsw/flash
                            13	#		-I../../../bsw/flash_xd1 -I../../../bsw/secmod
                            14	#		-I../../../bsw/wrapnv -Ic:/ghs/comp_201754/ansi
                            15	#		-Ic:/ghs/comp_201754/include/ppc -Ic:/ghs/comp_201754/src/libsys
                            16	#		-Igendata -Iinclude Source/BrsHw.c
                            17	#Source File:   Source/BrsHw.c
                            18	#Directory:     C:\Vector\CBD1800772_D00_Mpc57xx\Demo\DemoFbl\Appl
                            19	#Compile Date:  Fri Apr 10 08:31:36 2020
                            20	#Host OS:       Win32
                            21	#Version:       C-POWERPC 2017.5.4 RELEASE VERSION
                            22	#Release:       Compiler v2017.5.4
                            23	#Revision Date: Wed Oct 04 11:39:37 2017
                            24	#Release Date:  Wed Oct 04 09:00:05 2017
                            25	# ecom  -g -w -OMS
                            26	
                            27	#2: /**********************************************************************************************************************
                            28	#3:   COPYRIGHT
                            29	#4: -----------------------------------------------------------------------------------------------------------------------
                            30	#5:   \par      copyright
                            31	#6:   \verbatim
                            32	#7:   Copyright (c) 2018 by Vector Informatik GmbH.                                                  All rights reserved.
                            33	#9:                 This software is copyright protected and proprietary to Vector Informatik GmbH.
                            34	#10:                 Vector Informatik GmbH grants to you only those rights as set out in the license conditions.
                            35	#11:                 All other rights remain with Vector Informatik GmbH.
                            36	#12:   \endverbatim
                            37	#13: -----------------------------------------------------------------------------------------------------------------------
                            38	#14:   FILE DESCRIPTION
                            39	#15: -----------------------------------------------------------------------------------------------------------------------
                            40	#16:   \file  File:  BrsHw.c
                            41	#17:       Project:  Vector Basic Runtime System
                            42	#18:        Module:  BrsHw for platform Freescale/ST Mpc57xx
                            43	#19:      Template:  This file is reviewed according to zBrs_Template@root[2.02.02]

                                   Fri Apr 10 08:31:37 2020           Page 2
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                            44	#21:   \brief Description:  This is the hardware specific code file for Vector Basic Runtime System (BRS).
                            45	#22:                        This file supports: see BrsHw_DerivativeList.h
                            46	#24:   \attention Please note:
                            47	#25:     The demo and example programs only show special aspects of the software. With regard to the fact
                            48	#26:     that these programs are meant for demonstration purposes only, Vector Informatik liability shall be
                            49	#27:     expressly excluded in cases of ordinary negligence, to the extent admissible by law or statute.
                            50	#28: **********************************************************************************************************************/
                            51	#30: /**********************************************************************************************************************
                            52	#31:   AUTHOR IDENTITY
                            53	#32:  ----------------------------------------------------------------------------------------------------------------------
                            54	#33:   Name                          Initials      Company
                            55	#34:   ----------------------------  ------------  -------------------------------------------------------------------------
                            56	#35:   Benjamin Walter               visbwa        Vector Informatik GmbH
                            57	#36:   Stefan Schorer                vissns        Vector Informatik GmbH
                            58	#37:   Andreas Hahn                  vishan        Vector Informatik GmbH
                            59	#38:   Timo Mueller                  vistir        Vector Informatik GmbH
                            60	#39:   Nam Trinh                     visntr        Vector Informatik GmbH
                            61	#40:   Nguyen Le                     vislnn        Vector Informatik GmbH
                            62	#41:   Jens Haerer                   visjhr        Vector Informatik GmbH
                            63	#42:   Viet Duc Nguyen               visvnn        Vector Informatik GmbH
                            64	#43:   Volker Kaiser                 viskvr        Vector Informatik GmbH
                            65	#44:   Yves Plaindoux                vispys        Vector Informatik GmbH
                            66	#45:   Michael Tiran                 vismin        Vector Informatik GmbH
                            67	#46:   Mohammed Seblani              vissmd        Vector Informatik GmbH
                            68	#47:   Roland Reinl                  virrro        Vector Informatik GmbH
                            69	#48:   Sascha Mauser                 vismaa        Vector Informatik GmbH
                            70	#49:   Cyrille Wamba                 viswca        Vector Informatik GmbH
                            71	#50:   Derick Beng Yuh               visydg        Vector Informatik GmbH
                            72	#51:   Ivo Georgiev                  visivg        Vector Informatik GmbH
                            73	#52:   Michael Tiran                 vismin        Vector Informatik GmbH
                            74	#53:   Muhammad Suliman              vismun        Vector Informatik GmbH
                            75	#54: -----------------------------------------------------------------------------------------------------------------------
                            76	#55:   REVISION HISTORY
                            77	#56:  ----------------------------------------------------------------------------------------------------------------------
                            78	#57:   Version   Date        Author  Description
                            79	#58:   --------  ----------  ------  ---------------------------------------------------------------------------------------
                            80	#59:   01.00.00  2015-05-05  vissns  New creation, based on zBrs_Mpc@root[3.09.04],
                            81	#60:                                 according to template for BrsHw Codestyle 2.0
                            82	#61:             2015-07-09  vishan  Added support for Quasar2 and McKinley Cut2
                            83	#62:                                 Added support for Evalboard VEBN01387
                            84	#63:             2015-07-20  visbwa  Review
                            85	#64:   01.00.01  2015-08-05  vistir  Added support for MPC5746C
                            86	#65:   01.00.02  2015-08-12  vistir  Added support for MPC5746R
                            87	#66:   01.00.03  2015-09-15  visntr  Fixed PllInit for MPC5746R (no aux-clock 7), removed include of BrsHw_IsrDef.h
                            88	#67:   01.00.04  2015-09-29  visfsn  Added BRSHW_USERMODE_ACCESS_GROUP_B for MPC5746B
                            89	#68:   01.00.05  2015-12-09  vislnn  Added SIU_GROUP_H and SIU_GROUP_I (empty, as HW not available yet)
                            90	#69:   01.00.06  2015-12-09  visjhr  Added support for PC580020/Quasar2 and VEN01473 (LED + CAN), fixed typo in BrsHw.h,
                            91	#70:                                 fixed prescaler value for emiosA system timer
                            92	#71:   01.00.07  2015-12-14  visjhr  Fixed CAN1,2,3 port config for SIU_GROUP_A, added CAN port config for S32R274
                            93	#72:   01.00.08  2015-12-23  visjhr  Finalized S32R support
                            94	#73:                         visvnn  Addded support for SPC574K
                            95	#74:                         visbwa  Review
                            96	#75:   01.00.09  2016-01-14  visvnn  Reworked CAN-pins for SPC574K
                            97	#76:   01.00.10  2016-02-23  viskvr  Fixed define-statement for BRSHW_INTERRUPT_TABLE_GROUP_B
                            98	#77:   01.00.11  2016-02-29  viskvr  Removed C_ENABLE_CAN_INTERRUPT within BRSHW_INTERRUPT_TABLE_GROUP_B
                            99	#78:   01.00.12  2016-03-14  vispys  Fixed wrapper for old DrvCan/DrvLin versions @ SafeContext

                                   Fri Apr 10 08:31:37 2020           Page 3
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                           100	#79:   01.00.13  2016-03-22  visbwa  Removed wrong Reset Generation Module (RGM) register definitions,
                           101	#80:                                 fixed Fr/Lin clock init for BRSHW_FMPLL_GROUP_A_2,
                           102	#81:                                 fixed PLL0-init within BRSHW_FMPLL_GROUP_A with BRSHW_OPMODES_GROUP_NONE
                           103	#82:   01.00.14  2016-03-22  vismin  Added support for PC580000/Quasar0 and VEBN01655
                           104	#83:   01.00.15  2016-03-30  visbwa  Fixed DrvCan Pin settings for BRSHW_SIU_GROUP_A (IMUX)
                           105	#84:   01.00.16  2016-03-31  vismin  Finalized VEBN01655 support and fixed TIMER_GROUP_B ISR priority
                           106	#85:   01.00.17  2016-04-07  visbwa  Fixed CAN Interrupt initialization for BRSHW_INTERRUPT_TABLE_GROUP_D
                           107	#86:   01.00.18  2016-04-19  visbwa  Fixed PBRIDGE0_BASE address of BRSHW_USERMODE_ACCESS_GROUP_A
                           108	#87:   01.00.19  2016-04-27  visbwa  Added SIU_IMCR for BRSHW_SIU_GROUP_A, added BRSHW_USERMODE_ACCESS_GROUP_C
                           109	#88:   01.00.20  2016-04-27  vissmd  FlexRay pins for BRSHW_SIU_GROUP_A verified
                           110	#89:   01.01.00  2016-07-01  visbwa  Review according to Brs_Template 2.00.02
                           111	#90:   01.01.01  2016-07-04  virrro  Introduced BRSHW_USERMODE_ACCESS_GROUP_A1 (S32R)
                           112	#91:   01.01.02  2016-10-21  vismaa  Added support for PC582101/Quasar2e and blinking LED support for HSR165
                           113	#92:   01.01.03  2016-11-11  visbwa  Added PortPins for DrvLin ch.6 to ch.9 within BRSHW_SIU_GROUP_E
                           114	#93:   01.01.04  2016-11-15  visbwa  Fixed port initialization (SIU_MSCR instead of outdates SIU_PCR)
                           115	#94:   01.02.00  2016-12-21  viswca  Introduced TCM support and BrsHw_Ports.h
                           116	#95:             2017-01-20  visbwa  Review
                           117	#96:   01.02.01  2017-02-01  visbwa  Fixed BrsHwSwitchRunMode() to enter RESET mode if HW booted in SAFE mode
                           118	#97:   01.02.02  2017-02-08  visbwa  Added Os_CoreGen7 support (check within header file)
                           119	#98:   01.02.03  2017-03-14  visydg  Fixed PLL initialization for MPC5777M within FMPLL_GROUP_A_1,
                           120	#99:                                 added DrvFr pin configuration for BRSHW_SIU_GROUP_C
                           121	#100:   01.02.04  2017-05-12  visbwa  Removed limitation of i within BrsHwConfigureInterruptsAtPowerOn()
                           122	#101:   01.03.00  2017-07-07  visivg  Started BrsHw_Ports.h concept according to Brs_Template 2.01.00,
                           123	#102:                                 fixed support for SPC574Sx
                           124	#103:             2017-07-07  visbwa  Review
                           125	#104:   01.03.01  2017-07-11  visivg  Fixed BrsHwInitPortConfig()
                           126	#105:   01.03.02  2017-07-12  visivg  Reworked embracements within Port helper functions to solve runtime issues
                           127	#106:   01.03.03  2017-07-17  visivg  Fixed macro names for port pins and defined BRSHW_PORT_ETH0_MDIO as Input/Output pin
                           128	#107:   01.03.04  2017-08-11  vismaa  Added MPC5745R support
                           129	#108:   01.03.05  2017-08-14  visivg  Defined BrsHwInitPortConfig() for SIU Group B
                           130	#109:   01.04.00  2017-08-28  visivg  Added support for GnuGcc compiler, renamed BRS_COMP_GNU into BRS_COMP_HIGHTEC,
                           131	#110:                                 enabled Software Vector Mode for IRQ Table Group E
                           132	#111:   01.04.01  2017-09-14  virrro  Added BRSHW_USERMODE_ACCESS_GROUP_D
                           133	#112:   01.04.02  2017-10-09  virrro  Moved SWT0 + STM OPACR registers into BRSHW_USERMODE_ACCESS_GROUP_A/A1
                           134	#113:   01.04.03  2017-10-27  vismin  Fixed PLL Init for BRSHW_SIU_GROUP_B (MPC5777C)
                           135	#114:   01.04.04  2017-10-25  vismaa  Enabled all cores for S32R274 in RUN0
                           136	#115:   01.04.05  2017-11-14  vismaa  Added new CAN include for use of 2 CAN cells
                           137	#116:   01.04.06  2017-11-17  vismaa  Added MCAN support in BrsHwConfigureInterruptsAtPowerOn()
                           138	#117:             2017-11-22  visbwa  Review, added configuration check for MCAN configuration
                           139	#118:   01.04.07  2018-01-30  visbwa  Removed buggy setting of CGM_AC2_SC and CGM_AC2_DC0 for BRSHW_FMPLL_GROUP_A_3
                           140	#119:   01.04.08  2018-02-14  vismun  Moved assembler command redefinition from BrsStartup.c and BrsIntTb.c to BrsHw.h
                           141	#120:   01.05.00  2018-03-20  vismaa  Added FBL support (Brs_Template 2.02.01), implemented BrsHwSoftwareResetECU() from FBL
                           142	#121:   01.05.01  2018-04-04  visbwa  Fixed MemMap encapsulation of BrsHwPort_SetLevel(),
                           143	#122:                                 added while-loop to BrsHwSoftwareResetECU()
                           144	#123:   01.05.02  2018-04-10  vismaa  Added __eabi() definition for GnuGCC
                           145	#124:             2018-07-12  virrro  Added OPACR register setting for BRSHW_USERMODE_ACCESS_GROUP_D and LIN channel 0
                           146	#125:   01.05.03  2018-07-25  virrro  Added OPACR register setting for BRSHW_USERMODE_ACCESS_GROUP_D and CAN channel 2
                           147	#126: **********************************************************************************************************************/
                           148	#128: /**********************************************************************************************************************
                           149	#129: *  EXAMPLE CODE ONLY
                           150	#130: *  -------------------------------------------------------------------------------------------------------------------
                           151	#131: *  This Example Code is only intended for illustrating an example of a possible BSW integration and BSW configuration.
                           152	#132: *  The Example Code has not passed any quality control measures and may be incomplete. The Example Code is neither
                           153	#133: *  intended nor qualified for use in series production. The Example Code as well as any of its modifications and/or
                           154	#134: *  implementations must be tested with diligent care and must comply with all quality requirements which are necessary
                           155	#135: *  according to the state of the art before their use.

                                   Fri Apr 10 08:31:37 2020           Page 4
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                           156	#136: *********************************************************************************************************************/
                           157	#138: /**********************************************************************************************************************
                           158	#139:   INCLUDES
                           159	#140: **********************************************************************************************************************/
                           160	#141: /*
                           161	#142:  * Description: The BrsHw header provides all the necessary interfaces to
                           162	#143:  *              the microcontroller hardware features like ports, timers, LEDs, ...
                           163	#144:  */
                           164	#145: #include "BrsHw.h"
                           165	#147: #if defined (VGEN_ENABLE_CAN_DRV)
                           166	#148: # if defined (VGEN_ENABLE_IF_ASRIFCAN)
                           167	#149:   /*Autosar component*/
                           168	#150: #  if defined (BRSHW_USED_CANCELL_DEFAULT)
                           169	#151:   /* #include "Can.h" */
                           170	#152: #  endif
                           171	#153: #  if defined (BRSHW_USED_CANCELL_MCAN)
                           172	#154:   #include "Can_30_Mcan.h"
                           173	#155: #   if !defined (kCan_30_McanPhysToLogChannelIndex_0) && !defined (kCan_30_McanPhysToLogChannelIndex_1)
                           174	#156:   #error "Could not detect DrvMCan channel configuration automatically. Please define here manually, which channel is used within your configuration."
                           175	#157:   /*#define kCan_30_McanPhysToLogChannelIndex_0*/
                           176	#158:   /*#define kCan_30_McanPhysToLogChannelIndex_1*/
                           177	#159: #   endif
                           178	#160: #  endif /*BRSHW_USED_CANCELL_MCAN*/
                           179	#161: #  if defined (BRSASR_ENABLE_SAFECTXSUPPORT)
                           180	#162:   /* Necessary for WRAPPER FOR OLD DRVCAN IMPLEMENTATIONS (previous to MSR4 R11) */
                           181	#163:   #include "CanIf_Cfg.h"
                           182	#164: #  endif
                           183	#165: # else
                           184	#166:   /*CANbedded component*/
                           185	#167:   #include "can_inc.h"
                           186	#168: # endif
                           187	#169: #endif
                           188	#171: #if defined (VGEN_ENABLE_LIN_DRV)
                           189	#172: # if defined (VGEN_ENABLE_IF_ASRIFLIN)
                           190	#173:   /*Autosar component*/
                           191	#174:   #include "Lin.h"
                           192	#175: # else
                           193	#176:   /*CANbedded component*/
                           194	#177:   #include "lin_api.h"
                           195	#178:   #include "sio_par.h"
                           196	#179: # endif
                           197	#180: #endif
                           198	#182: #if defined (VGEN_ENABLE_DRVFR__BASEASR)
                           199	#183:   #include "Fr.h"
                           200	#184: # if !defined (FR_CHANNEL_A_USED) && !defined (FR_CHANNEL_B_USED)
                           201	#185:   #error "Could not detect DrvFr channel configuration automatically. Please define here manually, which channel is used within your configuration."*/
                           202	#186:   /*#define FR_CHANNEL_A_USED STD_ON*/
                           203	#187:   /*#define FR_CHANNEL_B_USED STD_ON*/
                           204	#188: # endif
                           205	#189: #endif
                           206	#191: #if defined (VGEN_ENABLE_DRVETH__BASEASR)
                           207	#192:   #include "Eth.h"
                           208	#193: #endif
                           209	#195: #if defined (BRS_OS_USECASE_BRS) && !defined (BRS_ENABLE_FBL_SUPPORT)
                           210	#196: /*
                           211	#197:  * Description: The BrsMain header provides all the necessary interfaces to

                                   Fri Apr 10 08:31:37 2020           Page 5
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                           212	#198:  *              the BRS main file (BrsMainExceptionHandler, gbBrsMainIsrMilliSecondFlag).
                           213	#199:  *              This file is part of the BRS.
                           214	#200:  */
                           215	#201:   #include "BrsMain.h"
                           216	#203:   /* All ISR function definitions are set within this separate header */
                           217	#204:   /*visbwa: do not use this include here. Otherwise, DummyInterrupt mechanism will not work properly */
                           218	#205:   /*#include "BrsHw_IsrDef.h"*/
                           219	#206: #endif
                           220	#208: #if !defined (VGEN_ENABLE_DRVPORT)
                           221	#209:   #include "BrsHw_Ports.h"
                           222	#210: #endif
                           223	#212: #if defined (VGEN_ENABLE_DRVDIO)
                           224	#213: # if defined (BRS_ENABLE_SUPPORT_LEDS)          || \
                           225	#214:      defined (BRS_ENABLE_SUPPORT_TOGGLE_WD_PIN) || \
                           226	#215:      defined (BRS_ENABLE_SUPPORT_TOGGLE_CUSTOM_PIN)
                           227	#216:   #include "Dio.h"
                           228	#217: #  if defined (VGEN_ENABLE_DRVPORT)
                           229	#218:   #define BRSHW_PORT_LOGIC_HIGH STD_HIGH
                           230	#219:   #define BRSHW_PORT_LOGIC_LOW STD_LOW
                           231	#220: #  else
                           232	#221:   #error "LED alive mechanism and MCAL does only work proper if DrvPort and DrvDio are used together!"
                           233	#222: #  endif
                           234	#223: # endif /*BRS_ENABLE_SUPPORT_LEDS||BRS_ENABLE_SUPPORT_TOGGLE_WD_PIN||BRS_ENABLE_SUPPORT_TOGGLE_CUSTOM_PIN*/
                           235	#224: #else
                           236	#225: # if defined (VGEN_ENABLE_DRVPORT)
                           237	#226: #  if defined (BRS_ENABLE_SUPPORT_LEDS)          || \
                           238	#227:       defined (BRS_ENABLE_SUPPORT_TOGGLE_WD_PIN) || \
                           239	#228:       defined (BRS_ENABLE_SUPPORT_TOGGLE_CUSTOM_PIN)
                           240	#229:   #error "LED alive mechanism and MCAL does only work proper if DrvPort and DrvDio are used together!"
                           241	#230: #  endif
                           242	#231: # endif /*VGEN_ENABLE_DRVPORT*/
                           243	#232: #endif /*VGEN_ENABLE_DRVDIO*/
                           244	#234: /**********************************************************************************************************************
                           245	#235:   VERSION CHECK
                           246	#236: **********************************************************************************************************************/
                           247	#237: #if (BRSHW_VERSION != 0x0105u)
                           248	#238:   #error "Header and source file are inconsistent!"
                           249	#239: #endif
                           250	#240: #if (BRSHW_BUGFIX_VERSION != 0x03u)
                           251	#241:   #error "Different versions of bugfix in Header and Source used!"
                           252	#242: #endif
                           253	#244: /**********************************************************************************************************************
                           254	#245:   CONFIGURATION CHECK
                           255	#246: **********************************************************************************************************************/
                           256	#247: #if defined (BRS_COMP_GHS)     
                           257	#249: #else
                           258	#250:   #error "Unknown compiler specified!"
                           259	#251: #endif
                           260	#253: /**********************************************************************************************************************
                           261	#254:   DEFINITION + MACROS
                           262	#255: **********************************************************************************************************************/
                           263	#257: /**********************************************************************************************************************
                           264	#258:   GLOBAL VARIABLES
                           265	#259: **********************************************************************************************************************/
                           266	#261: /**********************************************************************************************************************
                           267	#262:   GLOBAL CONST VARIABLES

                                   Fri Apr 10 08:31:37 2020           Page 6
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                           268	#263: **********************************************************************************************************************/
                           269	#264: /*
                           270	#265:  * Description: These constants are used to propagate the Versions over
                           271	#266:  *              module boundaries.The version numbers are BCD coded. E.g. a sub
                           272	#267:  *              version of 23 is coded with 0x23, a bug fix version of 9 is
                           273	#268:  *              coded 0x09.
                           274	#269:  */
                           275	#270: uint8 const kBrsHwMainVersion   = (uint8)(BRSHW_VERSION >> 8);
                           276	#271: uint8 const kBrsHwSubVersion    = (uint8)(BRSHW_VERSION & 0xFF);
                           277	#272: uint8 const kBrsHwBugfixVersion = (uint8)(BRSHW_BUGFIX_VERSION);
                           278	#274: /**********************************************************************************************************************
                           279	#275:   LOCAL VARIABLES AND LOCAL HW REGISTERS
                           280	#276: **********************************************************************************************************************/
                           281	#277: /*
                           282	#278:  * Description: This counter is used to count the number of nested calls to
                           283	#279:  *              disable and restore the state of the global INT enable bit.
                           284	#280:  *              Please note: This variable is used only in this file.
                           285	#281:  * Values     : 0 if no BrsHwDisableInterrupt is called and INT is allowed by the
                           286	#282:  *              BRS. Value > 0 if INT is locked by the BRS interrupt control API.
                           287	#283:  */
                           288	#284: static uint8 bBrsHwIntDiCounter;
                           289	#286: #if defined (BRSHW_ENABLE_ISR_SW_DISPATCHING)
                           290	#287:   extern void (*intvect_ExtExceptions[])();
                           291	#288: #endif
                           292	#290: /**********************************************************************************************************************
                           293	#291:   CONTROLLER CONFIGURATION REGISTERS
                           294	#292: **********************************************************************************************************************/
                           295	#293: /***********************************************/
                           296	#294: /* PLL / CGM / RGM registers                   */
                           297	#295: /***********************************************/
                           298	#296: #if defined (BRSHW_FMPLL_GROUP_A) || defined (BRSHW_FMPLL_GROUP_A_1) || defined (BRSHW_FMPLL_GROUP_A_2) || defined (BRSHW_FMPLL_GROUP_A_3)
                           299	#297: # if defined (BRSHW_FMPLL_GROUP_A_1)
                           300	#298:   #define BRSHW_FMPLL_GROUP_A BRSHW_FMPLL_GROUP_A_1
                           301	#299: # endif
                           302	#300: # if defined (BRSHW_FMPLL_GROUP_A_2)
                           303	#301:   #define BRSHW_FMPLL_GROUP_A BRSHW_FMPLL_GROUP_A_2
                           304	#302: # endif
                           305	#303: # if defined (BRSHW_FMPLL_GROUP_A_3)
                           306	#304:   #define BRSHW_FMPLL_GROUP_A BRSHW_FMPLL_GROUP_A_3
                           307	#305: # endif
                           308	#307:   #define FMPLL_BASE_ADDR BRSHW_FMPLL_GROUP_A
                           309	#309:   #define PLL0CR   BRSHW_IOS(uint32, FMPLL_BASE_ADDR + 0x00) /* PLL0 Control Register */
                           310	#310:   #define PLL0SR   BRSHW_IOS(uint32, FMPLL_BASE_ADDR + 0x04) /* PLL0 Status Register */
                           311	#311:   #define PLL0DV   BRSHW_IOS(uint32, FMPLL_BASE_ADDR + 0x08) /* PLL0 Divider Register */
                           312	#312:   #define PLL1CR   BRSHW_IOS(uint32, FMPLL_BASE_ADDR + 0x20) /* PLL1 Control Register */
                           313	#313:   #define PLL1SR   BRSHW_IOS(uint32, FMPLL_BASE_ADDR + 0x24) /* PLL1 Status Register */
                           314	#314:   #define PLL1DV   BRSHW_IOS(uint32, FMPLL_BASE_ADDR + 0x28) /* PLL1 Divider Register */
                           315	#316: # if defined (BRSHW_OPMODES_GROUP_A)
                           316	#317:   /* Clock Generation Module (CGM) */
                           317	#318: #  if defined (BRS_DERIVATIVE_PC580000x) || defined (BRS_DERIVATIVE_PC580002x) || defined (BRS_DERIVATIVE_PC580003x) || defined (BRS_DERIVATIVE_PC582101) 
                           318	#319:   #define CGM_BASE_ADDR 0xFFFF0000
                           319	#320: #  else
                           320	#321:   #define CGM_BASE_ADDR 0xFFFB0000
                           321	#322: #  endif
                           322	#324:   #define CGM_AC0_SC   BRSHW_IOS(uint32, CGM_BASE_ADDR + 0x0800)  /* Auxiliary Clock 0 Select Control Register */
                           323	#325:   #define CGM_AC0_SS   BRSHW_IOS(uint32, CGM_BASE_ADDR + 0x0804)  /* Auxiliary Clock 0 Select Status Register */

                                   Fri Apr 10 08:31:37 2020           Page 7
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                           324	#326:   #define CGM_AC0_DC0  BRSHW_IOS(uint32, CGM_BASE_ADDR + 0x0808)  /* Auxiliary Clock 0 Divider 0 Configuration Register */
                           325	#327:   #define CGM_AC0_DC1  BRSHW_IOS(uint32, CGM_BASE_ADDR + 0x080C)  /* Auxiliary Clock 0 Divider 1 Configuration Register */
                           326	#328:   #define CGM_AC0_DC2  BRSHW_IOS(uint32, CGM_BASE_ADDR + 0x0810)  /* Auxiliary Clock 0 Divider 2 Configuration Register */
                           327	#329:   #define CGM_AC0_DC3  BRSHW_IOS(uint32, CGM_BASE_ADDR + 0x0814)  /* Auxiliary Clock 0 Divider 3 Configuration Register */
                           328	#330:   #define CGM_AC0_DC4  BRSHW_IOS(uint32, CGM_BASE_ADDR + 0x0818)  /* Auxiliary Clock 0 Divider 4 Configuration Register */
                           329	#331:   #define CGM_AC0_DC5  BRSHW_IOS(uint32, CGM_BASE_ADDR + 0x081C)  /* Auxiliary Clock 0 Divider 5 Configuration Register */
                           330	#333:   #define CGM_AC1_SC   BRSHW_IOS(uint32, CGM_BASE_ADDR + 0x0820)  /* Auxiliary Clock 1 Select Control Register */
                           331	#334:   #define CGM_AC1_SS   BRSHW_IOS(uint32, CGM_BASE_ADDR + 0x0824)  /* Auxiliary Clock 1 Select Status Register */
                           332	#335:   #define CGM_AC1_DC0  BRSHW_IOS(uint32, CGM_BASE_ADDR + 0x0828)  /* Auxiliary Clock 1 Divider 0 Configuration */
                           333	#336:   #define CGM_AC1_DC1  BRSHW_IOS(uint32, CGM_BASE_ADDR + 0x082C)  /* Auxiliary Clock 1 Divider 1 Configuration */
                           334	#338:   #define CGM_AC2_SC   BRSHW_IOS(uint32, CGM_BASE_ADDR + 0x0840)  /* Auxiliary Clock 2 Select Control Register */
                           335	#339:   #define CGM_AC2_SS   BRSHW_IOS(uint32, CGM_BASE_ADDR + 0x0844)  /* Auxiliary Clock 2 Select Status Register */
                           336	#340:   #define CGM_AC2_DC0  BRSHW_IOS(uint32, CGM_BASE_ADDR + 0x0848)  /* Auxiliary Clock 2 Divider Control Register */
                           337	#342:   #define CGM_AC3_SC   BRSHW_IOS(uint32, CGM_BASE_ADDR + 0x0860)  /* Auxiliary Clock 3 Select Control Register */
                           338	#343:   #define CGM_AC3_SS   BRSHW_IOS(uint32, CGM_BASE_ADDR + 0x0864)  /* Auxiliary Clock 3 Select Status Register */
                           339	#345:   #define CGM_AC4_SC   BRSHW_IOS(uint32, CGM_BASE_ADDR + 0x0880)  /* Auxiliary Clock 4 Select Control Register */
                           340	#346:   #define CGM_AC5_SC   BRSHW_IOS(uint32, CGM_BASE_ADDR + 0x08A0)  /* Auxiliary Clock 5 Select Control Register */
                           341	#347:   #define CGM_AC6_SC   BRSHW_IOS(uint32, CGM_BASE_ADDR + 0x08C0)  /* Auxiliary Clock 6 Select Control Register */
                           342	#348:   #define CGM_AC6_DC0  BRSHW_IOS(uint32, CGM_BASE_ADDR + 0x08C8)  /* Auxiliary Clock 6 Divider Configuration Register */
                           343	#349:   #define CGM_AC7_SC   BRSHW_IOS(uint32, CGM_BASE_ADDR + 0x08E0)  /* Auxiliary Clock 7 Select Control Register */
                           344	#350:   #define CGM_AC7_DC0  BRSHW_IOS(uint32, CGM_BASE_ADDR + 0x08E8)  /* Auxiliary Clock 7 Divider Configuration Register */
                           345	#351:   #define CGM_AC8_SC   BRSHW_IOS(uint32, CGM_BASE_ADDR + 0x0900)  /* Auxiliary Clock 8 Select Control Register */
                           346	#352:   #define CGM_AC8_DC0  BRSHW_IOS(uint32, CGM_BASE_ADDR + 0x0908)  /* Auxiliary Clock 8 Divider Configuration Register */
                           347	#353:   #define CGM_AC9_SC   BRSHW_IOS(uint32, CGM_BASE_ADDR + 0x0920)  /* Auxiliary Clock 9 Select Control Register */
                           348	#354:   #define CGM_AC9_DC0  BRSHW_IOS(uint32, CGM_BASE_ADDR + 0x0928)  /* Auxiliary Clock 9 Divider Configuration Register */
                           349	#355:   #define CGM_AC15_SC  BRSHW_IOS(uint32, CGM_BASE_ADDR + 0x09E0)  /* Auxiliary Clock 15 Select Control Register */
                           350	#356:   #define CGM_AC15_DC0 BRSHW_IOS(uint32, CGM_BASE_ADDR + 0x09E8)  /* Auxiliary Clock 15 Divider Configuration Register */
                           351	#358:   #define CGM_SC_SS    BRSHW_IOS(uint32, CGM_BASE_ADDR + 0x07E4)  /* System Clock Select Status Register */
                           352	#359:   #define CGM_SC_DC0   BRSHW_IOS(uint32, CGM_BASE_ADDR + 0x07E8)  /* System Clock Divider 0 Configuration Register */
                           353	#360:   #define CGM_SC_DC1   BRSHW_IOS(uint32, CGM_BASE_ADDR + 0x07EC)  /* System Clock Divider 1 Configuration Register */
                           354	#361:   #define CGM_SC_DC2   BRSHW_IOS(uint32, CGM_BASE_ADDR + 0x07F0)  /* Core2 System Clock Divider Configuration Register */
                           355	#362:   #define CGM_SC_DC3   BRSHW_IOS(uint32, CGM_BASE_ADDR + 0x07F4)
                           356	#363:   #define CGM_SC_DC4   BRSHW_IOS(uint32, CGM_BASE_ADDR + 0x07F8)
                           357	#365:   #define CGM_SC_DIV_RC     BRSHW_IOS(uint32, CGM_BASE_ADDR+0x7D0)
                           358	#366:   #define CGM_DIV_UPD_TYPE  BRSHW_IOS(uint32, CGM_BASE_ADDR+0x7D4)
                           359	#367:   #define CGM_DIV_UPD_TRIG  BRSHW_IOS(uint32, CGM_BASE_ADDR+0x7D8)
                           360	#368:   #define CGM_DIV_UPD_STAT  BRSHW_IOS(uint32, CGM_BASE_ADDR+0x7DC)
                           361	#369: # endif /*BRSHW_OPMODES_GROUP_A*/
                           362	#371: #  if defined (BRSHW_OPMODES_GROUP_B)
                           363	#372:   /* Clock Generation Module (CGM) */
                           364	#373:   #define CGM_BASE_ADDR 0xFFFB0600
                           365	#375:   #define CGM_AC0_SC   BRSHW_IOS(uint32, CGM_BASE_ADDR + 0x0200)  /* Auxiliary Clock 0 Select Control Register */
                           366	#376:   #define CGM_AC0_SS   BRSHW_IOS(uint32, CGM_BASE_ADDR + 0x0204)  /* Auxiliary Clock 0 Select Status Register */
                           367	#377:   #define CGM_AC0_DC0  BRSHW_IOS(uint32, CGM_BASE_ADDR + 0x0208)  /* Auxiliary Clock 0 Divider 0 Configuration Register */
                           368	#378:   #define CGM_AC0_DC1  BRSHW_IOS(uint32, CGM_BASE_ADDR + 0x020C)  /* Auxiliary Clock 0 Divider 1 Configuration Register */
                           369	#379:   #define CGM_AC0_DC2  BRSHW_IOS(uint32, CGM_BASE_ADDR + 0x0210)  /* Auxiliary Clock 0 Divider 2 Configuration Register */
                           370	#380:   #define CGM_AC0_DC3  BRSHW_IOS(uint32, CGM_BASE_ADDR + 0x0214)  /* Auxiliary Clock 0 Divider 3 Configuration Register */
                           371	#381:   #define CGM_AC0_DC4  BRSHW_IOS(uint32, CGM_BASE_ADDR + 0x0218)  /* Auxiliary Clock 0 Divider 4 Configuration Register */
                           372	#383:   #define CGM_AC1_SC   BRSHW_IOS(uint32, CGM_BASE_ADDR + 0x0220)  /* Auxiliary Clock 1 Select Control Register */
                           373	#384:   #define CGM_AC1_SS   BRSHW_IOS(uint32, CGM_BASE_ADDR + 0x0224)  /* Auxiliary Clock 1 Select Status Register */
                           374	#385:   #define CGM_AC1_DC0  BRSHW_IOS(uint32, CGM_BASE_ADDR + 0x0228)  /* Auxiliary Clock 1 Divider 0 Configuration */
                           375	#387:   #define CGM_AC2_DC0  BRSHW_IOS(uint32, CGM_BASE_ADDR + 0x0248)  /* Auxiliary Clock 2 Divider 0 Control Register */
                           376	#388:   #define CGM_AC2_DC1  BRSHW_IOS(uint32, CGM_BASE_ADDR + 0x024C)  /* Auxiliary Clock 2 Divider 1 Control Register */
                           377	#390:   #define CGM_AC3_SC   BRSHW_IOS(uint32, CGM_BASE_ADDR + 0x0260)  /* Auxiliary Clock 3 Select Control Register */
                           378	#391:   #define CGM_AC3_SS   BRSHW_IOS(uint32, CGM_BASE_ADDR + 0x0264)  /* Auxiliary Clock 3 Select Status Register */
                           379	#393:   #define CGM_AC4_SC   BRSHW_IOS(uint32, CGM_BASE_ADDR + 0x0280)  /* Auxiliary Clock 4 Select Control Register */

                                   Fri Apr 10 08:31:37 2020           Page 8
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                           380	#394:   #define CGM_AC4_SS   BRSHW_IOS(uint32, CGM_BASE_ADDR + 0x0284)  /* Auxiliary Clock 4 Select Control Register */
                           381	#396:   #define CGM_AC5_DC0  BRSHW_IOS(uint32, CGM_BASE_ADDR + 0x02A8)  /* Auxiliary Clock 5 Divider 0 Control Register */
                           382	#397:   #define CGM_AC5_DC1  BRSHW_IOS(uint32, CGM_BASE_ADDR + 0x02AC)  /* Auxiliary Clock 5 Divider 1 Control Register */
                           383	#398:   #define CGM_AC5_DC2  BRSHW_IOS(uint32, CGM_BASE_ADDR + 0x02B0)  /* Auxiliary Clock 5 Divider 2 Control Register */
                           384	#400:   #define CGM_AC6_SC   BRSHW_IOS(uint32, CGM_BASE_ADDR + 0x02C0)  /* Auxiliary Clock 6 Select Control Register */
                           385	#401:   #define CGM_AC6_SS   BRSHW_IOS(uint32, CGM_BASE_ADDR + 0x02C4)  /* Auxiliary Clock 6 Select Status Register */
                           386	#402:   #define CGM_AC6_DC0  BRSHW_IOS(uint32, CGM_BASE_ADDR + 0x02C8)  /* Auxiliary Clock 6 Divider Configuration Register */
                           387	#404:   #define CGM_AC7_SC   BRSHW_IOS(uint32, CGM_BASE_ADDR + 0x02E0)  /* Auxiliary Clock 7 Select Control Register */
                           388	#405:   #define CGM_AC7_SS   BRSHW_IOS(uint32, CGM_BASE_ADDR + 0x02E4)  /* Auxiliary Clock 7 Select Status Register */
                           389	#406:   #define CGM_AC7_DC0  BRSHW_IOS(uint32, CGM_BASE_ADDR + 0x02E8)  /* Auxiliary Clock 7 Divider Configuration Register */
                           390	#408:   #define CGM_AC8_SC   BRSHW_IOS(uint32, CGM_BASE_ADDR + 0x0300)  /* Auxiliary Clock 8 Select Control Register */
                           391	#409:   #define CGM_AC8_SS   BRSHW_IOS(uint32, CGM_BASE_ADDR + 0x0304)  /* Auxiliary Clock 8 Select Status Register */
                           392	#410:   #define CGM_AC8_DC0  BRSHW_IOS(uint32, CGM_BASE_ADDR + 0x0308)  /* Auxiliary Clock 8 Divider Configuration Register */
                           393	#412:   #define CGM_AC9_SC   BRSHW_IOS(uint32, CGM_BASE_ADDR + 0x0320)  /* Auxiliary Clock 9 Select Control Register */
                           394	#413:   #define CGM_AC9_SS   BRSHW_IOS(uint32, CGM_BASE_ADDR + 0x0324)  /* Auxiliary Clock 9 Select Status Register */
                           395	#414:   #define CGM_AC9_DC0  BRSHW_IOS(uint32, CGM_BASE_ADDR + 0x0328)  /* Auxiliary Clock 9 Divider Configuration Register */
                           396	#416:   #define CGM_AC10_SC  BRSHW_IOS(uint32, CGM_BASE_ADDR + 0x0340)  /* Auxiliary Clock 10 Select Control Register */
                           397	#417:   #define CGM_AC10_SS  BRSHW_IOS(uint32, CGM_BASE_ADDR + 0x0344)  /* Auxiliary Clock 10 Select Status Register */
                           398	#418:   #define CGM_AC10_DC0 BRSHW_IOS(uint32, CGM_BASE_ADDR + 0x0348)  /* Auxiliary Clock 10 Divider Configuration Register */
                           399	#420:   #define CGM_SC_SS    BRSHW_IOS(uint32, CGM_BASE_ADDR + 0x01E4)  /* System Clock Select Status Register */
                           400	#421:   #define CGM_SC_DC0   BRSHW_IOS(uint32, CGM_BASE_ADDR + 0x01E8)  /* System Clock Divider 0 Configuration Register */
                           401	#422:   #define CGM_SC_DC1   BRSHW_IOS(uint32, CGM_BASE_ADDR + 0x01EC)  /* System Clock Divider 1 Configuration Register */
                           402	#423:   #define CGM_SC_DC2   BRSHW_IOS(uint32, CGM_BASE_ADDR + 0x01F0)  /* System Clock Divider 2 Configuration Register */
                           403	#425:   #define CGM_SC_DIV_RC     BRSHW_IOS(uint32, CGM_BASE_ADDR+0x1D0)
                           404	#426:   #define CGM_DIV_UPD_TYPE  BRSHW_IOS(uint32, CGM_BASE_ADDR+0x1D4)
                           405	#427:   #define CGM_DIV_UPD_TRIG  BRSHW_IOS(uint32, CGM_BASE_ADDR+0x1D8)
                           406	#428:   #define CGM_DIV_UPD_STAT  BRSHW_IOS(uint32, CGM_BASE_ADDR+0x1DC)
                           407	#429: # endif /*BRSHW_OPMODES_GROUP_B*/
                           408	#431: #elif defined (BRSHW_FMPLL_GROUP_B)
                           409	#432:   #define FMPLL_BASE_ADDR BRSHW_FMPLL_GROUP_B
                           410	#433:   #define PLL0CR   BRSHW_IOS(uint32, FMPLL_BASE_ADDR+0x20) /* PLL0 Control Register */
                           411	#434:   #define PLL0DV   BRSHW_IOS(uint32, FMPLL_BASE_ADDR+0x28) /* PLL0 Divider Register */
                           412	#435:   #define PLLCAL3  BRSHW_IOS(uint32, FMPLL_BASE_ADDR+0x18)
                           413	#436:   #define PLLFD    BRSHW_IOS(uint32, FMPLL_BASE_ADDR+0x30)
                           414	#438: # if defined (BRSHW_OPMODES_GROUP_A)
                           415	#439:   /* Clock Generation Module */
                           416	#440:   #define CGM_BASE_ADDR   0xFFFB0000
                           417	#441:   #define CGM_SC_DC       BRSHW_IOS(uint32, CGM_BASE_ADDR+0x7E8)   /* System Clock Divider Configuration Register */
                           418	#442:   #define CGM_SC_DC2      BRSHW_IOS(uint32, CGM_BASE_ADDR+0x7F0)   /* Core2 System Clock Divider Configuration Register */
                           419	#443:   #define CGM_AC0_SC      BRSHW_IOS(uint32, CGM_BASE_ADDR+0x800)   /* Auxiliary Clock 0 Select Control Register */
                           420	#444:   #define CGM_AC0_DC0     BRSHW_IOS(uint32, CGM_BASE_ADDR+0x808)   /* Auxiliary Clock 0 Divider Control Register */
                           421	#445:   #define CGM_AC0_DC4     BRSHW_IOS(uint32, CGM_BASE_ADDR+0x818)   /* Auxiliary Clock 0 Divider 4 Control Register */
                           422	#446:   #define CGM_AC3_SC      BRSHW_IOS(uint32, CGM_BASE_ADDR+0x860)   /* Auxiliary Clock 3 Select Control Register */
                           423	#447:   #define CGM_AC4_SC      BRSHW_IOS(uint32, CGM_BASE_ADDR+0x880)   /* Auxiliary Clock 4 Select Control Register */
                           424	#449: #  if (MPC5748G_CUT == 1)
                           425	#450:   #define CGM_AC5_SC      BRSHW_IOS(uint32, CGM_BASE_ADDR+0x8A0)   /* Auxiliary Clock 5 Select Control Register MPC5748G Cut1 */
                           426	#451: #  else
                           427	#452:   #define CGM_AC5_SC      BRSHW_IOS(uint32, CGM_BASE_ADDR+0x1C0)   /* Auxiliary Clock 5 Select Control Register */
                           428	#453: #  endif
                           429	#455:   #define CGM_AC6_SC      BRSHW_IOS(uint32, CGM_BASE_ADDR+0x8C0)   /* Auxiliary Clock 6 Select Control Register */
                           430	#456:   #define CGM_AC7_SC      BRSHW_IOS(uint32, CGM_BASE_ADDR+0x8E0)   /* Auxiliary Clock 7 Select Control Register */
                           431	#457:   #define CGM_AC8_SC      BRSHW_IOS(uint32, CGM_BASE_ADDR+0x900)   /* Auxiliary Clock 7 Select Control Register */
                           432	#458:   #define CGM_AC8_DC0     BRSHW_IOS(uint32, CGM_BASE_ADDR+0x908)   /* Auxiliary Clock 7 Select Control Register */
                           433	#459: # endif /*BRSHW_OPMODES_GROUP_A*/
                           434	#461: #elif defined (BRSHW_FMPLL_GROUP_NONE)
                           435	#463: #else

                                   Fri Apr 10 08:31:37 2020           Page 9
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                           436	#464:   #error "Unknown PLL Group. Please check your derivative settings within BrsHw_DerivativeList.h."
                           437	#465: #endif
                           438	#467: /***********************************************/
                           439	#468: /* SIU registers                               */
                           440	#469: /***********************************************/
                           441	#470: #if defined (BRSHW_SIU_GROUP_A)
                           442	#471:   #define SIU_BASE_ADDR BRSHW_SIU_GROUP_A
                           443	#472: #elif defined (BRSHW_SIU_GROUP_B)
                           444	#473:   #define SIU_BASE_ADDR BRSHW_SIU_GROUP_B
                           445	#474: #elif defined (BRSHW_SIU_GROUP_C)
                           446	#475:   #define SIU_BASE_ADDR BRSHW_SIU_GROUP_C
                           447	#476: #elif defined (BRSHW_SIU_GROUP_D_1)
                           448	#477:   #define SIU_BASE_ADDR BRSHW_SIU_GROUP_D_1
                           449	#478: #elif defined (BRSHW_SIU_GROUP_E)
                           450	#479:   #define SIU_BASE_ADDR BRSHW_SIU_GROUP_E
                           451	#480: #elif defined (BRSHW_SIU_GROUP_F)
                           452	#481:   #define SIU_BASE_ADDR BRSHW_SIU_GROUP_F
                           453	#482: #elif defined (BRSHW_SIU_GROUP_G)
                           454	#483:   #define SIU_BASE_ADDR BRSHW_SIU_GROUP_G
                           455	#484: #elif defined (BRSHW_SIU_GROUP_H)
                           456	#485:   #define SIU_BASE_ADDR BRSHW_SIU_GROUP_H
                           457	#486: #elif defined (BRSHW_SIU_GROUP_I)
                           458	#487:   #define SIU_BASE_ADDR BRSHW_SIU_GROUP_I
                           459	#488: #else
                           460	#489:   #error "Unknown SIU Group. Please check your derivative settings within BrsHw_DerivativeList.h."
                           461	#490: #endif
                           462	#492: #if defined (BRSHW_SIU_GROUP_B)
                           463	#493:   #define BRSHW_MSCR_SOURCE_SIGNAL_SELECT_1      0x0400
                           464	#494:   #define BRSHW_MSCR_SOURCE_SIGNAL_SELECT_2      0x0800
                           465	#495:   #define BRSHW_MSCR_SOURCE_SIGNAL_SELECT_3      0x0C00
                           466	#496:   #define BRSHW_MSCR_SOURCE_SIGNAL_SELECT_4      0x1000
                           467	#497:   #define BRSHW_PCR_PIN_ASSIGNMENT_GPIO_INPUT    0x0100
                           468	#498:   #define BRSHW_PCR_PIN_ASSIGNMENT_GPIO_OUTPUT   0x0200
                           469	#499:   #define BRSHW_PCR_USE_WEAK_PULLUP              0x0003
                           470	#500:   #define BRSHW_PCR_USE_WEAK_PULLDOWN            0x0002
                           471	#502:   #define SIU_MSCR(x) BRSHW_IOS(uint16, SIU_BASE_ADDR + 0x40 + (x*2))    /* Pad Configuration Register */
                           472	#503:   #define SIU_GPDO(x) BRSHW_IOS(uint8,  SIU_BASE_ADDR + 0x600 + x)       /* General Purpose Data Output Register */
                           473	#504:   #define SIU_GPDI(x) BRSHW_IOS(uint8,  SIU_BASE_ADDR + 0x800 + x)       /* General Purpose Data Input Register */
                           474	#505:   #define SIU_PSMI(x) BRSHW_IOS(uint8, SIU_BASE_ADDR + 0x500 + x)        /* Pad selection for multiplexed Inputs */
                           475	#506:   #define SIU_RSR     BRSHW_IOS(uint32, SIU_BASE_ADDR + 0x0C)            /* Reset Status Register */
                           476	#507:   #define SIU_SRCR    BRSHW_IOS(uint32, SIU_BASE_ADDR + 0x10)            /* System Reset Control Register */
                           477	#508:   #define SIU_EISR    BRSHW_IOS(uint32, SIU_BASE_ADDR + 0x14)            /* ext. IRQ status register */
                           478	#509:   #define SIU_DIRER   BRSHW_IOS(uint32, SIU_BASE_ADDR + 0x18)            /* ext. IRQ enable register */
                           479	#510:   #define SIU_IFEER   BRSHW_IOS(uint32, SIU_BASE_ADDR + 0x2c)            /* ext. IRQ: falling edge enable register */
                           480	#511:   #define SIU_SYSCLK  BRSHW_IOS(uint32, SIU_BASE_ADDR + 0x9A0)           /* System Clock Register */
                           481	#512:   #define SIU_IMUX(x) BRSHW_IOS(uint32, SIU_BASE_ADDR + 0x1200 + (4*x))  /* Input Multiplexing Registers */
                           482	#514: #else /*BRSHW_SIU_GROUP_B*/
                           483	#515:   #define BRSHW_PCR_PIN_ASSIGNMENT_GPIO_INPUT    0x00080000
                           484	#516: # if (MPC5748G_CUT == 1)
                           485	#517:   #define BRSHW_PCR_PIN_ASSIGNMENT_GPIO_OUTPUT   0x02000000
                           486	#518: # else
                           487	#519:   #define BRSHW_PCR_PIN_ASSIGNMENT_GPIO_OUTPUT   0x32000000 /* Output Impedance - very strong */
                           488	#520: # endif
                           489	#521:   #define BRSHW_MSCR_SOURCE_SIGNAL_SELECT_0      0x00000000
                           490	#522:   #define BRSHW_MSCR_SOURCE_SIGNAL_SELECT_1      0x00000001
                           491	#523:   #define BRSHW_MSCR_SOURCE_SIGNAL_SELECT_2      0x00000002

                                   Fri Apr 10 08:31:37 2020           Page 10
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                           492	#524:   #define BRSHW_MSCR_SOURCE_SIGNAL_SELECT_3      0x00000003
                           493	#525:   #define BRSHW_MSCR_SOURCE_SIGNAL_SELECT_4      0x00000004
                           494	#526:   #define BRSHW_MSCR_SOURCE_SIGNAL_SELECT_5      0x00000005
                           495	#527:   #define BRSHW_MSCR_SOURCE_SIGNAL_SELECT_8      0x00000008
                           496	#528:   #define BRSHW_MSCR_SOURCE_SIGNAL_SELECT_9      0x00000009
                           497	#530:   #define SIU_MSCR(x)  BRSHW_IOS(uint32, SIU_BASE_ADDR + 0x240 + (4*x))  /* SIUL2 Multiplexed Singnal Configuration Register */
                           498	#531: # if defined (BRSHW_SIU_GROUP_A)
                           499	#532:   #define SIU_IMCR(x)  BRSHW_IOS(uint32, SIU_BASE_ADDR + 0xA40 + (4*x))  /* SIUL2 Input Multiplexed Singnal Configuration Register*/
                           500	#533: # endif
                           501	#534:   #define SIU_GPDO(x)  BRSHW_IOS(uint8, SIU_BASE_ADDR + 0x1300 + x)      /* SIUL2 GPIO Pad Data Out */
                           502	#535:   #define SIU_GPDI(x)  BRSHW_IOS(uint8, SIU_BASE_ADDR + 0x1500 + x)      /* SIUL2 GPIO Pad Data In */
                           503	#536:   #define SIU_EISR     BRSHW_IOS(uint32, SIU_BASE_ADDR + 0x10)           /* ext. IRQ status register */
                           504	#537:   #define SIU_DIRER    BRSHW_IOS(uint32, SIU_BASE_ADDR + 0x18)           /* ext. IRQ enable register */
                           505	#538:   #define SIU_IFEER    BRSHW_IOS(uint32, SIU_BASE_ADDR + 0x30)           /* ext. IRQ: falling edge enable register */
                           506	#539:   #define SIU_MIDR1    BRSHW_IOS(uint32, SIU_BASE_ADDR + 0x04)
                           507	#540: # if defined (BRSHW_SIU_GROUP_D_2)
                           508	#541:   #define SIU_B_MSCR(x)  BRSHW_IOS(uint32, BRSHW_SIU_GROUP_D_2 + 0x240 + (4*x))  /* SIUL2 Multiplexed Single Configuration */
                           509	#542:   #define SIU_B_GPDO(x)  BRSHW_IOS(uint8,  BRSHW_SIU_GROUP_D_2 + 0x1300 + x)     /* SIUL2 GPIO Pad Data Out */
                           510	#543:   #define SIU_B_GPDI(x)  BRSHW_IOS(uint8,  BRSHW_SIU_GROUP_D_2 + 0x1500 + x)     /* SIUL2 GPIO Pad Data In */
                           511	#544: # endif
                           512	#545: #endif /*else BRSHW_SIU_GROUP_B*/
                           513	#547: /***********************************************/
                           514	#548: /* Mode Entry Module registers (MC_ME)         */
                           515	#549: /***********************************************/
                           516	#550: #if defined (BRSHW_OPMODES_GROUP_A) || defined (BRSHW_OPMODES_GROUP_B)
                           517	#551: # if defined (BRSHW_OPMODES_GROUP_A)
                           518	#552:   #define ME_BASE_ADDR      BRSHW_OPMODES_GROUP_A
                           519	#553: # elif defined (BRSHW_OPMODES_GROUP_B)
                           520	#554:   #define ME_BASE_ADDR      BRSHW_OPMODES_GROUP_B
                           521	#555: # endif
                           522	#557:   #define ME_GS         BRSHW_IOS(uint32, ME_BASE_ADDR + 0x00)          /* Global Status Register */
                           523	#558:   #define ME_MCTL       BRSHW_IOS(uint32, ME_BASE_ADDR + 0x004)         /* Mode Control Register */
                           524	#559:   #define ME_ME         BRSHW_IOS(uint32, ME_BASE_ADDR + 0x008)         /* Mode Enable Register */
                           525	#560:   #define ME_IS         BRSHW_IOS(uint32, ME_BASE_ADDR + 0x00C)         /* Interrupt Status Register */
                           526	#561:   #define ME_DRUN_MC    BRSHW_IOS(uint32, ME_BASE_ADDR + 0x02C)         /* DRUN Mode Configuration Registers */
                           527	#562:   #define ME_RUN_MC(x)  BRSHW_IOS(uint32, ME_BASE_ADDR + 0x030 + 4*x)   /* RUN0..x Mode Configuration Registers */
                           528	#563:   #define ME_RUN_PC(x)  BRSHW_IOS(uint32, ME_BASE_ADDR + 0x080 + 4*x)   /* Run Peripheral Configuration Register 0..x */
                           529	#564:   #define ME_LP_PC(x)   BRSHW_IOS(uint32, ME_BASE_ADDR + 0x0A0 + 4*x)   /* Low-Power Peripheral Configuration Register 1 */
                           530	#565:   #define ME_PCTL(x)    BRSHW_IOS(uint8, (ME_BASE_ADDR + 0x0C0 + x))    /* Peripheral Control Registers */
                           531	#566:   #define ME_CCTL(x)    BRSHW_IOS(uint16, (ME_BASE_ADDR + 0x1C4 + 2*x)) /* Core Control Register */
                           532	#568: #elif defined (BRSHW_OPMODES_GROUP_NONE)
                           533	#570: #else
                           534	#571:   #error "Unknown Operation Mode Group. Please check your derivative settings within BrsHw_DerivativeList.h."
                           535	#572: #endif
                           536	#574: #if defined (BRSHW_ENABLE_TIMER_INTERRUPT)
                           537	#575: /***********************************************/
                           538	#576: /*  Timer registers                            */
                           539	#577: /***********************************************/
                           540	#578: # if defined (BRSHW_TIMER_GROUP_A)
                           541	#579:   /* PIT */
                           542	#580:   #define PIT_BASE_ADDR BRSHW_TIMER_GROUP_A
                           543	#581:   #define PIT_MCR    BRSHW_IOS(uint32, PIT_BASE_ADDR + 0x0000 ) /* PIT Module Control Register   */
                           544	#582:   #define PIT_LDVAL0 BRSHW_IOS(uint32, PIT_BASE_ADDR + 0x0100 ) /* Timer0 Load Value Register    */
                           545	#583:   #define PIT_CVAL0  BRSHW_IOS(uint32, PIT_BASE_ADDR + 0x0104 ) /* Current Timer0 Value Register */
                           546	#584:   #define PIT_TCTRL0 BRSHW_IOS(uint32, PIT_BASE_ADDR + 0x0108 ) /* Timer0 Control Register       */
                           547	#585:   #define PIT_TFLG0  BRSHW_IOS(uint32, PIT_BASE_ADDR + 0x010C ) /* Timer0 Flag Register          */

                                   Fri Apr 10 08:31:37 2020           Page 11
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                           548	#587: # elif defined (BRSHW_TIMER_GROUP_B)
                           549	#588:   /* eMIOS_A (Channel 16) */
                           550	#589:   #define EMIOS_BASE_ADDR BRSHW_TIMER_GROUP_B
                           551	#590:   #define EMIOS_MCR    BRSHW_IOS(uint32, EMIOS_BASE_ADDR + 0x0000 ) /* eMIOS_A Module Configuration Register */
                           552	#591:   #define EMIOS_CADR0  BRSHW_IOS(uint32, EMIOS_BASE_ADDR + 0x0220 ) /* eMIOS_A Channel 16 Data Register A */
                           553	#592:   #define EMIOS_CCNTR0 BRSHW_IOS(uint32, EMIOS_BASE_ADDR + 0x0228 ) /* eMIOS_A Channel 16 Counter Register */
                           554	#593:   #define EMIOS_CCR0   BRSHW_IOS(uint32, EMIOS_BASE_ADDR + 0x022C ) /* eMIOS_A Channel 16 Control Register */
                           555	#594:   #define EMIOS_CSR0   BRSHW_IOS(uint32, EMIOS_BASE_ADDR + 0x0230 ) /* eMIOS_A Channel 16 Status Register */
                           556	#596: # elif defined (BRSHW_TIMER_GROUP_NONE)
                           557	#598: # else
                           558	#599:   #error "Unknown Timer Group. Please check your derivative settings within BrsHw_DerivativeList.h."
                           559	#600: # endif /*BRSHW_TIMER_GROUP_x*/
                           560	#601: #endif /*BRSHW_ENABLE_TIMER_INTERRUPT*/
                           561	#603: /***********************************************/
                           562	#604: /* Watchdog registers                          */
                           563	#605: /***********************************************/
                           564	#606: #if defined (BRSHW_WATCHDOG_GROUP_A)
                           565	#607:   #define SWT_BASE_ADDR  BRSHW_WATCHDOG_GROUP_A
                           566	#608:   #define SWT_CR         BRSHW_IOS(uint32, SWT_BASE_ADDR + 0x00 )          /* SWT Control Register */
                           567	#609:   #define SWT_SR         BRSHW_IOS(uint32, SWT_BASE_ADDR + 0x10 )          /* SWT Service Register */
                           568	#611: #elif defined (BRSHW_WATCHDOG_GROUP_B)
                           569	#612:   #define SWT_BASE_ADDR  BRSHW_WATCHDOG_GROUP_B
                           570	#613:   #define SWT_CR         BRSHW_IOS(uint32, SWT_BASE_ADDR + 0x00 )          /* SWT1 Control Register */
                           571	#614:   #define SWT_SR         BRSHW_IOS(uint32, SWT_BASE_ADDR + 0x10 )          /* SWT1 Service Register */
                           572	#615:   #define SWT2_CR        BRSHW_IOS(uint32, SWT_BASE_ADDR + 0x4000 + 0x00 ) /* SWT2 Control Register */
                           573	#616:   #define SWT2_SR        BRSHW_IOS(uint32, SWT_BASE_ADDR + 0x4000 + 0x10 ) /* SWT2 Service Register */
                           574	#618: #elif defined (BRSHW_WATCHDOG_GROUP_C)
                           575	#619:   #define SWT_BASE_ADDR  BRSHW_WATCHDOG_GROUP_C
                           576	#620:   #define SWT_CR         BRSHW_IOS(uint32, SWT_BASE_ADDR + 0x00 )          /* SWT0 Control Register */
                           577	#621:   #define SWT_SR         BRSHW_IOS(uint32, SWT_BASE_ADDR + 0x10 )          /* SWT0 Service Register */
                           578	#622:   #define SWT2_CR        BRSHW_IOS(uint32, SWT_BASE_ADDR + 0x8000 + 0x00 ) /* SWT2 Control Register */
                           579	#623:   #define SWT2_SR        BRSHW_IOS(uint32, SWT_BASE_ADDR + 0x8000 + 0x10 ) /* SWT2 Service Register */
                           580	#625:   #define SWT3_CR        BRSHW_IOS(uint32, SWT_BASE_ADDR + 0xC000 + 0x00 ) /* SWT3 Control Register */
                           581	#626:   #define SWT3_SR        BRSHW_IOS(uint32, SWT_BASE_ADDR + 0xC000 + 0x10 ) /* SWT3 Service Register */
                           582	#628: #elif defined (BRSHW_WATCHDOG_GROUP_NONE)
                           583	#630: #else
                           584	#631:   #error "Unknown Watchdog Group. Please check your derivative settings within BrsHw_DerivativeList.h."
                           585	#632: #endif /*BRSHW_WATCHDOG_GROUP_x*/
                           586	#634: #if defined (BRS_OS_USECASE_BRS)
                           587	#635: /***********************************************/
                           588	#636: /*  Interrupt Controller registers (INTC)      */
                           589	#637: /***********************************************/
                           590	#638: # if defined (BRSHW_INTERRUPT_TABLE_GROUP_A) || defined (BRSHW_INTERRUPT_TABLE_GROUP_C) || defined (BRSHW_INTERRUPT_TABLE_GROUP_E) || defined (BRSHW_INTERRUPT_TABLE_GROUP_F) || defined (BRSHW_INTERRUPT_TABLE_GROUP_G)
                           591	#639:   #define INTC_BASE_ADDR    0xFC040000
                           592	#640: # elif defined (BRSHW_INTERRUPT_TABLE_GROUP_B)
                           593	#641:   #define INTC_BASE_ADDR    0xFFF48000
                           594	#642: # elif defined (BRSHW_INTERRUPT_TABLE_GROUP_D)
                           595	#643:   #define INTC_BASE_ADDR    0xFFF08000
                           596	#645: # else
                           597	#646:   #error "Unknown Interrupt Table Group. Please check your derivative settings within BrsHw_DerivativeList.h."
                           598	#647: # endif
                           599	#649: # if defined (BRSHW_INTERRUPT_TABLE_GROUP_A) || defined (BRSHW_INTERRUPT_TABLE_GROUP_C) || defined (BRSHW_INTERRUPT_TABLE_GROUP_D) || defined (BRSHW_INTERRUPT_TABLE_GROUP_E) || defined (BRSHW_INTERRUPT_TABLE_GROUP_G) 
                           600	#650:   #define INTC_MCR          BRSHW_IOS(uint32, INTC_BASE_ADDR)
                           601	#651:   #define INTC_CPR_0        BRSHW_IOS(uint32, INTC_BASE_ADDR + 0x10 )       /* Current Priority Register for Processor0 */
                           602	#652:   #define INTC_CPR_1        BRSHW_IOS(uint32, INTC_BASE_ADDR + 0x14 )       /* Current Priority Register for Processor1 */
                           603	#653:   #define INTC_CPR_2        BRSHW_IOS(uint32, INTC_BASE_ADDR + 0x18 )       /* Current Priority Register for Processor2 */

                                   Fri Apr 10 08:31:37 2020           Page 12
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                           604	#654:   #define INTC_CPR_3        BRSHW_IOS(uint32, INTC_BASE_ADDR + 0x1C )       /* Current Priority Register for Processor3 */
                           605	#655:   #define INTC_ACKR_0       BRSHW_IOS(uint32, INTC_BASE_ADDR + 0x20)        /* Interrupt Acknowledge Register for Processor0 */
                           606	#656:   #define INTC_ACKR_1       BRSHW_IOS(uint32, INTC_BASE_ADDR + 0x24)        /* Interrupt Acknowledge Register for Processor1 */
                           607	#657:   #define INTC_ACKR_2       BRSHW_IOS(uint32, INTC_BASE_ADDR + 0x28)        /* Interrupt Acknowledge Register for Processor2 */
                           608	#658:   #define INTC_PSR(x)       BRSHW_IOS(uint16, INTC_BASE_ADDR + 0x60 + 2*x) /* Priority Select Register */
                           609	#659: # endif
                           610	#661: # if defined (BRSHW_INTERRUPT_TABLE_GROUP_B)
                           611	#662:   #define INTC_MCR          BRSHW_IOS(uint32, INTC_BASE_ADDR + 0x00 )     /* INTC Module Configuration Register */
                           612	#663:   #define INTC_CPR_0        BRSHW_IOS(uint32, INTC_BASE_ADDR + 0x08 )     /* INTC Current Priority Register for processor0 */
                           613	#664:   #define INTC_CPR_1        BRSHW_IOS(uint32, INTC_BASE_ADDR + 0x0C )     /* INTC Current Priority Register for processor1 */
                           614	#665:   #define INTC_PSR(x)       BRSHW_IOS(uint8, INTC_BASE_ADDR + 0x0040 + x) /* Priority Select Register */
                           615	#666: # endif
                           616	#668: # if defined (BRSHW_INTERRUPT_TABLE_GROUP_F)
                           617	#669:   #define INTC_MCR          BRSHW_IOS(uint32, INTC_BASE_ADDR)
                           618	#670:   #define INTC_CPR_0        BRSHW_IOS(uint32, INTC_BASE_ADDR + 0x10)        /* Current Priority Register for Processor0 */
                           619	#671:   #define INTC_CPR_1        BRSHW_IOS(uint32, INTC_BASE_ADDR + 0x14)        /* Current Priority Register for Processor1 */
                           620	#672:   #define INTC_CPR_2        BRSHW_IOS(uint32, INTC_BASE_ADDR + 0x18)        /* Current Priority Register for Processor2 */
                           621	#673:   #define INTC_CPR_3        BRSHW_IOS(uint32, INTC_BASE_ADDR + 0x1C)        /* Current Priority Register for Processor3 */
                           622	#674:   #define INTC_ACKR_0       BRSHW_IOS(uint32, INTC_BASE_ADDR + 0x20)        /* Interrupt Acknowledge Register for Processor0 */
                           623	#675:   #define INTC_ACKR_1       BRSHW_IOS(uint32, INTC_BASE_ADDR + 0x24)        /* Interrupt Acknowledge Register for Processor1 */
                           624	#676:   #define INTC_ACKR_2       BRSHW_IOS(uint32, INTC_BASE_ADDR + 0x28)        /* Interrupt Acknowledge Register for Processor2 */
                           625	#677:   #define INTC_ACKR_3       BRSHW_IOS(uint32, INTC_BASE_ADDR + 0x2C)        /* Interrupt Acknowledge Register for Processor3 */
                           626	#678:   #define INTC_PSR(x)       BRSHW_IOS(uint16, INTC_BASE_ADDR + 0x60 + 2*x)  /* Priority Select Register */
                           627	#679: # endif
                           628	#680: #endif /*BRS_OS_USECASE_BRS*/
                           629	#682: /****************************************************/
                           630	#683: /*  Reset Genration Module  */
                           631	#684: /****************************************************/
                           632	#685: #define MC_RGM_BASE 0xFFFA8000
                           633	#686: # define RGM_FRET   BRSHW_IOS(uint8, MC_RGM_BASE + 0x604)            /* Functional Reset Escalation Threshold Register */
                           634	#688: #if !defined (BRS_OS_USECASE_BRS)
                           635	#689: # if defined (BRSASR_ENABLE_SAFECTXSUPPORT)
                           636	#690: /****************************************************/
                           637	#691: /*  UserMode Access Group (UAA-Bit + PACR + OPACR)  */
                           638	#692: /****************************************************/
                           639	#693: #  if defined (BRSHW_USERMODE_ACCESS_GROUP_A) || defined (BRSHW_USERMODE_ACCESS_GROUP_A1)
                           640	#694:   /***************************************************************/
                           641	#695:   /* Platform / Off-platform peripheral access control registers */
                           642	#696:   /***************************************************************/
                           643	#697:   #define PBRIDGE0_BASE 0xFC000000
                           644	#698:   #define PBRIDGE1_BASE 0xF8000000
                           645	#700:   /* PBRIDGE0 OPACR15 SIUL */
                           646	#701:   #define O_PACR_REGISTER_SIUL_ADDR      BRSHW_IOS(uint32, PBRIDGE0_BASE + 0x144)
                           647	#702:   #define O_PACR_REGISTER_SIUL_VALUE     0xFFFFFFF0
                           648	#703:   /* PBRIDGE0 OPACR30 PIT */
                           649	#704:   #define O_PACR_REGISTER_PIT_ADDR       BRSHW_IOS(uint32, PBRIDGE0_BASE + 0x14C)
                           650	#705:   #define O_PACR_REGISTER_PIT_VALUE      0xFFFFFF0F
                           651	#707:   /* PBRIDGE0 PACR26/PACR27/PACR28 - STM */
                           652	#708:   #define O_PACR_REGISTER_STM_ADDR       BRSHW_IOS(uint32, PBRIDGE0_BASE + 0x10C)
                           653	#709:   #define O_PACR_REGISTER_STM_VALUE      0xFF000FFF /* Enable STM0, STM1 and STM 2 */
                           654	#711:   /* PBRIDGE0 OPACR36 - DMAMUX_0 */
                           655	#712:   #define O_PACR_REGISTER_DMA_MUX_0_ADDR   BRSHW_IOS(uint32, PBRIDGE0_BASE + 0x150)
                           656	#713:   #define O_PACR_REGISTER_DMA_MUX_0_VALUE  0xFFFF0FFF
                           657	#715:   /* PBRIDGE0 OPACR146 - DMAMUX_1 */
                           658	#716:   #define O_PACR_REGISTER_DMA_MUX_1_ADDR   BRSHW_IOS(uint32, PBRIDGE0_BASE + 0x188)
                           659	#717:   #define O_PACR_REGISTER_DMA_MUX_1_VALUE  0xFF0FFFFF

                                   Fri Apr 10 08:31:37 2020           Page 13
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                           660	#719:   /* *******************CAN****************** */
                           661	#720:   /* PBRIDGE0 OPACR79 - FlexCan0 */
                           662	#721:   #define O_PACR_REGISTER_CAN0_ADDR      BRSHW_IOS(uint32, PBRIDGE0_BASE + 0x164)
                           663	#722:   #define O_PACR_REGISTER_CAN0_VALUE     0xFFFFFFF0
                           664	#723:   /* PBRIDGE0 OPACR78 - FlexCan1 */
                           665	#724:   #define O_PACR_REGISTER_CAN1_ADDR      BRSHW_IOS(uint32, PBRIDGE0_BASE + 0x164)
                           666	#725:   #define O_PACR_REGISTER_CAN1_VALUE     0xFFFFFF0F
                           667	#726:   /* PBRIDGE0 OPACR77 - FlexCan2 */
                           668	#727:   #define O_PACR_REGISTER_CAN2_ADDR      BRSHW_IOS(uint32, PBRIDGE0_BASE + 0x164)
                           669	#728:   #define O_PACR_REGISTER_CAN2_VALUE     0xFFFFF0FF
                           670	#730:   /* *******************LIN****************** */
                           671	#731:   /* PBRIDGE1 OPACR94 - LinFlex0 */
                           672	#732:   #define O_PACR_REGISTER_LIN0_ADDR      BRSHW_IOS(uint32, PBRIDGE1_BASE + 0x16c)
                           673	#733:   #define O_PACR_REGISTER_LIN0_VALUE     0xFFFFFF0F
                           674	#734:   /* PBRIDGE0 OPACR91 - LinFlex1 */
                           675	#735:   #define O_PACR_REGISTER_LIN1_ADDR      BRSHW_IOS(uint32, PBRIDGE0_BASE + 0x16c)
                           676	#736:   #define O_PACR_REGISTER_LIN1_VALUE     0xFFF0FFFF
                           677	#738:   /* *******************FLEXRAY****************** */
                           678	#739:   /* PBRIDGE0 OPACR107 - FlexRay */
                           679	#740:   #define O_PACR_REGISTER_FLEXRAY0_ADDR  BRSHW_IOS(uint32, PBRIDGE0_BASE + 0x174)
                           680	#741:   #define O_PACR_REGISTER_FLEXRAY0_VALUE 0xFFF0FFFF
                           681	#743:   /* *******************ETHERNET****************** */
                           682	#744:   /* PBRIDGE0 OPACR12 - Ethernet */
                           683	#745:   #define O_PACR_REGISTER_ETHERNET0_ADDR  BRSHW_IOS(uint32, PBRIDGE0_BASE + 0x144)
                           684	#746:   #define O_PACR_REGISTER_ETHERNET0_VALUE 0xFFFF0FFF
                           685	#748:   /* *******************FLASH****************** */
                           686	#749:   /* PBRIDGE0 OPACR7 - Flash */
                           687	#750:   #define O_PACR_REGISTER_FLASH0_ADDR    BRSHW_IOS(uint32, PBRIDGE0_BASE + 0x140)
                           688	#751:   #define O_PACR_REGISTER_FLASH0_VALUE   0xFFFFFFF0
                           689	#753:   /* *******************DSPI****************** */
                           690	#754:   /* PBRIDGE0 OPACR99 - DSPI0 */
                           691	#755:   #define O_PACR_REGISTER_DSPI0_ADDR     BRSHW_IOS(uint32, PBRIDGE0_BASE + 0x170)
                           692	#756:   #define O_PACR_REGISTER_DSPI0_VALUE    0xFFF0FFFF
                           693	#757:   /* PBRIDGE0 OPACR98 - DSPI1 */
                           694	#758:   #define O_PACR_REGISTER_DSPI1_ADDR     BRSHW_IOS(uint32, PBRIDGE0_BASE + 0x170)
                           695	#759:   #define O_PACR_REGISTER_DSPI1_VALUE    0xFF0FFFFF
                           696	#760:   /* PBRIDGE1 OPACR99 - DSPI2 */
                           697	#761:   #define O_PACR_REGISTER_DSPI2_ADDR     BRSHW_IOS(uint32, PBRIDGE1_BASE + 0x170)
                           698	#762:   #define O_PACR_REGISTER_DSPI2_VALUE    0xFFF0FFFF
                           699	#763:   /* PBRIDGE1 OPACR98 - DSPI3 */
                           700	#764:   #define O_PACR_REGISTER_DSPI3_ADDR     BRSHW_IOS(uint32, PBRIDGE1_BASE + 0x170)
                           701	#765:   #define O_PACR_REGISTER_DSPI3_VALUE    0xFF0FFFFF
                           702	#767:   /* *******************WDG****************** */
                           703	#768:   /* PBRIDGE0 PACR20 - SWT0 */
                           704	#769:   #define O_PACR_REGISTER_SWT0_ADDR    BRSHW_IOS(uint32, PBRIDGE0_BASE + 0x108)
                           705	#770:   #define O_PACR_REGISTER_SWT0_VALUE   0xFFFF0FFF
                           706	#772: #   if defined (BRSHW_USERMODE_ACCESS_GROUP_A1)
                           707	#773:   /* PBRIDGE0 PACR40 - eDMA */
                           708	#774:   #define O_PACR_REGISTER_EDMA_ADDR      BRSHW_IOS(uint32, PBRIDGE0_BASE + 0x114)
                           709	#775:   #define O_PACR_REGISTER_EDMA_VALUE     0x0FFFFFFF
                           710	#777:   /* *******************WDG****************** */
                           711	#778:   /* PBRIDGE0 PACR21 - SWT1 */
                           712	#779:   #define O_PACR_REGISTER_SWT1_ADDR    BRSHW_IOS(uint32, PBRIDGE0_BASE + 0x108)
                           713	#780:   #define O_PACR_REGISTER_SWT1_VALUE   0xFFFFF0FF
                           714	#782:   /* **************CROSSBAR SWITCH************* */
                           715	#783:   #define O_PACR_REGISTER_XBAR_0_ADDR     BRSHW_IOS(uint32, PBRIDGE0_BASE + 0x100)

                                   Fri Apr 10 08:31:37 2020           Page 14
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                           716	#784:   #define O_PACR_REGISTER_XBAR_0_VALUE    (0xF0FFFFFF)
                           717	#785:   #define O_PACR_REGISTER_XBAR_1_ADDR     BRSHW_IOS(uint32, PBRIDGE0_BASE + 0x100)
                           718	#786:   #define O_PACR_REGISTER_XBAR_1_VALUE    (0xFF0FFFFF)
                           719	#787: #   endif /*BRSHW_USERMODE_ACCESS_GROUP_A1*/
                           720	#789: /* Additional base addresses for UAA bit setting */
                           721	#791:   /* *****************ETHERNET***************** */
                           722	#792:   #define ENET_BASE                     0xFC0B0000
                           723	#793:   #define ENET_EIR                      BRSHW_IOS(uint32, ENET_BASE + 0x0004)
                           724	#795:   /* *******************DSPI****************** */
                           725	#796: #   if defined (BRSHW_USERMODE_ACCESS_GROUP_A)
                           726	#797:   #define DSPI0_BASE 0xFFE70000
                           727	#798:   #define DSPI3_BASE 0xFBE74000
                           728	#799: #   endif
                           729	#800:   #define DSPI1_BASE 0xFFE74000
                           730	#801:   #define DSPI2_BASE 0xFBE70000
                           731	#803:   /* *******************FLASH****************** */
                           732	#804:   /* Base address of the flash module, used by DrvFls */
                           733	#805:   /* This can be Dataflash or Codeflash, depending to the derivative */
                           734	#806:   #define FLASH0_BASE 0xFFFE0000
                           735	#808:   /* **************DMA MULTIPLEXER************* */
                           736	#809:   #define DMAMUX_0_BASE                 0xFFF6C000
                           737	#810:   #define DMAMUX_1_BASE                 0xFBF6C000
                           738	#812: #  elif defined (BRSHW_USERMODE_ACCESS_GROUP_B) || defined (BRSHW_USERMODE_ACCESS_GROUP_C)
                           739	#813:   /***************************************************************/
                           740	#814:   /* Platform / Off-platform peripheral access control registers */
                           741	#815:   /***************************************************************/
                           742	#816:   /* PACR/OPACR only */  
                           743	#817:   #define PBRIDGE0_BASE 0xFC000000
                           744	#818:   #define PBRIDGE1_BASE 0xF8000000
                           745	#820:   /* PBRIDGE0 OPACR15 SIUL */
                           746	#821:   #define O_PACR_REGISTER_SIUL_ADDR      BRSHW_IOS(uint32, PBRIDGE0_BASE + 0x144)
                           747	#822:   #define O_PACR_REGISTER_SIUL_VALUE     0xFFFFFFF0
                           748	#823:   /* PBRIDGE0 OPACR30 PIT */
                           749	#824:   #define O_PACR_REGISTER_PIT_ADDR       BRSHW_IOS(uint32, PBRIDGE0_BASE + 0x14C)
                           750	#825:   #define O_PACR_REGISTER_PIT_VALUE      0xFFFFFF0F
                           751	#826:   /* PBRIDGE0 PACR26 - STM */
                           752	#827:   #define O_PACR_REGISTER_STM_ADDR       BRSHW_IOS(uint32, PBRIDGE0_BASE + 0x10C)
                           753	#828:   #define O_PACR_REGISTER_STM_VALUE      0xFF0FFFFF
                           754	#830:   /* *******************CAN****************** */
                           755	#831:   /* PBRIDGE0 OPACR79 - FlexCan0 */
                           756	#832:   #define O_PACR_REGISTER_CAN0_ADDR      BRSHW_IOS(uint32, PBRIDGE0_BASE + 0x164)
                           757	#833:   #define O_PACR_REGISTER_CAN0_VALUE     0xFFFFFFF0
                           758	#835: #   if defined (BRSHW_USERMODE_ACCESS_GROUP_B)
                           759	#836:   /* PBRIDGE0 OPACR78 - FlexCan2 */
                           760	#837:   #define O_PACR_REGISTER_CAN2_ADDR      BRSHW_IOS(uint32, PBRIDGE0_BASE + 0x164)
                           761	#838:   #define O_PACR_REGISTER_CAN2_VALUE     0xFFFFFF0F
                           762	#839:   /* PBRIDGE0 OPACR77 - FlexCan4 */
                           763	#840:   #define O_PACR_REGISTER_CAN4_ADDR      BRSHW_IOS(uint32, PBRIDGE0_BASE + 0x164)
                           764	#841:   #define O_PACR_REGISTER_CAN4_VALUE     0xFFFFF0FF
                           765	#842:   /* PBRIDGE0 OPACR76 - FlexCan6 */
                           766	#843:   #define O_PACR_REGISTER_CAN6_ADDR      BRSHW_IOS(uint32, PBRIDGE0_BASE + 0x164)
                           767	#844:   #define O_PACR_REGISTER_CAN6_VALUE     0xFFFF0FFF
                           768	#846:   /* PBRIDGE1 OPACR79 - FlexCan1 */
                           769	#847:   #define O_PACR_REGISTER_CAN1_ADDR      BRSHW_IOS(uint32, PBRIDGE1_BASE + 0x164)
                           770	#848:   #define O_PACR_REGISTER_CAN1_VALUE     0xFFFFFFF0
                           771	#849:   /* PBRIDGE1 OPACR78 - FlexCan3 */

                                   Fri Apr 10 08:31:37 2020           Page 15
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                           772	#850:   #define O_PACR_REGISTER_CAN3_ADDR      BRSHW_IOS(uint32, PBRIDGE1_BASE + 0x164)
                           773	#851:   #define O_PACR_REGISTER_CAN3_VALUE     0xFFFFFF0F
                           774	#852:   /* PBRIDGE1 OPACR77 - FlexCan5 */
                           775	#853:   #define O_PACR_REGISTER_CAN5_ADDR      BRSHW_IOS(uint32, PBRIDGE1_BASE + 0x164)
                           776	#854:   #define O_PACR_REGISTER_CAN5_VALUE     0xFFFFF0FF
                           777	#855:   /* PBRIDGE1 OPACR76 - FlexCan7 */
                           778	#856:   #define O_PACR_REGISTER_CAN7_ADDR      BRSHW_IOS(uint32, PBRIDGE1_BASE + 0x164)
                           779	#857:   #define O_PACR_REGISTER_CAN7_VALUE     0xFFFF0FFF
                           780	#858: #   endif /*BRSHW_USERMODE_ACCESS_GROUP_B*/
                           781	#860: #   if defined (BRSHW_USERMODE_ACCESS_GROUP_C)
                           782	#861:   /* PBRIDGE0 OPACR78 - FlexCan1 */
                           783	#862:   #define O_PACR_REGISTER_CAN1_ADDR      BRSHW_IOS(uint32, PBRIDGE0_BASE + 0x164)
                           784	#863:   #define O_PACR_REGISTER_CAN1_VALUE     0xFFFFFF0F
                           785	#865:   /* PBRIDGE1 OPACR77 - FlexCan2 */
                           786	#866:   #define O_PACR_REGISTER_CAN2_ADDR      BRSHW_IOS(uint32, PBRIDGE1_BASE + 0x164)
                           787	#867:   #define O_PACR_REGISTER_CAN2_VALUE     0xFFFFF0FF
                           788	#868:   /* PBRIDGE1 OPACR76 - FlexCan3 */
                           789	#869:   #define O_PACR_REGISTER_CAN3_ADDR      BRSHW_IOS(uint32, PBRIDGE1_BASE + 0x164)
                           790	#870:   #define O_PACR_REGISTER_CAN3_VALUE     0xFFFF0FFF
                           791	#871: #   endif /*BRSHW_USERMODE_ACCESS_GROUP_C*/
                           792	#873:   /* *******************LIN****************** */
                           793	#874:   /* PBRIDGE0 OPACR92 - LinFlex0 */
                           794	#875:   #define O_PACR_REGISTER_LIN0_ADDR      BRSHW_IOS(uint32, PBRIDGE0_BASE + 0x16c)
                           795	#876:   #define O_PACR_REGISTER_LIN0_VALUE     0xFFFF0FFF
                           796	#878: #   if defined (BRSHW_USERMODE_ACCESS_GROUP_B)
                           797	#879:   /* PBRIDGE0 OPACR91 - LinFlex2 */
                           798	#880:   #define O_PACR_REGISTER_LIN2_ADDR      BRSHW_IOS(uint32, PBRIDGE0_BASE + 0x16c)
                           799	#881:   #define O_PACR_REGISTER_LIN2_VALUE     0xFFF0FFFF
                           800	#882:   /* PBRIDGE0 OPACR90 - LinFlex4 */
                           801	#883:   #define O_PACR_REGISTER_LIN4_ADDR      BRSHW_IOS(uint32, PBRIDGE0_BASE + 0x16c)
                           802	#884:   #define O_PACR_REGISTER_LIN4_VALUE     0xFF0FFFFF
                           803	#885:   /* PBRIDGE0 OPACR89 - LinFlex6 */
                           804	#886:   #define O_PACR_REGISTER_LIN6_ADDR      BRSHW_IOS(uint32, PBRIDGE0_BASE + 0x16c)
                           805	#887:   #define O_PACR_REGISTER_LIN6_VALUE     0xF0FFFFFF
                           806	#888:   /* PBRIDGE0 OPACR88 - LinFlex8 */
                           807	#889:   #define O_PACR_REGISTER_LIN8_ADDR      BRSHW_IOS(uint32, PBRIDGE0_BASE + 0x16c)
                           808	#890:   #define O_PACR_REGISTER_LIN8_VALUE     0x0FFFFFFF
                           809	#891:   /* PBRIDGE0 OPACR87 - LinFlex10 */
                           810	#892:   #define O_PACR_REGISTER_LIN10_ADDR     BRSHW_IOS(uint32, PBRIDGE0_BASE + 0x168)
                           811	#893:   #define O_PACR_REGISTER_LIN10_VALUE    0xFFFFFFF0
                           812	#894:   /* PBRIDGE0 OPACR86 - LinFlex12 */
                           813	#895:   #define O_PACR_REGISTER_LIN12_ADDR     BRSHW_IOS(uint32, PBRIDGE0_BASE + 0x168)
                           814	#896:   #define O_PACR_REGISTER_LIN12_VALUE    0xFFFFFF0F
                           815	#897:   /* PBRIDGE0 OPACR85 - LinFlex14 */
                           816	#898:   #define O_PACR_REGISTER_LIN14_ADDR     BRSHW_IOS(uint32, PBRIDGE0_BASE + 0x168)
                           817	#899:   #define O_PACR_REGISTER_LIN14_VALUE    0xFFFFF0FF
                           818	#901:   /* PBRIDGE1 OPACR92 - LinFlex1 */
                           819	#902:   #define O_PACR_REGISTER_LIN1_ADDR      BRSHW_IOS(uint32, PBRIDGE1_BASE + 0x16c)
                           820	#903:   #define O_PACR_REGISTER_LIN1_VALUE     0xFFFF0FFF
                           821	#904:   /* PBRIDGE1 OPACR91 - LinFlex3 */
                           822	#905:   #define O_PACR_REGISTER_LIN3_ADDR      BRSHW_IOS(uint32, PBRIDGE1_BASE + 0x16c)
                           823	#906:   #define O_PACR_REGISTER_LIN3_VALUE     0xFFF0FFFF
                           824	#907:   /* PBRIDGE1 OPACR90 - LinFlex5 */
                           825	#908:   #define O_PACR_REGISTER_LIN5_ADDR      BRSHW_IOS(uint32, PBRIDGE1_BASE + 0x16c)
                           826	#909:   #define O_PACR_REGISTER_LIN5_VALUE     0xFF0FFFFF
                           827	#910:   /* PBRIDGE1 OPACR89 - LinFlex7 */

                                   Fri Apr 10 08:31:37 2020           Page 16
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                           828	#911:   #define O_PACR_REGISTER_LIN7_ADDR      BRSHW_IOS(uint32, PBRIDGE1_BASE + 0x16c)
                           829	#912:   #define O_PACR_REGISTER_LIN7_VALUE     0xF0FFFFFF
                           830	#913:   /* PBRIDGE1 OPACR88 - LinFlex9 */
                           831	#914:   #define O_PACR_REGISTER_LIN9_ADDR      BRSHW_IOS(uint32, PBRIDGE1_BASE + 0x16c)
                           832	#915:   #define O_PACR_REGISTER_LIN9_VALUE     0x0FFFFFFF
                           833	#916:   /* PBRIDGE1 OPACR87 - LinFlex11 */
                           834	#917:   #define O_PACR_REGISTER_LIN11_ADDR     BRSHW_IOS(uint32, PBRIDGE1_BASE + 0x168)
                           835	#918:   #define O_PACR_REGISTER_LIN11_VALUE    0xFFFFFFF0
                           836	#919:   /* PBRIDGE1 OPACR86 - LinFlex13 */
                           837	#920:   #define O_PACR_REGISTER_LIN13_ADDR     BRSHW_IOS(uint32, PBRIDGE1_BASE + 0x168)
                           838	#921:   #define O_PACR_REGISTER_LIN13_VALUE    0xFFFFFF0F
                           839	#922:   /* PBRIDGE1 OPACR85 - LinFlex15 */
                           840	#923:   #define O_PACR_REGISTER_LIN15_ADDR     BRSHW_IOS(uint32, PBRIDGE1_BASE + 0x168)
                           841	#924:   #define O_PACR_REGISTER_LIN15_VALUE    0xFFFFF0FF
                           842	#925: #   endif /*BRSHW_USERMODE_ACCESS_GROUP_B*/
                           843	#927: #   if defined (BRSHW_USERMODE_ACCESS_GROUP_C)
                           844	#928:   /* PBRIDGE0 OPACR91 - LinFlex1 */
                           845	#929:   #define O_PACR_REGISTER_LIN1_ADDR      BRSHW_IOS(uint32, PBRIDGE0_BASE + 0x16c)
                           846	#930:   #define O_PACR_REGISTER_LIN1_VALUE     0xFFF0FFFF
                           847	#931:   /* PBRIDGE0 OPACR92 - LinFlex3 */
                           848	#932:   #define O_PACR_REGISTER_LIN3_ADDR      BRSHW_IOS(uint32, PBRIDGE0_BASE + 0x16c)
                           849	#933:   #define O_PACR_REGISTER_LIN3_VALUE     0xFF0FFFFF
                           850	#935:   /* PBRIDGE1 OPACR92 - LinFlex2 */
                           851	#936:   #define O_PACR_REGISTER_LIN2_ADDR      BRSHW_IOS(uint32, PBRIDGE1_BASE + 0x16c)
                           852	#937:   #define O_PACR_REGISTER_LIN2_VALUE     0xFFFF0FFF
                           853	#938: #   endif /*BRSHW_USERMODE_ACCESS_GROUP_C*/
                           854	#940:   /* *******************FLEXRAY****************** */
                           855	#941:   /* PBRIDGE0 OPACR107 - FlexRay */
                           856	#942:   #define O_PACR_REGISTER_FLEXRAY0_ADDR  BRSHW_IOS(uint32, PBRIDGE0_BASE + 0x174)
                           857	#943:   #define O_PACR_REGISTER_FLEXRAY0_VALUE 0xFFF0FFFF
                           858	#945:   /* *******************ETHERNET****************** */
                           859	#946: #   if defined (BRSHW_USERMODE_ACCESS_GROUP_B)
                           860	#947:   /* PBRIDGE0 OPACR206 - Ethernet */
                           861	#948:   #define O_PACR_REGISTER_ETHERNET0_ADDR  BRSHW_IOS(uint32, PBRIDGE0_BASE + 0x1A4)
                           862	#949:   #define O_PACR_REGISTER_ETHERNET0_VALUE 0xFFFFFF0F
                           863	#950: #   endif /*BRSHW_USERMODE_ACCESS_GROUP_B*/
                           864	#952: #   if defined (BRSHW_USERMODE_ACCESS_GROUP_C)
                           865	#953:   /* PBRIDGE0 PACR44 - Ethernet */
                           866	#954:   #define O_PACR_REGISTER_ETHERNET0_ADDR  BRSHW_IOS(uint32, PBRIDGE0_BASE + 0x114)
                           867	#955:   #define O_PACR_REGISTER_ETHERNET0_VALUE 0xFFFF0FFF
                           868	#956: #   endif /*BRSHW_USERMODE_ACCESS_GROUP_C*/
                           869	#958:   /* *******************FLASH****************** */
                           870	#959:   /* PBRIDGE0 OPACR7 - Flash */
                           871	#960:   #define O_PACR_REGISTER_FLASH0_ADDR    BRSHW_IOS(uint32, PBRIDGE0_BASE + 0x140)
                           872	#961:   #define O_PACR_REGISTER_FLASH0_VALUE   0xFFFFFFF0
                           873	#963:   /* *******************DSPI****************** */
                           874	#964:   /* PBRIDGE0 OPACR99 - DSPI0 */
                           875	#965:   #define O_PACR_REGISTER_DSPI0_ADDR    BRSHW_IOS(uint32, PBRIDGE0_BASE + 0x170)
                           876	#966:   #define O_PACR_REGISTER_DSPI0_VALUE   0xFFF0FFFF
                           877	#967:   /* PBRIDGE0 OPACR98 - DSPI2 */
                           878	#968:   #define O_PACR_REGISTER_DSPI2_ADDR    BRSHW_IOS(uint32, PBRIDGE0_BASE + 0x170)
                           879	#969:   #define O_PACR_REGISTER_DSPI2_VALUE   0xFF0FFFFF
                           880	#971:   /* PBRIDGE1 OPACR99 - DSPI1 */
                           881	#972:   #define O_PACR_REGISTER_DSPI1_ADDR    BRSHW_IOS(uint32, PBRIDGE1_BASE + 0x170)
                           882	#973:   #define O_PACR_REGISTER_DSPI1_VALUE   0xFFF0FFFF
                           883	#974:   /* PBRIDGE1 OPACR98 - DSPI3 */

                                   Fri Apr 10 08:31:37 2020           Page 17
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                           884	#975:   #define O_PACR_REGISTER_DSPI3_ADDR    BRSHW_IOS(uint32, PBRIDGE1_BASE + 0x170)
                           885	#976:   #define O_PACR_REGISTER_DSPI3_VALUE   0xFF0FFFFF
                           886	#978:   /* *******************WDG****************** */
                           887	#979:   /* PBRIDGE0 PACR20/21 - SWT0/1 */
                           888	#980:   #define O_PACR_REGISTER_SWT0_ADDR    BRSHW_IOS(uint32, PBRIDGE0_BASE + 0x108)
                           889	#981:   #define O_PACR_REGISTER_SWT0_VALUE   0xFFFF0FFF
                           890	#982:   #define O_PACR_REGISTER_SWT1_ADDR    BRSHW_IOS(uint32, PBRIDGE0_BASE + 0x108)
                           891	#983:   #define O_PACR_REGISTER_SWT1_VALUE   0xFFFFF0FF
                           892	#984: #   if defined (BRSHW_USERMODE_ACCESS_GROUP_C)
                           893	#985:   /* PBRIDGE0 PACR22 - SWT2 */
                           894	#986:   #define O_PACR_REGISTER_SWT2_ADDR    BRSHW_IOS(uint32, PBRIDGE0_BASE + 0x108)
                           895	#987:   #define O_PACR_REGISTER_SWT2_VALUE   0xFFFFFF0F
                           896	#988: #   endif /*BRSHW_USERMODE_ACCESS_GROUP_C*/
                           897	#990:   /* *******************eMIOS****************** */
                           898	#991: #   if defined (BRSHW_USERMODE_ACCESS_GROUP_C)
                           899	#992:   /* PBRIDGE0 OPACR241 - eMIOS_0/1 */
                           900	#993:   #define O_PACR_REGISTER_EMIOS0_ADDR    BRSHW_IOS(uint32, PBRIDGE0_BASE + 0x1B8)
                           901	#994:   #define O_PACR_REGISTER_EMIOS0_VALUE   0xF0FFFFFF
                           902	#995:   #define O_PACR_REGISTER_EMIOS1_ADDR    BRSHW_IOS(uint32, PBRIDGE1_BASE + 0x1B8)
                           903	#996:   #define O_PACR_REGISTER_EMIOS1_VALUE   0xF0FFFFFF
                           904	#997: #   endif /*BRSHW_USERMODE_ACCESS_GROUP_C*/
                           905	#999:   /***************************************************************/
                           906	#1000:   /* Additional base addresses for UAA bit setting */
                           907	#1001:   /***************************************************************/
                           908	#1002:   /* Calypso family seems to have the UAA bit only for the MC_ME module */
                           909	#1004:   /* *******************MC_ME****************** */
                           910	#1005:   #define MC_ME_BASE 0xFFFB8000
                           911	#1007: #   if defined (BRSHW_USERMODE_ACCESS_GROUP_C)
                           912	#1008:   /* *******************DSPI****************** */
                           913	#1009:   #define DSPI0_BASE 0xFFE70000
                           914	#1010:   #define DSPI1_BASE 0xFFE74000
                           915	#1011:   #define DSPI2_BASE 0xFBE70000
                           916	#1012:   #define DSPI3_BASE 0xFBE74000
                           917	#1014:   /* *******************FLASH****************** */
                           918	#1015:   /* Base address of the flash module, used by DrvFls */
                           919	#1016:   /* This can be Dataflash or Codeflash, depending to the derivative */
                           920	#1017:   #define FLASH0_BASE 0xFFFE0000
                           921	#1018: #   endif /*BRSHW_USERMODE_ACCESS_GROUP_C*/
                           922	#1020: #  elif defined (BRSHW_USERMODE_ACCESS_GROUP_D)
                           923	#1021:   /***************************************************************/
                           924	#1022:   /* Platform / Off-platform peripheral access control registers */
                           925	#1023:   /***************************************************************/
                           926	#1024:   /* PACR/OPACR only */
                           927	#1025:   #define PBRIDGE0_BASE 0xFC000000 /* Peripheral bridge A */
                           928	#1026:   #define PBRIDGE1_BASE 0xF8000000 /* Peripheral bridge B */
                           929	#1028:   #define O_PACR_REGISTER_CAN0_ADDR   BRSHW_IOS(uint32, PBRIDGE0_BASE + 0x168)
                           930	#1029:   #define O_PACR_REGISTER_CAN0_VALUE  0xFFF0FFFF
                           931	#1031:   #define O_PACR_REGISTER_CAN2_ADDR   BRSHW_IOS(uint32, PBRIDGE0_BASE + 0x168)
                           932	#1032:   #define O_PACR_REGISTER_CAN2_VALUE  0xF0FFFFFF
                           933	#1034:   #define O_PACR_REGISTER_LIN0_ADDR   BRSHW_IOS(uint32, PBRIDGE0_BASE + 0x16c)
                           934	#1035:   #define O_PACR_REGISTER_LIN0_VALUE  0xFFFF0FFF
                           935	#1037:   #define O_PACR_REGISTER_DATA_FLASH_ADDR   BRSHW_IOS(uint32, PBRIDGE0_BASE + 0x140)
                           936	#1038:   #define O_PACR_REGISTER_DATA_FLASH_VALUE  0xFFFFFFF0
                           937	#1040: #  else
                           938	#1041:   #error: "Your Derivative is currently not analyzed and categorized to a UserMode_Access_Group"
                           939	#1042: #  endif /*BRSHW_USERMODE_ACCESS_GROUP_x*/

                                   Fri Apr 10 08:31:37 2020           Page 18
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                           940	#1043: # endif /*BRSASR_ENABLE_SAFECTXSUPPORT*/
                           941	#1044: #endif /*!BRS_OS_USECASE_BRS*/
                           942	#1046: /**********************************************************************************************************************
                           943	#1047:   LOCAL VARIABLES
                           944	#1048: **********************************************************************************************************************/
                           945	#1050: /**********************************************************************************************************************
                           946	#1051:   LOCAL CONST VARIABLES
                           947	#1052: **********************************************************************************************************************/
                           948	#1053:   #define BRSHWNOP10() asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop")
                           949	#1055: /**********************************************************************************************************************
                           950	#1056:   PROTOTYPES OF LOCAL FUNCTIONS
                           951	#1057: **********************************************************************************************************************/
                           952	#1059: /**********************************************************************************************************************
                           953	#1060:   FUNCTION DEFINITIONS
                           954	#1061: **********************************************************************************************************************/
                           955	#1063: /*****************************************************************************/
                           956	#1064: /**
                           957	#1065:  * @brief      This function has to be used to initialize the Watchdog.
                           958	#1066:  * @pre        -
                           959	#1067:  * @param[in]  -
                           960	#1068:  * @param[out] -
                           961	#1069:  * @return     -
                           962	#1070:  * @context    Function is called from main@BrsMain or EcuM at power on initialization
                           963	#1071:  */
                           964	#1072: /*****************************************************************************/
                           965		.section ".vletext", "vax"
                           966		.vle
                           967		.vle
                           968	..bof.C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5CBrsHw...43.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl..5E8FB058..0::
                           969		.align	1
                           970	..gh.f.p.0.a.1.r.0.e.0:
                           971		.type	..gh.f.p.0.a.1.r.0.e.0,@object
                           972		.size	..gh.f.p.0.a.1.r.0.e.0,0
                           973		.global	BrsHwWatchdogInitPowerOn
                           974	BrsHwWatchdogInitPowerOn:
                           975	#	    .bf
                           976	.LDW01:
                           977	#1073: void BrsHwWatchdogInitPowerOn(void)
                           978	#1074: {
                           979	#1075: #if !defined (VGEN_ENABLE_DRVWD)
                           980	#1076: # if defined (BRSHW_WATCHDOG_GROUP_A) || defined (BRSHW_WATCHDOG_GROUP_B) || defined (BRSHW_WATCHDOG_GROUP_C)
                           981	#1077:   SWT_SR = (uint32)0x0000C520;
00000000 70ffe406          982		e_lis	r7, 64518
00000004 1ce78000          983		e_add16i	r7, r7, -32768
00000008 70180520          984		e_li	r0, 50464
0000000c d407              985		se_stw	r0, 16(r7)
                           986	#1078:   SWT_SR = (uint32)0x0000D928; /* clear softlockbit */
0000000e 701b0128          987		e_li	r0, 55592
00000012 d407              988		se_stw	r0, 16(r7)
                           989	#1079:   SWT_CR = (uint32)0x80000102; /* FRZ=1 SWT counter is stopped in debug mode */
00000014 6200              990		se_bgeni	r0, 0
00000016 1c000102          991		e_add16i	r0, r0, 258
0000001a d007              992		se_stw	r0, 0(r7)
                           993	#1080:                                /* RIA=1 Invalid access to the SWT causes a system reset */
                           994	#1082: #  if defined (BRSHW_WATCHDOG_GROUP_B) || defined (BRSHW_WATCHDOG_GROUP_C)
                           995	#1083:   /*Watchdog Timer2 is enabled by default --> disable watchdog */

                                   Fri Apr 10 08:31:37 2020           Page 19
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                           996	#1084:   SWT2_SR = 0x0000C520;
                           997	#1085:   SWT2_SR = 0x0000D928; /* clear softlockbit */
                           998	#1086:   SWT2_CR = 0x80000102; /* FRZ=1 SWT counter is stopped in debug mode */
                           999	#1087:                         /* RIA=1 Invalid access to the SWT causes a system reset */
                          1000	#1089: #   if defined (BRSHW_WATCHDOG_GROUP_C)
                          1001	#1090:   SWT3_SR = 0x0000C520;
                          1002	#1091:   SWT3_SR = 0x0000D928; /* clear softlockbit */
                          1003	#1092:   SWT3_CR = 0x80000102; /* FRZ=1 SWT counter is stopped in debug mode */
                          1004	#1093: #   endif /*BRSHW_WATCHDOG_GROUP_C*/
                          1005	#1094: #  endif /*BRSHW_WATCHDOG_GROUP_B || BRSHW_WATCHDOG_GROUP_C*/
                          1006	#1095: # endif /*BRSHW_WATCHDOG_GROUP_A || BRSHW_WATCHDOG_GROUP_B || BRSHW_WATCHDOG_GROUP_C*/
                          1007	#1096: #endif /*!VGEN_ENABLE_DRVWD*/
                          1008	#1097: }
                          1009	#	    .ef
                          1010	.LDW11:
0000001c 0004             1011		se_blr
                          1012		.global	__ghs_eofn_BrsHwWatchdogInitPowerOn
                          1013	__ghs_eofn_BrsHwWatchdogInitPowerOn:
                          1014		.type	BrsHwWatchdogInitPowerOn,@function
                          1015		.size	BrsHwWatchdogInitPowerOn,$-BrsHwWatchdogInitPowerOn
                          1016		.align	1
                          1017	
                          1018	#function:			BrsHwWatchdogInitPowerOn
                          1019	#stack frame size:		0
                          1020	#
                          1021	
                          1022		.data
                          1023		.section ".vletext", "vax"
                          1024		.vle
                          1025		.vle
                          1026	
                          1027	
                          1028	#1099: /*****************************************************************************/
                          1029	#1100: /**
                          1030	#1101:  * @brief      This function has to be used to initialize the PLL.
                          1031	#1102:  * @pre        -
                          1032	#1103:  * @param[in]  -
                          1033	#1104:  * @param[out] -
                          1034	#1105:  * @return     -
                          1035	#1106:  * @context    Function is called from main@BrsMain or EcuM at power on initialization
                          1036	#1107:  */
                          1037	#1108: /*****************************************************************************/
                          1038	#1109: void BrsHwPllInitPowerOn(void)
                          1039	#1110: {
                          1040	#1111: #if !defined (VGEN_ENABLE_DRVMCU)
                          1041	#1112: # if (BRS_TIMEBASE_CLOCK > BRSHW_CPU_MAX_FREQUENCY)
                          1042	#1113:   #error "The selected derivative does not support frequencies above BRSHW_CPU_MAX_FREQUENCY (please find the defined value within BrsHw_DerivativeList.h)!"
                          1043	#1114: # endif
                          1044	#1116: # if defined (BRSHW_FMPLL_GROUP_A)
                          1045	#1117:   /* Route XOSC to the PLLs - IRC is default */
                          1046	#1118: #  if defined (BRSHW_OPMODES_GROUP_A)
                          1047	#1119: #   if defined (BRSHW_FMPLL_GROUP_A_1)
                          1048	#1120:   CGM_AC3_SC = (uint32)0x01000000;  /* set auxiliary clock 3 (PLL0 reference clock) source: 8-40 MHz crystal osc. */
                          1049	#1121:   if ((((SIU_MIDR1) >> 16) == 0x5777) && (((SIU_MIDR1) & 0xff) != 0))
                          1050	#1122:   {
                          1051	#1123:     /* Matterhorn Cut2 */

                                   Fri Apr 10 08:31:37 2020           Page 20
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                          1052	#1124:     CGM_SC_DIV_RC = 0x00000001; /* System clock divider ratios will change with next update. */
                          1053	#1125:     CGM_DIV_UPD_TYPE = 0x80000000; /* System clock divider ratios updated on writing MC_CGM.DIV_UPD_TRIG. */
                          1054	#1126:     CGM_SC_DC0 = (uint32)0x80010000; /* DC0 = /3 */
                          1055	#1127:     CGM_SC_DC1 = (uint32)0x80010000; /* DC1 = /6 */
                          1056	#1128:     CGM_SC_DC2 = (uint32)0x80030000; /* set PBRIDGE_CLK DC2 = /12 */
                          1057	#1129:     CGM_SC_DC3 = (uint32)0x80010000; /* DC3 = /2 */
                          1058	#1130:     CGM_SC_DC4 = (uint32)0x80030000; /* DC4 = /4 */
                          1059	#1131:     CGM_DIV_UPD_TRIG = 0xfeedface;
                          1060	#1132:     while (CGM_DIV_UPD_STAT == 1)
                          1061	#1133:     {
                          1062	#1134:       asm("nop");
                          1063	#1135:     }
                          1064	#1137:     CGM_AC0_SC  = (uint32)0x02000000;  /* set auxiliary clock 0 to source: PLL0 */
                          1065	#1138:     CGM_AC0_DC0 = (uint32)0x80030000;  /* set PER_CLK divider (used by PIT, etc. ) = PLL0/4 ; Reason: this is the max. frequency! */
                          1066	#1139:     CGM_AC0_DC4 = (uint32)0x80030000;  /* set LIN_CLK divider (used by LIN, etc. ) = PLL0/8 = 160/4 = 40Mhz */
                          1067	#1140:     CGM_AC2_DC0 = (uint32)0x80010000;  /* set FR_CLK divider = PLL0/2 = 80 MHz *//*Manual says max Freq is 40 Mhz, so this should not work...but it does...*/
                          1068	#1141:     CGM_AC3_SC  = (uint32)0x01000000;  /* set auxiliary clock 3 (PLL0 reference clock) source: external crystal osc. (8-40 MHz) */
                          1069	#1142:     CGM_AC6_SC  = (uint32)0x02000000;  /* set auxiliary clock 6 (SYS_CLK0) source: PLL0 */
                          1070	#1143:     CGM_AC6_DC0 = (uint32)0x80010000;  /* set SYS_CLK0 divider = PLL0/2 = 80 Mhz */
                          1071	#1144:     CGM_AC7_SC  = (uint32)0x02000000;  /* set auxiliary clock 7 (SYS_CLK1) source: PLL0 */
                          1072	#1145:     CGM_AC7_DC0 = (uint32)0x80010000;  /* set SYS_CLK1 divider = PLL0/2 = 80 Mhz */
                          1073	#1146:     CGM_AC8_SC  = (uint32)0x01000000;  /* set auxiliary clock 8 (CAN_CLK)  source: XOSC */
                          1074	#1147:     CGM_AC8_DC0 = (uint32)0x80000000;  /* set auxiliary clock 8 divider to 2 (devider AC8 seems to be necessary otherwise MCAN doesn't get a clock) */
                          1075	#1148:     CGM_AC9_SC  = (uint32)0x01000000;  /* set auxiliary clock 9 (RTI_CLK)  source: XOSC */
                          1076	#1149:     CGM_AC9_DC0 = (uint32)0x80010000;  /* set auxiliary clock 9 divider to 2 */
                          1077	#1150:   }
                          1078	#1151:   else if ((((SIU_MIDR1) >> 16) == 0x5746) && (((SIU_MIDR1) & 0x10) == 0x10))
                          1079	#1152:   {
                          1080	#1153:     /* McKinley Cut2: not documented in data sheet, but token from sample program "skeletonProject" */
                          1081	#1154:     CGM_SC_DIV_RC = 0x00000001; /* System clock divider ratios will change with next update. */
                          1082	#1155:     CGM_DIV_UPD_TYPE = 0x80000000; /* System clock divider ratios updated on writing MC_CGM.DIV_UPD_TRIG. */
                          1083	#1156:     /* Configure System clock dividers */
                          1084	#1157:     CGM_SC_DC0    = (uint32)0x80000000; /* DC0 = /1 fast XBAR clock  */
                          1085	#1158:     CGM_SC_DC1    = (uint32)0x80010000; /* DC1 = /2 slow XBAR clock */
                          1086	#1159:     CGM_SC_DC2    = (uint32)0x80030000; /* set PBRIDGE_CLK DC2 = /4 -> STM timer */
                          1087	#1161:     CGM_AC0_SC = (uint32)0x02000000;  /* set auxiliary clock 0 (PER_CLK)  source: PLL0 */
                          1088	#1162:     CGM_AC0_DC0= (uint32)0x80030000;  /* set PER_CLK (used by PIT, etc. ) = SYS_CLK/4 ; Reason: this is the max. frequency! */
                          1089	#1163:     CGM_AC0_DC4= (uint32)0x80010000;    /* set LIN_CLK (used by LIN, etc. ) = SYS_CLK/2 */
                          1090	#1164:     CGM_AC2_DC0 = (uint32)0x80010000;
                          1091	#1165:     CGM_AC6_SC = (uint32)0x02000000;  /* set auxiliary clock 6 (SYS_CLK0) source: PLL0 */
                          1092	#1166: #    if !(defined (BRS_DERIVATIVE_MPC5746R) || defined (BRS_DERIVATIVE_MPC5745R))
                          1093	#1167:     CGM_AC7_SC = (uint32)0x02000000;  /* set auxiliary clock 7 (SYS_CLK1) source: PLL0 */
                          1094	#1168: #    endif
                          1095	#1169:     CGM_AC8_SC = (uint32)0x01000000;  /* set auxiliary clock 8 (CAN_CLK)  source: XOSC */
                          1096	#1170:     CGM_AC8_DC0= (uint32)0x80000000;  /* set auxiliary clock 8 divider to 1 (devider AC8 seems to be necessary otherwise MCAN doesn't get a clock) */
                          1097	#1172:     CGM_AC9_SC = (uint32)0x01000000;  /* set auxiliary clock 9 (RTI_CLK)  source: XOSC */
                          1098	#1173:     CGM_AC9_DC0 = (uint32)0x80010000;
                          1099	#1175:     CGM_AC6_DC0 = (uint32) 0x80000000; /*divide PLL0 by 1*/
                          1100	#1176: #    if !(defined (BRS_DERIVATIVE_MPC5746R) || defined (BRS_DERIVATIVE_MPC5745R))
                          1101	#1177:     CGM_AC7_DC0 = (uint32) 0x80000000; /*divide PLL1 by 1*/
                          1102	#1178: #    endif
                          1103	#1180:     CGM_DIV_UPD_TRIG = 0xfeedface; /* System clock divider ratio updates triggered. */
                          1104	#1181:     while (CGM_DIV_UPD_STAT == 1)  /* Wait for System Clock Divider Update Status == 0. */
                          1105	#1182:     {
                          1106	#1183:       asm("nop");
                          1107	#1184:     }

                                   Fri Apr 10 08:31:37 2020           Page 21
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                          1108	#1185:   }
                          1109	#1186:   else
                          1110	#1187:   {
                          1111	#1188:     CGM_SC_DC2  = (uint32)0x80030000; /* set PBRIDGE_CLK (used by ? etc. ) = SYS_CLK/4 ; Reason: this is the max. frequency! */
                          1112	#1189:     CGM_AC0_SC  = (uint32)0x02000000; /* set auxiliary clock 0 (PER_CLK)  source: PLL0 */
                          1113	#1190:     CGM_AC0_DC0 = (uint32)0x80030000; /* set PER_CLK (used by PIT, etc. ) = SYS_CLK/4 ; Reason: this is the max. frequency! */
                          1114	#1191:     CGM_AC0_DC4 = (uint32)0x80010000; /* set LIN_CLK (used by LIN, etc. ) = SYS_CLK/2 */
                          1115	#1192:     CGM_AC2_DC0 = (uint32)0x80010000; /* divide by 2 */
                          1116	#1193:     CGM_AC6_SC  = (uint32)0x02000000; /* set auxiliary clock 6 (SYS_CLK0) source: PLL0 */
                          1117	#1194: #    if !(defined (BRS_DERIVATIVE_MPC5746R) || defined (BRS_DERIVATIVE_MPC5745R))
                          1118	#1195:     /* Rainier does not have AuxClk7 */
                          1119	#1196:     CGM_AC7_SC  = (uint32)0x02000000; /* set auxiliary clock 7 (SYS_CLK1) source: PLL0 */
                          1120	#1197: #    endif
                          1121	#1198:     CGM_AC8_SC  = (uint32)0x01000000; /* set auxiliary clock 8 (CAN_CLK)  source: XOSC */
                          1122	#1199:     CGM_AC8_DC0 = (uint32)0x80000000; /* set auxiliary clock 8 divider to 1 (devider AC8 seems to be necessary otherwise MCAN doesn't get a clock) */
                          1123	#1200:     CGM_AC9_SC  = (uint32)0x01000000; /* set auxiliary clock 9 (RTI_CLK)  source: XOSC */
                          1124	#1201:     CGM_AC9_DC0 = (uint32)0x80010000;
                          1125	#1202:   }
                          1126	#1204: #   elif defined (BRSHW_FMPLL_GROUP_A_2)
                          1127	#1205:   CGM_AC4_SC = (uint32)0x01000000; /* set XOSC as clock source for PLL0*/
                          1128	#1206:   /* If the Pll is wrong, check the CGM_AC4_SC Register if the value was written */
                          1129	#1207: #    if defined (VGEN_ENABLE_DRVFR__BASEASR)
                          1130	#1208: #     if (BRS_TIMEBASE_CLOCK%80 != 0)
                          1131	#1209:   #error Flexray needs an 80 MHz clock. Please adjust PLL0 (TIMEBASE_CLOCK) and CGM_AC2_DC0 divider accordingly.
                          1132	#1210: #     else
                          1133	#1211:   CGM_AC2_DC0 =
                          1134	#1212:     (0x1                       <<31U) | /* Bit 0:     DE - Divider Enable */
                          1135	#1213:     ((BRS_TIMEBASE_CLOCK/80-1) <<16U);  /* Bit 12-15: DIV - Divider Division Value Divider. The resultant FlexRay clock has a period 'DIV + 1' times that of auxiliary clock 2. */
                          1136	#1214:                                         /* The source of AC2 is PLL0 by default */
                          1137	#1215: #     endif
                          1138	#1216: #    endif /*VGEN_ENABLE_DRVFR__BASEASR*/
                          1139	#1217: #    if defined (VGEN_ENABLE_LIN_DRV)
                          1140	#1218:   CGM_AC8_SC  = (uint32)0x02000000; /* set Auxiliary Clock 8 Source Control to PLL0_PHI */
                          1141	#1219:   CGM_AC8_DC0 = (uint32)0x80020000; /* enable LIN -> LIN baud rate clock 80MHz */
                          1142	#1220: #     endif
                          1143	#1222: #   elif defined (BRSHW_FMPLL_GROUP_A_3)
                          1144	#1223:   CGM_AC2_SC  = 0x01000000; /* Select PLL0 input = XOSC */
                          1145	#1224:   CGM_AC3_SC  = 0x01000000; /* Select PLL1 input = XOSC */
                          1146	#1225:   CGM_SC_DC0  = 0x80000000; /* System clock divider enabled, System clock = System clock source / 1 */
                          1147	#1226:   CGM_SC_DC1  = 0x80000000; /* IPS divider enabled, IPS clock = System clock source / 1 */
                          1148	#1228:   CGM_AC0_SC  = 0x02000000; /* Select peripheral clock source = PLL0 (PIT, LINflex, etc.) */
                          1149	#1229:   CGM_AC0_DC0 = 0x80030000; /* PIT clock divider enabled, peripheral clock / 4 */
                          1150	#1231:   CGM_AC1_SC  = 0x02000000; /* Select CAN clock source = PLL0 */
                          1151	#1232:   CGM_AC1_DC0 = 0x80000000; /* CAN divider enabled, CAN clock = PLL0 / 1 */
                          1152	#1234: #   else
                          1153	#1235:   CGM_AC3_SC = (uint32)0x01000000;  /* set auxiliary clock 3 (PLL0 reference clock) source: 8-40 MHz crystal osc. */
                          1154	#1236:   CGM_SC_DC0 = (uint32)0x80030000;  /* set PBRIDGE_CLK (used by PIT, CAN, LIN, FR, etc. ) = SYS_CLK/4 ; Reason: this is the max. frequency! */
                          1155	#1237: #    if defined (BRS_DERIVATIVE_MPC5775K)
                          1156	#1238:   CGM_AC15_SC  = (uint32)0x02000000;  /*set auxilary clock 15 to PLL0_PHI_CLK*/
                          1157	#1239:   CGM_AC15_DC0 = (uint32)0x80030000;  /*enable auxilary clock 15 and set divider to 4 --> Pll0_PHI_CLK/4 used for MCAN*/
                          1158	#1240: #    endif
                          1159	#1241: #    if defined (BRSASR_ENABLE_OS_MULTICORESUPPORT)
                          1160	#1242:      CGM_SC_DC1 = (uint32)0x80010000; /* Core1_CLK divider: 2 (same divider than Core0_CLK) */
                          1161	#1243:      CGM_SC_DC2 = (uint32)0x80010000; /* Core2_CLK divider: 2 (same divider than Core0_CLK) */
                          1162	#1244: #    endif
                          1163	#1245: #   endif /*BRSHW_FMPLL_GROUP_A_x*/

                                   Fri Apr 10 08:31:37 2020           Page 22
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                          1164	#1246: #  endif /*BRSHW_OPMODES_GROUP_A*/
                          1165	#1248: #  if defined (BRSHW_OPMODES_GROUP_B)
                          1166	#1249:   CGM_AC3_SC  = 0x01000000; /* Select PLL0 input = XOSC */
                          1167	#1250:   CGM_AC4_SC  = 0x01000000; /* Select PLL1 input = XOSC */
                          1168	#1251:   CGM_SC_DC0  = 0x80000000; /* System clock divider enabled, System clock = System clock source / 1 */
                          1169	#1252:   CGM_SC_DC1  = 0x80010000; /* Peripheral Core 2 divider enabled, clock = System clock source / 2 */
                          1170	#1253:   CGM_SC_DC2  = 0x80030000; /* PBRIDGE clock, clock = System clock source / 4 */
                          1171	#1255:   CGM_AC0_SC  = 0x02000000; /* Select peripheral clock source = PLL0 (PIT, LINflex, etc.) */
                          1172	#1256:   CGM_AC0_DC0 = 0x80030000; /* PIT clock divider enabled, peripheral clock / 4 */
                          1173	#1258:   CGM_AC8_SC  = 0x01000000; /* Select FlexCAN clock source = PLL0 */
                          1174	#1259:   CGM_AC2_DC0 = 0x00000000; /* FLEXRAY */
                          1175	#1260: #  endif /*BRSHW_OPMODES_GROUP_B*/
                          1176	#1262: #  if ((BRS_OSC_CLK < 8) || (BRS_OSC_CLK > 56) || ((BRS_OSC_CLK%8 != 0) && (BRS_OSC_CLK%10 != 0)))
                          1177	#1263:   #error "The current PLL implementation only supports quartz frequencies which are multiples of 8 or 10 MHz and the quartz must be in the range of 8 - 56 MHz! PLL will have an undefined frequency!"
                          1178	#1264: #  endif
                          1179	#1265: #  if ((BRS_TIMEBASE_CLOCK < 75) || (BRS_TIMEBASE_CLOCK > 310) || (BRS_TIMEBASE_CLOCK%5 != 0)) && (BRS_OSC_CLK%10 == 0)
                          1180	#1266:   #error "With the used quartz (divisible by 10MHz) the current PLL implementation only supports CPU frequencies in the range 75 - 310 MHz and which are multiples of 5 MHz! PLL will have an undefined frequency!"
                          1181	#1267: #  elif (((BRS_TIMEBASE_CLOCK < 75) || ((BRS_TIMEBASE_CLOCK > 127) && (BRS_TIMEBASE_CLOCK < 150)) || (BRS_TIMEBASE_CLOCK > 254) || ((BRS_TIMEBASE_CLOCK >= 150) && (BRS_TIMEBASE_CLOCK <= 254) && (BRS_TIMEBASE_CLOCK%2 != 0))) && (BRS_OSC_CLK%8 == 0) && (BRS_OSC_CLK%10 != 0))
                          1182	#1268:   #error "With the used quartz (divisible of 8MHz) the current PLL implementation only supports CPU frequencies in the range 75 - 127/150 - 254 MHz and which are multiples of 1/2 MHz! PLL will have an undefined frequency!"
                          1183	#1269: #  endif
                          1184	#1271:   /* CPU_FREQUENCY = (QUARTZ_FREQUENCY*MFD) / (PREDIV * (RFDPHI*2)) */
                          1185	#1272: #  if (BRS_TIMEBASE_CLOCK >= 75) && (BRS_TIMEBASE_CLOCK < 150) && (BRS_OSC_CLK%10 == 0)
                          1186	#1273:   #define PREDIV  BRS_OSC_CLK/10
                          1187	#1274:   #define MFD     BRS_TIMEBASE_CLOCK*8/10
                          1188	#1275:   #define RFDPHI  4*2
                          1189	#1276: #  elif (BRS_TIMEBASE_CLOCK >= 150) && (BRS_TIMEBASE_CLOCK <= 310) && (BRS_OSC_CLK%10 == 0)
                          1190	#1277:   #define PREDIV  BRS_OSC_CLK/10
                          1191	#1278:   #define MFD     BRS_TIMEBASE_CLOCK*4/10
                          1192	#1279:   #define RFDPHI  2*2
                          1193	#1280: #  elif (BRS_TIMEBASE_CLOCK >= 75) && (BRS_TIMEBASE_CLOCK <= 127) && (BRS_OSC_CLK%8 == 0)
                          1194	#1281:   #define PREDIV  BRS_OSC_CLK/8
                          1195	#1282:   #define MFD     BRS_TIMEBASE_CLOCK
                          1196	#1283:   #define RFDPHI  4*2
                          1197	#1284: #  elif (BRS_TIMEBASE_CLOCK >= 150) && (BRS_TIMEBASE_CLOCK <= 254) && (BRS_OSC_CLK%8 == 0)
                          1198	#1285:   #define PREDIV  BRS_OSC_CLK/8
                          1199	#1286:   #define MFD     BRS_TIMEBASE_CLOCK/2
                          1200	#1287:   #define RFDPHI  2*2
                          1201	#1288: #  endif
                          1202	#1290:   PLL0DV =
                          1203	#1291:     (0x4    <<27U) | /* Bit 1-4: RFDPHI1: 0x4 = Divider for PHI1 output clock (not used but 0x0 is not allowed!) */
                          1204	#1292:     (RFDPHI <<16U) | /* Bit 10-15: Divider for PHI output clock (0x00 -> invalid,0x1 ->2,0x2->4,0x3->6,...,0x3f->126) */
                          1205	#1293:     (PREDIV <<12U) | /* Bit 17-19: Input clock pre-divider (0x0-> Clock inhibit,0x1->1,...,0x7->7) */
                          1206	#1294:     (MFD    <<0U);   /* Bit 25-31: Loop multiplication factor divider (0x00-0x07->invalid ,0x08 -> 8,0x09 -> 9,...,0x7f ->127 */
                          1207	#1296: #  if defined (BRSHW_SIU_GROUP_B)
                          1208	#1297:   PLL0CR |= 0x00000300; /* Set CLKCFG to 11b -> PLL in normal mode */
                          1209	#1298:   while (!(SIU_RSR & 0x00000080UL)){}; /* Confirm that XOSC clock is stable */
                          1210	#1299:   /* (Mandatory for MPC5777C) */
                          1211	#1300:   /* Bit 0-7:   SYSDIV unlocked (0), PLL0 input = XOSC (0), PLL1 input = XOSC (0), PERCLKSEL = SYSCLK (0)*/
                          1212	#1301:   /* Bit 10-11: FMPERDIV = Divide_by_4 (bug->0b00, 0b01???) (FM_PER_CLK has to be lower than 100MHz! -> ATTENTION: bug description see below!) */
                          1213	#1302:   /* Bit 14-15: PERDIV = Divide_by_4 (0b01) (has to be Sys_clk/4 for PIT timer calculation)*/
                          1214	#1303:   /* Bit 16:    MCAN = XOSC (0)*/
                          1215	#1304:   /* Bit 18-19: SYSCLKSEL = PLL0 (0b11) */
                          1216	#1305:   /* Bit 23-31: eTPUDiv = Divide_by_2 (0), SysClkDiv = Divide_by_1 (0b100), ProgressiveClockSwitch = disabled (0) */
                          1217	#1306:   SIU_SYSCLK = 0x00013010;  /* ATTENTION: MPC5777C works only correct with FMPERDIV = 0b00 (Divide_by_2 -> FM_PER_CLK > 100MHz ?) !!!   */
                          1218	#1307:                             /* But according to the manual the prescaler has to be at least FMPERDIV = 0b01 (Divide_by_4) -> 0x00113010 */
                          1219	#1308: #  endif /*BRSHW_SIU_GROUP_B*/

                                   Fri Apr 10 08:31:37 2020           Page 23
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                          1220	#1309: #  if defined (BRSHW_OPMODES_GROUP_NONE)
                          1221	#1310:   /* PLL0 mode changes are handled threw CLKCFG-field of PLL0CR, and not threw MC_ME mode entry module */
                          1222	#1311:   //PLL0CR &= 0xFFFFFCFF; /* Set CLKCFG to 00b -> PLL off; power down pulse */
                          1223	#1312:   while (!(PLL0SR & 0x00000004UL)){}; /* Confirm that PLL0 clock is stable */
                          1224	#1313: #  endif /*BRSHW_OPMODES_GROUP_NONE*/
                          1225	#1314: # endif /*BRSHW_FMPLL_GROUP_A*/
                          1226	#1316: # if defined (BRSHW_FMPLL_GROUP_B)
                          1227	#1317:   /* Route XOSC to the PLL's - IRC is default */
                          1228	#1318:   CGM_AC5_SC = (uint32)0x01000000;  /* set auxiliary clock 5 (PLL reference clock) source: 8-40 MHz external crystal osc. (FXOSC) */
                          1229	#1319: #  if (BRS_TIMEBASE_CLOCK != 160)
                          1230	#1320:   #error "According to the MPC5748G Datasheet Rev. 2 the PLL must have the output frequency 160MHz!"
                          1231	#1321: #  endif
                          1232	#1323: #  if ((BRS_OSC_CLK < 8) || (BRS_OSC_CLK > 56) || ((BRS_OSC_CLK%8 != 0) && (BRS_OSC_CLK%10 != 0)))
                          1233	#1324:   #error "The current PLL implementation only supports quartz frequencies which are multiples of 8 or 10 MHz and the quartz must be in the range of 8 - 56 MHz! PLL will have an undefined frequency!"
                          1234	#1325: #  endif
                          1235	#1326: #  if ((BRS_TIMEBASE_CLOCK < 75) || (BRS_TIMEBASE_CLOCK > 310) || (BRS_TIMEBASE_CLOCK%5 != 0)) && (BRS_OSC_CLK%10 == 0)
                          1236	#1327:   #error "With the used quartz (divisible by 10MHz) the current PLL implementation only supports CPU frequencies in the range 75 - 310 MHz and which are multiples of 5 MHz! PLL will have an undefined frequency!"
                          1237	#1328: #  elif (((BRS_TIMEBASE_CLOCK < 75) || ((BRS_TIMEBASE_CLOCK > 127) && (BRS_TIMEBASE_CLOCK < 150)) || (BRS_TIMEBASE_CLOCK > 254) || ((BRS_TIMEBASE_CLOCK >= 150) && (BRS_TIMEBASE_CLOCK <= 254) && (BRS_TIMEBASE_CLOCK%2 != 0))) && (BRS_OSC_CLK%8 == 0) && (BRS_OSC_CLK%10 != 0))
                          1238	#1329:   #error "With the used quartz (divisible of 8MHz) the current PLL implementation only supports CPU frequencies in the range 75 - 127/150 - 254 MHz and which are multiples of 1/2 MHz! PLL will have an undefined frequency!"
                          1239	#1330: #  endif
                          1240	#1332:   /* CPU_FREQUENCY = (QUARTZ_FREQUENCY*MFD) / (PREDIV * (2^(RFDPHI-1)) *4) */
                          1241	#1333:   /* Don't trust the datasheet.... the Out Divider is 4*(2^(RFDPHI-1)) */
                          1242	#1334: #  if (BRS_OSC_CLK%10 == 0)
                          1243	#1335:   #define PREDIV  BRS_OSC_CLK/10
                          1244	#1336:   #define MFD     BRS_TIMEBASE_CLOCK*4*1/10
                          1245	#1337:   #define RFDPHI  1                              /* /4*1 */
                          1246	#1338: #  elif (BRS_OSC_CLK%8 == 0)
                          1247	#1339:   #define PREDIV  BRS_OSC_CLK/8
                          1248	#1340:   #define MFD     BRS_TIMEBASE_CLOCK
                          1249	#1341:   #define RFDPHI  2                              /* /4*2 */
                          1250	#1342: #  endif
                          1251	#1344:   PLL0DV =
                          1252	#1345:   (0x4    <<27U) | /* Bit 1-4: RFDPHI1: 0x4 = Divider for PHI1 output clock (not used but 0x0 is not allowed!) */
                          1253	#1346:   (RFDPHI <<16U) | /* Bit 10-15: Divider for PHI output clock (0x00 -> invalid,0x1 ->2,0x2->4,0x3->6,...,0x3f->126) */
                          1254	#1347:   (PREDIV <<12U) | /* Bit 17-19: Input clock pre-divider (0x0-> Clock inhibit,0x1->1,...,0x7->7) */
                          1255	#1348:   (MFD    <<0U);   /* Bit 25-31: Loop multiplication factor divider (0x00-0x07->invalid ,0x08 -> 8,0x09 -> 9,...,0x7f ->127 */
                          1256	#1350:   PLLCAL3 = 0x09c3c000;
                          1257	#1351:   PLLFD = 0x40000000; /* SMDEN=1 (to disable SDM...) */
                          1258	#1352: # endif /*BRSHW_FMPLL_GROUP_B*/
                          1259	#1354:   BrsHwSwitchRunMode();
                          1260	#1355: #endif /*!VGEN_ENABLE_DRVMCU*/
                          1261	#1356: }
                          1262	#1358: #if !defined (VGEN_ENABLE_DRVPORT)
                          1263	#1359: /*******************************************************************************
                          1264	#1360:   Port Pin initialization helper functions for usage of BrsHw_Ports.h
                          1265	#1361: ********************************************************************************/
                          1266	#1362: /*****************************************************************************/
                          1267	#1363: /**
                          1268	#1364:  * @brief      This function configures a port pin as input pin.
                          1269	#1365:  * @pre        Port pin configuartions available within BrsHw_Ports.h and
                          1270	#1366:  *             no DrvPort used for port pin initialization.
                          1271	#1367:  * @param[in]  p - brsHw_Port_PortType, to be initialized.
                          1272	#1368:  * @param[out] -
                          1273	#1369:  * @return     -
                          1274	#1370:  * @context    Function is called from BrsHwPortInitPowerOn() and
                          1275	#1371:  *             BrsHwEvaBoardInitPowerOn() locally.

                                   Fri Apr 10 08:31:37 2020           Page 24
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                          1276	#1372:  */
                          1277	#1373: /*****************************************************************************/
                          1278	#1374: void BrsHwInitPortInput(brsHw_Port_PortType p, brsHw_Port_MultiplexedType m)
                          1279	#1375: {
                          1280	#1376: #if defined (BRSHW_SIU_GROUP_B)
                          1281	#1377:   SIU_MSCR((p.muxMSCRValue)) |= BRSHW_PCR_PIN_ASSIGNMENT_GPIO_INPUT; /* Very Strong drive, Push-pull */
                          1282	#1378:   if ((m.muxIMUXValue) <= 12)
                          1283	#1379:   {
                          1284	#1380:     switch(m.muxMUXSEL)
                          1285	#1381:     {
                          1286	#1382:       case BRSHW_PORT_SIUL_MUXSEL_0:
                          1287	#1383:         SIU_IMUX((m.muxIMUXValue)) &= (0xFFFFFFFC);
                          1288	#1384:         SIU_IMUX((m.muxIMUXValue)) |=  ((m.muxMultiplexedAlternative) << 0);
                          1289	#1385:         break;
                          1290	#1386:       case BRSHW_PORT_SIUL_MUXSEL_1:
                          1291	#1387:         SIU_IMUX((m.muxIMUXValue)) &= (0xFFFFFFF3);
                          1292	#1388:         SIU_IMUX((m.muxIMUXValue)) |=  ((m.muxMultiplexedAlternative) << 2);
                          1293	#1389:         break;
                          1294	#1390:       case BRSHW_PORT_SIUL_MUXSEL_2:
                          1295	#1391:         SIU_IMUX((m.muxIMUXValue)) &= (0xFFFFFFCF);
                          1296	#1392:         SIU_IMUX((m.muxIMUXValue)) |=  ((m.muxMultiplexedAlternative) << 4);
                          1297	#1393:         break;
                          1298	#1394:       case BRSHW_PORT_SIUL_MUXSEL_3:
                          1299	#1395:         SIU_IMUX((m.muxIMUXValue)) &= (0xFFFFFF3F);
                          1300	#1396:         SIU_IMUX((m.muxIMUXValue)) |=  ((m.muxMultiplexedAlternative) << 6);
                          1301	#1397:         break;
                          1302	#1398:       case BRSHW_PORT_SIUL_MUXSEL_4:
                          1303	#1399:         SIU_IMUX((m.muxIMUXValue)) &= (0xFFFFFCFF);
                          1304	#1400:         SIU_IMUX((m.muxIMUXValue)) |=  ((m.muxMultiplexedAlternative) << 8);
                          1305	#1401:       case BRSHW_PORT_SIUL_MUXSEL_5:
                          1306	#1402:         SIU_IMUX((m.muxIMUXValue)) &= (0xFFFFF3FF);
                          1307	#1403:         SIU_IMUX((m.muxIMUXValue)) |=  ((m.muxMultiplexedAlternative) << 10);
                          1308	#1404:         break;
                          1309	#1405:       case BRSHW_PORT_SIUL_MUXSEL_6:
                          1310	#1406:         SIU_IMUX((m.muxIMUXValue)) &= (0xFFFFCFFF);
                          1311	#1407:         SIU_IMUX((m.muxIMUXValue)) |=  ((m.muxMultiplexedAlternative) << 12);
                          1312	#1408:         break;
                          1313	#1409:       case BRSHW_PORT_SIUL_MUXSEL_7:
                          1314	#1410:         SIU_IMUX((m.muxIMUXValue)) &= (0xFFFF3FFF);
                          1315	#1411:         SIU_IMUX((m.muxIMUXValue)) |=  ((m.muxMultiplexedAlternative) << 14);
                          1316	#1412:         break;
                          1317	#1413:       case BRSHW_PORT_SIUL_MUXSEL_8:
                          1318	#1414:         SIU_IMUX((m.muxIMUXValue)) &= (0xFFFCFFFF);
                          1319	#1415:         SIU_IMUX((m.muxIMUXValue)) |=  ((m.muxMultiplexedAlternative) << 16);
                          1320	#1416:         break;
                          1321	#1417:       case BRSHW_PORT_SIUL_MUXSEL_9:
                          1322	#1418:         SIU_IMUX((m.muxIMUXValue)) &= (0xFFF3FFFF);
                          1323	#1419:         SIU_IMUX((m.muxIMUXValue)) |=  ((m.muxMultiplexedAlternative) << 18);
                          1324	#1420:         break;          
                          1325	#1421:       case BRSHW_PORT_SIUL_MUXSEL_10:
                          1326	#1422:         SIU_IMUX((m.muxIMUXValue)) &= (0xFFCFFFFF);
                          1327	#1423:         SIU_IMUX((m.muxIMUXValue)) |=  ((m.muxMultiplexedAlternative) << 20);
                          1328	#1424:         break;          
                          1329	#1425:       case BRSHW_PORT_SIUL_MUXSEL_11:
                          1330	#1426:         SIU_IMUX((m.muxIMUXValue)) &= (0xFF3FFFFF);
                          1331	#1427:         SIU_IMUX((m.muxIMUXValue)) |=  ((m.muxMultiplexedAlternative) << 22);

                                   Fri Apr 10 08:31:37 2020           Page 25
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                          1332	#1428:         break;
                          1333	#1429:       case BRSHW_PORT_SIUL_MUXSEL_12:
                          1334	#1430:         SIU_IMUX((m.muxIMUXValue)) &= (0xFCFFFFFF);
                          1335	#1431:         SIU_IMUX((m.muxIMUXValue)) |=  ((m.muxMultiplexedAlternative) << 24);
                          1336	#1432:         break;
                          1337	#1433:       case BRSHW_PORT_SIUL_MUXSEL_13:
                          1338	#1434:         SIU_IMUX((m.muxIMUXValue)) &= (0xF3FFFFFF);
                          1339	#1435:         SIU_IMUX((m.muxIMUXValue)) |=  ((m.muxMultiplexedAlternative) << 26);
                          1340	#1436:         break;          
                          1341	#1437:       case BRSHW_PORT_SIUL_MUXSEL_14:
                          1342	#1438:         SIU_IMUX((m.muxIMUXValue)) &= (0xCFFFFFFF);
                          1343	#1439:         SIU_IMUX((m.muxIMUXValue)) |=  ((m.muxMultiplexedAlternative) << 28);
                          1344	#1440:         break;
                          1345	#1441:       case BRSHW_PORT_SIUL_MUXSEL_15:
                          1346	#1442:         SIU_IMUX((m.muxIMUXValue)) &= (0x3FFFFFFF);
                          1347	#1443:         SIU_IMUX((m.muxIMUXValue)) |=  ((m.muxMultiplexedAlternative) << 30);
                          1348	#1444:         break;
                          1349	#1445:     }
                          1350	#1446:   }
                          1351	#1448: #elif defined (BRSHW_SIU_GROUP_D_2)
                          1352	#1449:   if((p.portSIUL) == BRSHW_PORT_SIUL_A)
                          1353	#1450:   {
                          1354	#1451:     SIU_MSCR((p.muxMSCRValue)) |= BRSHW_PCR_PIN_ASSIGNMENT_GPIO_INPUT; /* Very Strong drive, Push-pull */
                          1355	#1452:     SIU_MSCR((m.muxMSCRValue)) |= (m.muxMultiplexedAlternative); /* Source Signal Select */
                          1356	#1453:   }
                          1357	#1454:   else
                          1358	#1455:   {
                          1359	#1456:     SIU_B_MSCR((p.muxMSCRValue)) |= BRSHW_PCR_PIN_ASSIGNMENT_GPIO_INPUT; /* Very Strong drive, Push-pull */
                          1360	#1457:     SIU_B_MSCR((m.muxMSCRValue)) |= (m.muxMultiplexedAlternative); /* Source Signal Select */
                          1361	#1458:   }
                          1362	#1460: #else
                          1363	#1461:   SIU_MSCR((p.portGroup * 16 + p.portNumber)) |= BRSHW_PCR_PIN_ASSIGNMENT_GPIO_INPUT; /* Enables the input buffer */
                          1364	#1462: # if defined (BRSHW_SIU_GROUP_A)
                          1365	#1463:   SIU_IMCR((m.muxIMCRValue)) |= (m.muxMultiplexedAlternative);
                          1366	#1464: # else
                          1367	#1465:   SIU_MSCR((m.muxMSCRValue)) |= (m.muxMultiplexedAlternative);
                          1368	#1466: # endif
                          1369	#1467: #endif /*BRSHW_SIU_GROUP_x*/
                          1370	#1468: }
                          1371	#1470: /*****************************************************************************/
                          1372	#1471: /**
                          1373	#1472:  * @brief      This function configures a port pin as output pin.
                          1374	#1473:  * @pre        Port pin configuartions available within BrsHw_Ports.h and
                          1375	#1474:  *             no DrvPort used for port pin initialization.
                          1376	#1475:  * @param[in]  p - brsHw_Port_PortType, to be initialized.
                          1377	#1476:  * @param[out] -
                          1378	#1477:  * @return     -
                          1379	#1478:  * @context    Function is called from BrsHwPortInitPowerOn() and
                          1380	#1479:  *             BrsHwEvaBoardInitPowerOn() locally.
                          1381	#1480:  */
                          1382	#1481: /*****************************************************************************/
                          1383	#1482: void BrsHwInitPortOutput(brsHw_Port_PortType p)
                          1384	#1483: {
                          1385	#1484: #if defined (BRSHW_SIU_GROUP_B)
                          1386	#1485:   SIU_MSCR((p.muxMSCRValue)) |= BRSHW_PCR_PIN_ASSIGNMENT_GPIO_OUTPUT; /* Very Strong drive, Push-pull*/
                          1387	#1486:   SIU_MSCR((p.muxMSCRValue)) |= (p.muxMultiplexedAlternative); /* Source Signal Select */

                                   Fri Apr 10 08:31:37 2020           Page 26
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                          1388	#1488: #elif defined (BRSHW_SIU_GROUP_D_2)
                          1389	#1489:   if((p.portSIUL) == BRSHW_PORT_SIUL_A)
                          1390	#1490:   {
                          1391	#1491:     SIU_MSCR((p.muxMSCRValue)) |= BRSHW_PCR_PIN_ASSIGNMENT_GPIO_OUTPUT; /* Very Strong drive, Push-pull */
                          1392	#1492:     SIU_MSCR((p.muxMSCRValue)) |= (p.muxMultiplexedAlternative); /* Source Signal Select */
                          1393	#1493:   }
                          1394	#1494:   else
                          1395	#1495:   {
                          1396	#1496:     SIU_B_MSCR((p.muxMSCRValue)) |= BRSHW_PCR_PIN_ASSIGNMENT_GPIO_OUTPUT; /* Very Strong drive, Push-pull */
                          1397	#1497:     SIU_B_MSCR((p.muxMSCRValue)) |= (p.muxMultiplexedAlternative); /* Source Signal Select */
                          1398	#1498:   }
                          1399	#1500: #else
                          1400	#1501:   SIU_MSCR((p.portGroup * 16 + p.portNumber)) |= BRSHW_PCR_PIN_ASSIGNMENT_GPIO_OUTPUT; /* Very Strong drive, Push-pull */
                          1401	#1502:   SIU_MSCR((p.portGroup * 16 + p.portNumber)) |= (p.portAlternative); /* Source Signal Select */
                          1402	#1503: #endif /*BRSHW_SIU_GROUP_x*/
                          1403	#1504: }
                          1404	#1506: /*****************************************************************************/
                          1405	#1507: /**
                          1406	#1508:  * @brief      This function configures the port pin configuration registers
                          1407	#1509:  *             (pull-up, pull-down)
                          1408	#1510:  * @pre        Port pin configuartions available within BrsHw_Ports.h and
                          1409	#1511:  *             no DrvPort used for port pin initialization.
                          1410	#1512:  * @param[in]  p - brsHw_Port_PortType, to be initialized,
                          1411	#1513:  *             n - brsHw_Port_ConfType, for port pin configuration
                          1412	#1514:  * @param[out] -
                          1413	#1515:  * @return     -
                          1414	#1516:  * @context    Function is called from BrsHwPortInitPowerOn() and
                          1415	#1517:  *             BrsHwEvaBoardInitPowerOn() locally.
                          1416	#1518:  */
                          1417	#1519: /*****************************************************************************/
                          1418	#1520: void BrsHwInitPortConfig(brsHw_Port_PortType p, brsHw_Port_ConfType n)
                          1419	#1521: {
                          1420	#1522: #if defined (BRSHW_SIU_GROUP_B)
                          1421	#1523:   if ((n.PortPullOption) == PORT_PULL_UP_ENABLED)
                          1422	#1524:   {
                          1423	#1525:     SIU_MSCR((p.muxMSCRValue)) &= (0xFFFCFFFF);
                          1424	#1526:     SIU_MSCR((p.muxMSCRValue)) |= (3 << 16);
                          1425	#1527:   }
                          1426	#1528:   else if ((n.PortPullOption) == PORT_PULL_DOWN_ENABLED)
                          1427	#1529:   {
                          1428	#1530:     SIU_MSCR((p.muxMSCRValue)) &= (0xFFFCFFFF);
                          1429	#1531:     SIU_MSCR((p.muxMSCRValue)) |= (1 << 16);
                          1430	#1532:   }
                          1431	#1533:   else
                          1432	#1534:   {
                          1433	#1535:     SIU_MSCR((p.muxMSCRValue)) &= (0xFFFCFFFF);
                          1434	#1536:   }
                          1435	#1537: #endif
                          1436	#1538: }
                          1437	#1540: # if defined (BRS_ENABLE_FBL_SUPPORT)
                          1438	#1541:   #define BRS_START_SEC_RAM_CODE
                          1439	#1542:   #include "Brs_MemMap.h"   /* PRQA S 5087 *//* MD_MSR_19.1 */
                          1440	#1543: # endif
                          1441	#1544: /*****************************************************************************/
                          1442	#1545: /**
                          1443	#1546:  * @brief      This function sets the output level of a port pin.

                                   Fri Apr 10 08:31:37 2020           Page 27
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                          1444	#1547:  * @pre        Port pin configuartions available within BrsHw_Ports.h,
                          1445	#1548:  *             no DrvPort used for port pin initialization and
                          1446	#1549:  *             transferred port pin has to be initialized as output pin with
                          1447	#1550:  *             GPIO functionality.
                          1448	#1551:  * @param[in]  p     - brsHw_Port_PortType, to be set,
                          1449	#1552:  *             Level - level, port pin has to be set to
                          1450	#1553:  *                     (BRSHW_PORT_LOGIC_LOW or BRSHW_PORT_LOGIC_HIGH).
                          1451	#1554:  * @param[out] -
                          1452	#1555:  * @return     -
                          1453	#1556:  * @context    Function is called from BrsHwPortInitPowerOn(),
                          1454	#1557:  *             BrsHwEvaBoardInitPowerOn(), BrsHw_WriteDio_TCM_SDA_OUT() and
                          1455	#1558:  *             BrsHw_WriteDio_TCM_CLK_OUT() locally.
                          1456	#1559:  */
                          1457	#1560: /*****************************************************************************/
                          1458	#1561: void BrsHwPort_SetLevel(brsHw_Port_PortType p, uint8 Level)
                          1459	#1562: {
                          1460	#1563:   if (Level != BRSHW_PORT_LOGIC_LOW)
                          1461	#1564:   {
                          1462	#1565: #if defined (BRSHW_SIU_GROUP_B) || defined (BRSHW_SIU_GROUP_D_2)
                          1463	#1566:     SIU_GPDO((p.muxMSCRValue)) = BRSHW_PORT_LOGIC_HIGH; /* set port-pin-level to logic high */
                          1464	#1567: #else
                          1465	#1568:     SIU_GPDO((p.portGroup * 16 + p.portNumber)) = BRSHW_PORT_LOGIC_HIGH; /* set port-pin-level to logic high */
                          1466	#1569: #endif
                          1467	#1570:   }
                          1468	#1571:   else
                          1469	#1572:   {
                          1470	#1573: #if defined (BRSHW_SIU_GROUP_B) || defined (BRSHW_SIU_GROUP_D_2)
                          1471	#1574:     SIU_GPDO((p.muxMSCRValue)) = BRSHW_PORT_LOGIC_LOW; /* set port-pin-level to logic low */
                          1472	#1575: #else
                          1473	#1576:     SIU_GPDO((p.portGroup * 16 + p.portNumber)) = BRSHW_PORT_LOGIC_LOW; /* set port-pin-level to logic low */
                          1474	#1577: #endif
                          1475	#1578:   }
                          1476	#1579: }
                          1477	#1580: # if defined (BRS_ENABLE_FBL_SUPPORT)
                          1478	#1581:   #define BRS_STOP_SEC_RAM_CODE
                          1479	#1582:   #include "Brs_MemMap.h"   /* PRQA S 5087 *//* MD_MSR_19.1 */
                          1480	#1583: # endif
                          1481	#1585: /*****************************************************************************/
                          1482	#1586: /**
                          1483	#1587:  * @brief      This function reads the input level of a port pin.
                          1484	#1588:  * @pre        Port pin configuartions available within BrsHw_Ports.h,
                          1485	#1589:  *             no DrvPort used for port pin initialization and
                          1486	#1590:  *             transferred port pin has to be initialized as input pin with
                          1487	#1591:  *             GPIO functionality.
                          1488	#1592:  * @param[in]  p - brsHw_Port_PortType, to be read.
                          1489	#1593:  * @param[out] -
                          1490	#1594:  * @return     Level, read from port pin
                          1491	#1595:  *             (BRSHW_PORT_LOGIC_LOW or BRSHW_PORT_LOGIC_HIGH).
                          1492	#1596:  * @context    Function is called from BrsHw_WriteDio_TCM_SDA_OUT() and
                          1493	#1597:  *             BrsHw_WriteDio_TCM_CLK_OUT() locally.
                          1494	#1598:  */
                          1495	#1599: /*****************************************************************************/
                          1496	#1600: uint8 BrsHwPort_GetLevel(brsHw_Port_PortType p)
                          1497	#1601: {
                          1498	#1602:   uint32 temp;
                          1499	#1603: #if defined (BRSHW_SIU_GROUP_B) || defined (BRSHW_SIU_GROUP_D_2)

                                   Fri Apr 10 08:31:37 2020           Page 28
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                          1500	#1604:   temp = SIU_GPDI((p.muxMSCRValue));
                          1501	#1605: #else
                          1502	#1606:   temp = SIU_GPDI((p.portGroup*16 + p.portNumber));
                          1503	#1607: #endif
                          1504	#1609:   if(temp != 0x00000000)
                          1505	#1610:   {
                          1506	#1611:     return BRSHW_PORT_LOGIC_HIGH;
                          1507	#1612:   }
                          1508	#1613:   else
                          1509	#1614:   {
                          1510	#1615:     return BRSHW_PORT_LOGIC_LOW;
                          1511	#1616:   }
                          1512	#1617: }
                          1513	#1619: # if defined (BRS_ENABLE_TCM_SUPPORT)
                          1514	#1620: /*******************************************************************************
                          1515	#1621:   TCM Write Functions
                          1516	#1622: ********************************************************************************/
                          1517	#1623: void BrsHw_WriteDio_TCM_SDA_OUT(uint8 Level)
                          1518	#1624: {
                          1519	#1625:   BrsHwPort_SetLevel(BRSHW_PORT_TCM_SDA_OUT, Level);
                          1520	#1626: }
                          1521	#1628: void BrsHw_WriteDio_TCM_CLK_OUT(uint8 Level)
                          1522	#1629: {
                          1523	#1630:   BrsHwPort_SetLevel(BRSHW_PORT_TCM_CLK_OUT, Level);
                          1524	#1631: }
                          1525	#1633: /*******************************************************************************
                          1526	#1634:   TCM Read Functions
                          1527	#1635: ********************************************************************************/
                          1528	#1636: uint8 BrsHw_ReadDio_TCM_SDA_IN(void)
                          1529	#1637: {
                          1530	#1638:   return BrsHwPort_GetLevel(BRSHW_PORT_TCM_SDA_IN);
                          1531	#1639: }
                          1532	#1641: uint8 BrsHw_ReadDio_TCM_CLK_IN(void)
                          1533	#1642: {
                          1534	#1643:   return BrsHwPort_GetLevel(BRSHW_PORT_TCM_CLK_IN);
                          1535	#1644: }
                          1536	#1645: # endif /*BRS_ENABLE_TCM_SUPPORT*/
                          1537	#1646: #endif /*!VGEN_ENABLE_DRVPORT*/
                          1538	#1648: /*****************************************************************************/
                          1539	#1649: /**
                          1540	#1650:  * @brief      This function has to be used to initialize the used ports.
                          1541	#1651:  * @pre        -
                          1542	#1652:  * @param[in]  -
                          1543	#1653:  * @param[out] -
                          1544	#1654:  * @return     -
                          1545	#1655:  * @context    Function is called from main@BrsMain or EcuM at power on initialization
                          1546	#1656:  */
                          1547	#1657: /*****************************************************************************/
                          1548	#1658: void BrsHwPortInitPowerOn(void)
                          1549	#1659: {
                          1550	#1660: #if defined (VGEN_ENABLE_DRVPORT)
                          1551	#1661: # if defined (BRS_ENABLE_SUPPORT_LEDS)          || \
                          1552	#1662:      defined (BRS_ENABLE_SUPPORT_TOGGLE_WD_PIN) || \
                          1553	#1663:      defined (BRS_ENABLE_SUPPORT_TOGGLE_CUSTOM_PIN)
                          1554	#1664:   #error "Configure the valid toggle pins within your DrvPort config. Or disable the depending BRS mechanism."*/
                          1555	#1665: # endif

                                   Fri Apr 10 08:31:37 2020           Page 29
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                          1556	#1667: #else
                          1557	#1668: # if defined (BRS_ENABLE_SUPPORT_LEDS)
                          1558	#1669:   BrsHwInitPortOutput(BRSHW_PORT_LED);
                          1559	#1671:   /* Set LED on EVB demo board to show the system is alive */
                          1560	#1672:   BrsHwTogglePin(BRSHW_TOGGLEPIN_LED);
                          1561	#1673: # endif /*BRS_ENABLE_SUPPORT_LEDS*/
                          1562	#1675: # if defined (BRS_ENABLE_SUPPORT_TOGGLE_WD_PIN)
                          1563	#1676:   BrsHwInitPortOutput(BRSHW_PORT_TOGGLE_WD);
                          1564	#1677: # endif
                          1565	#1679: # if defined (BRS_ENABLE_SUPPORT_TOGGLE_CUSTOM_PIN)
                          1566	#1680:   BrsHwInitPortOutput(BRSHW_PORT_TOGGLE_CUSTOM);
                          1567	#1681: # endif
                          1568	#1683: # if defined (BRS_ENABLE_TCM_SUPPORT)
                          1569	#1684:   BrsHwInitPortOutput(BRSHW_PORT_TCM_CLK_OUT);
                          1570	#1685:   BrsHwInitPortOutput(BRSHW_PORT_TCM_SDA_OUT);
                          1571	#1686:   BrsHwInitPortInput(BRSHW_PORT_TCM_SDA_IN, BRSHW_PORT_MUX_TCM_SDA_IN);
                          1572	#1687:   BrsHwInitPortInput(BRSHW_PORT_TCM_CLK_IN, BRSHW_PORT_MUX_TCM_CLK_IN);
                          1573	#1688: #  if defined (BRSHW_USE_TCM_EXT_IRQ)
                          1574	#1689:   BrsHwInitPortInput(BRSHW_PORT_TCM_INTA_IN, BRSHW_PORT_MUX_TCM_INTA_IN);
                          1575	#1690:   BrsHwInitPortInput(BRSHW_PORT_TCM_INTB_IN, BRSHW_PORT_MUX_TCM_INTB_IN);
                          1576	#1691: #  endif
                          1577	#1692: # endif /*BRS_ENABLE_TCM_SUPPORT*/
                          1578	#1694: /*******************************************************************************
                          1579	#1695:   CAN driver
                          1580	#1696: ********************************************************************************/
                          1581	#1697: # if defined (VGEN_ENABLE_CAN_DRV)
                          1582	#1698: #  if defined (_BRSHW_PORT_CAN_WAKEUP_IRQ_0)
                          1583	#1699:   BrsHwInitPortInput(BRSHW_PORT_CAN_WAKEUP_IRQ_0, BRSHW_PORT_MUX_CAN_WAKEUP_IRQ_0);
                          1584	#1700: #  endif
                          1585	#1701: #  if defined (_BRSHW_PORT_CAN_WAKEUP_IRQ_1)
                          1586	#1702:   BrsHwInitPortInput(BRSHW_PORT_CAN_WAKEUP_IRQ_1, BRSHW_PORT_MUX_CAN_WAKEUP_IRQ_1);
                          1587	#1703: #  endif
                          1588	#1704: #  if defined (_BRSHW_PORT_CAN_WAKEUP_IRQ_2)
                          1589	#1705:   BrsHwInitPortInput(BRSHW_PORT_CAN_WAKEUP_IRQ_2, BRSHW_PORT_MUX_CAN_WAKEUP_IRQ_2);
                          1590	#1706: #  endif
                          1591	#1707: #  if defined (_BRSHW_PORT_CAN_WAKEUP_IRQ_3)
                          1592	#1708:   BrsHwInitPortInput(BRSHW_PORT_CAN_WAKEUP_IRQ_3, BRSHW_PORT_MUX_CAN_WAKEUP_IRQ_3);
                          1593	#1709: #  endif
                          1594	#1710: #  if defined (_BRSHW_PORT_CAN_WAKEUP_IRQ_4)
                          1595	#1711:   BrsHwInitPortInput(BRSHW_PORT_CAN_WAKEUP_IRQ_4, BRSHW_PORT_MUX_CAN_WAKEUP_IRQ_4);
                          1596	#1712: #  endif
                          1597	#1713: #  if defined (_BRSHW_PORT_CAN_WAKEUP_IRQ_5)
                          1598	#1714:   BrsHwInitPortInput(BRSHW_PORT_CAN_WAKEUP_IRQ_5, BRSHW_PORT_MUX_CAN_WAKEUP_IRQ_5);
                          1599	#1715: #  endif
                          1600	#1716: #  if defined (_BRSHW_PORT_CAN_WAKEUP_IRQ_6)
                          1601	#1717:   BrsHwInitPortInput(BRSHW_PORT_CAN_WAKEUP_IRQ_6, BRSHW_PORT_MUX_CAN_WAKEUP_IRQ_6);
                          1602	#1718: #  endif
                          1603	#1719: #  if defined (_BRSHW_PORT_CAN_WAKEUP_IRQ_7)
                          1604	#1720:   BrsHwInitPortInput(BRSHW_PORT_CAN_WAKEUP_IRQ_7, BRSHW_PORT_MUX_CAN_WAKEUP_IRQ_7);
                          1605	#1721: #  endif
                          1606	#1722: #  if defined (_BRSHW_PORT_CAN_WAKEUP_IRQ_8)
                          1607	#1723:   BrsHwInitPortInput(BRSHW_PORT_CAN_WAKEUP_IRQ_8, BRSHW_PORT_MUX_CAN_WAKEUP_IRQ_8);
                          1608	#1724: #  endif
                          1609	#1725: #  if defined (_BRSHW_PORT_CAN_WAKEUP_IRQ_9)
                          1610	#1726:   BrsHwInitPortInput(BRSHW_PORT_CAN_WAKEUP_IRQ_9, BRSHW_PORT_MUX_CAN_WAKEUP_IRQ_9);
                          1611	#1727: #  endif

                                   Fri Apr 10 08:31:37 2020           Page 30
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                          1612	#1728: #  if defined (_BRSHW_PORT_CAN_WAKEUP_IRQ_10)
                          1613	#1729:   BrsHwInitPortInput(BRSHW_PORT_CAN_WAKEUP_IRQ_10, BRSHW_PORT_MUX_CAN_WAKEUP_IRQ_10);
                          1614	#1730: #  endif
                          1615	#1731: #  if defined (_BRSHW_PORT_CAN_WAKEUP_IRQ_11)
                          1616	#1732:   BrsHwInitPortInput(BRSHW_PORT_CAN_WAKEUP_IRQ_11, BRSHW_PORT_MUX_CAN_WAKEUP_IRQ_11);
                          1617	#1733: #  endif
                          1618	#1734: #  if defined (_BRSHW_PORT_CAN_WAKEUP_IRQ_12)
                          1619	#1735:   BrsHwInitPortInput(BRSHW_PORT_CAN_WAKEUP_IRQ_12, BRSHW_PORT_MUX_CAN_WAKEUP_IRQ_12);
                          1620	#1736: #  endif
                          1621	#1737: #  if defined (_BRSHW_PORT_CAN_WAKEUP_IRQ_13)
                          1622	#1738:   BrsHwInitPortInput(BRSHW_PORT_CAN_WAKEUP_IRQ_13, BRSHW_PORT_MUX_CAN_WAKEUP_IRQ_13);
                          1623	#1739: #  endif
                          1624	#1740: #  if defined (_BRSHW_PORT_CAN_WAKEUP_IRQ_14)
                          1625	#1741:   BrsHwInitPortInput(BRSHW_PORT_CAN_WAKEUP_IRQ_14, BRSHW_PORT_MUX_CAN_WAKEUP_IRQ_14);
                          1626	#1742: #  endif
                          1627	#1743: #  if defined (_BRSHW_PORT_CAN_WAKEUP_IRQ_15)
                          1628	#1744:   BrsHwInitPortInput(BRSHW_PORT_CAN_WAKEUP_IRQ_15, BRSHW_PORT_MUX_CAN_WAKEUP_IRQ_15);
                          1629	#1745: #  endif
                          1630	#1747: #  if defined (kCanPhysToLogChannelIndex_0)
                          1631	#1748:   BrsHwInitPortOutput(BRSHW_PORT_CAN0_TX);
                          1632	#1749:   BrsHwInitPortInput(BRSHW_PORT_CAN0_RX, BRSHW_PORT_MUX_CAN0_RX);
                          1633	#1750: #   if defined(_BRSHW_PORT_CAN0_TRCV_STB)
                          1634	#1751:   BrsHwInitPortOutput(BRSHW_PORT_CAN0_TRCV_STB);
                          1635	#1752:   BrsHwPort_SetLevel(BRSHW_PORT_CAN0_TRCV_STB, BRSHW_PORT_LOGIC_LOW);
                          1636	#1753: #   endif
                          1637	#1754: #   if defined (_BRSHW_PORT_CAN0_TRCV_EN)
                          1638	#1755:   BrsHwInitPortOutput(BRSHW_PORT_CAN0_TRCV_EN);
                          1639	#1756:   BrsHwPort_SetLevel(BRSHW_PORT_CAN0_TRCV_EN, BRSHW_PORT_LOGIC_HIGH);
                          1640	#1757: #   endif
                          1641	#1758: #  endif /*kCanPhysToLogChannelIndex_0*/
                          1642	#1760: #  if defined (kCanPhysToLogChannelIndex_1)
                          1643	#1761:   BrsHwInitPortOutput(BRSHW_PORT_CAN1_TX);
                          1644	#1762:   BrsHwInitPortInput(BRSHW_PORT_CAN1_RX, BRSHW_PORT_MUX_CAN1_RX);
                          1645	#1763: #   if defined(_BRSHW_PORT_CAN1_TRCV_STB)
                          1646	#1764:   BrsHwInitPortOutput(BRSHW_PORT_CAN1_TRCV_STB);
                          1647	#1765:   BrsHwPort_SetLevel(BRSHW_PORT_CAN1_TRCV_STB, BRSHW_PORT_LOGIC_HIGH);
                          1648	#1766: #   endif
                          1649	#1767: #   if defined (_BRSHW_PORT_CAN1_TRCV_EN)
                          1650	#1768:   BrsHwInitPortOutput(BRSHW_PORT_CAN1_TRCV_EN);
                          1651	#1769:   BrsHwPort_SetLevel(BRSHW_PORT_CAN1_TRCV_EN, BRSHW_PORT_LOGIC_HIGH);
                          1652	#1770: #   endif
                          1653	#1771: #  endif /*kCanPhysToLogChannelIndex_1*/
                          1654	#1773: #  if defined (kCanPhysToLogChannelIndex_2)
                          1655	#1774:   BrsHwInitPortOutput(BRSHW_PORT_CAN2_TX);
                          1656	#1775:   BrsHwInitPortInput(BRSHW_PORT_CAN2_RX, BRSHW_PORT_MUX_CAN2_RX);
                          1657	#1776: #   if defined(_BRSHW_PORT_CAN2_TRCV_STB)
                          1658	#1777:   BrsHwInitPortOutput(BRSHW_PORT_CAN2_TRCV_STB);
                          1659	#1778:   BrsHwPort_SetLevel(BRSHW_PORT_CAN2_TRCV_STB, BRSHW_PORT_LOGIC_HIGH);
                          1660	#1779: #   endif
                          1661	#1780: #   if defined (_BRSHW_PORT_CAN2_TRCV_EN)
                          1662	#1781:   BrsHwInitPortOutput(BRSHW_PORT_CAN2_TRCV_EN);
                          1663	#1782:   BrsHwPort_SetLevel(BRSHW_PORT_CAN2_TRCV_EN, BRSHW_PORT_LOGIC_HIGH);
                          1664	#1783: #   endif
                          1665	#1784: #  endif /*kCanPhysToLogChannelIndex_2*/
                          1666	#1786: #  if defined (kCanPhysToLogChannelIndex_3)
                          1667	#1787:   BrsHwInitPortOutput(BRSHW_PORT_CAN3_TX);

                                   Fri Apr 10 08:31:37 2020           Page 31
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                          1668	#1788:   BrsHwInitPortInput(BRSHW_PORT_CAN3_RX, BRSHW_PORT_MUX_CAN3_RX);
                          1669	#1789: #   if defined(_BRSHW_PORT_CAN3_TRCV_STB)
                          1670	#1790:   BrsHwInitPortOutput(BRSHW_PORT_CAN3_TRCV_STB);
                          1671	#1791:   BrsHwPort_SetLevel(BRSHW_PORT_CAN3_TRCV_STB, BRSHW_PORT_LOGIC_HIGH);
                          1672	#1792: #   endif
                          1673	#1793: #   if defined (_BRSHW_PORT_CAN3_TRCV_EN)
                          1674	#1794:   BrsHwInitPortOutput(BRSHW_PORT_CAN3_TRCV_EN);
                          1675	#1795:   BrsHwPort_SetLevel(BRSHW_PORT_CAN3_TRCV_EN, BRSHW_PORT_LOGIC_HIGH);
                          1676	#1796: #   endif
                          1677	#1797: #  endif /*kCanPhysToLogChannelIndex_3*/
                          1678	#1799: #  if defined (kCanPhysToLogChannelIndex_4)
                          1679	#1800:   BrsHwInitPortOutput(BRSHW_PORT_CAN4_TX);
                          1680	#1801:   BrsHwInitPortInput(BRSHW_PORT_CAN4_RX, BRSHW_PORT_MUX_CAN4_RX);
                          1681	#1802: #   if defined(_BRSHW_PORT_CAN4_TRCV_STB)
                          1682	#1803:   BrsHwInitPortOutput(BRSHW_PORT_CAN4_TRCV_STB);
                          1683	#1804:   BrsHwPort_SetLevel(BRSHW_PORT_CAN4_TRCV_STB, BRSHW_PORT_LOGIC_HIGH);
                          1684	#1805: #   endif
                          1685	#1806: #    if defined (_BRSHW_PORT_CAN4_TRCV_EN)
                          1686	#1807:   BrsHwInitPortOutput(BRSHW_PORT_CAN4_TRCV_EN);
                          1687	#1808:   BrsHwPort_SetLevel(BRSHW_PORT_CAN4_TRCV_EN, BRSHW_PORT_LOGIC_HIGH);
                          1688	#1809: #    endif
                          1689	#1810: #  endif /*kCanPhysToLogChannelIndex_4*/
                          1690	#1812: #  if defined (kCanPhysToLogChannelIndex_5)
                          1691	#1813:   BrsHwInitPortOutput(BRSHW_PORT_CAN5_TX);
                          1692	#1814:   BrsHwInitPortInput(BRSHW_PORT_CAN5_RX, BRSHW_PORT_MUX_CAN5_RX);
                          1693	#1815: #   if defined(_BRSHW_PORT_CAN5_TRCV_STB)
                          1694	#1816:   BrsHwInitPortOutput(BRSHW_PORT_CAN5_TRCV_STB);
                          1695	#1817:   BrsHwPort_SetLevel(BRSHW_PORT_CAN5_TRCV_STB, BRSHW_PORT_LOGIC_HIGH);
                          1696	#1818: #   endif
                          1697	#1819: #    if defined (_BRSHW_PORT_CAN5_TRCV_EN)
                          1698	#1820:   BrsHwInitPortOutput(BRSHW_PORT_CAN5_TRCV_EN);
                          1699	#1821:   BrsHwPort_SetLevel(BRSHW_PORT_CAN5_TRCV_EN, BRSHW_PORT_LOGIC_HIGH);
                          1700	#1822: #    endif
                          1701	#1823: #  endif /*kCanPhysToLogChannelIndex_5*/
                          1702	#1825: #  if defined (kCanPhysToLogChannelIndex_6)
                          1703	#1826:   BrsHwInitPortOutput(BRSHW_PORT_CAN6_TX);
                          1704	#1827:   BrsHwInitPortInput(BRSHW_PORT_CAN6_RX, BRSHW_PORT_MUX_CAN6_RX);
                          1705	#1828: #   if defined(_BRSHW_PORT_CAN6_TRCV_STB)
                          1706	#1829:   BrsHwInitPortOutput(BRSHW_PORT_CAN6_TRCV_STB);
                          1707	#1830:   BrsHwPort_SetLevel(BRSHW_PORT_CAN6_TRCV_STB, BRSHW_PORT_LOGIC_HIGH);
                          1708	#1831: #   endif
                          1709	#1832: #   if defined (_BRSHW_PORT_CAN6_TRCV_EN)
                          1710	#1833:   BrsHwInitPortOutput(BRSHW_PORT_CAN6_TRCV_EN);
                          1711	#1834:   BrsHwPort_SetLevel(BRSHW_PORT_CAN6_TRCV_EN, BRSHW_PORT_LOGIC_HIGH);
                          1712	#1835: #   endif
                          1713	#1836: #  endif /*kCanPhysToLogChannelIndex_6*/
                          1714	#1838: #  if defined (kCanPhysToLogChannelIndex_7)
                          1715	#1839:   BrsHwInitPortOutput(BRSHW_PORT_CAN7_TX);
                          1716	#1840:   BrsHwInitPortInput(BRSHW_PORT_CAN7_RX, BRSHW_PORT_MUX_CAN7_RX);
                          1717	#1841: #   if defined(_BRSHW_PORT_CAN7_TRCV_STB)
                          1718	#1842:   BrsHwInitPortOutput(BRSHW_PORT_CAN7_TRCV_STB);
                          1719	#1843:   BrsHwPort_SetLevel(BRSHW_PORT_CAN7_TRCV_STB, BRSHW_PORT_LOGIC_HIGH);
                          1720	#1844: #   endif
                          1721	#1845: #   if defined (_BRSHW_PORT_CAN7_TRCV_EN)
                          1722	#1846:   BrsHwInitPortOutput(BRSHW_PORT_CAN7_TRCV_EN);
                          1723	#1847:   BrsHwPort_SetLevel(BRSHW_PORT_CAN7_TRCV_EN, BRSHW_PORT_LOGIC_HIGH);

                                   Fri Apr 10 08:31:37 2020           Page 32
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                          1724	#1848: #   endif
                          1725	#1849: #  endif /*kCanPhysToLogChannelIndex_7*/
                          1726	#1851: #  if defined (kCan_30_McanPhysToLogChannelIndex_0)
                          1727	#1852:   BrsHwInitPortOutput(BRSHW_PORT_CAN0_SECOND_CANCELL_TX);
                          1728	#1853:   BrsHwInitPortInput(BRSHW_PORT_CAN0_SECOND_CANCELL_RX, BRSHW_PORT_MUX_CAN0_SECOND_CANCELL_RX);
                          1729	#1854: #   if defined(_BRSHW_PORT_CAN0_TRCV_SECOND_CANCELL_STB)
                          1730	#1855:   BrsHwInitPortOutput(BRSHW_PORT_CAN0_TRCV_SECOND_CANCELL_STB);
                          1731	#1856:   BrsHwPort_SetLevel(BRSHW_PORT_CAN0_TRCV_SECOND_CANCELL_STB, BRSHW_PORT_LOGIC_HIGH);
                          1732	#1857: #   endif
                          1733	#1858: #   if defined (_BRSHW_PORT_CAN0_TRCV_SECOND_CANCELL_EN)
                          1734	#1859:   BrsHwInitPortOutput(BRSHW_PORT_CAN0_TRCV_SECOND_CANCELL_EN);
                          1735	#1860:   BrsHwPort_SetLevel(BRSHW_PORT_CAN0_TRCV_SECOND_CANCELL_EN, BRSHW_PORT_LOGIC_HIGH);
                          1736	#1861: #   endif
                          1737	#1862: #  endif /*kCan_30_McanPhysToLogChannelIndex_0*/
                          1738	#1864: #  if defined (kCan_30_McanPhysToLogChannelIndex_1)
                          1739	#1865:   BrsHwInitPortOutput(BRSHW_PORT_CAN1_SECOND_CANCELL_TX);
                          1740	#1866:   BrsHwInitPortInput(BRSHW_PORT_CAN1_SECOND_CANCELL_RX, BRSHW_PORT_MUX_CAN1_SECOND_CANCELL_RX);
                          1741	#1867: #   if defined(_BRSHW_PORT_CAN1_TRCV_SECOND_CANCELL_STB)
                          1742	#1868:   BrsHwInitPortOutput(BRSHW_PORT_CAN1_TRCV_SECOND_CANCELL_STB);
                          1743	#1869:   BrsHwPort_SetLevel(BRSHW_PORT_CAN1_TRCV_SECOND_CANCELL_STB, BRSHW_PORT_LOGIC_HIGH);
                          1744	#1870: #   endif
                          1745	#1871: #   if defined (_BRSHW_PORT_CAN1_TRCV_SECOND_CANCELL_EN)
                          1746	#1872:   BrsHwInitPortOutput(BRSHW_PORT_CAN1_TRCV_SECOND_CANCELL_EN);
                          1747	#1873:   BrsHwPort_SetLevel(BRSHW_PORT_CAN1_TRCV_SECOND_CANCELL_EN, BRSHW_PORT_LOGIC_HIGH);
                          1748	#1874: #   endif
                          1749	#1875: #  endif /*kCan_30_McanPhysToLogChannelIndex_0*/
                          1750	#1876: # endif /*VGEN_ENABLE_CAN_DRV*/
                          1751	#1878: /*******************************************************************************
                          1752	#1879:   LIN driver
                          1753	#1880: ********************************************************************************/
                          1754	#1881: # if defined (VGEN_ENABLE_LIN_DRV)
                          1755	#1882: #  if defined (LIN_ENABLE_HARDWARE_INTERFACE_0)
                          1756	#1883:   BrsHwInitPortOutput(BRSHW_PORT_LIN0_TX);
                          1757	#1884:   BrsHwInitPortInput(BRSHW_PORT_LIN0_RX, BRSHW_PORT_MUX_LIN0_RX);
                          1758	#1885: #   if defined(_BRSHW_PORT_CONF_LIN)
                          1759	#1886:   BrsHwInitPortConfig(BRSHW_PORT_LIN0_RX, BRSHW_PORT_CONF_LIN);
                          1760	#1887: #   endif
                          1761	#1888: #   if defined(_BRSHW_PORT_LIN0_TRCV_STB)
                          1762	#1889:   BrsHwInitPortOutput(BRSHW_PORT_LIN0_TRCV_STB);
                          1763	#1890:   BrsHwPort_SetLevel(BRSHW_PORT_LIN0_TRCV_STB, BRSHW_PORT_LOGIC_HIGH);
                          1764	#1891: #   endif
                          1765	#1892: #  endif /*LIN_ENABLE_HARDWARE_INTERFACE_0*/
                          1766	#1894: #  if defined (LIN_ENABLE_HARDWARE_INTERFACE_1)
                          1767	#1895:   BrsHwInitPortOutput(BRSHW_PORT_LIN1_TX);
                          1768	#1896:   BrsHwInitPortInput(BRSHW_PORT_LIN1_RX, BRSHW_PORT_MUX_LIN1_RX);
                          1769	#1897: #   if defined(_BRSHW_PORT_CONF_LIN)
                          1770	#1898:   BrsHwInitPortConfig(BRSHW_PORT_LIN1_RX, BRSHW_PORT_CONF_LIN);
                          1771	#1899: #   endif
                          1772	#1900: #   if defined(_BRSHW_PORT_LIN1_TRCV_STB)
                          1773	#1901:   BrsHwInitPortOutput(BRSHW_PORT_LIN1_TRCV_STB);
                          1774	#1902:   BrsHwPort_SetLevel(BRSHW_PORT_LIN1_TRCV_STB, BRSHW_PORT_LOGIC_HIGH);
                          1775	#1903: #   endif
                          1776	#1904: #  endif /*LIN_ENABLE_HARDWARE_INTERFACE_1*/
                          1777	#1906: #  if defined (LIN_ENABLE_HARDWARE_INTERFACE_2)
                          1778	#1907:   BrsHwInitPortOutput(BRSHW_PORT_LIN2_TX);
                          1779	#1908:   BrsHwInitPortInput(BRSHW_PORT_LIN2_RX, BRSHW_PORT_MUX_LIN2_RX);

                                   Fri Apr 10 08:31:37 2020           Page 33
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                          1780	#1909: #   if defined(_BRSHW_PORT_CONF_LIN)
                          1781	#1910:   BrsHwInitPortConfig(BRSHW_PORT_LIN2_RX, BRSHW_PORT_CONF_LIN);
                          1782	#1911: #   endif
                          1783	#1912: #   if defined(_BRSHW_PORT_LIN2_TRCV_STB)
                          1784	#1913:   BrsHwInitPortOutput(BRSHW_PORT_LIN2_TRCV_STB);
                          1785	#1914:   BrsHwPort_SetLevel(BRSHW_PORT_LIN2_TRCV_STB, BRSHW_PORT_LOGIC_HIGH);
                          1786	#1915: #   endif
                          1787	#1916: #  endif /*LIN_ENABLE_HARDWARE_INTERFACE_2*/
                          1788	#1918: #  if defined (LIN_ENABLE_HARDWARE_INTERFACE_3)
                          1789	#1919:   BrsHwInitPortOutput(BRSHW_PORT_LIN3_TX);
                          1790	#1920:   BrsHwInitPortInput(BRSHW_PORT_LIN3_RX, BRSHW_PORT_MUX_LIN3_RX);
                          1791	#1921: #   if defined(_BRSHW_PORT_CONF_LIN)
                          1792	#1922:   BrsHwInitPortConfig(BRSHW_PORT_LIN3_RX, BRSHW_PORT_CONF_LIN);
                          1793	#1923: #   endif
                          1794	#1924: #   if defined(_BRSHW_PORT_LIN3_TRCV_STB)
                          1795	#1925:   BrsHwInitPortOutput(BRSHW_PORT_LIN3_TRCV_STB);
                          1796	#1926:   BrsHwPort_SetLevel(BRSHW_PORT_LIN3_TRCV_STB, BRSHW_PORT_LOGIC_HIGH);
                          1797	#1927: #   endif
                          1798	#1928: #  endif /*LIN_ENABLE_HARDWARE_INTERFACE_3*/
                          1799	#1930: #  if defined (LIN_ENABLE_HARDWARE_INTERFACE_4)
                          1800	#1931:   BrsHwInitPortOutput(BRSHW_PORT_LIN4_TX);
                          1801	#1932:   BrsHwInitPortInput(BRSHW_PORT_LIN4_RX, BRSHW_PORT_MUX_LIN4_RX);
                          1802	#1933: #   if defined(_BRSHW_PORT_CONF_LIN)
                          1803	#1934:   BrsHwInitPortConfig(BRSHW_PORT_LIN4_RX, BRSHW_PORT_CONF_LIN);
                          1804	#1935: #   endif
                          1805	#1936: #   if defined(_BRSHW_PORT_LIN4_TRCV_STB)
                          1806	#1937:   BrsHwInitPortOutput(BRSHW_PORT_LIN4_TRCV_STB);
                          1807	#1938:   BrsHwPort_SetLevel(BRSHW_PORT_LIN4_TRCV_STB, BRSHW_PORT_LOGIC_HIGH);
                          1808	#1939: #   endif
                          1809	#1940: #  endif /*LIN_ENABLE_HARDWARE_INTERFACE_4*/
                          1810	#1942: #  if defined (LIN_ENABLE_HARDWARE_INTERFACE_5)
                          1811	#1943:   BrsHwInitPortOutput(BRSHW_PORT_LIN5_TX);
                          1812	#1944:   BrsHwInitPortInput(BRSHW_PORT_LIN5_RX, BRSHW_PORT_MUX_LIN5_RX);
                          1813	#1945: #   if defined(_BRSHW_PORT_CONF_LIN)
                          1814	#1946:   BrsHwInitPortConfig(BRSHW_PORT_LIN5_RX, BRSHW_PORT_CONF_LIN);
                          1815	#1947: #   endif
                          1816	#1948: #   if defined(_BRSHW_PORT_LIN5_TRCV_STB)
                          1817	#1949:   BrsHwInitPortOutput(BRSHW_PORT_LIN5_TRCV_STB);
                          1818	#1950:   BrsHwPort_SetLevel(BRSHW_PORT_LIN5_TRCV_STB, BRSHW_PORT_LOGIC_HIGH);
                          1819	#1951: #   endif
                          1820	#1952: #  endif /*LIN_ENABLE_HARDWARE_INTERFACE_5*/
                          1821	#1954: #  if defined (LIN_ENABLE_HARDWARE_INTERFACE_6)
                          1822	#1955:   BrsHwInitPortOutput(BRSHW_PORT_LIN6_TX);
                          1823	#1956:   BrsHwInitPortInput(BRSHW_PORT_LIN6_RX, BRSHW_PORT_MUX_LIN6_RX);
                          1824	#1957: #   if defined(_BRSHW_PORT_CONF_LIN)
                          1825	#1958:   BrsHwInitPortConfig(BRSHW_PORT_LIN6_RX, BRSHW_PORT_CONF_LIN);
                          1826	#1959: #   endif
                          1827	#1960: #   if defined(_BRSHW_PORT_LIN6_TRCV_STB)
                          1828	#1961:   BrsHwInitPortOutput(BRSHW_PORT_LIN6_TRCV_STB);
                          1829	#1962:   BrsHwPort_SetLevel(BRSHW_PORT_LIN6_TRCV_STB, BRSHW_PORT_LOGIC_HIGH);
                          1830	#1963: #   endif
                          1831	#1964: #  endif /*LIN_ENABLE_HARDWARE_INTERFACE_6*/
                          1832	#1966: #  if defined (LIN_ENABLE_HARDWARE_INTERFACE_7)
                          1833	#1967:   BrsHwInitPortOutput(BRSHW_PORT_LIN7_TX);
                          1834	#1968:   BrsHwInitPortInput(BRSHW_PORT_LIN7_RX, BRSHW_PORT_MUX_LIN7_RX);
                          1835	#1969: #   if defined(_BRSHW_PORT_CONF_LIN)

                                   Fri Apr 10 08:31:37 2020           Page 34
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                          1836	#1970:   BrsHwInitPortConfig(BRSHW_PORT_LIN7_RX, BRSHW_PORT_CONF_LIN);
                          1837	#1971: #   endif
                          1838	#1972: #   if defined(_BRSHW_PORT_LIN7_TRCV_STB)
                          1839	#1973:   BrsHwInitPortOutput(BRSHW_PORT_LIN7_TRCV_STB);
                          1840	#1974:   BrsHwPort_SetLevel(BRSHW_PORT_LIN7_TRCV_STB, BRSHW_PORT_LOGIC_HIGH);
                          1841	#1975: #   endif
                          1842	#1976: #  endif /*LIN_ENABLE_HARDWARE_INTERFACE_7*/
                          1843	#1978: #  if defined (LIN_ENABLE_HARDWARE_INTERFACE_8)
                          1844	#1979:   BrsHwInitPortOutput(BRSHW_PORT_LIN8_TX);
                          1845	#1980:   BrsHwInitPortInput(BRSHW_PORT_LIN8_RX, BRSHW_PORT_MUX_LIN8_RX);
                          1846	#1981: #   if defined(_BRSHW_PORT_CONF_LIN)
                          1847	#1982:   BrsHwInitPortConfig(BRSHW_PORT_LIN8_RX, BRSHW_PORT_CONF_LIN);
                          1848	#1983: #   endif
                          1849	#1984: #   if defined(_BRSHW_PORT_LIN8_TRCV_STB)
                          1850	#1985:   BrsHwInitPortOutput(BRSHW_PORT_LIN8_TRCV_STB);
                          1851	#1986:   BrsHwPort_SetLevel(BRSHW_PORT_LIN8_TRCV_STB, BRSHW_PORT_LOGIC_HIGH);
                          1852	#1987: #   endif
                          1853	#1988: #  endif /*LIN_ENABLE_HARDWARE_INTERFACE_8*/
                          1854	#1990: #  if defined (LIN_ENABLE_HARDWARE_INTERFACE_9)
                          1855	#1991:   BrsHwInitPortOutput(BRSHW_PORT_LIN9_TX);
                          1856	#1992:   BrsHwInitPortInput(BRSHW_PORT_LIN9_RX, BRSHW_PORT_MUX_LIN9_RX);
                          1857	#1993: #   if defined(_BRSHW_PORT_CONF_LIN)
                          1858	#1994:   BrsHwInitPortConfig(BRSHW_PORT_LIN9_RX, BRSHW_PORT_CONF_LIN);
                          1859	#1995: #   endif
                          1860	#1996: #   if defined(_BRSHW_PORT_LIN9_TRCV_STB)
                          1861	#1997:   BrsHwInitPortOutput(BRSHW_PORT_LIN9_TRCV_STB);
                          1862	#1998:   BrsHwPort_SetLevel(BRSHW_PORT_LIN9_TRCV_STB, BRSHW_PORT_LOGIC_HIGH);
                          1863	#1999: #   endif
                          1864	#2000: #  endif /*LIN_ENABLE_HARDWARE_INTERFACE_9*/
                          1865	#2001: # endif /*VGEN_ENABLE_LIN_DRV*/
                          1866	#2003: /*******************************************************************************
                          1867	#2004:   FLEXRAY driver
                          1868	#2005: ********************************************************************************/
                          1869	#2006: # if defined (VGEN_ENABLE_DRVFR__BASEASR)
                          1870	#2007: #  if (FR_CHANNEL_A_USED == STD_ON)
                          1871	#2008:   BrsHwInitPortOutput(BRSHW_PORT_FR0A_TX);
                          1872	#2009:   BrsHwInitPortInput(BRSHW_PORT_FR0A_RX, BRSHW_PORT_MUX_FR0A_RX);
                          1873	#2010:   BrsHwInitPortOutput(BRSHW_PORT_FR0A_TXEN);
                          1874	#2011:   /*BrsHwInitPortInput(BRSHW_PORT_FR0A_ERRNA); ERRNA-Pin not necessary on this platform*/
                          1875	#2012: #   if defined(_BRSHW_PORT_FR0A_TRCV_STB)
                          1876	#2013:   BrsHwInitPortOutput(BRSHW_PORT_FR0A_TRCV_STB);
                          1877	#2014:   BrsHwPort_SetLevel(BRSHW_PORT_FR0A_TRCV_STB, BRSHW_PORT_LOGIC_HIGH);
                          1878	#2015: #   endif
                          1879	#2016: #   if defined (_BRSHW_PORT_FR0A_TRCV_EN)
                          1880	#2017:   BrsHwInitPortOutput(BRSHW_PORT_FR0A_TRCV_EN);
                          1881	#2018:   BrsHwPort_SetLevel(BRSHW_PORT_FR0A_TRCV_EN, BRSHW_PORT_LOGIC_HIGH);
                          1882	#2019: #   endif
                          1883	#2020: #  endif /*FR_CHANNEL_A_USED*/
                          1884	#2022: #  if (FR_CHANNEL_B_USED == STD_ON)
                          1885	#2023:   BrsHwInitPortOutput(BRSHW_PORT_FR0B_TX);
                          1886	#2024:   BrsHwInitPortInput(BRSHW_PORT_FR0B_RX, BRSHW_PORT_MUX_FR0B_RX);
                          1887	#2025:   BrsHwInitPortOutput(BRSHW_PORT_FR0B_TXEN);
                          1888	#2026:   /*BrsHwInitPortInput(BRSHW_PORT_FR0B_ERRNA); ERRNA-Pin not necessary on this platform */
                          1889	#2027: #   if defined(_BRSHW_PORT_FR0B_TRCV_STB)
                          1890	#2028:   BrsHwInitPortOutput(BRSHW_PORT_FR0B_TRCV_STB);
                          1891	#2029:   BrsHwPort_SetLevel(BRSHW_PORT_FR0B_TRCV_STB, BRSHW_PORT_LOGIC_HIGH);

                                   Fri Apr 10 08:31:37 2020           Page 35
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                          1892	#2030: #   endif
                          1893	#2031: #   if defined (_BRSHW_PORT_FR0B_TRCV_EN)
                          1894	#2032:   BrsHwInitPortOutput(BRSHW_PORT_FR0B_TRCV_EN);
                          1895	#2033:   BrsHwPort_SetLevel(BRSHW_PORT_FR0B_TRCV_EN, BRSHW_PORT_LOGIC_HIGH);
                          1896	#2034: #   endif
                          1897	#2035: #  endif /*FR_CHANNEL_B_USED*/
                          1898	#2036: # endif /*VGEN_ENABLE_DRVFR__BASEASR*/
                          1899	#2038: /*******************************************************************************
                          1900	#2039:   ETHERNET driver
                          1901	#2040: ********************************************************************************/
                          1902	#2041: # if defined (VGEN_ENABLE_DRVETH__BASEASR)
                          1903	#2042:   /* -- Transmitter signals -- */
                          1904	#2043:   BrsHwInitPortInput(BRSHW_PORT_ETH0_REFCLK, BRSHW_PORT_MUX_ETH0_REFCLK);
                          1905	#2044:   BrsHwInitPortOutput(BRSHW_PORT_ETH0_TXD0);
                          1906	#2045:   BrsHwInitPortOutput(BRSHW_PORT_ETH0_TXD1);
                          1907	#2046: #  if defined (_BRSHW_PORT_ETH0_TXD2)
                          1908	#2047:   /* Transmit signal 2 is obsolete within RMII */
                          1909	#2048:   BrsHwInitPortOutput(BRSHW_PORT_ETH0_TXD2);
                          1910	#2049: #  endif
                          1911	#2050: #  if defined (_BRSHW_PORT_ETH0_TXD3)
                          1912	#2051:   /* Transmit signal 3 is obsolete within RMII */
                          1913	#2052:   BrsHwInitPortOutput(BRSHW_PORT_ETH0_TXD3);
                          1914	#2053: #  endif
                          1915	#2054:   BrsHwInitPortOutput(BRSHW_PORT_ETH0_TXEN);
                          1916	#2055: #  if defined (_BRSHW_PORT_ETH0_TXER)
                          1917	#2056:   /* Transmit Error signal is only optional within MII and obsolete within RMII */
                          1918	#2057:   BrsHwInitPortOutput(BRSHW_PORT_ETH0_TXER);
                          1919	#2058: #  endif
                          1920	#2059: #  if defined (_BRSHW_PORT_ETH0_RXER)
                          1921	#2060:   BrsHwInitPortInput(BRSHW_PORT_ETH0_RXER, BRSHW_PORT_MUX_ETH0_RXER);
                          1922	#2061: #  endif
                          1923	#2063:   /* -- Receiver signals -- */
                          1924	#2064: #  if defined (_BRSHW_PORT_ETH0_RXCLK)
                          1925	#2065:   /* Receive clock signal is obsolete within RMII */
                          1926	#2066:   BrsHwInitPortInput(BRSHW_PORT_ETH0_RXCLK, BRSHW_PORT_MUX_ETH0_RXCLK);
                          1927	#2067: #  endif
                          1928	#2068:   BrsHwInitPortInput(BRSHW_PORT_ETH0_RXD0, BRSHW_PORT_MUX_ETH0_RXD0);
                          1929	#2069:   BrsHwInitPortInput(BRSHW_PORT_ETH0_RXD1, BRSHW_PORT_MUX_ETH0_RXD1);
                          1930	#2070: #  if defined (_BRSHW_PORT_ETH0_RXD2)
                          1931	#2071:   /* Receive signal 2 is obsolete within RMII */
                          1932	#2072:   BrsHwInitPortInput(BRSHW_PORT_ETH0_RXD2, BRSHW_PORT_MUX_ETH0_RXD2);
                          1933	#2073: #  endif
                          1934	#2074: #  if defined (_BRSHW_PORT_ETH0_RXD3)
                          1935	#2075:   /* Receive signal 3 is obsolete within RMII */
                          1936	#2076:   BrsHwInitPortInput(BRSHW_PORT_ETH0_RXD3, BRSHW_PORT_MUX_ETH0_RXD3);
                          1937	#2077: #  endif
                          1938	#2078: #  if defined (BRSHW_SIU_GROUP_E)
                          1939	#2079:   BrsHwInitPortInput(BRSHW_PORT_ETH0_CRS, BRSHW_PORT_MUX_ETH0_CRS);
                          1940	#2080:   BrsHwInitPortInput(BRSHW_PORT_ETH0_RXDV, BRSHW_PORT_MUX_ETH0_RXDV);
                          1941	#2081:   BrsHwInitPortInput(BRSHW_PORT_ETH0_COL, BRSHW_PORT_MUX_ETH0_COL);
                          1942	#2082: #  else
                          1943	#2083: BrsHwInitPortInput(BRSHW_PORT_ETH0_CRSDV, BRSHW_PORT_MUX_ETH0_CRSDV);
                          1944	#2084: #  endif
                          1945	#2085:   /* -- Management signals -- */
                          1946	#2086:   BrsHwInitPortInput(BRSHW_PORT_ETH0_MDIO, BRSHW_PORT_MUX_ETH0_MDIO);
                          1947	#2087:   BrsHwInitPortOutput(BRSHW_PORT_ETH0_MDIO);

                                   Fri Apr 10 08:31:37 2020           Page 36
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                          1948	#2088: #  if defined (_BRSHW_PORT_ETH0_MDC)
                          1949	#2089:   /* Management data clock not always needed */
                          1950	#2090:   BrsHwInitPortOutput(BRSHW_PORT_ETH0_MDC);
                          1951	#2091: #  endif
                          1952	#2093: #  if defined (_BRSHW_PORT_ETH0_TRCV_EN)
                          1953	#2094:   BrsHwInitPortInput(BRSHW_PORT_ETH0_TRCV_EN, BRSHW_PORT_MUX_ETH0_TRCV_EN);
                          1954	#2095:   BrsHwPort_SetLevel(BRSHW_PORT_ETH0_TRCV_EN, BRSHW_PORT_LOGIC_HIGH);
                          1955	#2096: #  endif
                          1956	#2097: # endif /*VGEN_ENABLE_DRVETH__BASEASR*/
                          1957	#2099: #endif /*!VGEN_ENABLE_DRVPORT*/
                          1958	#2100: }
                          1959	#2102: #if defined (BRSHW_ENABLE_TIMER_INTERRUPT)
                          1960	#2103: /*****************************************************************************/
                          1961	#2104: /**
                          1962	#2105:  * @brief      Programmable Interrupt Timer, Timer initialization for 'FakeOS'
                          1963	#2106:  *             1ms time base generation
                          1964	#2107:  * @pre        Interrupt vector must be correct configured and the ISR
                          1965	#2108:  *             function itself should exist.
                          1966	#2109:  * @param[in]  -
                          1967	#2110:  * @param[out] -
                          1968	#2111:  * @return     -
                          1969	#2112:  * @context    Function is called from main@BrsMain at power on initialization.
                          1970	#2113:  */
                          1971	#2114: /*****************************************************************************/
                          1972	#2115: void BrsHwTimeBaseInitPowerOn(void)
                          1973	#2116: {
                          1974	#2117: #if defined (BRSHW_TIMER_GROUP_A)
                          1975	#2118:   PIT_MCR   = (uint32)0x01;  /* Enable the clock for timer0, timer is stopped in debug mode. */
                          1976	#2119: # if defined (BRSHW_FMPLL_GROUP_A) || defined (BRSHW_FMPLL_GROUP_B)
                          1977	#2120:   PIT_LDVAL0 = (uint32) (BRS_TIMEBASE_CLOCK * 1000/4); /* Timer0 load value register (1/{x}Mhz * {x}*1000 = 1ms) Hint: With this PLL the PIT is counting with CPU-Frequency/4! */
                          1978	#2121: # else
                          1979	#2122:   PIT_LDVAL0 = (uint32) (BRS_TIMEBASE_CLOCK * 1000);   /* Timer0 load value register (1/{x}Mhz * {x}*1000 = 1ms) */
                          1980	#2123: # endif
                          1981	#2124:   PIT_TFLG0  = 0x1; /* Clear the timer0 interrupt */
                          1982	#2125:   PIT_TCTRL0 = 0x3; /* Timer0 interrupt and Timer enabled */
                          1983	#2126: #endif
                          1984	#2128: #if defined (BRSHW_TIMER_GROUP_B)
                          1985	#2129:   EMIOS_MCR = 0x1400F900;          /* Global prescaler=250 -> reg value = 249 */
                          1986	#2130:   EMIOS_CADR0 =BRS_TIMEBASE_CLOCK; /* Formula: Compare Value = (CPU_FREQUENCY * 1ms / Prescaler) !!internal compare registers are 16 Bit -> max. compareval.=0xFFFF!! visagh: /2 Clock Prescaler available and can not be disabled! -> visjhr: /4 prescaler on hardware implemented for emiosA/B -> manual is wrong */
                          1987	#2131:   EMIOS_CCR0 = 0x020202D4;         /* Modulos up/down counter buffered mode, prescaler=1  */
                          1988	#2132: #endif
                          1989	#2133: }
                          1990	#2135: /*****************************************************************************/
                          1991	#2136: /**
                          1992	#2137:  * @brief      Timer interrupt for the 'FakeOS' 1ms time base generation.
                          1993	#2138:  *             This ISR function is not necessary if an OS is used!
                          1994	#2139:  * @pre        Interrupt vector must be correct configured and the ISR
                          1995	#2140:  *             function itself should exist.
                          1996	#2141:  * @param[in]  -
                          1997	#2142:  * @param[out] -
                          1998	#2143:  * @return     -
                          1999	#2144:  * @context    Function is called from interrupt vector table if the assigned
                          2000	#2145:  *             timer has set its interrupt flag.
                          2001	#2146:  */
                          2002	#2147: /*****************************************************************************/
                          2003	#2148: void BrsHwTimeBaseInterrupt(void)

                                   Fri Apr 10 08:31:37 2020           Page 37
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                          2004	#2149: {
                          2005	#2150:   /* clear Interrupt of timer0 */
                          2006	#2151: # if defined (BRSHW_TIMER_GROUP_A)
                          2007	#2152:   PIT_TFLG0 = 0x1;
                          2008	#2153: # endif
                          2009	#2155: # if defined (BRSHW_TIMER_GROUP_B)
                          2010	#2156:   EMIOS_CSR0 = 0x1;
                          2011	#2157: # endif
                          2012	#2159:   gbBrsMainIsrMilliSecondFlag++;
                          2013	#2160: }
                          2014	#2161: #else
                          2015	#2162: /* BrsHwTimeBaseInitPowerOn() and BrsHwTimeBaseInterrupt() removed by Organi, because of ALM attributes of project */
                          2016	#2163: #endif /*BRSHW_ENABLE_TIMER_INTERRUPT*/
                          2017	#2165: /*****************************************************************************/
                          2018	#2166: /**
                          2019	#2167:  * @brief      Disable the global system interrupt and initialize the INT
                          2020	#2168:  *             lock handler variables.
                          2021	#2169:  * @pre        Must be the first function call in main@BrsMain
                          2022	#2170:  * @param[in]  -
                          2023	#2171:  * @param[out] -
                          2024	#2172:  * @return     -
                          2025	#2173:  * @context    Function is called from main@BrsMain at power on initialization
                          2026	#2174:  */
                          2027	#2175: /*****************************************************************************/
                          2028	#2176: void BrsHwDisableInterruptAtPowerOn(void)
                          2029	#2177: {
                          2030	#2178:   bBrsHwIntDiCounter = 0;
                          2031	#2180:   asm(" wrteei 0"); /* Disable external interrupts */
                          2032	#2181: }
                          2033	#2183: /*****************************************************************************/
                          2034	#2184: /**
                          2035	#2185:  * @brief      Enable the global system interrupt the first time
                          2036	#2186:  * @pre        Must be called after all initializations are done
                          2037	#2187:  * @param[in]  -
                          2038	#2188:  * @param[out] -
                          2039	#2189:  * @return     -
                          2040	#2190:  * @context    Function is called from main@BrsMain at power on initialization
                          2041	#2191:  */
                          2042	#2192: /*****************************************************************************/
                          2043	#2193: void BrsHwEnableInterruptAtPowerOn(void)
                          2044	#2194: {
                          2045	#2195: #if defined (BRS_OS_USECASE_BRS) && !defined (BRS_ENABLE_FBL_SUPPORT)
                          2046	#2196:   BrsHwConfigureInterruptsAtPowerOn();
                          2047	#2197: #else
                          2048	#2198:   /* With OsGen7, OS-APIs have to be used for this */
                          2049	#2199:   /*BrsHwConfigureInterruptsAtPowerOn();*/
                          2050	#2200: #endif
                          2051	#2202:   asm(" wrteei 1");
                          2052	#2203: }
                          2053	#2205: #if defined (BRS_OS_USECASE_BRS) && !defined (BRS_ENABLE_FBL_SUPPORT)
                          2054	#2206: /*****************************************************************************/
                          2055	#2207: /**
                          2056	#2208:  * @brief      This function has to be used to initialize the used interrupts.
                          2057	#2209:  * @pre        -
                          2058	#2210:  * @param[in]  -
                          2059	#2211:  * @param[out] -

                                   Fri Apr 10 08:31:37 2020           Page 38
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                          2060	#2212:  * @return     -
                          2061	#2213:  * @context    Function is called from BrsHwEnableInterruptAtPowerOn or EcuM-DriverInitThree
                          2062	#2214:  */
                          2063	#2215: /*****************************************************************************/
                          2064	#2216: void BrsHwConfigureInterruptsAtPowerOn(void)
                          2065	#2217: {
                          2066	#2218:   uint16 i = 0;
                          2067	#2220:   /* dummy to prevent compiler warnings */
                          2068	#2221:   i=i;
                          2069	#2223: # if defined (BRSHW_INTERRUPT_TABLE_GROUP_A)
                          2070	#2224:   #define BRSHW_ISR_REQUEST_SENT_TO_CPU0 0x8000
                          2071	#2225:   INTC_MCR = 0x1;      /* Hardware Vector enable */
                          2072	#2226:   INTC_CPR_0 = 0x0;    /* Ensure CPU 0 INTC's current priority is 0 */
                          2073	#2228: #  if defined (BRSHW_TIMER_GROUP_A)
                          2074	#2229:   INTC_PSR(226) = 0x32 | BRSHW_ISR_REQUEST_SENT_TO_CPU0; /* cyclic timer interrupt on processor 2 */
                          2075	#2230: #  endif
                          2076	#2232: #  if defined (VGEN_ENABLE_CAN_DRV)
                          2077	#2233: #   if defined (BRSHW_USED_CANCELL_DEFAULT)
                          2078	#2234: #    if defined (kCanPhysToLogChannelIndex_0)
                          2079	#2235:   for (i=520; i<=530; i++)
                          2080	#2236:   {
                          2081	#2237:     INTC_PSR(i) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          2082	#2238:   }
                          2083	#2239: #    endif
                          2084	#2240: #    if defined (kCanPhysToLogChannelIndex_1)
                          2085	#2241:   for (i=533; i<=543; i++)
                          2086	#2242:   {
                          2087	#2243:     INTC_PSR(i) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          2088	#2244:   }
                          2089	#2245: #    endif
                          2090	#2246: #    if defined (kCanPhysToLogChannelIndex_2)
                          2091	#2247:   for (i=546; i<=556; i++)
                          2092	#2248:   {
                          2093	#2249:     INTC_PSR(i) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          2094	#2250:   }
                          2095	#2251: #    endif
                          2096	#2252: #   endif /*BRSHW_USED_CANCELL_DEFAULT*/
                          2097	#2253: #   if defined (BRSHW_USED_CANCELL_MCAN)
                          2098	#2254: #    if defined (kCan_30_McanPhysToLogChannelIndex_0)
                          2099	#2255:     INTC_PSR(557) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          2100	#2256: #    endif
                          2101	#2257: #    if defined (kCan_30_McanPhysToLogChannelIndex_0)
                          2102	#2258:     INTC_PSR(558) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          2103	#2259: #    endif
                          2104	#2260: #   endif /*BRSHW_USED_CANCELL_MCAN*/
                          2105	#2261: #  endif /*VGEN_ENABLE_CAN_DRV*/
                          2106	#2263: #  if defined (VGEN_ENABLE_LIN_DRV)
                          2107	#2264: #   if defined (LIN_ENABLE_HARDWARE_INTERFACE_0)
                          2108	#2265:   INTC_PSR(376) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          2109	#2266:   INTC_PSR(377) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          2110	#2267:   INTC_PSR(378) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          2111	#2268: #   endif
                          2112	#2269: #   if defined (LIN_ENABLE_HARDWARE_INTERFACE_1)
                          2113	#2270:   INTC_PSR(380) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          2114	#2271:   INTC_PSR(381) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          2115	#2272:   INTC_PSR(382) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;

                                   Fri Apr 10 08:31:37 2020           Page 39
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                          2116	#2273: #   endif
                          2117	#2274: #   if defined (LIN_ENABLE_HARDWARE_INTERFACE_2)
                          2118	#2275:   INTC_PSR(384) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          2119	#2276:   INTC_PSR(385) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          2120	#2277:   INTC_PSR(386) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          2121	#2278: #   endif
                          2122	#2279: #   if defined (LIN_ENABLE_HARDWARE_INTERFACE_3)
                          2123	#2280:   INTC_PSR(388) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          2124	#2281:   INTC_PSR(389) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          2125	#2282:   INTC_PSR(390) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          2126	#2283: #   endif
                          2127	#2284: #  endif /*VGEN_ENABLE_LIN_DRV*/
                          2128	#2285:   
                          2129	#2286: #  if defined (VGEN_ENABLE_DRVFR__BASEASR)
                          2130	#2287:   for (i=453; i<=462; i++)
                          2131	#2288:   {
                          2132	#2289:     #error "currently not tested!"
                          2133	#2290:     INTC_PSR(i) = 0x4 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          2134	#2291:   }
                          2135	#2292: #  endif
                          2136	#2293: # endif /*BRSHW_INTERRUPT_TABLE_GROUP_A*/
                          2137	#2295: # if defined (BRSHW_INTERRUPT_TABLE_GROUP_B)
                          2138	#2296:   #define BRSHW_ISR_REQUEST_SENT_TO_CPU0 0x00
                          2139	#2297:   #define BRSHW_ISR_REQUEST_SENT_TO_CPU1 0xC0
                          2140	#2298:   INTC_MCR = 0x1;   /* Hardwar Vector enable */
                          2141	#2299:   INTC_CPR_0 = 0x0; /* Ensure CPU 0 INTC's current priority is 0 */
                          2142	#2300:   INTC_CPR_1 = 0x0; /* Ensure CPU 1 INTC's current priority is 0 */
                          2143	#2302:   INTC_PSR(46) = 0x04; /* Set external wakeup Priority = 0x4 */
                          2144	#2303:   INTC_PSR(47) = 0x04; /* Set external wakeup Priority = 0x4 */
                          2145	#2304:   INTC_PSR(48) = 0x04; /* Set external wakeup Priority = 0x4 */
                          2146	#2305:   INTC_PSR(49) = 0x04; /* Set external wakeup Priority = 0x4 */
                          2147	#2306:   INTC_PSR(50) = 0x04; /* Set external wakeup Priority = 0x4 */
                          2148	#2308:   /* Pit channel_0 */
                          2149	#2309:   INTC_PSR(301) = 0x05;
                          2150	#2311: #  if defined (VGEN_ENABLE_CAN_DRV)
                          2151	#2312: #   if defined (BRSHW_USED_CANCELL_DEFAULT)
                          2152	#2313: #    if defined (kCanPhysToLogChannelIndex_0)
                          2153	#2314:   for ( i=152; i<=172; i++)
                          2154	#2315:   {
                          2155	#2316:     INTC_PSR(i) = 0x02;
                          2156	#2317:   }
                          2157	#2318: #    endif
                          2158	#2319: #    if defined (kCanPhysToLogChannelIndex_1)
                          2159	#2320:   for (i=280; i<=300; i++)
                          2160	#2321:   {
                          2161	#2322:     INTC_PSR(i) = 0x02;
                          2162	#2323:   }
                          2163	#2324: #    endif
                          2164	#2325: #    if defined (kCanPhysToLogChannelIndex_2)
                          2165	#2326:   for (i=173; i<=193; i++)
                          2166	#2327:   {
                          2167	#2328:     INTC_PSR(i) = 0x02;
                          2168	#2329:   }
                          2169	#2330: #    endif
                          2170	#2331: #    if defined (kCanPhysToLogChannelIndex_3)
                          2171	#2332:   for (i=308; i<=328; i++)

                                   Fri Apr 10 08:31:37 2020           Page 40
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                          2172	#2333:   {
                          2173	#2334:     INTC_PSR(i) = 0x02;
                          2174	#2335:   }
                          2175	#2336: #    endif
                          2176	#2337: #    if defined (kCanPhysToLogChannelIndex_4)
                          2177	#2338:   for (i=329; i<=349; i++)
                          2178	#2339:   {
                          2179	#2340:     INTC_PSR(i) = 0x02;
                          2180	#2341:   }
                          2181	#2342: #    endif
                          2182	#2343: #   endif /*BRSHW_USED_CANCELL_DEFAULT*/
                          2183	#2344: #   if defined (BRSHW_USED_CANCELL_MCAN)
                          2184	#2345: #    if defined ( kCan_30_McanPhysToLogChannelIndex_0 ) || defined ( kCan_30_McanPhysToLogChannelIndex_1 ) /* M_CAN_0 + M_CAN_1 */
                          2185	#2346:   INTC_PSR(348) = 0x2;
                          2186	#2347: #    endif
                          2187	#2348: #   endif /*RSHW_USED_CANCELL_MCAN*/
                          2188	#2349: #  endif /*VGEN_ENABLE_CAN_DRV*/
                          2189	#2351: #  if defined (VGEN_ENABLE_LIN_DRV)
                          2190	#2352: #   if defined (LIN_ENABLE_HARDWARE_INTERFACE_0)
                          2191	#2353:   INTC_PSR(146) = 0x02; /* Set eSCI 0 Interupt Priority = 0x2 */
                          2192	#2354: #   endif
                          2193	#2355: #   if defined (LIN_ENABLE_HARDWARE_INTERFACE_1)
                          2194	#2356:   INTC_PSR(149) = 0x02; /* Set eSCI 1 Interupt Priority = 0x2 */
                          2195	#2357: #   endif
                          2196	#2358: #   if defined (LIN_ENABLE_HARDWARE_INTERFACE_2)
                          2197	#2359:   INTC_PSR(473) = 0x02; /* Set eSCI 2 Interupt Priority = 0x2 */
                          2198	#2360: #   endif
                          2199	#2361: #   if defined (LIN_ENABLE_HARDWARE_INTERFACE_3)
                          2200	#2362:   INTC_PSR(474) = 0x2; /* Set eSCI 3 Interupt Priority = 0x2 */
                          2201	#2363: #   endif
                          2202	#2364: #   if defined (LIN_ENABLE_HARDWARE_INTERFACE_4)
                          2203	#2365:   INTC_PSR(475) = 0x2; /* Set eSCI 4 Interupt Priority = 0x2 */
                          2204	#2366: #   endif
                          2205	#2367: #   if defined (LIN_ENABLE_HARDWARE_INTERFACE_5)
                          2206	#2368:   INTC_PSR(505) = 0x2; /* Set eSCI 5 Interupt Priority = 0x2 */
                          2207	#2369: #   endif
                          2208	#2370: #  endif /*VGEN_ENABLE_LIN_DRV*/
                          2209	#2372: #  if defined (VGEN_ENABLE_DRVFR__BASEASR)
                          2210	#2373:   /* FlexRay Interrupt init */
                          2211	#2374:   for (i=350; i<=357; i++)
                          2212	#2375:   {
                          2213	#2376:    INTC_PSR(i) = 0x03; /* Set FlexRay Interrupt Priority = 0x3 */ /* all interrupts */
                          2214	#2377:   }
                          2215	#2378: #  endif /*VGEN_ENABLE_DRVFR__BASEASR*/
                          2216	#2379:   
                          2217	#2380: #  if defined (VGEN_ENABLE_DRVETH__BASEASR)
                          2218	#2381:   #error "Ethernet IRQ not yet supported!"
                          2219	#2382: #  endif
                          2220	#2383: # endif /*BRSHW_INTERRUPT_TABLE_GROUP_B*/
                          2221	#2385: # if defined (BRSHW_INTERRUPT_TABLE_GROUP_C)
                          2222	#2386: #  if defined (BRS_DERIVATIVE_SPC574Sx)
                          2223	#2387:    #define BRSHW_ISR_REQUEST_SENT_TO_RUNNING_CPU 0x8000
                          2224	#2388:     INTC_MCR = 0x001;
                          2225	#2389:     INTC_CPR_0 = 0x0;
                          2226	#2390: #  else
                          2227	#2391:   #define BRSHW_ISR_REQUEST_SENT_TO_RUNNING_CPU 0x2000 /* !!!CPU2!!! */

                                   Fri Apr 10 08:31:37 2020           Page 41
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                          2228	#2392:   INTC_MCR = 0x100; /* Hardware Vector enable (for CPU2!) */
                          2229	#2393:   INTC_CPR_0 = 0x0; /* Ensure CPU 0 INTC's current priority is 0 */
                          2230	#2394: #   if !defined (BRS_DERIVATIVE_SPC574Kxx)
                          2231	#2395:   /* SPC574K only has a passive checker-core as Core1. This core has no own interrupt controller */
                          2232	#2396:   INTC_CPR_1 = 0x0; /* Ensure CPU 1 INTC's current priority is 0 */
                          2233	#2397: #   endif
                          2234	#2398:   INTC_CPR_2 = 0x0;    /* Ensure CPU 2 INTC's current priority is 0 */
                          2235	#2399: #  endif /*else BRS_DERIVATIVE_SPC574Sx*/
                          2236	#2401: #  if defined (BRSHW_TIMER_GROUP_A)
                          2237	#2402: #   if defined (BRS_DERIVATIVE_SPC574Kxx)
                          2238	#2403:   INTC_PSR(240) = 0x32 | BRSHW_ISR_REQUEST_SENT_TO_RUNNING_CPU; /* cyclic timer interrupt on processor 2 */
                          2239	#2404: #   else
                          2240	#2405:   /* for MPC5746M the datasheets seems to be wrong. Use 226 instead of 240 for timer interrupt */
                          2241	#2406:   INTC_PSR(226) = 0x32 | BRSHW_ISR_REQUEST_SENT_TO_RUNNING_CPU; /* cyclic timer interrupt on processor 2 */
                          2242	#2407: #   endif
                          2243	#2408: #  endif
                          2244	#2410: #  if defined (VGEN_ENABLE_CAN_DRV)
                          2245	#2411: #   if defined (kCanPhysToLogChannelIndex_0)
                          2246	#2412:   INTC_PSR(676) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_RUNNING_CPU; /* MCAN0/TTCAN Line0 combined interrupt on processor 0 */
                          2247	#2413:   INTC_PSR(677) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_RUNNING_CPU; /* MCAN0/TTCAN Line1 combined interrupt on processor 0 */
                          2248	#2414: #   endif
                          2249	#2415: #   if defined (kCanPhysToLogChannelIndex_1)
                          2250	#2416:   INTC_PSR(688) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_RUNNING_CPU; /* MCAN1 Line0 combined interrupt on processor 0 */
                          2251	#2417:   INTC_PSR(689) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_RUNNING_CPU; /* MCAN1 Line1 combined interrupt on processor 0 */
                          2252	#2418: #   endif
                          2253	#2419: #   if defined (kCanPhysToLogChannelIndex_2)
                          2254	#2420:   INTC_PSR(690) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_RUNNING_CPU; /* MCAN2 Line0 combined interrupt on processor 0 */
                          2255	#2421:   INTC_PSR(691) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_RUNNING_CPU; /* MCAN2 Line1 combined interrupt on processor 0 */
                          2256	#2422: #   endif
                          2257	#2423: #   if defined (kCanPhysToLogChannelIndex_3)
                          2258	#2424:   INTC_PSR(692) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_RUNNING_CPU; /* MCAN3 Line0 combined interrupt on processor 0 */
                          2259	#2425:   INTC_PSR(693) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_RUNNING_CPU; /* MCAN3 Line1 combined interrupt on processor 0 */
                          2260	#2426: #   endif
                          2261	#2427: #   if defined (kCanPhysToLogChannelIndex_4)
                          2262	#2428:   INTC_PSR(694) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_RUNNING_CPU; /* MCAN3 Line0 combined interrupt on processor 0 */
                          2263	#2429:   INTC_PSR(695) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_RUNNING_CPU; /* MCAN3 Line1 combined interrupt on processor 0 */
                          2264	#2430: #   endif
                          2265	#2431: #  endif /*VGEN_ENABLE_CAN_DRV*/
                          2266	#2433: #  if defined (VGEN_ENABLE_LIN_DRV)
                          2267	#2434: #   if defined (LIN_ENABLE_HARDWARE_INTERFACE_0)
                          2268	#2435:   INTC_PSR(376) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_RUNNING_CPU;
                          2269	#2436:   INTC_PSR(377) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_RUNNING_CPU;
                          2270	#2437:   INTC_PSR(378) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_RUNNING_CPU;
                          2271	#2438: #   endif
                          2272	#2439: #   if defined (LIN_ENABLE_HARDWARE_INTERFACE_1)
                          2273	#2440:   INTC_PSR(380) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_RUNNING_CPU;
                          2274	#2441:   INTC_PSR(381) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_RUNNING_CPU;
                          2275	#2442:   INTC_PSR(382) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_RUNNING_CPU;
                          2276	#2443: #   endif
                          2277	#2444: #   if defined (LIN_ENABLE_HARDWARE_INTERFACE_2)
                          2278	#2445:   INTC_PSR(384) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_RUNNING_CPU;
                          2279	#2446:   INTC_PSR(385) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_RUNNING_CPU;
                          2280	#2447:   INTC_PSR(386) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_RUNNING_CPU;
                          2281	#2448: #   endif
                          2282	#2449: #   if defined (LIN_ENABLE_HARDWARE_INTERFACE_3)
                          2283	#2450:   INTC_PSR(388) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_RUNNING_CPU;

                                   Fri Apr 10 08:31:37 2020           Page 42
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                          2284	#2451:   INTC_PSR(389) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_RUNNING_CPU;
                          2285	#2452:   INTC_PSR(390) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_RUNNING_CPU;
                          2286	#2453: #   endif
                          2287	#2454: #   if defined (LIN_ENABLE_HARDWARE_INTERFACE_14)
                          2288	#2455:   INTC_PSR(432) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_RUNNING_CPU;
                          2289	#2456:   INTC_PSR(433) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_RUNNING_CPU;
                          2290	#2457:   INTC_PSR(434) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_RUNNING_CPU;
                          2291	#2458: #   endif
                          2292	#2459: #   if defined (LIN_ENABLE_HARDWARE_INTERFACE_15)
                          2293	#2460:   INTC_PSR(436) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_RUNNING_CPU;
                          2294	#2461:   INTC_PSR(437) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_RUNNING_CPU;
                          2295	#2462:   INTC_PSR(438) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_RUNNING_CPU;
                          2296	#2463: #   endif
                          2297	#2464: #  endif /*VGEN_ENABLE_LIN_DRV*/
                          2298	#2466: #  if defined (VGEN_ENABLE_DRVFR__BASEASR)
                          2299	#2467:   for (i=453; i<=462; i++)
                          2300	#2468:   {
                          2301	#2469:     #error "currently not tested!"
                          2302	#2470:     INTC_PSR(i) = 0x4 | BRSHW_ISR_REQUEST_SENT_TO_RUNNING_CPU;
                          2303	#2471:   }
                          2304	#2472: #  endif
                          2305	#2473: # endif /*BRSHW_INTERRUPT_TABLE_GROUP_C*/
                          2306	#2475: # if defined (BRSHW_INTERRUPT_TABLE_GROUP_D)
                          2307	#2476:   #define BRSHW_ISR_REQUEST_SENT_TO_CPU0 0x8000
                          2308	#2477:   INTC_MCR = 0x1;   /* Hardware Vector enable */
                          2309	#2478:   INTC_CPR_0 = 0x0; /* Ensure CPU 0 INTC's current priority is 0 */
                          2310	#2479: #  if !defined (BRS_DERIVATIVE_PC580000x)
                          2311	#2480:   INTC_CPR_1 = 0x0; /* Ensure CPU 1 INTC's current priority is 0 */
                          2312	#2481: #  endif
                          2313	#2483: #  if defined (BRSHW_TIMER_GROUP_B)
                          2314	#2484:   INTC_PSR(16) = 0xF | BRSHW_ISR_REQUEST_SENT_TO_CPU0; /* cyclic timer interrupt on processor 0 */
                          2315	#2485: #  endif
                          2316	#2487: #  if defined (VGEN_ENABLE_CAN_DRV)
                          2317	#2488: #   if defined (kCanPhysToLogChannelIndex_0)
                          2318	#2489:       for (i=52; i<=74; i++)
                          2319	#2490:   {
                          2320	#2491:     INTC_PSR(i) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          2321	#2492:   }
                          2322	#2493: #     if defined (C_ENABLE_MB64TO95)
                          2323	#2494:       INTC_PSR(287) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          2324	#2495: #     endif
                          2325	#2496: #     if defined (C_ENABLE_MB96TO127)
                          2326	#2497:       INTC_PSR(288) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          2327	#2498: #     endif
                          2328	#2499: #   endif
                          2329	#2500: #   if defined (kCanPhysToLogChannelIndex_1)
                          2330	#2501:   for (i=75; i<=97; i++)
                          2331	#2502:   {
                          2332	#2503:     INTC_PSR(i) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          2333	#2504:   } 
                          2334	#2505: #     if defined (C_ENABLE_MB64TO95)
                          2335	#2506:       INTC_PSR(289) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          2336	#2507: #     endif
                          2337	#2508: #     if defined (C_ENABLE_MB96TO127)
                          2338	#2509:       INTC_PSR(290) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          2339	#2510: #     endif

                                   Fri Apr 10 08:31:37 2020           Page 43
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                          2340	#2511: #   endif
                          2341	#2512: #    if defined (kCanPhysToLogChannelIndex_2)
                          2342	#2513:       for (i=239; i<=261; i++)
                          2343	#2514:       {
                          2344	#2515:         INTC_PSR(i) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          2345	#2516:       }
                          2346	#2517: #     if defined (C_ENABLE_MB64TO95)
                          2347	#2518:       INTC_PSR(291) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          2348	#2519: #     endif
                          2349	#2520: #     if defined (C_ENABLE_MB96TO127)
                          2350	#2521:       INTC_PSR(292) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          2351	#2522: #     endif
                          2352	#2523: #   endif
                          2353	#2524: #  endif /*VGEN_ENABLE_CAN_DRV*/
                          2354	#2526: #  if defined (VGEN_ENABLE_LIN_DRV)
                          2355	#2527: #   if defined (LIN_ENABLE_HARDWARE_INTERFACE_0)
                          2356	#2528: #    if defined (BRS_DERIVATIVE_PC580000x) || defined (BRS_DERIVATIVE_PC580002x)
                          2357	#2529:       INTC_PSR(51) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0; /* SCI LIN*/
                          2358	#2530: #    elif defined (BRS_DERIVATIVE_PC580003x)
                          2359	#2531:       for (i=262; i<=264; i++)
                          2360	#2532:       {
                          2361	#2533:         INTC_PSR(i) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          2362	#2534:       }
                          2363	#2535: #    endif
                          2364	#2536: #   endif
                          2365	#2537: #   if defined (LIN_ENABLE_HARDWARE_INTERFACE_1)
                          2366	#2538: #    if defined (BRS_DERIVATIVE_PC580003x)
                          2367	#2539:       for (i=265; i<=267; i++)
                          2368	#2540:       {
                          2369	#2541:         INTC_PSR(i) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          2370	#2542:       }
                          2371	#2543: #    endif
                          2372	#2544: #   endif
                          2373	#2545: #  endif
                          2374	#2546: #  if defined (VGEN_ENABLE_DRVFR__BASEASR)
                          2375	#2547:   for (i=98; i<=108; i++)
                          2376	#2548:   {
                          2377	#2549:     INTC_PSR(i) = 0x4 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          2378	#2550:   }
                          2379	#2551: #  endif
                          2380	#2552: # endif /*BRSHW_INTERRUPT_TABLE_GROUP_D*/
                          2381	#2554: # if defined (BRSHW_INTERRUPT_TABLE_GROUP_E)
                          2382	#2555:   #define BRSHW_ISR_REQUEST_SENT_TO_CPU0 0x8000
                          2383	#2556:   #define BRSHW_ISR_REQUEST_SENT_TO_CPU1 0x4000
                          2384	#2557:   INTC_MCR = 0x1;      /* Hardware Vector enable */
                          2385	#2558:   INTC_CPR_0 = 0x0;    /* Ensure CPU 0 INTC's current priority is 0 */
                          2386	#2560:   INTC_PSR(243) = 0x04 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;    /* Set external wakeup Priority = 0x4, processor 0 */
                          2387	#2561:   INTC_PSR(244) = 0x04 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;    /* Set external wakeup Priority = 0x4, processor 0 */
                          2388	#2563: #  if defined (BRSHW_TIMER_GROUP_A)
                          2389	#2564:   INTC_PSR(226) = 0x32 | BRSHW_ISR_REQUEST_SENT_TO_CPU0; /* cyclic timer interrupt on processor 0 */
                          2390	#2565: #  endif
                          2391	#2567: #  if defined (VGEN_ENABLE_CAN_DRV)
                          2392	#2568: #   if defined (kCanPhysToLogChannelIndex_0)
                          2393	#2569: #    if (MPC5748G_CUT == 1) || (!C_CAN_MAX_BUFFER_96)
                          2394	#2570:   for (i=565; i<=573; i++)
                          2395	#2571: #    else

                                   Fri Apr 10 08:31:37 2020           Page 44
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                          2396	#2572:   for (i=565; i<=574; i++)
                          2397	#2573: #    endif
                          2398	#2574:   {
                          2399	#2575:     INTC_PSR(i) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          2400	#2576:   }
                          2401	#2577: #   endif
                          2402	#2578: #   if defined (kCanPhysToLogChannelIndex_1)
                          2403	#2579: #    if (MPC5748G_CUT == 1) || (!C_CAN_MAX_BUFFER_96)
                          2404	#2580:   for (i=578; i<=585; i++)
                          2405	#2581: #    else
                          2406	#2582:   for (i=578; i<=586; i++)
                          2407	#2583: #    endif
                          2408	#2584:   {
                          2409	#2585:     INTC_PSR(i) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          2410	#2586:   }
                          2411	#2587: #   endif
                          2412	#2588: #   if defined (kCanPhysToLogChannelIndex_2)
                          2413	#2589: #    if (MPC5748G_CUT == 1) || (!C_CAN_MAX_BUFFER_96)
                          2414	#2590:   for (i=590; i<=597; i++)
                          2415	#2591: #    else
                          2416	#2592:   for (i=590; i<=598; i++)
                          2417	#2593: #    endif
                          2418	#2594:   {
                          2419	#2595:     INTC_PSR(i) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          2420	#2596:   }
                          2421	#2597: #   endif
                          2422	#2598: #   if defined (kCanPhysToLogChannelIndex_3)
                          2423	#2599: #    if (MPC5748G_CUT == 1) || (!C_CAN_MAX_BUFFER_96)
                          2424	#2600:   for (i=602; i<=609; i++)
                          2425	#2601: #    else
                          2426	#2602:   for (i=602; i<=610; i++)
                          2427	#2603: #    endif
                          2428	#2604:   {
                          2429	#2605:     INTC_PSR(i) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          2430	#2606:   }
                          2431	#2607: #   endif
                          2432	#2608: #   if defined (kCanPhysToLogChannelIndex_4)
                          2433	#2609: #    if (MPC5748G_CUT == 1) || (!C_CAN_MAX_BUFFER_96)
                          2434	#2610:   for (i=614; i<=621; i++)
                          2435	#2611: #    else
                          2436	#2612:   for (i=614; i<=622; i++)
                          2437	#2613: #    endif
                          2438	#2614:   {
                          2439	#2615:     INTC_PSR(i) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          2440	#2616:   }
                          2441	#2617: #   endif
                          2442	#2618: #   if defined (kCanPhysToLogChannelIndex_5)
                          2443	#2619: #    if (MPC5748G_CUT == 1) || (!C_CAN_MAX_BUFFER_96)
                          2444	#2620:   for (i=626; i<=633; i++)
                          2445	#2621: #    else
                          2446	#2622:   for (i=626; i<=634; i++)
                          2447	#2623: #    endif
                          2448	#2624:   {
                          2449	#2625:     INTC_PSR(i) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          2450	#2626:   }
                          2451	#2627: #   endif

                                   Fri Apr 10 08:31:37 2020           Page 45
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                          2452	#2628: #   if defined (kCanPhysToLogChannelIndex_6)
                          2453	#2629: #    if (MPC5748G_CUT == 1) || (!C_CAN_MAX_BUFFER_96)
                          2454	#2630:   for (i=638; i<=645; i++)
                          2455	#2631: #    else
                          2456	#2632:   for (i=638; i<=646; i++)
                          2457	#2633: #    endif
                          2458	#2634:   {
                          2459	#2635:     INTC_PSR(i) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          2460	#2636:   }
                          2461	#2637: #   endif
                          2462	#2638: #   if defined (kCanPhysToLogChannelIndex_7)
                          2463	#2639: #    if (MPC5748G_CUT == 1) || (!C_CAN_MAX_BUFFER_96)
                          2464	#2640:   for (i=650; i<=657; i++)
                          2465	#2641: #    else
                          2466	#2642:   for (i=650; i<=658; i++)
                          2467	#2643: #    endif
                          2468	#2644:   {
                          2469	#2645:     INTC_PSR(i) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          2470	#2646:   }
                          2471	#2647: #   endif
                          2472	#2648: #  endif /*VGEN_ENABLE_CAN_DRV*/
                          2473	#2650: #  if defined (VGEN_ENABLE_LIN_DRV)
                          2474	#2651: #   if defined (LIN_ENABLE_HARDWARE_INTERFACE_0)
                          2475	#2652:   INTC_PSR(376) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          2476	#2653:   INTC_PSR(377) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          2477	#2654:   INTC_PSR(378) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          2478	#2655: #   endif
                          2479	#2656: #   if defined (LIN_ENABLE_HARDWARE_INTERFACE_1)
                          2480	#2657:   INTC_PSR(379) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          2481	#2658:   INTC_PSR(380) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          2482	#2659:   INTC_PSR(381) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          2483	#2660: #   endif
                          2484	#2661: #   if defined (LIN_ENABLE_HARDWARE_INTERFACE_2)
                          2485	#2662:   INTC_PSR(382) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          2486	#2663:   INTC_PSR(383) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          2487	#2664:   INTC_PSR(384) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          2488	#2665: #   endif
                          2489	#2666: #   if defined (LIN_ENABLE_HARDWARE_INTERFACE_3)
                          2490	#2667:   INTC_PSR(385) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          2491	#2668:   INTC_PSR(386) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          2492	#2669:   INTC_PSR(387) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          2493	#2670: #   endif
                          2494	#2671: #   if defined (LIN_ENABLE_HARDWARE_INTERFACE_4)
                          2495	#2672:   INTC_PSR(388) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          2496	#2673:   INTC_PSR(389) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          2497	#2674:   INTC_PSR(390) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          2498	#2675: #   endif
                          2499	#2676: #   if defined (LIN_ENABLE_HARDWARE_INTERFACE_5)
                          2500	#2677:   INTC_PSR(391) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          2501	#2678:   INTC_PSR(392) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          2502	#2679:   INTC_PSR(393) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          2503	#2680: #   endif
                          2504	#2681: #   if defined (LIN_ENABLE_HARDWARE_INTERFACE_6)
                          2505	#2682:   INTC_PSR(394) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          2506	#2683:   INTC_PSR(395) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          2507	#2684:   INTC_PSR(396) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;

                                   Fri Apr 10 08:31:37 2020           Page 46
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                          2508	#2685: #   endif
                          2509	#2686: #   if defined (LIN_ENABLE_HARDWARE_INTERFACE_7)
                          2510	#2687:   INTC_PSR(397) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          2511	#2688:   INTC_PSR(398) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          2512	#2689:   INTC_PSR(399) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          2513	#2690: #   endif
                          2514	#2691: #   if defined (LIN_ENABLE_HARDWARE_INTERFACE_8)
                          2515	#2692:   INTC_PSR(400) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          2516	#2693:   INTC_PSR(401) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          2517	#2694:   INTC_PSR(402) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          2518	#2695: #   endif
                          2519	#2696: #   if defined (LIN_ENABLE_HARDWARE_INTERFACE_9)
                          2520	#2697:   INTC_PSR(403) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          2521	#2698:   INTC_PSR(404) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          2522	#2699:   INTC_PSR(405) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          2523	#2700: #   endif
                          2524	#2701: #   if defined (LIN_ENABLE_HARDWARE_INTERFACE_10)
                          2525	#2702:   INTC_PSR(406) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          2526	#2703:   INTC_PSR(407) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          2527	#2704:   INTC_PSR(408) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          2528	#2705: #   endif
                          2529	#2706: #   if defined (LIN_ENABLE_HARDWARE_INTERFACE_11)
                          2530	#2707:   INTC_PSR(409) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          2531	#2708:   INTC_PSR(410) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          2532	#2709:   INTC_PSR(411) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          2533	#2710: #   endif
                          2534	#2711: #   if defined (LIN_ENABLE_HARDWARE_INTERFACE_12)
                          2535	#2712:   INTC_PSR(412) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          2536	#2713:   INTC_PSR(413) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          2537	#2714:   INTC_PSR(414) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          2538	#2715: #   endif
                          2539	#2716: #   if defined (LIN_ENABLE_HARDWARE_INTERFACE_13)
                          2540	#2717:   INTC_PSR(415) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          2541	#2718:   INTC_PSR(416) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          2542	#2719:   INTC_PSR(417) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          2543	#2720: #   endif
                          2544	#2721: #   if defined (LIN_ENABLE_HARDWARE_INTERFACE_14)
                          2545	#2722:   INTC_PSR(418) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          2546	#2723:   INTC_PSR(419) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          2547	#2724:   INTC_PSR(420) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          2548	#2725: #   endif
                          2549	#2726: #   if defined (LIN_ENABLE_HARDWARE_INTERFACE_15)
                          2550	#2727:   INTC_PSR(421) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          2551	#2728:   INTC_PSR(422) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          2552	#2729:   INTC_PSR(423) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          2553	#2730: #   endif
                          2554	#2731: #   if defined (LIN_ENABLE_HARDWARE_INTERFACE_16)
                          2555	#2732:   INTC_PSR(424) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          2556	#2733:   INTC_PSR(425) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          2557	#2734:   INTC_PSR(426) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          2558	#2735: #   endif
                          2559	#2736: #   if defined (LIN_ENABLE_HARDWARE_INTERFACE_17)
                          2560	#2737:   INTC_PSR(427) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          2561	#2738:   INTC_PSR(428) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          2562	#2739:   INTC_PSR(429) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          2563	#2740: #   endif

                                   Fri Apr 10 08:31:37 2020           Page 47
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                          2564	#2741: #  endif /*VGEN_ENABLE_LIN_DRV*/
                          2565	#2742:   
                          2566	#2743: #  if defined (VGEN_ENABLE_DRVFR__BASEASR)
                          2567	#2744:   for (i=453; i<=462; i++)
                          2568	#2745:   {
                          2569	#2746:     INTC_PSR(i) = 0x4 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          2570	#2747:   }
                          2571	#2748: #  endif
                          2572	#2749:   
                          2573	#2750: #  if defined (VGEN_ENABLE_DRVETH__BASEASR)
                          2574	#2751: #   if (MPC5748G_CUT == 1)
                          2575	#2752:   /* CUT1 has no "ENET Interrupt Group3" Interrupt */
                          2576	#2753:   for (i=210; i<=212; i++)
                          2577	#2754:   {
                          2578	#2755:     INTC_PSR(i) = 0x1 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          2579	#2756:   }
                          2580	#2757:   for (i=214; i<=218; i++)
                          2581	#2758:   {
                          2582	#2759:     INTC_PSR(i) = 0x1 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          2583	#2760:   }
                          2584	#2761: #   else
                          2585	#2762:   for (i=210; i<=218; i++)
                          2586	#2763:   {
                          2587	#2764:     INTC_PSR(i) = 0x1 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          2588	#2765:   }
                          2589	#2766: #   endif /*CUT1*/
                          2590	#2767: #  endif /*VGEN_ENABLE_DRVETH__BASEASR*/
                          2591	#2768: # endif /*BRSHW_INTERRUPT_TABLE_GROUP_E*/
                          2592	#2770: # if defined (BRSHW_INTERRUPT_TABLE_GROUP_F)
                          2593	#2771:   #define BRSHW_ISR_REQUEST_SENT_TO_CPU0 0x8000
                          2594	#2772:   INTC_MCR   = 0x1; /* Hardware Vector enable */
                          2595	#2773:   INTC_CPR_0 = 0x0; /* Ensure CPU 0 INTC's current priority is 0 */
                          2596	#2775: #  if defined (BRSHW_TIMER_GROUP_A)
                          2597	#2776:   INTC_PSR(226) = 0x32 | BRSHW_ISR_REQUEST_SENT_TO_CPU0; /* PIT0 IRQ */
                          2598	#2777: #  endif
                          2599	#2779: #  if defined (VGEN_ENABLE_CAN_DRV)
                          2600	#2780: #   if defined (kCanPhysToLogChannelIndex_0)
                          2601	#2781:   INTC_PSR(677) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;  /* FlexCAN_0_MB0_3    */
                          2602	#2782:   INTC_PSR(678) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;  /* FlexCAN_0_MB4_7    */
                          2603	#2783:   INTC_PSR(679) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;  /* FlexCAN_0_MB8_11   */
                          2604	#2784:   INTC_PSR(680) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;  /* FlexCAN_0_MB12_15  */
                          2605	#2785:   INTC_PSR(681) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;  /* FlexCAN_0_MB16_31  */
                          2606	#2787:   INTC_PSR(687) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;  /* FlexCAN_0_ERR      */
                          2607	#2788:   INTC_PSR(688) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;  /* FlexCAN_0_BOFF     */
                          2608	#2789: #   endif
                          2609	#2790: #   if defined (kCanPhysToLogChannelIndex_1)
                          2610	#2791:   INTC_PSR(690) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;  /* FlexCAN_1_MB0_3    */
                          2611	#2792:   INTC_PSR(691) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;  /* FlexCAN_1_MB4_7    */
                          2612	#2793:   INTC_PSR(692) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;  /* FlexCAN_1_MB8_11   */
                          2613	#2794:   INTC_PSR(693) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;  /* FlexCAN_1_MB12_15  */
                          2614	#2795:   INTC_PSR(694) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;  /* FlexCAN_1_MB16_31  */
                          2615	#2797:   INTC_PSR(700) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;  /* FlexCAN_1_ERR      */
                          2616	#2798:   INTC_PSR(701) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;  /* FlexCAN_1_BOFF     */
                          2617	#2799: #   endif
                          2618	#2800: #  endif /*VGEN_ENABLE_CAN_DRV*/
                          2619	#2802: #   if defined (VGEN_ENABLE_LIN_DRV)

                                   Fri Apr 10 08:31:37 2020           Page 48
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                          2620	#2803:   #error "LIN IRQ Priority not yet implemented!"
                          2621	#2804: #   endif
                          2622	#2806: #   if defined (VGEN_ENABLE_DRVFR__BASEASR)
                          2623	#2807:   #error "FlexRay IRQ Priority not yet implemented!"
                          2624	#2808: #   endif /*VGEN_ENABLE_DRVFR__BASEASR*/
                          2625	#2810: #   if defined (VGEN_ENABLE_DRVETH__BASEASR)
                          2626	#2811:   #error "Ethernet IRQ Priority not yet implemented!"
                          2627	#2812: #   endif
                          2628	#2813: # endif /*BRSHW_INTERRUPT_TABLE_GROUP_F*/
                          2629	#2815: # if defined (BRSHW_INTERRUPT_TABLE_GROUP_G)
                          2630	#2816:   #define BRSHW_ISR_REQUEST_SENT_TO_CPU0 0x8000
                          2631	#2817:   #define BRSHW_ISR_REQUEST_SENT_TO_CPU1 0x4000
                          2632	#2818:   INTC_MCR &= ~(0x00001101);
                          2633	#2819:   INTC_MCR |=   0x00000010;
                          2634	#2820:   INTC_CPR_0 = 0x0;    /* Ensure CPU 0 INTC's current priority is 0 */
                          2635	#2821:   INTC_CPR_1 = 0x0;    /* Ensure CPU 1 INTC's current priority is 0 */
                          2636	#2823:   INTC_PSR(243) = 0x04 | BRSHW_ISR_REQUEST_SENT_TO_CPU1;    /* Set external wakeup Priority = 0x4, processor 1 */
                          2637	#2824:   INTC_PSR(244) = 0x04 | BRSHW_ISR_REQUEST_SENT_TO_CPU1;    /* Set external wakeup Priority = 0x4, processor 1 */
                          2638	#2826: #  if defined (BRSHW_TIMER_GROUP_A)
                          2639	#2827:   INTC_PSR(226) = 0x32 | BRSHW_ISR_REQUEST_SENT_TO_CPU1; /* cyclic timer interrupt on processor 1 */
                          2640	#2828: #  endif
                          2641	#2830: #  if defined (VGEN_ENABLE_CAN_DRV)
                          2642	#2831: #   if defined (kCanPhysToLogChannelIndex_0)
                          2643	#2832:   for (i=677; i<=682; i++)
                          2644	#2833:   {
                          2645	#2834:     INTC_PSR(i) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU1;
                          2646	#2835:   }
                          2647	#2836: #   endif
                          2648	#2837: #   if defined (kCanPhysToLogChannelIndex_1)
                          2649	#2838:   for (i=683; i<=688; i++)
                          2650	#2839:   {
                          2651	#2840:     INTC_PSR(i) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU1;
                          2652	#2841:   }
                          2653	#2842: #   endif
                          2654	#2843: #   if defined (kCanPhysToLogChannelIndex_2)
                          2655	#2844:   for (i=689; i<=694; i++)
                          2656	#2845:   {
                          2657	#2846:     INTC_PSR(i) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU1;
                          2658	#2847:   }
                          2659	#2848: #   endif
                          2660	#2849: #   if defined (kCanPhysToLogChannelIndex_3)
                          2661	#2850:   for (i=695; i<=700; i++)
                          2662	#2851:   {
                          2663	#2852:     INTC_PSR(i) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU1;
                          2664	#2853:   }
                          2665	#2854: #   endif
                          2666	#2855: #  endif /*VGEN_ENABLE_CAN_DRV*/
                          2667	#2856:   
                          2668	#2857: #  if defined (VGEN_ENABLE_LIN_DRV)
                          2669	#2858: #   if defined (LIN_ENABLE_HARDWARE_INTERFACE_0)
                          2670	#2859:   for (i=376; i<=378; i++)
                          2671	#2860:   {
                          2672	#2861:     INTC_PSR(i) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU1;
                          2673	#2862:   }
                          2674	#2863: #   endif
                          2675	#2864: #   if defined (LIN_ENABLE_HARDWARE_INTERFACE_1)

                                   Fri Apr 10 08:31:37 2020           Page 49
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                          2676	#2865:   for (i=380; i<=382; i++)
                          2677	#2866:   {
                          2678	#2867:     INTC_PSR(i) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU1;
                          2679	#2868:   }
                          2680	#2869: #   endif
                          2681	#2870: #   if defined (LIN_ENABLE_HARDWARE_INTERFACE_2)
                          2682	#2871:   for (i=384; i<=386; i++)
                          2683	#2872:   {
                          2684	#2873:     INTC_PSR(i) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU1;
                          2685	#2874:   }
                          2686	#2875: #   endif
                          2687	#2876: #   if defined (LIN_ENABLE_HARDWARE_INTERFACE_3)
                          2688	#2877:   for (i=388; i<=390; i++)
                          2689	#2878:   {
                          2690	#2879:     INTC_PSR(i) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU1;
                          2691	#2880:   }
                          2692	#2881: #   endif
                          2693	#2882: #   if defined (LIN_ENABLE_HARDWARE_INTERFACE_4)
                          2694	#2883:   for (i=392; i<=394; i++)
                          2695	#2884:   {
                          2696	#2885:     INTC_PSR(i) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU1;
                          2697	#2886:   }
                          2698	#2887: #   endif
                          2699	#2888: #   if defined (LIN_ENABLE_HARDWARE_INTERFACE_5)
                          2700	#2889:   for (i=396; i<=398; i++)
                          2701	#2890:   {
                          2702	#2891:     INTC_PSR(i) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU1;
                          2703	#2892:   }
                          2704	#2893: #   endif
                          2705	#2894: #  endif /*VGEN_ENABLE_LIN_DRV*/
                          2706	#2895:   
                          2707	#2896: #  if defined (VGEN_ENABLE_DRVETH__BASEASR)
                          2708	#2897:   for (i=218; i<=220; i++)
                          2709	#2898:   {
                          2710	#2899:     INTC_PSR(i) = 0x1 | BRSHW_ISR_REQUEST_SENT_TO_CPU1;
                          2711	#2900:   }
                          2712	#2901: #  endif /*VGEN_ENABLE_DRVETH__BASEASR*/
                          2713	#2902: # endif /*BRSHW_INTERRUPT_TABLE_GROUP_G*/
                          2714	#2904:   /***********************************************************
                          2715	#2905:    * Software Vector Mode configuration (SW Dispatching)
                          2716	#2906:    ***********************************************************/
                          2717	#2907:   /* Description: For those derivatives which use SW dispatching, the below code
                          2718	#2908:    *              overwrites the default hardware vector configuration!
                          2719	#2909:    */
                          2720	#2910: # if defined (BRSHW_ENABLE_ISR_SW_DISPATCHING)
                          2721	#2911: #  if defined (BRSHW_INTERRUPT_TABLE_GROUP_C)
                          2722	#2912:   /* Used for MPCMPC5746M and MPC5777M */
                          2723	#2913:   INTC_MCR    = 0x0;                   /* Software Vector mode enabled */
                          2724	#2914:   INTC_ACKR_2 = (uint32)Intvecttable;  /* Configure the vector table base address */
                          2725	#2916: #  elif defined (BRSHW_INTERRUPT_TABLE_GROUP_E)
                          2726	#2917:   INTC_MCR    = 0x0;                   /* Software Vector Mode enabled */
                          2727	#2918:   INTC_ACKR_0 = (uint32)Intvecttable;  /* Configure the vector table base address for CPU0 */
                          2728	#2920: #  elif defined (BRSHW_INTERRUPT_TABLE_GROUP_F)
                          2729	#2921:   INTC_MCR    = 0x0;                   /* Software Vector Mode enabled */
                          2730	#2922:   INTC_ACKR_0 = (uint32)Intvecttable;  /* Configure the vector table base address for CPU0 */
                          2731	#2924: #  else

                                   Fri Apr 10 08:31:37 2020           Page 50
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                          2732	#2925:   #error " Software Vector Mode not yet supported for this IRQ Table Group"
                          2733	#2926: #  endif /*BRSHW_INTERRUPT_TABLE_GROUP_x*/
                          2734	#2927: # endif /*BRSHW_ENABLE_ISR_SW_DISPATCHING*/
                          2735	#2928: }
                          2736	#2929: #endif /*BRS_OS_USECASE_BRS&&!BRS_ENABLE_FBL_SUPPORT*/
                          2737	#2931: /*****************************************************************************/
                          2738	#2932: /**
                          2739	#2933:  * @brief      Disables the global interrupt of the micro. This is done in a
                          2740	#2934:  *             "save way" to allow also nested calls of BrsHwDisableInterrupt
                          2741	#2935:  *             and BrsHwRestoreInterrupt. The first call of BrsHwDisableInterrupt
                          2742	#2936:  *             stores the current state of the global INT flag and the last
                          2743	#2937:  *             call to BrsHwRestoreInterrupt restores the state.
                          2744	#2938:  * @pre        -
                          2745	#2939:  * @param[in]  -
                          2746	#2940:  * @param[out] -
                          2747	#2941:  * @return     -
                          2748	#2942:  * @context    Function is called from all modules to disable the global interrupt
                          2749	#2943:  */
                          2750	#2944: /*****************************************************************************/
                          2751	#2945: void BrsHwDisableInterrupt(void)
                          2752	#2946: {
                          2753	#2947:   /* No check for "overrun" of nested INT lock counter is performed, due to more
                          2754	#2948:   *  than 255 nested calls to BrsHwDisableInterrupt are very unlikely. */
                          2755	#2949:   if (bBrsHwIntDiCounter == 0)
                          2756	#2950:   {
                          2757	#2951:     asm(" wrteei 0"); /* Disable external interrupts */
                          2758	#2952:   }
                          2759	#2954:   bBrsHwIntDiCounter++;
                          2760	#2955: }
                          2761	#2957: /*****************************************************************************/
                          2762	#2958: /**
                          2763	#2959:  * @brief      Restores the state of the global interrupt of the micro. This
                          2764	#2960:  *             is done in a "save way" to allow also nested calls of
                          2765	#2961:  *             BrsHwDisableInterrupt and BrsHwRestoreInterrupt. The first call
                          2766	#2962:  *             of BrsHwDisableInterrupt stores the current state of the global
                          2767	#2963:  *             INT flag and the last call to BrsHwRestoreInterrupt restores the
                          2768	#2964:  *             state.
                          2769	#2965:  * @pre        -
                          2770	#2966:  * @param[in]  -
                          2771	#2967:  * @param[out] -
                          2772	#2968:  * @return     -
                          2773	#2969:  * @context    Function is called from all modules to enable the global interrupt
                          2774	#2970:  */
                          2775	#2971: /*****************************************************************************/
                          2776	#2972: void BrsHwRestoreInterrupt(void)
                          2777	#2973: {
                          2778	#2974:   /* Check for illegal call of BrsHwRestoreInterrupt. If this function is called
                          2779	#2975:    *  too often, the INT lock works incorrect. */
                          2780	#2976:   if (bBrsHwIntDiCounter == 0)
                          2781	#2977:   {
                          2782	#2978: #if defined (BRS_OS_USECASE_BRS) && !defined (BRS_ENABLE_FBL_SUPPORT)
                          2783	#2979:     BrsMainExceptionHandler( kBrsIllegalInterruptRestoration, BRSERROR_MODULE_BRSHW, (uint16)(__LINE__) );
                          2784	#2980: #else
                          2785	#2981:     /* Check is only performed, if no OS and no FBL are used */
                          2786	#2982: #endif
                          2787	#2983:   }

                                   Fri Apr 10 08:31:37 2020           Page 51
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                          2788	#2985:   bBrsHwIntDiCounter--;
                          2789	#2986:   if (bBrsHwIntDiCounter == 0)
                          2790	#2987:   {
                          2791	#2988:     asm(" wrteei 1");
                          2792	#2989:   }
                          2793	#2990: }
                          2794	#2992: /*****************************************************************************/
                          2795	#2993: /**
                          2796	#2994:  * @brief      restart ECU (issue a software reset or jump to startup code)
                          2797	#2995:  * @pre        -
                          2798	#2996:  * @param[in]  -
                          2799	#2997:  * @param[out] -
                          2800	#2998:  * @return     -
                          2801	#2999:  * @context    Function is called from e.g. ECU state handling
                          2802	#3000:  */
                          2803	#3001: /*****************************************************************************/
                          2804	#3002: void BrsHwSoftwareResetECU(void)
                          2805	#3003: {
                          2806	#3004:   BrsHwDisableInterrupt();
                          2807	#3006: #if defined (BRSHW_SIU_GROUP_B)
                          2808	#3007:   /* Derivatives, which do not contain Mode Entry Module for generating a reset, could generate an interanl system reaset via System Reset Control Register */
                          2809	#3008:   SIU_SRCR |= 0x80000000;
                          2810	#3009: #else
                          2811	#3010:   /* Reset the functional reset escalation threshold register */
                          2812	#3011:   RGM_FRET = RGM_FRET;
                          2813	#3013:   /* Sequence that mode transition are mannaged by hardware */
                          2814	#3014:   ME_MCTL = 0x00005AF0UL; /* Key access 1st step */
                          2815	#3015:   ME_MCTL = 0x0000A50FUL; /* Key access 2nd step */
                          2816	#3016: #endif
                          2817	#3018:   while (1)
                          2818	#3019:   {
                          2819	#3020:     /* Wait until watchdog reset occurs */
                          2820	#3021:   }
                          2821	#3022: }
                          2822	#3024: #if defined (BRS_ENABLE_SUPPORT_LEDS)          || \
                          2823	#3025:     defined (BRS_ENABLE_SUPPORT_TOGGLE_WD_PIN) || \
                          2824	#3026:     defined (BRS_ENABLE_SUPPORT_TOGGLE_CUSTOM_PIN)
                          2825	#3027: # if defined (BRS_ENABLE_FBL_SUPPORT)
                          2826	#3028:   #define BRS_START_SEC_RAM_CODE
                          2827	#3029:   #include "Brs_MemMap.h"   /* PRQA S 5087 *//* MD_MSR_19.1 */
                          2828	#3030: # endif
                          2829	#3031: /*****************************************************************************/
                          2830	#3032: /**
                          2831	#3033:  * @brief      This API is used to toggle a PortPin.
                          2832	#3034:  *             Per default, the following parameters are available:
                          2833	#3035:  *               BRSHW_TOGGLEPIN_LED
                          2834	#3036:  *               BRSHW_TOGGLEPIN_WD
                          2835	#3037:  *               BRSHW_TOGGLEPIN_CUSTOM
                          2836	#3038:  *             Depending pins have to be configured within BrsHw_Ports.h.
                          2837	#3039:  * @pre        -
                          2838	#3040:  * @param[in]  Pin has to configure the depending pin to be toggled
                          2839	#3041:  * @param[out] -
                          2840	#3042:  * @return     -
                          2841	#3043:  * @context    Function is called from all modules to set or clear a PortPin
                          2842	#3044:  */
                          2843	#3045: /*****************************************************************************/

                                   Fri Apr 10 08:31:37 2020           Page 52
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                          2844	#3046: void BrsHwTogglePin(brsHw_TogglePin Pin)
                          2845	#3047: {
                          2846	#3048: #if defined (VGEN_ENABLE_DRVDIO)
                          2847	#3049:   #error "Configure the valid DioChannel for the toggle pins within your DrvDio config and set it as value for BrsHw_Dio_ToggleX_Channel. Or disable the depending BRS mechanism."*/
                          2848	#3050: # if defined (BRS_ENABLE_SUPPORT_LEDS)
                          2849	#3051:   Dio_ChannelType BrsHw_Dio_ToggleLED_Channel = DioConf_DioChannel_DioChannel_LED;
                          2850	#3052: # endif
                          2851	#3053: # if defined (BRS_ENABLE_SUPPORT_TOGGLE_WD_PIN)
                          2852	#3054:   Dio_ChannelType BrsHw_Dio_ToggleWD_Channel = DioConf_DioChannel_DioChannel_WD;
                          2853	#3055: # endif
                          2854	#3056: # if defined (BRS_ENABLE_SUPPORT_TOGGLE_CUSTOM_PIN)
                          2855	#3057:   Dio_ChannelType BrsHw_Dio_ToggleCUSTOM_Channel = DioConf_DioChannel_DioChannel_CUSTOM;
                          2856	#3058: # endif
                          2857	#3059: #endif /*VGEN_ENABLE_DRVDIO*/
                          2858	#3061: #if defined (BRS_ENABLE_SUPPORT_LEDS)
                          2859	#3062:   static uint8 BrsHw_ToggleSwitch_LED = BRSHW_PORT_LOGIC_HIGH;
                          2860	#3063: #endif
                          2861	#3064: #if defined (BRS_ENABLE_SUPPORT_TOGGLE_WD_PIN)
                          2862	#3065:   static uint8 BrsHw_ToggleSwitch_WD = BRSHW_PORT_LOGIC_HIGH;
                          2863	#3066: #endif
                          2864	#3067: #if defined (BRS_ENABLE_SUPPORT_TOGGLE_CUSTOM_PIN)
                          2865	#3068:   static uint8 BrsHw_ToggleSwitch_CUSTOM = BRSHW_PORT_LOGIC_HIGH;
                          2866	#3069: #endif
                          2867	#3071:   switch (Pin)
                          2868	#3072:   {
                          2869	#3073: #if defined (BRS_ENABLE_SUPPORT_LEDS)
                          2870	#3074:     case BRSHW_TOGGLEPIN_LED:
                          2871	#3075: # if defined (VGEN_ENABLE_DRVDIO)
                          2872	#3076:       Dio_WriteChannel(BrsHw_Dio_ToggleLED_Channel, BrsHw_ToggleSwitch_LED & 0x01);
                          2873	#3077: # else
                          2874	#3078:       BrsHwPort_SetLevel(BRSHW_PORT_LED, BrsHw_ToggleSwitch_LED & 0x01);
                          2875	#3079: # endif
                          2876	#3080:       BrsHw_ToggleSwitch_LED++;
                          2877	#3081:       break;
                          2878	#3082: #endif /*BRS_ENABLE_SUPPORT_LEDS*/
                          2879	#3083: #if defined (BRS_ENABLE_SUPPORT_TOGGLE_WD_PIN)
                          2880	#3084:     case BRSHW_TOGGLEPIN_WD:
                          2881	#3085: # if defined (VGEN_ENABLE_DRVDIO)
                          2882	#3086:       Dio_WriteChannel(BrsHw_Dio_ToggleWD_Channel, BrsHw_ToggleSwitch_WD & 0x01);
                          2883	#3087: # else
                          2884	#3088:       BrsHwPort_SetLevel(BRSHW_PORT_TOGGLE_WD, BrsHw_ToggleSwitch_WD & 0x01);
                          2885	#3089: # endif
                          2886	#3090:       BrsHw_ToggleSwitch_WD++;
                          2887	#3091:       break;
                          2888	#3092: #endif /*BRS_ENABLE_SUPPORT_TOGGLE_WD_PIN*/
                          2889	#3093: #if defined (BRS_ENABLE_SUPPORT_TOGGLE_CUSTOM_PIN)
                          2890	#3094:     case BRSHW_TOGGLEPIN_CUSTOM:
                          2891	#3095: # if defined (VGEN_ENABLE_DRVDIO)
                          2892	#3096:       Dio_WriteChannel(BrsHw_Dio_ToggleCUSTOM_Channel, BrsHw_ToggleSwitch_CUSTOM & 0x01);
                          2893	#3097: # else
                          2894	#3098:       BrsHwPort_SetLevel(BRSHW_PORT_TOGGLE_CUSTOM, BrsHw_ToggleSwitch_CUSTOM & 0x01);
                          2895	#3099: # endif
                          2896	#3100:       BrsHw_ToggleSwitch_CUSTOM++;
                          2897	#3101:       break;
                          2898	#3102: #endif /*BRS_ENABLE_SUPPORT_TOGGLE_CUSTOM_PIN*/
                          2899	#3103:     default:

                                   Fri Apr 10 08:31:37 2020           Page 53
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                          2900	#3104: #if defined (BRS_OS_USECASE_BRS) && !defined (BRS_ENABLE_FBL_SUPPORT)
                          2901	#3105:       BrsMainExceptionHandler(kBrsIllegalParameter, BRSERROR_MODULE_BRSHW, (uint16)(__LINE__));
                          2902	#3106: #endif
                          2903	#3107:       break;
                          2904	#3108:   }
                          2905	#3109: }
                          2906	#3110: # if defined (BRS_ENABLE_FBL_SUPPORT)
                          2907	#3111:   #define BRS_STOP_SEC_RAM_CODE
                          2908	#3112:   #include "Brs_MemMap.h"   /* PRQA S 5087 *//* MD_MSR_19.1 */
                          2909	#3113: # endif
                          2910	#3114: #endif /*BRS_ENABLE_SUPPORT_LEDS||BRS_ENABLE_SUPPORT_TOGGLE_WD_PIN||BRS_ENABLE_SUPPORT_TOGGLE_CUSTOM_PIN*/
                          2911	#3116: /*****************************************************************************/
                          2912	#3117: /**
                          2913	#3118:  * @brief      This API is used for the BRS time measurement support to get a
                          2914	#3119:  *             default time value for all measurements with this platform to
                          2915	#3120:  *             be able to compare time measurements on different dates based
                          2916	#3121:  *             on this time result.
                          2917	#3122:  * @pre        -
                          2918	#3123:  * @param[in]  -
                          2919	#3124:  * @param[out] -
                          2920	#3125:  * @return     -
                          2921	#3126:  * @context    Function is called from TimeMeasurement
                          2922	#3127:  */
                          2923	#3128: /*****************************************************************************/
                          2924	#3129: void BrsHwTime100NOP(void)
                          2925	#3130: {
                          2926	#3131:   BrsHwDisableInterrupt();
                          2927	#3133:   BRSHWNOP10();
                          2928	#3134:   BRSHWNOP10();
                          2929	#3135:   BRSHWNOP10();
                          2930	#3136:   BRSHWNOP10();
                          2931	#3137:   BRSHWNOP10();
                          2932	#3138:   BRSHWNOP10();
                          2933	#3139:   BRSHWNOP10();
                          2934	#3140:   BRSHWNOP10();
                          2935	#3141:   BRSHWNOP10();
                          2936	#3142:   BRSHWNOP10();
                          2937	#3144:   BrsHwRestoreInterrupt();
                          2938	#3145: }
                          2939	#3147: #if !defined (BRS_OS_USECASE_BRS)
                          2940	#3148: # if defined (BRSASR_ENABLE_SAFECTXSUPPORT)
                          2941	#3149: /*****************************************************************/
                          2942	#3150: /* WRAPPER FOR OLD DRVLIN IMPLEMENTATIONS (previous to MSR4 R11) */
                          2943	#3151: /*****************************************************************/
                          2944	#3152: # if defined (VGEN_ENABLE_LIN_DRV)
                          2945	#3153: #  if !defined (Lin_GetHardwareBaseAdressOfChannelConfig)
                          2946	#3154:   #define Lin_GetChannelConfigIdxOfChannelHw(ch) ch
                          2947	#3155:   #define Lin_GetHardwareBaseAdressOfChannelConfig(ch) (uint32*)Lin_HardwareBaseAdress[ch]
                          2948	#3156: #  endif
                          2949	#3157: # endif
                          2950	#3158: /*****************************************************************/
                          2951	#3159: /* WRAPPER FOR OLD DRVCAN IMPLEMENTATIONS (previous to MSR4 R11) */
                          2952	#3160: /*****************************************************************/
                          2953	#3161: # if defined (VGEN_ENABLE_CAN_DRV)
                          2954	#3162: #  if !defined (Can_HwChannelData)
                          2955	#3163:   #define Can_HwChannelData CanHwChannelData

                                   Fri Apr 10 08:31:37 2020           Page 54
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                          2956	#3164:   #define BaseAddressOfHwChannelData CanBaseAddress
                          2957	#3165: #  endif
                          2958	#3166: # endif
                          2959	#3168: /*****************************************************************************/
                          2960	#3169: /**
                          2961	#3170:  * @brief      This API is used to enable hardware access in untrusted mode
                          2962	#3171:  * @pre        -
                          2963	#3172:  * @param[in]  -
                          2964	#3173:  * @param[out] -
                          2965	#3174:  * @return     -
                          2966	#3175:  * @context    Function is called from BrsAsrInitBsw
                          2967	#3176:  */
                          2968	#3177: /*****************************************************************************/
                          2969	#3178: void BrsHw_EnableHwAccess(void)
                          2970	#3179: {
                          2971	#3180: # if defined (BRSHW_USERMODE_ACCESS_GROUP_A) || defined (BRSHW_USERMODE_ACCESS_GROUP_A1) || defined (BRSHW_USERMODE_ACCESS_GROUP_C)
                          2972	#3181:   /* **************************************************** */
                          2973	#3182:   /* UAA Bits of peripherals, to allow access in UserMode */
                          2974	#3183:   /* **************************************************** */
                          2975	#3184:   *((volatile uint32*)(SIU_BASE_ADDR + 0x3FFC)) = 0x00800000;   /* set UAA for Port to enable write to GPDO (SIUL) registers in UserMode */
                          2976	#3186: #  if defined (BRSHW_TIMER_GROUP_A)
                          2977	#3187:   *((volatile uint32*)(BRSHW_TIMER_GROUP_A + 0x3FFC)) = 0x00800000;   /* set UAA-bit for PIT to enable write in usermode */
                          2978	#3188: #  elif defined (BRSHW_TIMER_GROUP_B)
                          2979	#3189:   *((volatile uint32*)(EMIOS_BASE_ADDR + 0x3FFC)) = 0x00800000; /* set UAA-bit for eMIOS to enable write in usermode */
                          2980	#3190: #  endif
                          2981	#3192: #  if defined (VGEN_ENABLE_CAN_DRV)
                          2982	#3193: #   if defined (kCanPhysToLogChannelIndex_0)
                          2983	#3194:   *((volatile uint32*)(Can_HwChannelData[kCanPhysToLogChannelIndex_0].BaseAddressOfHwChannelData + 0x3FFC)) = 0x00800000; /* set UAA-bit for FlexCan channel 0 to enable write in usermode */
                          2984	#3195: #   endif
                          2985	#3196: #   if defined (kCanPhysToLogChannelIndex_1)
                          2986	#3197:   *((volatile uint32*)(Can_HwChannelData[kCanPhysToLogChannelIndex_1].BaseAddressOfHwChannelData + 0x3FFC)) = 0x00800000; /* set UAA-bit for FlexCan channel 1 to enable write in usermode */
                          2987	#3198: #   endif
                          2988	#3199: #   if defined (kCanPhysToLogChannelIndex_2)
                          2989	#3200:   *((volatile uint32*)(Can_HwChannelData[kCanPhysToLogChannelIndex_2].BaseAddressOfHwChannelData + 0x3FFC)) = 0x00800000; /* set UAA-bit for FlexCan channel 2 to enable write in usermode */
                          2990	#3201: #   endif
                          2991	#3202: #   if defined (kCanPhysToLogChannelIndex_3)
                          2992	#3203:   *((volatile uint32*)(Can_HwChannelData[kCanPhysToLogChannelIndex_3].BaseAddressOfHwChannelData + 0x3FFC)) = 0x00800000; /* set UAA-bit for FlexCan channel 3 to enable write in usermode */
                          2993	#3204: #   endif
                          2994	#3205: #  endif /*VGEN_ENABLE_CAN_DRV*/
                          2995	#3207: #  if defined (VGEN_ENABLE_LIN_DRV)
                          2996	#3208: #   if defined (LIN_ENABLE_HARDWARE_INTERFACE_0)
                          2997	#3209:   *((volatile uint32*)(Lin_GetHardwareBaseAdressOfChannelConfig(Lin_GetChannelConfigIdxOfChannelHw(0)) + 0x3FFC)) = 0x00800000; /* set UAA-bit for LinFlex0 to enable write in usermode */
                          2998	#3210: #   endif
                          2999	#3211: #   if defined (LIN_ENABLE_HARDWARE_INTERFACE_1)
                          3000	#3212:   *((volatile uint32*)(Lin_GetHardwareBaseAdressOfChannelConfig(Lin_GetChannelConfigIdxOfChannelHw(1)) + 0x3FFC)) = 0x00800000; /* set UAA-bit for LinFlex1 to enable write in usermode */
                          3001	#3213: #   endif
                          3002	#3214: #   if defined (LIN_ENABLE_HARDWARE_INTERFACE_2)
                          3003	#3215:   *((volatile uint32*)(Lin_GetHardwareBaseAdressOfChannelConfig(Lin_GetChannelConfigIdxOfChannelHw(2)) + 0x3FFC)) = 0x00800000; /* set UAA-bit for LinFlex2 to enable write in usermode */
                          3004	#3216: #   endif
                          3005	#3217: #   if defined (LIN_ENABLE_HARDWARE_INTERFACE_3)
                          3006	#3218:   *((volatile uint32*)(Lin_GetHardwareBaseAdressOfChannelConfig(Lin_GetChannelConfigIdxOfChannelHw(3)) + 0x3FFC)) = 0x00800000; /* set UAA-bit for LinFlex3 to enable write in usermode */
                          3007	#3219: #   endif
                          3008	#3220: #  endif /*VGEN_ENABLE_LIN_DRV*/
                          3009	#3222: #  if defined (VGEN_ENABLE_DRVFR__BASEASR)
                          3010	#3223:   *((volatile uint32*)(FR_VCC_REG_START_ADDR + 0x3FFC)) = 0x00800000; /* set UAA-bit for FlexRay to enable write in usermode */
                          3011	#3224: #  endif /*VGEN_ENABLE_DRVFR__BASEASR*/

                                   Fri Apr 10 08:31:37 2020           Page 55
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                          3012	#3226: #  if defined (VGEN_ENABLE_DRVETH__BASEASR)
                          3013	#3227:   {
                          3014	#3228:     /* ENET seems to require at least one supervisor mode access before accessing registers in user mode */
                          3015	#3229:     volatile uint32 ENET_EIR_VALUE = ENET_EIR;
                          3016	#3230:   }
                          3017	#3231:   *((volatile uint32*)(ENET_BASE + 0x3FFC)) = 0x00800000; /* set UAA-bit for ENET to enable write in user mode */
                          3018	#3232: #  endif /*VGEN_ENABLE_DRVETH__BASEASR*/
                          3019	#3234: #  if defined (VGEN_ENABLE_DRVFLS)
                          3020	#3235:   *((volatile uint32*)(FLASH0_BASE + 0x3FFC)) = 0x00800000; /* set UAA-bit for Flash0 to enable write in usermode */
                          3021	#3236: #  endif /*VGEN_ENABLE_DRVFLS*/
                          3022	#3238: #  if defined (VGEN_ENABLE_DRVSPI)
                          3023	#3239: #   if defined (DSPI0_BASE)
                          3024	#3240:   *((volatile uint32*)(DSPI0_BASE + 0x3FFC)) = 0x00800000; /* set UAA-bit for DSPI0 to enable write in usermode */
                          3025	#3241: #   endif
                          3026	#3242:   *((volatile uint32*)(DSPI1_BASE + 0x3FFC)) = 0x00800000; /* set UAA-bit for DSPI1 to enable write in usermode */
                          3027	#3243:   *((volatile uint32*)(DSPI2_BASE + 0x3FFC)) = 0x00800000; /* set UAA-bit for DSPI2 to enable write in usermode */
                          3028	#3244: #   if defined (DSPI3_BASE)
                          3029	#3245:   *((volatile uint32*)(DSPI3_BASE + 0x3FFC)) = 0x00800000; /* set UAA-bit for DSPI3 to enable write in usermode */
                          3030	#3246: #   endif
                          3031	#3247: #  endif /*VGEN_ENABLE_DRVSPI*/
                          3032	#3249: #  if defined (DMAMUX_0_BASE)
                          3033	#3250:   *((volatile uint32*)(DMAMUX_0_BASE + 0x3FFC)) = 0x00800000; /* set UAA-bit for DMAMUX_0 to enable write in usermode */
                          3034	#3251: #  endif
                          3035	#3252: #  if defined (DMAMUX_1_BASE)
                          3036	#3253:   *((volatile uint32*)(DMAMUX_1_BASE + 0x3FFC)) = 0x00800000; /* set UAA-bit for DMAMUX_1 to enable write in usermode */
                          3037	#3254: #  endif
                          3038	#3256: # endif /*BRSHW_USERMODE_ACCESS_GROUP_A/A1/C*/
                          3039	#3258: # if defined (BRSHW_USERMODE_ACCESS_GROUP_B) || defined (BRSHW_USERMODE_ACCESS_GROUP_C)
                          3040	#3259:   /* **************************************************** */
                          3041	#3260:   /* UAA Bits of peripherals, to allow access in UserMode */
                          3042	#3261:   /* **************************************************** */
                          3043	#3262: #  if defined (VGEN_ENABLE_DRVMCU)
                          3044	#3263:   *((volatile uint32*)(MC_ME_BASE + 0x3FFC)) = 0x00800000; /* set UAA-bit for MC_ME to enable write in usermode */
                          3045	#3264: #  endif /*VGEN_ENABLE_DRVMCU*/
                          3046	#3265: # endif /*BRSHW_USERMODE_ACCESS_GROUP_B/C*/
                          3047	#3267: # if defined (BRSHW_USERMODE_ACCESS_GROUP_A) || defined (BRSHW_USERMODE_ACCESS_GROUP_A1) || defined (BRSHW_USERMODE_ACCESS_GROUP_B) || defined (BRSHW_USERMODE_ACCESS_GROUP_C)
                          3048	#3268:   /* *************************************************************** */
                          3049	#3269:   /* PACR/OPACR Register of peripherals, to allow access in UserMode */
                          3050	#3270:   /* *************************************************************** */
                          3051	#3271:   O_PACR_REGISTER_SIUL_ADDR &= O_PACR_REGISTER_SIUL_VALUE; /* set OPACR-Register to enable read/write access to SIUL in usermode */
                          3052	#3272:   O_PACR_REGISTER_PIT_ADDR  &= O_PACR_REGISTER_PIT_VALUE;  /* set OPACR-Register to enable read/write access to PIT in usermode */
                          3053	#3273:   O_PACR_REGISTER_STM_ADDR  &= O_PACR_REGISTER_STM_VALUE;  /* set PACR-Register to enable read/write access to STM Timer in usermode */
                          3054	#3275: #  if defined (O_PACR_REGISTER_EDMA_ADDR)
                          3055	#3276:   O_PACR_REGISTER_EDMA_ADDR &= O_PACR_REGISTER_EDMA_VALUE;
                          3056	#3277: #  endif
                          3057	#3279: #  if defined (O_PACR_REGISTER_DMA_MUX_0_ADDR)
                          3058	#3280:   O_PACR_REGISTER_DMA_MUX_0_ADDR &= O_PACR_REGISTER_DMA_MUX_0_VALUE;
                          3059	#3281: #  endif
                          3060	#3282: #  if defined (O_PACR_REGISTER_DMA_MUX_1_ADDR)
                          3061	#3283:   O_PACR_REGISTER_DMA_MUX_1_ADDR &= O_PACR_REGISTER_DMA_MUX_1_VALUE;
                          3062	#3284: #  endif
                          3063	#3286: #  if defined (VGEN_ENABLE_CAN_DRV)
                          3064	#3287: #   if defined (kCanPhysToLogChannelIndex_0)
                          3065	#3288:   O_PACR_REGISTER_CAN0_ADDR &= O_PACR_REGISTER_CAN0_VALUE; /* set OPACR-Register to enable read/write access to FlexCAN0 in usermode */
                          3066	#3289: #   endif
                          3067	#3290: #   if defined (kCanPhysToLogChannelIndex_1)

                                   Fri Apr 10 08:31:37 2020           Page 56
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                          3068	#3291:   O_PACR_REGISTER_CAN1_ADDR &= O_PACR_REGISTER_CAN1_VALUE; /* set OPACR-Register to enable read/write access to FlexCAN1 in usermode */
                          3069	#3292: #   endif
                          3070	#3293: #   if defined (kCanPhysToLogChannelIndex_2)
                          3071	#3294:   O_PACR_REGISTER_CAN2_ADDR &= O_PACR_REGISTER_CAN2_VALUE; /* set OPACR-Register to enable read/write access to FlexCAN2 in usermode */
                          3072	#3295: #   endif
                          3073	#3296: #   if defined (kCanPhysToLogChannelIndex_3)
                          3074	#3297:   O_PACR_REGISTER_CAN3_ADDR &= O_PACR_REGISTER_CAN3_VALUE; /* set OPACR-Register to enable read/write access to FlexCAN3 in usermode */
                          3075	#3298: #   endif
                          3076	#3299: #  endif /*VGEN_ENABLE_CAN_DRV*/
                          3077	#3301: #  if defined (VGEN_ENABLE_LIN_DRV)
                          3078	#3302: #   if defined (LIN_ENABLE_HARDWARE_INTERFACE_0)
                          3079	#3303:   O_PACR_REGISTER_LIN0_ADDR &= O_PACR_REGISTER_LIN0_VALUE; /* set OPACR-Register to enable read/write access to LinFlex0 in usermode */
                          3080	#3304: #   endif
                          3081	#3305: #   if defined (LIN_ENABLE_HARDWARE_INTERFACE_1)
                          3082	#3306:   O_PACR_REGISTER_LIN1_ADDR &= O_PACR_REGISTER_LIN1_VALUE; /* set OPACR-Register to enable read/write access to LinFlex1 in usermode */
                          3083	#3307: #   endif
                          3084	#3308: #   if defined (LIN_ENABLE_HARDWARE_INTERFACE_2)
                          3085	#3309:   O_PACR_REGISTER_LIN2_ADDR &= O_PACR_REGISTER_LIN2_VALUE; /* set OPACR-Register to enable read/write access to LinFlex2 in usermode */
                          3086	#3310: #   endif
                          3087	#3311: #   if defined (LIN_ENABLE_HARDWARE_INTERFACE_3)
                          3088	#3312:   O_PACR_REGISTER_LIN3_ADDR &= O_PACR_REGISTER_LIN3_VALUE; /* set OPACR-Register to enable read/write access to LinFlex3 in usermode */
                          3089	#3313: #   endif
                          3090	#3314: #   if defined (LIN_ENABLE_HARDWARE_INTERFACE_4)
                          3091	#3315:   O_PACR_REGISTER_LIN4_ADDR &= O_PACR_REGISTER_LIN4_VALUE; /* set OPACR-Register to enable read/write access to LinFlex4 in usermode */
                          3092	#3316: #   endif
                          3093	#3317: #   if defined (LIN_ENABLE_HARDWARE_INTERFACE_5)
                          3094	#3318:   O_PACR_REGISTER_LIN5_ADDR &= O_PACR_REGISTER_LIN5_VALUE; /* set OPACR-Register to enable read/write access to LinFlex5 in usermode */
                          3095	#3319: #   endif
                          3096	#3320: #   if defined (LIN_ENABLE_HARDWARE_INTERFACE_6)
                          3097	#3321:   O_PACR_REGISTER_LIN6_ADDR &= O_PACR_REGISTER_LIN6_VALUE; /* set OPACR-Register to enable read/write access to LinFlex6 in usermode */
                          3098	#3322: #   endif
                          3099	#3323: #   if defined (LIN_ENABLE_HARDWARE_INTERFACE_7)
                          3100	#3324:   O_PACR_REGISTER_LIN7_ADDR &= O_PACR_REGISTER_LIN7_VALUE; /* set OPACR-Register to enable read/write access to LinFlex7 in usermode */
                          3101	#3325: #   endif
                          3102	#3326: #   if defined (LIN_ENABLE_HARDWARE_INTERFACE_8)
                          3103	#3327:   O_PACR_REGISTER_LIN8_ADDR &= O_PACR_REGISTER_LIN8_VALUE; /* set OPACR-Register to enable read/write access to LinFlex8 in usermode */
                          3104	#3328: #   endif
                          3105	#3329: #   if defined (LIN_ENABLE_HARDWARE_INTERFACE_9)
                          3106	#3330:   O_PACR_REGISTER_LIN9_ADDR &= O_PACR_REGISTER_LIN9_VALUE; /* set OPACR-Register to enable read/write access to LinFlex9 in usermode */
                          3107	#3331: #   endif
                          3108	#3332: #   if defined (LIN_ENABLE_HARDWARE_INTERFACE_10)
                          3109	#3333:   O_PACR_REGISTER_LIN10_ADDR &= O_PACR_REGISTER_LIN10_VALUE; /* set OPACR-Register to enable read/write access to LinFlex10 in usermode */
                          3110	#3334: #   endif
                          3111	#3335: #   if defined (LIN_ENABLE_HARDWARE_INTERFACE_11)
                          3112	#3336:   O_PACR_REGISTER_LIN11_ADDR &= O_PACR_REGISTER_LIN11_VALUE; /* set OPACR-Register to enable read/write access to LinFlex11 in usermode */
                          3113	#3337: #   endif
                          3114	#3338: #   if defined (LIN_ENABLE_HARDWARE_INTERFACE_12)
                          3115	#3339:   O_PACR_REGISTER_LIN12_ADDR &= O_PACR_REGISTER_LIN12_VALUE; /* set OPACR-Register to enable read/write access to LinFlex12 in usermode */
                          3116	#3340: #   endif
                          3117	#3341: #   if defined (LIN_ENABLE_HARDWARE_INTERFACE_13)
                          3118	#3342:   O_PACR_REGISTER_LIN13_ADDR &= O_PACR_REGISTER_LIN13_VALUE; /* set OPACR-Register to enable read/write access to LinFlex13 in usermode */
                          3119	#3343: #   endif
                          3120	#3344: #   if defined (LIN_ENABLE_HARDWARE_INTERFACE_14)
                          3121	#3345:   O_PACR_REGISTER_LIN14_ADDR &= O_PACR_REGISTER_LIN14_VALUE; /* set OPACR-Register to enable read/write access to LinFlex14 in usermode */
                          3122	#3346: #   endif
                          3123	#3347: #   if defined (LIN_ENABLE_HARDWARE_INTERFACE_15)

                                   Fri Apr 10 08:31:37 2020           Page 57
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                          3124	#3348:   O_PACR_REGISTER_LIN15_ADDR &= O_PACR_REGISTER_LIN15_VALUE; /* set OPACR-Register to enable read/write access to LinFlex15 in usermode */
                          3125	#3349: #   endif
                          3126	#3350: #  endif /*VGEN_ENABLE_LIN_DRV*/
                          3127	#3352: #  if defined (VGEN_ENABLE_DRVFR__BASEASR)
                          3128	#3353:   O_PACR_REGISTER_FLEXRAY0_ADDR &= O_PACR_REGISTER_FLEXRAY0_VALUE; /* set OPACR-Register to enable read/write access to FlexRay0 controller in usermode */
                          3129	#3354: #  endif /*VGEN_ENABLE_DRVFR__BASEASR*/
                          3130	#3356: #  if defined (VGEN_ENABLE_DRVETH__BASEASR)
                          3131	#3357:   O_PACR_REGISTER_ETHERNET0_ADDR &= O_PACR_REGISTER_ETHERNET0_VALUE; /* set OPACR-Register to enable read/write access to Ethernet0 controller in usermode */
                          3132	#3358: #  endif /*VGEN_ENABLE_DRVETH__BASEASR*/
                          3133	#3360: #  if defined (VGEN_ENABLE_DRVFLS)
                          3134	#3361:   O_PACR_REGISTER_FLASH0_ADDR &= O_PACR_REGISTER_FLASH0_VALUE; /* set OPACR-Register to enable read/write access to Flash0 in usermode */
                          3135	#3362: #  endif /*VGEN_ENABLE_DRVFLS*/
                          3136	#3364: #  if defined (VGEN_ENABLE_DRVSPI)
                          3137	#3365:   O_PACR_REGISTER_DSPI0_ADDR &= O_PACR_REGISTER_DSPI0_VALUE; /* set OPACR-Register to enable read/write access to DSPI0 in usermode */
                          3138	#3366:   O_PACR_REGISTER_DSPI1_ADDR &= O_PACR_REGISTER_DSPI1_VALUE; /* set OPACR-Register to enable read/write access to DSPI1 in usermode */
                          3139	#3367:   O_PACR_REGISTER_DSPI2_ADDR &= O_PACR_REGISTER_DSPI2_VALUE; /* set OPACR-Register to enable read/write access to DSPI2 in usermode */
                          3140	#3368: #   if defined (O_PACR_REGISTER_DSPI3_ADDR)
                          3141	#3369:   O_PACR_REGISTER_DSPI3_ADDR &= O_PACR_REGISTER_DSPI3_VALUE; /* set OPACR-Register to enable read/write access to DSPI3 in usermode */
                          3142	#3370: #   endif
                          3143	#3371: #  endif /*VGEN_ENABLE_DRVSPI*/
                          3144	#3373: #  if defined (VGEN_ENABLE_DRVWD)
                          3145	#3374: #   if defined (O_PACR_REGISTER_SWT0_ADDR)
                          3146	#3375:   O_PACR_REGISTER_SWT0_ADDR &= O_PACR_REGISTER_SWT0_VALUE; /* set OPACR-Register to enable read/write access to SWT0 in usermode */
                          3147	#3376: #   endif
                          3148	#3377: #   if defined (O_PACR_REGISTER_SWT1_ADDR)
                          3149	#3378:   O_PACR_REGISTER_SWT1_ADDR &= O_PACR_REGISTER_SWT1_VALUE; /* set OPACR-Register to enable read/write access to SWT1 in usermode */
                          3150	#3379: #   endif
                          3151	#3380: #   if defined (O_PACR_REGISTER_SWT2_ADDR)
                          3152	#3381:   O_PACR_REGISTER_SWT2_ADDR &= O_PACR_REGISTER_SWT2_VALUE; /* set OPACR-Register to enable read/write access to SWT2 in usermode */
                          3153	#3382: #   endif
                          3154	#3383: #  endif  /* VGEN_ENABLE_DRVWD */
                          3155	#3384: #  if defined (VGEN_ENABLE_DRVGPT)
                          3156	#3385: #   if defined (O_PACR_REGISTER_EMIOS0_ADDR)
                          3157	#3386:   O_PACR_REGISTER_EMIOS0_ADDR &= O_PACR_REGISTER_EMIOS0_VALUE; /* set OPACR-Register to enable read/write access to EMIOS0 in usermode */
                          3158	#3387: #   endif
                          3159	#3388: #   if defined (O_PACR_REGISTER_EMIOS1_ADDR)
                          3160	#3389:   O_PACR_REGISTER_EMIOS1_ADDR &= O_PACR_REGISTER_EMIOS1_VALUE; /* set OPACR-Register to enable read/write access to EMIOS1 in usermode */
                          3161	#3390: #   endif
                          3162	#3391: #  endif /* VGEN_ENABLE_DRVGPT */
                          3163	#3393: #  if defined (O_PACR_REGISTER_XBAR_0_ADDR)
                          3164	#3394:   O_PACR_REGISTER_XBAR_0_ADDR &= O_PACR_REGISTER_XBAR_0_VALUE;
                          3165	#3395: #  endif
                          3166	#3396: #  if defined (O_PACR_REGISTER_XBAR_1_ADDR)
                          3167	#3397:   O_PACR_REGISTER_XBAR_1_ADDR &= O_PACR_REGISTER_XBAR_1_VALUE;
                          3168	#3398: #  endif
                          3169	#3399: # endif /*BRSHW_USERMODE_ACCESS_GROUP_A/A1/B/C*/
                          3170	#3401: # if defined (BRSHW_USERMODE_ACCESS_GROUP_D)
                          3171	#3402:   O_PACR_REGISTER_DATA_FLASH_ADDR &= O_PACR_REGISTER_DATA_FLASH_VALUE;
                          3172	#3404: #  if defined (VGEN_ENABLE_CAN_DRV)
                          3173	#3405: #   if defined (kCanPhysToLogChannelIndex_0)
                          3174	#3406:   O_PACR_REGISTER_CAN0_ADDR &= O_PACR_REGISTER_CAN0_VALUE; /* set OPACR-Register to enable read/write access to FlexCAN0 in usermode */
                          3175	#3407: #   endif
                          3176	#3409: #   if defined (kCanPhysToLogChannelIndex_2)
                          3177	#3410:   O_PACR_REGISTER_CAN2_ADDR &= O_PACR_REGISTER_CAN2_VALUE; /* set OPACR-Register to enable read/write access to FlexCAN2 in usermode */
                          3178	#3411: #   endif
                          3179	#3413: #   if defined (kCanPhysToLogChannelIndex_1) || defined (kCanPhysToLogChannelIndex_3)

                                   Fri Apr 10 08:31:37 2020           Page 58
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                          3180	#3414:   #error "The configured CAN channel depending OPACR registers are not yet configured!"
                          3181	#3415: #   endif
                          3182	#3416: #  endif /*VGEN_ENABLE_CAN_DRV*/
                          3183	#3418: #  if defined (VGEN_ENABLE_LIN_DRV)
                          3184	#3419: #   if defined (LIN_ENABLE_HARDWARE_INTERFACE_0)
                          3185	#3420:   O_PACR_REGISTER_LIN0_ADDR &= O_PACR_REGISTER_LIN0_VALUE; /* set OPACR-Register to enable read/write access to LinFlex0 in usermode */
                          3186	#3421: #   endif
                          3187	#3422: #  endif
                          3188	#3423: # endif /*BRSHW_USERMODE_ACCESS_GROUP_D*/
                          3189	#3424: }
                          3190	#3425: # else
                          3191	#3426:   /* BrsHw_EnableHwAccess() removed by Organi, because of ALM attributes of project */
                          3192	#3427: # endif /*BRSASR_ENABLE_SAFECTXSUPPORT*/
                          3193	#3428: #endif /*!BRS_OS_USECASE_BRS*/
                          3194	#3430: /**********************************************************************************************************************
                          3195	#3431:   Interrupt handler function protoytpes
                          3196	#3432: **********************************************************************************************************************/
                          3197	#3433: #if defined (BRS_OS_USECASE_BRS) && !defined (BRS_ENABLE_FBL_SUPPORT)
                          3198	#3434: /*****************************************************************************/
                          3199	#3435: /**
                          3200	#3436:  * @brief      This error interrupt handler is used for all platform specific
                          3201	#3437:  *             core exceptions.
                          3202	#3438:  * @pre        -
                          3203	#3439:  * @param[in]  -
                          3204	#3440:  * @param[out] -
                          3205	#3441:  * @return     -
                          3206	#3442:  * @context    Function is called by core exception entries in the
                          3207	#3443:  *             interrupt vector table.
                          3208	#3444:  */
                          3209	#3445: /*****************************************************************************/
                          3210	#3446: void BrsHw_core_exception_handler(void)
                          3211	#3447: {
                          3212	#3448:   BrsMainExceptionHandler(kBrsInterruptHandlerNotInstalled, BRSERROR_MODULE_BRSHW, (uint16)0);
                          3213	#3449: }
                          3214	#3451: /*****************************************************************************/
                          3215	#3452: /**
                          3216	#3453:  * @brief      The dummy interrupt handler has to be used to fill up the
                          3217	#3454: *              interrupt vector table and to catch illegal interrupts in the
                          3218	#3455: *              BRS exception handler.
                          3219	#3456:  * @pre        A wrong IRQ setting or an other malfunction has been occured
                          3220	#3457: *              and an undefined interrupt has been triggered.
                          3221	#3458:  * @param[in]  -
                          3222	#3459:  * @param[out] -
                          3223	#3460:  * @return     -
                          3224	#3461:  * @context    Function is called by unused entries in the interrupt vector table
                          3225	#3462:  */
                          3226	#3463: /*****************************************************************************/
                          3227	#3464: /*
                          3228	#3465:  * Description: Define for Interrupt Service Routine for not expected interrupts.
                          3229	#3466:  *              This define is used to shorten the implementation effort of all interrupt service
                          3230	#3467:  *              routines, which may not happen during normal operation.
                          3231	#3468:  */
                          3232	#3469: #define BRS_DUMMY_INT(inta) \
                          3233	#3470:   void BrsHwDummyInterrupt##inta(void) \
                          3234	#3471:   { \
                          3235	#3472:     BrsMainExceptionHandler(kBrsInterruptHandlerNotInstalled, BRSERROR_MODULE_BRSHW, (uint16)(__LINE__)); \

                                   Fri Apr 10 08:31:37 2020           Page 59
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                          3236	#3473:   }
                          3237	#3475: /* Interrupt Sources 0..15 are CoreExceptions and handled separately */
                          3238	#3476: BRS_DUMMY_INT(16)
                          3239	#3477: BRS_DUMMY_INT(17)
                          3240	#3478: BRS_DUMMY_INT(18)
                          3241	#3479: BRS_DUMMY_INT(19)
                          3242	#3480: BRS_DUMMY_INT(20)
                          3243	#3481: BRS_DUMMY_INT(21)
                          3244	#3482: BRS_DUMMY_INT(22)
                          3245	#3483: BRS_DUMMY_INT(23)
                          3246	#3484: BRS_DUMMY_INT(24)
                          3247	#3485: BRS_DUMMY_INT(25)
                          3248	#3486: BRS_DUMMY_INT(26)
                          3249	#3487: BRS_DUMMY_INT(27)
                          3250	#3488: BRS_DUMMY_INT(28)
                          3251	#3489: BRS_DUMMY_INT(29)
                          3252	#3490: BRS_DUMMY_INT(30)
                          3253	#3491: BRS_DUMMY_INT(31)
                          3254	#3492: BRS_DUMMY_INT(32)
                          3255	#3493: BRS_DUMMY_INT(33)
                          3256	#3494: BRS_DUMMY_INT(34)
                          3257	#3495: BRS_DUMMY_INT(35)
                          3258	#3496: BRS_DUMMY_INT(36)
                          3259	#3497: BRS_DUMMY_INT(37)
                          3260	#3498: BRS_DUMMY_INT(38)
                          3261	#3499: BRS_DUMMY_INT(39)
                          3262	#3500: BRS_DUMMY_INT(40)
                          3263	#3501: BRS_DUMMY_INT(41)
                          3264	#3502: BRS_DUMMY_INT(42)
                          3265	#3503: BRS_DUMMY_INT(43)
                          3266	#3504: BRS_DUMMY_INT(44)
                          3267	#3505: BRS_DUMMY_INT(45)
                          3268	#3506: BRS_DUMMY_INT(46)
                          3269	#3507: BRS_DUMMY_INT(47)
                          3270	#3508: BRS_DUMMY_INT(48)
                          3271	#3509: BRS_DUMMY_INT(49)
                          3272	#3510: BRS_DUMMY_INT(50)
                          3273	#3511: BRS_DUMMY_INT(51)
                          3274	#3512: BRS_DUMMY_INT(52)
                          3275	#3513: BRS_DUMMY_INT(53)
                          3276	#3514: BRS_DUMMY_INT(54)
                          3277	#3515: BRS_DUMMY_INT(55)
                          3278	#3516: BRS_DUMMY_INT(56)
                          3279	#3517: BRS_DUMMY_INT(57)
                          3280	#3518: BRS_DUMMY_INT(58)
                          3281	#3519: BRS_DUMMY_INT(59)
                          3282	#3520: BRS_DUMMY_INT(60)
                          3283	#3521: BRS_DUMMY_INT(61)
                          3284	#3522: BRS_DUMMY_INT(62)
                          3285	#3523: BRS_DUMMY_INT(63)
                          3286	#3524: BRS_DUMMY_INT(64)
                          3287	#3525: BRS_DUMMY_INT(65)
                          3288	#3526: BRS_DUMMY_INT(66)
                          3289	#3527: BRS_DUMMY_INT(67)
                          3290	#3528: BRS_DUMMY_INT(68)
                          3291	#3529: BRS_DUMMY_INT(69)

                                   Fri Apr 10 08:31:37 2020           Page 60
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                          3292	#3530: BRS_DUMMY_INT(70)
                          3293	#3531: BRS_DUMMY_INT(71)
                          3294	#3532: BRS_DUMMY_INT(72)
                          3295	#3533: BRS_DUMMY_INT(73)
                          3296	#3534: BRS_DUMMY_INT(74)
                          3297	#3535: BRS_DUMMY_INT(75)
                          3298	#3536: BRS_DUMMY_INT(76)
                          3299	#3537: BRS_DUMMY_INT(77)
                          3300	#3538: BRS_DUMMY_INT(78)
                          3301	#3539: BRS_DUMMY_INT(79)
                          3302	#3540: BRS_DUMMY_INT(80)
                          3303	#3541: BRS_DUMMY_INT(81)
                          3304	#3542: BRS_DUMMY_INT(82)
                          3305	#3543: BRS_DUMMY_INT(83)
                          3306	#3544: BRS_DUMMY_INT(84)
                          3307	#3545: BRS_DUMMY_INT(85)
                          3308	#3546: BRS_DUMMY_INT(86)
                          3309	#3547: BRS_DUMMY_INT(87)
                          3310	#3548: BRS_DUMMY_INT(88)
                          3311	#3549: BRS_DUMMY_INT(89)
                          3312	#3550: BRS_DUMMY_INT(90)
                          3313	#3551: BRS_DUMMY_INT(91)
                          3314	#3552: BRS_DUMMY_INT(92)
                          3315	#3553: BRS_DUMMY_INT(93)
                          3316	#3554: BRS_DUMMY_INT(94)
                          3317	#3555: BRS_DUMMY_INT(95)
                          3318	#3556: BRS_DUMMY_INT(96)
                          3319	#3557: BRS_DUMMY_INT(97)
                          3320	#3558: BRS_DUMMY_INT(98)
                          3321	#3559: BRS_DUMMY_INT(99)
                          3322	#3560: BRS_DUMMY_INT(100)
                          3323	#3561: BRS_DUMMY_INT(101)
                          3324	#3562: BRS_DUMMY_INT(102)
                          3325	#3563: BRS_DUMMY_INT(103)
                          3326	#3564: BRS_DUMMY_INT(104)
                          3327	#3565: BRS_DUMMY_INT(105)
                          3328	#3566: BRS_DUMMY_INT(106)
                          3329	#3567: BRS_DUMMY_INT(107)
                          3330	#3568: BRS_DUMMY_INT(108)
                          3331	#3569: BRS_DUMMY_INT(109)
                          3332	#3570: BRS_DUMMY_INT(110)
                          3333	#3571: BRS_DUMMY_INT(111)
                          3334	#3572: BRS_DUMMY_INT(112)
                          3335	#3573: BRS_DUMMY_INT(113)
                          3336	#3574: BRS_DUMMY_INT(114)
                          3337	#3575: BRS_DUMMY_INT(115)
                          3338	#3576: BRS_DUMMY_INT(116)
                          3339	#3577: BRS_DUMMY_INT(117)
                          3340	#3578: BRS_DUMMY_INT(118)
                          3341	#3579: BRS_DUMMY_INT(119)
                          3342	#3580: BRS_DUMMY_INT(120)
                          3343	#3581: BRS_DUMMY_INT(121)
                          3344	#3582: BRS_DUMMY_INT(122)
                          3345	#3583: BRS_DUMMY_INT(123)
                          3346	#3584: BRS_DUMMY_INT(124)
                          3347	#3585: BRS_DUMMY_INT(125)

                                   Fri Apr 10 08:31:37 2020           Page 61
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                          3348	#3586: BRS_DUMMY_INT(126)
                          3349	#3587: BRS_DUMMY_INT(127)
                          3350	#3588: BRS_DUMMY_INT(128)
                          3351	#3589: BRS_DUMMY_INT(129)
                          3352	#3590: BRS_DUMMY_INT(130)
                          3353	#3591: BRS_DUMMY_INT(131)
                          3354	#3592: BRS_DUMMY_INT(132)
                          3355	#3593: BRS_DUMMY_INT(133)
                          3356	#3594: BRS_DUMMY_INT(134)
                          3357	#3595: BRS_DUMMY_INT(135)
                          3358	#3596: BRS_DUMMY_INT(136)
                          3359	#3597: BRS_DUMMY_INT(137)
                          3360	#3598: BRS_DUMMY_INT(138)
                          3361	#3599: BRS_DUMMY_INT(139)
                          3362	#3600: BRS_DUMMY_INT(140)
                          3363	#3601: BRS_DUMMY_INT(141)
                          3364	#3602: BRS_DUMMY_INT(142)
                          3365	#3603: BRS_DUMMY_INT(143)
                          3366	#3604: BRS_DUMMY_INT(144)
                          3367	#3605: BRS_DUMMY_INT(145)
                          3368	#3606: BRS_DUMMY_INT(146)
                          3369	#3607: BRS_DUMMY_INT(147)
                          3370	#3608: BRS_DUMMY_INT(148)
                          3371	#3609: BRS_DUMMY_INT(149)
                          3372	#3610: BRS_DUMMY_INT(150)
                          3373	#3611: BRS_DUMMY_INT(151)
                          3374	#3612: BRS_DUMMY_INT(152)
                          3375	#3613: BRS_DUMMY_INT(153)
                          3376	#3614: BRS_DUMMY_INT(154)
                          3377	#3615: BRS_DUMMY_INT(155)
                          3378	#3616: BRS_DUMMY_INT(156)
                          3379	#3617: BRS_DUMMY_INT(157)
                          3380	#3618: BRS_DUMMY_INT(158)
                          3381	#3619: BRS_DUMMY_INT(159)
                          3382	#3620: BRS_DUMMY_INT(160)
                          3383	#3621: BRS_DUMMY_INT(161)
                          3384	#3622: BRS_DUMMY_INT(162)
                          3385	#3623: BRS_DUMMY_INT(163)
                          3386	#3624: BRS_DUMMY_INT(164)
                          3387	#3625: BRS_DUMMY_INT(165)
                          3388	#3626: BRS_DUMMY_INT(166)
                          3389	#3627: BRS_DUMMY_INT(167)
                          3390	#3628: BRS_DUMMY_INT(168)
                          3391	#3629: BRS_DUMMY_INT(169)
                          3392	#3630: BRS_DUMMY_INT(170)
                          3393	#3631: BRS_DUMMY_INT(171)
                          3394	#3632: BRS_DUMMY_INT(172)
                          3395	#3633: BRS_DUMMY_INT(173)
                          3396	#3634: BRS_DUMMY_INT(174)
                          3397	#3635: BRS_DUMMY_INT(175)
                          3398	#3636: BRS_DUMMY_INT(176)
                          3399	#3637: BRS_DUMMY_INT(177)
                          3400	#3638: BRS_DUMMY_INT(178)
                          3401	#3639: BRS_DUMMY_INT(179)
                          3402	#3640: BRS_DUMMY_INT(180)
                          3403	#3641: BRS_DUMMY_INT(181)

                                   Fri Apr 10 08:31:37 2020           Page 62
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                          3404	#3642: BRS_DUMMY_INT(182)
                          3405	#3643: BRS_DUMMY_INT(183)
                          3406	#3644: BRS_DUMMY_INT(184)
                          3407	#3645: BRS_DUMMY_INT(185)
                          3408	#3646: BRS_DUMMY_INT(186)
                          3409	#3647: BRS_DUMMY_INT(187)
                          3410	#3648: BRS_DUMMY_INT(188)
                          3411	#3649: BRS_DUMMY_INT(189)
                          3412	#3650: BRS_DUMMY_INT(190)
                          3413	#3651: BRS_DUMMY_INT(191)
                          3414	#3652: BRS_DUMMY_INT(192)
                          3415	#3653: BRS_DUMMY_INT(193)
                          3416	#3654: BRS_DUMMY_INT(194)
                          3417	#3655: BRS_DUMMY_INT(195)
                          3418	#3656: BRS_DUMMY_INT(196)
                          3419	#3657: BRS_DUMMY_INT(197)
                          3420	#3658: BRS_DUMMY_INT(198)
                          3421	#3659: BRS_DUMMY_INT(199)
                          3422	#3660: BRS_DUMMY_INT(200)
                          3423	#3661: BRS_DUMMY_INT(201)
                          3424	#3662: BRS_DUMMY_INT(202)
                          3425	#3663: BRS_DUMMY_INT(203)
                          3426	#3664: BRS_DUMMY_INT(204)
                          3427	#3665: BRS_DUMMY_INT(205)
                          3428	#3666: BRS_DUMMY_INT(206)
                          3429	#3667: BRS_DUMMY_INT(207)
                          3430	#3668: BRS_DUMMY_INT(208)
                          3431	#3669: BRS_DUMMY_INT(209)
                          3432	#3670: BRS_DUMMY_INT(210)
                          3433	#3671: BRS_DUMMY_INT(211)
                          3434	#3672: BRS_DUMMY_INT(212)
                          3435	#3673: BRS_DUMMY_INT(213)
                          3436	#3674: BRS_DUMMY_INT(214)
                          3437	#3675: BRS_DUMMY_INT(215)
                          3438	#3676: BRS_DUMMY_INT(216)
                          3439	#3677: BRS_DUMMY_INT(217)
                          3440	#3678: BRS_DUMMY_INT(218)
                          3441	#3679: BRS_DUMMY_INT(219)
                          3442	#3680: BRS_DUMMY_INT(220)
                          3443	#3681: BRS_DUMMY_INT(221)
                          3444	#3682: BRS_DUMMY_INT(222)
                          3445	#3683: BRS_DUMMY_INT(223)
                          3446	#3684: BRS_DUMMY_INT(224)
                          3447	#3685: BRS_DUMMY_INT(225)
                          3448	#3686: BRS_DUMMY_INT(226)
                          3449	#3687: BRS_DUMMY_INT(227)
                          3450	#3688: BRS_DUMMY_INT(228)
                          3451	#3689: BRS_DUMMY_INT(229)
                          3452	#3690: BRS_DUMMY_INT(230)
                          3453	#3691: BRS_DUMMY_INT(231)
                          3454	#3692: BRS_DUMMY_INT(232)
                          3455	#3693: BRS_DUMMY_INT(233)
                          3456	#3694: BRS_DUMMY_INT(234)
                          3457	#3695: BRS_DUMMY_INT(235)
                          3458	#3696: BRS_DUMMY_INT(236)
                          3459	#3697: BRS_DUMMY_INT(237)

                                   Fri Apr 10 08:31:37 2020           Page 63
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                          3460	#3698: BRS_DUMMY_INT(238)
                          3461	#3699: BRS_DUMMY_INT(239)
                          3462	#3700: BRS_DUMMY_INT(240)
                          3463	#3701: BRS_DUMMY_INT(241)
                          3464	#3702: BRS_DUMMY_INT(242)
                          3465	#3703: BRS_DUMMY_INT(243)
                          3466	#3704: BRS_DUMMY_INT(244)
                          3467	#3705: BRS_DUMMY_INT(245)
                          3468	#3706: BRS_DUMMY_INT(246)
                          3469	#3707: BRS_DUMMY_INT(247)
                          3470	#3708: BRS_DUMMY_INT(248)
                          3471	#3709: BRS_DUMMY_INT(249)
                          3472	#3710: BRS_DUMMY_INT(250)
                          3473	#3711: BRS_DUMMY_INT(251)
                          3474	#3712: BRS_DUMMY_INT(252)
                          3475	#3713: BRS_DUMMY_INT(253)
                          3476	#3714: BRS_DUMMY_INT(254)
                          3477	#3715: BRS_DUMMY_INT(255)
                          3478	#3716: BRS_DUMMY_INT(256)
                          3479	#3717: BRS_DUMMY_INT(257)
                          3480	#3718: BRS_DUMMY_INT(258)
                          3481	#3719: BRS_DUMMY_INT(259)
                          3482	#3720: BRS_DUMMY_INT(260)
                          3483	#3721: BRS_DUMMY_INT(261)
                          3484	#3722: BRS_DUMMY_INT(262)
                          3485	#3723: BRS_DUMMY_INT(263)
                          3486	#3724: BRS_DUMMY_INT(264)
                          3487	#3725: BRS_DUMMY_INT(265)
                          3488	#3726: BRS_DUMMY_INT(266)
                          3489	#3727: BRS_DUMMY_INT(267)
                          3490	#3728: BRS_DUMMY_INT(268)
                          3491	#3729: BRS_DUMMY_INT(269)
                          3492	#3730: BRS_DUMMY_INT(270)
                          3493	#3731: BRS_DUMMY_INT(271)
                          3494	#3732: BRS_DUMMY_INT(272)
                          3495	#3733: BRS_DUMMY_INT(273)
                          3496	#3734: BRS_DUMMY_INT(274)
                          3497	#3735: BRS_DUMMY_INT(275)
                          3498	#3736: BRS_DUMMY_INT(276)
                          3499	#3737: BRS_DUMMY_INT(277)
                          3500	#3738: BRS_DUMMY_INT(278)
                          3501	#3739: BRS_DUMMY_INT(279)
                          3502	#3740: BRS_DUMMY_INT(280)
                          3503	#3741: BRS_DUMMY_INT(281)
                          3504	#3742: BRS_DUMMY_INT(282)
                          3505	#3743: BRS_DUMMY_INT(283)
                          3506	#3744: BRS_DUMMY_INT(284)
                          3507	#3745: BRS_DUMMY_INT(285)
                          3508	#3746: BRS_DUMMY_INT(286)
                          3509	#3747: BRS_DUMMY_INT(287)
                          3510	#3748: BRS_DUMMY_INT(288)
                          3511	#3749: BRS_DUMMY_INT(289)
                          3512	#3750: BRS_DUMMY_INT(290)
                          3513	#3751: BRS_DUMMY_INT(291)
                          3514	#3752: BRS_DUMMY_INT(292)
                          3515	#3753: BRS_DUMMY_INT(293)

                                   Fri Apr 10 08:31:37 2020           Page 64
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                          3516	#3754: BRS_DUMMY_INT(294)
                          3517	#3755: BRS_DUMMY_INT(295)
                          3518	#3756: BRS_DUMMY_INT(296)
                          3519	#3757: BRS_DUMMY_INT(297)
                          3520	#3758: BRS_DUMMY_INT(298)
                          3521	#3759: BRS_DUMMY_INT(299)
                          3522	#3760: BRS_DUMMY_INT(300)
                          3523	#3761: BRS_DUMMY_INT(301)
                          3524	#3762: BRS_DUMMY_INT(302)
                          3525	#3763: BRS_DUMMY_INT(303)
                          3526	#3764: BRS_DUMMY_INT(304)
                          3527	#3765: BRS_DUMMY_INT(305)
                          3528	#3766: BRS_DUMMY_INT(306)
                          3529	#3767: BRS_DUMMY_INT(307)
                          3530	#3768: BRS_DUMMY_INT(308)
                          3531	#3769: BRS_DUMMY_INT(309)
                          3532	#3770: BRS_DUMMY_INT(310)
                          3533	#3771: BRS_DUMMY_INT(311)
                          3534	#3772: BRS_DUMMY_INT(312)
                          3535	#3773: BRS_DUMMY_INT(313)
                          3536	#3774: BRS_DUMMY_INT(314)
                          3537	#3775: BRS_DUMMY_INT(315)
                          3538	#3776: BRS_DUMMY_INT(316)
                          3539	#3777: BRS_DUMMY_INT(317)
                          3540	#3778: BRS_DUMMY_INT(318)
                          3541	#3779: BRS_DUMMY_INT(319)
                          3542	#3780: BRS_DUMMY_INT(320)
                          3543	#3781: BRS_DUMMY_INT(321)
                          3544	#3782: BRS_DUMMY_INT(322)
                          3545	#3783: BRS_DUMMY_INT(323)
                          3546	#3784: BRS_DUMMY_INT(324)
                          3547	#3785: BRS_DUMMY_INT(325)
                          3548	#3786: BRS_DUMMY_INT(326)
                          3549	#3787: BRS_DUMMY_INT(327)
                          3550	#3788: BRS_DUMMY_INT(328)
                          3551	#3789: BRS_DUMMY_INT(329)
                          3552	#3790: BRS_DUMMY_INT(330)
                          3553	#3791: BRS_DUMMY_INT(331)
                          3554	#3792: BRS_DUMMY_INT(332)
                          3555	#3793: BRS_DUMMY_INT(333)
                          3556	#3794: BRS_DUMMY_INT(334)
                          3557	#3795: BRS_DUMMY_INT(335)
                          3558	#3796: BRS_DUMMY_INT(336)
                          3559	#3797: BRS_DUMMY_INT(337)
                          3560	#3798: BRS_DUMMY_INT(338)
                          3561	#3799: BRS_DUMMY_INT(339)
                          3562	#3800: BRS_DUMMY_INT(340)
                          3563	#3801: BRS_DUMMY_INT(341)
                          3564	#3802: BRS_DUMMY_INT(342)
                          3565	#3803: BRS_DUMMY_INT(343)
                          3566	#3804: BRS_DUMMY_INT(344)
                          3567	#3805: BRS_DUMMY_INT(345)
                          3568	#3806: BRS_DUMMY_INT(346)
                          3569	#3807: BRS_DUMMY_INT(347)
                          3570	#3808: BRS_DUMMY_INT(348)
                          3571	#3809: BRS_DUMMY_INT(349)

                                   Fri Apr 10 08:31:37 2020           Page 65
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                          3572	#3810: BRS_DUMMY_INT(350)
                          3573	#3811: BRS_DUMMY_INT(351)
                          3574	#3812: BRS_DUMMY_INT(352)
                          3575	#3813: BRS_DUMMY_INT(353)
                          3576	#3814: BRS_DUMMY_INT(354)
                          3577	#3815: BRS_DUMMY_INT(355)
                          3578	#3816: BRS_DUMMY_INT(356)
                          3579	#3817: BRS_DUMMY_INT(357)
                          3580	#3818: BRS_DUMMY_INT(358)
                          3581	#3819: BRS_DUMMY_INT(359)
                          3582	#3820: BRS_DUMMY_INT(360)
                          3583	#3821: BRS_DUMMY_INT(361)
                          3584	#3822: BRS_DUMMY_INT(362)
                          3585	#3823: BRS_DUMMY_INT(363)
                          3586	#3824: BRS_DUMMY_INT(364)
                          3587	#3825: BRS_DUMMY_INT(365)
                          3588	#3826: BRS_DUMMY_INT(366)
                          3589	#3827: BRS_DUMMY_INT(367)
                          3590	#3828: BRS_DUMMY_INT(368)
                          3591	#3829: BRS_DUMMY_INT(369)
                          3592	#3830: BRS_DUMMY_INT(370)
                          3593	#3831: BRS_DUMMY_INT(371)
                          3594	#3832: BRS_DUMMY_INT(372)
                          3595	#3833: BRS_DUMMY_INT(373)
                          3596	#3834: BRS_DUMMY_INT(374)
                          3597	#3835: BRS_DUMMY_INT(375)
                          3598	#3836: BRS_DUMMY_INT(376)
                          3599	#3837: BRS_DUMMY_INT(377)
                          3600	#3838: BRS_DUMMY_INT(378)
                          3601	#3839: BRS_DUMMY_INT(379)
                          3602	#3840: BRS_DUMMY_INT(380)
                          3603	#3841: BRS_DUMMY_INT(381)
                          3604	#3842: BRS_DUMMY_INT(382)
                          3605	#3843: BRS_DUMMY_INT(383)
                          3606	#3844: BRS_DUMMY_INT(384)
                          3607	#3845: BRS_DUMMY_INT(385)
                          3608	#3846: BRS_DUMMY_INT(386)
                          3609	#3847: BRS_DUMMY_INT(387)
                          3610	#3848: BRS_DUMMY_INT(388)
                          3611	#3849: BRS_DUMMY_INT(389)
                          3612	#3850: BRS_DUMMY_INT(390)
                          3613	#3851: BRS_DUMMY_INT(391)
                          3614	#3852: BRS_DUMMY_INT(392)
                          3615	#3853: BRS_DUMMY_INT(393)
                          3616	#3854: BRS_DUMMY_INT(394)
                          3617	#3855: BRS_DUMMY_INT(395)
                          3618	#3856: BRS_DUMMY_INT(396)
                          3619	#3857: BRS_DUMMY_INT(397)
                          3620	#3858: BRS_DUMMY_INT(398)
                          3621	#3859: BRS_DUMMY_INT(399)
                          3622	#3860: BRS_DUMMY_INT(400)
                          3623	#3861: BRS_DUMMY_INT(401)
                          3624	#3862: BRS_DUMMY_INT(402)
                          3625	#3863: BRS_DUMMY_INT(403)
                          3626	#3864: BRS_DUMMY_INT(404)
                          3627	#3865: BRS_DUMMY_INT(405)

                                   Fri Apr 10 08:31:37 2020           Page 66
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                          3628	#3866: BRS_DUMMY_INT(406)
                          3629	#3867: BRS_DUMMY_INT(407)
                          3630	#3868: BRS_DUMMY_INT(408)
                          3631	#3869: BRS_DUMMY_INT(409)
                          3632	#3870: BRS_DUMMY_INT(410)
                          3633	#3871: BRS_DUMMY_INT(411)
                          3634	#3872: BRS_DUMMY_INT(412)
                          3635	#3873: BRS_DUMMY_INT(413)
                          3636	#3874: BRS_DUMMY_INT(414)
                          3637	#3875: BRS_DUMMY_INT(415)
                          3638	#3876: BRS_DUMMY_INT(416)
                          3639	#3877: BRS_DUMMY_INT(417)
                          3640	#3878: BRS_DUMMY_INT(418)
                          3641	#3879: BRS_DUMMY_INT(419)
                          3642	#3880: BRS_DUMMY_INT(420)
                          3643	#3881: BRS_DUMMY_INT(421)
                          3644	#3882: BRS_DUMMY_INT(422)
                          3645	#3883: BRS_DUMMY_INT(423)
                          3646	#3884: BRS_DUMMY_INT(424)
                          3647	#3885: BRS_DUMMY_INT(425)
                          3648	#3886: BRS_DUMMY_INT(426)
                          3649	#3887: BRS_DUMMY_INT(427)
                          3650	#3888: BRS_DUMMY_INT(428)
                          3651	#3889: BRS_DUMMY_INT(429)
                          3652	#3890: BRS_DUMMY_INT(430)
                          3653	#3891: BRS_DUMMY_INT(431)
                          3654	#3892: BRS_DUMMY_INT(432)
                          3655	#3893: BRS_DUMMY_INT(433)
                          3656	#3894: BRS_DUMMY_INT(434)
                          3657	#3895: BRS_DUMMY_INT(435)
                          3658	#3896: BRS_DUMMY_INT(436)
                          3659	#3897: BRS_DUMMY_INT(437)
                          3660	#3898: BRS_DUMMY_INT(438)
                          3661	#3899: BRS_DUMMY_INT(439)
                          3662	#3900: BRS_DUMMY_INT(440)
                          3663	#3901: BRS_DUMMY_INT(441)
                          3664	#3902: BRS_DUMMY_INT(442)
                          3665	#3903: BRS_DUMMY_INT(443)
                          3666	#3904: BRS_DUMMY_INT(444)
                          3667	#3905: BRS_DUMMY_INT(445)
                          3668	#3906: BRS_DUMMY_INT(446)
                          3669	#3907: BRS_DUMMY_INT(447)
                          3670	#3908: BRS_DUMMY_INT(448)
                          3671	#3909: BRS_DUMMY_INT(449)
                          3672	#3910: BRS_DUMMY_INT(450)
                          3673	#3911: BRS_DUMMY_INT(451)
                          3674	#3912: BRS_DUMMY_INT(452)
                          3675	#3913: BRS_DUMMY_INT(453)
                          3676	#3914: BRS_DUMMY_INT(454)
                          3677	#3915: BRS_DUMMY_INT(455)
                          3678	#3916: BRS_DUMMY_INT(456)
                          3679	#3917: BRS_DUMMY_INT(457)
                          3680	#3918: BRS_DUMMY_INT(458)
                          3681	#3919: BRS_DUMMY_INT(459)
                          3682	#3920: BRS_DUMMY_INT(460)
                          3683	#3921: BRS_DUMMY_INT(461)

                                   Fri Apr 10 08:31:37 2020           Page 67
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                          3684	#3922: BRS_DUMMY_INT(462)
                          3685	#3923: BRS_DUMMY_INT(463)
                          3686	#3924: BRS_DUMMY_INT(464)
                          3687	#3925: BRS_DUMMY_INT(465)
                          3688	#3926: BRS_DUMMY_INT(466)
                          3689	#3927: BRS_DUMMY_INT(467)
                          3690	#3928: BRS_DUMMY_INT(468)
                          3691	#3929: BRS_DUMMY_INT(469)
                          3692	#3930: BRS_DUMMY_INT(470)
                          3693	#3931: BRS_DUMMY_INT(471)
                          3694	#3932: BRS_DUMMY_INT(472)
                          3695	#3933: BRS_DUMMY_INT(473)
                          3696	#3934: BRS_DUMMY_INT(474)
                          3697	#3935: BRS_DUMMY_INT(475)
                          3698	#3936: BRS_DUMMY_INT(476)
                          3699	#3937: BRS_DUMMY_INT(477)
                          3700	#3938: BRS_DUMMY_INT(478)
                          3701	#3939: BRS_DUMMY_INT(479)
                          3702	#3940: BRS_DUMMY_INT(480)
                          3703	#3941: BRS_DUMMY_INT(481)
                          3704	#3942: BRS_DUMMY_INT(482)
                          3705	#3943: BRS_DUMMY_INT(483)
                          3706	#3944: BRS_DUMMY_INT(484)
                          3707	#3945: BRS_DUMMY_INT(485)
                          3708	#3946: BRS_DUMMY_INT(486)
                          3709	#3947: BRS_DUMMY_INT(487)
                          3710	#3948: BRS_DUMMY_INT(488)
                          3711	#3949: BRS_DUMMY_INT(489)
                          3712	#3950: BRS_DUMMY_INT(490)
                          3713	#3951: BRS_DUMMY_INT(491)
                          3714	#3952: BRS_DUMMY_INT(492)
                          3715	#3953: BRS_DUMMY_INT(493)
                          3716	#3954: BRS_DUMMY_INT(494)
                          3717	#3955: BRS_DUMMY_INT(495)
                          3718	#3956: BRS_DUMMY_INT(496)
                          3719	#3957: BRS_DUMMY_INT(497)
                          3720	#3958: BRS_DUMMY_INT(498)
                          3721	#3959: BRS_DUMMY_INT(499)
                          3722	#3960: BRS_DUMMY_INT(500)
                          3723	#3961: BRS_DUMMY_INT(501)
                          3724	#3962: BRS_DUMMY_INT(502)
                          3725	#3963: BRS_DUMMY_INT(503)
                          3726	#3964: BRS_DUMMY_INT(504)
                          3727	#3965: BRS_DUMMY_INT(505)
                          3728	#3966: BRS_DUMMY_INT(506)
                          3729	#3967: BRS_DUMMY_INT(507)
                          3730	#3968: BRS_DUMMY_INT(508)
                          3731	#3969: BRS_DUMMY_INT(509)
                          3732	#3970: BRS_DUMMY_INT(510)
                          3733	#3971: BRS_DUMMY_INT(511)
                          3734	#3972: BRS_DUMMY_INT(512)
                          3735	#3973: BRS_DUMMY_INT(513)
                          3736	#3974: BRS_DUMMY_INT(514)
                          3737	#3975: BRS_DUMMY_INT(515)
                          3738	#3976: BRS_DUMMY_INT(516)
                          3739	#3977: BRS_DUMMY_INT(517)

                                   Fri Apr 10 08:31:37 2020           Page 68
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                          3740	#3978: BRS_DUMMY_INT(518)
                          3741	#3979: BRS_DUMMY_INT(519)
                          3742	#3980: BRS_DUMMY_INT(520)
                          3743	#3981: BRS_DUMMY_INT(521)
                          3744	#3982: BRS_DUMMY_INT(522)
                          3745	#3983: BRS_DUMMY_INT(523)
                          3746	#3984: BRS_DUMMY_INT(524)
                          3747	#3985: BRS_DUMMY_INT(525)
                          3748	#3986: BRS_DUMMY_INT(526)
                          3749	#3987: BRS_DUMMY_INT(527)
                          3750	#3988: BRS_DUMMY_INT(528)
                          3751	#3989: BRS_DUMMY_INT(529)
                          3752	#3990: BRS_DUMMY_INT(530)
                          3753	#3991: BRS_DUMMY_INT(531)
                          3754	#3992: BRS_DUMMY_INT(532)
                          3755	#3993: BRS_DUMMY_INT(533)
                          3756	#3994: BRS_DUMMY_INT(534)
                          3757	#3995: BRS_DUMMY_INT(535)
                          3758	#3996: BRS_DUMMY_INT(536)
                          3759	#3997: BRS_DUMMY_INT(537)
                          3760	#3998: BRS_DUMMY_INT(538)
                          3761	#3999: BRS_DUMMY_INT(539)
                          3762	#4000: BRS_DUMMY_INT(540)
                          3763	#4001: BRS_DUMMY_INT(541)
                          3764	#4002: BRS_DUMMY_INT(542)
                          3765	#4003: BRS_DUMMY_INT(543)
                          3766	#4004: BRS_DUMMY_INT(544)
                          3767	#4005: BRS_DUMMY_INT(545)
                          3768	#4006: BRS_DUMMY_INT(546)
                          3769	#4007: BRS_DUMMY_INT(547)
                          3770	#4008: BRS_DUMMY_INT(548)
                          3771	#4009: BRS_DUMMY_INT(549)
                          3772	#4010: BRS_DUMMY_INT(550)
                          3773	#4011: BRS_DUMMY_INT(551)
                          3774	#4012: BRS_DUMMY_INT(552)
                          3775	#4013: BRS_DUMMY_INT(553)
                          3776	#4014: BRS_DUMMY_INT(554)
                          3777	#4015: BRS_DUMMY_INT(555)
                          3778	#4016: BRS_DUMMY_INT(556)
                          3779	#4017: BRS_DUMMY_INT(557)
                          3780	#4018: BRS_DUMMY_INT(558)
                          3781	#4019: BRS_DUMMY_INT(559)
                          3782	#4020: BRS_DUMMY_INT(560)
                          3783	#4021: BRS_DUMMY_INT(561)
                          3784	#4022: BRS_DUMMY_INT(562)
                          3785	#4023: BRS_DUMMY_INT(563)
                          3786	#4024: BRS_DUMMY_INT(564)
                          3787	#4025: BRS_DUMMY_INT(565)
                          3788	#4026: BRS_DUMMY_INT(566)
                          3789	#4027: BRS_DUMMY_INT(567)
                          3790	#4028: BRS_DUMMY_INT(568)
                          3791	#4029: BRS_DUMMY_INT(569)
                          3792	#4030: BRS_DUMMY_INT(570)
                          3793	#4031: BRS_DUMMY_INT(571)
                          3794	#4032: BRS_DUMMY_INT(572)
                          3795	#4033: BRS_DUMMY_INT(573)

                                   Fri Apr 10 08:31:37 2020           Page 69
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                          3796	#4034: BRS_DUMMY_INT(574)
                          3797	#4035: BRS_DUMMY_INT(575)
                          3798	#4036: BRS_DUMMY_INT(576)
                          3799	#4037: BRS_DUMMY_INT(577)
                          3800	#4038: BRS_DUMMY_INT(578)
                          3801	#4039: BRS_DUMMY_INT(579)
                          3802	#4040: BRS_DUMMY_INT(580)
                          3803	#4041: BRS_DUMMY_INT(581)
                          3804	#4042: BRS_DUMMY_INT(582)
                          3805	#4043: BRS_DUMMY_INT(583)
                          3806	#4044: BRS_DUMMY_INT(584)
                          3807	#4045: BRS_DUMMY_INT(585)
                          3808	#4046: BRS_DUMMY_INT(586)
                          3809	#4047: BRS_DUMMY_INT(587)
                          3810	#4048: BRS_DUMMY_INT(588)
                          3811	#4049: BRS_DUMMY_INT(589)
                          3812	#4050: BRS_DUMMY_INT(590)
                          3813	#4051: BRS_DUMMY_INT(591)
                          3814	#4052: BRS_DUMMY_INT(592)
                          3815	#4053: BRS_DUMMY_INT(593)
                          3816	#4054: BRS_DUMMY_INT(594)
                          3817	#4055: BRS_DUMMY_INT(595)
                          3818	#4056: BRS_DUMMY_INT(596)
                          3819	#4057: BRS_DUMMY_INT(597)
                          3820	#4058: BRS_DUMMY_INT(598)
                          3821	#4059: BRS_DUMMY_INT(599)
                          3822	#4060: BRS_DUMMY_INT(600)
                          3823	#4061: BRS_DUMMY_INT(601)
                          3824	#4062: BRS_DUMMY_INT(602)
                          3825	#4063: BRS_DUMMY_INT(603)
                          3826	#4064: BRS_DUMMY_INT(604)
                          3827	#4065: BRS_DUMMY_INT(605)
                          3828	#4066: BRS_DUMMY_INT(606)
                          3829	#4067: BRS_DUMMY_INT(607)
                          3830	#4068: BRS_DUMMY_INT(608)
                          3831	#4069: BRS_DUMMY_INT(609)
                          3832	#4070: BRS_DUMMY_INT(610)
                          3833	#4071: BRS_DUMMY_INT(611)
                          3834	#4072: BRS_DUMMY_INT(612)
                          3835	#4073: BRS_DUMMY_INT(613)
                          3836	#4074: BRS_DUMMY_INT(614)
                          3837	#4075: BRS_DUMMY_INT(615)
                          3838	#4076: BRS_DUMMY_INT(616)
                          3839	#4077: BRS_DUMMY_INT(617)
                          3840	#4078: BRS_DUMMY_INT(618)
                          3841	#4079: BRS_DUMMY_INT(619)
                          3842	#4080: BRS_DUMMY_INT(620)
                          3843	#4081: BRS_DUMMY_INT(621)
                          3844	#4082: BRS_DUMMY_INT(622)
                          3845	#4083: BRS_DUMMY_INT(623)
                          3846	#4084: BRS_DUMMY_INT(624)
                          3847	#4085: BRS_DUMMY_INT(625)
                          3848	#4086: BRS_DUMMY_INT(626)
                          3849	#4087: BRS_DUMMY_INT(627)
                          3850	#4088: BRS_DUMMY_INT(628)
                          3851	#4089: BRS_DUMMY_INT(629)

                                   Fri Apr 10 08:31:37 2020           Page 70
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                          3852	#4090: BRS_DUMMY_INT(630)
                          3853	#4091: BRS_DUMMY_INT(631)
                          3854	#4092: BRS_DUMMY_INT(632)
                          3855	#4093: BRS_DUMMY_INT(633)
                          3856	#4094: BRS_DUMMY_INT(634)
                          3857	#4095: BRS_DUMMY_INT(635)
                          3858	#4096: BRS_DUMMY_INT(636)
                          3859	#4097: BRS_DUMMY_INT(637)
                          3860	#4098: BRS_DUMMY_INT(638)
                          3861	#4099: BRS_DUMMY_INT(639)
                          3862	#4100: BRS_DUMMY_INT(640)
                          3863	#4101: BRS_DUMMY_INT(641)
                          3864	#4102: BRS_DUMMY_INT(642)
                          3865	#4103: BRS_DUMMY_INT(643)
                          3866	#4104: BRS_DUMMY_INT(644)
                          3867	#4105: BRS_DUMMY_INT(645)
                          3868	#4106: BRS_DUMMY_INT(646)
                          3869	#4107: BRS_DUMMY_INT(647)
                          3870	#4108: BRS_DUMMY_INT(648)
                          3871	#4109: BRS_DUMMY_INT(649)
                          3872	#4110: BRS_DUMMY_INT(650)
                          3873	#4111: BRS_DUMMY_INT(651)
                          3874	#4112: BRS_DUMMY_INT(652)
                          3875	#4113: BRS_DUMMY_INT(653)
                          3876	#4114: BRS_DUMMY_INT(654)
                          3877	#4115: BRS_DUMMY_INT(655)
                          3878	#4116: BRS_DUMMY_INT(656)
                          3879	#4117: BRS_DUMMY_INT(657)
                          3880	#4118: BRS_DUMMY_INT(658)
                          3881	#4119: BRS_DUMMY_INT(659)
                          3882	#4120: BRS_DUMMY_INT(660)
                          3883	#4121: BRS_DUMMY_INT(661)
                          3884	#4122: BRS_DUMMY_INT(662)
                          3885	#4123: BRS_DUMMY_INT(663)
                          3886	#4124: BRS_DUMMY_INT(664)
                          3887	#4125: BRS_DUMMY_INT(665)
                          3888	#4126: BRS_DUMMY_INT(666)
                          3889	#4127: BRS_DUMMY_INT(667)
                          3890	#4128: BRS_DUMMY_INT(668)
                          3891	#4129: BRS_DUMMY_INT(669)
                          3892	#4130: BRS_DUMMY_INT(670)
                          3893	#4131: BRS_DUMMY_INT(671)
                          3894	#4132: BRS_DUMMY_INT(672)
                          3895	#4133: BRS_DUMMY_INT(673)
                          3896	#4134: BRS_DUMMY_INT(674)
                          3897	#4135: BRS_DUMMY_INT(675)
                          3898	#4136: BRS_DUMMY_INT(676)
                          3899	#4137: BRS_DUMMY_INT(677)
                          3900	#4138: BRS_DUMMY_INT(678)
                          3901	#4139: BRS_DUMMY_INT(679)
                          3902	#4140: BRS_DUMMY_INT(680)
                          3903	#4141: BRS_DUMMY_INT(681)
                          3904	#4142: BRS_DUMMY_INT(682)
                          3905	#4143: BRS_DUMMY_INT(683)
                          3906	#4144: BRS_DUMMY_INT(684)
                          3907	#4145: BRS_DUMMY_INT(685)

                                   Fri Apr 10 08:31:37 2020           Page 71
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                          3908	#4146: BRS_DUMMY_INT(686)
                          3909	#4147: BRS_DUMMY_INT(687)
                          3910	#4148: BRS_DUMMY_INT(688)
                          3911	#4149: BRS_DUMMY_INT(689)
                          3912	#4150: BRS_DUMMY_INT(690)
                          3913	#4151: BRS_DUMMY_INT(691)
                          3914	#4152: BRS_DUMMY_INT(692)
                          3915	#4153: BRS_DUMMY_INT(693)
                          3916	#4154: BRS_DUMMY_INT(694)
                          3917	#4155: BRS_DUMMY_INT(695)
                          3918	#4156: BRS_DUMMY_INT(696)
                          3919	#4157: BRS_DUMMY_INT(697)
                          3920	#4158: BRS_DUMMY_INT(698)
                          3921	#4159: BRS_DUMMY_INT(699)
                          3922	#4160: BRS_DUMMY_INT(700)
                          3923	#4161: BRS_DUMMY_INT(701)
                          3924	#4162: BRS_DUMMY_INT(702)
                          3925	#4163: BRS_DUMMY_INT(703)
                          3926	#4164: BRS_DUMMY_INT(704)
                          3927	#4165: BRS_DUMMY_INT(705)
                          3928	#4166: BRS_DUMMY_INT(706)
                          3929	#4167: BRS_DUMMY_INT(707)
                          3930	#4168: BRS_DUMMY_INT(708)
                          3931	#4169: BRS_DUMMY_INT(709)
                          3932	#4170: BRS_DUMMY_INT(710)
                          3933	#4171: BRS_DUMMY_INT(711)
                          3934	#4172: BRS_DUMMY_INT(712)
                          3935	#4173: BRS_DUMMY_INT(713)
                          3936	#4174: BRS_DUMMY_INT(714)
                          3937	#4175: BRS_DUMMY_INT(715)
                          3938	#4176: BRS_DUMMY_INT(716)
                          3939	#4177: BRS_DUMMY_INT(717)
                          3940	#4178: BRS_DUMMY_INT(718)
                          3941	#4179: BRS_DUMMY_INT(719)
                          3942	#4180: BRS_DUMMY_INT(720)
                          3943	#4181: BRS_DUMMY_INT(721)
                          3944	#4182: BRS_DUMMY_INT(722)
                          3945	#4183: BRS_DUMMY_INT(723)
                          3946	#4184: BRS_DUMMY_INT(724)
                          3947	#4185: BRS_DUMMY_INT(725)
                          3948	#4186: BRS_DUMMY_INT(726)
                          3949	#4187: BRS_DUMMY_INT(727)
                          3950	#4188: BRS_DUMMY_INT(728)
                          3951	#4189: BRS_DUMMY_INT(729)
                          3952	#4190: BRS_DUMMY_INT(730)
                          3953	#4191: BRS_DUMMY_INT(731)
                          3954	#4192: BRS_DUMMY_INT(732)
                          3955	#4193: BRS_DUMMY_INT(733)
                          3956	#4194: BRS_DUMMY_INT(734)
                          3957	#4195: BRS_DUMMY_INT(735)
                          3958	#4196: BRS_DUMMY_INT(736)
                          3959	#4197: BRS_DUMMY_INT(737)
                          3960	#4198: BRS_DUMMY_INT(738)
                          3961	#4199: BRS_DUMMY_INT(739)
                          3962	#4200: BRS_DUMMY_INT(740)
                          3963	#4201: BRS_DUMMY_INT(741)

                                   Fri Apr 10 08:31:37 2020           Page 72
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                          3964	#4202: BRS_DUMMY_INT(742)
                          3965	#4203: BRS_DUMMY_INT(743)
                          3966	#4204: BRS_DUMMY_INT(744)
                          3967	#4205: BRS_DUMMY_INT(745)
                          3968	#4206: BRS_DUMMY_INT(746)
                          3969	#4207: BRS_DUMMY_INT(747)
                          3970	#4208: BRS_DUMMY_INT(748)
                          3971	#4209: BRS_DUMMY_INT(749)
                          3972	#4210: BRS_DUMMY_INT(750)
                          3973	#4211: BRS_DUMMY_INT(751)
                          3974	#4212: BRS_DUMMY_INT(752)
                          3975	#4213: BRS_DUMMY_INT(753)
                          3976	#4214: BRS_DUMMY_INT(754)
                          3977	#4215: BRS_DUMMY_INT(755)
                          3978	#4216: BRS_DUMMY_INT(756)
                          3979	#4217: BRS_DUMMY_INT(757)
                          3980	#4218: BRS_DUMMY_INT(758)
                          3981	#4219: BRS_DUMMY_INT(759)
                          3982	#4220: BRS_DUMMY_INT(760)
                          3983	#4221: BRS_DUMMY_INT(761)
                          3984	#4222: BRS_DUMMY_INT(762)
                          3985	#4223: BRS_DUMMY_INT(763)
                          3986	#4224: BRS_DUMMY_INT(764)
                          3987	#4225: BRS_DUMMY_INT(765)
                          3988	#4226: BRS_DUMMY_INT(766)
                          3989	#4227: BRS_DUMMY_INT(767)
                          3990	#4228: BRS_DUMMY_INT(768)
                          3991	#4229: BRS_DUMMY_INT(769)
                          3992	#4230: BRS_DUMMY_INT(770)
                          3993	#4231: BRS_DUMMY_INT(771)
                          3994	#4232: BRS_DUMMY_INT(772)
                          3995	#4233: BRS_DUMMY_INT(773)
                          3996	#4234: BRS_DUMMY_INT(774)
                          3997	#4235: BRS_DUMMY_INT(775)
                          3998	#4236: BRS_DUMMY_INT(776)
                          3999	#4237: BRS_DUMMY_INT(777)
                          4000	#4238: BRS_DUMMY_INT(778)
                          4001	#4239: BRS_DUMMY_INT(779)
                          4002	#4240: BRS_DUMMY_INT(780)
                          4003	#4241: BRS_DUMMY_INT(781)
                          4004	#4242: BRS_DUMMY_INT(782)
                          4005	#4243: BRS_DUMMY_INT(783)
                          4006	#4244: BRS_DUMMY_INT(784)
                          4007	#4245: BRS_DUMMY_INT(785)
                          4008	#4246: BRS_DUMMY_INT(786)
                          4009	#4247: BRS_DUMMY_INT(787)
                          4010	#4248: BRS_DUMMY_INT(788)
                          4011	#4249: BRS_DUMMY_INT(789)
                          4012	#4250: BRS_DUMMY_INT(790)
                          4013	#4251: BRS_DUMMY_INT(791)
                          4014	#4252: BRS_DUMMY_INT(792)
                          4015	#4253: BRS_DUMMY_INT(793)
                          4016	#4254: BRS_DUMMY_INT(794)
                          4017	#4255: BRS_DUMMY_INT(795)
                          4018	#4256: BRS_DUMMY_INT(796)
                          4019	#4257: BRS_DUMMY_INT(797)

                                   Fri Apr 10 08:31:37 2020           Page 73
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                          4020	#4258: BRS_DUMMY_INT(798)
                          4021	#4259: BRS_DUMMY_INT(799)
                          4022	#4260: BRS_DUMMY_INT(800)
                          4023	#4261: BRS_DUMMY_INT(801)
                          4024	#4262: BRS_DUMMY_INT(802)
                          4025	#4263: BRS_DUMMY_INT(803)
                          4026	#4264: BRS_DUMMY_INT(804)
                          4027	#4265: BRS_DUMMY_INT(805)
                          4028	#4266: BRS_DUMMY_INT(806)
                          4029	#4267: BRS_DUMMY_INT(807)
                          4030	#4268: BRS_DUMMY_INT(808)
                          4031	#4269: BRS_DUMMY_INT(809)
                          4032	#4270: BRS_DUMMY_INT(810)
                          4033	#4271: BRS_DUMMY_INT(811)
                          4034	#4272: BRS_DUMMY_INT(812)
                          4035	#4273: BRS_DUMMY_INT(813)
                          4036	#4274: BRS_DUMMY_INT(814)
                          4037	#4275: BRS_DUMMY_INT(815)
                          4038	#4276: BRS_DUMMY_INT(816)
                          4039	#4277: BRS_DUMMY_INT(817)
                          4040	#4278: BRS_DUMMY_INT(818)
                          4041	#4279: BRS_DUMMY_INT(819)
                          4042	#4280: BRS_DUMMY_INT(820)
                          4043	#4281: BRS_DUMMY_INT(821)
                          4044	#4282: BRS_DUMMY_INT(822)
                          4045	#4283: BRS_DUMMY_INT(823)
                          4046	#4284: BRS_DUMMY_INT(824)
                          4047	#4285: BRS_DUMMY_INT(825)
                          4048	#4286: BRS_DUMMY_INT(826)
                          4049	#4287: BRS_DUMMY_INT(827)
                          4050	#4288: BRS_DUMMY_INT(828)
                          4051	#4289: BRS_DUMMY_INT(829)
                          4052	#4290: BRS_DUMMY_INT(830)
                          4053	#4291: BRS_DUMMY_INT(831)
                          4054	#4292: BRS_DUMMY_INT(832)
                          4055	#4293: BRS_DUMMY_INT(833)
                          4056	#4294: BRS_DUMMY_INT(834)
                          4057	#4295: BRS_DUMMY_INT(835)
                          4058	#4296: BRS_DUMMY_INT(836)
                          4059	#4297: BRS_DUMMY_INT(837)
                          4060	#4298: BRS_DUMMY_INT(838)
                          4061	#4299: BRS_DUMMY_INT(839)
                          4062	#4300: BRS_DUMMY_INT(840)
                          4063	#4301: BRS_DUMMY_INT(841)
                          4064	#4302: BRS_DUMMY_INT(842)
                          4065	#4303: BRS_DUMMY_INT(843)
                          4066	#4304: BRS_DUMMY_INT(844)
                          4067	#4305: BRS_DUMMY_INT(845)
                          4068	#4306: BRS_DUMMY_INT(846)
                          4069	#4307: BRS_DUMMY_INT(847)
                          4070	#4308: BRS_DUMMY_INT(848)
                          4071	#4309: BRS_DUMMY_INT(849)
                          4072	#4310: BRS_DUMMY_INT(850)
                          4073	#4311: BRS_DUMMY_INT(851)
                          4074	#4312: BRS_DUMMY_INT(852)
                          4075	#4313: BRS_DUMMY_INT(853)

                                   Fri Apr 10 08:31:37 2020           Page 74
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                          4076	#4314: BRS_DUMMY_INT(854)
                          4077	#4315: BRS_DUMMY_INT(855)
                          4078	#4316: BRS_DUMMY_INT(856)
                          4079	#4317: BRS_DUMMY_INT(857)
                          4080	#4318: BRS_DUMMY_INT(858)
                          4081	#4319: BRS_DUMMY_INT(859)
                          4082	#4320: BRS_DUMMY_INT(860)
                          4083	#4321: BRS_DUMMY_INT(861)
                          4084	#4322: BRS_DUMMY_INT(862)
                          4085	#4323: BRS_DUMMY_INT(863)
                          4086	#4324: BRS_DUMMY_INT(864)
                          4087	#4325: BRS_DUMMY_INT(865)
                          4088	#4326: BRS_DUMMY_INT(866)
                          4089	#4327: BRS_DUMMY_INT(867)
                          4090	#4328: BRS_DUMMY_INT(868)
                          4091	#4329: BRS_DUMMY_INT(869)
                          4092	#4330: BRS_DUMMY_INT(870)
                          4093	#4331: BRS_DUMMY_INT(871)
                          4094	#4332: BRS_DUMMY_INT(872)
                          4095	#4333: BRS_DUMMY_INT(873)
                          4096	#4334: BRS_DUMMY_INT(874)
                          4097	#4335: BRS_DUMMY_INT(875)
                          4098	#4336: BRS_DUMMY_INT(876)
                          4099	#4337: BRS_DUMMY_INT(877)
                          4100	#4338: BRS_DUMMY_INT(878)
                          4101	#4339: BRS_DUMMY_INT(879)
                          4102	#4340: BRS_DUMMY_INT(880)
                          4103	#4341: BRS_DUMMY_INT(881)
                          4104	#4342: BRS_DUMMY_INT(882)
                          4105	#4343: BRS_DUMMY_INT(883)
                          4106	#4344: BRS_DUMMY_INT(884)
                          4107	#4345: BRS_DUMMY_INT(885)
                          4108	#4346: BRS_DUMMY_INT(886)
                          4109	#4347: BRS_DUMMY_INT(887)
                          4110	#4348: BRS_DUMMY_INT(888)
                          4111	#4349: BRS_DUMMY_INT(889)
                          4112	#4350: BRS_DUMMY_INT(890)
                          4113	#4351: BRS_DUMMY_INT(891)
                          4114	#4352: BRS_DUMMY_INT(892)
                          4115	#4353: BRS_DUMMY_INT(893)
                          4116	#4354: BRS_DUMMY_INT(894)
                          4117	#4355: BRS_DUMMY_INT(895)
                          4118	#4356: BRS_DUMMY_INT(896)
                          4119	#4357: BRS_DUMMY_INT(897)
                          4120	#4358: BRS_DUMMY_INT(898)
                          4121	#4359: BRS_DUMMY_INT(899)
                          4122	#4360: BRS_DUMMY_INT(900)
                          4123	#4361: BRS_DUMMY_INT(901)
                          4124	#4362: BRS_DUMMY_INT(902)
                          4125	#4363: BRS_DUMMY_INT(903)
                          4126	#4364: BRS_DUMMY_INT(904)
                          4127	#4365: BRS_DUMMY_INT(905)
                          4128	#4366: BRS_DUMMY_INT(906)
                          4129	#4367: BRS_DUMMY_INT(907)
                          4130	#4368: BRS_DUMMY_INT(908)
                          4131	#4369: BRS_DUMMY_INT(909)

                                   Fri Apr 10 08:31:37 2020           Page 75
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                          4132	#4370: BRS_DUMMY_INT(910)
                          4133	#4371: BRS_DUMMY_INT(911)
                          4134	#4372: BRS_DUMMY_INT(912)
                          4135	#4373: BRS_DUMMY_INT(913)
                          4136	#4374: BRS_DUMMY_INT(914)
                          4137	#4375: BRS_DUMMY_INT(915)
                          4138	#4376: BRS_DUMMY_INT(916)
                          4139	#4377: BRS_DUMMY_INT(917)
                          4140	#4378: BRS_DUMMY_INT(918)
                          4141	#4379: BRS_DUMMY_INT(919)
                          4142	#4380: BRS_DUMMY_INT(920)
                          4143	#4381: BRS_DUMMY_INT(921)
                          4144	#4382: BRS_DUMMY_INT(922)
                          4145	#4383: BRS_DUMMY_INT(923)
                          4146	#4384: BRS_DUMMY_INT(924)
                          4147	#4385: BRS_DUMMY_INT(925)
                          4148	#4386: BRS_DUMMY_INT(926)
                          4149	#4387: BRS_DUMMY_INT(927)
                          4150	#4388: BRS_DUMMY_INT(928)
                          4151	#4389: BRS_DUMMY_INT(929)
                          4152	#4390: BRS_DUMMY_INT(930)
                          4153	#4391: BRS_DUMMY_INT(931)
                          4154	#4392: BRS_DUMMY_INT(932)
                          4155	#4393: BRS_DUMMY_INT(933)
                          4156	#4394: BRS_DUMMY_INT(934)
                          4157	#4395: BRS_DUMMY_INT(935)
                          4158	#4396: BRS_DUMMY_INT(936)
                          4159	#4397: BRS_DUMMY_INT(937)
                          4160	#4398: BRS_DUMMY_INT(938)
                          4161	#4399: BRS_DUMMY_INT(939)
                          4162	#4400: BRS_DUMMY_INT(940)
                          4163	#4401: BRS_DUMMY_INT(941)
                          4164	#4402: BRS_DUMMY_INT(942)
                          4165	#4403: BRS_DUMMY_INT(943)
                          4166	#4404: BRS_DUMMY_INT(944)
                          4167	#4405: BRS_DUMMY_INT(945)
                          4168	#4406: BRS_DUMMY_INT(946)
                          4169	#4407: BRS_DUMMY_INT(947)
                          4170	#4408: BRS_DUMMY_INT(948)
                          4171	#4409: BRS_DUMMY_INT(949)
                          4172	#4410: BRS_DUMMY_INT(950)
                          4173	#4411: BRS_DUMMY_INT(951)
                          4174	#4412: BRS_DUMMY_INT(952)
                          4175	#4413: BRS_DUMMY_INT(953)
                          4176	#4414: BRS_DUMMY_INT(954)
                          4177	#4415: BRS_DUMMY_INT(955)
                          4178	#4416: BRS_DUMMY_INT(956)
                          4179	#4417: BRS_DUMMY_INT(957)
                          4180	#4418: BRS_DUMMY_INT(958)
                          4181	#4419: BRS_DUMMY_INT(959)
                          4182	#4420: BRS_DUMMY_INT(960)
                          4183	#4421: BRS_DUMMY_INT(961)
                          4184	#4422: BRS_DUMMY_INT(962)
                          4185	#4423: BRS_DUMMY_INT(963)
                          4186	#4424: BRS_DUMMY_INT(964)
                          4187	#4425: BRS_DUMMY_INT(965)

                                   Fri Apr 10 08:31:37 2020           Page 76
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                          4188	#4426: BRS_DUMMY_INT(966)
                          4189	#4427: BRS_DUMMY_INT(967)
                          4190	#4428: BRS_DUMMY_INT(968)
                          4191	#4429: BRS_DUMMY_INT(969)
                          4192	#4430: BRS_DUMMY_INT(970)
                          4193	#4431: BRS_DUMMY_INT(971)
                          4194	#4432: BRS_DUMMY_INT(972)
                          4195	#4433: BRS_DUMMY_INT(973)
                          4196	#4434: BRS_DUMMY_INT(974)
                          4197	#4435: BRS_DUMMY_INT(975)
                          4198	#4436: BRS_DUMMY_INT(976)
                          4199	#4437: BRS_DUMMY_INT(977)
                          4200	#4438: BRS_DUMMY_INT(978)
                          4201	#4439: BRS_DUMMY_INT(979)
                          4202	#4440: BRS_DUMMY_INT(980)
                          4203	#4441: BRS_DUMMY_INT(981)
                          4204	#4442: BRS_DUMMY_INT(982)
                          4205	#4443: BRS_DUMMY_INT(983)
                          4206	#4444: BRS_DUMMY_INT(984)
                          4207	#4445: BRS_DUMMY_INT(985)
                          4208	#4446: BRS_DUMMY_INT(986)
                          4209	#4447: BRS_DUMMY_INT(987)
                          4210	#4448: BRS_DUMMY_INT(988)
                          4211	#4449: BRS_DUMMY_INT(989)
                          4212	#4450: BRS_DUMMY_INT(990)
                          4213	#4451: BRS_DUMMY_INT(991)
                          4214	#4452: BRS_DUMMY_INT(992)
                          4215	#4453: BRS_DUMMY_INT(993)
                          4216	#4454: BRS_DUMMY_INT(994)
                          4217	#4455: BRS_DUMMY_INT(995)
                          4218	#4456: BRS_DUMMY_INT(996)
                          4219	#4457: BRS_DUMMY_INT(997)
                          4220	#4458: BRS_DUMMY_INT(998)
                          4221	#4459: BRS_DUMMY_INT(999)
                          4222	#4460: BRS_DUMMY_INT(1000)
                          4223	#4461: BRS_DUMMY_INT(1001)
                          4224	#4462: BRS_DUMMY_INT(1002)
                          4225	#4463: BRS_DUMMY_INT(1003)
                          4226	#4464: BRS_DUMMY_INT(1004)
                          4227	#4465: BRS_DUMMY_INT(1005)
                          4228	#4466: BRS_DUMMY_INT(1006)
                          4229	#4467: BRS_DUMMY_INT(1007)
                          4230	#4468: BRS_DUMMY_INT(1008)
                          4231	#4469: BRS_DUMMY_INT(1009)
                          4232	#4470: BRS_DUMMY_INT(1010)
                          4233	#4471: BRS_DUMMY_INT(1011)
                          4234	#4472: BRS_DUMMY_INT(1012)
                          4235	#4473: BRS_DUMMY_INT(1013)
                          4236	#4474: BRS_DUMMY_INT(1014)
                          4237	#4475: BRS_DUMMY_INT(1015)
                          4238	#4476: BRS_DUMMY_INT(1016)
                          4239	#4477: BRS_DUMMY_INT(1017)
                          4240	#4478: BRS_DUMMY_INT(1018)
                          4241	#4479: BRS_DUMMY_INT(1019)
                          4242	#4480: BRS_DUMMY_INT(1020)
                          4243	#4481: BRS_DUMMY_INT(1021)

                                   Fri Apr 10 08:31:37 2020           Page 77
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                          4244	#4482: BRS_DUMMY_INT(1022)
                          4245	#4483: BRS_DUMMY_INT(1023)
                          4246	#4485: #endif /*BRS_OS_USECASE_BRS&&!BRS_ENABLE_FBL_SUPPORT*/
                          4247	#4487: /*****************************************************************************/
                          4248	#4488: /**
                          4249	#4489:  * @brief      Initialize run mode for CPU and peripheral
                          4250	#4490:  * @pre        -
                          4251	#4491:  * @param[in]  -
                          4252	#4492:  * @param[out] -
                          4253	#4493:  * @return     -
                          4254	#4494:  * @context    at the end of BrsHwPllInitPowerOn()
                          4255	#4495:  */
                          4256	#4496: /*****************************************************************************/
                          4257		.align	1
                          4258		.align	1
                          4259	..gh.f.p.0.a.1.r.0.e.1:
                          4260		.type	..gh.f.p.0.a.1.r.0.e.1,@object
                          4261		.size	..gh.f.p.0.a.1.r.0.e.1,0
                          4262		.global	BrsHwSwitchRunMode
                          4263	BrsHwSwitchRunMode:
                          4264	#	    .bf
                          4265	.LDW21:
                          4266	#4497: void BrsHwSwitchRunMode(void)
                          4267	#4498: {
                          4268	#4499: #if defined (BRSHW_OPMODES_GROUP_A) || defined (BRSHW_OPMODES_GROUP_B)
                          4269	#4500: # if defined (BRS_DERIVATIVE_PC580000x) || defined (BRS_DERIVATIVE_PC580002x)|| defined (BRS_DERIVATIVE_PC580003x) || defined (BRS_DERIVATIVE_PC582101)
                          4270	#4501:   ME_RUN_PC(0) = (uint32)0x0000001C;    /* allow all modes to use run peripheral configuration 0 */
                          4271	#4502: # else
                          4272	#4503:   ME_ME = (uint32)0x000005FF;           /* allow usage of all modes */
0000001e 70f05800         4273		e_li	r7, -294912
00000022 700005ff         4274		e_li	r0, 1535
00000026 d207             4275		se_stw	r0, 8(r7)
                          4276	#4504:   ME_RUN_PC(0) = (uint32)0x000000FE;    /* allow all modes to use run peripheral configuration 0 */
00000028 700000fe         4277		e_li	r0, 254
0000002c 54070080         4278		e_stw	r0, 128(r7)
                          4279	#4505:   ME_LP_PC(0) = (uint32)0x00000500;     /* allow usage of peripherals in halt and stop mode */
00000030 70d058a0         4280		e_li	r6, -294752
00000034 70000500         4281		e_li	r0, 1280
00000038 d006             4282		se_stw	r0, 0(r6)
                          4283	#4506: # endif
                          4284	#4508:   ME_RUN_MC(0) |= (uint32)(0x00000020); /* enable XOSC */
0000003a cc07             4285		se_lwz	r0, 48(r7)
0000003c 65a0             4286		se_bseti	r0, 26
0000003e dc07             4287		se_stw	r0, 48(r7)
                          4288	#4509: # if defined (BRSHW_FMPLL_GROUP_A)
                          4289	#4510:   ME_RUN_MC(0) |= (uint32)(0x00000040); /* enable PLL0 */
00000040 cc07             4290		se_lwz	r0, 48(r7)
00000042 6590             4291		se_bseti	r0, 25
00000044 dc07             4292		se_stw	r0, 48(r7)
                          4293	#4511:   ME_RUN_MC(0) |= (uint32)(0x00000002); /* select system clock = PLL0 clock */
00000046 cc07             4294		se_lwz	r0, 48(r7)
00000048 65e0             4295		se_bseti	r0, 30
0000004a dc07             4296		se_stw	r0, 48(r7)
                          4297	#4512: #  if defined (BRS_DERIVATIVE_MPC5775N) || defined (BRS_DERIVATIVE_MPC5773N) || defined (BRS_DERIVATIVE_SPC574Kxx)
                          4298	#4513:   ME_CCTL(1) |= (uint16)0x0010; /* enable z4a clock during RUN0. !IMPORTANT! Do not even think about removing this line!!! */
                          4299	#4514: #  elif defined (BRS_DERIVATIVE_S32R274)

                                   Fri Apr 10 08:31:37 2020           Page 78
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                          4300	#4515:   ME_CCTL(1) |= (uint16)0x0010; /* enable z4a clock during RUN0 */
                          4301	#4516: #  if defined (BRSASR_ENABLE_OS_MULTICORESUPPORT)
                          4302	#4517:   ME_CCTL(2) |= (uint16)0x0010; /* enable z7a clock during RUN0 */
                          4303	#4518:   ME_CCTL(3) |= (uint16)0x0010; /* enable z7b clock during RUN0 */
                          4304	#4519: #  endif
                          4305	#4520: #  elif defined (BRS_DERIVATIVE_SPC574Sx)
                          4306	#4521:   ME_CCTL(0) |= (uint16)0x0010;
                          4307	#4522: #  endif
                          4308	#4523: # elif defined (BRSHW_FMPLL_GROUP_B)
                          4309	#4524:   ME_RUN_MC(0) |= (uint32)(0x00000080); /* enable IRC */
                          4310	#4525:   ME_RUN_MC(0) |= (uint32)(0x00000040); /* enable PLL0 */
                          4311	#4526:   ME_RUN_MC(0) |= (uint32)(0x00000002); /* select system clock = PLL0 clock */
                          4312	#4527: # else
                          4313	#4528:   #error "Your PLL is currently not supported in combination with BRSHW_OPMODES_GROUP_A/B!"
                          4314	#4529: # endif
                          4315	#4530:   
                          4316	#4531:   /* There is no need to switch on any peripherals, because they are assigned to run peripheral configuration 0 by default! */
                          4317	#4532: # if defined (BRS_DERIVATIVE_SPC574Kxx)
                          4318	#4533:   /* Derivate SPC574kxx: Because of unknown reason, the value of this register is set to 2 which is unexpected! */
                          4319	#4534:   /* This register should have value 0 since mode RUN0 is applied */
                          4320	#4535:   ME_PCTL(15) = 0x00;
                          4321	#4536: # endif
                          4322	#4537:   if((ME_GS & (uint32)0xf0000000) == (uint32)0x20000000)
0000004c c007             4323		se_lwz	r0, 0(r7)
0000004e 1806c3f0         4324		e_andi	r6, r0, -268435456
00000052 6220             4325		se_bgeni	r0, 2
00000054 0d06             4326		se_cmpl	r6, r0
00000056 e200             4327		se_bne	.L48
                          4328	#4538:   {
                          4329	#4539:     /* ATTENTION: If you reach this point, your ECU will never switch to the mode Run1! 
                          4330	#4540:       To resolve this issue, a reset will be performed automatically. */
                          4331	#4541:     ME_MCTL = (uint32)0x00005AF0; /* mode transition request to Reset */
                          4332	#line4541
                          4333	..lin.46275963..e4d8e537.0_1::
                          4334	.LDWlin1:
00000058 700b02f0         4335		e_li	r0, 23280
0000005c d107             4336		se_stw	r0, 4(r7)
                          4337	#4542:     ME_MCTL = (uint32)0x0000A50F; /* mode transition request to Reset */
0000005e 7014050f         4338		e_li	r0, 42255
00000062 d107             4339		se_stw	r0, 4(r7)
                          4340	#4543:     while((ME_GS & (uint32)0x08000000) == (uint32)0x08000000)
                          4341	.L50:
                          4342	#4544:     {
                          4343	#4545:       ; /* wait for mode transition has completed */
00000064 c007             4344		se_lwz	r0, 0(r7)
00000066 6640             4345		se_btsti	r0, 4
00000068 e200             4346		se_bne	.L50
                          4347	.L48:
                          4348	#4546:     }
                          4349	#4547:   }
                          4350	#4548:   ME_MCTL = (uint32)0x40005AF0; /* mode transition request to run mode 0 */
                          4351	#line4548
                          4352	..lin.46275963..e4d8e537.0_2::
                          4353	.LDWlin2:
0000006a 6210             4354		se_bgeni	r0, 1
0000006c 1c005af0         4355		e_add16i	r0, r0, 23280

                                   Fri Apr 10 08:31:37 2020           Page 79
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
00000070 d107             4356		se_stw	r0, 4(r7)
                          4357	#4549:   ME_MCTL = (uint32)0x4000A50F; /* mode transition request to run mode 0 */
00000072 7008e001         4358		e_lis	r0, 16385
00000076 1c00a50f         4359		e_add16i	r0, r0, -23281
0000007a d107             4360		se_stw	r0, 4(r7)
                          4361	#4550:   while((ME_GS & (uint32)0x08000000) == (uint32)0x08000000)
                          4362	.L53:
                          4363	#4551:   {
                          4364	#4552:     ; /* wait for mode transition has completed */
0000007c c007             4365		se_lwz	r0, 0(r7)
0000007e 6640             4366		se_btsti	r0, 4
00000080 e200             4367		se_bne	.L53
                          4368	.L56:
                          4369	#4553:   }
                          4370	#4554: # if !defined (BRS_DERIVATIVE_PC580000x) && !defined (BRS_DERIVATIVE_PC580002x) && !defined (BRS_DERIVATIVE_PC580003x) && !defined (BRS_DERIVATIVE_PC582101)
                          4371	#4555:   while((ME_GS & (uint32)0x00000020) != (uint32)0x00000020)
                          4372	#4556:   {
                          4373	#4557:     ; /* wait for XOSC on */
                          4374	#line4555
                          4375	..lin.46275963..e4d8e537.0_3::
                          4376	.LDWlin3:
00000082 c007             4377		se_lwz	r0, 0(r7)
00000084 67a0             4378		se_btsti	r0, 26
00000086 e600             4379		se_beq	.L56
                          4380	.L59:
                          4381	#4558:   }
                          4382	#4559: # endif
                          4383	#4560:   while((ME_GS & (uint32)0x00000040) != (uint32)0x00000040)
                          4384	#4561:   {
                          4385	#4562:     ; /* wait for PLL0 on */
                          4386	#line4560
                          4387	..lin.46275963..e4d8e537.0_4::
                          4388	.LDWlin4:
00000088 c007             4389		se_lwz	r0, 0(r7)
0000008a 6790             4390		se_btsti	r0, 25
0000008c e600             4391		se_beq	.L59
                          4392	#4563:   }
                          4393	#4564:   ME_IS = (uint32)0x3F;
                          4394	#line4564
                          4395	..lin.46275963..e4d8e537.0_5::
                          4396	.LDWlin5:
0000008e 4bf0             4397		se_li	r0, 63
00000090 d307             4398		se_stw	r0, 12(r7)
                          4399	#4565: #endif /*BRSHW_OPMODES_GROUP_A || BRSHW_OPMODES_GROUP_B*/
                          4400	#4566: }
                          4401	#	    .ef
                          4402	.LDW31:
00000092 0004             4403		se_blr
                          4404		.global	__ghs_eofn_BrsHwSwitchRunMode
                          4405	__ghs_eofn_BrsHwSwitchRunMode:
                          4406		.type	BrsHwSwitchRunMode,@function
                          4407		.size	BrsHwSwitchRunMode,$-BrsHwSwitchRunMode
                          4408		.align	1
                          4409	
                          4410	#function:			BrsHwSwitchRunMode
                          4411	#stack frame size:		0

                                   Fri Apr 10 08:31:37 2020           Page 80
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                          4412	#
                          4413	
                          4414		.data
                          4415		.section ".vletext", "vax"
                          4416		.vle
                          4417		.vle
                          4418	
                          4419	
                          4420		.align	1
                          4421		.align	1
                          4422	..gh.f.p.0.a.1.r.0.e.2:
                          4423		.type	..gh.f.p.0.a.1.r.0.e.2,@object
                          4424		.size	..gh.f.p.0.a.1.r.0.e.2,0
                          4425		.global	BrsHwPllInitPowerOn
                          4426	BrsHwPllInitPowerOn:
                          4427	#	    .bf
                          4428	.LDW41:
                          4429	#1109: void BrsHwPllInitPowerOn(void)
                          4430	#1110: {
                          4431	#1111: #if !defined (VGEN_ENABLE_DRVMCU)
                          4432	#1112: # if (BRS_TIMEBASE_CLOCK > BRSHW_CPU_MAX_FREQUENCY)
                          4433	#1113:   #error "The selected derivative does not support frequencies above BRSHW_CPU_MAX_FREQUENCY (please find the defined value within BrsHw_DerivativeList.h)!"
                          4434	#1114: # endif
                          4435	#1116: # if defined (BRSHW_FMPLL_GROUP_A)
                          4436	#1117:   /* Route XOSC to the PLLs - IRC is default */
                          4437	#1118: #  if defined (BRSHW_OPMODES_GROUP_A)
                          4438	#1119: #   if defined (BRSHW_FMPLL_GROUP_A_1)
                          4439	#1120:   CGM_AC3_SC = (uint32)0x01000000;  /* set auxiliary clock 3 (PLL0 reference clock) source: 8-40 MHz crystal osc. */
                          4440	#1121:   if ((((SIU_MIDR1) >> 16) == 0x5777) && (((SIU_MIDR1) & 0xff) != 0))
                          4441	#1122:   {
                          4442	#1123:     /* Matterhorn Cut2 */
                          4443	#1124:     CGM_SC_DIV_RC = 0x00000001; /* System clock divider ratios will change with next update. */
                          4444	#1125:     CGM_DIV_UPD_TYPE = 0x80000000; /* System clock divider ratios updated on writing MC_CGM.DIV_UPD_TRIG. */
                          4445	#1126:     CGM_SC_DC0 = (uint32)0x80010000; /* DC0 = /3 */
                          4446	#1127:     CGM_SC_DC1 = (uint32)0x80010000; /* DC1 = /6 */
                          4447	#1128:     CGM_SC_DC2 = (uint32)0x80030000; /* set PBRIDGE_CLK DC2 = /12 */
                          4448	#1129:     CGM_SC_DC3 = (uint32)0x80010000; /* DC3 = /2 */
                          4449	#1130:     CGM_SC_DC4 = (uint32)0x80030000; /* DC4 = /4 */
                          4450	#1131:     CGM_DIV_UPD_TRIG = 0xfeedface;
                          4451	#1132:     while (CGM_DIV_UPD_STAT == 1)
                          4452	#1133:     {
                          4453	#1134:       asm("nop");
                          4454	#1135:     }
                          4455	#1137:     CGM_AC0_SC  = (uint32)0x02000000;  /* set auxiliary clock 0 to source: PLL0 */
                          4456	#1138:     CGM_AC0_DC0 = (uint32)0x80030000;  /* set PER_CLK divider (used by PIT, etc. ) = PLL0/4 ; Reason: this is the max. frequency! */
                          4457	#1139:     CGM_AC0_DC4 = (uint32)0x80030000;  /* set LIN_CLK divider (used by LIN, etc. ) = PLL0/8 = 160/4 = 40Mhz */
                          4458	#1140:     CGM_AC2_DC0 = (uint32)0x80010000;  /* set FR_CLK divider = PLL0/2 = 80 MHz *//*Manual says max Freq is 40 Mhz, so this should not work...but it does...*/
                          4459	#1141:     CGM_AC3_SC  = (uint32)0x01000000;  /* set auxiliary clock 3 (PLL0 reference clock) source: external crystal osc. (8-40 MHz) */
                          4460	#1142:     CGM_AC6_SC  = (uint32)0x02000000;  /* set auxiliary clock 6 (SYS_CLK0) source: PLL0 */
                          4461	#1143:     CGM_AC6_DC0 = (uint32)0x80010000;  /* set SYS_CLK0 divider = PLL0/2 = 80 Mhz */
                          4462	#1144:     CGM_AC7_SC  = (uint32)0x02000000;  /* set auxiliary clock 7 (SYS_CLK1) source: PLL0 */
                          4463	#1145:     CGM_AC7_DC0 = (uint32)0x80010000;  /* set SYS_CLK1 divider = PLL0/2 = 80 Mhz */
                          4464	#1146:     CGM_AC8_SC  = (uint32)0x01000000;  /* set auxiliary clock 8 (CAN_CLK)  source: XOSC */
                          4465	#1147:     CGM_AC8_DC0 = (uint32)0x80000000;  /* set auxiliary clock 8 divider to 2 (devider AC8 seems to be necessary otherwise MCAN doesn't get a clock) */
                          4466	#1148:     CGM_AC9_SC  = (uint32)0x01000000;  /* set auxiliary clock 9 (RTI_CLK)  source: XOSC */
                          4467	#1149:     CGM_AC9_DC0 = (uint32)0x80010000;  /* set auxiliary clock 9 divider to 2 */

                                   Fri Apr 10 08:31:37 2020           Page 81
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                          4468	#1150:   }
                          4469	#1151:   else if ((((SIU_MIDR1) >> 16) == 0x5746) && (((SIU_MIDR1) & 0x10) == 0x10))
                          4470	#1152:   {
                          4471	#1153:     /* McKinley Cut2: not documented in data sheet, but token from sample program "skeletonProject" */
                          4472	#1154:     CGM_SC_DIV_RC = 0x00000001; /* System clock divider ratios will change with next update. */
                          4473	#1155:     CGM_DIV_UPD_TYPE = 0x80000000; /* System clock divider ratios updated on writing MC_CGM.DIV_UPD_TRIG. */
                          4474	#1156:     /* Configure System clock dividers */
                          4475	#1157:     CGM_SC_DC0    = (uint32)0x80000000; /* DC0 = /1 fast XBAR clock  */
                          4476	#1158:     CGM_SC_DC1    = (uint32)0x80010000; /* DC1 = /2 slow XBAR clock */
                          4477	#1159:     CGM_SC_DC2    = (uint32)0x80030000; /* set PBRIDGE_CLK DC2 = /4 -> STM timer */
                          4478	#1161:     CGM_AC0_SC = (uint32)0x02000000;  /* set auxiliary clock 0 (PER_CLK)  source: PLL0 */
                          4479	#1162:     CGM_AC0_DC0= (uint32)0x80030000;  /* set PER_CLK (used by PIT, etc. ) = SYS_CLK/4 ; Reason: this is the max. frequency! */
                          4480	#1163:     CGM_AC0_DC4= (uint32)0x80010000;    /* set LIN_CLK (used by LIN, etc. ) = SYS_CLK/2 */
                          4481	#1164:     CGM_AC2_DC0 = (uint32)0x80010000;
                          4482	#1165:     CGM_AC6_SC = (uint32)0x02000000;  /* set auxiliary clock 6 (SYS_CLK0) source: PLL0 */
                          4483	#1166: #    if !(defined (BRS_DERIVATIVE_MPC5746R) || defined (BRS_DERIVATIVE_MPC5745R))
                          4484	#1167:     CGM_AC7_SC = (uint32)0x02000000;  /* set auxiliary clock 7 (SYS_CLK1) source: PLL0 */
                          4485	#1168: #    endif
                          4486	#1169:     CGM_AC8_SC = (uint32)0x01000000;  /* set auxiliary clock 8 (CAN_CLK)  source: XOSC */
                          4487	#1170:     CGM_AC8_DC0= (uint32)0x80000000;  /* set auxiliary clock 8 divider to 1 (devider AC8 seems to be necessary otherwise MCAN doesn't get a clock) */
                          4488	#1172:     CGM_AC9_SC = (uint32)0x01000000;  /* set auxiliary clock 9 (RTI_CLK)  source: XOSC */
                          4489	#1173:     CGM_AC9_DC0 = (uint32)0x80010000;
                          4490	#1175:     CGM_AC6_DC0 = (uint32) 0x80000000; /*divide PLL0 by 1*/
                          4491	#1176: #    if !(defined (BRS_DERIVATIVE_MPC5746R) || defined (BRS_DERIVATIVE_MPC5745R))
                          4492	#1177:     CGM_AC7_DC0 = (uint32) 0x80000000; /*divide PLL1 by 1*/
                          4493	#1178: #    endif
                          4494	#1180:     CGM_DIV_UPD_TRIG = 0xfeedface; /* System clock divider ratio updates triggered. */
                          4495	#1181:     while (CGM_DIV_UPD_STAT == 1)  /* Wait for System Clock Divider Update Status == 0. */
                          4496	#1182:     {
                          4497	#1183:       asm("nop");
                          4498	#1184:     }
                          4499	#1185:   }
                          4500	#1186:   else
                          4501	#1187:   {
                          4502	#1188:     CGM_SC_DC2  = (uint32)0x80030000; /* set PBRIDGE_CLK (used by ? etc. ) = SYS_CLK/4 ; Reason: this is the max. frequency! */
                          4503	#1189:     CGM_AC0_SC  = (uint32)0x02000000; /* set auxiliary clock 0 (PER_CLK)  source: PLL0 */
                          4504	#1190:     CGM_AC0_DC0 = (uint32)0x80030000; /* set PER_CLK (used by PIT, etc. ) = SYS_CLK/4 ; Reason: this is the max. frequency! */
                          4505	#1191:     CGM_AC0_DC4 = (uint32)0x80010000; /* set LIN_CLK (used by LIN, etc. ) = SYS_CLK/2 */
                          4506	#1192:     CGM_AC2_DC0 = (uint32)0x80010000; /* divide by 2 */
                          4507	#1193:     CGM_AC6_SC  = (uint32)0x02000000; /* set auxiliary clock 6 (SYS_CLK0) source: PLL0 */
                          4508	#1194: #    if !(defined (BRS_DERIVATIVE_MPC5746R) || defined (BRS_DERIVATIVE_MPC5745R))
                          4509	#1195:     /* Rainier does not have AuxClk7 */
                          4510	#1196:     CGM_AC7_SC  = (uint32)0x02000000; /* set auxiliary clock 7 (SYS_CLK1) source: PLL0 */
                          4511	#1197: #    endif
                          4512	#1198:     CGM_AC8_SC  = (uint32)0x01000000; /* set auxiliary clock 8 (CAN_CLK)  source: XOSC */
                          4513	#1199:     CGM_AC8_DC0 = (uint32)0x80000000; /* set auxiliary clock 8 divider to 1 (devider AC8 seems to be necessary otherwise MCAN doesn't get a clock) */
                          4514	#1200:     CGM_AC9_SC  = (uint32)0x01000000; /* set auxiliary clock 9 (RTI_CLK)  source: XOSC */
                          4515	#1201:     CGM_AC9_DC0 = (uint32)0x80010000;
                          4516	#1202:   }
                          4517	#1204: #   elif defined (BRSHW_FMPLL_GROUP_A_2)
                          4518	#1205:   CGM_AC4_SC = (uint32)0x01000000; /* set XOSC as clock source for PLL0*/
                          4519	#1206:   /* If the Pll is wrong, check the CGM_AC4_SC Register if the value was written */
                          4520	#1207: #    if defined (VGEN_ENABLE_DRVFR__BASEASR)
                          4521	#1208: #     if (BRS_TIMEBASE_CLOCK%80 != 0)
                          4522	#1209:   #error Flexray needs an 80 MHz clock. Please adjust PLL0 (TIMEBASE_CLOCK) and CGM_AC2_DC0 divider accordingly.
                          4523	#1210: #     else

                                   Fri Apr 10 08:31:37 2020           Page 82
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                          4524	#1211:   CGM_AC2_DC0 =
                          4525	#1212:     (0x1                       <<31U) | /* Bit 0:     DE - Divider Enable */
                          4526	#1213:     ((BRS_TIMEBASE_CLOCK/80-1) <<16U);  /* Bit 12-15: DIV - Divider Division Value Divider. The resultant FlexRay clock has a period 'DIV + 1' times that of auxiliary clock 2. */
                          4527	#1214:                                         /* The source of AC2 is PLL0 by default */
                          4528	#1215: #     endif
                          4529	#1216: #    endif /*VGEN_ENABLE_DRVFR__BASEASR*/
                          4530	#1217: #    if defined (VGEN_ENABLE_LIN_DRV)
                          4531	#1218:   CGM_AC8_SC  = (uint32)0x02000000; /* set Auxiliary Clock 8 Source Control to PLL0_PHI */
                          4532	#1219:   CGM_AC8_DC0 = (uint32)0x80020000; /* enable LIN -> LIN baud rate clock 80MHz */
                          4533	#1220: #     endif
                          4534	#1222: #   elif defined (BRSHW_FMPLL_GROUP_A_3)
                          4535	#1223:   CGM_AC2_SC  = 0x01000000; /* Select PLL0 input = XOSC */
00000094 70e05fe8         4536		e_li	r7, -325656
00000098 6270             4537		se_bgeni	r0, 7
0000009a 54070058         4538		e_stw	r0, 88(r7)
                          4539	#1224:   CGM_AC3_SC  = 0x01000000; /* Select PLL1 input = XOSC */
0000009e 54070078         4540		e_stw	r0, 120(r7)
                          4541	#1225:   CGM_SC_DC0  = 0x80000000; /* System clock divider enabled, System clock = System clock source / 1 */
000000a2 6200             4542		se_bgeni	r0, 0
000000a4 d007             4543		se_stw	r0, 0(r7)
                          4544	#1226:   CGM_SC_DC1  = 0x80000000; /* IPS divider enabled, IPS clock = System clock source / 1 */
000000a6 d107             4545		se_stw	r0, 4(r7)
                          4546	#1228:   CGM_AC0_SC  = 0x02000000; /* Select peripheral clock source = PLL0 (PIT, LINflex, etc.) */
000000a8 6266             4547		se_bgeni	r6, 6
000000aa d667             4548		se_stw	r6, 24(r7)
                          4549	#1229:   CGM_AC0_DC0 = 0x80030000; /* PIT clock divider enabled, peripheral clock / 4 */
000000ac 70b0e003         4550		e_lis	r5, -32765
000000b0 d857             4551		se_stw	r5, 32(r7)
                          4552	#1231:   CGM_AC1_SC  = 0x02000000; /* Select CAN clock source = PLL0 */
000000b2 de67             4553		se_stw	r6, 56(r7)
                          4554	#1232:   CGM_AC1_DC0 = 0x80000000; /* CAN divider enabled, CAN clock = PLL0 / 1 */
000000b4 54070040         4555		e_stw	r0, 64(r7)
                          4556	#1234: #   else
                          4557	#1235:   CGM_AC3_SC = (uint32)0x01000000;  /* set auxiliary clock 3 (PLL0 reference clock) source: 8-40 MHz crystal osc. */
                          4558	#1236:   CGM_SC_DC0 = (uint32)0x80030000;  /* set PBRIDGE_CLK (used by PIT, CAN, LIN, FR, etc. ) = SYS_CLK/4 ; Reason: this is the max. frequency! */
                          4559	#1237: #    if defined (BRS_DERIVATIVE_MPC5775K)
                          4560	#1238:   CGM_AC15_SC  = (uint32)0x02000000;  /*set auxilary clock 15 to PLL0_PHI_CLK*/
                          4561	#1239:   CGM_AC15_DC0 = (uint32)0x80030000;  /*enable auxilary clock 15 and set divider to 4 --> Pll0_PHI_CLK/4 used for MCAN*/
                          4562	#1240: #    endif
                          4563	#1241: #    if defined (BRSASR_ENABLE_OS_MULTICORESUPPORT)
                          4564	#1242:      CGM_SC_DC1 = (uint32)0x80010000; /* Core1_CLK divider: 2 (same divider than Core0_CLK) */
                          4565	#1243:      CGM_SC_DC2 = (uint32)0x80010000; /* Core2_CLK divider: 2 (same divider than Core0_CLK) */
                          4566	#1244: #    endif
                          4567	#1245: #   endif /*BRSHW_FMPLL_GROUP_A_x*/
                          4568	#1246: #  endif /*BRSHW_OPMODES_GROUP_A*/
                          4569	#1248: #  if defined (BRSHW_OPMODES_GROUP_B)
                          4570	#1249:   CGM_AC3_SC  = 0x01000000; /* Select PLL0 input = XOSC */
                          4571	#1250:   CGM_AC4_SC  = 0x01000000; /* Select PLL1 input = XOSC */
                          4572	#1251:   CGM_SC_DC0  = 0x80000000; /* System clock divider enabled, System clock = System clock source / 1 */
                          4573	#1252:   CGM_SC_DC1  = 0x80010000; /* Peripheral Core 2 divider enabled, clock = System clock source / 2 */
                          4574	#1253:   CGM_SC_DC2  = 0x80030000; /* PBRIDGE clock, clock = System clock source / 4 */
                          4575	#1255:   CGM_AC0_SC  = 0x02000000; /* Select peripheral clock source = PLL0 (PIT, LINflex, etc.) */
                          4576	#1256:   CGM_AC0_DC0 = 0x80030000; /* PIT clock divider enabled, peripheral clock / 4 */
                          4577	#1258:   CGM_AC8_SC  = 0x01000000; /* Select FlexCAN clock source = PLL0 */
                          4578	#1259:   CGM_AC2_DC0 = 0x00000000; /* FLEXRAY */
                          4579	#1260: #  endif /*BRSHW_OPMODES_GROUP_B*/

                                   Fri Apr 10 08:31:37 2020           Page 83
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                          4580	#1262: #  if ((BRS_OSC_CLK < 8) || (BRS_OSC_CLK > 56) || ((BRS_OSC_CLK%8 != 0) && (BRS_OSC_CLK%10 != 0)))
                          4581	#1263:   #error "The current PLL implementation only supports quartz frequencies which are multiples of 8 or 10 MHz and the quartz must be in the range of 8 - 56 MHz! PLL will have an undefined frequency!"
                          4582	#1264: #  endif
                          4583	#1265: #  if ((BRS_TIMEBASE_CLOCK < 75) || (BRS_TIMEBASE_CLOCK > 310) || (BRS_TIMEBASE_CLOCK%5 != 0)) && (BRS_OSC_CLK%10 == 0)
                          4584	#1266:   #error "With the used quartz (divisible by 10MHz) the current PLL implementation only supports CPU frequencies in the range 75 - 310 MHz and which are multiples of 5 MHz! PLL will have an undefined frequency!"
                          4585	#1267: #  elif (((BRS_TIMEBASE_CLOCK < 75) || ((BRS_TIMEBASE_CLOCK > 127) && (BRS_TIMEBASE_CLOCK < 150)) || (BRS_TIMEBASE_CLOCK > 254) || ((BRS_TIMEBASE_CLOCK >= 150) && (BRS_TIMEBASE_CLOCK <= 254) && (BRS_TIMEBASE_CLOCK%2 != 0))) && (BRS_OSC_CLK%8 == 0) && (BRS_OSC_CLK%10 != 0))
                          4586	#1268:   #error "With the used quartz (divisible of 8MHz) the current PLL implementation only supports CPU frequencies in the range 75 - 127/150 - 254 MHz and which are multiples of 1/2 MHz! PLL will have an undefined frequency!"
                          4587	#1269: #  endif
                          4588	#1271:   /* CPU_FREQUENCY = (QUARTZ_FREQUENCY*MFD) / (PREDIV * (RFDPHI*2)) */
                          4589	#1272: #  if (BRS_TIMEBASE_CLOCK >= 75) && (BRS_TIMEBASE_CLOCK < 150) && (BRS_OSC_CLK%10 == 0)
                          4590	#1273:   #define PREDIV  BRS_OSC_CLK/10
                          4591	#1274:   #define MFD     BRS_TIMEBASE_CLOCK*8/10
                          4592	#1275:   #define RFDPHI  4*2
                          4593	#1276: #  elif (BRS_TIMEBASE_CLOCK >= 150) && (BRS_TIMEBASE_CLOCK <= 310) && (BRS_OSC_CLK%10 == 0)
                          4594	#1277:   #define PREDIV  BRS_OSC_CLK/10
                          4595	#1278:   #define MFD     BRS_TIMEBASE_CLOCK*4/10
                          4596	#1279:   #define RFDPHI  2*2
                          4597	#1280: #  elif (BRS_TIMEBASE_CLOCK >= 75) && (BRS_TIMEBASE_CLOCK <= 127) && (BRS_OSC_CLK%8 == 0)
                          4598	#1281:   #define PREDIV  BRS_OSC_CLK/8
                          4599	#1282:   #define MFD     BRS_TIMEBASE_CLOCK
                          4600	#1283:   #define RFDPHI  4*2
                          4601	#1284: #  elif (BRS_TIMEBASE_CLOCK >= 150) && (BRS_TIMEBASE_CLOCK <= 254) && (BRS_OSC_CLK%8 == 0)
                          4602	#1285:   #define PREDIV  BRS_OSC_CLK/8
                          4603	#1286:   #define MFD     BRS_TIMEBASE_CLOCK/2
                          4604	#1287:   #define RFDPHI  2*2
                          4605	#1288: #  endif
                          4606	#1290:   PLL0DV =
000000b8 7004e008         4607		e_lis	r0, 8200
000000bc 70e05908         4608		e_li	r7, -327416
000000c0 1c004040         4609		e_add16i	r0, r0, 16448
000000c4 d007             4610		se_stw	r0, 0(r7)
                          4611	#1291:     (0x4    <<27U) | /* Bit 1-4: RFDPHI1: 0x4 = Divider for PHI1 output clock (not used but 0x0 is not allowed!) */
                          4612	#1292:     (RFDPHI <<16U) | /* Bit 10-15: Divider for PHI output clock (0x00 -> invalid,0x1 ->2,0x2->4,0x3->6,...,0x3f->126) */
                          4613	#1293:     (PREDIV <<12U) | /* Bit 17-19: Input clock pre-divider (0x0-> Clock inhibit,0x1->1,...,0x7->7) */
                          4614	#1294:     (MFD    <<0U);   /* Bit 25-31: Loop multiplication factor divider (0x00-0x07->invalid ,0x08 -> 8,0x09 -> 9,...,0x7f ->127 */
                          4615	#1296: #  if defined (BRSHW_SIU_GROUP_B)
                          4616	#1297:   PLL0CR |= 0x00000300; /* Set CLKCFG to 11b -> PLL in normal mode */
                          4617	#1298:   while (!(SIU_RSR & 0x00000080UL)){}; /* Confirm that XOSC clock is stable */
                          4618	#1299:   /* (Mandatory for MPC5777C) */
                          4619	#1300:   /* Bit 0-7:   SYSDIV unlocked (0), PLL0 input = XOSC (0), PLL1 input = XOSC (0), PERCLKSEL = SYSCLK (0)*/
                          4620	#1301:   /* Bit 10-11: FMPERDIV = Divide_by_4 (bug->0b00, 0b01???) (FM_PER_CLK has to be lower than 100MHz! -> ATTENTION: bug description see below!) */
                          4621	#1302:   /* Bit 14-15: PERDIV = Divide_by_4 (0b01) (has to be Sys_clk/4 for PIT timer calculation)*/
                          4622	#1303:   /* Bit 16:    MCAN = XOSC (0)*/
                          4623	#1304:   /* Bit 18-19: SYSCLKSEL = PLL0 (0b11) */
                          4624	#1305:   /* Bit 23-31: eTPUDiv = Divide_by_2 (0), SysClkDiv = Divide_by_1 (0b100), ProgressiveClockSwitch = disabled (0) */
                          4625	#1306:   SIU_SYSCLK = 0x00013010;  /* ATTENTION: MPC5777C works only correct with FMPERDIV = 0b00 (Divide_by_2 -> FM_PER_CLK > 100MHz ?) !!!   */
                          4626	#1307:                             /* But according to the manual the prescaler has to be at least FMPERDIV = 0b01 (Divide_by_4) -> 0x00113010 */
                          4627	#1308: #  endif /*BRSHW_SIU_GROUP_B*/
                          4628	#1309: #  if defined (BRSHW_OPMODES_GROUP_NONE)
                          4629	#1310:   /* PLL0 mode changes are handled threw CLKCFG-field of PLL0CR, and not threw MC_ME mode entry module */
                          4630	#1311:   //PLL0CR &= 0xFFFFFCFF; /* Set CLKCFG to 00b -> PLL off; power down pulse */
                          4631	#1312:   while (!(PLL0SR & 0x00000004UL)){}; /* Confirm that PLL0 clock is stable */
                          4632	#1313: #  endif /*BRSHW_OPMODES_GROUP_NONE*/
                          4633	#1314: # endif /*BRSHW_FMPLL_GROUP_A*/
                          4634	#1316: # if defined (BRSHW_FMPLL_GROUP_B)
                          4635	#1317:   /* Route XOSC to the PLL's - IRC is default */

                                   Fri Apr 10 08:31:37 2020           Page 84
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                          4636	#1318:   CGM_AC5_SC = (uint32)0x01000000;  /* set auxiliary clock 5 (PLL reference clock) source: 8-40 MHz external crystal osc. (FXOSC) */
                          4637	#1319: #  if (BRS_TIMEBASE_CLOCK != 160)
                          4638	#1320:   #error "According to the MPC5748G Datasheet Rev. 2 the PLL must have the output frequency 160MHz!"
                          4639	#1321: #  endif
                          4640	#1323: #  if ((BRS_OSC_CLK < 8) || (BRS_OSC_CLK > 56) || ((BRS_OSC_CLK%8 != 0) && (BRS_OSC_CLK%10 != 0)))
                          4641	#1324:   #error "The current PLL implementation only supports quartz frequencies which are multiples of 8 or 10 MHz and the quartz must be in the range of 8 - 56 MHz! PLL will have an undefined frequency!"
                          4642	#1325: #  endif
                          4643	#1326: #  if ((BRS_TIMEBASE_CLOCK < 75) || (BRS_TIMEBASE_CLOCK > 310) || (BRS_TIMEBASE_CLOCK%5 != 0)) && (BRS_OSC_CLK%10 == 0)
                          4644	#1327:   #error "With the used quartz (divisible by 10MHz) the current PLL implementation only supports CPU frequencies in the range 75 - 310 MHz and which are multiples of 5 MHz! PLL will have an undefined frequency!"
                          4645	#1328: #  elif (((BRS_TIMEBASE_CLOCK < 75) || ((BRS_TIMEBASE_CLOCK > 127) && (BRS_TIMEBASE_CLOCK < 150)) || (BRS_TIMEBASE_CLOCK > 254) || ((BRS_TIMEBASE_CLOCK >= 150) && (BRS_TIMEBASE_CLOCK <= 254) && (BRS_TIMEBASE_CLOCK%2 != 0))) && (BRS_OSC_CLK%8 == 0) && (BRS_OSC_CLK%10 != 0))
                          4646	#1329:   #error "With the used quartz (divisible of 8MHz) the current PLL implementation only supports CPU frequencies in the range 75 - 127/150 - 254 MHz and which are multiples of 1/2 MHz! PLL will have an undefined frequency!"
                          4647	#1330: #  endif
                          4648	#1332:   /* CPU_FREQUENCY = (QUARTZ_FREQUENCY*MFD) / (PREDIV * (2^(RFDPHI-1)) *4) */
                          4649	#1333:   /* Don't trust the datasheet.... the Out Divider is 4*(2^(RFDPHI-1)) */
                          4650	#1334: #  if (BRS_OSC_CLK%10 == 0)
                          4651	#1335:   #define PREDIV  BRS_OSC_CLK/10
                          4652	#1336:   #define MFD     BRS_TIMEBASE_CLOCK*4*1/10
                          4653	#1337:   #define RFDPHI  1                              /* /4*1 */
                          4654	#1338: #  elif (BRS_OSC_CLK%8 == 0)
                          4655	#1339:   #define PREDIV  BRS_OSC_CLK/8
                          4656	#1340:   #define MFD     BRS_TIMEBASE_CLOCK
                          4657	#1341:   #define RFDPHI  2                              /* /4*2 */
                          4658	#1342: #  endif
                          4659	#1344:   PLL0DV =
                          4660	#1345:   (0x4    <<27U) | /* Bit 1-4: RFDPHI1: 0x4 = Divider for PHI1 output clock (not used but 0x0 is not allowed!) */
                          4661	#1346:   (RFDPHI <<16U) | /* Bit 10-15: Divider for PHI output clock (0x00 -> invalid,0x1 ->2,0x2->4,0x3->6,...,0x3f->126) */
                          4662	#1347:   (PREDIV <<12U) | /* Bit 17-19: Input clock pre-divider (0x0-> Clock inhibit,0x1->1,...,0x7->7) */
                          4663	#1348:   (MFD    <<0U);   /* Bit 25-31: Loop multiplication factor divider (0x00-0x07->invalid ,0x08 -> 8,0x09 -> 9,...,0x7f ->127 */
                          4664	#1350:   PLLCAL3 = 0x09c3c000;
                          4665	#1351:   PLLFD = 0x40000000; /* SMDEN=1 (to disable SDM...) */
                          4666	#1352: # endif /*BRSHW_FMPLL_GROUP_B*/
                          4667	#1354:   BrsHwSwitchRunMode();
000000c6 e800             4668		se_b	BrsHwSwitchRunMode
                          4669	#1355: #endif /*!VGEN_ENABLE_DRVMCU*/
                          4670	#1356: }
                          4671	#	    .ef
                          4672	.LDW51:
                          4673	..lin.46275963..78333371.0_6::
                          4674	.LDWlin6:
                          4675		.global	__ghs_eofn_BrsHwPllInitPowerOn
                          4676	__ghs_eofn_BrsHwPllInitPowerOn:
                          4677		.type	BrsHwPllInitPowerOn,@function
                          4678		.size	BrsHwPllInitPowerOn,$-BrsHwPllInitPowerOn
                          4679		.align	1
                          4680	
                          4681	#function:			BrsHwPllInitPowerOn
                          4682	#stack frame size:		0
                          4683	#
                          4684	
                          4685		.data
                          4686		.section ".vletext", "vax"
                          4687		.vle
                          4688		.vle
                          4689	
                          4690	
                          4691	#1358: #if !defined (VGEN_ENABLE_DRVPORT)

                                   Fri Apr 10 08:31:37 2020           Page 85
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                          4692	#1359: /*******************************************************************************
                          4693	#1360:   Port Pin initialization helper functions for usage of BrsHw_Ports.h
                          4694	#1361: ********************************************************************************/
                          4695	#1362: /*****************************************************************************/
                          4696	#1363: /**
                          4697	#1364:  * @brief      This function configures a port pin as input pin.
                          4698	#1365:  * @pre        Port pin configuartions available within BrsHw_Ports.h and
                          4699	#1366:  *             no DrvPort used for port pin initialization.
                          4700	#1367:  * @param[in]  p - brsHw_Port_PortType, to be initialized.
                          4701	#1368:  * @param[out] -
                          4702	#1369:  * @return     -
                          4703	#1370:  * @context    Function is called from BrsHwPortInitPowerOn() and
                          4704	#1371:  *             BrsHwEvaBoardInitPowerOn() locally.
                          4705	#1372:  */
                          4706	#1373: /*****************************************************************************/
                          4707		.align	1
                          4708		.align	1
                          4709	..gh.f.p.4.a.1.r.0.e.3:
                          4710		.type	..gh.f.p.4.a.1.r.0.e.3,@object
                          4711		.size	..gh.f.p.4.a.1.r.0.e.3,0
                          4712		.global	BrsHwInitPortInput
                          4713	BrsHwInitPortInput:
                          4714	#	    .bf
                          4715	.LDW61:
                          4716	#1374: void BrsHwInitPortInput(brsHw_Port_PortType p, brsHw_Port_MultiplexedType m)
                          4717	#1375: {
                          4718	#1376: #if defined (BRSHW_SIU_GROUP_B)
                          4719	#1377:   SIU_MSCR((p.muxMSCRValue)) |= BRSHW_PCR_PIN_ASSIGNMENT_GPIO_INPUT; /* Very Strong drive, Push-pull */
                          4720	#1378:   if ((m.muxIMUXValue) <= 12)
                          4721	#1379:   {
                          4722	#1380:     switch(m.muxMUXSEL)
                          4723	#1381:     {
                          4724	#1382:       case BRSHW_PORT_SIUL_MUXSEL_0:
                          4725	#1383:         SIU_IMUX((m.muxIMUXValue)) &= (0xFFFFFFFC);
                          4726	#1384:         SIU_IMUX((m.muxIMUXValue)) |=  ((m.muxMultiplexedAlternative) << 0);
                          4727	#1385:         break;
                          4728	#1386:       case BRSHW_PORT_SIUL_MUXSEL_1:
                          4729	#1387:         SIU_IMUX((m.muxIMUXValue)) &= (0xFFFFFFF3);
                          4730	#1388:         SIU_IMUX((m.muxIMUXValue)) |=  ((m.muxMultiplexedAlternative) << 2);
                          4731	#1389:         break;
                          4732	#1390:       case BRSHW_PORT_SIUL_MUXSEL_2:
                          4733	#1391:         SIU_IMUX((m.muxIMUXValue)) &= (0xFFFFFFCF);
                          4734	#1392:         SIU_IMUX((m.muxIMUXValue)) |=  ((m.muxMultiplexedAlternative) << 4);
                          4735	#1393:         break;
                          4736	#1394:       case BRSHW_PORT_SIUL_MUXSEL_3:
                          4737	#1395:         SIU_IMUX((m.muxIMUXValue)) &= (0xFFFFFF3F);
                          4738	#1396:         SIU_IMUX((m.muxIMUXValue)) |=  ((m.muxMultiplexedAlternative) << 6);
                          4739	#1397:         break;
                          4740	#1398:       case BRSHW_PORT_SIUL_MUXSEL_4:
                          4741	#1399:         SIU_IMUX((m.muxIMUXValue)) &= (0xFFFFFCFF);
                          4742	#1400:         SIU_IMUX((m.muxIMUXValue)) |=  ((m.muxMultiplexedAlternative) << 8);
                          4743	#1401:       case BRSHW_PORT_SIUL_MUXSEL_5:
                          4744	#1402:         SIU_IMUX((m.muxIMUXValue)) &= (0xFFFFF3FF);
                          4745	#1403:         SIU_IMUX((m.muxIMUXValue)) |=  ((m.muxMultiplexedAlternative) << 10);
                          4746	#1404:         break;
                          4747	#1405:       case BRSHW_PORT_SIUL_MUXSEL_6:

                                   Fri Apr 10 08:31:37 2020           Page 86
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                          4748	#1406:         SIU_IMUX((m.muxIMUXValue)) &= (0xFFFFCFFF);
                          4749	#1407:         SIU_IMUX((m.muxIMUXValue)) |=  ((m.muxMultiplexedAlternative) << 12);
                          4750	#1408:         break;
                          4751	#1409:       case BRSHW_PORT_SIUL_MUXSEL_7:
                          4752	#1410:         SIU_IMUX((m.muxIMUXValue)) &= (0xFFFF3FFF);
                          4753	#1411:         SIU_IMUX((m.muxIMUXValue)) |=  ((m.muxMultiplexedAlternative) << 14);
                          4754	#1412:         break;
                          4755	#1413:       case BRSHW_PORT_SIUL_MUXSEL_8:
                          4756	#1414:         SIU_IMUX((m.muxIMUXValue)) &= (0xFFFCFFFF);
                          4757	#1415:         SIU_IMUX((m.muxIMUXValue)) |=  ((m.muxMultiplexedAlternative) << 16);
                          4758	#1416:         break;
                          4759	#1417:       case BRSHW_PORT_SIUL_MUXSEL_9:
                          4760	#1418:         SIU_IMUX((m.muxIMUXValue)) &= (0xFFF3FFFF);
                          4761	#1419:         SIU_IMUX((m.muxIMUXValue)) |=  ((m.muxMultiplexedAlternative) << 18);
                          4762	#1420:         break;          
                          4763	#1421:       case BRSHW_PORT_SIUL_MUXSEL_10:
                          4764	#1422:         SIU_IMUX((m.muxIMUXValue)) &= (0xFFCFFFFF);
                          4765	#1423:         SIU_IMUX((m.muxIMUXValue)) |=  ((m.muxMultiplexedAlternative) << 20);
                          4766	#1424:         break;          
                          4767	#1425:       case BRSHW_PORT_SIUL_MUXSEL_11:
                          4768	#1426:         SIU_IMUX((m.muxIMUXValue)) &= (0xFF3FFFFF);
                          4769	#1427:         SIU_IMUX((m.muxIMUXValue)) |=  ((m.muxMultiplexedAlternative) << 22);
                          4770	#1428:         break;
                          4771	#1429:       case BRSHW_PORT_SIUL_MUXSEL_12:
                          4772	#1430:         SIU_IMUX((m.muxIMUXValue)) &= (0xFCFFFFFF);
                          4773	#1431:         SIU_IMUX((m.muxIMUXValue)) |=  ((m.muxMultiplexedAlternative) << 24);
                          4774	#1432:         break;
                          4775	#1433:       case BRSHW_PORT_SIUL_MUXSEL_13:
                          4776	#1434:         SIU_IMUX((m.muxIMUXValue)) &= (0xF3FFFFFF);
                          4777	#1435:         SIU_IMUX((m.muxIMUXValue)) |=  ((m.muxMultiplexedAlternative) << 26);
                          4778	#1436:         break;          
                          4779	#1437:       case BRSHW_PORT_SIUL_MUXSEL_14:
                          4780	#1438:         SIU_IMUX((m.muxIMUXValue)) &= (0xCFFFFFFF);
                          4781	#1439:         SIU_IMUX((m.muxIMUXValue)) |=  ((m.muxMultiplexedAlternative) << 28);
                          4782	#1440:         break;
                          4783	#1441:       case BRSHW_PORT_SIUL_MUXSEL_15:
                          4784	#1442:         SIU_IMUX((m.muxIMUXValue)) &= (0x3FFFFFFF);
                          4785	#1443:         SIU_IMUX((m.muxIMUXValue)) |=  ((m.muxMultiplexedAlternative) << 30);
                          4786	#1444:         break;
                          4787	#1445:     }
                          4788	#1446:   }
                          4789	#1448: #elif defined (BRSHW_SIU_GROUP_D_2)
                          4790	#1449:   if((p.portSIUL) == BRSHW_PORT_SIUL_A)
                          4791	#1450:   {
                          4792	#1451:     SIU_MSCR((p.muxMSCRValue)) |= BRSHW_PCR_PIN_ASSIGNMENT_GPIO_INPUT; /* Very Strong drive, Push-pull */
                          4793	#1452:     SIU_MSCR((m.muxMSCRValue)) |= (m.muxMultiplexedAlternative); /* Source Signal Select */
                          4794	#1453:   }
                          4795	#1454:   else
                          4796	#1455:   {
                          4797	#1456:     SIU_B_MSCR((p.muxMSCRValue)) |= BRSHW_PCR_PIN_ASSIGNMENT_GPIO_INPUT; /* Very Strong drive, Push-pull */
                          4798	#1457:     SIU_B_MSCR((m.muxMSCRValue)) |= (m.muxMultiplexedAlternative); /* Source Signal Select */
                          4799	#1458:   }
                          4800	#1460: #else
                          4801	#1461:   SIU_MSCR((p.portGroup * 16 + p.portNumber)) |= BRSHW_PCR_PIN_ASSIGNMENT_GPIO_INPUT; /* Enables the input buffer */
000000c8 c003             4802		se_lwz	r0, 0(r3)
000000ca c173             4803		se_lwz	r7, 4(r3)

                                   Fri Apr 10 08:31:37 2020           Page 87
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
000000cc 6c40             4804		se_slwi	r0, 4
000000ce 0407             4805		se_add	r7, r0
000000d0 6c27             4806		se_slwi	r7, 2
000000d2 1ce70240         4807		e_add16i	r7, r7, 576
000000d6 73e797fc         4808		e_add2is	r7, 65532
000000da c007             4809		se_lwz	r0, 0(r7)
000000dc 64c0             4810		se_bseti	r0, 12
000000de d007             4811		se_stw	r0, 0(r7)
                          4812	#1462: # if defined (BRSHW_SIU_GROUP_A)
                          4813	#1463:   SIU_IMCR((m.muxIMCRValue)) |= (m.muxMultiplexedAlternative);
                          4814	#1464: # else
                          4815	#1465:   SIU_MSCR((m.muxMSCRValue)) |= (m.muxMultiplexedAlternative);
000000e0 c004             4816		se_lwz	r0, 0(r4)
000000e2 c164             4817		se_lwz	r6, 4(r4)
000000e4 6c20             4818		se_slwi	r0, 2
000000e6 1ce00240         4819		e_add16i	r7, r0, 576
000000ea 73e797fc         4820		e_add2is	r7, 65532
000000ee c007             4821		se_lwz	r0, 0(r7)
000000f0 4460             4822		se_or	r0, r6
000000f2 d007             4823		se_stw	r0, 0(r7)
                          4824	#1466: # endif
                          4825	#1467: #endif /*BRSHW_SIU_GROUP_x*/
                          4826	#1468: }
                          4827	#	    .ef
                          4828	.LDW71:
000000f4 0004             4829		se_blr
                          4830		.global	__ghs_eofn_BrsHwInitPortInput
                          4831	__ghs_eofn_BrsHwInitPortInput:
                          4832		.type	BrsHwInitPortInput,@function
                          4833		.size	BrsHwInitPortInput,$-BrsHwInitPortInput
                          4834		.align	1
                          4835	
                          4836	#function:			BrsHwInitPortInput
                          4837	#stack frame size:		0
                          4838	#
                          4839	
                          4840	#p	r3	param
                          4841	#m	r4	param
                          4842	
                          4843		.data
                          4844		.section ".vletext", "vax"
                          4845		.vle
                          4846		.vle
                          4847	
                          4848	
                          4849	#1470: /*****************************************************************************/
                          4850	#1471: /**
                          4851	#1472:  * @brief      This function configures a port pin as output pin.
                          4852	#1473:  * @pre        Port pin configuartions available within BrsHw_Ports.h and
                          4853	#1474:  *             no DrvPort used for port pin initialization.
                          4854	#1475:  * @param[in]  p - brsHw_Port_PortType, to be initialized.
                          4855	#1476:  * @param[out] -
                          4856	#1477:  * @return     -
                          4857	#1478:  * @context    Function is called from BrsHwPortInitPowerOn() and
                          4858	#1479:  *             BrsHwEvaBoardInitPowerOn() locally.
                          4859	#1480:  */

                                   Fri Apr 10 08:31:37 2020           Page 88
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                          4860	#1481: /*****************************************************************************/
                          4861		.align	1
                          4862		.align	1
                          4863	..gh.f.p.3.a.1.r.0.e.4:
                          4864		.type	..gh.f.p.3.a.1.r.0.e.4,@object
                          4865		.size	..gh.f.p.3.a.1.r.0.e.4,0
                          4866		.global	BrsHwInitPortOutput
                          4867	BrsHwInitPortOutput:
                          4868	#	    .bf
                          4869	.LDW81:
                          4870	#1482: void BrsHwInitPortOutput(brsHw_Port_PortType p)
                          4871	#1483: {
                          4872	#1484: #if defined (BRSHW_SIU_GROUP_B)
                          4873	#1485:   SIU_MSCR((p.muxMSCRValue)) |= BRSHW_PCR_PIN_ASSIGNMENT_GPIO_OUTPUT; /* Very Strong drive, Push-pull*/
                          4874	#1486:   SIU_MSCR((p.muxMSCRValue)) |= (p.muxMultiplexedAlternative); /* Source Signal Select */
                          4875	#1488: #elif defined (BRSHW_SIU_GROUP_D_2)
                          4876	#1489:   if((p.portSIUL) == BRSHW_PORT_SIUL_A)
                          4877	#1490:   {
                          4878	#1491:     SIU_MSCR((p.muxMSCRValue)) |= BRSHW_PCR_PIN_ASSIGNMENT_GPIO_OUTPUT; /* Very Strong drive, Push-pull */
                          4879	#1492:     SIU_MSCR((p.muxMSCRValue)) |= (p.muxMultiplexedAlternative); /* Source Signal Select */
                          4880	#1493:   }
                          4881	#1494:   else
                          4882	#1495:   {
                          4883	#1496:     SIU_B_MSCR((p.muxMSCRValue)) |= BRSHW_PCR_PIN_ASSIGNMENT_GPIO_OUTPUT; /* Very Strong drive, Push-pull */
                          4884	#1497:     SIU_B_MSCR((p.muxMSCRValue)) |= (p.muxMultiplexedAlternative); /* Source Signal Select */
                          4885	#1498:   }
                          4886	#1500: #else
                          4887	#1501:   SIU_MSCR((p.portGroup * 16 + p.portNumber)) |= BRSHW_PCR_PIN_ASSIGNMENT_GPIO_OUTPUT; /* Very Strong drive, Push-pull */
000000f6 c003             4888		se_lwz	r0, 0(r3)
000000f8 c173             4889		se_lwz	r7, 4(r3)
000000fa 6c40             4890		se_slwi	r0, 4
000000fc 0407             4891		se_add	r7, r0
000000fe 6c27             4892		se_slwi	r7, 2
00000100 1c070240         4893		e_add16i	r0, r7, 576
00000104 73e097fc         4894		e_add2is	r0, 65532
00000108 c070             4895		se_lwz	r7, 0(r0)
0000010a c263             4896		se_lwz	r6, 8(r3)
0000010c 70e6d200         4897		e_or2is	r7, 12800
                          4898	#1502:   SIU_MSCR((p.portGroup * 16 + p.portNumber)) |= (p.portAlternative); /* Source Signal Select */
00000110 d070             4899		se_stw	r7, 0(r0)
00000112 c070             4900		se_lwz	r7, 0(r0)
00000114 4467             4901		se_or	r7, r6
00000116 d070             4902		se_stw	r7, 0(r0)
                          4903	#1503: #endif /*BRSHW_SIU_GROUP_x*/
                          4904	#1504: }
                          4905	#	    .ef
                          4906	.LDW91:
00000118 0004             4907		se_blr
                          4908		.global	__ghs_eofn_BrsHwInitPortOutput
                          4909	__ghs_eofn_BrsHwInitPortOutput:
                          4910		.type	BrsHwInitPortOutput,@function
                          4911		.size	BrsHwInitPortOutput,$-BrsHwInitPortOutput
                          4912		.align	1
                          4913	
                          4914	#function:			BrsHwInitPortOutput
                          4915	#stack frame size:		0

                                   Fri Apr 10 08:31:37 2020           Page 89
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                          4916	#
                          4917	
                          4918	#p	r3	param
                          4919	
                          4920		.data
                          4921		.section ".vletext", "vax"
                          4922		.vle
                          4923		.vle
                          4924	
                          4925	
                          4926	#1506: /*****************************************************************************/
                          4927	#1507: /**
                          4928	#1508:  * @brief      This function configures the port pin configuration registers
                          4929	#1509:  *             (pull-up, pull-down)
                          4930	#1510:  * @pre        Port pin configuartions available within BrsHw_Ports.h and
                          4931	#1511:  *             no DrvPort used for port pin initialization.
                          4932	#1512:  * @param[in]  p - brsHw_Port_PortType, to be initialized,
                          4933	#1513:  *             n - brsHw_Port_ConfType, for port pin configuration
                          4934	#1514:  * @param[out] -
                          4935	#1515:  * @return     -
                          4936	#1516:  * @context    Function is called from BrsHwPortInitPowerOn() and
                          4937	#1517:  *             BrsHwEvaBoardInitPowerOn() locally.
                          4938	#1518:  */
                          4939	#1519: /*****************************************************************************/
                          4940		.align	1
                          4941		.align	1
                          4942	..gh.f.p.4.a.1.r.0.e.5:
                          4943		.type	..gh.f.p.4.a.1.r.0.e.5,@object
                          4944		.size	..gh.f.p.4.a.1.r.0.e.5,0
                          4945		.global	BrsHwInitPortConfig
                          4946	BrsHwInitPortConfig:
                          4947	#	    .bf
                          4948	.LDW02:
                          4949	#1520: void BrsHwInitPortConfig(brsHw_Port_PortType p, brsHw_Port_ConfType n)
                          4950	#1521: {
                          4951	#1522: #if defined (BRSHW_SIU_GROUP_B)
                          4952	#1523:   if ((n.PortPullOption) == PORT_PULL_UP_ENABLED)
                          4953	#1524:   {
                          4954	#1525:     SIU_MSCR((p.muxMSCRValue)) &= (0xFFFCFFFF);
                          4955	#1526:     SIU_MSCR((p.muxMSCRValue)) |= (3 << 16);
                          4956	#1527:   }
                          4957	#1528:   else if ((n.PortPullOption) == PORT_PULL_DOWN_ENABLED)
                          4958	#1529:   {
                          4959	#1530:     SIU_MSCR((p.muxMSCRValue)) &= (0xFFFCFFFF);
                          4960	#1531:     SIU_MSCR((p.muxMSCRValue)) |= (1 << 16);
                          4961	#1532:   }
                          4962	#1533:   else
                          4963	#1534:   {
                          4964	#1535:     SIU_MSCR((p.muxMSCRValue)) &= (0xFFFCFFFF);
                          4965	#1536:   }
                          4966	#1537: #endif
                          4967	#1538: }
                          4968	#	    .ef
                          4969	.LDW12:
0000011a 0004             4970		se_blr
                          4971		.global	__ghs_eofn_BrsHwInitPortConfig

                                   Fri Apr 10 08:31:37 2020           Page 90
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                          4972	__ghs_eofn_BrsHwInitPortConfig:
                          4973		.type	BrsHwInitPortConfig,@function
                          4974		.size	BrsHwInitPortConfig,$-BrsHwInitPortConfig
                          4975		.align	1
                          4976	
                          4977	#function:			BrsHwInitPortConfig
                          4978	#stack frame size:		0
                          4979	#
                          4980	
                          4981	#p	none	param
                          4982	#n	none	param
                          4983	
                          4984		.data
                          4985		.section ".vletext", "vax"
                          4986		.vle
                          4987		.vle
                          4988	
                          4989		.section ".RAMCODE","axv"
                          4990		.vle
                          4991	
                          4992	#1540: # if defined (BRS_ENABLE_FBL_SUPPORT)
                          4993	#1541:   #define BRS_START_SEC_RAM_CODE
                          4994	#1542:   #include "Brs_MemMap.h"   /* PRQA S 5087 *//* MD_MSR_19.1 */
                          4995	#1543: # endif
                          4996	#1544: /*****************************************************************************/
                          4997	#1545: /**
                          4998	#1546:  * @brief      This function sets the output level of a port pin.
                          4999	#1547:  * @pre        Port pin configuartions available within BrsHw_Ports.h,
                          5000	#1548:  *             no DrvPort used for port pin initialization and
                          5001	#1549:  *             transferred port pin has to be initialized as output pin with
                          5002	#1550:  *             GPIO functionality.
                          5003	#1551:  * @param[in]  p     - brsHw_Port_PortType, to be set,
                          5004	#1552:  *             Level - level, port pin has to be set to
                          5005	#1553:  *                     (BRSHW_PORT_LOGIC_LOW or BRSHW_PORT_LOGIC_HIGH).
                          5006	#1554:  * @param[out] -
                          5007	#1555:  * @return     -
                          5008	#1556:  * @context    Function is called from BrsHwPortInitPowerOn(),
                          5009	#1557:  *             BrsHwEvaBoardInitPowerOn(), BrsHw_WriteDio_TCM_SDA_OUT() and
                          5010	#1558:  *             BrsHw_WriteDio_TCM_CLK_OUT() locally.
                          5011	#1559:  */
                          5012	#1560: /*****************************************************************************/
                          5013		.align	1
                          5014	..bof.C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5CBrsHw...43.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl..5E8FB058..1::
                          5015		.align	1
                          5016	..gh.f.p.4.a.1.r.0.e.6:
                          5017		.type	..gh.f.p.4.a.1.r.0.e.6,@object
                          5018		.size	..gh.f.p.4.a.1.r.0.e.6,0
                          5019		.global	BrsHwPort_SetLevel
                          5020	BrsHwPort_SetLevel:
                          5021	#	    .bf
                          5022	.LDW22:
                          5023	#1561: void BrsHwPort_SetLevel(brsHw_Port_PortType p, uint8 Level)
                          5024	#1562: {
                          5025	#1563:   if (Level != BRSHW_PORT_LOGIC_LOW)
00000000 4810             5026		se_li	r0, 1
00000002 2a04             5027		se_cmpi	r4, 0

                                   Fri Apr 10 08:31:37 2020           Page 91
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
00000004 7cc4009e         5028		iseleq	r6, r4, r0
                          5029	#1564:   {
                          5030	#1565: #if defined (BRSHW_SIU_GROUP_B) || defined (BRSHW_SIU_GROUP_D_2)
                          5031	#1566:     SIU_GPDO((p.muxMSCRValue)) = BRSHW_PORT_LOGIC_HIGH; /* set port-pin-level to logic high */
                          5032	#1567: #else
                          5033	#1568:     SIU_GPDO((p.portGroup * 16 + p.portNumber)) = BRSHW_PORT_LOGIC_HIGH; /* set port-pin-level to logic high */
                          5034	#1569: #endif
                          5035	#1570:   }
                          5036	#1571:   else
                          5037	#1572:   {
                          5038	#1573: #if defined (BRSHW_SIU_GROUP_B) || defined (BRSHW_SIU_GROUP_D_2)
                          5039	#1574:     SIU_GPDO((p.muxMSCRValue)) = BRSHW_PORT_LOGIC_LOW; /* set port-pin-level to logic low */
                          5040	#1575: #else
                          5041	#1576:     SIU_GPDO((p.portGroup * 16 + p.portNumber)) = BRSHW_PORT_LOGIC_LOW; /* set port-pin-level to logic low */
00000008 c003             5042		se_lwz	r0, 0(r3)
0000000a c173             5043		se_lwz	r7, 4(r3)
0000000c 6c40             5044		se_slwi	r0, 4
0000000e 0407             5045		se_add	r7, r0
00000010 18078113         5046		e_addi	r0, r7, 4864
00000014 73e097fc         5047		e_add2is	r0, 65532
00000018 9060             5048		se_stb	r6, 0(r0)
                          5049	#1577: #endif
                          5050	#1578:   }
                          5051	#1579: }
                          5052	#	    .ef
                          5053	.LDW32:
0000001a 0004             5054		se_blr
                          5055		.global	__ghs_eofn_BrsHwPort_SetLevel
                          5056	__ghs_eofn_BrsHwPort_SetLevel:
                          5057		.type	BrsHwPort_SetLevel,@function
                          5058		.size	BrsHwPort_SetLevel,$-BrsHwPort_SetLevel
                          5059		.align	1
                          5060	
                          5061	#function:			BrsHwPort_SetLevel
                          5062	#stack frame size:		0
                          5063	#
                          5064	
                          5065	#p	r3	param
                          5066	#Level	r4	param
                          5067	
                          5068		.data
                          5069		.section ".RAMCODE","axv"
                          5070		.vle
                          5071	
                          5072		.section ".vletext", "vax"
                          5073		.vle
                          5074		.vle
                          5075	
                          5076	#1580: # if defined (BRS_ENABLE_FBL_SUPPORT)
                          5077	#1581:   #define BRS_STOP_SEC_RAM_CODE
                          5078	#1582:   #include "Brs_MemMap.h"   /* PRQA S 5087 *//* MD_MSR_19.1 */
                          5079	#1583: # endif
                          5080	#1585: /*****************************************************************************/
                          5081	#1586: /**
                          5082	#1587:  * @brief      This function reads the input level of a port pin.
                          5083	#1588:  * @pre        Port pin configuartions available within BrsHw_Ports.h,

                                   Fri Apr 10 08:31:37 2020           Page 92
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                          5084	#1589:  *             no DrvPort used for port pin initialization and
                          5085	#1590:  *             transferred port pin has to be initialized as input pin with
                          5086	#1591:  *             GPIO functionality.
                          5087	#1592:  * @param[in]  p - brsHw_Port_PortType, to be read.
                          5088	#1593:  * @param[out] -
                          5089	#1594:  * @return     Level, read from port pin
                          5090	#1595:  *             (BRSHW_PORT_LOGIC_LOW or BRSHW_PORT_LOGIC_HIGH).
                          5091	#1596:  * @context    Function is called from BrsHw_WriteDio_TCM_SDA_OUT() and
                          5092	#1597:  *             BrsHw_WriteDio_TCM_CLK_OUT() locally.
                          5093	#1598:  */
                          5094	#1599: /*****************************************************************************/
                          5095		.align	1
                          5096		.align	1
                          5097	..gh.f.p.3.a.1.r.0.e.7:
                          5098		.type	..gh.f.p.3.a.1.r.0.e.7,@object
                          5099		.size	..gh.f.p.3.a.1.r.0.e.7,0
                          5100		.global	BrsHwPort_GetLevel
                          5101	BrsHwPort_GetLevel:
                          5102	#	    .bf
                          5103	.LDW42:
                          5104	#1600: uint8 BrsHwPort_GetLevel(brsHw_Port_PortType p)
                          5105	#1601: {
                          5106	#1602:   uint32 temp;
                          5107	#1603: #if defined (BRSHW_SIU_GROUP_B) || defined (BRSHW_SIU_GROUP_D_2)
                          5108	#1604:   temp = SIU_GPDI((p.muxMSCRValue));
                          5109	#1605: #else
                          5110	#1606:   temp = SIU_GPDI((p.portGroup*16 + p.portNumber));
                          5111	#1607: #endif
                          5112	#1609:   if(temp != 0x00000000)
0000011c c003             5113		se_lwz	r0, 0(r3)
0000011e c173             5114		se_lwz	r7, 4(r3)
00000120 6c40             5115		se_slwi	r0, 4
00000122 0407             5116		se_add	r7, r0
00000124 18078115         5117		e_addi	r0, r7, 5376
00000128 73e097fc         5118		e_add2is	r0, 65532
0000012c 8000             5119		se_lbz	r0, 0(r0)
0000012e 2a00             5120		se_cmpi	r0, 0
00000130 4810             5121		se_li	r0, 1
00000132 7c60009e         5122		iseleq	r3, r0, r0
                          5123	#1610:   {
                          5124	#1611:     return BRSHW_PORT_LOGIC_HIGH;
                          5125	#1612:   }
                          5126	#1613:   else
                          5127	#1614:   {
                          5128	#1615:     return BRSHW_PORT_LOGIC_LOW;
                          5129	#	    .ef
                          5130	.LDW52:
00000136 0004             5131		se_blr
                          5132		.global	__ghs_eofn_BrsHwPort_GetLevel
                          5133	__ghs_eofn_BrsHwPort_GetLevel:
                          5134		.type	BrsHwPort_GetLevel,@function
                          5135		.size	BrsHwPort_GetLevel,$-BrsHwPort_GetLevel
                          5136		.align	1
                          5137	
                          5138	#function:			BrsHwPort_GetLevel
                          5139	#stack frame size:		0

                                   Fri Apr 10 08:31:37 2020           Page 93
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                          5140	#
                          5141	
                          5142	#p	r3	param
                          5143	
                          5144		.data
                          5145		.section ".vletext", "vax"
                          5146		.vle
                          5147		.vle
                          5148	
                          5149	#1616:   }
                          5150	#1617: }
                          5151		.section ".RAMCODE","axv"
                          5152		.vle
                          5153	
                          5154	#1619: # if defined (BRS_ENABLE_TCM_SUPPORT)
                          5155	#1620: /*******************************************************************************
                          5156	#1621:   TCM Write Functions
                          5157	#1622: ********************************************************************************/
                          5158	#1623: void BrsHw_WriteDio_TCM_SDA_OUT(uint8 Level)
                          5159	#1624: {
                          5160	#1625:   BrsHwPort_SetLevel(BRSHW_PORT_TCM_SDA_OUT, Level);
                          5161	#1626: }
                          5162	#1628: void BrsHw_WriteDio_TCM_CLK_OUT(uint8 Level)
                          5163	#1629: {
                          5164	#1630:   BrsHwPort_SetLevel(BRSHW_PORT_TCM_CLK_OUT, Level);
                          5165	#1631: }
                          5166	#1633: /*******************************************************************************
                          5167	#1634:   TCM Read Functions
                          5168	#1635: ********************************************************************************/
                          5169	#1636: uint8 BrsHw_ReadDio_TCM_SDA_IN(void)
                          5170	#1637: {
                          5171	#1638:   return BrsHwPort_GetLevel(BRSHW_PORT_TCM_SDA_IN);
                          5172	#1639: }
                          5173	#1641: uint8 BrsHw_ReadDio_TCM_CLK_IN(void)
                          5174	#1642: {
                          5175	#1643:   return BrsHwPort_GetLevel(BRSHW_PORT_TCM_CLK_IN);
                          5176	#1644: }
                          5177	#1645: # endif /*BRS_ENABLE_TCM_SUPPORT*/
                          5178	#1646: #endif /*!VGEN_ENABLE_DRVPORT*/
                          5179	#1648: /*****************************************************************************/
                          5180	#1649: /**
                          5181	#1650:  * @brief      This function has to be used to initialize the used ports.
                          5182	#1651:  * @pre        -
                          5183	#1652:  * @param[in]  -
                          5184	#1653:  * @param[out] -
                          5185	#1654:  * @return     -
                          5186	#1655:  * @context    Function is called from main@BrsMain or EcuM at power on initialization
                          5187	#1656:  */
                          5188	#1657: /*****************************************************************************/
                          5189	#1658: void BrsHwPortInitPowerOn(void)
                          5190	#1659: {
                          5191	#1660: #if defined (VGEN_ENABLE_DRVPORT)
                          5192	#1661: # if defined (BRS_ENABLE_SUPPORT_LEDS)          || \
                          5193	#1662:      defined (BRS_ENABLE_SUPPORT_TOGGLE_WD_PIN) || \
                          5194	#1663:      defined (BRS_ENABLE_SUPPORT_TOGGLE_CUSTOM_PIN)
                          5195	#1664:   #error "Configure the valid toggle pins within your DrvPort config. Or disable the depending BRS mechanism."*/

                                   Fri Apr 10 08:31:37 2020           Page 94
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                          5196	#1665: # endif
                          5197	#1667: #else
                          5198	#1668: # if defined (BRS_ENABLE_SUPPORT_LEDS)
                          5199	#1669:   BrsHwInitPortOutput(BRSHW_PORT_LED);
                          5200	#1671:   /* Set LED on EVB demo board to show the system is alive */
                          5201	#1672:   BrsHwTogglePin(BRSHW_TOGGLEPIN_LED);
                          5202	#1673: # endif /*BRS_ENABLE_SUPPORT_LEDS*/
                          5203	#1675: # if defined (BRS_ENABLE_SUPPORT_TOGGLE_WD_PIN)
                          5204	#1676:   BrsHwInitPortOutput(BRSHW_PORT_TOGGLE_WD);
                          5205	#1677: # endif
                          5206	#1679: # if defined (BRS_ENABLE_SUPPORT_TOGGLE_CUSTOM_PIN)
                          5207	#1680:   BrsHwInitPortOutput(BRSHW_PORT_TOGGLE_CUSTOM);
                          5208	#1681: # endif
                          5209	#1683: # if defined (BRS_ENABLE_TCM_SUPPORT)
                          5210	#1684:   BrsHwInitPortOutput(BRSHW_PORT_TCM_CLK_OUT);
                          5211	#1685:   BrsHwInitPortOutput(BRSHW_PORT_TCM_SDA_OUT);
                          5212	#1686:   BrsHwInitPortInput(BRSHW_PORT_TCM_SDA_IN, BRSHW_PORT_MUX_TCM_SDA_IN);
                          5213	#1687:   BrsHwInitPortInput(BRSHW_PORT_TCM_CLK_IN, BRSHW_PORT_MUX_TCM_CLK_IN);
                          5214	#1688: #  if defined (BRSHW_USE_TCM_EXT_IRQ)
                          5215	#1689:   BrsHwInitPortInput(BRSHW_PORT_TCM_INTA_IN, BRSHW_PORT_MUX_TCM_INTA_IN);
                          5216	#1690:   BrsHwInitPortInput(BRSHW_PORT_TCM_INTB_IN, BRSHW_PORT_MUX_TCM_INTB_IN);
                          5217	#1691: #  endif
                          5218	#1692: # endif /*BRS_ENABLE_TCM_SUPPORT*/
                          5219	#1694: /*******************************************************************************
                          5220	#1695:   CAN driver
                          5221	#1696: ********************************************************************************/
                          5222	#1697: # if defined (VGEN_ENABLE_CAN_DRV)
                          5223	#1698: #  if defined (_BRSHW_PORT_CAN_WAKEUP_IRQ_0)
                          5224	#1699:   BrsHwInitPortInput(BRSHW_PORT_CAN_WAKEUP_IRQ_0, BRSHW_PORT_MUX_CAN_WAKEUP_IRQ_0);
                          5225	#1700: #  endif
                          5226	#1701: #  if defined (_BRSHW_PORT_CAN_WAKEUP_IRQ_1)
                          5227	#1702:   BrsHwInitPortInput(BRSHW_PORT_CAN_WAKEUP_IRQ_1, BRSHW_PORT_MUX_CAN_WAKEUP_IRQ_1);
                          5228	#1703: #  endif
                          5229	#1704: #  if defined (_BRSHW_PORT_CAN_WAKEUP_IRQ_2)
                          5230	#1705:   BrsHwInitPortInput(BRSHW_PORT_CAN_WAKEUP_IRQ_2, BRSHW_PORT_MUX_CAN_WAKEUP_IRQ_2);
                          5231	#1706: #  endif
                          5232	#1707: #  if defined (_BRSHW_PORT_CAN_WAKEUP_IRQ_3)
                          5233	#1708:   BrsHwInitPortInput(BRSHW_PORT_CAN_WAKEUP_IRQ_3, BRSHW_PORT_MUX_CAN_WAKEUP_IRQ_3);
                          5234	#1709: #  endif
                          5235	#1710: #  if defined (_BRSHW_PORT_CAN_WAKEUP_IRQ_4)
                          5236	#1711:   BrsHwInitPortInput(BRSHW_PORT_CAN_WAKEUP_IRQ_4, BRSHW_PORT_MUX_CAN_WAKEUP_IRQ_4);
                          5237	#1712: #  endif
                          5238	#1713: #  if defined (_BRSHW_PORT_CAN_WAKEUP_IRQ_5)
                          5239	#1714:   BrsHwInitPortInput(BRSHW_PORT_CAN_WAKEUP_IRQ_5, BRSHW_PORT_MUX_CAN_WAKEUP_IRQ_5);
                          5240	#1715: #  endif
                          5241	#1716: #  if defined (_BRSHW_PORT_CAN_WAKEUP_IRQ_6)
                          5242	#1717:   BrsHwInitPortInput(BRSHW_PORT_CAN_WAKEUP_IRQ_6, BRSHW_PORT_MUX_CAN_WAKEUP_IRQ_6);
                          5243	#1718: #  endif
                          5244	#1719: #  if defined (_BRSHW_PORT_CAN_WAKEUP_IRQ_7)
                          5245	#1720:   BrsHwInitPortInput(BRSHW_PORT_CAN_WAKEUP_IRQ_7, BRSHW_PORT_MUX_CAN_WAKEUP_IRQ_7);
                          5246	#1721: #  endif
                          5247	#1722: #  if defined (_BRSHW_PORT_CAN_WAKEUP_IRQ_8)
                          5248	#1723:   BrsHwInitPortInput(BRSHW_PORT_CAN_WAKEUP_IRQ_8, BRSHW_PORT_MUX_CAN_WAKEUP_IRQ_8);
                          5249	#1724: #  endif
                          5250	#1725: #  if defined (_BRSHW_PORT_CAN_WAKEUP_IRQ_9)
                          5251	#1726:   BrsHwInitPortInput(BRSHW_PORT_CAN_WAKEUP_IRQ_9, BRSHW_PORT_MUX_CAN_WAKEUP_IRQ_9);

                                   Fri Apr 10 08:31:37 2020           Page 95
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                          5252	#1727: #  endif
                          5253	#1728: #  if defined (_BRSHW_PORT_CAN_WAKEUP_IRQ_10)
                          5254	#1729:   BrsHwInitPortInput(BRSHW_PORT_CAN_WAKEUP_IRQ_10, BRSHW_PORT_MUX_CAN_WAKEUP_IRQ_10);
                          5255	#1730: #  endif
                          5256	#1731: #  if defined (_BRSHW_PORT_CAN_WAKEUP_IRQ_11)
                          5257	#1732:   BrsHwInitPortInput(BRSHW_PORT_CAN_WAKEUP_IRQ_11, BRSHW_PORT_MUX_CAN_WAKEUP_IRQ_11);
                          5258	#1733: #  endif
                          5259	#1734: #  if defined (_BRSHW_PORT_CAN_WAKEUP_IRQ_12)
                          5260	#1735:   BrsHwInitPortInput(BRSHW_PORT_CAN_WAKEUP_IRQ_12, BRSHW_PORT_MUX_CAN_WAKEUP_IRQ_12);
                          5261	#1736: #  endif
                          5262	#1737: #  if defined (_BRSHW_PORT_CAN_WAKEUP_IRQ_13)
                          5263	#1738:   BrsHwInitPortInput(BRSHW_PORT_CAN_WAKEUP_IRQ_13, BRSHW_PORT_MUX_CAN_WAKEUP_IRQ_13);
                          5264	#1739: #  endif
                          5265	#1740: #  if defined (_BRSHW_PORT_CAN_WAKEUP_IRQ_14)
                          5266	#1741:   BrsHwInitPortInput(BRSHW_PORT_CAN_WAKEUP_IRQ_14, BRSHW_PORT_MUX_CAN_WAKEUP_IRQ_14);
                          5267	#1742: #  endif
                          5268	#1743: #  if defined (_BRSHW_PORT_CAN_WAKEUP_IRQ_15)
                          5269	#1744:   BrsHwInitPortInput(BRSHW_PORT_CAN_WAKEUP_IRQ_15, BRSHW_PORT_MUX_CAN_WAKEUP_IRQ_15);
                          5270	#1745: #  endif
                          5271	#1747: #  if defined (kCanPhysToLogChannelIndex_0)
                          5272	#1748:   BrsHwInitPortOutput(BRSHW_PORT_CAN0_TX);
                          5273	#1749:   BrsHwInitPortInput(BRSHW_PORT_CAN0_RX, BRSHW_PORT_MUX_CAN0_RX);
                          5274	#1750: #   if defined(_BRSHW_PORT_CAN0_TRCV_STB)
                          5275	#1751:   BrsHwInitPortOutput(BRSHW_PORT_CAN0_TRCV_STB);
                          5276	#1752:   BrsHwPort_SetLevel(BRSHW_PORT_CAN0_TRCV_STB, BRSHW_PORT_LOGIC_LOW);
                          5277	#1753: #   endif
                          5278	#1754: #   if defined (_BRSHW_PORT_CAN0_TRCV_EN)
                          5279	#1755:   BrsHwInitPortOutput(BRSHW_PORT_CAN0_TRCV_EN);
                          5280	#1756:   BrsHwPort_SetLevel(BRSHW_PORT_CAN0_TRCV_EN, BRSHW_PORT_LOGIC_HIGH);
                          5281	#1757: #   endif
                          5282	#1758: #  endif /*kCanPhysToLogChannelIndex_0*/
                          5283	#1760: #  if defined (kCanPhysToLogChannelIndex_1)
                          5284	#1761:   BrsHwInitPortOutput(BRSHW_PORT_CAN1_TX);
                          5285	#1762:   BrsHwInitPortInput(BRSHW_PORT_CAN1_RX, BRSHW_PORT_MUX_CAN1_RX);
                          5286	#1763: #   if defined(_BRSHW_PORT_CAN1_TRCV_STB)
                          5287	#1764:   BrsHwInitPortOutput(BRSHW_PORT_CAN1_TRCV_STB);
                          5288	#1765:   BrsHwPort_SetLevel(BRSHW_PORT_CAN1_TRCV_STB, BRSHW_PORT_LOGIC_HIGH);
                          5289	#1766: #   endif
                          5290	#1767: #   if defined (_BRSHW_PORT_CAN1_TRCV_EN)
                          5291	#1768:   BrsHwInitPortOutput(BRSHW_PORT_CAN1_TRCV_EN);
                          5292	#1769:   BrsHwPort_SetLevel(BRSHW_PORT_CAN1_TRCV_EN, BRSHW_PORT_LOGIC_HIGH);
                          5293	#1770: #   endif
                          5294	#1771: #  endif /*kCanPhysToLogChannelIndex_1*/
                          5295	#1773: #  if defined (kCanPhysToLogChannelIndex_2)
                          5296	#1774:   BrsHwInitPortOutput(BRSHW_PORT_CAN2_TX);
                          5297	#1775:   BrsHwInitPortInput(BRSHW_PORT_CAN2_RX, BRSHW_PORT_MUX_CAN2_RX);
                          5298	#1776: #   if defined(_BRSHW_PORT_CAN2_TRCV_STB)
                          5299	#1777:   BrsHwInitPortOutput(BRSHW_PORT_CAN2_TRCV_STB);
                          5300	#1778:   BrsHwPort_SetLevel(BRSHW_PORT_CAN2_TRCV_STB, BRSHW_PORT_LOGIC_HIGH);
                          5301	#1779: #   endif
                          5302	#1780: #   if defined (_BRSHW_PORT_CAN2_TRCV_EN)
                          5303	#1781:   BrsHwInitPortOutput(BRSHW_PORT_CAN2_TRCV_EN);
                          5304	#1782:   BrsHwPort_SetLevel(BRSHW_PORT_CAN2_TRCV_EN, BRSHW_PORT_LOGIC_HIGH);
                          5305	#1783: #   endif
                          5306	#1784: #  endif /*kCanPhysToLogChannelIndex_2*/
                          5307	#1786: #  if defined (kCanPhysToLogChannelIndex_3)

                                   Fri Apr 10 08:31:37 2020           Page 96
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                          5308	#1787:   BrsHwInitPortOutput(BRSHW_PORT_CAN3_TX);
                          5309	#1788:   BrsHwInitPortInput(BRSHW_PORT_CAN3_RX, BRSHW_PORT_MUX_CAN3_RX);
                          5310	#1789: #   if defined(_BRSHW_PORT_CAN3_TRCV_STB)
                          5311	#1790:   BrsHwInitPortOutput(BRSHW_PORT_CAN3_TRCV_STB);
                          5312	#1791:   BrsHwPort_SetLevel(BRSHW_PORT_CAN3_TRCV_STB, BRSHW_PORT_LOGIC_HIGH);
                          5313	#1792: #   endif
                          5314	#1793: #   if defined (_BRSHW_PORT_CAN3_TRCV_EN)
                          5315	#1794:   BrsHwInitPortOutput(BRSHW_PORT_CAN3_TRCV_EN);
                          5316	#1795:   BrsHwPort_SetLevel(BRSHW_PORT_CAN3_TRCV_EN, BRSHW_PORT_LOGIC_HIGH);
                          5317	#1796: #   endif
                          5318	#1797: #  endif /*kCanPhysToLogChannelIndex_3*/
                          5319	#1799: #  if defined (kCanPhysToLogChannelIndex_4)
                          5320	#1800:   BrsHwInitPortOutput(BRSHW_PORT_CAN4_TX);
                          5321	#1801:   BrsHwInitPortInput(BRSHW_PORT_CAN4_RX, BRSHW_PORT_MUX_CAN4_RX);
                          5322	#1802: #   if defined(_BRSHW_PORT_CAN4_TRCV_STB)
                          5323	#1803:   BrsHwInitPortOutput(BRSHW_PORT_CAN4_TRCV_STB);
                          5324	#1804:   BrsHwPort_SetLevel(BRSHW_PORT_CAN4_TRCV_STB, BRSHW_PORT_LOGIC_HIGH);
                          5325	#1805: #   endif
                          5326	#1806: #    if defined (_BRSHW_PORT_CAN4_TRCV_EN)
                          5327	#1807:   BrsHwInitPortOutput(BRSHW_PORT_CAN4_TRCV_EN);
                          5328	#1808:   BrsHwPort_SetLevel(BRSHW_PORT_CAN4_TRCV_EN, BRSHW_PORT_LOGIC_HIGH);
                          5329	#1809: #    endif
                          5330	#1810: #  endif /*kCanPhysToLogChannelIndex_4*/
                          5331	#1812: #  if defined (kCanPhysToLogChannelIndex_5)
                          5332	#1813:   BrsHwInitPortOutput(BRSHW_PORT_CAN5_TX);
                          5333	#1814:   BrsHwInitPortInput(BRSHW_PORT_CAN5_RX, BRSHW_PORT_MUX_CAN5_RX);
                          5334	#1815: #   if defined(_BRSHW_PORT_CAN5_TRCV_STB)
                          5335	#1816:   BrsHwInitPortOutput(BRSHW_PORT_CAN5_TRCV_STB);
                          5336	#1817:   BrsHwPort_SetLevel(BRSHW_PORT_CAN5_TRCV_STB, BRSHW_PORT_LOGIC_HIGH);
                          5337	#1818: #   endif
                          5338	#1819: #    if defined (_BRSHW_PORT_CAN5_TRCV_EN)
                          5339	#1820:   BrsHwInitPortOutput(BRSHW_PORT_CAN5_TRCV_EN);
                          5340	#1821:   BrsHwPort_SetLevel(BRSHW_PORT_CAN5_TRCV_EN, BRSHW_PORT_LOGIC_HIGH);
                          5341	#1822: #    endif
                          5342	#1823: #  endif /*kCanPhysToLogChannelIndex_5*/
                          5343	#1825: #  if defined (kCanPhysToLogChannelIndex_6)
                          5344	#1826:   BrsHwInitPortOutput(BRSHW_PORT_CAN6_TX);
                          5345	#1827:   BrsHwInitPortInput(BRSHW_PORT_CAN6_RX, BRSHW_PORT_MUX_CAN6_RX);
                          5346	#1828: #   if defined(_BRSHW_PORT_CAN6_TRCV_STB)
                          5347	#1829:   BrsHwInitPortOutput(BRSHW_PORT_CAN6_TRCV_STB);
                          5348	#1830:   BrsHwPort_SetLevel(BRSHW_PORT_CAN6_TRCV_STB, BRSHW_PORT_LOGIC_HIGH);
                          5349	#1831: #   endif
                          5350	#1832: #   if defined (_BRSHW_PORT_CAN6_TRCV_EN)
                          5351	#1833:   BrsHwInitPortOutput(BRSHW_PORT_CAN6_TRCV_EN);
                          5352	#1834:   BrsHwPort_SetLevel(BRSHW_PORT_CAN6_TRCV_EN, BRSHW_PORT_LOGIC_HIGH);
                          5353	#1835: #   endif
                          5354	#1836: #  endif /*kCanPhysToLogChannelIndex_6*/
                          5355	#1838: #  if defined (kCanPhysToLogChannelIndex_7)
                          5356	#1839:   BrsHwInitPortOutput(BRSHW_PORT_CAN7_TX);
                          5357	#1840:   BrsHwInitPortInput(BRSHW_PORT_CAN7_RX, BRSHW_PORT_MUX_CAN7_RX);
                          5358	#1841: #   if defined(_BRSHW_PORT_CAN7_TRCV_STB)
                          5359	#1842:   BrsHwInitPortOutput(BRSHW_PORT_CAN7_TRCV_STB);
                          5360	#1843:   BrsHwPort_SetLevel(BRSHW_PORT_CAN7_TRCV_STB, BRSHW_PORT_LOGIC_HIGH);
                          5361	#1844: #   endif
                          5362	#1845: #   if defined (_BRSHW_PORT_CAN7_TRCV_EN)
                          5363	#1846:   BrsHwInitPortOutput(BRSHW_PORT_CAN7_TRCV_EN);

                                   Fri Apr 10 08:31:37 2020           Page 97
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                          5364	#1847:   BrsHwPort_SetLevel(BRSHW_PORT_CAN7_TRCV_EN, BRSHW_PORT_LOGIC_HIGH);
                          5365	#1848: #   endif
                          5366	#1849: #  endif /*kCanPhysToLogChannelIndex_7*/
                          5367	#1851: #  if defined (kCan_30_McanPhysToLogChannelIndex_0)
                          5368	#1852:   BrsHwInitPortOutput(BRSHW_PORT_CAN0_SECOND_CANCELL_TX);
                          5369	#1853:   BrsHwInitPortInput(BRSHW_PORT_CAN0_SECOND_CANCELL_RX, BRSHW_PORT_MUX_CAN0_SECOND_CANCELL_RX);
                          5370	#1854: #   if defined(_BRSHW_PORT_CAN0_TRCV_SECOND_CANCELL_STB)
                          5371	#1855:   BrsHwInitPortOutput(BRSHW_PORT_CAN0_TRCV_SECOND_CANCELL_STB);
                          5372	#1856:   BrsHwPort_SetLevel(BRSHW_PORT_CAN0_TRCV_SECOND_CANCELL_STB, BRSHW_PORT_LOGIC_HIGH);
                          5373	#1857: #   endif
                          5374	#1858: #   if defined (_BRSHW_PORT_CAN0_TRCV_SECOND_CANCELL_EN)
                          5375	#1859:   BrsHwInitPortOutput(BRSHW_PORT_CAN0_TRCV_SECOND_CANCELL_EN);
                          5376	#1860:   BrsHwPort_SetLevel(BRSHW_PORT_CAN0_TRCV_SECOND_CANCELL_EN, BRSHW_PORT_LOGIC_HIGH);
                          5377	#1861: #   endif
                          5378	#1862: #  endif /*kCan_30_McanPhysToLogChannelIndex_0*/
                          5379	#1864: #  if defined (kCan_30_McanPhysToLogChannelIndex_1)
                          5380	#1865:   BrsHwInitPortOutput(BRSHW_PORT_CAN1_SECOND_CANCELL_TX);
                          5381	#1866:   BrsHwInitPortInput(BRSHW_PORT_CAN1_SECOND_CANCELL_RX, BRSHW_PORT_MUX_CAN1_SECOND_CANCELL_RX);
                          5382	#1867: #   if defined(_BRSHW_PORT_CAN1_TRCV_SECOND_CANCELL_STB)
                          5383	#1868:   BrsHwInitPortOutput(BRSHW_PORT_CAN1_TRCV_SECOND_CANCELL_STB);
                          5384	#1869:   BrsHwPort_SetLevel(BRSHW_PORT_CAN1_TRCV_SECOND_CANCELL_STB, BRSHW_PORT_LOGIC_HIGH);
                          5385	#1870: #   endif
                          5386	#1871: #   if defined (_BRSHW_PORT_CAN1_TRCV_SECOND_CANCELL_EN)
                          5387	#1872:   BrsHwInitPortOutput(BRSHW_PORT_CAN1_TRCV_SECOND_CANCELL_EN);
                          5388	#1873:   BrsHwPort_SetLevel(BRSHW_PORT_CAN1_TRCV_SECOND_CANCELL_EN, BRSHW_PORT_LOGIC_HIGH);
                          5389	#1874: #   endif
                          5390	#1875: #  endif /*kCan_30_McanPhysToLogChannelIndex_0*/
                          5391	#1876: # endif /*VGEN_ENABLE_CAN_DRV*/
                          5392	#1878: /*******************************************************************************
                          5393	#1879:   LIN driver
                          5394	#1880: ********************************************************************************/
                          5395	#1881: # if defined (VGEN_ENABLE_LIN_DRV)
                          5396	#1882: #  if defined (LIN_ENABLE_HARDWARE_INTERFACE_0)
                          5397	#1883:   BrsHwInitPortOutput(BRSHW_PORT_LIN0_TX);
                          5398	#1884:   BrsHwInitPortInput(BRSHW_PORT_LIN0_RX, BRSHW_PORT_MUX_LIN0_RX);
                          5399	#1885: #   if defined(_BRSHW_PORT_CONF_LIN)
                          5400	#1886:   BrsHwInitPortConfig(BRSHW_PORT_LIN0_RX, BRSHW_PORT_CONF_LIN);
                          5401	#1887: #   endif
                          5402	#1888: #   if defined(_BRSHW_PORT_LIN0_TRCV_STB)
                          5403	#1889:   BrsHwInitPortOutput(BRSHW_PORT_LIN0_TRCV_STB);
                          5404	#1890:   BrsHwPort_SetLevel(BRSHW_PORT_LIN0_TRCV_STB, BRSHW_PORT_LOGIC_HIGH);
                          5405	#1891: #   endif
                          5406	#1892: #  endif /*LIN_ENABLE_HARDWARE_INTERFACE_0*/
                          5407	#1894: #  if defined (LIN_ENABLE_HARDWARE_INTERFACE_1)
                          5408	#1895:   BrsHwInitPortOutput(BRSHW_PORT_LIN1_TX);
                          5409	#1896:   BrsHwInitPortInput(BRSHW_PORT_LIN1_RX, BRSHW_PORT_MUX_LIN1_RX);
                          5410	#1897: #   if defined(_BRSHW_PORT_CONF_LIN)
                          5411	#1898:   BrsHwInitPortConfig(BRSHW_PORT_LIN1_RX, BRSHW_PORT_CONF_LIN);
                          5412	#1899: #   endif
                          5413	#1900: #   if defined(_BRSHW_PORT_LIN1_TRCV_STB)
                          5414	#1901:   BrsHwInitPortOutput(BRSHW_PORT_LIN1_TRCV_STB);
                          5415	#1902:   BrsHwPort_SetLevel(BRSHW_PORT_LIN1_TRCV_STB, BRSHW_PORT_LOGIC_HIGH);
                          5416	#1903: #   endif
                          5417	#1904: #  endif /*LIN_ENABLE_HARDWARE_INTERFACE_1*/
                          5418	#1906: #  if defined (LIN_ENABLE_HARDWARE_INTERFACE_2)
                          5419	#1907:   BrsHwInitPortOutput(BRSHW_PORT_LIN2_TX);

                                   Fri Apr 10 08:31:37 2020           Page 98
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                          5420	#1908:   BrsHwInitPortInput(BRSHW_PORT_LIN2_RX, BRSHW_PORT_MUX_LIN2_RX);
                          5421	#1909: #   if defined(_BRSHW_PORT_CONF_LIN)
                          5422	#1910:   BrsHwInitPortConfig(BRSHW_PORT_LIN2_RX, BRSHW_PORT_CONF_LIN);
                          5423	#1911: #   endif
                          5424	#1912: #   if defined(_BRSHW_PORT_LIN2_TRCV_STB)
                          5425	#1913:   BrsHwInitPortOutput(BRSHW_PORT_LIN2_TRCV_STB);
                          5426	#1914:   BrsHwPort_SetLevel(BRSHW_PORT_LIN2_TRCV_STB, BRSHW_PORT_LOGIC_HIGH);
                          5427	#1915: #   endif
                          5428	#1916: #  endif /*LIN_ENABLE_HARDWARE_INTERFACE_2*/
                          5429	#1918: #  if defined (LIN_ENABLE_HARDWARE_INTERFACE_3)
                          5430	#1919:   BrsHwInitPortOutput(BRSHW_PORT_LIN3_TX);
                          5431	#1920:   BrsHwInitPortInput(BRSHW_PORT_LIN3_RX, BRSHW_PORT_MUX_LIN3_RX);
                          5432	#1921: #   if defined(_BRSHW_PORT_CONF_LIN)
                          5433	#1922:   BrsHwInitPortConfig(BRSHW_PORT_LIN3_RX, BRSHW_PORT_CONF_LIN);
                          5434	#1923: #   endif
                          5435	#1924: #   if defined(_BRSHW_PORT_LIN3_TRCV_STB)
                          5436	#1925:   BrsHwInitPortOutput(BRSHW_PORT_LIN3_TRCV_STB);
                          5437	#1926:   BrsHwPort_SetLevel(BRSHW_PORT_LIN3_TRCV_STB, BRSHW_PORT_LOGIC_HIGH);
                          5438	#1927: #   endif
                          5439	#1928: #  endif /*LIN_ENABLE_HARDWARE_INTERFACE_3*/
                          5440	#1930: #  if defined (LIN_ENABLE_HARDWARE_INTERFACE_4)
                          5441	#1931:   BrsHwInitPortOutput(BRSHW_PORT_LIN4_TX);
                          5442	#1932:   BrsHwInitPortInput(BRSHW_PORT_LIN4_RX, BRSHW_PORT_MUX_LIN4_RX);
                          5443	#1933: #   if defined(_BRSHW_PORT_CONF_LIN)
                          5444	#1934:   BrsHwInitPortConfig(BRSHW_PORT_LIN4_RX, BRSHW_PORT_CONF_LIN);
                          5445	#1935: #   endif
                          5446	#1936: #   if defined(_BRSHW_PORT_LIN4_TRCV_STB)
                          5447	#1937:   BrsHwInitPortOutput(BRSHW_PORT_LIN4_TRCV_STB);
                          5448	#1938:   BrsHwPort_SetLevel(BRSHW_PORT_LIN4_TRCV_STB, BRSHW_PORT_LOGIC_HIGH);
                          5449	#1939: #   endif
                          5450	#1940: #  endif /*LIN_ENABLE_HARDWARE_INTERFACE_4*/
                          5451	#1942: #  if defined (LIN_ENABLE_HARDWARE_INTERFACE_5)
                          5452	#1943:   BrsHwInitPortOutput(BRSHW_PORT_LIN5_TX);
                          5453	#1944:   BrsHwInitPortInput(BRSHW_PORT_LIN5_RX, BRSHW_PORT_MUX_LIN5_RX);
                          5454	#1945: #   if defined(_BRSHW_PORT_CONF_LIN)
                          5455	#1946:   BrsHwInitPortConfig(BRSHW_PORT_LIN5_RX, BRSHW_PORT_CONF_LIN);
                          5456	#1947: #   endif
                          5457	#1948: #   if defined(_BRSHW_PORT_LIN5_TRCV_STB)
                          5458	#1949:   BrsHwInitPortOutput(BRSHW_PORT_LIN5_TRCV_STB);
                          5459	#1950:   BrsHwPort_SetLevel(BRSHW_PORT_LIN5_TRCV_STB, BRSHW_PORT_LOGIC_HIGH);
                          5460	#1951: #   endif
                          5461	#1952: #  endif /*LIN_ENABLE_HARDWARE_INTERFACE_5*/
                          5462	#1954: #  if defined (LIN_ENABLE_HARDWARE_INTERFACE_6)
                          5463	#1955:   BrsHwInitPortOutput(BRSHW_PORT_LIN6_TX);
                          5464	#1956:   BrsHwInitPortInput(BRSHW_PORT_LIN6_RX, BRSHW_PORT_MUX_LIN6_RX);
                          5465	#1957: #   if defined(_BRSHW_PORT_CONF_LIN)
                          5466	#1958:   BrsHwInitPortConfig(BRSHW_PORT_LIN6_RX, BRSHW_PORT_CONF_LIN);
                          5467	#1959: #   endif
                          5468	#1960: #   if defined(_BRSHW_PORT_LIN6_TRCV_STB)
                          5469	#1961:   BrsHwInitPortOutput(BRSHW_PORT_LIN6_TRCV_STB);
                          5470	#1962:   BrsHwPort_SetLevel(BRSHW_PORT_LIN6_TRCV_STB, BRSHW_PORT_LOGIC_HIGH);
                          5471	#1963: #   endif
                          5472	#1964: #  endif /*LIN_ENABLE_HARDWARE_INTERFACE_6*/
                          5473	#1966: #  if defined (LIN_ENABLE_HARDWARE_INTERFACE_7)
                          5474	#1967:   BrsHwInitPortOutput(BRSHW_PORT_LIN7_TX);
                          5475	#1968:   BrsHwInitPortInput(BRSHW_PORT_LIN7_RX, BRSHW_PORT_MUX_LIN7_RX);

                                   Fri Apr 10 08:31:37 2020           Page 99
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                          5476	#1969: #   if defined(_BRSHW_PORT_CONF_LIN)
                          5477	#1970:   BrsHwInitPortConfig(BRSHW_PORT_LIN7_RX, BRSHW_PORT_CONF_LIN);
                          5478	#1971: #   endif
                          5479	#1972: #   if defined(_BRSHW_PORT_LIN7_TRCV_STB)
                          5480	#1973:   BrsHwInitPortOutput(BRSHW_PORT_LIN7_TRCV_STB);
                          5481	#1974:   BrsHwPort_SetLevel(BRSHW_PORT_LIN7_TRCV_STB, BRSHW_PORT_LOGIC_HIGH);
                          5482	#1975: #   endif
                          5483	#1976: #  endif /*LIN_ENABLE_HARDWARE_INTERFACE_7*/
                          5484	#1978: #  if defined (LIN_ENABLE_HARDWARE_INTERFACE_8)
                          5485	#1979:   BrsHwInitPortOutput(BRSHW_PORT_LIN8_TX);
                          5486	#1980:   BrsHwInitPortInput(BRSHW_PORT_LIN8_RX, BRSHW_PORT_MUX_LIN8_RX);
                          5487	#1981: #   if defined(_BRSHW_PORT_CONF_LIN)
                          5488	#1982:   BrsHwInitPortConfig(BRSHW_PORT_LIN8_RX, BRSHW_PORT_CONF_LIN);
                          5489	#1983: #   endif
                          5490	#1984: #   if defined(_BRSHW_PORT_LIN8_TRCV_STB)
                          5491	#1985:   BrsHwInitPortOutput(BRSHW_PORT_LIN8_TRCV_STB);
                          5492	#1986:   BrsHwPort_SetLevel(BRSHW_PORT_LIN8_TRCV_STB, BRSHW_PORT_LOGIC_HIGH);
                          5493	#1987: #   endif
                          5494	#1988: #  endif /*LIN_ENABLE_HARDWARE_INTERFACE_8*/
                          5495	#1990: #  if defined (LIN_ENABLE_HARDWARE_INTERFACE_9)
                          5496	#1991:   BrsHwInitPortOutput(BRSHW_PORT_LIN9_TX);
                          5497	#1992:   BrsHwInitPortInput(BRSHW_PORT_LIN9_RX, BRSHW_PORT_MUX_LIN9_RX);
                          5498	#1993: #   if defined(_BRSHW_PORT_CONF_LIN)
                          5499	#1994:   BrsHwInitPortConfig(BRSHW_PORT_LIN9_RX, BRSHW_PORT_CONF_LIN);
                          5500	#1995: #   endif
                          5501	#1996: #   if defined(_BRSHW_PORT_LIN9_TRCV_STB)
                          5502	#1997:   BrsHwInitPortOutput(BRSHW_PORT_LIN9_TRCV_STB);
                          5503	#1998:   BrsHwPort_SetLevel(BRSHW_PORT_LIN9_TRCV_STB, BRSHW_PORT_LOGIC_HIGH);
                          5504	#1999: #   endif
                          5505	#2000: #  endif /*LIN_ENABLE_HARDWARE_INTERFACE_9*/
                          5506	#2001: # endif /*VGEN_ENABLE_LIN_DRV*/
                          5507	#2003: /*******************************************************************************
                          5508	#2004:   FLEXRAY driver
                          5509	#2005: ********************************************************************************/
                          5510	#2006: # if defined (VGEN_ENABLE_DRVFR__BASEASR)
                          5511	#2007: #  if (FR_CHANNEL_A_USED == STD_ON)
                          5512	#2008:   BrsHwInitPortOutput(BRSHW_PORT_FR0A_TX);
                          5513	#2009:   BrsHwInitPortInput(BRSHW_PORT_FR0A_RX, BRSHW_PORT_MUX_FR0A_RX);
                          5514	#2010:   BrsHwInitPortOutput(BRSHW_PORT_FR0A_TXEN);
                          5515	#2011:   /*BrsHwInitPortInput(BRSHW_PORT_FR0A_ERRNA); ERRNA-Pin not necessary on this platform*/
                          5516	#2012: #   if defined(_BRSHW_PORT_FR0A_TRCV_STB)
                          5517	#2013:   BrsHwInitPortOutput(BRSHW_PORT_FR0A_TRCV_STB);
                          5518	#2014:   BrsHwPort_SetLevel(BRSHW_PORT_FR0A_TRCV_STB, BRSHW_PORT_LOGIC_HIGH);
                          5519	#2015: #   endif
                          5520	#2016: #   if defined (_BRSHW_PORT_FR0A_TRCV_EN)
                          5521	#2017:   BrsHwInitPortOutput(BRSHW_PORT_FR0A_TRCV_EN);
                          5522	#2018:   BrsHwPort_SetLevel(BRSHW_PORT_FR0A_TRCV_EN, BRSHW_PORT_LOGIC_HIGH);
                          5523	#2019: #   endif
                          5524	#2020: #  endif /*FR_CHANNEL_A_USED*/
                          5525	#2022: #  if (FR_CHANNEL_B_USED == STD_ON)
                          5526	#2023:   BrsHwInitPortOutput(BRSHW_PORT_FR0B_TX);
                          5527	#2024:   BrsHwInitPortInput(BRSHW_PORT_FR0B_RX, BRSHW_PORT_MUX_FR0B_RX);
                          5528	#2025:   BrsHwInitPortOutput(BRSHW_PORT_FR0B_TXEN);
                          5529	#2026:   /*BrsHwInitPortInput(BRSHW_PORT_FR0B_ERRNA); ERRNA-Pin not necessary on this platform */
                          5530	#2027: #   if defined(_BRSHW_PORT_FR0B_TRCV_STB)
                          5531	#2028:   BrsHwInitPortOutput(BRSHW_PORT_FR0B_TRCV_STB);

                                   Fri Apr 10 08:31:37 2020           Page 100
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                          5532	#2029:   BrsHwPort_SetLevel(BRSHW_PORT_FR0B_TRCV_STB, BRSHW_PORT_LOGIC_HIGH);
                          5533	#2030: #   endif
                          5534	#2031: #   if defined (_BRSHW_PORT_FR0B_TRCV_EN)
                          5535	#2032:   BrsHwInitPortOutput(BRSHW_PORT_FR0B_TRCV_EN);
                          5536	#2033:   BrsHwPort_SetLevel(BRSHW_PORT_FR0B_TRCV_EN, BRSHW_PORT_LOGIC_HIGH);
                          5537	#2034: #   endif
                          5538	#2035: #  endif /*FR_CHANNEL_B_USED*/
                          5539	#2036: # endif /*VGEN_ENABLE_DRVFR__BASEASR*/
                          5540	#2038: /*******************************************************************************
                          5541	#2039:   ETHERNET driver
                          5542	#2040: ********************************************************************************/
                          5543	#2041: # if defined (VGEN_ENABLE_DRVETH__BASEASR)
                          5544	#2042:   /* -- Transmitter signals -- */
                          5545	#2043:   BrsHwInitPortInput(BRSHW_PORT_ETH0_REFCLK, BRSHW_PORT_MUX_ETH0_REFCLK);
                          5546	#2044:   BrsHwInitPortOutput(BRSHW_PORT_ETH0_TXD0);
                          5547	#2045:   BrsHwInitPortOutput(BRSHW_PORT_ETH0_TXD1);
                          5548	#2046: #  if defined (_BRSHW_PORT_ETH0_TXD2)
                          5549	#2047:   /* Transmit signal 2 is obsolete within RMII */
                          5550	#2048:   BrsHwInitPortOutput(BRSHW_PORT_ETH0_TXD2);
                          5551	#2049: #  endif
                          5552	#2050: #  if defined (_BRSHW_PORT_ETH0_TXD3)
                          5553	#2051:   /* Transmit signal 3 is obsolete within RMII */
                          5554	#2052:   BrsHwInitPortOutput(BRSHW_PORT_ETH0_TXD3);
                          5555	#2053: #  endif
                          5556	#2054:   BrsHwInitPortOutput(BRSHW_PORT_ETH0_TXEN);
                          5557	#2055: #  if defined (_BRSHW_PORT_ETH0_TXER)
                          5558	#2056:   /* Transmit Error signal is only optional within MII and obsolete within RMII */
                          5559	#2057:   BrsHwInitPortOutput(BRSHW_PORT_ETH0_TXER);
                          5560	#2058: #  endif
                          5561	#2059: #  if defined (_BRSHW_PORT_ETH0_RXER)
                          5562	#2060:   BrsHwInitPortInput(BRSHW_PORT_ETH0_RXER, BRSHW_PORT_MUX_ETH0_RXER);
                          5563	#2061: #  endif
                          5564	#2063:   /* -- Receiver signals -- */
                          5565	#2064: #  if defined (_BRSHW_PORT_ETH0_RXCLK)
                          5566	#2065:   /* Receive clock signal is obsolete within RMII */
                          5567	#2066:   BrsHwInitPortInput(BRSHW_PORT_ETH0_RXCLK, BRSHW_PORT_MUX_ETH0_RXCLK);
                          5568	#2067: #  endif
                          5569	#2068:   BrsHwInitPortInput(BRSHW_PORT_ETH0_RXD0, BRSHW_PORT_MUX_ETH0_RXD0);
                          5570	#2069:   BrsHwInitPortInput(BRSHW_PORT_ETH0_RXD1, BRSHW_PORT_MUX_ETH0_RXD1);
                          5571	#2070: #  if defined (_BRSHW_PORT_ETH0_RXD2)
                          5572	#2071:   /* Receive signal 2 is obsolete within RMII */
                          5573	#2072:   BrsHwInitPortInput(BRSHW_PORT_ETH0_RXD2, BRSHW_PORT_MUX_ETH0_RXD2);
                          5574	#2073: #  endif
                          5575	#2074: #  if defined (_BRSHW_PORT_ETH0_RXD3)
                          5576	#2075:   /* Receive signal 3 is obsolete within RMII */
                          5577	#2076:   BrsHwInitPortInput(BRSHW_PORT_ETH0_RXD3, BRSHW_PORT_MUX_ETH0_RXD3);
                          5578	#2077: #  endif
                          5579	#2078: #  if defined (BRSHW_SIU_GROUP_E)
                          5580	#2079:   BrsHwInitPortInput(BRSHW_PORT_ETH0_CRS, BRSHW_PORT_MUX_ETH0_CRS);
                          5581	#2080:   BrsHwInitPortInput(BRSHW_PORT_ETH0_RXDV, BRSHW_PORT_MUX_ETH0_RXDV);
                          5582	#2081:   BrsHwInitPortInput(BRSHW_PORT_ETH0_COL, BRSHW_PORT_MUX_ETH0_COL);
                          5583	#2082: #  else
                          5584	#2083: BrsHwInitPortInput(BRSHW_PORT_ETH0_CRSDV, BRSHW_PORT_MUX_ETH0_CRSDV);
                          5585	#2084: #  endif
                          5586	#2085:   /* -- Management signals -- */
                          5587	#2086:   BrsHwInitPortInput(BRSHW_PORT_ETH0_MDIO, BRSHW_PORT_MUX_ETH0_MDIO);

                                   Fri Apr 10 08:31:37 2020           Page 101
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                          5588	#2087:   BrsHwInitPortOutput(BRSHW_PORT_ETH0_MDIO);
                          5589	#2088: #  if defined (_BRSHW_PORT_ETH0_MDC)
                          5590	#2089:   /* Management data clock not always needed */
                          5591	#2090:   BrsHwInitPortOutput(BRSHW_PORT_ETH0_MDC);
                          5592	#2091: #  endif
                          5593	#2093: #  if defined (_BRSHW_PORT_ETH0_TRCV_EN)
                          5594	#2094:   BrsHwInitPortInput(BRSHW_PORT_ETH0_TRCV_EN, BRSHW_PORT_MUX_ETH0_TRCV_EN);
                          5595	#2095:   BrsHwPort_SetLevel(BRSHW_PORT_ETH0_TRCV_EN, BRSHW_PORT_LOGIC_HIGH);
                          5596	#2096: #  endif
                          5597	#2097: # endif /*VGEN_ENABLE_DRVETH__BASEASR*/
                          5598	#2099: #endif /*!VGEN_ENABLE_DRVPORT*/
                          5599	#2100: }
                          5600	#2102: #if defined (BRSHW_ENABLE_TIMER_INTERRUPT)
                          5601	#2103: /*****************************************************************************/
                          5602	#2104: /**
                          5603	#2105:  * @brief      Programmable Interrupt Timer, Timer initialization for 'FakeOS'
                          5604	#2106:  *             1ms time base generation
                          5605	#2107:  * @pre        Interrupt vector must be correct configured and the ISR
                          5606	#2108:  *             function itself should exist.
                          5607	#2109:  * @param[in]  -
                          5608	#2110:  * @param[out] -
                          5609	#2111:  * @return     -
                          5610	#2112:  * @context    Function is called from main@BrsMain at power on initialization.
                          5611	#2113:  */
                          5612	#2114: /*****************************************************************************/
                          5613	#2115: void BrsHwTimeBaseInitPowerOn(void)
                          5614	#2116: {
                          5615	#2117: #if defined (BRSHW_TIMER_GROUP_A)
                          5616	#2118:   PIT_MCR   = (uint32)0x01;  /* Enable the clock for timer0, timer is stopped in debug mode. */
                          5617	#2119: # if defined (BRSHW_FMPLL_GROUP_A) || defined (BRSHW_FMPLL_GROUP_B)
                          5618	#2120:   PIT_LDVAL0 = (uint32) (BRS_TIMEBASE_CLOCK * 1000/4); /* Timer0 load value register (1/{x}Mhz * {x}*1000 = 1ms) Hint: With this PLL the PIT is counting with CPU-Frequency/4! */
                          5619	#2121: # else
                          5620	#2122:   PIT_LDVAL0 = (uint32) (BRS_TIMEBASE_CLOCK * 1000);   /* Timer0 load value register (1/{x}Mhz * {x}*1000 = 1ms) */
                          5621	#2123: # endif
                          5622	#2124:   PIT_TFLG0  = 0x1; /* Clear the timer0 interrupt */
                          5623	#2125:   PIT_TCTRL0 = 0x3; /* Timer0 interrupt and Timer enabled */
                          5624	#2126: #endif
                          5625	#2128: #if defined (BRSHW_TIMER_GROUP_B)
                          5626	#2129:   EMIOS_MCR = 0x1400F900;          /* Global prescaler=250 -> reg value = 249 */
                          5627	#2130:   EMIOS_CADR0 =BRS_TIMEBASE_CLOCK; /* Formula: Compare Value = (CPU_FREQUENCY * 1ms / Prescaler) !!internal compare registers are 16 Bit -> max. compareval.=0xFFFF!! visagh: /2 Clock Prescaler available and can not be disabled! -> visjhr: /4 prescaler on hardware implemented for emiosA/B -> manual is wrong */
                          5628	#2131:   EMIOS_CCR0 = 0x020202D4;         /* Modulos up/down counter buffered mode, prescaler=1  */
                          5629	#2132: #endif
                          5630	#2133: }
                          5631	#2135: /*****************************************************************************/
                          5632	#2136: /**
                          5633	#2137:  * @brief      Timer interrupt for the 'FakeOS' 1ms time base generation.
                          5634	#2138:  *             This ISR function is not necessary if an OS is used!
                          5635	#2139:  * @pre        Interrupt vector must be correct configured and the ISR
                          5636	#2140:  *             function itself should exist.
                          5637	#2141:  * @param[in]  -
                          5638	#2142:  * @param[out] -
                          5639	#2143:  * @return     -
                          5640	#2144:  * @context    Function is called from interrupt vector table if the assigned
                          5641	#2145:  *             timer has set its interrupt flag.
                          5642	#2146:  */
                          5643	#2147: /*****************************************************************************/

                                   Fri Apr 10 08:31:37 2020           Page 102
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                          5644	#2148: void BrsHwTimeBaseInterrupt(void)
                          5645	#2149: {
                          5646	#2150:   /* clear Interrupt of timer0 */
                          5647	#2151: # if defined (BRSHW_TIMER_GROUP_A)
                          5648	#2152:   PIT_TFLG0 = 0x1;
                          5649	#2153: # endif
                          5650	#2155: # if defined (BRSHW_TIMER_GROUP_B)
                          5651	#2156:   EMIOS_CSR0 = 0x1;
                          5652	#2157: # endif
                          5653	#2159:   gbBrsMainIsrMilliSecondFlag++;
                          5654	#2160: }
                          5655	#2161: #else
                          5656	#2162: /* BrsHwTimeBaseInitPowerOn() and BrsHwTimeBaseInterrupt() removed by Organi, because of ALM attributes of project */
                          5657	#2163: #endif /*BRSHW_ENABLE_TIMER_INTERRUPT*/
                          5658	#2165: /*****************************************************************************/
                          5659	#2166: /**
                          5660	#2167:  * @brief      Disable the global system interrupt and initialize the INT
                          5661	#2168:  *             lock handler variables.
                          5662	#2169:  * @pre        Must be the first function call in main@BrsMain
                          5663	#2170:  * @param[in]  -
                          5664	#2171:  * @param[out] -
                          5665	#2172:  * @return     -
                          5666	#2173:  * @context    Function is called from main@BrsMain at power on initialization
                          5667	#2174:  */
                          5668	#2175: /*****************************************************************************/
                          5669	#2176: void BrsHwDisableInterruptAtPowerOn(void)
                          5670	#2177: {
                          5671	#2178:   bBrsHwIntDiCounter = 0;
                          5672	#2180:   asm(" wrteei 0"); /* Disable external interrupts */
                          5673	#2181: }
                          5674	#2183: /*****************************************************************************/
                          5675	#2184: /**
                          5676	#2185:  * @brief      Enable the global system interrupt the first time
                          5677	#2186:  * @pre        Must be called after all initializations are done
                          5678	#2187:  * @param[in]  -
                          5679	#2188:  * @param[out] -
                          5680	#2189:  * @return     -
                          5681	#2190:  * @context    Function is called from main@BrsMain at power on initialization
                          5682	#2191:  */
                          5683	#2192: /*****************************************************************************/
                          5684	#2193: void BrsHwEnableInterruptAtPowerOn(void)
                          5685	#2194: {
                          5686	#2195: #if defined (BRS_OS_USECASE_BRS) && !defined (BRS_ENABLE_FBL_SUPPORT)
                          5687	#2196:   BrsHwConfigureInterruptsAtPowerOn();
                          5688	#2197: #else
                          5689	#2198:   /* With OsGen7, OS-APIs have to be used for this */
                          5690	#2199:   /*BrsHwConfigureInterruptsAtPowerOn();*/
                          5691	#2200: #endif
                          5692	#2202:   asm(" wrteei 1");
                          5693	#2203: }
                          5694	#2205: #if defined (BRS_OS_USECASE_BRS) && !defined (BRS_ENABLE_FBL_SUPPORT)
                          5695	#2206: /*****************************************************************************/
                          5696	#2207: /**
                          5697	#2208:  * @brief      This function has to be used to initialize the used interrupts.
                          5698	#2209:  * @pre        -
                          5699	#2210:  * @param[in]  -

                                   Fri Apr 10 08:31:37 2020           Page 103
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                          5700	#2211:  * @param[out] -
                          5701	#2212:  * @return     -
                          5702	#2213:  * @context    Function is called from BrsHwEnableInterruptAtPowerOn or EcuM-DriverInitThree
                          5703	#2214:  */
                          5704	#2215: /*****************************************************************************/
                          5705	#2216: void BrsHwConfigureInterruptsAtPowerOn(void)
                          5706	#2217: {
                          5707	#2218:   uint16 i = 0;
                          5708	#2220:   /* dummy to prevent compiler warnings */
                          5709	#2221:   i=i;
                          5710	#2223: # if defined (BRSHW_INTERRUPT_TABLE_GROUP_A)
                          5711	#2224:   #define BRSHW_ISR_REQUEST_SENT_TO_CPU0 0x8000
                          5712	#2225:   INTC_MCR = 0x1;      /* Hardware Vector enable */
                          5713	#2226:   INTC_CPR_0 = 0x0;    /* Ensure CPU 0 INTC's current priority is 0 */
                          5714	#2228: #  if defined (BRSHW_TIMER_GROUP_A)
                          5715	#2229:   INTC_PSR(226) = 0x32 | BRSHW_ISR_REQUEST_SENT_TO_CPU0; /* cyclic timer interrupt on processor 2 */
                          5716	#2230: #  endif
                          5717	#2232: #  if defined (VGEN_ENABLE_CAN_DRV)
                          5718	#2233: #   if defined (BRSHW_USED_CANCELL_DEFAULT)
                          5719	#2234: #    if defined (kCanPhysToLogChannelIndex_0)
                          5720	#2235:   for (i=520; i<=530; i++)
                          5721	#2236:   {
                          5722	#2237:     INTC_PSR(i) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          5723	#2238:   }
                          5724	#2239: #    endif
                          5725	#2240: #    if defined (kCanPhysToLogChannelIndex_1)
                          5726	#2241:   for (i=533; i<=543; i++)
                          5727	#2242:   {
                          5728	#2243:     INTC_PSR(i) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          5729	#2244:   }
                          5730	#2245: #    endif
                          5731	#2246: #    if defined (kCanPhysToLogChannelIndex_2)
                          5732	#2247:   for (i=546; i<=556; i++)
                          5733	#2248:   {
                          5734	#2249:     INTC_PSR(i) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          5735	#2250:   }
                          5736	#2251: #    endif
                          5737	#2252: #   endif /*BRSHW_USED_CANCELL_DEFAULT*/
                          5738	#2253: #   if defined (BRSHW_USED_CANCELL_MCAN)
                          5739	#2254: #    if defined (kCan_30_McanPhysToLogChannelIndex_0)
                          5740	#2255:     INTC_PSR(557) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          5741	#2256: #    endif
                          5742	#2257: #    if defined (kCan_30_McanPhysToLogChannelIndex_0)
                          5743	#2258:     INTC_PSR(558) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          5744	#2259: #    endif
                          5745	#2260: #   endif /*BRSHW_USED_CANCELL_MCAN*/
                          5746	#2261: #  endif /*VGEN_ENABLE_CAN_DRV*/
                          5747	#2263: #  if defined (VGEN_ENABLE_LIN_DRV)
                          5748	#2264: #   if defined (LIN_ENABLE_HARDWARE_INTERFACE_0)
                          5749	#2265:   INTC_PSR(376) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          5750	#2266:   INTC_PSR(377) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          5751	#2267:   INTC_PSR(378) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          5752	#2268: #   endif
                          5753	#2269: #   if defined (LIN_ENABLE_HARDWARE_INTERFACE_1)
                          5754	#2270:   INTC_PSR(380) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          5755	#2271:   INTC_PSR(381) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;

                                   Fri Apr 10 08:31:37 2020           Page 104
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                          5756	#2272:   INTC_PSR(382) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          5757	#2273: #   endif
                          5758	#2274: #   if defined (LIN_ENABLE_HARDWARE_INTERFACE_2)
                          5759	#2275:   INTC_PSR(384) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          5760	#2276:   INTC_PSR(385) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          5761	#2277:   INTC_PSR(386) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          5762	#2278: #   endif
                          5763	#2279: #   if defined (LIN_ENABLE_HARDWARE_INTERFACE_3)
                          5764	#2280:   INTC_PSR(388) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          5765	#2281:   INTC_PSR(389) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          5766	#2282:   INTC_PSR(390) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          5767	#2283: #   endif
                          5768	#2284: #  endif /*VGEN_ENABLE_LIN_DRV*/
                          5769	#2285:   
                          5770	#2286: #  if defined (VGEN_ENABLE_DRVFR__BASEASR)
                          5771	#2287:   for (i=453; i<=462; i++)
                          5772	#2288:   {
                          5773	#2289:     #error "currently not tested!"
                          5774	#2290:     INTC_PSR(i) = 0x4 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          5775	#2291:   }
                          5776	#2292: #  endif
                          5777	#2293: # endif /*BRSHW_INTERRUPT_TABLE_GROUP_A*/
                          5778	#2295: # if defined (BRSHW_INTERRUPT_TABLE_GROUP_B)
                          5779	#2296:   #define BRSHW_ISR_REQUEST_SENT_TO_CPU0 0x00
                          5780	#2297:   #define BRSHW_ISR_REQUEST_SENT_TO_CPU1 0xC0
                          5781	#2298:   INTC_MCR = 0x1;   /* Hardwar Vector enable */
                          5782	#2299:   INTC_CPR_0 = 0x0; /* Ensure CPU 0 INTC's current priority is 0 */
                          5783	#2300:   INTC_CPR_1 = 0x0; /* Ensure CPU 1 INTC's current priority is 0 */
                          5784	#2302:   INTC_PSR(46) = 0x04; /* Set external wakeup Priority = 0x4 */
                          5785	#2303:   INTC_PSR(47) = 0x04; /* Set external wakeup Priority = 0x4 */
                          5786	#2304:   INTC_PSR(48) = 0x04; /* Set external wakeup Priority = 0x4 */
                          5787	#2305:   INTC_PSR(49) = 0x04; /* Set external wakeup Priority = 0x4 */
                          5788	#2306:   INTC_PSR(50) = 0x04; /* Set external wakeup Priority = 0x4 */
                          5789	#2308:   /* Pit channel_0 */
                          5790	#2309:   INTC_PSR(301) = 0x05;
                          5791	#2311: #  if defined (VGEN_ENABLE_CAN_DRV)
                          5792	#2312: #   if defined (BRSHW_USED_CANCELL_DEFAULT)
                          5793	#2313: #    if defined (kCanPhysToLogChannelIndex_0)
                          5794	#2314:   for ( i=152; i<=172; i++)
                          5795	#2315:   {
                          5796	#2316:     INTC_PSR(i) = 0x02;
                          5797	#2317:   }
                          5798	#2318: #    endif
                          5799	#2319: #    if defined (kCanPhysToLogChannelIndex_1)
                          5800	#2320:   for (i=280; i<=300; i++)
                          5801	#2321:   {
                          5802	#2322:     INTC_PSR(i) = 0x02;
                          5803	#2323:   }
                          5804	#2324: #    endif
                          5805	#2325: #    if defined (kCanPhysToLogChannelIndex_2)
                          5806	#2326:   for (i=173; i<=193; i++)
                          5807	#2327:   {
                          5808	#2328:     INTC_PSR(i) = 0x02;
                          5809	#2329:   }
                          5810	#2330: #    endif
                          5811	#2331: #    if defined (kCanPhysToLogChannelIndex_3)

                                   Fri Apr 10 08:31:37 2020           Page 105
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                          5812	#2332:   for (i=308; i<=328; i++)
                          5813	#2333:   {
                          5814	#2334:     INTC_PSR(i) = 0x02;
                          5815	#2335:   }
                          5816	#2336: #    endif
                          5817	#2337: #    if defined (kCanPhysToLogChannelIndex_4)
                          5818	#2338:   for (i=329; i<=349; i++)
                          5819	#2339:   {
                          5820	#2340:     INTC_PSR(i) = 0x02;
                          5821	#2341:   }
                          5822	#2342: #    endif
                          5823	#2343: #   endif /*BRSHW_USED_CANCELL_DEFAULT*/
                          5824	#2344: #   if defined (BRSHW_USED_CANCELL_MCAN)
                          5825	#2345: #    if defined ( kCan_30_McanPhysToLogChannelIndex_0 ) || defined ( kCan_30_McanPhysToLogChannelIndex_1 ) /* M_CAN_0 + M_CAN_1 */
                          5826	#2346:   INTC_PSR(348) = 0x2;
                          5827	#2347: #    endif
                          5828	#2348: #   endif /*RSHW_USED_CANCELL_MCAN*/
                          5829	#2349: #  endif /*VGEN_ENABLE_CAN_DRV*/
                          5830	#2351: #  if defined (VGEN_ENABLE_LIN_DRV)
                          5831	#2352: #   if defined (LIN_ENABLE_HARDWARE_INTERFACE_0)
                          5832	#2353:   INTC_PSR(146) = 0x02; /* Set eSCI 0 Interupt Priority = 0x2 */
                          5833	#2354: #   endif
                          5834	#2355: #   if defined (LIN_ENABLE_HARDWARE_INTERFACE_1)
                          5835	#2356:   INTC_PSR(149) = 0x02; /* Set eSCI 1 Interupt Priority = 0x2 */
                          5836	#2357: #   endif
                          5837	#2358: #   if defined (LIN_ENABLE_HARDWARE_INTERFACE_2)
                          5838	#2359:   INTC_PSR(473) = 0x02; /* Set eSCI 2 Interupt Priority = 0x2 */
                          5839	#2360: #   endif
                          5840	#2361: #   if defined (LIN_ENABLE_HARDWARE_INTERFACE_3)
                          5841	#2362:   INTC_PSR(474) = 0x2; /* Set eSCI 3 Interupt Priority = 0x2 */
                          5842	#2363: #   endif
                          5843	#2364: #   if defined (LIN_ENABLE_HARDWARE_INTERFACE_4)
                          5844	#2365:   INTC_PSR(475) = 0x2; /* Set eSCI 4 Interupt Priority = 0x2 */
                          5845	#2366: #   endif
                          5846	#2367: #   if defined (LIN_ENABLE_HARDWARE_INTERFACE_5)
                          5847	#2368:   INTC_PSR(505) = 0x2; /* Set eSCI 5 Interupt Priority = 0x2 */
                          5848	#2369: #   endif
                          5849	#2370: #  endif /*VGEN_ENABLE_LIN_DRV*/
                          5850	#2372: #  if defined (VGEN_ENABLE_DRVFR__BASEASR)
                          5851	#2373:   /* FlexRay Interrupt init */
                          5852	#2374:   for (i=350; i<=357; i++)
                          5853	#2375:   {
                          5854	#2376:    INTC_PSR(i) = 0x03; /* Set FlexRay Interrupt Priority = 0x3 */ /* all interrupts */
                          5855	#2377:   }
                          5856	#2378: #  endif /*VGEN_ENABLE_DRVFR__BASEASR*/
                          5857	#2379:   
                          5858	#2380: #  if defined (VGEN_ENABLE_DRVETH__BASEASR)
                          5859	#2381:   #error "Ethernet IRQ not yet supported!"
                          5860	#2382: #  endif
                          5861	#2383: # endif /*BRSHW_INTERRUPT_TABLE_GROUP_B*/
                          5862	#2385: # if defined (BRSHW_INTERRUPT_TABLE_GROUP_C)
                          5863	#2386: #  if defined (BRS_DERIVATIVE_SPC574Sx)
                          5864	#2387:    #define BRSHW_ISR_REQUEST_SENT_TO_RUNNING_CPU 0x8000
                          5865	#2388:     INTC_MCR = 0x001;
                          5866	#2389:     INTC_CPR_0 = 0x0;
                          5867	#2390: #  else

                                   Fri Apr 10 08:31:37 2020           Page 106
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                          5868	#2391:   #define BRSHW_ISR_REQUEST_SENT_TO_RUNNING_CPU 0x2000 /* !!!CPU2!!! */
                          5869	#2392:   INTC_MCR = 0x100; /* Hardware Vector enable (for CPU2!) */
                          5870	#2393:   INTC_CPR_0 = 0x0; /* Ensure CPU 0 INTC's current priority is 0 */
                          5871	#2394: #   if !defined (BRS_DERIVATIVE_SPC574Kxx)
                          5872	#2395:   /* SPC574K only has a passive checker-core as Core1. This core has no own interrupt controller */
                          5873	#2396:   INTC_CPR_1 = 0x0; /* Ensure CPU 1 INTC's current priority is 0 */
                          5874	#2397: #   endif
                          5875	#2398:   INTC_CPR_2 = 0x0;    /* Ensure CPU 2 INTC's current priority is 0 */
                          5876	#2399: #  endif /*else BRS_DERIVATIVE_SPC574Sx*/
                          5877	#2401: #  if defined (BRSHW_TIMER_GROUP_A)
                          5878	#2402: #   if defined (BRS_DERIVATIVE_SPC574Kxx)
                          5879	#2403:   INTC_PSR(240) = 0x32 | BRSHW_ISR_REQUEST_SENT_TO_RUNNING_CPU; /* cyclic timer interrupt on processor 2 */
                          5880	#2404: #   else
                          5881	#2405:   /* for MPC5746M the datasheets seems to be wrong. Use 226 instead of 240 for timer interrupt */
                          5882	#2406:   INTC_PSR(226) = 0x32 | BRSHW_ISR_REQUEST_SENT_TO_RUNNING_CPU; /* cyclic timer interrupt on processor 2 */
                          5883	#2407: #   endif
                          5884	#2408: #  endif
                          5885	#2410: #  if defined (VGEN_ENABLE_CAN_DRV)
                          5886	#2411: #   if defined (kCanPhysToLogChannelIndex_0)
                          5887	#2412:   INTC_PSR(676) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_RUNNING_CPU; /* MCAN0/TTCAN Line0 combined interrupt on processor 0 */
                          5888	#2413:   INTC_PSR(677) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_RUNNING_CPU; /* MCAN0/TTCAN Line1 combined interrupt on processor 0 */
                          5889	#2414: #   endif
                          5890	#2415: #   if defined (kCanPhysToLogChannelIndex_1)
                          5891	#2416:   INTC_PSR(688) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_RUNNING_CPU; /* MCAN1 Line0 combined interrupt on processor 0 */
                          5892	#2417:   INTC_PSR(689) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_RUNNING_CPU; /* MCAN1 Line1 combined interrupt on processor 0 */
                          5893	#2418: #   endif
                          5894	#2419: #   if defined (kCanPhysToLogChannelIndex_2)
                          5895	#2420:   INTC_PSR(690) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_RUNNING_CPU; /* MCAN2 Line0 combined interrupt on processor 0 */
                          5896	#2421:   INTC_PSR(691) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_RUNNING_CPU; /* MCAN2 Line1 combined interrupt on processor 0 */
                          5897	#2422: #   endif
                          5898	#2423: #   if defined (kCanPhysToLogChannelIndex_3)
                          5899	#2424:   INTC_PSR(692) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_RUNNING_CPU; /* MCAN3 Line0 combined interrupt on processor 0 */
                          5900	#2425:   INTC_PSR(693) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_RUNNING_CPU; /* MCAN3 Line1 combined interrupt on processor 0 */
                          5901	#2426: #   endif
                          5902	#2427: #   if defined (kCanPhysToLogChannelIndex_4)
                          5903	#2428:   INTC_PSR(694) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_RUNNING_CPU; /* MCAN3 Line0 combined interrupt on processor 0 */
                          5904	#2429:   INTC_PSR(695) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_RUNNING_CPU; /* MCAN3 Line1 combined interrupt on processor 0 */
                          5905	#2430: #   endif
                          5906	#2431: #  endif /*VGEN_ENABLE_CAN_DRV*/
                          5907	#2433: #  if defined (VGEN_ENABLE_LIN_DRV)
                          5908	#2434: #   if defined (LIN_ENABLE_HARDWARE_INTERFACE_0)
                          5909	#2435:   INTC_PSR(376) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_RUNNING_CPU;
                          5910	#2436:   INTC_PSR(377) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_RUNNING_CPU;
                          5911	#2437:   INTC_PSR(378) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_RUNNING_CPU;
                          5912	#2438: #   endif
                          5913	#2439: #   if defined (LIN_ENABLE_HARDWARE_INTERFACE_1)
                          5914	#2440:   INTC_PSR(380) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_RUNNING_CPU;
                          5915	#2441:   INTC_PSR(381) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_RUNNING_CPU;
                          5916	#2442:   INTC_PSR(382) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_RUNNING_CPU;
                          5917	#2443: #   endif
                          5918	#2444: #   if defined (LIN_ENABLE_HARDWARE_INTERFACE_2)
                          5919	#2445:   INTC_PSR(384) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_RUNNING_CPU;
                          5920	#2446:   INTC_PSR(385) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_RUNNING_CPU;
                          5921	#2447:   INTC_PSR(386) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_RUNNING_CPU;
                          5922	#2448: #   endif
                          5923	#2449: #   if defined (LIN_ENABLE_HARDWARE_INTERFACE_3)

                                   Fri Apr 10 08:31:37 2020           Page 107
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                          5924	#2450:   INTC_PSR(388) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_RUNNING_CPU;
                          5925	#2451:   INTC_PSR(389) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_RUNNING_CPU;
                          5926	#2452:   INTC_PSR(390) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_RUNNING_CPU;
                          5927	#2453: #   endif
                          5928	#2454: #   if defined (LIN_ENABLE_HARDWARE_INTERFACE_14)
                          5929	#2455:   INTC_PSR(432) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_RUNNING_CPU;
                          5930	#2456:   INTC_PSR(433) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_RUNNING_CPU;
                          5931	#2457:   INTC_PSR(434) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_RUNNING_CPU;
                          5932	#2458: #   endif
                          5933	#2459: #   if defined (LIN_ENABLE_HARDWARE_INTERFACE_15)
                          5934	#2460:   INTC_PSR(436) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_RUNNING_CPU;
                          5935	#2461:   INTC_PSR(437) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_RUNNING_CPU;
                          5936	#2462:   INTC_PSR(438) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_RUNNING_CPU;
                          5937	#2463: #   endif
                          5938	#2464: #  endif /*VGEN_ENABLE_LIN_DRV*/
                          5939	#2466: #  if defined (VGEN_ENABLE_DRVFR__BASEASR)
                          5940	#2467:   for (i=453; i<=462; i++)
                          5941	#2468:   {
                          5942	#2469:     #error "currently not tested!"
                          5943	#2470:     INTC_PSR(i) = 0x4 | BRSHW_ISR_REQUEST_SENT_TO_RUNNING_CPU;
                          5944	#2471:   }
                          5945	#2472: #  endif
                          5946	#2473: # endif /*BRSHW_INTERRUPT_TABLE_GROUP_C*/
                          5947	#2475: # if defined (BRSHW_INTERRUPT_TABLE_GROUP_D)
                          5948	#2476:   #define BRSHW_ISR_REQUEST_SENT_TO_CPU0 0x8000
                          5949	#2477:   INTC_MCR = 0x1;   /* Hardware Vector enable */
                          5950	#2478:   INTC_CPR_0 = 0x0; /* Ensure CPU 0 INTC's current priority is 0 */
                          5951	#2479: #  if !defined (BRS_DERIVATIVE_PC580000x)
                          5952	#2480:   INTC_CPR_1 = 0x0; /* Ensure CPU 1 INTC's current priority is 0 */
                          5953	#2481: #  endif
                          5954	#2483: #  if defined (BRSHW_TIMER_GROUP_B)
                          5955	#2484:   INTC_PSR(16) = 0xF | BRSHW_ISR_REQUEST_SENT_TO_CPU0; /* cyclic timer interrupt on processor 0 */
                          5956	#2485: #  endif
                          5957	#2487: #  if defined (VGEN_ENABLE_CAN_DRV)
                          5958	#2488: #   if defined (kCanPhysToLogChannelIndex_0)
                          5959	#2489:       for (i=52; i<=74; i++)
                          5960	#2490:   {
                          5961	#2491:     INTC_PSR(i) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          5962	#2492:   }
                          5963	#2493: #     if defined (C_ENABLE_MB64TO95)
                          5964	#2494:       INTC_PSR(287) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          5965	#2495: #     endif
                          5966	#2496: #     if defined (C_ENABLE_MB96TO127)
                          5967	#2497:       INTC_PSR(288) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          5968	#2498: #     endif
                          5969	#2499: #   endif
                          5970	#2500: #   if defined (kCanPhysToLogChannelIndex_1)
                          5971	#2501:   for (i=75; i<=97; i++)
                          5972	#2502:   {
                          5973	#2503:     INTC_PSR(i) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          5974	#2504:   } 
                          5975	#2505: #     if defined (C_ENABLE_MB64TO95)
                          5976	#2506:       INTC_PSR(289) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          5977	#2507: #     endif
                          5978	#2508: #     if defined (C_ENABLE_MB96TO127)
                          5979	#2509:       INTC_PSR(290) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;

                                   Fri Apr 10 08:31:37 2020           Page 108
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                          5980	#2510: #     endif
                          5981	#2511: #   endif
                          5982	#2512: #    if defined (kCanPhysToLogChannelIndex_2)
                          5983	#2513:       for (i=239; i<=261; i++)
                          5984	#2514:       {
                          5985	#2515:         INTC_PSR(i) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          5986	#2516:       }
                          5987	#2517: #     if defined (C_ENABLE_MB64TO95)
                          5988	#2518:       INTC_PSR(291) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          5989	#2519: #     endif
                          5990	#2520: #     if defined (C_ENABLE_MB96TO127)
                          5991	#2521:       INTC_PSR(292) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          5992	#2522: #     endif
                          5993	#2523: #   endif
                          5994	#2524: #  endif /*VGEN_ENABLE_CAN_DRV*/
                          5995	#2526: #  if defined (VGEN_ENABLE_LIN_DRV)
                          5996	#2527: #   if defined (LIN_ENABLE_HARDWARE_INTERFACE_0)
                          5997	#2528: #    if defined (BRS_DERIVATIVE_PC580000x) || defined (BRS_DERIVATIVE_PC580002x)
                          5998	#2529:       INTC_PSR(51) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0; /* SCI LIN*/
                          5999	#2530: #    elif defined (BRS_DERIVATIVE_PC580003x)
                          6000	#2531:       for (i=262; i<=264; i++)
                          6001	#2532:       {
                          6002	#2533:         INTC_PSR(i) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          6003	#2534:       }
                          6004	#2535: #    endif
                          6005	#2536: #   endif
                          6006	#2537: #   if defined (LIN_ENABLE_HARDWARE_INTERFACE_1)
                          6007	#2538: #    if defined (BRS_DERIVATIVE_PC580003x)
                          6008	#2539:       for (i=265; i<=267; i++)
                          6009	#2540:       {
                          6010	#2541:         INTC_PSR(i) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          6011	#2542:       }
                          6012	#2543: #    endif
                          6013	#2544: #   endif
                          6014	#2545: #  endif
                          6015	#2546: #  if defined (VGEN_ENABLE_DRVFR__BASEASR)
                          6016	#2547:   for (i=98; i<=108; i++)
                          6017	#2548:   {
                          6018	#2549:     INTC_PSR(i) = 0x4 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          6019	#2550:   }
                          6020	#2551: #  endif
                          6021	#2552: # endif /*BRSHW_INTERRUPT_TABLE_GROUP_D*/
                          6022	#2554: # if defined (BRSHW_INTERRUPT_TABLE_GROUP_E)
                          6023	#2555:   #define BRSHW_ISR_REQUEST_SENT_TO_CPU0 0x8000
                          6024	#2556:   #define BRSHW_ISR_REQUEST_SENT_TO_CPU1 0x4000
                          6025	#2557:   INTC_MCR = 0x1;      /* Hardware Vector enable */
                          6026	#2558:   INTC_CPR_0 = 0x0;    /* Ensure CPU 0 INTC's current priority is 0 */
                          6027	#2560:   INTC_PSR(243) = 0x04 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;    /* Set external wakeup Priority = 0x4, processor 0 */
                          6028	#2561:   INTC_PSR(244) = 0x04 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;    /* Set external wakeup Priority = 0x4, processor 0 */
                          6029	#2563: #  if defined (BRSHW_TIMER_GROUP_A)
                          6030	#2564:   INTC_PSR(226) = 0x32 | BRSHW_ISR_REQUEST_SENT_TO_CPU0; /* cyclic timer interrupt on processor 0 */
                          6031	#2565: #  endif
                          6032	#2567: #  if defined (VGEN_ENABLE_CAN_DRV)
                          6033	#2568: #   if defined (kCanPhysToLogChannelIndex_0)
                          6034	#2569: #    if (MPC5748G_CUT == 1) || (!C_CAN_MAX_BUFFER_96)
                          6035	#2570:   for (i=565; i<=573; i++)

                                   Fri Apr 10 08:31:37 2020           Page 109
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                          6036	#2571: #    else
                          6037	#2572:   for (i=565; i<=574; i++)
                          6038	#2573: #    endif
                          6039	#2574:   {
                          6040	#2575:     INTC_PSR(i) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          6041	#2576:   }
                          6042	#2577: #   endif
                          6043	#2578: #   if defined (kCanPhysToLogChannelIndex_1)
                          6044	#2579: #    if (MPC5748G_CUT == 1) || (!C_CAN_MAX_BUFFER_96)
                          6045	#2580:   for (i=578; i<=585; i++)
                          6046	#2581: #    else
                          6047	#2582:   for (i=578; i<=586; i++)
                          6048	#2583: #    endif
                          6049	#2584:   {
                          6050	#2585:     INTC_PSR(i) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          6051	#2586:   }
                          6052	#2587: #   endif
                          6053	#2588: #   if defined (kCanPhysToLogChannelIndex_2)
                          6054	#2589: #    if (MPC5748G_CUT == 1) || (!C_CAN_MAX_BUFFER_96)
                          6055	#2590:   for (i=590; i<=597; i++)
                          6056	#2591: #    else
                          6057	#2592:   for (i=590; i<=598; i++)
                          6058	#2593: #    endif
                          6059	#2594:   {
                          6060	#2595:     INTC_PSR(i) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          6061	#2596:   }
                          6062	#2597: #   endif
                          6063	#2598: #   if defined (kCanPhysToLogChannelIndex_3)
                          6064	#2599: #    if (MPC5748G_CUT == 1) || (!C_CAN_MAX_BUFFER_96)
                          6065	#2600:   for (i=602; i<=609; i++)
                          6066	#2601: #    else
                          6067	#2602:   for (i=602; i<=610; i++)
                          6068	#2603: #    endif
                          6069	#2604:   {
                          6070	#2605:     INTC_PSR(i) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          6071	#2606:   }
                          6072	#2607: #   endif
                          6073	#2608: #   if defined (kCanPhysToLogChannelIndex_4)
                          6074	#2609: #    if (MPC5748G_CUT == 1) || (!C_CAN_MAX_BUFFER_96)
                          6075	#2610:   for (i=614; i<=621; i++)
                          6076	#2611: #    else
                          6077	#2612:   for (i=614; i<=622; i++)
                          6078	#2613: #    endif
                          6079	#2614:   {
                          6080	#2615:     INTC_PSR(i) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          6081	#2616:   }
                          6082	#2617: #   endif
                          6083	#2618: #   if defined (kCanPhysToLogChannelIndex_5)
                          6084	#2619: #    if (MPC5748G_CUT == 1) || (!C_CAN_MAX_BUFFER_96)
                          6085	#2620:   for (i=626; i<=633; i++)
                          6086	#2621: #    else
                          6087	#2622:   for (i=626; i<=634; i++)
                          6088	#2623: #    endif
                          6089	#2624:   {
                          6090	#2625:     INTC_PSR(i) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          6091	#2626:   }

                                   Fri Apr 10 08:31:37 2020           Page 110
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                          6092	#2627: #   endif
                          6093	#2628: #   if defined (kCanPhysToLogChannelIndex_6)
                          6094	#2629: #    if (MPC5748G_CUT == 1) || (!C_CAN_MAX_BUFFER_96)
                          6095	#2630:   for (i=638; i<=645; i++)
                          6096	#2631: #    else
                          6097	#2632:   for (i=638; i<=646; i++)
                          6098	#2633: #    endif
                          6099	#2634:   {
                          6100	#2635:     INTC_PSR(i) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          6101	#2636:   }
                          6102	#2637: #   endif
                          6103	#2638: #   if defined (kCanPhysToLogChannelIndex_7)
                          6104	#2639: #    if (MPC5748G_CUT == 1) || (!C_CAN_MAX_BUFFER_96)
                          6105	#2640:   for (i=650; i<=657; i++)
                          6106	#2641: #    else
                          6107	#2642:   for (i=650; i<=658; i++)
                          6108	#2643: #    endif
                          6109	#2644:   {
                          6110	#2645:     INTC_PSR(i) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          6111	#2646:   }
                          6112	#2647: #   endif
                          6113	#2648: #  endif /*VGEN_ENABLE_CAN_DRV*/
                          6114	#2650: #  if defined (VGEN_ENABLE_LIN_DRV)
                          6115	#2651: #   if defined (LIN_ENABLE_HARDWARE_INTERFACE_0)
                          6116	#2652:   INTC_PSR(376) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          6117	#2653:   INTC_PSR(377) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          6118	#2654:   INTC_PSR(378) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          6119	#2655: #   endif
                          6120	#2656: #   if defined (LIN_ENABLE_HARDWARE_INTERFACE_1)
                          6121	#2657:   INTC_PSR(379) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          6122	#2658:   INTC_PSR(380) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          6123	#2659:   INTC_PSR(381) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          6124	#2660: #   endif
                          6125	#2661: #   if defined (LIN_ENABLE_HARDWARE_INTERFACE_2)
                          6126	#2662:   INTC_PSR(382) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          6127	#2663:   INTC_PSR(383) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          6128	#2664:   INTC_PSR(384) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          6129	#2665: #   endif
                          6130	#2666: #   if defined (LIN_ENABLE_HARDWARE_INTERFACE_3)
                          6131	#2667:   INTC_PSR(385) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          6132	#2668:   INTC_PSR(386) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          6133	#2669:   INTC_PSR(387) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          6134	#2670: #   endif
                          6135	#2671: #   if defined (LIN_ENABLE_HARDWARE_INTERFACE_4)
                          6136	#2672:   INTC_PSR(388) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          6137	#2673:   INTC_PSR(389) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          6138	#2674:   INTC_PSR(390) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          6139	#2675: #   endif
                          6140	#2676: #   if defined (LIN_ENABLE_HARDWARE_INTERFACE_5)
                          6141	#2677:   INTC_PSR(391) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          6142	#2678:   INTC_PSR(392) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          6143	#2679:   INTC_PSR(393) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          6144	#2680: #   endif
                          6145	#2681: #   if defined (LIN_ENABLE_HARDWARE_INTERFACE_6)
                          6146	#2682:   INTC_PSR(394) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          6147	#2683:   INTC_PSR(395) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;

                                   Fri Apr 10 08:31:37 2020           Page 111
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                          6148	#2684:   INTC_PSR(396) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          6149	#2685: #   endif
                          6150	#2686: #   if defined (LIN_ENABLE_HARDWARE_INTERFACE_7)
                          6151	#2687:   INTC_PSR(397) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          6152	#2688:   INTC_PSR(398) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          6153	#2689:   INTC_PSR(399) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          6154	#2690: #   endif
                          6155	#2691: #   if defined (LIN_ENABLE_HARDWARE_INTERFACE_8)
                          6156	#2692:   INTC_PSR(400) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          6157	#2693:   INTC_PSR(401) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          6158	#2694:   INTC_PSR(402) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          6159	#2695: #   endif
                          6160	#2696: #   if defined (LIN_ENABLE_HARDWARE_INTERFACE_9)
                          6161	#2697:   INTC_PSR(403) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          6162	#2698:   INTC_PSR(404) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          6163	#2699:   INTC_PSR(405) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          6164	#2700: #   endif
                          6165	#2701: #   if defined (LIN_ENABLE_HARDWARE_INTERFACE_10)
                          6166	#2702:   INTC_PSR(406) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          6167	#2703:   INTC_PSR(407) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          6168	#2704:   INTC_PSR(408) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          6169	#2705: #   endif
                          6170	#2706: #   if defined (LIN_ENABLE_HARDWARE_INTERFACE_11)
                          6171	#2707:   INTC_PSR(409) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          6172	#2708:   INTC_PSR(410) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          6173	#2709:   INTC_PSR(411) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          6174	#2710: #   endif
                          6175	#2711: #   if defined (LIN_ENABLE_HARDWARE_INTERFACE_12)
                          6176	#2712:   INTC_PSR(412) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          6177	#2713:   INTC_PSR(413) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          6178	#2714:   INTC_PSR(414) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          6179	#2715: #   endif
                          6180	#2716: #   if defined (LIN_ENABLE_HARDWARE_INTERFACE_13)
                          6181	#2717:   INTC_PSR(415) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          6182	#2718:   INTC_PSR(416) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          6183	#2719:   INTC_PSR(417) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          6184	#2720: #   endif
                          6185	#2721: #   if defined (LIN_ENABLE_HARDWARE_INTERFACE_14)
                          6186	#2722:   INTC_PSR(418) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          6187	#2723:   INTC_PSR(419) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          6188	#2724:   INTC_PSR(420) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          6189	#2725: #   endif
                          6190	#2726: #   if defined (LIN_ENABLE_HARDWARE_INTERFACE_15)
                          6191	#2727:   INTC_PSR(421) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          6192	#2728:   INTC_PSR(422) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          6193	#2729:   INTC_PSR(423) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          6194	#2730: #   endif
                          6195	#2731: #   if defined (LIN_ENABLE_HARDWARE_INTERFACE_16)
                          6196	#2732:   INTC_PSR(424) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          6197	#2733:   INTC_PSR(425) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          6198	#2734:   INTC_PSR(426) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          6199	#2735: #   endif
                          6200	#2736: #   if defined (LIN_ENABLE_HARDWARE_INTERFACE_17)
                          6201	#2737:   INTC_PSR(427) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          6202	#2738:   INTC_PSR(428) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          6203	#2739:   INTC_PSR(429) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;

                                   Fri Apr 10 08:31:37 2020           Page 112
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                          6204	#2740: #   endif
                          6205	#2741: #  endif /*VGEN_ENABLE_LIN_DRV*/
                          6206	#2742:   
                          6207	#2743: #  if defined (VGEN_ENABLE_DRVFR__BASEASR)
                          6208	#2744:   for (i=453; i<=462; i++)
                          6209	#2745:   {
                          6210	#2746:     INTC_PSR(i) = 0x4 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          6211	#2747:   }
                          6212	#2748: #  endif
                          6213	#2749:   
                          6214	#2750: #  if defined (VGEN_ENABLE_DRVETH__BASEASR)
                          6215	#2751: #   if (MPC5748G_CUT == 1)
                          6216	#2752:   /* CUT1 has no "ENET Interrupt Group3" Interrupt */
                          6217	#2753:   for (i=210; i<=212; i++)
                          6218	#2754:   {
                          6219	#2755:     INTC_PSR(i) = 0x1 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          6220	#2756:   }
                          6221	#2757:   for (i=214; i<=218; i++)
                          6222	#2758:   {
                          6223	#2759:     INTC_PSR(i) = 0x1 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          6224	#2760:   }
                          6225	#2761: #   else
                          6226	#2762:   for (i=210; i<=218; i++)
                          6227	#2763:   {
                          6228	#2764:     INTC_PSR(i) = 0x1 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          6229	#2765:   }
                          6230	#2766: #   endif /*CUT1*/
                          6231	#2767: #  endif /*VGEN_ENABLE_DRVETH__BASEASR*/
                          6232	#2768: # endif /*BRSHW_INTERRUPT_TABLE_GROUP_E*/
                          6233	#2770: # if defined (BRSHW_INTERRUPT_TABLE_GROUP_F)
                          6234	#2771:   #define BRSHW_ISR_REQUEST_SENT_TO_CPU0 0x8000
                          6235	#2772:   INTC_MCR   = 0x1; /* Hardware Vector enable */
                          6236	#2773:   INTC_CPR_0 = 0x0; /* Ensure CPU 0 INTC's current priority is 0 */
                          6237	#2775: #  if defined (BRSHW_TIMER_GROUP_A)
                          6238	#2776:   INTC_PSR(226) = 0x32 | BRSHW_ISR_REQUEST_SENT_TO_CPU0; /* PIT0 IRQ */
                          6239	#2777: #  endif
                          6240	#2779: #  if defined (VGEN_ENABLE_CAN_DRV)
                          6241	#2780: #   if defined (kCanPhysToLogChannelIndex_0)
                          6242	#2781:   INTC_PSR(677) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;  /* FlexCAN_0_MB0_3    */
                          6243	#2782:   INTC_PSR(678) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;  /* FlexCAN_0_MB4_7    */
                          6244	#2783:   INTC_PSR(679) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;  /* FlexCAN_0_MB8_11   */
                          6245	#2784:   INTC_PSR(680) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;  /* FlexCAN_0_MB12_15  */
                          6246	#2785:   INTC_PSR(681) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;  /* FlexCAN_0_MB16_31  */
                          6247	#2787:   INTC_PSR(687) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;  /* FlexCAN_0_ERR      */
                          6248	#2788:   INTC_PSR(688) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;  /* FlexCAN_0_BOFF     */
                          6249	#2789: #   endif
                          6250	#2790: #   if defined (kCanPhysToLogChannelIndex_1)
                          6251	#2791:   INTC_PSR(690) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;  /* FlexCAN_1_MB0_3    */
                          6252	#2792:   INTC_PSR(691) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;  /* FlexCAN_1_MB4_7    */
                          6253	#2793:   INTC_PSR(692) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;  /* FlexCAN_1_MB8_11   */
                          6254	#2794:   INTC_PSR(693) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;  /* FlexCAN_1_MB12_15  */
                          6255	#2795:   INTC_PSR(694) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;  /* FlexCAN_1_MB16_31  */
                          6256	#2797:   INTC_PSR(700) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;  /* FlexCAN_1_ERR      */
                          6257	#2798:   INTC_PSR(701) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;  /* FlexCAN_1_BOFF     */
                          6258	#2799: #   endif
                          6259	#2800: #  endif /*VGEN_ENABLE_CAN_DRV*/

                                   Fri Apr 10 08:31:37 2020           Page 113
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                          6260	#2802: #   if defined (VGEN_ENABLE_LIN_DRV)
                          6261	#2803:   #error "LIN IRQ Priority not yet implemented!"
                          6262	#2804: #   endif
                          6263	#2806: #   if defined (VGEN_ENABLE_DRVFR__BASEASR)
                          6264	#2807:   #error "FlexRay IRQ Priority not yet implemented!"
                          6265	#2808: #   endif /*VGEN_ENABLE_DRVFR__BASEASR*/
                          6266	#2810: #   if defined (VGEN_ENABLE_DRVETH__BASEASR)
                          6267	#2811:   #error "Ethernet IRQ Priority not yet implemented!"
                          6268	#2812: #   endif
                          6269	#2813: # endif /*BRSHW_INTERRUPT_TABLE_GROUP_F*/
                          6270	#2815: # if defined (BRSHW_INTERRUPT_TABLE_GROUP_G)
                          6271	#2816:   #define BRSHW_ISR_REQUEST_SENT_TO_CPU0 0x8000
                          6272	#2817:   #define BRSHW_ISR_REQUEST_SENT_TO_CPU1 0x4000
                          6273	#2818:   INTC_MCR &= ~(0x00001101);
                          6274	#2819:   INTC_MCR |=   0x00000010;
                          6275	#2820:   INTC_CPR_0 = 0x0;    /* Ensure CPU 0 INTC's current priority is 0 */
                          6276	#2821:   INTC_CPR_1 = 0x0;    /* Ensure CPU 1 INTC's current priority is 0 */
                          6277	#2823:   INTC_PSR(243) = 0x04 | BRSHW_ISR_REQUEST_SENT_TO_CPU1;    /* Set external wakeup Priority = 0x4, processor 1 */
                          6278	#2824:   INTC_PSR(244) = 0x04 | BRSHW_ISR_REQUEST_SENT_TO_CPU1;    /* Set external wakeup Priority = 0x4, processor 1 */
                          6279	#2826: #  if defined (BRSHW_TIMER_GROUP_A)
                          6280	#2827:   INTC_PSR(226) = 0x32 | BRSHW_ISR_REQUEST_SENT_TO_CPU1; /* cyclic timer interrupt on processor 1 */
                          6281	#2828: #  endif
                          6282	#2830: #  if defined (VGEN_ENABLE_CAN_DRV)
                          6283	#2831: #   if defined (kCanPhysToLogChannelIndex_0)
                          6284	#2832:   for (i=677; i<=682; i++)
                          6285	#2833:   {
                          6286	#2834:     INTC_PSR(i) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU1;
                          6287	#2835:   }
                          6288	#2836: #   endif
                          6289	#2837: #   if defined (kCanPhysToLogChannelIndex_1)
                          6290	#2838:   for (i=683; i<=688; i++)
                          6291	#2839:   {
                          6292	#2840:     INTC_PSR(i) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU1;
                          6293	#2841:   }
                          6294	#2842: #   endif
                          6295	#2843: #   if defined (kCanPhysToLogChannelIndex_2)
                          6296	#2844:   for (i=689; i<=694; i++)
                          6297	#2845:   {
                          6298	#2846:     INTC_PSR(i) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU1;
                          6299	#2847:   }
                          6300	#2848: #   endif
                          6301	#2849: #   if defined (kCanPhysToLogChannelIndex_3)
                          6302	#2850:   for (i=695; i<=700; i++)
                          6303	#2851:   {
                          6304	#2852:     INTC_PSR(i) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU1;
                          6305	#2853:   }
                          6306	#2854: #   endif
                          6307	#2855: #  endif /*VGEN_ENABLE_CAN_DRV*/
                          6308	#2856:   
                          6309	#2857: #  if defined (VGEN_ENABLE_LIN_DRV)
                          6310	#2858: #   if defined (LIN_ENABLE_HARDWARE_INTERFACE_0)
                          6311	#2859:   for (i=376; i<=378; i++)
                          6312	#2860:   {
                          6313	#2861:     INTC_PSR(i) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU1;
                          6314	#2862:   }
                          6315	#2863: #   endif

                                   Fri Apr 10 08:31:37 2020           Page 114
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                          6316	#2864: #   if defined (LIN_ENABLE_HARDWARE_INTERFACE_1)
                          6317	#2865:   for (i=380; i<=382; i++)
                          6318	#2866:   {
                          6319	#2867:     INTC_PSR(i) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU1;
                          6320	#2868:   }
                          6321	#2869: #   endif
                          6322	#2870: #   if defined (LIN_ENABLE_HARDWARE_INTERFACE_2)
                          6323	#2871:   for (i=384; i<=386; i++)
                          6324	#2872:   {
                          6325	#2873:     INTC_PSR(i) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU1;
                          6326	#2874:   }
                          6327	#2875: #   endif
                          6328	#2876: #   if defined (LIN_ENABLE_HARDWARE_INTERFACE_3)
                          6329	#2877:   for (i=388; i<=390; i++)
                          6330	#2878:   {
                          6331	#2879:     INTC_PSR(i) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU1;
                          6332	#2880:   }
                          6333	#2881: #   endif
                          6334	#2882: #   if defined (LIN_ENABLE_HARDWARE_INTERFACE_4)
                          6335	#2883:   for (i=392; i<=394; i++)
                          6336	#2884:   {
                          6337	#2885:     INTC_PSR(i) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU1;
                          6338	#2886:   }
                          6339	#2887: #   endif
                          6340	#2888: #   if defined (LIN_ENABLE_HARDWARE_INTERFACE_5)
                          6341	#2889:   for (i=396; i<=398; i++)
                          6342	#2890:   {
                          6343	#2891:     INTC_PSR(i) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU1;
                          6344	#2892:   }
                          6345	#2893: #   endif
                          6346	#2894: #  endif /*VGEN_ENABLE_LIN_DRV*/
                          6347	#2895:   
                          6348	#2896: #  if defined (VGEN_ENABLE_DRVETH__BASEASR)
                          6349	#2897:   for (i=218; i<=220; i++)
                          6350	#2898:   {
                          6351	#2899:     INTC_PSR(i) = 0x1 | BRSHW_ISR_REQUEST_SENT_TO_CPU1;
                          6352	#2900:   }
                          6353	#2901: #  endif /*VGEN_ENABLE_DRVETH__BASEASR*/
                          6354	#2902: # endif /*BRSHW_INTERRUPT_TABLE_GROUP_G*/
                          6355	#2904:   /***********************************************************
                          6356	#2905:    * Software Vector Mode configuration (SW Dispatching)
                          6357	#2906:    ***********************************************************/
                          6358	#2907:   /* Description: For those derivatives which use SW dispatching, the below code
                          6359	#2908:    *              overwrites the default hardware vector configuration!
                          6360	#2909:    */
                          6361	#2910: # if defined (BRSHW_ENABLE_ISR_SW_DISPATCHING)
                          6362	#2911: #  if defined (BRSHW_INTERRUPT_TABLE_GROUP_C)
                          6363	#2912:   /* Used for MPCMPC5746M and MPC5777M */
                          6364	#2913:   INTC_MCR    = 0x0;                   /* Software Vector mode enabled */
                          6365	#2914:   INTC_ACKR_2 = (uint32)Intvecttable;  /* Configure the vector table base address */
                          6366	#2916: #  elif defined (BRSHW_INTERRUPT_TABLE_GROUP_E)
                          6367	#2917:   INTC_MCR    = 0x0;                   /* Software Vector Mode enabled */
                          6368	#2918:   INTC_ACKR_0 = (uint32)Intvecttable;  /* Configure the vector table base address for CPU0 */
                          6369	#2920: #  elif defined (BRSHW_INTERRUPT_TABLE_GROUP_F)
                          6370	#2921:   INTC_MCR    = 0x0;                   /* Software Vector Mode enabled */
                          6371	#2922:   INTC_ACKR_0 = (uint32)Intvecttable;  /* Configure the vector table base address for CPU0 */

                                   Fri Apr 10 08:31:37 2020           Page 115
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                          6372	#2924: #  else
                          6373	#2925:   #error " Software Vector Mode not yet supported for this IRQ Table Group"
                          6374	#2926: #  endif /*BRSHW_INTERRUPT_TABLE_GROUP_x*/
                          6375	#2927: # endif /*BRSHW_ENABLE_ISR_SW_DISPATCHING*/
                          6376	#2928: }
                          6377	#2929: #endif /*BRS_OS_USECASE_BRS&&!BRS_ENABLE_FBL_SUPPORT*/
                          6378	#2931: /*****************************************************************************/
                          6379	#2932: /**
                          6380	#2933:  * @brief      Disables the global interrupt of the micro. This is done in a
                          6381	#2934:  *             "save way" to allow also nested calls of BrsHwDisableInterrupt
                          6382	#2935:  *             and BrsHwRestoreInterrupt. The first call of BrsHwDisableInterrupt
                          6383	#2936:  *             stores the current state of the global INT flag and the last
                          6384	#2937:  *             call to BrsHwRestoreInterrupt restores the state.
                          6385	#2938:  * @pre        -
                          6386	#2939:  * @param[in]  -
                          6387	#2940:  * @param[out] -
                          6388	#2941:  * @return     -
                          6389	#2942:  * @context    Function is called from all modules to disable the global interrupt
                          6390	#2943:  */
                          6391	#2944: /*****************************************************************************/
                          6392	#2945: void BrsHwDisableInterrupt(void)
                          6393	#2946: {
                          6394	#2947:   /* No check for "overrun" of nested INT lock counter is performed, due to more
                          6395	#2948:   *  than 255 nested calls to BrsHwDisableInterrupt are very unlikely. */
                          6396	#2949:   if (bBrsHwIntDiCounter == 0)
                          6397	#2950:   {
                          6398	#2951:     asm(" wrteei 0"); /* Disable external interrupts */
                          6399	#2952:   }
                          6400	#2954:   bBrsHwIntDiCounter++;
                          6401	#2955: }
                          6402	#2957: /*****************************************************************************/
                          6403	#2958: /**
                          6404	#2959:  * @brief      Restores the state of the global interrupt of the micro. This
                          6405	#2960:  *             is done in a "save way" to allow also nested calls of
                          6406	#2961:  *             BrsHwDisableInterrupt and BrsHwRestoreInterrupt. The first call
                          6407	#2962:  *             of BrsHwDisableInterrupt stores the current state of the global
                          6408	#2963:  *             INT flag and the last call to BrsHwRestoreInterrupt restores the
                          6409	#2964:  *             state.
                          6410	#2965:  * @pre        -
                          6411	#2966:  * @param[in]  -
                          6412	#2967:  * @param[out] -
                          6413	#2968:  * @return     -
                          6414	#2969:  * @context    Function is called from all modules to enable the global interrupt
                          6415	#2970:  */
                          6416	#2971: /*****************************************************************************/
                          6417	#2972: void BrsHwRestoreInterrupt(void)
                          6418	#2973: {
                          6419	#2974:   /* Check for illegal call of BrsHwRestoreInterrupt. If this function is called
                          6420	#2975:    *  too often, the INT lock works incorrect. */
                          6421	#2976:   if (bBrsHwIntDiCounter == 0)
                          6422	#2977:   {
                          6423	#2978: #if defined (BRS_OS_USECASE_BRS) && !defined (BRS_ENABLE_FBL_SUPPORT)
                          6424	#2979:     BrsMainExceptionHandler( kBrsIllegalInterruptRestoration, BRSERROR_MODULE_BRSHW, (uint16)(__LINE__) );
                          6425	#2980: #else
                          6426	#2981:     /* Check is only performed, if no OS and no FBL are used */
                          6427	#2982: #endif

                                   Fri Apr 10 08:31:37 2020           Page 116
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                          6428	#2983:   }
                          6429	#2985:   bBrsHwIntDiCounter--;
                          6430	#2986:   if (bBrsHwIntDiCounter == 0)
                          6431	#2987:   {
                          6432	#2988:     asm(" wrteei 1");
                          6433	#2989:   }
                          6434	#2990: }
                          6435	#2992: /*****************************************************************************/
                          6436	#2993: /**
                          6437	#2994:  * @brief      restart ECU (issue a software reset or jump to startup code)
                          6438	#2995:  * @pre        -
                          6439	#2996:  * @param[in]  -
                          6440	#2997:  * @param[out] -
                          6441	#2998:  * @return     -
                          6442	#2999:  * @context    Function is called from e.g. ECU state handling
                          6443	#3000:  */
                          6444	#3001: /*****************************************************************************/
                          6445	#3002: void BrsHwSoftwareResetECU(void)
                          6446	#3003: {
                          6447	#3004:   BrsHwDisableInterrupt();
                          6448	#3006: #if defined (BRSHW_SIU_GROUP_B)
                          6449	#3007:   /* Derivatives, which do not contain Mode Entry Module for generating a reset, could generate an interanl system reaset via System Reset Control Register */
                          6450	#3008:   SIU_SRCR |= 0x80000000;
                          6451	#3009: #else
                          6452	#3010:   /* Reset the functional reset escalation threshold register */
                          6453	#3011:   RGM_FRET = RGM_FRET;
                          6454	#3013:   /* Sequence that mode transition are mannaged by hardware */
                          6455	#3014:   ME_MCTL = 0x00005AF0UL; /* Key access 1st step */
                          6456	#3015:   ME_MCTL = 0x0000A50FUL; /* Key access 2nd step */
                          6457	#3016: #endif
                          6458	#3018:   while (1)
                          6459	#3019:   {
                          6460	#3020:     /* Wait until watchdog reset occurs */
                          6461	#3021:   }
                          6462	#3022: }
                          6463	#3024: #if defined (BRS_ENABLE_SUPPORT_LEDS)          || \
                          6464	#3025:     defined (BRS_ENABLE_SUPPORT_TOGGLE_WD_PIN) || \
                          6465	#3026:     defined (BRS_ENABLE_SUPPORT_TOGGLE_CUSTOM_PIN)
                          6466	#3027: # if defined (BRS_ENABLE_FBL_SUPPORT)
                          6467	#3028:   #define BRS_START_SEC_RAM_CODE
                          6468	#3029:   #include "Brs_MemMap.h"   /* PRQA S 5087 *//* MD_MSR_19.1 */
                          6469	#3030: # endif
                          6470	#3031: /*****************************************************************************/
                          6471	#3032: /**
                          6472	#3033:  * @brief      This API is used to toggle a PortPin.
                          6473	#3034:  *             Per default, the following parameters are available:
                          6474	#3035:  *               BRSHW_TOGGLEPIN_LED
                          6475	#3036:  *               BRSHW_TOGGLEPIN_WD
                          6476	#3037:  *               BRSHW_TOGGLEPIN_CUSTOM
                          6477	#3038:  *             Depending pins have to be configured within BrsHw_Ports.h.
                          6478	#3039:  * @pre        -
                          6479	#3040:  * @param[in]  Pin has to configure the depending pin to be toggled
                          6480	#3041:  * @param[out] -
                          6481	#3042:  * @return     -
                          6482	#3043:  * @context    Function is called from all modules to set or clear a PortPin
                          6483	#3044:  */

                                   Fri Apr 10 08:31:37 2020           Page 117
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                          6484	#3045: /*****************************************************************************/
                          6485		.align	1
                          6486		.align	1
                          6487		.align	1
                          6488	..gh.f.p.3.a.1.r.0.e.8:
                          6489		.type	..gh.f.p.3.a.1.r.0.e.8,@object
                          6490		.size	..gh.f.p.3.a.1.r.0.e.8,0
                          6491		.global	BrsHwTogglePin
                          6492	BrsHwTogglePin:
0000001c 182106e0         6493		e_stwu	sp, -32(sp)
00000020 0080             6494		se_mflr	r0
00000022 1bc10918         6495		e_stmw	r30, 24(sp)
00000026 d901             6496		se_stw	r0, 36(sp)
                          6497	#	    .bf
                          6498	.LDW62:
                          6499	#3046: void BrsHwTogglePin(brsHw_TogglePin Pin)
                          6500	#3047: {
                          6501	#3048: #if defined (VGEN_ENABLE_DRVDIO)
                          6502	#3049:   #error "Configure the valid DioChannel for the toggle pins within your DrvDio config and set it as value for BrsHw_Dio_ToggleX_Channel. Or disable the depending BRS mechanism."*/
                          6503	#3050: # if defined (BRS_ENABLE_SUPPORT_LEDS)
                          6504	#3051:   Dio_ChannelType BrsHw_Dio_ToggleLED_Channel = DioConf_DioChannel_DioChannel_LED;
                          6505	#3052: # endif
                          6506	#3053: # if defined (BRS_ENABLE_SUPPORT_TOGGLE_WD_PIN)
                          6507	#3054:   Dio_ChannelType BrsHw_Dio_ToggleWD_Channel = DioConf_DioChannel_DioChannel_WD;
                          6508	#3055: # endif
                          6509	#3056: # if defined (BRS_ENABLE_SUPPORT_TOGGLE_CUSTOM_PIN)
                          6510	#3057:   Dio_ChannelType BrsHw_Dio_ToggleCUSTOM_Channel = DioConf_DioChannel_DioChannel_CUSTOM;
                          6511	#3058: # endif
                          6512	#3059: #endif /*VGEN_ENABLE_DRVDIO*/
                          6513	#3061: #if defined (BRS_ENABLE_SUPPORT_LEDS)
                          6514	#3062:   static uint8 BrsHw_ToggleSwitch_LED = BRSHW_PORT_LOGIC_HIGH;
                          6515	#3063: #endif
                          6516	#3064: #if defined (BRS_ENABLE_SUPPORT_TOGGLE_WD_PIN)
                          6517	#3065:   static uint8 BrsHw_ToggleSwitch_WD = BRSHW_PORT_LOGIC_HIGH;
                          6518	#3066: #endif
                          6519	#3067: #if defined (BRS_ENABLE_SUPPORT_TOGGLE_CUSTOM_PIN)
                          6520	#3068:   static uint8 BrsHw_ToggleSwitch_CUSTOM = BRSHW_PORT_LOGIC_HIGH;
                          6521	#3069: #endif
                          6522	#3071:   switch (Pin)
00000028 2a03             6523		se_cmpi	r3, 0
0000002a e200             6524		se_bne	.L949
                          6525	#3072:   {
                          6526	#3073: #if defined (BRS_ENABLE_SUPPORT_LEDS)
                          6527	#3074:     case BRSHW_TOGGLEPIN_LED:
                          6528	#3075: # if defined (VGEN_ENABLE_DRVDIO)
                          6529	#3076:       Dio_WriteChannel(BrsHw_Dio_ToggleLED_Channel, BrsHw_ToggleSwitch_LED & 0x01);
                          6530	#3077: # else
                          6531	#3078:       BrsHwPort_SetLevel(BRSHW_PORT_LED, BrsHw_ToggleSwitch_LED & 0x01);
                          6532	#line3078
                          6533	..lin.46275963..a5c3bb34.1_7::
                          6534	.LDWlin7:
0000002c 73c0e000         6535		e_lis	r30, %hiadj(.L988)
00000030 1fde0000         6536		e_add16i	r30, r30, %lo(.L988)
00000034 80fe             6537		se_lbz	r31, 0(r30)
00000036 7080e000         6538		e_lis	r4, %hiadj(BRSHW_PORT_LED)
0000003a 48c5             6539		se_li	r5, 12

                                   Fri Apr 10 08:31:37 2020           Page 118
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
0000003c 1c840000         6540		e_add16i	r4, r4, %lo(BRSHW_PORT_LED)
00000040 18618008         6541		e_addi	r3, sp, 8
00000044 78000001         6542		e_bl	memcpy
00000048 1be4c001         6543		e_andi	r4, r31, 1
0000004c 18618008         6544		e_addi	r3, sp, 8
00000050 e900             6545		se_bl	BrsHwPort_SetLevel
                          6546	#3079: # endif
                          6547	#3080:       BrsHw_ToggleSwitch_LED++;
                          6548	#line3080
                          6549	..lin.46275963..a5c3bb34.1_8::
                          6550	.LDWlin8:
00000052 200f             6551		se_addi	r31, 1
00000054 90fe             6552		se_stb	r31, 0(r30)
                          6553	#3081:       break;
                          6554	#3082: #endif /*BRS_ENABLE_SUPPORT_LEDS*/
                          6555	#3083: #if defined (BRS_ENABLE_SUPPORT_TOGGLE_WD_PIN)
                          6556	#3084:     case BRSHW_TOGGLEPIN_WD:
                          6557	#3085: # if defined (VGEN_ENABLE_DRVDIO)
                          6558	#3086:       Dio_WriteChannel(BrsHw_Dio_ToggleWD_Channel, BrsHw_ToggleSwitch_WD & 0x01);
                          6559	#3087: # else
                          6560	#3088:       BrsHwPort_SetLevel(BRSHW_PORT_TOGGLE_WD, BrsHw_ToggleSwitch_WD & 0x01);
                          6561	#3089: # endif
                          6562	#3090:       BrsHw_ToggleSwitch_WD++;
                          6563	#3091:       break;
                          6564	#3092: #endif /*BRS_ENABLE_SUPPORT_TOGGLE_WD_PIN*/
                          6565	#3093: #if defined (BRS_ENABLE_SUPPORT_TOGGLE_CUSTOM_PIN)
                          6566	#3094:     case BRSHW_TOGGLEPIN_CUSTOM:
                          6567	#3095: # if defined (VGEN_ENABLE_DRVDIO)
                          6568	#3096:       Dio_WriteChannel(BrsHw_Dio_ToggleCUSTOM_Channel, BrsHw_ToggleSwitch_CUSTOM & 0x01);
                          6569	#3097: # else
                          6570	#3098:       BrsHwPort_SetLevel(BRSHW_PORT_TOGGLE_CUSTOM, BrsHw_ToggleSwitch_CUSTOM & 0x01);
                          6571	#3099: # endif
                          6572	#3100:       BrsHw_ToggleSwitch_CUSTOM++;
                          6573	#3101:       break;
                          6574	#3102: #endif /*BRS_ENABLE_SUPPORT_TOGGLE_CUSTOM_PIN*/
                          6575	#3103:     default:
                          6576	.L949:
                          6577	#3104: #if defined (BRS_OS_USECASE_BRS) && !defined (BRS_ENABLE_FBL_SUPPORT)
                          6578	#3105:       BrsMainExceptionHandler(kBrsIllegalParameter, BRSERROR_MODULE_BRSHW, (uint16)(__LINE__));
                          6579	#3106: #endif
                          6580	#3107:       break;
                          6581	#3108:   }
                          6582	#3109: }
                          6583	#	    .ef
                          6584	.LDW72:
00000056 c901             6585		se_lwz	r0, 36(sp)
00000058 1bc10818         6586		e_lmw	r30, 24(sp)
0000005c 21f1             6587		se_addi	sp, 32
0000005e 0090             6588		se_mtlr	r0
00000060 0004             6589		se_blr
                          6590		.global	__ghs_eofn_BrsHwTogglePin
                          6591	__ghs_eofn_BrsHwTogglePin:
                          6592		.type	BrsHwTogglePin,@function
                          6593		.size	BrsHwTogglePin,$-BrsHwTogglePin
                          6594		.align	1
                          6595	

                                   Fri Apr 10 08:31:37 2020           Page 119
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                          6596	#function:			BrsHwTogglePin
                          6597	#stack frame size:		32
                          6598	#link area offset:		0
                          6599	#local storage area offset:	12
                          6600	#gpr save area offset:		24
                          6601	#
                          6602	#BrsHw_ToggleSwitch_LED	.L988	static
                          6603	
                          6604	#Pin	r3	param
                          6605	
                          6606		.section ".bss","awb"
                          6607		.global	bBrsHwIntDiCounter..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5CBrsHw.
                          6608	bBrsHwIntDiCounter..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5CBrsHw.:
00000000                  6609	bBrsHwIntDiCounter:	.space	1
                          6610		.type	bBrsHwIntDiCounter..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5CBrsHw.,@object
                          6611		.size	bBrsHwIntDiCounter..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5CBrsHw.,1
                          6612		.type	bBrsHwIntDiCounter,@object
                          6613		.size	bBrsHwIntDiCounter,1
                          6614		.data
                          6615	.L988:
                          6616		.global	BrsHw_ToggleSwitch_LED.BrsHwTogglePin.C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5CBrsHw..1
                          6617	BrsHw_ToggleSwitch_LED.BrsHwTogglePin.C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5CBrsHw..1:
00000000 01               6618		.byte	1
                          6619		.type	BrsHw_ToggleSwitch_LED.BrsHwTogglePin.C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5CBrsHw..1,@object
                          6620		.size	BrsHw_ToggleSwitch_LED.BrsHwTogglePin.C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5CBrsHw..1,1
                          6621		.type	.L988,@object
                          6622		.size	.L988,1
                          6623		.section ".RAMCODE","axv"
                          6624		.vle
                          6625	
                          6626		.section ".vletext", "vax"
                          6627		.vle
                          6628		.vle
                          6629	
                          6630		.align	1
                          6631		.align	1
                          6632	..gh.f.p.0.a.1.r.0.e.9:
                          6633		.type	..gh.f.p.0.a.1.r.0.e.9,@object
                          6634		.size	..gh.f.p.0.a.1.r.0.e.9,0
                          6635		.global	BrsHwPortInitPowerOn
                          6636	BrsHwPortInitPowerOn:
00000138 182106b0         6637		e_stwu	sp, -80(sp)
0000013c 57e1004c         6638		e_stw	r31, 76(sp)
00000140 0080             6639		se_mflr	r0
00000142 54010054         6640		e_stw	r0, 84(sp)
                          6641	#	    .bf
                          6642	.LDW82:
                          6643	#1658: void BrsHwPortInitPowerOn(void)
                          6644	#1659: {
                          6645	#1660: #if defined (VGEN_ENABLE_DRVPORT)
                          6646	#1661: # if defined (BRS_ENABLE_SUPPORT_LEDS)          || \
                          6647	#1662:      defined (BRS_ENABLE_SUPPORT_TOGGLE_WD_PIN) || \
                          6648	#1663:      defined (BRS_ENABLE_SUPPORT_TOGGLE_CUSTOM_PIN)
                          6649	#1664:   #error "Configure the valid toggle pins within your DrvPort config. Or disable the depending BRS mechanism."*/
                          6650	#1665: # endif
                          6651	#1667: #else

                                   Fri Apr 10 08:31:37 2020           Page 120
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                          6652	#1668: # if defined (BRS_ENABLE_SUPPORT_LEDS)
                          6653	#1669:   BrsHwInitPortOutput(BRSHW_PORT_LED);
00000146 48c5             6654		se_li	r5, 12
00000148 7080e000         6655		e_lis	r4, %hiadj(BRSHW_PORT_LED)
0000014c 1c840000         6656		e_add16i	r4, r4, %lo(BRSHW_PORT_LED)
00000150 18618010         6657		e_addi	r3, sp, 16
00000154 78000001         6658		e_bl	memcpy
00000158 18618010         6659		e_addi	r3, sp, 16
0000015c e900             6660		se_bl	BrsHwInitPortOutput
                          6661	#1671:   /* Set LED on EVB demo board to show the system is alive */
                          6662	#1672:   BrsHwTogglePin(BRSHW_TOGGLEPIN_LED);
                          6663	#line1672
                          6664	..lin.46275963..e77577ae.0_9::
                          6665	.LDWlin9:
0000015e 4803             6666		se_li	r3, 0
00000160 78000001         6667		e_bl	BrsHwTogglePin
                          6668	#1673: # endif /*BRS_ENABLE_SUPPORT_LEDS*/
                          6669	#1675: # if defined (BRS_ENABLE_SUPPORT_TOGGLE_WD_PIN)
                          6670	#1676:   BrsHwInitPortOutput(BRSHW_PORT_TOGGLE_WD);
                          6671	#1677: # endif
                          6672	#1679: # if defined (BRS_ENABLE_SUPPORT_TOGGLE_CUSTOM_PIN)
                          6673	#1680:   BrsHwInitPortOutput(BRSHW_PORT_TOGGLE_CUSTOM);
                          6674	#1681: # endif
                          6675	#1683: # if defined (BRS_ENABLE_TCM_SUPPORT)
                          6676	#1684:   BrsHwInitPortOutput(BRSHW_PORT_TCM_CLK_OUT);
                          6677	#1685:   BrsHwInitPortOutput(BRSHW_PORT_TCM_SDA_OUT);
                          6678	#1686:   BrsHwInitPortInput(BRSHW_PORT_TCM_SDA_IN, BRSHW_PORT_MUX_TCM_SDA_IN);
                          6679	#1687:   BrsHwInitPortInput(BRSHW_PORT_TCM_CLK_IN, BRSHW_PORT_MUX_TCM_CLK_IN);
                          6680	#1688: #  if defined (BRSHW_USE_TCM_EXT_IRQ)
                          6681	#1689:   BrsHwInitPortInput(BRSHW_PORT_TCM_INTA_IN, BRSHW_PORT_MUX_TCM_INTA_IN);
                          6682	#1690:   BrsHwInitPortInput(BRSHW_PORT_TCM_INTB_IN, BRSHW_PORT_MUX_TCM_INTB_IN);
                          6683	#1691: #  endif
                          6684	#1692: # endif /*BRS_ENABLE_TCM_SUPPORT*/
                          6685	#1694: /*******************************************************************************
                          6686	#1695:   CAN driver
                          6687	#1696: ********************************************************************************/
                          6688	#1697: # if defined (VGEN_ENABLE_CAN_DRV)
                          6689	#1698: #  if defined (_BRSHW_PORT_CAN_WAKEUP_IRQ_0)
                          6690	#1699:   BrsHwInitPortInput(BRSHW_PORT_CAN_WAKEUP_IRQ_0, BRSHW_PORT_MUX_CAN_WAKEUP_IRQ_0);
                          6691	#1700: #  endif
                          6692	#1701: #  if defined (_BRSHW_PORT_CAN_WAKEUP_IRQ_1)
                          6693	#1702:   BrsHwInitPortInput(BRSHW_PORT_CAN_WAKEUP_IRQ_1, BRSHW_PORT_MUX_CAN_WAKEUP_IRQ_1);
                          6694	#1703: #  endif
                          6695	#1704: #  if defined (_BRSHW_PORT_CAN_WAKEUP_IRQ_2)
                          6696	#1705:   BrsHwInitPortInput(BRSHW_PORT_CAN_WAKEUP_IRQ_2, BRSHW_PORT_MUX_CAN_WAKEUP_IRQ_2);
                          6697	#1706: #  endif
                          6698	#1707: #  if defined (_BRSHW_PORT_CAN_WAKEUP_IRQ_3)
                          6699	#1708:   BrsHwInitPortInput(BRSHW_PORT_CAN_WAKEUP_IRQ_3, BRSHW_PORT_MUX_CAN_WAKEUP_IRQ_3);
                          6700	#1709: #  endif
                          6701	#1710: #  if defined (_BRSHW_PORT_CAN_WAKEUP_IRQ_4)
                          6702	#1711:   BrsHwInitPortInput(BRSHW_PORT_CAN_WAKEUP_IRQ_4, BRSHW_PORT_MUX_CAN_WAKEUP_IRQ_4);
                          6703	#1712: #  endif
                          6704	#1713: #  if defined (_BRSHW_PORT_CAN_WAKEUP_IRQ_5)
                          6705	#1714:   BrsHwInitPortInput(BRSHW_PORT_CAN_WAKEUP_IRQ_5, BRSHW_PORT_MUX_CAN_WAKEUP_IRQ_5);
                          6706	#1715: #  endif
                          6707	#1716: #  if defined (_BRSHW_PORT_CAN_WAKEUP_IRQ_6)

                                   Fri Apr 10 08:31:37 2020           Page 121
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                          6708	#1717:   BrsHwInitPortInput(BRSHW_PORT_CAN_WAKEUP_IRQ_6, BRSHW_PORT_MUX_CAN_WAKEUP_IRQ_6);
                          6709	#1718: #  endif
                          6710	#1719: #  if defined (_BRSHW_PORT_CAN_WAKEUP_IRQ_7)
                          6711	#1720:   BrsHwInitPortInput(BRSHW_PORT_CAN_WAKEUP_IRQ_7, BRSHW_PORT_MUX_CAN_WAKEUP_IRQ_7);
                          6712	#1721: #  endif
                          6713	#1722: #  if defined (_BRSHW_PORT_CAN_WAKEUP_IRQ_8)
                          6714	#1723:   BrsHwInitPortInput(BRSHW_PORT_CAN_WAKEUP_IRQ_8, BRSHW_PORT_MUX_CAN_WAKEUP_IRQ_8);
                          6715	#1724: #  endif
                          6716	#1725: #  if defined (_BRSHW_PORT_CAN_WAKEUP_IRQ_9)
                          6717	#1726:   BrsHwInitPortInput(BRSHW_PORT_CAN_WAKEUP_IRQ_9, BRSHW_PORT_MUX_CAN_WAKEUP_IRQ_9);
                          6718	#1727: #  endif
                          6719	#1728: #  if defined (_BRSHW_PORT_CAN_WAKEUP_IRQ_10)
                          6720	#1729:   BrsHwInitPortInput(BRSHW_PORT_CAN_WAKEUP_IRQ_10, BRSHW_PORT_MUX_CAN_WAKEUP_IRQ_10);
                          6721	#1730: #  endif
                          6722	#1731: #  if defined (_BRSHW_PORT_CAN_WAKEUP_IRQ_11)
                          6723	#1732:   BrsHwInitPortInput(BRSHW_PORT_CAN_WAKEUP_IRQ_11, BRSHW_PORT_MUX_CAN_WAKEUP_IRQ_11);
                          6724	#1733: #  endif
                          6725	#1734: #  if defined (_BRSHW_PORT_CAN_WAKEUP_IRQ_12)
                          6726	#1735:   BrsHwInitPortInput(BRSHW_PORT_CAN_WAKEUP_IRQ_12, BRSHW_PORT_MUX_CAN_WAKEUP_IRQ_12);
                          6727	#1736: #  endif
                          6728	#1737: #  if defined (_BRSHW_PORT_CAN_WAKEUP_IRQ_13)
                          6729	#1738:   BrsHwInitPortInput(BRSHW_PORT_CAN_WAKEUP_IRQ_13, BRSHW_PORT_MUX_CAN_WAKEUP_IRQ_13);
                          6730	#1739: #  endif
                          6731	#1740: #  if defined (_BRSHW_PORT_CAN_WAKEUP_IRQ_14)
                          6732	#1741:   BrsHwInitPortInput(BRSHW_PORT_CAN_WAKEUP_IRQ_14, BRSHW_PORT_MUX_CAN_WAKEUP_IRQ_14);
                          6733	#1742: #  endif
                          6734	#1743: #  if defined (_BRSHW_PORT_CAN_WAKEUP_IRQ_15)
                          6735	#1744:   BrsHwInitPortInput(BRSHW_PORT_CAN_WAKEUP_IRQ_15, BRSHW_PORT_MUX_CAN_WAKEUP_IRQ_15);
                          6736	#1745: #  endif
                          6737	#1747: #  if defined (kCanPhysToLogChannelIndex_0)
                          6738	#1748:   BrsHwInitPortOutput(BRSHW_PORT_CAN0_TX);
00000164 48c5             6739		se_li	r5, 12
00000166 7080e000         6740		e_lis	r4, %hiadj(BRSHW_PORT_CAN0_TX)
0000016a 1c840000         6741		e_add16i	r4, r4, %lo(BRSHW_PORT_CAN0_TX)
0000016e 1861801c         6742		e_addi	r3, sp, 28
00000172 78000001         6743		e_bl	memcpy
00000176 1861801c         6744		e_addi	r3, sp, 28
0000017a e900             6745		se_bl	BrsHwInitPortOutput
                          6746	#1749:   BrsHwInitPortInput(BRSHW_PORT_CAN0_RX, BRSHW_PORT_MUX_CAN0_RX);
                          6747	#line1749
                          6748	..lin.46275963..e77577ae.0_10::
                          6749	.LDWlin10:
0000017c 7080e000         6750		e_lis	r4, %hiadj(BRSHW_PORT_CAN0_RX)
00000180 48c5             6751		se_li	r5, 12
00000182 1c840000         6752		e_add16i	r4, r4, %lo(BRSHW_PORT_CAN0_RX)
00000186 18618028         6753		e_addi	r3, sp, 40
0000018a 78000001         6754		e_bl	memcpy
0000018e 70c0e000         6755		e_lis	r6, %hiadj(BRSHW_PORT_MUX_CAN0_RX)
00000192 1cc60000         6756		e_add16i	r6, r6, %lo(BRSHW_PORT_MUX_CAN0_RX)
00000196 c006             6757		se_lwz	r0, 0(r6)
00000198 d201             6758		se_stw	r0, 8(sp)
0000019a c106             6759		se_lwz	r0, 4(r6)
0000019c 18818008         6760		e_addi	r4, sp, 8
000001a0 d301             6761		se_stw	r0, 12(sp)
000001a2 18618028         6762		e_addi	r3, sp, 40
000001a6 e900             6763		se_bl	BrsHwInitPortInput

                                   Fri Apr 10 08:31:37 2020           Page 122
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                          6764	#1750: #   if defined(_BRSHW_PORT_CAN0_TRCV_STB)
                          6765	#1751:   BrsHwInitPortOutput(BRSHW_PORT_CAN0_TRCV_STB);
                          6766	#line1751
                          6767	..lin.46275963..e77577ae.0_11::
                          6768	.LDWlin11:
000001a8 73e0e000         6769		e_lis	r31, %hiadj(BRSHW_PORT_CAN0_TRCV_STB)
000001ac 1fff0000         6770		e_add16i	r31, r31, %lo(BRSHW_PORT_CAN0_TRCV_STB)
000001b0 48c5             6771		se_li	r5, 12
000001b2 01f4             6772		se_mr	r4, r31
000001b4 18618034         6773		e_addi	r3, sp, 52
000001b8 78000001         6774		e_bl	memcpy
000001bc 18618034         6775		e_addi	r3, sp, 52
000001c0 e900             6776		se_bl	BrsHwInitPortOutput
                          6777	#1752:   BrsHwPort_SetLevel(BRSHW_PORT_CAN0_TRCV_STB, BRSHW_PORT_LOGIC_LOW);
                          6778	#line1752
                          6779	..lin.46275963..e77577ae.0_12::
                          6780	.LDWlin12:
000001c2 48c5             6781		se_li	r5, 12
000001c4 01f4             6782		se_mr	r4, r31
000001c6 18618040         6783		e_addi	r3, sp, 64
000001ca 78000001         6784		e_bl	memcpy
000001ce 18618040         6785		e_addi	r3, sp, 64
000001d2 4804             6786		se_li	r4, 0
000001d4 78000001         6787		e_bl	BrsHwPort_SetLevel
                          6788	#1753: #   endif
                          6789	#1754: #   if defined (_BRSHW_PORT_CAN0_TRCV_EN)
                          6790	#1755:   BrsHwInitPortOutput(BRSHW_PORT_CAN0_TRCV_EN);
                          6791	#1756:   BrsHwPort_SetLevel(BRSHW_PORT_CAN0_TRCV_EN, BRSHW_PORT_LOGIC_HIGH);
                          6792	#1757: #   endif
                          6793	#1758: #  endif /*kCanPhysToLogChannelIndex_0*/
                          6794	#1760: #  if defined (kCanPhysToLogChannelIndex_1)
                          6795	#1761:   BrsHwInitPortOutput(BRSHW_PORT_CAN1_TX);
                          6796	#1762:   BrsHwInitPortInput(BRSHW_PORT_CAN1_RX, BRSHW_PORT_MUX_CAN1_RX);
                          6797	#1763: #   if defined(_BRSHW_PORT_CAN1_TRCV_STB)
                          6798	#1764:   BrsHwInitPortOutput(BRSHW_PORT_CAN1_TRCV_STB);
                          6799	#1765:   BrsHwPort_SetLevel(BRSHW_PORT_CAN1_TRCV_STB, BRSHW_PORT_LOGIC_HIGH);
                          6800	#1766: #   endif
                          6801	#1767: #   if defined (_BRSHW_PORT_CAN1_TRCV_EN)
                          6802	#1768:   BrsHwInitPortOutput(BRSHW_PORT_CAN1_TRCV_EN);
                          6803	#1769:   BrsHwPort_SetLevel(BRSHW_PORT_CAN1_TRCV_EN, BRSHW_PORT_LOGIC_HIGH);
                          6804	#1770: #   endif
                          6805	#1771: #  endif /*kCanPhysToLogChannelIndex_1*/
                          6806	#1773: #  if defined (kCanPhysToLogChannelIndex_2)
                          6807	#1774:   BrsHwInitPortOutput(BRSHW_PORT_CAN2_TX);
                          6808	#1775:   BrsHwInitPortInput(BRSHW_PORT_CAN2_RX, BRSHW_PORT_MUX_CAN2_RX);
                          6809	#1776: #   if defined(_BRSHW_PORT_CAN2_TRCV_STB)
                          6810	#1777:   BrsHwInitPortOutput(BRSHW_PORT_CAN2_TRCV_STB);
                          6811	#1778:   BrsHwPort_SetLevel(BRSHW_PORT_CAN2_TRCV_STB, BRSHW_PORT_LOGIC_HIGH);
                          6812	#1779: #   endif
                          6813	#1780: #   if defined (_BRSHW_PORT_CAN2_TRCV_EN)
                          6814	#1781:   BrsHwInitPortOutput(BRSHW_PORT_CAN2_TRCV_EN);
                          6815	#1782:   BrsHwPort_SetLevel(BRSHW_PORT_CAN2_TRCV_EN, BRSHW_PORT_LOGIC_HIGH);
                          6816	#1783: #   endif
                          6817	#1784: #  endif /*kCanPhysToLogChannelIndex_2*/
                          6818	#1786: #  if defined (kCanPhysToLogChannelIndex_3)
                          6819	#1787:   BrsHwInitPortOutput(BRSHW_PORT_CAN3_TX);

                                   Fri Apr 10 08:31:37 2020           Page 123
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                          6820	#1788:   BrsHwInitPortInput(BRSHW_PORT_CAN3_RX, BRSHW_PORT_MUX_CAN3_RX);
                          6821	#1789: #   if defined(_BRSHW_PORT_CAN3_TRCV_STB)
                          6822	#1790:   BrsHwInitPortOutput(BRSHW_PORT_CAN3_TRCV_STB);
                          6823	#1791:   BrsHwPort_SetLevel(BRSHW_PORT_CAN3_TRCV_STB, BRSHW_PORT_LOGIC_HIGH);
                          6824	#1792: #   endif
                          6825	#1793: #   if defined (_BRSHW_PORT_CAN3_TRCV_EN)
                          6826	#1794:   BrsHwInitPortOutput(BRSHW_PORT_CAN3_TRCV_EN);
                          6827	#1795:   BrsHwPort_SetLevel(BRSHW_PORT_CAN3_TRCV_EN, BRSHW_PORT_LOGIC_HIGH);
                          6828	#1796: #   endif
                          6829	#1797: #  endif /*kCanPhysToLogChannelIndex_3*/
                          6830	#1799: #  if defined (kCanPhysToLogChannelIndex_4)
                          6831	#1800:   BrsHwInitPortOutput(BRSHW_PORT_CAN4_TX);
                          6832	#1801:   BrsHwInitPortInput(BRSHW_PORT_CAN4_RX, BRSHW_PORT_MUX_CAN4_RX);
                          6833	#1802: #   if defined(_BRSHW_PORT_CAN4_TRCV_STB)
                          6834	#1803:   BrsHwInitPortOutput(BRSHW_PORT_CAN4_TRCV_STB);
                          6835	#1804:   BrsHwPort_SetLevel(BRSHW_PORT_CAN4_TRCV_STB, BRSHW_PORT_LOGIC_HIGH);
                          6836	#1805: #   endif
                          6837	#1806: #    if defined (_BRSHW_PORT_CAN4_TRCV_EN)
                          6838	#1807:   BrsHwInitPortOutput(BRSHW_PORT_CAN4_TRCV_EN);
                          6839	#1808:   BrsHwPort_SetLevel(BRSHW_PORT_CAN4_TRCV_EN, BRSHW_PORT_LOGIC_HIGH);
                          6840	#1809: #    endif
                          6841	#1810: #  endif /*kCanPhysToLogChannelIndex_4*/
                          6842	#1812: #  if defined (kCanPhysToLogChannelIndex_5)
                          6843	#1813:   BrsHwInitPortOutput(BRSHW_PORT_CAN5_TX);
                          6844	#1814:   BrsHwInitPortInput(BRSHW_PORT_CAN5_RX, BRSHW_PORT_MUX_CAN5_RX);
                          6845	#1815: #   if defined(_BRSHW_PORT_CAN5_TRCV_STB)
                          6846	#1816:   BrsHwInitPortOutput(BRSHW_PORT_CAN5_TRCV_STB);
                          6847	#1817:   BrsHwPort_SetLevel(BRSHW_PORT_CAN5_TRCV_STB, BRSHW_PORT_LOGIC_HIGH);
                          6848	#1818: #   endif
                          6849	#1819: #    if defined (_BRSHW_PORT_CAN5_TRCV_EN)
                          6850	#1820:   BrsHwInitPortOutput(BRSHW_PORT_CAN5_TRCV_EN);
                          6851	#1821:   BrsHwPort_SetLevel(BRSHW_PORT_CAN5_TRCV_EN, BRSHW_PORT_LOGIC_HIGH);
                          6852	#1822: #    endif
                          6853	#1823: #  endif /*kCanPhysToLogChannelIndex_5*/
                          6854	#1825: #  if defined (kCanPhysToLogChannelIndex_6)
                          6855	#1826:   BrsHwInitPortOutput(BRSHW_PORT_CAN6_TX);
                          6856	#1827:   BrsHwInitPortInput(BRSHW_PORT_CAN6_RX, BRSHW_PORT_MUX_CAN6_RX);
                          6857	#1828: #   if defined(_BRSHW_PORT_CAN6_TRCV_STB)
                          6858	#1829:   BrsHwInitPortOutput(BRSHW_PORT_CAN6_TRCV_STB);
                          6859	#1830:   BrsHwPort_SetLevel(BRSHW_PORT_CAN6_TRCV_STB, BRSHW_PORT_LOGIC_HIGH);
                          6860	#1831: #   endif
                          6861	#1832: #   if defined (_BRSHW_PORT_CAN6_TRCV_EN)
                          6862	#1833:   BrsHwInitPortOutput(BRSHW_PORT_CAN6_TRCV_EN);
                          6863	#1834:   BrsHwPort_SetLevel(BRSHW_PORT_CAN6_TRCV_EN, BRSHW_PORT_LOGIC_HIGH);
                          6864	#1835: #   endif
                          6865	#1836: #  endif /*kCanPhysToLogChannelIndex_6*/
                          6866	#1838: #  if defined (kCanPhysToLogChannelIndex_7)
                          6867	#1839:   BrsHwInitPortOutput(BRSHW_PORT_CAN7_TX);
                          6868	#1840:   BrsHwInitPortInput(BRSHW_PORT_CAN7_RX, BRSHW_PORT_MUX_CAN7_RX);
                          6869	#1841: #   if defined(_BRSHW_PORT_CAN7_TRCV_STB)
                          6870	#1842:   BrsHwInitPortOutput(BRSHW_PORT_CAN7_TRCV_STB);
                          6871	#1843:   BrsHwPort_SetLevel(BRSHW_PORT_CAN7_TRCV_STB, BRSHW_PORT_LOGIC_HIGH);
                          6872	#1844: #   endif
                          6873	#1845: #   if defined (_BRSHW_PORT_CAN7_TRCV_EN)
                          6874	#1846:   BrsHwInitPortOutput(BRSHW_PORT_CAN7_TRCV_EN);
                          6875	#1847:   BrsHwPort_SetLevel(BRSHW_PORT_CAN7_TRCV_EN, BRSHW_PORT_LOGIC_HIGH);

                                   Fri Apr 10 08:31:37 2020           Page 124
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                          6876	#1848: #   endif
                          6877	#1849: #  endif /*kCanPhysToLogChannelIndex_7*/
                          6878	#1851: #  if defined (kCan_30_McanPhysToLogChannelIndex_0)
                          6879	#1852:   BrsHwInitPortOutput(BRSHW_PORT_CAN0_SECOND_CANCELL_TX);
                          6880	#1853:   BrsHwInitPortInput(BRSHW_PORT_CAN0_SECOND_CANCELL_RX, BRSHW_PORT_MUX_CAN0_SECOND_CANCELL_RX);
                          6881	#1854: #   if defined(_BRSHW_PORT_CAN0_TRCV_SECOND_CANCELL_STB)
                          6882	#1855:   BrsHwInitPortOutput(BRSHW_PORT_CAN0_TRCV_SECOND_CANCELL_STB);
                          6883	#1856:   BrsHwPort_SetLevel(BRSHW_PORT_CAN0_TRCV_SECOND_CANCELL_STB, BRSHW_PORT_LOGIC_HIGH);
                          6884	#1857: #   endif
                          6885	#1858: #   if defined (_BRSHW_PORT_CAN0_TRCV_SECOND_CANCELL_EN)
                          6886	#1859:   BrsHwInitPortOutput(BRSHW_PORT_CAN0_TRCV_SECOND_CANCELL_EN);
                          6887	#1860:   BrsHwPort_SetLevel(BRSHW_PORT_CAN0_TRCV_SECOND_CANCELL_EN, BRSHW_PORT_LOGIC_HIGH);
                          6888	#1861: #   endif
                          6889	#1862: #  endif /*kCan_30_McanPhysToLogChannelIndex_0*/
                          6890	#1864: #  if defined (kCan_30_McanPhysToLogChannelIndex_1)
                          6891	#1865:   BrsHwInitPortOutput(BRSHW_PORT_CAN1_SECOND_CANCELL_TX);
                          6892	#1866:   BrsHwInitPortInput(BRSHW_PORT_CAN1_SECOND_CANCELL_RX, BRSHW_PORT_MUX_CAN1_SECOND_CANCELL_RX);
                          6893	#1867: #   if defined(_BRSHW_PORT_CAN1_TRCV_SECOND_CANCELL_STB)
                          6894	#1868:   BrsHwInitPortOutput(BRSHW_PORT_CAN1_TRCV_SECOND_CANCELL_STB);
                          6895	#1869:   BrsHwPort_SetLevel(BRSHW_PORT_CAN1_TRCV_SECOND_CANCELL_STB, BRSHW_PORT_LOGIC_HIGH);
                          6896	#1870: #   endif
                          6897	#1871: #   if defined (_BRSHW_PORT_CAN1_TRCV_SECOND_CANCELL_EN)
                          6898	#1872:   BrsHwInitPortOutput(BRSHW_PORT_CAN1_TRCV_SECOND_CANCELL_EN);
                          6899	#1873:   BrsHwPort_SetLevel(BRSHW_PORT_CAN1_TRCV_SECOND_CANCELL_EN, BRSHW_PORT_LOGIC_HIGH);
                          6900	#1874: #   endif
                          6901	#1875: #  endif /*kCan_30_McanPhysToLogChannelIndex_0*/
                          6902	#1876: # endif /*VGEN_ENABLE_CAN_DRV*/
                          6903	#1878: /*******************************************************************************
                          6904	#1879:   LIN driver
                          6905	#1880: ********************************************************************************/
                          6906	#1881: # if defined (VGEN_ENABLE_LIN_DRV)
                          6907	#1882: #  if defined (LIN_ENABLE_HARDWARE_INTERFACE_0)
                          6908	#1883:   BrsHwInitPortOutput(BRSHW_PORT_LIN0_TX);
                          6909	#1884:   BrsHwInitPortInput(BRSHW_PORT_LIN0_RX, BRSHW_PORT_MUX_LIN0_RX);
                          6910	#1885: #   if defined(_BRSHW_PORT_CONF_LIN)
                          6911	#1886:   BrsHwInitPortConfig(BRSHW_PORT_LIN0_RX, BRSHW_PORT_CONF_LIN);
                          6912	#1887: #   endif
                          6913	#1888: #   if defined(_BRSHW_PORT_LIN0_TRCV_STB)
                          6914	#1889:   BrsHwInitPortOutput(BRSHW_PORT_LIN0_TRCV_STB);
                          6915	#1890:   BrsHwPort_SetLevel(BRSHW_PORT_LIN0_TRCV_STB, BRSHW_PORT_LOGIC_HIGH);
                          6916	#1891: #   endif
                          6917	#1892: #  endif /*LIN_ENABLE_HARDWARE_INTERFACE_0*/
                          6918	#1894: #  if defined (LIN_ENABLE_HARDWARE_INTERFACE_1)
                          6919	#1895:   BrsHwInitPortOutput(BRSHW_PORT_LIN1_TX);
                          6920	#1896:   BrsHwInitPortInput(BRSHW_PORT_LIN1_RX, BRSHW_PORT_MUX_LIN1_RX);
                          6921	#1897: #   if defined(_BRSHW_PORT_CONF_LIN)
                          6922	#1898:   BrsHwInitPortConfig(BRSHW_PORT_LIN1_RX, BRSHW_PORT_CONF_LIN);
                          6923	#1899: #   endif
                          6924	#1900: #   if defined(_BRSHW_PORT_LIN1_TRCV_STB)
                          6925	#1901:   BrsHwInitPortOutput(BRSHW_PORT_LIN1_TRCV_STB);
                          6926	#1902:   BrsHwPort_SetLevel(BRSHW_PORT_LIN1_TRCV_STB, BRSHW_PORT_LOGIC_HIGH);
                          6927	#1903: #   endif
                          6928	#1904: #  endif /*LIN_ENABLE_HARDWARE_INTERFACE_1*/
                          6929	#1906: #  if defined (LIN_ENABLE_HARDWARE_INTERFACE_2)
                          6930	#1907:   BrsHwInitPortOutput(BRSHW_PORT_LIN2_TX);
                          6931	#1908:   BrsHwInitPortInput(BRSHW_PORT_LIN2_RX, BRSHW_PORT_MUX_LIN2_RX);

                                   Fri Apr 10 08:31:37 2020           Page 125
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                          6932	#1909: #   if defined(_BRSHW_PORT_CONF_LIN)
                          6933	#1910:   BrsHwInitPortConfig(BRSHW_PORT_LIN2_RX, BRSHW_PORT_CONF_LIN);
                          6934	#1911: #   endif
                          6935	#1912: #   if defined(_BRSHW_PORT_LIN2_TRCV_STB)
                          6936	#1913:   BrsHwInitPortOutput(BRSHW_PORT_LIN2_TRCV_STB);
                          6937	#1914:   BrsHwPort_SetLevel(BRSHW_PORT_LIN2_TRCV_STB, BRSHW_PORT_LOGIC_HIGH);
                          6938	#1915: #   endif
                          6939	#1916: #  endif /*LIN_ENABLE_HARDWARE_INTERFACE_2*/
                          6940	#1918: #  if defined (LIN_ENABLE_HARDWARE_INTERFACE_3)
                          6941	#1919:   BrsHwInitPortOutput(BRSHW_PORT_LIN3_TX);
                          6942	#1920:   BrsHwInitPortInput(BRSHW_PORT_LIN3_RX, BRSHW_PORT_MUX_LIN3_RX);
                          6943	#1921: #   if defined(_BRSHW_PORT_CONF_LIN)
                          6944	#1922:   BrsHwInitPortConfig(BRSHW_PORT_LIN3_RX, BRSHW_PORT_CONF_LIN);
                          6945	#1923: #   endif
                          6946	#1924: #   if defined(_BRSHW_PORT_LIN3_TRCV_STB)
                          6947	#1925:   BrsHwInitPortOutput(BRSHW_PORT_LIN3_TRCV_STB);
                          6948	#1926:   BrsHwPort_SetLevel(BRSHW_PORT_LIN3_TRCV_STB, BRSHW_PORT_LOGIC_HIGH);
                          6949	#1927: #   endif
                          6950	#1928: #  endif /*LIN_ENABLE_HARDWARE_INTERFACE_3*/
                          6951	#1930: #  if defined (LIN_ENABLE_HARDWARE_INTERFACE_4)
                          6952	#1931:   BrsHwInitPortOutput(BRSHW_PORT_LIN4_TX);
                          6953	#1932:   BrsHwInitPortInput(BRSHW_PORT_LIN4_RX, BRSHW_PORT_MUX_LIN4_RX);
                          6954	#1933: #   if defined(_BRSHW_PORT_CONF_LIN)
                          6955	#1934:   BrsHwInitPortConfig(BRSHW_PORT_LIN4_RX, BRSHW_PORT_CONF_LIN);
                          6956	#1935: #   endif
                          6957	#1936: #   if defined(_BRSHW_PORT_LIN4_TRCV_STB)
                          6958	#1937:   BrsHwInitPortOutput(BRSHW_PORT_LIN4_TRCV_STB);
                          6959	#1938:   BrsHwPort_SetLevel(BRSHW_PORT_LIN4_TRCV_STB, BRSHW_PORT_LOGIC_HIGH);
                          6960	#1939: #   endif
                          6961	#1940: #  endif /*LIN_ENABLE_HARDWARE_INTERFACE_4*/
                          6962	#1942: #  if defined (LIN_ENABLE_HARDWARE_INTERFACE_5)
                          6963	#1943:   BrsHwInitPortOutput(BRSHW_PORT_LIN5_TX);
                          6964	#1944:   BrsHwInitPortInput(BRSHW_PORT_LIN5_RX, BRSHW_PORT_MUX_LIN5_RX);
                          6965	#1945: #   if defined(_BRSHW_PORT_CONF_LIN)
                          6966	#1946:   BrsHwInitPortConfig(BRSHW_PORT_LIN5_RX, BRSHW_PORT_CONF_LIN);
                          6967	#1947: #   endif
                          6968	#1948: #   if defined(_BRSHW_PORT_LIN5_TRCV_STB)
                          6969	#1949:   BrsHwInitPortOutput(BRSHW_PORT_LIN5_TRCV_STB);
                          6970	#1950:   BrsHwPort_SetLevel(BRSHW_PORT_LIN5_TRCV_STB, BRSHW_PORT_LOGIC_HIGH);
                          6971	#1951: #   endif
                          6972	#1952: #  endif /*LIN_ENABLE_HARDWARE_INTERFACE_5*/
                          6973	#1954: #  if defined (LIN_ENABLE_HARDWARE_INTERFACE_6)
                          6974	#1955:   BrsHwInitPortOutput(BRSHW_PORT_LIN6_TX);
                          6975	#1956:   BrsHwInitPortInput(BRSHW_PORT_LIN6_RX, BRSHW_PORT_MUX_LIN6_RX);
                          6976	#1957: #   if defined(_BRSHW_PORT_CONF_LIN)
                          6977	#1958:   BrsHwInitPortConfig(BRSHW_PORT_LIN6_RX, BRSHW_PORT_CONF_LIN);
                          6978	#1959: #   endif
                          6979	#1960: #   if defined(_BRSHW_PORT_LIN6_TRCV_STB)
                          6980	#1961:   BrsHwInitPortOutput(BRSHW_PORT_LIN6_TRCV_STB);
                          6981	#1962:   BrsHwPort_SetLevel(BRSHW_PORT_LIN6_TRCV_STB, BRSHW_PORT_LOGIC_HIGH);
                          6982	#1963: #   endif
                          6983	#1964: #  endif /*LIN_ENABLE_HARDWARE_INTERFACE_6*/
                          6984	#1966: #  if defined (LIN_ENABLE_HARDWARE_INTERFACE_7)
                          6985	#1967:   BrsHwInitPortOutput(BRSHW_PORT_LIN7_TX);
                          6986	#1968:   BrsHwInitPortInput(BRSHW_PORT_LIN7_RX, BRSHW_PORT_MUX_LIN7_RX);
                          6987	#1969: #   if defined(_BRSHW_PORT_CONF_LIN)

                                   Fri Apr 10 08:31:37 2020           Page 126
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                          6988	#1970:   BrsHwInitPortConfig(BRSHW_PORT_LIN7_RX, BRSHW_PORT_CONF_LIN);
                          6989	#1971: #   endif
                          6990	#1972: #   if defined(_BRSHW_PORT_LIN7_TRCV_STB)
                          6991	#1973:   BrsHwInitPortOutput(BRSHW_PORT_LIN7_TRCV_STB);
                          6992	#1974:   BrsHwPort_SetLevel(BRSHW_PORT_LIN7_TRCV_STB, BRSHW_PORT_LOGIC_HIGH);
                          6993	#1975: #   endif
                          6994	#1976: #  endif /*LIN_ENABLE_HARDWARE_INTERFACE_7*/
                          6995	#1978: #  if defined (LIN_ENABLE_HARDWARE_INTERFACE_8)
                          6996	#1979:   BrsHwInitPortOutput(BRSHW_PORT_LIN8_TX);
                          6997	#1980:   BrsHwInitPortInput(BRSHW_PORT_LIN8_RX, BRSHW_PORT_MUX_LIN8_RX);
                          6998	#1981: #   if defined(_BRSHW_PORT_CONF_LIN)
                          6999	#1982:   BrsHwInitPortConfig(BRSHW_PORT_LIN8_RX, BRSHW_PORT_CONF_LIN);
                          7000	#1983: #   endif
                          7001	#1984: #   if defined(_BRSHW_PORT_LIN8_TRCV_STB)
                          7002	#1985:   BrsHwInitPortOutput(BRSHW_PORT_LIN8_TRCV_STB);
                          7003	#1986:   BrsHwPort_SetLevel(BRSHW_PORT_LIN8_TRCV_STB, BRSHW_PORT_LOGIC_HIGH);
                          7004	#1987: #   endif
                          7005	#1988: #  endif /*LIN_ENABLE_HARDWARE_INTERFACE_8*/
                          7006	#1990: #  if defined (LIN_ENABLE_HARDWARE_INTERFACE_9)
                          7007	#1991:   BrsHwInitPortOutput(BRSHW_PORT_LIN9_TX);
                          7008	#1992:   BrsHwInitPortInput(BRSHW_PORT_LIN9_RX, BRSHW_PORT_MUX_LIN9_RX);
                          7009	#1993: #   if defined(_BRSHW_PORT_CONF_LIN)
                          7010	#1994:   BrsHwInitPortConfig(BRSHW_PORT_LIN9_RX, BRSHW_PORT_CONF_LIN);
                          7011	#1995: #   endif
                          7012	#1996: #   if defined(_BRSHW_PORT_LIN9_TRCV_STB)
                          7013	#1997:   BrsHwInitPortOutput(BRSHW_PORT_LIN9_TRCV_STB);
                          7014	#1998:   BrsHwPort_SetLevel(BRSHW_PORT_LIN9_TRCV_STB, BRSHW_PORT_LOGIC_HIGH);
                          7015	#1999: #   endif
                          7016	#2000: #  endif /*LIN_ENABLE_HARDWARE_INTERFACE_9*/
                          7017	#2001: # endif /*VGEN_ENABLE_LIN_DRV*/
                          7018	#2003: /*******************************************************************************
                          7019	#2004:   FLEXRAY driver
                          7020	#2005: ********************************************************************************/
                          7021	#2006: # if defined (VGEN_ENABLE_DRVFR__BASEASR)
                          7022	#2007: #  if (FR_CHANNEL_A_USED == STD_ON)
                          7023	#2008:   BrsHwInitPortOutput(BRSHW_PORT_FR0A_TX);
                          7024	#2009:   BrsHwInitPortInput(BRSHW_PORT_FR0A_RX, BRSHW_PORT_MUX_FR0A_RX);
                          7025	#2010:   BrsHwInitPortOutput(BRSHW_PORT_FR0A_TXEN);
                          7026	#2011:   /*BrsHwInitPortInput(BRSHW_PORT_FR0A_ERRNA); ERRNA-Pin not necessary on this platform*/
                          7027	#2012: #   if defined(_BRSHW_PORT_FR0A_TRCV_STB)
                          7028	#2013:   BrsHwInitPortOutput(BRSHW_PORT_FR0A_TRCV_STB);
                          7029	#2014:   BrsHwPort_SetLevel(BRSHW_PORT_FR0A_TRCV_STB, BRSHW_PORT_LOGIC_HIGH);
                          7030	#2015: #   endif
                          7031	#2016: #   if defined (_BRSHW_PORT_FR0A_TRCV_EN)
                          7032	#2017:   BrsHwInitPortOutput(BRSHW_PORT_FR0A_TRCV_EN);
                          7033	#2018:   BrsHwPort_SetLevel(BRSHW_PORT_FR0A_TRCV_EN, BRSHW_PORT_LOGIC_HIGH);
                          7034	#2019: #   endif
                          7035	#2020: #  endif /*FR_CHANNEL_A_USED*/
                          7036	#2022: #  if (FR_CHANNEL_B_USED == STD_ON)
                          7037	#2023:   BrsHwInitPortOutput(BRSHW_PORT_FR0B_TX);
                          7038	#2024:   BrsHwInitPortInput(BRSHW_PORT_FR0B_RX, BRSHW_PORT_MUX_FR0B_RX);
                          7039	#2025:   BrsHwInitPortOutput(BRSHW_PORT_FR0B_TXEN);
                          7040	#2026:   /*BrsHwInitPortInput(BRSHW_PORT_FR0B_ERRNA); ERRNA-Pin not necessary on this platform */
                          7041	#2027: #   if defined(_BRSHW_PORT_FR0B_TRCV_STB)
                          7042	#2028:   BrsHwInitPortOutput(BRSHW_PORT_FR0B_TRCV_STB);
                          7043	#2029:   BrsHwPort_SetLevel(BRSHW_PORT_FR0B_TRCV_STB, BRSHW_PORT_LOGIC_HIGH);

                                   Fri Apr 10 08:31:37 2020           Page 127
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                          7044	#2030: #   endif
                          7045	#2031: #   if defined (_BRSHW_PORT_FR0B_TRCV_EN)
                          7046	#2032:   BrsHwInitPortOutput(BRSHW_PORT_FR0B_TRCV_EN);
                          7047	#2033:   BrsHwPort_SetLevel(BRSHW_PORT_FR0B_TRCV_EN, BRSHW_PORT_LOGIC_HIGH);
                          7048	#2034: #   endif
                          7049	#2035: #  endif /*FR_CHANNEL_B_USED*/
                          7050	#2036: # endif /*VGEN_ENABLE_DRVFR__BASEASR*/
                          7051	#2038: /*******************************************************************************
                          7052	#2039:   ETHERNET driver
                          7053	#2040: ********************************************************************************/
                          7054	#2041: # if defined (VGEN_ENABLE_DRVETH__BASEASR)
                          7055	#2042:   /* -- Transmitter signals -- */
                          7056	#2043:   BrsHwInitPortInput(BRSHW_PORT_ETH0_REFCLK, BRSHW_PORT_MUX_ETH0_REFCLK);
                          7057	#2044:   BrsHwInitPortOutput(BRSHW_PORT_ETH0_TXD0);
                          7058	#2045:   BrsHwInitPortOutput(BRSHW_PORT_ETH0_TXD1);
                          7059	#2046: #  if defined (_BRSHW_PORT_ETH0_TXD2)
                          7060	#2047:   /* Transmit signal 2 is obsolete within RMII */
                          7061	#2048:   BrsHwInitPortOutput(BRSHW_PORT_ETH0_TXD2);
                          7062	#2049: #  endif
                          7063	#2050: #  if defined (_BRSHW_PORT_ETH0_TXD3)
                          7064	#2051:   /* Transmit signal 3 is obsolete within RMII */
                          7065	#2052:   BrsHwInitPortOutput(BRSHW_PORT_ETH0_TXD3);
                          7066	#2053: #  endif
                          7067	#2054:   BrsHwInitPortOutput(BRSHW_PORT_ETH0_TXEN);
                          7068	#2055: #  if defined (_BRSHW_PORT_ETH0_TXER)
                          7069	#2056:   /* Transmit Error signal is only optional within MII and obsolete within RMII */
                          7070	#2057:   BrsHwInitPortOutput(BRSHW_PORT_ETH0_TXER);
                          7071	#2058: #  endif
                          7072	#2059: #  if defined (_BRSHW_PORT_ETH0_RXER)
                          7073	#2060:   BrsHwInitPortInput(BRSHW_PORT_ETH0_RXER, BRSHW_PORT_MUX_ETH0_RXER);
                          7074	#2061: #  endif
                          7075	#2063:   /* -- Receiver signals -- */
                          7076	#2064: #  if defined (_BRSHW_PORT_ETH0_RXCLK)
                          7077	#2065:   /* Receive clock signal is obsolete within RMII */
                          7078	#2066:   BrsHwInitPortInput(BRSHW_PORT_ETH0_RXCLK, BRSHW_PORT_MUX_ETH0_RXCLK);
                          7079	#2067: #  endif
                          7080	#2068:   BrsHwInitPortInput(BRSHW_PORT_ETH0_RXD0, BRSHW_PORT_MUX_ETH0_RXD0);
                          7081	#2069:   BrsHwInitPortInput(BRSHW_PORT_ETH0_RXD1, BRSHW_PORT_MUX_ETH0_RXD1);
                          7082	#2070: #  if defined (_BRSHW_PORT_ETH0_RXD2)
                          7083	#2071:   /* Receive signal 2 is obsolete within RMII */
                          7084	#2072:   BrsHwInitPortInput(BRSHW_PORT_ETH0_RXD2, BRSHW_PORT_MUX_ETH0_RXD2);
                          7085	#2073: #  endif
                          7086	#2074: #  if defined (_BRSHW_PORT_ETH0_RXD3)
                          7087	#2075:   /* Receive signal 3 is obsolete within RMII */
                          7088	#2076:   BrsHwInitPortInput(BRSHW_PORT_ETH0_RXD3, BRSHW_PORT_MUX_ETH0_RXD3);
                          7089	#2077: #  endif
                          7090	#2078: #  if defined (BRSHW_SIU_GROUP_E)
                          7091	#2079:   BrsHwInitPortInput(BRSHW_PORT_ETH0_CRS, BRSHW_PORT_MUX_ETH0_CRS);
                          7092	#2080:   BrsHwInitPortInput(BRSHW_PORT_ETH0_RXDV, BRSHW_PORT_MUX_ETH0_RXDV);
                          7093	#2081:   BrsHwInitPortInput(BRSHW_PORT_ETH0_COL, BRSHW_PORT_MUX_ETH0_COL);
                          7094	#2082: #  else
                          7095	#2083: BrsHwInitPortInput(BRSHW_PORT_ETH0_CRSDV, BRSHW_PORT_MUX_ETH0_CRSDV);
                          7096	#2084: #  endif
                          7097	#2085:   /* -- Management signals -- */
                          7098	#2086:   BrsHwInitPortInput(BRSHW_PORT_ETH0_MDIO, BRSHW_PORT_MUX_ETH0_MDIO);
                          7099	#2087:   BrsHwInitPortOutput(BRSHW_PORT_ETH0_MDIO);

                                   Fri Apr 10 08:31:37 2020           Page 128
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                          7100	#2088: #  if defined (_BRSHW_PORT_ETH0_MDC)
                          7101	#2089:   /* Management data clock not always needed */
                          7102	#2090:   BrsHwInitPortOutput(BRSHW_PORT_ETH0_MDC);
                          7103	#2091: #  endif
                          7104	#2093: #  if defined (_BRSHW_PORT_ETH0_TRCV_EN)
                          7105	#2094:   BrsHwInitPortInput(BRSHW_PORT_ETH0_TRCV_EN, BRSHW_PORT_MUX_ETH0_TRCV_EN);
                          7106	#2095:   BrsHwPort_SetLevel(BRSHW_PORT_ETH0_TRCV_EN, BRSHW_PORT_LOGIC_HIGH);
                          7107	#2096: #  endif
                          7108	#2097: # endif /*VGEN_ENABLE_DRVETH__BASEASR*/
                          7109	#2099: #endif /*!VGEN_ENABLE_DRVPORT*/
                          7110	#2100: }
                          7111	#	    .ef
                          7112	.LDW92:
000001d8 50010054         7113		e_lwz	r0, 84(sp)
000001dc 53e1004c         7114		e_lwz	r31, 76(sp)
000001e0 18218050         7115		e_addi	sp, sp, 80
000001e4 0090             7116		se_mtlr	r0
000001e6 0004             7117		se_blr
                          7118		.global	__ghs_eofn_BrsHwPortInitPowerOn
                          7119	__ghs_eofn_BrsHwPortInitPowerOn:
                          7120		.type	BrsHwPortInitPowerOn,@function
                          7121		.size	BrsHwPortInitPowerOn,$-BrsHwPortInitPowerOn
                          7122		.align	1
                          7123	
                          7124	#function:			BrsHwPortInitPowerOn
                          7125	#stack frame size:		80
                          7126	#link area offset:		0
                          7127	#local storage area offset:	8
                          7128	#gpr save area offset:		76
                          7129	#
                          7130	
                          7131		.data
                          7132		.section ".vletext", "vax"
                          7133		.vle
                          7134		.vle
                          7135	
                          7136	
                          7137	#2102: #if defined (BRSHW_ENABLE_TIMER_INTERRUPT)
                          7138	#2103: /*****************************************************************************/
                          7139	#2104: /**
                          7140	#2105:  * @brief      Programmable Interrupt Timer, Timer initialization for 'FakeOS'
                          7141	#2106:  *             1ms time base generation
                          7142	#2107:  * @pre        Interrupt vector must be correct configured and the ISR
                          7143	#2108:  *             function itself should exist.
                          7144	#2109:  * @param[in]  -
                          7145	#2110:  * @param[out] -
                          7146	#2111:  * @return     -
                          7147	#2112:  * @context    Function is called from main@BrsMain at power on initialization.
                          7148	#2113:  */
                          7149	#2114: /*****************************************************************************/
                          7150	#2115: void BrsHwTimeBaseInitPowerOn(void)
                          7151	#2116: {
                          7152	#2117: #if defined (BRSHW_TIMER_GROUP_A)
                          7153	#2118:   PIT_MCR   = (uint32)0x01;  /* Enable the clock for timer0, timer is stopped in debug mode. */
                          7154	#2119: # if defined (BRSHW_FMPLL_GROUP_A) || defined (BRSHW_FMPLL_GROUP_B)
                          7155	#2120:   PIT_LDVAL0 = (uint32) (BRS_TIMEBASE_CLOCK * 1000/4); /* Timer0 load value register (1/{x}Mhz * {x}*1000 = 1ms) Hint: With this PLL the PIT is counting with CPU-Frequency/4! */

                                   Fri Apr 10 08:31:37 2020           Page 129
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                          7156	#2121: # else
                          7157	#2122:   PIT_LDVAL0 = (uint32) (BRS_TIMEBASE_CLOCK * 1000);   /* Timer0 load value register (1/{x}Mhz * {x}*1000 = 1ms) */
                          7158	#2123: # endif
                          7159	#2124:   PIT_TFLG0  = 0x1; /* Clear the timer0 interrupt */
                          7160	#2125:   PIT_TCTRL0 = 0x3; /* Timer0 interrupt and Timer enabled */
                          7161	#2126: #endif
                          7162	#2128: #if defined (BRSHW_TIMER_GROUP_B)
                          7163	#2129:   EMIOS_MCR = 0x1400F900;          /* Global prescaler=250 -> reg value = 249 */
                          7164	#2130:   EMIOS_CADR0 =BRS_TIMEBASE_CLOCK; /* Formula: Compare Value = (CPU_FREQUENCY * 1ms / Prescaler) !!internal compare registers are 16 Bit -> max. compareval.=0xFFFF!! visagh: /2 Clock Prescaler available and can not be disabled! -> visjhr: /4 prescaler on hardware implemented for emiosA/B -> manual is wrong */
                          7165	#2131:   EMIOS_CCR0 = 0x020202D4;         /* Modulos up/down counter buffered mode, prescaler=1  */
                          7166	#2132: #endif
                          7167	#2133: }
                          7168	#2135: /*****************************************************************************/
                          7169	#2136: /**
                          7170	#2137:  * @brief      Timer interrupt for the 'FakeOS' 1ms time base generation.
                          7171	#2138:  *             This ISR function is not necessary if an OS is used!
                          7172	#2139:  * @pre        Interrupt vector must be correct configured and the ISR
                          7173	#2140:  *             function itself should exist.
                          7174	#2141:  * @param[in]  -
                          7175	#2142:  * @param[out] -
                          7176	#2143:  * @return     -
                          7177	#2144:  * @context    Function is called from interrupt vector table if the assigned
                          7178	#2145:  *             timer has set its interrupt flag.
                          7179	#2146:  */
                          7180	#2147: /*****************************************************************************/
                          7181	#2148: void BrsHwTimeBaseInterrupt(void)
                          7182	#2149: {
                          7183	#2150:   /* clear Interrupt of timer0 */
                          7184	#2151: # if defined (BRSHW_TIMER_GROUP_A)
                          7185	#2152:   PIT_TFLG0 = 0x1;
                          7186	#2153: # endif
                          7187	#2155: # if defined (BRSHW_TIMER_GROUP_B)
                          7188	#2156:   EMIOS_CSR0 = 0x1;
                          7189	#2157: # endif
                          7190	#2159:   gbBrsMainIsrMilliSecondFlag++;
                          7191	#2160: }
                          7192	#2161: #else
                          7193	#2162: /* BrsHwTimeBaseInitPowerOn() and BrsHwTimeBaseInterrupt() removed by Organi, because of ALM attributes of project */
                          7194	#2163: #endif /*BRSHW_ENABLE_TIMER_INTERRUPT*/
                          7195	#2165: /*****************************************************************************/
                          7196	#2166: /**
                          7197	#2167:  * @brief      Disable the global system interrupt and initialize the INT
                          7198	#2168:  *             lock handler variables.
                          7199	#2169:  * @pre        Must be the first function call in main@BrsMain
                          7200	#2170:  * @param[in]  -
                          7201	#2171:  * @param[out] -
                          7202	#2172:  * @return     -
                          7203	#2173:  * @context    Function is called from main@BrsMain at power on initialization
                          7204	#2174:  */
                          7205	#2175: /*****************************************************************************/
                          7206		.align	1
                          7207		.align	1
                          7208	..gh.f.a.1.e.10:
                          7209		.type	..gh.f.a.1.e.10,@object
                          7210		.size	..gh.f.a.1.e.10,0
                          7211		.global	BrsHwDisableInterruptAtPowerOn

                                   Fri Apr 10 08:31:37 2020           Page 130
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                          7212	BrsHwDisableInterruptAtPowerOn:
                          7213	#	    .bf
                          7214	.LDW03:
                          7215	#2176: void BrsHwDisableInterruptAtPowerOn(void)
                          7216	#2177: {
                          7217	#2178:   bBrsHwIntDiCounter = 0;
000001e8 4800             7218		se_li	r0, 0
000001ea 70e0e000         7219		e_lis	r7, %hiadj(bBrsHwIntDiCounter)
000001ee 34070000         7220		e_stb	r0, %lo(bBrsHwIntDiCounter)(r7)
                          7221	#2180:   asm(" wrteei 0"); /* Disable external interrupts */
                          7222	..gh.beginasm.11:
                          7223		.type	..gh.beginasm.11,@object
                          7224		.size	..gh.beginasm.11,0
000001f2 7c000146         7225	 wrteei 0
                          7226	
                          7227	..gh.endasm.12:
                          7228		.type	..gh.endasm.12,@object
                          7229		.size	..gh.endasm.12,0
                          7230	#2181: }
                          7231	#	    .ef
                          7232	.LDW13:
                          7233	#line2181
                          7234	..lin.46275963..ff3f860b.0_13::
                          7235	.LDWlin13:
000001f6 0004             7236		se_blr
                          7237		.global	__ghs_eofn_BrsHwDisableInterruptAtPowerOn
                          7238	__ghs_eofn_BrsHwDisableInterruptAtPowerOn:
                          7239		.type	BrsHwDisableInterruptAtPowerOn,@function
                          7240		.size	BrsHwDisableInterruptAtPowerOn,$-BrsHwDisableInterruptAtPowerOn
                          7241		.align	1
                          7242	
                          7243	#function:			BrsHwDisableInterruptAtPowerOn
                          7244	#stack frame size:		0
                          7245	#
                          7246	
                          7247		.data
                          7248		.section ".vletext", "vax"
                          7249		.vle
                          7250		.vle
                          7251	
                          7252	
                          7253	#2183: /*****************************************************************************/
                          7254	#2184: /**
                          7255	#2185:  * @brief      Enable the global system interrupt the first time
                          7256	#2186:  * @pre        Must be called after all initializations are done
                          7257	#2187:  * @param[in]  -
                          7258	#2188:  * @param[out] -
                          7259	#2189:  * @return     -
                          7260	#2190:  * @context    Function is called from main@BrsMain at power on initialization
                          7261	#2191:  */
                          7262	#2192: /*****************************************************************************/
                          7263		.align	1
                          7264		.align	1
                          7265	..gh.f.a.1.e.13:
                          7266		.type	..gh.f.a.1.e.13,@object
                          7267		.size	..gh.f.a.1.e.13,0

                                   Fri Apr 10 08:31:37 2020           Page 131
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                          7268		.global	BrsHwEnableInterruptAtPowerOn
                          7269	BrsHwEnableInterruptAtPowerOn:
                          7270	#	    .bf
                          7271	.LDW23:
                          7272	#2193: void BrsHwEnableInterruptAtPowerOn(void)
                          7273	#2194: {
                          7274	#2195: #if defined (BRS_OS_USECASE_BRS) && !defined (BRS_ENABLE_FBL_SUPPORT)
                          7275	#2196:   BrsHwConfigureInterruptsAtPowerOn();
                          7276	#2197: #else
                          7277	#2198:   /* With OsGen7, OS-APIs have to be used for this */
                          7278	#2199:   /*BrsHwConfigureInterruptsAtPowerOn();*/
                          7279	#2200: #endif
                          7280	#2202:   asm(" wrteei 1");
                          7281	..gh.beginasm.14:
                          7282		.type	..gh.beginasm.14,@object
                          7283		.size	..gh.beginasm.14,0
000001f8 7c008146         7284	 wrteei 1
                          7285	
                          7286	..gh.endasm.15:
                          7287		.type	..gh.endasm.15,@object
                          7288		.size	..gh.endasm.15,0
                          7289	#2203: }
                          7290	#	    .ef
                          7291	.LDW33:
                          7292	#line2203
                          7293	..lin.46275963..126d96fe.0_14::
                          7294	.LDWlin14:
000001fc 0004             7295		se_blr
                          7296		.global	__ghs_eofn_BrsHwEnableInterruptAtPowerOn
                          7297	__ghs_eofn_BrsHwEnableInterruptAtPowerOn:
                          7298		.type	BrsHwEnableInterruptAtPowerOn,@function
                          7299		.size	BrsHwEnableInterruptAtPowerOn,$-BrsHwEnableInterruptAtPowerOn
                          7300		.align	1
                          7301	
                          7302	#function:			BrsHwEnableInterruptAtPowerOn
                          7303	#stack frame size:		0
                          7304	#
                          7305	
                          7306		.data
                          7307		.section ".vletext", "vax"
                          7308		.vle
                          7309		.vle
                          7310	
                          7311	
                          7312	#2205: #if defined (BRS_OS_USECASE_BRS) && !defined (BRS_ENABLE_FBL_SUPPORT)
                          7313	#2206: /*****************************************************************************/
                          7314	#2207: /**
                          7315	#2208:  * @brief      This function has to be used to initialize the used interrupts.
                          7316	#2209:  * @pre        -
                          7317	#2210:  * @param[in]  -
                          7318	#2211:  * @param[out] -
                          7319	#2212:  * @return     -
                          7320	#2213:  * @context    Function is called from BrsHwEnableInterruptAtPowerOn or EcuM-DriverInitThree
                          7321	#2214:  */
                          7322	#2215: /*****************************************************************************/
                          7323	#2216: void BrsHwConfigureInterruptsAtPowerOn(void)

                                   Fri Apr 10 08:31:37 2020           Page 132
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                          7324	#2217: {
                          7325	#2218:   uint16 i = 0;
                          7326	#2220:   /* dummy to prevent compiler warnings */
                          7327	#2221:   i=i;
                          7328	#2223: # if defined (BRSHW_INTERRUPT_TABLE_GROUP_A)
                          7329	#2224:   #define BRSHW_ISR_REQUEST_SENT_TO_CPU0 0x8000
                          7330	#2225:   INTC_MCR = 0x1;      /* Hardware Vector enable */
                          7331	#2226:   INTC_CPR_0 = 0x0;    /* Ensure CPU 0 INTC's current priority is 0 */
                          7332	#2228: #  if defined (BRSHW_TIMER_GROUP_A)
                          7333	#2229:   INTC_PSR(226) = 0x32 | BRSHW_ISR_REQUEST_SENT_TO_CPU0; /* cyclic timer interrupt on processor 2 */
                          7334	#2230: #  endif
                          7335	#2232: #  if defined (VGEN_ENABLE_CAN_DRV)
                          7336	#2233: #   if defined (BRSHW_USED_CANCELL_DEFAULT)
                          7337	#2234: #    if defined (kCanPhysToLogChannelIndex_0)
                          7338	#2235:   for (i=520; i<=530; i++)
                          7339	#2236:   {
                          7340	#2237:     INTC_PSR(i) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          7341	#2238:   }
                          7342	#2239: #    endif
                          7343	#2240: #    if defined (kCanPhysToLogChannelIndex_1)
                          7344	#2241:   for (i=533; i<=543; i++)
                          7345	#2242:   {
                          7346	#2243:     INTC_PSR(i) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          7347	#2244:   }
                          7348	#2245: #    endif
                          7349	#2246: #    if defined (kCanPhysToLogChannelIndex_2)
                          7350	#2247:   for (i=546; i<=556; i++)
                          7351	#2248:   {
                          7352	#2249:     INTC_PSR(i) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          7353	#2250:   }
                          7354	#2251: #    endif
                          7355	#2252: #   endif /*BRSHW_USED_CANCELL_DEFAULT*/
                          7356	#2253: #   if defined (BRSHW_USED_CANCELL_MCAN)
                          7357	#2254: #    if defined (kCan_30_McanPhysToLogChannelIndex_0)
                          7358	#2255:     INTC_PSR(557) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          7359	#2256: #    endif
                          7360	#2257: #    if defined (kCan_30_McanPhysToLogChannelIndex_0)
                          7361	#2258:     INTC_PSR(558) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          7362	#2259: #    endif
                          7363	#2260: #   endif /*BRSHW_USED_CANCELL_MCAN*/
                          7364	#2261: #  endif /*VGEN_ENABLE_CAN_DRV*/
                          7365	#2263: #  if defined (VGEN_ENABLE_LIN_DRV)
                          7366	#2264: #   if defined (LIN_ENABLE_HARDWARE_INTERFACE_0)
                          7367	#2265:   INTC_PSR(376) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          7368	#2266:   INTC_PSR(377) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          7369	#2267:   INTC_PSR(378) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          7370	#2268: #   endif
                          7371	#2269: #   if defined (LIN_ENABLE_HARDWARE_INTERFACE_1)
                          7372	#2270:   INTC_PSR(380) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          7373	#2271:   INTC_PSR(381) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          7374	#2272:   INTC_PSR(382) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          7375	#2273: #   endif
                          7376	#2274: #   if defined (LIN_ENABLE_HARDWARE_INTERFACE_2)
                          7377	#2275:   INTC_PSR(384) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          7378	#2276:   INTC_PSR(385) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          7379	#2277:   INTC_PSR(386) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;

                                   Fri Apr 10 08:31:37 2020           Page 133
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                          7380	#2278: #   endif
                          7381	#2279: #   if defined (LIN_ENABLE_HARDWARE_INTERFACE_3)
                          7382	#2280:   INTC_PSR(388) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          7383	#2281:   INTC_PSR(389) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          7384	#2282:   INTC_PSR(390) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          7385	#2283: #   endif
                          7386	#2284: #  endif /*VGEN_ENABLE_LIN_DRV*/
                          7387	#2285:   
                          7388	#2286: #  if defined (VGEN_ENABLE_DRVFR__BASEASR)
                          7389	#2287:   for (i=453; i<=462; i++)
                          7390	#2288:   {
                          7391	#2289:     #error "currently not tested!"
                          7392	#2290:     INTC_PSR(i) = 0x4 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          7393	#2291:   }
                          7394	#2292: #  endif
                          7395	#2293: # endif /*BRSHW_INTERRUPT_TABLE_GROUP_A*/
                          7396	#2295: # if defined (BRSHW_INTERRUPT_TABLE_GROUP_B)
                          7397	#2296:   #define BRSHW_ISR_REQUEST_SENT_TO_CPU0 0x00
                          7398	#2297:   #define BRSHW_ISR_REQUEST_SENT_TO_CPU1 0xC0
                          7399	#2298:   INTC_MCR = 0x1;   /* Hardwar Vector enable */
                          7400	#2299:   INTC_CPR_0 = 0x0; /* Ensure CPU 0 INTC's current priority is 0 */
                          7401	#2300:   INTC_CPR_1 = 0x0; /* Ensure CPU 1 INTC's current priority is 0 */
                          7402	#2302:   INTC_PSR(46) = 0x04; /* Set external wakeup Priority = 0x4 */
                          7403	#2303:   INTC_PSR(47) = 0x04; /* Set external wakeup Priority = 0x4 */
                          7404	#2304:   INTC_PSR(48) = 0x04; /* Set external wakeup Priority = 0x4 */
                          7405	#2305:   INTC_PSR(49) = 0x04; /* Set external wakeup Priority = 0x4 */
                          7406	#2306:   INTC_PSR(50) = 0x04; /* Set external wakeup Priority = 0x4 */
                          7407	#2308:   /* Pit channel_0 */
                          7408	#2309:   INTC_PSR(301) = 0x05;
                          7409	#2311: #  if defined (VGEN_ENABLE_CAN_DRV)
                          7410	#2312: #   if defined (BRSHW_USED_CANCELL_DEFAULT)
                          7411	#2313: #    if defined (kCanPhysToLogChannelIndex_0)
                          7412	#2314:   for ( i=152; i<=172; i++)
                          7413	#2315:   {
                          7414	#2316:     INTC_PSR(i) = 0x02;
                          7415	#2317:   }
                          7416	#2318: #    endif
                          7417	#2319: #    if defined (kCanPhysToLogChannelIndex_1)
                          7418	#2320:   for (i=280; i<=300; i++)
                          7419	#2321:   {
                          7420	#2322:     INTC_PSR(i) = 0x02;
                          7421	#2323:   }
                          7422	#2324: #    endif
                          7423	#2325: #    if defined (kCanPhysToLogChannelIndex_2)
                          7424	#2326:   for (i=173; i<=193; i++)
                          7425	#2327:   {
                          7426	#2328:     INTC_PSR(i) = 0x02;
                          7427	#2329:   }
                          7428	#2330: #    endif
                          7429	#2331: #    if defined (kCanPhysToLogChannelIndex_3)
                          7430	#2332:   for (i=308; i<=328; i++)
                          7431	#2333:   {
                          7432	#2334:     INTC_PSR(i) = 0x02;
                          7433	#2335:   }
                          7434	#2336: #    endif
                          7435	#2337: #    if defined (kCanPhysToLogChannelIndex_4)

                                   Fri Apr 10 08:31:37 2020           Page 134
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                          7436	#2338:   for (i=329; i<=349; i++)
                          7437	#2339:   {
                          7438	#2340:     INTC_PSR(i) = 0x02;
                          7439	#2341:   }
                          7440	#2342: #    endif
                          7441	#2343: #   endif /*BRSHW_USED_CANCELL_DEFAULT*/
                          7442	#2344: #   if defined (BRSHW_USED_CANCELL_MCAN)
                          7443	#2345: #    if defined ( kCan_30_McanPhysToLogChannelIndex_0 ) || defined ( kCan_30_McanPhysToLogChannelIndex_1 ) /* M_CAN_0 + M_CAN_1 */
                          7444	#2346:   INTC_PSR(348) = 0x2;
                          7445	#2347: #    endif
                          7446	#2348: #   endif /*RSHW_USED_CANCELL_MCAN*/
                          7447	#2349: #  endif /*VGEN_ENABLE_CAN_DRV*/
                          7448	#2351: #  if defined (VGEN_ENABLE_LIN_DRV)
                          7449	#2352: #   if defined (LIN_ENABLE_HARDWARE_INTERFACE_0)
                          7450	#2353:   INTC_PSR(146) = 0x02; /* Set eSCI 0 Interupt Priority = 0x2 */
                          7451	#2354: #   endif
                          7452	#2355: #   if defined (LIN_ENABLE_HARDWARE_INTERFACE_1)
                          7453	#2356:   INTC_PSR(149) = 0x02; /* Set eSCI 1 Interupt Priority = 0x2 */
                          7454	#2357: #   endif
                          7455	#2358: #   if defined (LIN_ENABLE_HARDWARE_INTERFACE_2)
                          7456	#2359:   INTC_PSR(473) = 0x02; /* Set eSCI 2 Interupt Priority = 0x2 */
                          7457	#2360: #   endif
                          7458	#2361: #   if defined (LIN_ENABLE_HARDWARE_INTERFACE_3)
                          7459	#2362:   INTC_PSR(474) = 0x2; /* Set eSCI 3 Interupt Priority = 0x2 */
                          7460	#2363: #   endif
                          7461	#2364: #   if defined (LIN_ENABLE_HARDWARE_INTERFACE_4)
                          7462	#2365:   INTC_PSR(475) = 0x2; /* Set eSCI 4 Interupt Priority = 0x2 */
                          7463	#2366: #   endif
                          7464	#2367: #   if defined (LIN_ENABLE_HARDWARE_INTERFACE_5)
                          7465	#2368:   INTC_PSR(505) = 0x2; /* Set eSCI 5 Interupt Priority = 0x2 */
                          7466	#2369: #   endif
                          7467	#2370: #  endif /*VGEN_ENABLE_LIN_DRV*/
                          7468	#2372: #  if defined (VGEN_ENABLE_DRVFR__BASEASR)
                          7469	#2373:   /* FlexRay Interrupt init */
                          7470	#2374:   for (i=350; i<=357; i++)
                          7471	#2375:   {
                          7472	#2376:    INTC_PSR(i) = 0x03; /* Set FlexRay Interrupt Priority = 0x3 */ /* all interrupts */
                          7473	#2377:   }
                          7474	#2378: #  endif /*VGEN_ENABLE_DRVFR__BASEASR*/
                          7475	#2379:   
                          7476	#2380: #  if defined (VGEN_ENABLE_DRVETH__BASEASR)
                          7477	#2381:   #error "Ethernet IRQ not yet supported!"
                          7478	#2382: #  endif
                          7479	#2383: # endif /*BRSHW_INTERRUPT_TABLE_GROUP_B*/
                          7480	#2385: # if defined (BRSHW_INTERRUPT_TABLE_GROUP_C)
                          7481	#2386: #  if defined (BRS_DERIVATIVE_SPC574Sx)
                          7482	#2387:    #define BRSHW_ISR_REQUEST_SENT_TO_RUNNING_CPU 0x8000
                          7483	#2388:     INTC_MCR = 0x001;
                          7484	#2389:     INTC_CPR_0 = 0x0;
                          7485	#2390: #  else
                          7486	#2391:   #define BRSHW_ISR_REQUEST_SENT_TO_RUNNING_CPU 0x2000 /* !!!CPU2!!! */
                          7487	#2392:   INTC_MCR = 0x100; /* Hardware Vector enable (for CPU2!) */
                          7488	#2393:   INTC_CPR_0 = 0x0; /* Ensure CPU 0 INTC's current priority is 0 */
                          7489	#2394: #   if !defined (BRS_DERIVATIVE_SPC574Kxx)
                          7490	#2395:   /* SPC574K only has a passive checker-core as Core1. This core has no own interrupt controller */
                          7491	#2396:   INTC_CPR_1 = 0x0; /* Ensure CPU 1 INTC's current priority is 0 */

                                   Fri Apr 10 08:31:37 2020           Page 135
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                          7492	#2397: #   endif
                          7493	#2398:   INTC_CPR_2 = 0x0;    /* Ensure CPU 2 INTC's current priority is 0 */
                          7494	#2399: #  endif /*else BRS_DERIVATIVE_SPC574Sx*/
                          7495	#2401: #  if defined (BRSHW_TIMER_GROUP_A)
                          7496	#2402: #   if defined (BRS_DERIVATIVE_SPC574Kxx)
                          7497	#2403:   INTC_PSR(240) = 0x32 | BRSHW_ISR_REQUEST_SENT_TO_RUNNING_CPU; /* cyclic timer interrupt on processor 2 */
                          7498	#2404: #   else
                          7499	#2405:   /* for MPC5746M the datasheets seems to be wrong. Use 226 instead of 240 for timer interrupt */
                          7500	#2406:   INTC_PSR(226) = 0x32 | BRSHW_ISR_REQUEST_SENT_TO_RUNNING_CPU; /* cyclic timer interrupt on processor 2 */
                          7501	#2407: #   endif
                          7502	#2408: #  endif
                          7503	#2410: #  if defined (VGEN_ENABLE_CAN_DRV)
                          7504	#2411: #   if defined (kCanPhysToLogChannelIndex_0)
                          7505	#2412:   INTC_PSR(676) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_RUNNING_CPU; /* MCAN0/TTCAN Line0 combined interrupt on processor 0 */
                          7506	#2413:   INTC_PSR(677) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_RUNNING_CPU; /* MCAN0/TTCAN Line1 combined interrupt on processor 0 */
                          7507	#2414: #   endif
                          7508	#2415: #   if defined (kCanPhysToLogChannelIndex_1)
                          7509	#2416:   INTC_PSR(688) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_RUNNING_CPU; /* MCAN1 Line0 combined interrupt on processor 0 */
                          7510	#2417:   INTC_PSR(689) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_RUNNING_CPU; /* MCAN1 Line1 combined interrupt on processor 0 */
                          7511	#2418: #   endif
                          7512	#2419: #   if defined (kCanPhysToLogChannelIndex_2)
                          7513	#2420:   INTC_PSR(690) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_RUNNING_CPU; /* MCAN2 Line0 combined interrupt on processor 0 */
                          7514	#2421:   INTC_PSR(691) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_RUNNING_CPU; /* MCAN2 Line1 combined interrupt on processor 0 */
                          7515	#2422: #   endif
                          7516	#2423: #   if defined (kCanPhysToLogChannelIndex_3)
                          7517	#2424:   INTC_PSR(692) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_RUNNING_CPU; /* MCAN3 Line0 combined interrupt on processor 0 */
                          7518	#2425:   INTC_PSR(693) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_RUNNING_CPU; /* MCAN3 Line1 combined interrupt on processor 0 */
                          7519	#2426: #   endif
                          7520	#2427: #   if defined (kCanPhysToLogChannelIndex_4)
                          7521	#2428:   INTC_PSR(694) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_RUNNING_CPU; /* MCAN3 Line0 combined interrupt on processor 0 */
                          7522	#2429:   INTC_PSR(695) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_RUNNING_CPU; /* MCAN3 Line1 combined interrupt on processor 0 */
                          7523	#2430: #   endif
                          7524	#2431: #  endif /*VGEN_ENABLE_CAN_DRV*/
                          7525	#2433: #  if defined (VGEN_ENABLE_LIN_DRV)
                          7526	#2434: #   if defined (LIN_ENABLE_HARDWARE_INTERFACE_0)
                          7527	#2435:   INTC_PSR(376) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_RUNNING_CPU;
                          7528	#2436:   INTC_PSR(377) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_RUNNING_CPU;
                          7529	#2437:   INTC_PSR(378) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_RUNNING_CPU;
                          7530	#2438: #   endif
                          7531	#2439: #   if defined (LIN_ENABLE_HARDWARE_INTERFACE_1)
                          7532	#2440:   INTC_PSR(380) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_RUNNING_CPU;
                          7533	#2441:   INTC_PSR(381) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_RUNNING_CPU;
                          7534	#2442:   INTC_PSR(382) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_RUNNING_CPU;
                          7535	#2443: #   endif
                          7536	#2444: #   if defined (LIN_ENABLE_HARDWARE_INTERFACE_2)
                          7537	#2445:   INTC_PSR(384) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_RUNNING_CPU;
                          7538	#2446:   INTC_PSR(385) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_RUNNING_CPU;
                          7539	#2447:   INTC_PSR(386) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_RUNNING_CPU;
                          7540	#2448: #   endif
                          7541	#2449: #   if defined (LIN_ENABLE_HARDWARE_INTERFACE_3)
                          7542	#2450:   INTC_PSR(388) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_RUNNING_CPU;
                          7543	#2451:   INTC_PSR(389) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_RUNNING_CPU;
                          7544	#2452:   INTC_PSR(390) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_RUNNING_CPU;
                          7545	#2453: #   endif
                          7546	#2454: #   if defined (LIN_ENABLE_HARDWARE_INTERFACE_14)
                          7547	#2455:   INTC_PSR(432) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_RUNNING_CPU;

                                   Fri Apr 10 08:31:37 2020           Page 136
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                          7548	#2456:   INTC_PSR(433) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_RUNNING_CPU;
                          7549	#2457:   INTC_PSR(434) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_RUNNING_CPU;
                          7550	#2458: #   endif
                          7551	#2459: #   if defined (LIN_ENABLE_HARDWARE_INTERFACE_15)
                          7552	#2460:   INTC_PSR(436) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_RUNNING_CPU;
                          7553	#2461:   INTC_PSR(437) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_RUNNING_CPU;
                          7554	#2462:   INTC_PSR(438) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_RUNNING_CPU;
                          7555	#2463: #   endif
                          7556	#2464: #  endif /*VGEN_ENABLE_LIN_DRV*/
                          7557	#2466: #  if defined (VGEN_ENABLE_DRVFR__BASEASR)
                          7558	#2467:   for (i=453; i<=462; i++)
                          7559	#2468:   {
                          7560	#2469:     #error "currently not tested!"
                          7561	#2470:     INTC_PSR(i) = 0x4 | BRSHW_ISR_REQUEST_SENT_TO_RUNNING_CPU;
                          7562	#2471:   }
                          7563	#2472: #  endif
                          7564	#2473: # endif /*BRSHW_INTERRUPT_TABLE_GROUP_C*/
                          7565	#2475: # if defined (BRSHW_INTERRUPT_TABLE_GROUP_D)
                          7566	#2476:   #define BRSHW_ISR_REQUEST_SENT_TO_CPU0 0x8000
                          7567	#2477:   INTC_MCR = 0x1;   /* Hardware Vector enable */
                          7568	#2478:   INTC_CPR_0 = 0x0; /* Ensure CPU 0 INTC's current priority is 0 */
                          7569	#2479: #  if !defined (BRS_DERIVATIVE_PC580000x)
                          7570	#2480:   INTC_CPR_1 = 0x0; /* Ensure CPU 1 INTC's current priority is 0 */
                          7571	#2481: #  endif
                          7572	#2483: #  if defined (BRSHW_TIMER_GROUP_B)
                          7573	#2484:   INTC_PSR(16) = 0xF | BRSHW_ISR_REQUEST_SENT_TO_CPU0; /* cyclic timer interrupt on processor 0 */
                          7574	#2485: #  endif
                          7575	#2487: #  if defined (VGEN_ENABLE_CAN_DRV)
                          7576	#2488: #   if defined (kCanPhysToLogChannelIndex_0)
                          7577	#2489:       for (i=52; i<=74; i++)
                          7578	#2490:   {
                          7579	#2491:     INTC_PSR(i) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          7580	#2492:   }
                          7581	#2493: #     if defined (C_ENABLE_MB64TO95)
                          7582	#2494:       INTC_PSR(287) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          7583	#2495: #     endif
                          7584	#2496: #     if defined (C_ENABLE_MB96TO127)
                          7585	#2497:       INTC_PSR(288) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          7586	#2498: #     endif
                          7587	#2499: #   endif
                          7588	#2500: #   if defined (kCanPhysToLogChannelIndex_1)
                          7589	#2501:   for (i=75; i<=97; i++)
                          7590	#2502:   {
                          7591	#2503:     INTC_PSR(i) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          7592	#2504:   } 
                          7593	#2505: #     if defined (C_ENABLE_MB64TO95)
                          7594	#2506:       INTC_PSR(289) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          7595	#2507: #     endif
                          7596	#2508: #     if defined (C_ENABLE_MB96TO127)
                          7597	#2509:       INTC_PSR(290) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          7598	#2510: #     endif
                          7599	#2511: #   endif
                          7600	#2512: #    if defined (kCanPhysToLogChannelIndex_2)
                          7601	#2513:       for (i=239; i<=261; i++)
                          7602	#2514:       {
                          7603	#2515:         INTC_PSR(i) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;

                                   Fri Apr 10 08:31:37 2020           Page 137
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                          7604	#2516:       }
                          7605	#2517: #     if defined (C_ENABLE_MB64TO95)
                          7606	#2518:       INTC_PSR(291) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          7607	#2519: #     endif
                          7608	#2520: #     if defined (C_ENABLE_MB96TO127)
                          7609	#2521:       INTC_PSR(292) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          7610	#2522: #     endif
                          7611	#2523: #   endif
                          7612	#2524: #  endif /*VGEN_ENABLE_CAN_DRV*/
                          7613	#2526: #  if defined (VGEN_ENABLE_LIN_DRV)
                          7614	#2527: #   if defined (LIN_ENABLE_HARDWARE_INTERFACE_0)
                          7615	#2528: #    if defined (BRS_DERIVATIVE_PC580000x) || defined (BRS_DERIVATIVE_PC580002x)
                          7616	#2529:       INTC_PSR(51) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0; /* SCI LIN*/
                          7617	#2530: #    elif defined (BRS_DERIVATIVE_PC580003x)
                          7618	#2531:       for (i=262; i<=264; i++)
                          7619	#2532:       {
                          7620	#2533:         INTC_PSR(i) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          7621	#2534:       }
                          7622	#2535: #    endif
                          7623	#2536: #   endif
                          7624	#2537: #   if defined (LIN_ENABLE_HARDWARE_INTERFACE_1)
                          7625	#2538: #    if defined (BRS_DERIVATIVE_PC580003x)
                          7626	#2539:       for (i=265; i<=267; i++)
                          7627	#2540:       {
                          7628	#2541:         INTC_PSR(i) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          7629	#2542:       }
                          7630	#2543: #    endif
                          7631	#2544: #   endif
                          7632	#2545: #  endif
                          7633	#2546: #  if defined (VGEN_ENABLE_DRVFR__BASEASR)
                          7634	#2547:   for (i=98; i<=108; i++)
                          7635	#2548:   {
                          7636	#2549:     INTC_PSR(i) = 0x4 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          7637	#2550:   }
                          7638	#2551: #  endif
                          7639	#2552: # endif /*BRSHW_INTERRUPT_TABLE_GROUP_D*/
                          7640	#2554: # if defined (BRSHW_INTERRUPT_TABLE_GROUP_E)
                          7641	#2555:   #define BRSHW_ISR_REQUEST_SENT_TO_CPU0 0x8000
                          7642	#2556:   #define BRSHW_ISR_REQUEST_SENT_TO_CPU1 0x4000
                          7643	#2557:   INTC_MCR = 0x1;      /* Hardware Vector enable */
                          7644	#2558:   INTC_CPR_0 = 0x0;    /* Ensure CPU 0 INTC's current priority is 0 */
                          7645	#2560:   INTC_PSR(243) = 0x04 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;    /* Set external wakeup Priority = 0x4, processor 0 */
                          7646	#2561:   INTC_PSR(244) = 0x04 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;    /* Set external wakeup Priority = 0x4, processor 0 */
                          7647	#2563: #  if defined (BRSHW_TIMER_GROUP_A)
                          7648	#2564:   INTC_PSR(226) = 0x32 | BRSHW_ISR_REQUEST_SENT_TO_CPU0; /* cyclic timer interrupt on processor 0 */
                          7649	#2565: #  endif
                          7650	#2567: #  if defined (VGEN_ENABLE_CAN_DRV)
                          7651	#2568: #   if defined (kCanPhysToLogChannelIndex_0)
                          7652	#2569: #    if (MPC5748G_CUT == 1) || (!C_CAN_MAX_BUFFER_96)
                          7653	#2570:   for (i=565; i<=573; i++)
                          7654	#2571: #    else
                          7655	#2572:   for (i=565; i<=574; i++)
                          7656	#2573: #    endif
                          7657	#2574:   {
                          7658	#2575:     INTC_PSR(i) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          7659	#2576:   }

                                   Fri Apr 10 08:31:37 2020           Page 138
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                          7660	#2577: #   endif
                          7661	#2578: #   if defined (kCanPhysToLogChannelIndex_1)
                          7662	#2579: #    if (MPC5748G_CUT == 1) || (!C_CAN_MAX_BUFFER_96)
                          7663	#2580:   for (i=578; i<=585; i++)
                          7664	#2581: #    else
                          7665	#2582:   for (i=578; i<=586; i++)
                          7666	#2583: #    endif
                          7667	#2584:   {
                          7668	#2585:     INTC_PSR(i) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          7669	#2586:   }
                          7670	#2587: #   endif
                          7671	#2588: #   if defined (kCanPhysToLogChannelIndex_2)
                          7672	#2589: #    if (MPC5748G_CUT == 1) || (!C_CAN_MAX_BUFFER_96)
                          7673	#2590:   for (i=590; i<=597; i++)
                          7674	#2591: #    else
                          7675	#2592:   for (i=590; i<=598; i++)
                          7676	#2593: #    endif
                          7677	#2594:   {
                          7678	#2595:     INTC_PSR(i) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          7679	#2596:   }
                          7680	#2597: #   endif
                          7681	#2598: #   if defined (kCanPhysToLogChannelIndex_3)
                          7682	#2599: #    if (MPC5748G_CUT == 1) || (!C_CAN_MAX_BUFFER_96)
                          7683	#2600:   for (i=602; i<=609; i++)
                          7684	#2601: #    else
                          7685	#2602:   for (i=602; i<=610; i++)
                          7686	#2603: #    endif
                          7687	#2604:   {
                          7688	#2605:     INTC_PSR(i) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          7689	#2606:   }
                          7690	#2607: #   endif
                          7691	#2608: #   if defined (kCanPhysToLogChannelIndex_4)
                          7692	#2609: #    if (MPC5748G_CUT == 1) || (!C_CAN_MAX_BUFFER_96)
                          7693	#2610:   for (i=614; i<=621; i++)
                          7694	#2611: #    else
                          7695	#2612:   for (i=614; i<=622; i++)
                          7696	#2613: #    endif
                          7697	#2614:   {
                          7698	#2615:     INTC_PSR(i) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          7699	#2616:   }
                          7700	#2617: #   endif
                          7701	#2618: #   if defined (kCanPhysToLogChannelIndex_5)
                          7702	#2619: #    if (MPC5748G_CUT == 1) || (!C_CAN_MAX_BUFFER_96)
                          7703	#2620:   for (i=626; i<=633; i++)
                          7704	#2621: #    else
                          7705	#2622:   for (i=626; i<=634; i++)
                          7706	#2623: #    endif
                          7707	#2624:   {
                          7708	#2625:     INTC_PSR(i) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          7709	#2626:   }
                          7710	#2627: #   endif
                          7711	#2628: #   if defined (kCanPhysToLogChannelIndex_6)
                          7712	#2629: #    if (MPC5748G_CUT == 1) || (!C_CAN_MAX_BUFFER_96)
                          7713	#2630:   for (i=638; i<=645; i++)
                          7714	#2631: #    else
                          7715	#2632:   for (i=638; i<=646; i++)

                                   Fri Apr 10 08:31:37 2020           Page 139
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                          7716	#2633: #    endif
                          7717	#2634:   {
                          7718	#2635:     INTC_PSR(i) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          7719	#2636:   }
                          7720	#2637: #   endif
                          7721	#2638: #   if defined (kCanPhysToLogChannelIndex_7)
                          7722	#2639: #    if (MPC5748G_CUT == 1) || (!C_CAN_MAX_BUFFER_96)
                          7723	#2640:   for (i=650; i<=657; i++)
                          7724	#2641: #    else
                          7725	#2642:   for (i=650; i<=658; i++)
                          7726	#2643: #    endif
                          7727	#2644:   {
                          7728	#2645:     INTC_PSR(i) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          7729	#2646:   }
                          7730	#2647: #   endif
                          7731	#2648: #  endif /*VGEN_ENABLE_CAN_DRV*/
                          7732	#2650: #  if defined (VGEN_ENABLE_LIN_DRV)
                          7733	#2651: #   if defined (LIN_ENABLE_HARDWARE_INTERFACE_0)
                          7734	#2652:   INTC_PSR(376) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          7735	#2653:   INTC_PSR(377) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          7736	#2654:   INTC_PSR(378) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          7737	#2655: #   endif
                          7738	#2656: #   if defined (LIN_ENABLE_HARDWARE_INTERFACE_1)
                          7739	#2657:   INTC_PSR(379) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          7740	#2658:   INTC_PSR(380) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          7741	#2659:   INTC_PSR(381) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          7742	#2660: #   endif
                          7743	#2661: #   if defined (LIN_ENABLE_HARDWARE_INTERFACE_2)
                          7744	#2662:   INTC_PSR(382) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          7745	#2663:   INTC_PSR(383) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          7746	#2664:   INTC_PSR(384) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          7747	#2665: #   endif
                          7748	#2666: #   if defined (LIN_ENABLE_HARDWARE_INTERFACE_3)
                          7749	#2667:   INTC_PSR(385) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          7750	#2668:   INTC_PSR(386) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          7751	#2669:   INTC_PSR(387) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          7752	#2670: #   endif
                          7753	#2671: #   if defined (LIN_ENABLE_HARDWARE_INTERFACE_4)
                          7754	#2672:   INTC_PSR(388) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          7755	#2673:   INTC_PSR(389) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          7756	#2674:   INTC_PSR(390) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          7757	#2675: #   endif
                          7758	#2676: #   if defined (LIN_ENABLE_HARDWARE_INTERFACE_5)
                          7759	#2677:   INTC_PSR(391) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          7760	#2678:   INTC_PSR(392) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          7761	#2679:   INTC_PSR(393) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          7762	#2680: #   endif
                          7763	#2681: #   if defined (LIN_ENABLE_HARDWARE_INTERFACE_6)
                          7764	#2682:   INTC_PSR(394) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          7765	#2683:   INTC_PSR(395) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          7766	#2684:   INTC_PSR(396) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          7767	#2685: #   endif
                          7768	#2686: #   if defined (LIN_ENABLE_HARDWARE_INTERFACE_7)
                          7769	#2687:   INTC_PSR(397) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          7770	#2688:   INTC_PSR(398) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          7771	#2689:   INTC_PSR(399) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;

                                   Fri Apr 10 08:31:37 2020           Page 140
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                          7772	#2690: #   endif
                          7773	#2691: #   if defined (LIN_ENABLE_HARDWARE_INTERFACE_8)
                          7774	#2692:   INTC_PSR(400) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          7775	#2693:   INTC_PSR(401) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          7776	#2694:   INTC_PSR(402) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          7777	#2695: #   endif
                          7778	#2696: #   if defined (LIN_ENABLE_HARDWARE_INTERFACE_9)
                          7779	#2697:   INTC_PSR(403) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          7780	#2698:   INTC_PSR(404) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          7781	#2699:   INTC_PSR(405) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          7782	#2700: #   endif
                          7783	#2701: #   if defined (LIN_ENABLE_HARDWARE_INTERFACE_10)
                          7784	#2702:   INTC_PSR(406) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          7785	#2703:   INTC_PSR(407) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          7786	#2704:   INTC_PSR(408) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          7787	#2705: #   endif
                          7788	#2706: #   if defined (LIN_ENABLE_HARDWARE_INTERFACE_11)
                          7789	#2707:   INTC_PSR(409) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          7790	#2708:   INTC_PSR(410) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          7791	#2709:   INTC_PSR(411) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          7792	#2710: #   endif
                          7793	#2711: #   if defined (LIN_ENABLE_HARDWARE_INTERFACE_12)
                          7794	#2712:   INTC_PSR(412) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          7795	#2713:   INTC_PSR(413) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          7796	#2714:   INTC_PSR(414) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          7797	#2715: #   endif
                          7798	#2716: #   if defined (LIN_ENABLE_HARDWARE_INTERFACE_13)
                          7799	#2717:   INTC_PSR(415) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          7800	#2718:   INTC_PSR(416) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          7801	#2719:   INTC_PSR(417) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          7802	#2720: #   endif
                          7803	#2721: #   if defined (LIN_ENABLE_HARDWARE_INTERFACE_14)
                          7804	#2722:   INTC_PSR(418) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          7805	#2723:   INTC_PSR(419) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          7806	#2724:   INTC_PSR(420) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          7807	#2725: #   endif
                          7808	#2726: #   if defined (LIN_ENABLE_HARDWARE_INTERFACE_15)
                          7809	#2727:   INTC_PSR(421) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          7810	#2728:   INTC_PSR(422) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          7811	#2729:   INTC_PSR(423) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          7812	#2730: #   endif
                          7813	#2731: #   if defined (LIN_ENABLE_HARDWARE_INTERFACE_16)
                          7814	#2732:   INTC_PSR(424) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          7815	#2733:   INTC_PSR(425) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          7816	#2734:   INTC_PSR(426) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          7817	#2735: #   endif
                          7818	#2736: #   if defined (LIN_ENABLE_HARDWARE_INTERFACE_17)
                          7819	#2737:   INTC_PSR(427) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          7820	#2738:   INTC_PSR(428) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          7821	#2739:   INTC_PSR(429) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          7822	#2740: #   endif
                          7823	#2741: #  endif /*VGEN_ENABLE_LIN_DRV*/
                          7824	#2742:   
                          7825	#2743: #  if defined (VGEN_ENABLE_DRVFR__BASEASR)
                          7826	#2744:   for (i=453; i<=462; i++)
                          7827	#2745:   {

                                   Fri Apr 10 08:31:37 2020           Page 141
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                          7828	#2746:     INTC_PSR(i) = 0x4 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          7829	#2747:   }
                          7830	#2748: #  endif
                          7831	#2749:   
                          7832	#2750: #  if defined (VGEN_ENABLE_DRVETH__BASEASR)
                          7833	#2751: #   if (MPC5748G_CUT == 1)
                          7834	#2752:   /* CUT1 has no "ENET Interrupt Group3" Interrupt */
                          7835	#2753:   for (i=210; i<=212; i++)
                          7836	#2754:   {
                          7837	#2755:     INTC_PSR(i) = 0x1 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          7838	#2756:   }
                          7839	#2757:   for (i=214; i<=218; i++)
                          7840	#2758:   {
                          7841	#2759:     INTC_PSR(i) = 0x1 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          7842	#2760:   }
                          7843	#2761: #   else
                          7844	#2762:   for (i=210; i<=218; i++)
                          7845	#2763:   {
                          7846	#2764:     INTC_PSR(i) = 0x1 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;
                          7847	#2765:   }
                          7848	#2766: #   endif /*CUT1*/
                          7849	#2767: #  endif /*VGEN_ENABLE_DRVETH__BASEASR*/
                          7850	#2768: # endif /*BRSHW_INTERRUPT_TABLE_GROUP_E*/
                          7851	#2770: # if defined (BRSHW_INTERRUPT_TABLE_GROUP_F)
                          7852	#2771:   #define BRSHW_ISR_REQUEST_SENT_TO_CPU0 0x8000
                          7853	#2772:   INTC_MCR   = 0x1; /* Hardware Vector enable */
                          7854	#2773:   INTC_CPR_0 = 0x0; /* Ensure CPU 0 INTC's current priority is 0 */
                          7855	#2775: #  if defined (BRSHW_TIMER_GROUP_A)
                          7856	#2776:   INTC_PSR(226) = 0x32 | BRSHW_ISR_REQUEST_SENT_TO_CPU0; /* PIT0 IRQ */
                          7857	#2777: #  endif
                          7858	#2779: #  if defined (VGEN_ENABLE_CAN_DRV)
                          7859	#2780: #   if defined (kCanPhysToLogChannelIndex_0)
                          7860	#2781:   INTC_PSR(677) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;  /* FlexCAN_0_MB0_3    */
                          7861	#2782:   INTC_PSR(678) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;  /* FlexCAN_0_MB4_7    */
                          7862	#2783:   INTC_PSR(679) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;  /* FlexCAN_0_MB8_11   */
                          7863	#2784:   INTC_PSR(680) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;  /* FlexCAN_0_MB12_15  */
                          7864	#2785:   INTC_PSR(681) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;  /* FlexCAN_0_MB16_31  */
                          7865	#2787:   INTC_PSR(687) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;  /* FlexCAN_0_ERR      */
                          7866	#2788:   INTC_PSR(688) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;  /* FlexCAN_0_BOFF     */
                          7867	#2789: #   endif
                          7868	#2790: #   if defined (kCanPhysToLogChannelIndex_1)
                          7869	#2791:   INTC_PSR(690) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;  /* FlexCAN_1_MB0_3    */
                          7870	#2792:   INTC_PSR(691) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;  /* FlexCAN_1_MB4_7    */
                          7871	#2793:   INTC_PSR(692) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;  /* FlexCAN_1_MB8_11   */
                          7872	#2794:   INTC_PSR(693) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;  /* FlexCAN_1_MB12_15  */
                          7873	#2795:   INTC_PSR(694) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;  /* FlexCAN_1_MB16_31  */
                          7874	#2797:   INTC_PSR(700) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;  /* FlexCAN_1_ERR      */
                          7875	#2798:   INTC_PSR(701) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU0;  /* FlexCAN_1_BOFF     */
                          7876	#2799: #   endif
                          7877	#2800: #  endif /*VGEN_ENABLE_CAN_DRV*/
                          7878	#2802: #   if defined (VGEN_ENABLE_LIN_DRV)
                          7879	#2803:   #error "LIN IRQ Priority not yet implemented!"
                          7880	#2804: #   endif
                          7881	#2806: #   if defined (VGEN_ENABLE_DRVFR__BASEASR)
                          7882	#2807:   #error "FlexRay IRQ Priority not yet implemented!"
                          7883	#2808: #   endif /*VGEN_ENABLE_DRVFR__BASEASR*/

                                   Fri Apr 10 08:31:37 2020           Page 142
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                          7884	#2810: #   if defined (VGEN_ENABLE_DRVETH__BASEASR)
                          7885	#2811:   #error "Ethernet IRQ Priority not yet implemented!"
                          7886	#2812: #   endif
                          7887	#2813: # endif /*BRSHW_INTERRUPT_TABLE_GROUP_F*/
                          7888	#2815: # if defined (BRSHW_INTERRUPT_TABLE_GROUP_G)
                          7889	#2816:   #define BRSHW_ISR_REQUEST_SENT_TO_CPU0 0x8000
                          7890	#2817:   #define BRSHW_ISR_REQUEST_SENT_TO_CPU1 0x4000
                          7891	#2818:   INTC_MCR &= ~(0x00001101);
                          7892	#2819:   INTC_MCR |=   0x00000010;
                          7893	#2820:   INTC_CPR_0 = 0x0;    /* Ensure CPU 0 INTC's current priority is 0 */
                          7894	#2821:   INTC_CPR_1 = 0x0;    /* Ensure CPU 1 INTC's current priority is 0 */
                          7895	#2823:   INTC_PSR(243) = 0x04 | BRSHW_ISR_REQUEST_SENT_TO_CPU1;    /* Set external wakeup Priority = 0x4, processor 1 */
                          7896	#2824:   INTC_PSR(244) = 0x04 | BRSHW_ISR_REQUEST_SENT_TO_CPU1;    /* Set external wakeup Priority = 0x4, processor 1 */
                          7897	#2826: #  if defined (BRSHW_TIMER_GROUP_A)
                          7898	#2827:   INTC_PSR(226) = 0x32 | BRSHW_ISR_REQUEST_SENT_TO_CPU1; /* cyclic timer interrupt on processor 1 */
                          7899	#2828: #  endif
                          7900	#2830: #  if defined (VGEN_ENABLE_CAN_DRV)
                          7901	#2831: #   if defined (kCanPhysToLogChannelIndex_0)
                          7902	#2832:   for (i=677; i<=682; i++)
                          7903	#2833:   {
                          7904	#2834:     INTC_PSR(i) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU1;
                          7905	#2835:   }
                          7906	#2836: #   endif
                          7907	#2837: #   if defined (kCanPhysToLogChannelIndex_1)
                          7908	#2838:   for (i=683; i<=688; i++)
                          7909	#2839:   {
                          7910	#2840:     INTC_PSR(i) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU1;
                          7911	#2841:   }
                          7912	#2842: #   endif
                          7913	#2843: #   if defined (kCanPhysToLogChannelIndex_2)
                          7914	#2844:   for (i=689; i<=694; i++)
                          7915	#2845:   {
                          7916	#2846:     INTC_PSR(i) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU1;
                          7917	#2847:   }
                          7918	#2848: #   endif
                          7919	#2849: #   if defined (kCanPhysToLogChannelIndex_3)
                          7920	#2850:   for (i=695; i<=700; i++)
                          7921	#2851:   {
                          7922	#2852:     INTC_PSR(i) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU1;
                          7923	#2853:   }
                          7924	#2854: #   endif
                          7925	#2855: #  endif /*VGEN_ENABLE_CAN_DRV*/
                          7926	#2856:   
                          7927	#2857: #  if defined (VGEN_ENABLE_LIN_DRV)
                          7928	#2858: #   if defined (LIN_ENABLE_HARDWARE_INTERFACE_0)
                          7929	#2859:   for (i=376; i<=378; i++)
                          7930	#2860:   {
                          7931	#2861:     INTC_PSR(i) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU1;
                          7932	#2862:   }
                          7933	#2863: #   endif
                          7934	#2864: #   if defined (LIN_ENABLE_HARDWARE_INTERFACE_1)
                          7935	#2865:   for (i=380; i<=382; i++)
                          7936	#2866:   {
                          7937	#2867:     INTC_PSR(i) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU1;
                          7938	#2868:   }
                          7939	#2869: #   endif

                                   Fri Apr 10 08:31:37 2020           Page 143
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                          7940	#2870: #   if defined (LIN_ENABLE_HARDWARE_INTERFACE_2)
                          7941	#2871:   for (i=384; i<=386; i++)
                          7942	#2872:   {
                          7943	#2873:     INTC_PSR(i) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU1;
                          7944	#2874:   }
                          7945	#2875: #   endif
                          7946	#2876: #   if defined (LIN_ENABLE_HARDWARE_INTERFACE_3)
                          7947	#2877:   for (i=388; i<=390; i++)
                          7948	#2878:   {
                          7949	#2879:     INTC_PSR(i) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU1;
                          7950	#2880:   }
                          7951	#2881: #   endif
                          7952	#2882: #   if defined (LIN_ENABLE_HARDWARE_INTERFACE_4)
                          7953	#2883:   for (i=392; i<=394; i++)
                          7954	#2884:   {
                          7955	#2885:     INTC_PSR(i) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU1;
                          7956	#2886:   }
                          7957	#2887: #   endif
                          7958	#2888: #   if defined (LIN_ENABLE_HARDWARE_INTERFACE_5)
                          7959	#2889:   for (i=396; i<=398; i++)
                          7960	#2890:   {
                          7961	#2891:     INTC_PSR(i) = 0x3 | BRSHW_ISR_REQUEST_SENT_TO_CPU1;
                          7962	#2892:   }
                          7963	#2893: #   endif
                          7964	#2894: #  endif /*VGEN_ENABLE_LIN_DRV*/
                          7965	#2895:   
                          7966	#2896: #  if defined (VGEN_ENABLE_DRVETH__BASEASR)
                          7967	#2897:   for (i=218; i<=220; i++)
                          7968	#2898:   {
                          7969	#2899:     INTC_PSR(i) = 0x1 | BRSHW_ISR_REQUEST_SENT_TO_CPU1;
                          7970	#2900:   }
                          7971	#2901: #  endif /*VGEN_ENABLE_DRVETH__BASEASR*/
                          7972	#2902: # endif /*BRSHW_INTERRUPT_TABLE_GROUP_G*/
                          7973	#2904:   /***********************************************************
                          7974	#2905:    * Software Vector Mode configuration (SW Dispatching)
                          7975	#2906:    ***********************************************************/
                          7976	#2907:   /* Description: For those derivatives which use SW dispatching, the below code
                          7977	#2908:    *              overwrites the default hardware vector configuration!
                          7978	#2909:    */
                          7979	#2910: # if defined (BRSHW_ENABLE_ISR_SW_DISPATCHING)
                          7980	#2911: #  if defined (BRSHW_INTERRUPT_TABLE_GROUP_C)
                          7981	#2912:   /* Used for MPCMPC5746M and MPC5777M */
                          7982	#2913:   INTC_MCR    = 0x0;                   /* Software Vector mode enabled */
                          7983	#2914:   INTC_ACKR_2 = (uint32)Intvecttable;  /* Configure the vector table base address */
                          7984	#2916: #  elif defined (BRSHW_INTERRUPT_TABLE_GROUP_E)
                          7985	#2917:   INTC_MCR    = 0x0;                   /* Software Vector Mode enabled */
                          7986	#2918:   INTC_ACKR_0 = (uint32)Intvecttable;  /* Configure the vector table base address for CPU0 */
                          7987	#2920: #  elif defined (BRSHW_INTERRUPT_TABLE_GROUP_F)
                          7988	#2921:   INTC_MCR    = 0x0;                   /* Software Vector Mode enabled */
                          7989	#2922:   INTC_ACKR_0 = (uint32)Intvecttable;  /* Configure the vector table base address for CPU0 */
                          7990	#2924: #  else
                          7991	#2925:   #error " Software Vector Mode not yet supported for this IRQ Table Group"
                          7992	#2926: #  endif /*BRSHW_INTERRUPT_TABLE_GROUP_x*/
                          7993	#2927: # endif /*BRSHW_ENABLE_ISR_SW_DISPATCHING*/
                          7994	#2928: }
                          7995	#2929: #endif /*BRS_OS_USECASE_BRS&&!BRS_ENABLE_FBL_SUPPORT*/

                                   Fri Apr 10 08:31:37 2020           Page 144
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                          7996	#2931: /*****************************************************************************/
                          7997	#2932: /**
                          7998	#2933:  * @brief      Disables the global interrupt of the micro. This is done in a
                          7999	#2934:  *             "save way" to allow also nested calls of BrsHwDisableInterrupt
                          8000	#2935:  *             and BrsHwRestoreInterrupt. The first call of BrsHwDisableInterrupt
                          8001	#2936:  *             stores the current state of the global INT flag and the last
                          8002	#2937:  *             call to BrsHwRestoreInterrupt restores the state.
                          8003	#2938:  * @pre        -
                          8004	#2939:  * @param[in]  -
                          8005	#2940:  * @param[out] -
                          8006	#2941:  * @return     -
                          8007	#2942:  * @context    Function is called from all modules to disable the global interrupt
                          8008	#2943:  */
                          8009	#2944: /*****************************************************************************/
                          8010		.align	1
                          8011		.align	1
                          8012	..gh.f.a.1.e.16:
                          8013		.type	..gh.f.a.1.e.16,@object
                          8014		.size	..gh.f.a.1.e.16,0
                          8015		.global	BrsHwDisableInterrupt
                          8016	BrsHwDisableInterrupt:
                          8017	#	    .bf
                          8018	.LDW43:
                          8019	#2945: void BrsHwDisableInterrupt(void)
                          8020	#2946: {
                          8021	#2947:   /* No check for "overrun" of nested INT lock counter is performed, due to more
                          8022	#2948:   *  than 255 nested calls to BrsHwDisableInterrupt are very unlikely. */
                          8023	#2949:   if (bBrsHwIntDiCounter == 0)
000001fe 7000e000         8024		e_lis	r0, %hiadj(bBrsHwIntDiCounter)
00000202 1c000000         8025		e_add16i	r0, r0, %lo(bBrsHwIntDiCounter)
00000206 8070             8026		se_lbz	r7, 0(r0)
00000208 2a07             8027		se_cmpi	r7, 0
0000020a e200             8028		se_bne	.L1120
                          8029	#2950:   {
                          8030	#2951:     asm(" wrteei 0"); /* Disable external interrupts */
                          8031	#line2951
                          8032	..lin.46275963..eaaf356c.0_15::
                          8033	.LDWlin15:
                          8034	..gh.beginasm.17:
                          8035		.type	..gh.beginasm.17,@object
                          8036		.size	..gh.beginasm.17,0
0000020c 7c000146         8037	 wrteei 0
                          8038	
                          8039	..gh.endasm.18:
                          8040		.type	..gh.endasm.18,@object
                          8041		.size	..gh.endasm.18,0
                          8042	.L1120:
                          8043	#2952:   }
                          8044	#2954:   bBrsHwIntDiCounter++;
                          8045	#line2954
                          8046	..lin.46275963..eaaf356c.0_16::
                          8047	.LDWlin16:
00000210 8070             8048		se_lbz	r7, 0(r0)
00000212 2007             8049		se_addi	r7, 1
00000214 9070             8050		se_stb	r7, 0(r0)
                          8051	#2955: }

                                   Fri Apr 10 08:31:37 2020           Page 145
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                          8052	#	    .ef
                          8053	.LDW53:
00000216 0004             8054		se_blr
                          8055		.global	__ghs_eofn_BrsHwDisableInterrupt
                          8056	__ghs_eofn_BrsHwDisableInterrupt:
                          8057		.type	BrsHwDisableInterrupt,@function
                          8058		.size	BrsHwDisableInterrupt,$-BrsHwDisableInterrupt
                          8059		.align	1
                          8060	
                          8061	#function:			BrsHwDisableInterrupt
                          8062	#stack frame size:		0
                          8063	#
                          8064	
                          8065		.data
                          8066		.section ".vletext", "vax"
                          8067		.vle
                          8068		.vle
                          8069	
                          8070	
                          8071	#2957: /*****************************************************************************/
                          8072	#2958: /**
                          8073	#2959:  * @brief      Restores the state of the global interrupt of the micro. This
                          8074	#2960:  *             is done in a "save way" to allow also nested calls of
                          8075	#2961:  *             BrsHwDisableInterrupt and BrsHwRestoreInterrupt. The first call
                          8076	#2962:  *             of BrsHwDisableInterrupt stores the current state of the global
                          8077	#2963:  *             INT flag and the last call to BrsHwRestoreInterrupt restores the
                          8078	#2964:  *             state.
                          8079	#2965:  * @pre        -
                          8080	#2966:  * @param[in]  -
                          8081	#2967:  * @param[out] -
                          8082	#2968:  * @return     -
                          8083	#2969:  * @context    Function is called from all modules to enable the global interrupt
                          8084	#2970:  */
                          8085	#2971: /*****************************************************************************/
                          8086		.align	1
                          8087		.align	1
                          8088	..gh.f.a.1.e.19:
                          8089		.type	..gh.f.a.1.e.19,@object
                          8090		.size	..gh.f.a.1.e.19,0
                          8091		.global	BrsHwRestoreInterrupt
                          8092	BrsHwRestoreInterrupt:
                          8093	#	    .bf
                          8094	.LDW63:
                          8095	#2972: void BrsHwRestoreInterrupt(void)
                          8096	#2973: {
                          8097	#2974:   /* Check for illegal call of BrsHwRestoreInterrupt. If this function is called
                          8098	#2975:    *  too often, the INT lock works incorrect. */
                          8099	#2976:   if (bBrsHwIntDiCounter == 0)
                          8100	#2977:   {
                          8101	#2978: #if defined (BRS_OS_USECASE_BRS) && !defined (BRS_ENABLE_FBL_SUPPORT)
                          8102	#2979:     BrsMainExceptionHandler( kBrsIllegalInterruptRestoration, BRSERROR_MODULE_BRSHW, (uint16)(__LINE__) );
                          8103	#2980: #else
                          8104	#2981:     /* Check is only performed, if no OS and no FBL are used */
                          8105	#2982: #endif
                          8106	#2983:   }
                          8107	#2985:   bBrsHwIntDiCounter--;

                                   Fri Apr 10 08:31:37 2020           Page 146
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
00000218 70e0e000         8108		e_lis	r7, %hiadj(bBrsHwIntDiCounter)
0000021c 1ce70000         8109		e_add16i	r7, r7, %lo(bBrsHwIntDiCounter)
00000220 8007             8110		se_lbz	r0, 0(r7)
00000222 2400             8111		se_subi	r0, 1
00000224 9007             8112		se_stb	r0, 0(r7)
00000226 00c0             8113		se_extzb	r0
                          8114	#2986:   if (bBrsHwIntDiCounter == 0)
00000228 2a00             8115		se_cmpi	r0, 0
0000022a e200             8116		se_bne	.L1186
                          8117	#2987:   {
                          8118	#2988:     asm(" wrteei 1");
                          8119	#line2988
                          8120	..lin.46275963..890f42bc.0_17::
                          8121	.LDWlin17:
                          8122	..gh.beginasm.20:
                          8123		.type	..gh.beginasm.20,@object
                          8124		.size	..gh.beginasm.20,0
0000022c 7c008146         8125	 wrteei 1
                          8126	
                          8127	..gh.endasm.21:
                          8128		.type	..gh.endasm.21,@object
                          8129		.size	..gh.endasm.21,0
                          8130	.L1186:
                          8131	#2989:   }
                          8132	#2990: }
                          8133	#	    .ef
                          8134	.LDW73:
                          8135	#line2990
                          8136	..lin.46275963..890f42bc.0_18::
                          8137	.LDWlin18:
00000230 0004             8138		se_blr
                          8139		.global	__ghs_eofn_BrsHwRestoreInterrupt
                          8140	__ghs_eofn_BrsHwRestoreInterrupt:
                          8141		.type	BrsHwRestoreInterrupt,@function
                          8142		.size	BrsHwRestoreInterrupt,$-BrsHwRestoreInterrupt
                          8143		.align	1
                          8144	
                          8145	#function:			BrsHwRestoreInterrupt
                          8146	#stack frame size:		0
                          8147	#
                          8148	
                          8149		.data
                          8150		.section ".vletext", "vax"
                          8151		.vle
                          8152		.vle
                          8153	
                          8154	
                          8155	#2992: /*****************************************************************************/
                          8156	#2993: /**
                          8157	#2994:  * @brief      restart ECU (issue a software reset or jump to startup code)
                          8158	#2995:  * @pre        -
                          8159	#2996:  * @param[in]  -
                          8160	#2997:  * @param[out] -
                          8161	#2998:  * @return     -
                          8162	#2999:  * @context    Function is called from e.g. ECU state handling
                          8163	#3000:  */

                                   Fri Apr 10 08:31:37 2020           Page 147
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                          8164	#3001: /*****************************************************************************/
                          8165		.align	1
                          8166		.align	1
                          8167	..gh.f.p.0.a.1.r.0.e.22:
                          8168		.type	..gh.f.p.0.a.1.r.0.e.22,@object
                          8169		.size	..gh.f.p.0.a.1.r.0.e.22,0
                          8170		.global	BrsHwSoftwareResetECU
                          8171	BrsHwSoftwareResetECU:
00000232 0080             8172		se_mflr	r0
00000234 d101             8173		se_stw	r0, 4(sp)
00000236 182106f8         8174		e_stwu	sp, -8(sp)
                          8175	#	    .bf
                          8176	.LDW83:
                          8177	#3002: void BrsHwSoftwareResetECU(void)
                          8178	#3003: {
                          8179	#3004:   BrsHwDisableInterrupt();
0000023a e900             8180		se_bl	BrsHwDisableInterrupt
                          8181	#3006: #if defined (BRSHW_SIU_GROUP_B)
                          8182	#3007:   /* Derivatives, which do not contain Mode Entry Module for generating a reset, could generate an interanl system reaset via System Reset Control Register */
                          8183	#3008:   SIU_SRCR |= 0x80000000;
                          8184	#3009: #else
                          8185	#3010:   /* Reset the functional reset escalation threshold register */
                          8186	#3011:   RGM_FRET = RGM_FRET;
                          8187	#line3011
                          8188	..lin.46275963..5844ca76.0_19::
                          8189	.LDWlin19:
0000023c 70105604         8190		e_li	r0, -358908
00000240 8070             8191		se_lbz	r7, 0(r0)
00000242 9070             8192		se_stb	r7, 0(r0)
                          8193	#3013:   /* Sequence that mode transition are mannaged by hardware */
                          8194	#3014:   ME_MCTL = 0x00005AF0UL; /* Key access 1st step */
00000244 70105804         8195		e_li	r0, -294908
00000248 70eb02f0         8196		e_li	r7, 23280
0000024c d070             8197		se_stw	r7, 0(r0)
                          8198	#3015:   ME_MCTL = 0x0000A50FUL; /* Key access 2nd step */
0000024e 70f4050f         8199		e_li	r7, 42255
00000252 d070             8200		se_stw	r7, 0(r0)
                          8201	#3016: #endif
                          8202	#3018:   while (1)
                          8203	.L1252:
                          8204	#3019:   {
00000254 e800             8205		se_b	.L1252
                          8206	#	    .ef
                          8207	.LDW93:
                          8208	..lin.46275963..5844ca76.0_20::
                          8209	.LDWlin20:
                          8210		.global	__ghs_eofn_BrsHwSoftwareResetECU
                          8211	__ghs_eofn_BrsHwSoftwareResetECU:
                          8212		.type	BrsHwSoftwareResetECU,@function
                          8213		.size	BrsHwSoftwareResetECU,$-BrsHwSoftwareResetECU
                          8214		.align	1
                          8215	
                          8216	#function:			BrsHwSoftwareResetECU
                          8217	#stack frame size:		8
                          8218	#link area offset:		0
                          8219	#local storage area offset:	8

                                   Fri Apr 10 08:31:37 2020           Page 148
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                          8220	#
                          8221	
                          8222		.data
                          8223		.section ".vletext", "vax"
                          8224		.vle
                          8225		.vle
                          8226	
                          8227	#3020:     /* Wait until watchdog reset occurs */
                          8228	#3021:   }
                          8229	#3022: }
                          8230	
                          8231	#3024: #if defined (BRS_ENABLE_SUPPORT_LEDS)          || \
                          8232	#3025:     defined (BRS_ENABLE_SUPPORT_TOGGLE_WD_PIN) || \
                          8233	#3026:     defined (BRS_ENABLE_SUPPORT_TOGGLE_CUSTOM_PIN)
                          8234	#3027: # if defined (BRS_ENABLE_FBL_SUPPORT)
                          8235	#3028:   #define BRS_START_SEC_RAM_CODE
                          8236	#3029:   #include "Brs_MemMap.h"   /* PRQA S 5087 *//* MD_MSR_19.1 */
                          8237	#3030: # endif
                          8238	#3031: /*****************************************************************************/
                          8239	#3032: /**
                          8240	#3033:  * @brief      This API is used to toggle a PortPin.
                          8241	#3034:  *             Per default, the following parameters are available:
                          8242	#3035:  *               BRSHW_TOGGLEPIN_LED
                          8243	#3036:  *               BRSHW_TOGGLEPIN_WD
                          8244	#3037:  *               BRSHW_TOGGLEPIN_CUSTOM
                          8245	#3038:  *             Depending pins have to be configured within BrsHw_Ports.h.
                          8246	#3039:  * @pre        -
                          8247	#3040:  * @param[in]  Pin has to configure the depending pin to be toggled
                          8248	#3041:  * @param[out] -
                          8249	#3042:  * @return     -
                          8250	#3043:  * @context    Function is called from all modules to set or clear a PortPin
                          8251	#3044:  */
                          8252	#3045: /*****************************************************************************/
                          8253	#3046: void BrsHwTogglePin(brsHw_TogglePin Pin)
                          8254	#3047: {
                          8255	#3048: #if defined (VGEN_ENABLE_DRVDIO)
                          8256	#3049:   #error "Configure the valid DioChannel for the toggle pins within your DrvDio config and set it as value for BrsHw_Dio_ToggleX_Channel. Or disable the depending BRS mechanism."*/
                          8257	#3050: # if defined (BRS_ENABLE_SUPPORT_LEDS)
                          8258	#3051:   Dio_ChannelType BrsHw_Dio_ToggleLED_Channel = DioConf_DioChannel_DioChannel_LED;
                          8259	#3052: # endif
                          8260	#3053: # if defined (BRS_ENABLE_SUPPORT_TOGGLE_WD_PIN)
                          8261	#3054:   Dio_ChannelType BrsHw_Dio_ToggleWD_Channel = DioConf_DioChannel_DioChannel_WD;
                          8262	#3055: # endif
                          8263	#3056: # if defined (BRS_ENABLE_SUPPORT_TOGGLE_CUSTOM_PIN)
                          8264	#3057:   Dio_ChannelType BrsHw_Dio_ToggleCUSTOM_Channel = DioConf_DioChannel_DioChannel_CUSTOM;
                          8265	#3058: # endif
                          8266	#3059: #endif /*VGEN_ENABLE_DRVDIO*/
                          8267	#3061: #if defined (BRS_ENABLE_SUPPORT_LEDS)
                          8268	#3062:   static uint8 BrsHw_ToggleSwitch_LED = BRSHW_PORT_LOGIC_HIGH;
                          8269	#3063: #endif
                          8270	#3064: #if defined (BRS_ENABLE_SUPPORT_TOGGLE_WD_PIN)
                          8271	#3065:   static uint8 BrsHw_ToggleSwitch_WD = BRSHW_PORT_LOGIC_HIGH;
                          8272	#3066: #endif
                          8273	#3067: #if defined (BRS_ENABLE_SUPPORT_TOGGLE_CUSTOM_PIN)
                          8274	#3068:   static uint8 BrsHw_ToggleSwitch_CUSTOM = BRSHW_PORT_LOGIC_HIGH;
                          8275	#3069: #endif

                                   Fri Apr 10 08:31:37 2020           Page 149
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                          8276	#3071:   switch (Pin)
                          8277	#3072:   {
                          8278	#3073: #if defined (BRS_ENABLE_SUPPORT_LEDS)
                          8279	#3074:     case BRSHW_TOGGLEPIN_LED:
                          8280	#3075: # if defined (VGEN_ENABLE_DRVDIO)
                          8281	#3076:       Dio_WriteChannel(BrsHw_Dio_ToggleLED_Channel, BrsHw_ToggleSwitch_LED & 0x01);
                          8282	#3077: # else
                          8283	#3078:       BrsHwPort_SetLevel(BRSHW_PORT_LED, BrsHw_ToggleSwitch_LED & 0x01);
                          8284	#3079: # endif
                          8285	#3080:       BrsHw_ToggleSwitch_LED++;
                          8286	#3081:       break;
                          8287	#3082: #endif /*BRS_ENABLE_SUPPORT_LEDS*/
                          8288	#3083: #if defined (BRS_ENABLE_SUPPORT_TOGGLE_WD_PIN)
                          8289	#3084:     case BRSHW_TOGGLEPIN_WD:
                          8290	#3085: # if defined (VGEN_ENABLE_DRVDIO)
                          8291	#3086:       Dio_WriteChannel(BrsHw_Dio_ToggleWD_Channel, BrsHw_ToggleSwitch_WD & 0x01);
                          8292	#3087: # else
                          8293	#3088:       BrsHwPort_SetLevel(BRSHW_PORT_TOGGLE_WD, BrsHw_ToggleSwitch_WD & 0x01);
                          8294	#3089: # endif
                          8295	#3090:       BrsHw_ToggleSwitch_WD++;
                          8296	#3091:       break;
                          8297	#3092: #endif /*BRS_ENABLE_SUPPORT_TOGGLE_WD_PIN*/
                          8298	#3093: #if defined (BRS_ENABLE_SUPPORT_TOGGLE_CUSTOM_PIN)
                          8299	#3094:     case BRSHW_TOGGLEPIN_CUSTOM:
                          8300	#3095: # if defined (VGEN_ENABLE_DRVDIO)
                          8301	#3096:       Dio_WriteChannel(BrsHw_Dio_ToggleCUSTOM_Channel, BrsHw_ToggleSwitch_CUSTOM & 0x01);
                          8302	#3097: # else
                          8303	#3098:       BrsHwPort_SetLevel(BRSHW_PORT_TOGGLE_CUSTOM, BrsHw_ToggleSwitch_CUSTOM & 0x01);
                          8304	#3099: # endif
                          8305	#3100:       BrsHw_ToggleSwitch_CUSTOM++;
                          8306	#3101:       break;
                          8307	#3102: #endif /*BRS_ENABLE_SUPPORT_TOGGLE_CUSTOM_PIN*/
                          8308	#3103:     default:
                          8309	#3104: #if defined (BRS_OS_USECASE_BRS) && !defined (BRS_ENABLE_FBL_SUPPORT)
                          8310	#3105:       BrsMainExceptionHandler(kBrsIllegalParameter, BRSERROR_MODULE_BRSHW, (uint16)(__LINE__));
                          8311	#3106: #endif
                          8312	#3107:       break;
                          8313	#3108:   }
                          8314	#3109: }
                          8315	#3110: # if defined (BRS_ENABLE_FBL_SUPPORT)
                          8316	#3111:   #define BRS_STOP_SEC_RAM_CODE
                          8317	#3112:   #include "Brs_MemMap.h"   /* PRQA S 5087 *//* MD_MSR_19.1 */
                          8318	#3113: # endif
                          8319	#3114: #endif /*BRS_ENABLE_SUPPORT_LEDS||BRS_ENABLE_SUPPORT_TOGGLE_WD_PIN||BRS_ENABLE_SUPPORT_TOGGLE_CUSTOM_PIN*/
                          8320	#3116: /*****************************************************************************/
                          8321	#3117: /**
                          8322	#3118:  * @brief      This API is used for the BRS time measurement support to get a
                          8323	#3119:  *             default time value for all measurements with this platform to
                          8324	#3120:  *             be able to compare time measurements on different dates based
                          8325	#3121:  *             on this time result.
                          8326	#3122:  * @pre        -
                          8327	#3123:  * @param[in]  -
                          8328	#3124:  * @param[out] -
                          8329	#3125:  * @return     -
                          8330	#3126:  * @context    Function is called from TimeMeasurement
                          8331	#3127:  */

                                   Fri Apr 10 08:31:37 2020           Page 150
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                          8332	#3128: /*****************************************************************************/
                          8333		.align	1
                          8334		.align	1
                          8335	..gh.f.a.1.e.23:
                          8336		.type	..gh.f.a.1.e.23,@object
                          8337		.size	..gh.f.a.1.e.23,0
                          8338		.global	BrsHwTime100NOP
                          8339	BrsHwTime100NOP:
00000256 0080             8340		se_mflr	r0
00000258 d101             8341		se_stw	r0, 4(sp)
0000025a 182106f8         8342		e_stwu	sp, -8(sp)
                          8343	#	    .bf
                          8344	.LDW04:
                          8345	#3129: void BrsHwTime100NOP(void)
                          8346	#3130: {
                          8347	#3131:   BrsHwDisableInterrupt();
0000025e 78000001         8348		e_bl	BrsHwDisableInterrupt
                          8349	#3133:   BRSHWNOP10();
                          8350	..gh.beginasm.24:
                          8351		.type	..gh.beginasm.24,@object
                          8352		.size	..gh.beginasm.24,0
00000262 1800d000         8353	nop
                          8354	
                          8355	..gh.endasm.25:
                          8356		.type	..gh.endasm.25,@object
                          8357		.size	..gh.endasm.25,0
                          8358	..gh.beginasm.26:
                          8359		.type	..gh.beginasm.26,@object
                          8360		.size	..gh.beginasm.26,0
00000266 1800d000         8361	nop
                          8362	
                          8363	..gh.endasm.27:
                          8364		.type	..gh.endasm.27,@object
                          8365		.size	..gh.endasm.27,0
                          8366	..gh.beginasm.28:
                          8367		.type	..gh.beginasm.28,@object
                          8368		.size	..gh.beginasm.28,0
0000026a 1800d000         8369	nop
                          8370	
                          8371	..gh.endasm.29:
                          8372		.type	..gh.endasm.29,@object
                          8373		.size	..gh.endasm.29,0
                          8374	..gh.beginasm.30:
                          8375		.type	..gh.beginasm.30,@object
                          8376		.size	..gh.beginasm.30,0
0000026e 1800d000         8377	nop
                          8378	
                          8379	..gh.endasm.31:
                          8380		.type	..gh.endasm.31,@object
                          8381		.size	..gh.endasm.31,0
                          8382	..gh.beginasm.32:
                          8383		.type	..gh.beginasm.32,@object
                          8384		.size	..gh.beginasm.32,0
00000272 1800d000         8385	nop
                          8386	
                          8387	..gh.endasm.33:

                                   Fri Apr 10 08:31:37 2020           Page 151
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                          8388		.type	..gh.endasm.33,@object
                          8389		.size	..gh.endasm.33,0
                          8390	..gh.beginasm.34:
                          8391		.type	..gh.beginasm.34,@object
                          8392		.size	..gh.beginasm.34,0
00000276 1800d000         8393	nop
                          8394	
                          8395	..gh.endasm.35:
                          8396		.type	..gh.endasm.35,@object
                          8397		.size	..gh.endasm.35,0
                          8398	..gh.beginasm.36:
                          8399		.type	..gh.beginasm.36,@object
                          8400		.size	..gh.beginasm.36,0
0000027a 1800d000         8401	nop
                          8402	
                          8403	..gh.endasm.37:
                          8404		.type	..gh.endasm.37,@object
                          8405		.size	..gh.endasm.37,0
                          8406	..gh.beginasm.38:
                          8407		.type	..gh.beginasm.38,@object
                          8408		.size	..gh.beginasm.38,0
0000027e 1800d000         8409	nop
                          8410	
                          8411	..gh.endasm.39:
                          8412		.type	..gh.endasm.39,@object
                          8413		.size	..gh.endasm.39,0
                          8414	..gh.beginasm.40:
                          8415		.type	..gh.beginasm.40,@object
                          8416		.size	..gh.beginasm.40,0
00000282 1800d000         8417	nop
                          8418	
                          8419	..gh.endasm.41:
                          8420		.type	..gh.endasm.41,@object
                          8421		.size	..gh.endasm.41,0
                          8422	..gh.beginasm.42:
                          8423		.type	..gh.beginasm.42,@object
                          8424		.size	..gh.beginasm.42,0
00000286 1800d000         8425	nop
                          8426	
                          8427	..gh.endasm.43:
                          8428		.type	..gh.endasm.43,@object
                          8429		.size	..gh.endasm.43,0
                          8430	#3134:   BRSHWNOP10();
                          8431	#line3134
                          8432	..lin.46275963..5758cf8.0_21::
                          8433	.LDWlin21:
                          8434	..gh.beginasm.44:
                          8435		.type	..gh.beginasm.44,@object
                          8436		.size	..gh.beginasm.44,0
0000028a 1800d000         8437	nop
                          8438	
                          8439	..gh.endasm.45:
                          8440		.type	..gh.endasm.45,@object
                          8441		.size	..gh.endasm.45,0
                          8442	..gh.beginasm.46:
                          8443		.type	..gh.beginasm.46,@object

                                   Fri Apr 10 08:31:37 2020           Page 152
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                          8444		.size	..gh.beginasm.46,0
0000028e 1800d000         8445	nop
                          8446	
                          8447	..gh.endasm.47:
                          8448		.type	..gh.endasm.47,@object
                          8449		.size	..gh.endasm.47,0
                          8450	..gh.beginasm.48:
                          8451		.type	..gh.beginasm.48,@object
                          8452		.size	..gh.beginasm.48,0
00000292 1800d000         8453	nop
                          8454	
                          8455	..gh.endasm.49:
                          8456		.type	..gh.endasm.49,@object
                          8457		.size	..gh.endasm.49,0
                          8458	..gh.beginasm.50:
                          8459		.type	..gh.beginasm.50,@object
                          8460		.size	..gh.beginasm.50,0
00000296 1800d000         8461	nop
                          8462	
                          8463	..gh.endasm.51:
                          8464		.type	..gh.endasm.51,@object
                          8465		.size	..gh.endasm.51,0
                          8466	..gh.beginasm.52:
                          8467		.type	..gh.beginasm.52,@object
                          8468		.size	..gh.beginasm.52,0
0000029a 1800d000         8469	nop
                          8470	
                          8471	..gh.endasm.53:
                          8472		.type	..gh.endasm.53,@object
                          8473		.size	..gh.endasm.53,0
                          8474	..gh.beginasm.54:
                          8475		.type	..gh.beginasm.54,@object
                          8476		.size	..gh.beginasm.54,0
0000029e 1800d000         8477	nop
                          8478	
                          8479	..gh.endasm.55:
                          8480		.type	..gh.endasm.55,@object
                          8481		.size	..gh.endasm.55,0
                          8482	..gh.beginasm.56:
                          8483		.type	..gh.beginasm.56,@object
                          8484		.size	..gh.beginasm.56,0
000002a2 1800d000         8485	nop
                          8486	
                          8487	..gh.endasm.57:
                          8488		.type	..gh.endasm.57,@object
                          8489		.size	..gh.endasm.57,0
                          8490	..gh.beginasm.58:
                          8491		.type	..gh.beginasm.58,@object
                          8492		.size	..gh.beginasm.58,0
000002a6 1800d000         8493	nop
                          8494	
                          8495	..gh.endasm.59:
                          8496		.type	..gh.endasm.59,@object
                          8497		.size	..gh.endasm.59,0
                          8498	..gh.beginasm.60:
                          8499		.type	..gh.beginasm.60,@object

                                   Fri Apr 10 08:31:37 2020           Page 153
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                          8500		.size	..gh.beginasm.60,0
000002aa 1800d000         8501	nop
                          8502	
                          8503	..gh.endasm.61:
                          8504		.type	..gh.endasm.61,@object
                          8505		.size	..gh.endasm.61,0
                          8506	..gh.beginasm.62:
                          8507		.type	..gh.beginasm.62,@object
                          8508		.size	..gh.beginasm.62,0
000002ae 1800d000         8509	nop
                          8510	
                          8511	..gh.endasm.63:
                          8512		.type	..gh.endasm.63,@object
                          8513		.size	..gh.endasm.63,0
                          8514	#3135:   BRSHWNOP10();
                          8515	#line3135
                          8516	..lin.46275963..5758cf8.0_22::
                          8517	.LDWlin22:
                          8518	..gh.beginasm.64:
                          8519		.type	..gh.beginasm.64,@object
                          8520		.size	..gh.beginasm.64,0
000002b2 1800d000         8521	nop
                          8522	
                          8523	..gh.endasm.65:
                          8524		.type	..gh.endasm.65,@object
                          8525		.size	..gh.endasm.65,0
                          8526	..gh.beginasm.66:
                          8527		.type	..gh.beginasm.66,@object
                          8528		.size	..gh.beginasm.66,0
000002b6 1800d000         8529	nop
                          8530	
                          8531	..gh.endasm.67:
                          8532		.type	..gh.endasm.67,@object
                          8533		.size	..gh.endasm.67,0
                          8534	..gh.beginasm.68:
                          8535		.type	..gh.beginasm.68,@object
                          8536		.size	..gh.beginasm.68,0
000002ba 1800d000         8537	nop
                          8538	
                          8539	..gh.endasm.69:
                          8540		.type	..gh.endasm.69,@object
                          8541		.size	..gh.endasm.69,0
                          8542	..gh.beginasm.70:
                          8543		.type	..gh.beginasm.70,@object
                          8544		.size	..gh.beginasm.70,0
000002be 1800d000         8545	nop
                          8546	
                          8547	..gh.endasm.71:
                          8548		.type	..gh.endasm.71,@object
                          8549		.size	..gh.endasm.71,0
                          8550	..gh.beginasm.72:
                          8551		.type	..gh.beginasm.72,@object
                          8552		.size	..gh.beginasm.72,0
000002c2 1800d000         8553	nop
                          8554	
                          8555	..gh.endasm.73:

                                   Fri Apr 10 08:31:37 2020           Page 154
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                          8556		.type	..gh.endasm.73,@object
                          8557		.size	..gh.endasm.73,0
                          8558	..gh.beginasm.74:
                          8559		.type	..gh.beginasm.74,@object
                          8560		.size	..gh.beginasm.74,0
000002c6 1800d000         8561	nop
                          8562	
                          8563	..gh.endasm.75:
                          8564		.type	..gh.endasm.75,@object
                          8565		.size	..gh.endasm.75,0
                          8566	..gh.beginasm.76:
                          8567		.type	..gh.beginasm.76,@object
                          8568		.size	..gh.beginasm.76,0
000002ca 1800d000         8569	nop
                          8570	
                          8571	..gh.endasm.77:
                          8572		.type	..gh.endasm.77,@object
                          8573		.size	..gh.endasm.77,0
                          8574	..gh.beginasm.78:
                          8575		.type	..gh.beginasm.78,@object
                          8576		.size	..gh.beginasm.78,0
000002ce 1800d000         8577	nop
                          8578	
                          8579	..gh.endasm.79:
                          8580		.type	..gh.endasm.79,@object
                          8581		.size	..gh.endasm.79,0
                          8582	..gh.beginasm.80:
                          8583		.type	..gh.beginasm.80,@object
                          8584		.size	..gh.beginasm.80,0
000002d2 1800d000         8585	nop
                          8586	
                          8587	..gh.endasm.81:
                          8588		.type	..gh.endasm.81,@object
                          8589		.size	..gh.endasm.81,0
                          8590	..gh.beginasm.82:
                          8591		.type	..gh.beginasm.82,@object
                          8592		.size	..gh.beginasm.82,0
000002d6 1800d000         8593	nop
                          8594	
                          8595	..gh.endasm.83:
                          8596		.type	..gh.endasm.83,@object
                          8597		.size	..gh.endasm.83,0
                          8598	#3136:   BRSHWNOP10();
                          8599	#line3136
                          8600	..lin.46275963..5758cf8.0_23::
                          8601	.LDWlin23:
                          8602	..gh.beginasm.84:
                          8603		.type	..gh.beginasm.84,@object
                          8604		.size	..gh.beginasm.84,0
000002da 1800d000         8605	nop
                          8606	
                          8607	..gh.endasm.85:
                          8608		.type	..gh.endasm.85,@object
                          8609		.size	..gh.endasm.85,0
                          8610	..gh.beginasm.86:
                          8611		.type	..gh.beginasm.86,@object

                                   Fri Apr 10 08:31:37 2020           Page 155
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                          8612		.size	..gh.beginasm.86,0
000002de 1800d000         8613	nop
                          8614	
                          8615	..gh.endasm.87:
                          8616		.type	..gh.endasm.87,@object
                          8617		.size	..gh.endasm.87,0
                          8618	..gh.beginasm.88:
                          8619		.type	..gh.beginasm.88,@object
                          8620		.size	..gh.beginasm.88,0
000002e2 1800d000         8621	nop
                          8622	
                          8623	..gh.endasm.89:
                          8624		.type	..gh.endasm.89,@object
                          8625		.size	..gh.endasm.89,0
                          8626	..gh.beginasm.90:
                          8627		.type	..gh.beginasm.90,@object
                          8628		.size	..gh.beginasm.90,0
000002e6 1800d000         8629	nop
                          8630	
                          8631	..gh.endasm.91:
                          8632		.type	..gh.endasm.91,@object
                          8633		.size	..gh.endasm.91,0
                          8634	..gh.beginasm.92:
                          8635		.type	..gh.beginasm.92,@object
                          8636		.size	..gh.beginasm.92,0
000002ea 1800d000         8637	nop
                          8638	
                          8639	..gh.endasm.93:
                          8640		.type	..gh.endasm.93,@object
                          8641		.size	..gh.endasm.93,0
                          8642	..gh.beginasm.94:
                          8643		.type	..gh.beginasm.94,@object
                          8644		.size	..gh.beginasm.94,0
000002ee 1800d000         8645	nop
                          8646	
                          8647	..gh.endasm.95:
                          8648		.type	..gh.endasm.95,@object
                          8649		.size	..gh.endasm.95,0
                          8650	..gh.beginasm.96:
                          8651		.type	..gh.beginasm.96,@object
                          8652		.size	..gh.beginasm.96,0
000002f2 1800d000         8653	nop
                          8654	
                          8655	..gh.endasm.97:
                          8656		.type	..gh.endasm.97,@object
                          8657		.size	..gh.endasm.97,0
                          8658	..gh.beginasm.98:
                          8659		.type	..gh.beginasm.98,@object
                          8660		.size	..gh.beginasm.98,0
000002f6 1800d000         8661	nop
                          8662	
                          8663	..gh.endasm.99:
                          8664		.type	..gh.endasm.99,@object
                          8665		.size	..gh.endasm.99,0
                          8666	..gh.beginasm.100:
                          8667		.type	..gh.beginasm.100,@object

                                   Fri Apr 10 08:31:37 2020           Page 156
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                          8668		.size	..gh.beginasm.100,0
000002fa 1800d000         8669	nop
                          8670	
                          8671	..gh.endasm.101:
                          8672		.type	..gh.endasm.101,@object
                          8673		.size	..gh.endasm.101,0
                          8674	..gh.beginasm.102:
                          8675		.type	..gh.beginasm.102,@object
                          8676		.size	..gh.beginasm.102,0
000002fe 1800d000         8677	nop
                          8678	
                          8679	..gh.endasm.103:
                          8680		.type	..gh.endasm.103,@object
                          8681		.size	..gh.endasm.103,0
                          8682	#3137:   BRSHWNOP10();
                          8683	#line3137
                          8684	..lin.46275963..5758cf8.0_24::
                          8685	.LDWlin24:
                          8686	..gh.beginasm.104:
                          8687		.type	..gh.beginasm.104,@object
                          8688		.size	..gh.beginasm.104,0
00000302 1800d000         8689	nop
                          8690	
                          8691	..gh.endasm.105:
                          8692		.type	..gh.endasm.105,@object
                          8693		.size	..gh.endasm.105,0
                          8694	..gh.beginasm.106:
                          8695		.type	..gh.beginasm.106,@object
                          8696		.size	..gh.beginasm.106,0
00000306 1800d000         8697	nop
                          8698	
                          8699	..gh.endasm.107:
                          8700		.type	..gh.endasm.107,@object
                          8701		.size	..gh.endasm.107,0
                          8702	..gh.beginasm.108:
                          8703		.type	..gh.beginasm.108,@object
                          8704		.size	..gh.beginasm.108,0
0000030a 1800d000         8705	nop
                          8706	
                          8707	..gh.endasm.109:
                          8708		.type	..gh.endasm.109,@object
                          8709		.size	..gh.endasm.109,0
                          8710	..gh.beginasm.110:
                          8711		.type	..gh.beginasm.110,@object
                          8712		.size	..gh.beginasm.110,0
0000030e 1800d000         8713	nop
                          8714	
                          8715	..gh.endasm.111:
                          8716		.type	..gh.endasm.111,@object
                          8717		.size	..gh.endasm.111,0
                          8718	..gh.beginasm.112:
                          8719		.type	..gh.beginasm.112,@object
                          8720		.size	..gh.beginasm.112,0
00000312 1800d000         8721	nop
                          8722	
                          8723	..gh.endasm.113:

                                   Fri Apr 10 08:31:37 2020           Page 157
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                          8724		.type	..gh.endasm.113,@object
                          8725		.size	..gh.endasm.113,0
                          8726	..gh.beginasm.114:
                          8727		.type	..gh.beginasm.114,@object
                          8728		.size	..gh.beginasm.114,0
00000316 1800d000         8729	nop
                          8730	
                          8731	..gh.endasm.115:
                          8732		.type	..gh.endasm.115,@object
                          8733		.size	..gh.endasm.115,0
                          8734	..gh.beginasm.116:
                          8735		.type	..gh.beginasm.116,@object
                          8736		.size	..gh.beginasm.116,0
0000031a 1800d000         8737	nop
                          8738	
                          8739	..gh.endasm.117:
                          8740		.type	..gh.endasm.117,@object
                          8741		.size	..gh.endasm.117,0
                          8742	..gh.beginasm.118:
                          8743		.type	..gh.beginasm.118,@object
                          8744		.size	..gh.beginasm.118,0
0000031e 1800d000         8745	nop
                          8746	
                          8747	..gh.endasm.119:
                          8748		.type	..gh.endasm.119,@object
                          8749		.size	..gh.endasm.119,0
                          8750	..gh.beginasm.120:
                          8751		.type	..gh.beginasm.120,@object
                          8752		.size	..gh.beginasm.120,0
00000322 1800d000         8753	nop
                          8754	
                          8755	..gh.endasm.121:
                          8756		.type	..gh.endasm.121,@object
                          8757		.size	..gh.endasm.121,0
                          8758	..gh.beginasm.122:
                          8759		.type	..gh.beginasm.122,@object
                          8760		.size	..gh.beginasm.122,0
00000326 1800d000         8761	nop
                          8762	
                          8763	..gh.endasm.123:
                          8764		.type	..gh.endasm.123,@object
                          8765		.size	..gh.endasm.123,0
                          8766	#3138:   BRSHWNOP10();
                          8767	#line3138
                          8768	..lin.46275963..5758cf8.0_25::
                          8769	.LDWlin25:
                          8770	..gh.beginasm.124:
                          8771		.type	..gh.beginasm.124,@object
                          8772		.size	..gh.beginasm.124,0
0000032a 1800d000         8773	nop
                          8774	
                          8775	..gh.endasm.125:
                          8776		.type	..gh.endasm.125,@object
                          8777		.size	..gh.endasm.125,0
                          8778	..gh.beginasm.126:
                          8779		.type	..gh.beginasm.126,@object

                                   Fri Apr 10 08:31:37 2020           Page 158
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                          8780		.size	..gh.beginasm.126,0
0000032e 1800d000         8781	nop
                          8782	
                          8783	..gh.endasm.127:
                          8784		.type	..gh.endasm.127,@object
                          8785		.size	..gh.endasm.127,0
                          8786	..gh.beginasm.128:
                          8787		.type	..gh.beginasm.128,@object
                          8788		.size	..gh.beginasm.128,0
00000332 1800d000         8789	nop
                          8790	
                          8791	..gh.endasm.129:
                          8792		.type	..gh.endasm.129,@object
                          8793		.size	..gh.endasm.129,0
                          8794	..gh.beginasm.130:
                          8795		.type	..gh.beginasm.130,@object
                          8796		.size	..gh.beginasm.130,0
00000336 1800d000         8797	nop
                          8798	
                          8799	..gh.endasm.131:
                          8800		.type	..gh.endasm.131,@object
                          8801		.size	..gh.endasm.131,0
                          8802	..gh.beginasm.132:
                          8803		.type	..gh.beginasm.132,@object
                          8804		.size	..gh.beginasm.132,0
0000033a 1800d000         8805	nop
                          8806	
                          8807	..gh.endasm.133:
                          8808		.type	..gh.endasm.133,@object
                          8809		.size	..gh.endasm.133,0
                          8810	..gh.beginasm.134:
                          8811		.type	..gh.beginasm.134,@object
                          8812		.size	..gh.beginasm.134,0
0000033e 1800d000         8813	nop
                          8814	
                          8815	..gh.endasm.135:
                          8816		.type	..gh.endasm.135,@object
                          8817		.size	..gh.endasm.135,0
                          8818	..gh.beginasm.136:
                          8819		.type	..gh.beginasm.136,@object
                          8820		.size	..gh.beginasm.136,0
00000342 1800d000         8821	nop
                          8822	
                          8823	..gh.endasm.137:
                          8824		.type	..gh.endasm.137,@object
                          8825		.size	..gh.endasm.137,0
                          8826	..gh.beginasm.138:
                          8827		.type	..gh.beginasm.138,@object
                          8828		.size	..gh.beginasm.138,0
00000346 1800d000         8829	nop
                          8830	
                          8831	..gh.endasm.139:
                          8832		.type	..gh.endasm.139,@object
                          8833		.size	..gh.endasm.139,0
                          8834	..gh.beginasm.140:
                          8835		.type	..gh.beginasm.140,@object

                                   Fri Apr 10 08:31:37 2020           Page 159
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                          8836		.size	..gh.beginasm.140,0
0000034a 1800d000         8837	nop
                          8838	
                          8839	..gh.endasm.141:
                          8840		.type	..gh.endasm.141,@object
                          8841		.size	..gh.endasm.141,0
                          8842	..gh.beginasm.142:
                          8843		.type	..gh.beginasm.142,@object
                          8844		.size	..gh.beginasm.142,0
0000034e 1800d000         8845	nop
                          8846	
                          8847	..gh.endasm.143:
                          8848		.type	..gh.endasm.143,@object
                          8849		.size	..gh.endasm.143,0
                          8850	#3139:   BRSHWNOP10();
                          8851	#line3139
                          8852	..lin.46275963..5758cf8.0_26::
                          8853	.LDWlin26:
                          8854	..gh.beginasm.144:
                          8855		.type	..gh.beginasm.144,@object
                          8856		.size	..gh.beginasm.144,0
00000352 1800d000         8857	nop
                          8858	
                          8859	..gh.endasm.145:
                          8860		.type	..gh.endasm.145,@object
                          8861		.size	..gh.endasm.145,0
                          8862	..gh.beginasm.146:
                          8863		.type	..gh.beginasm.146,@object
                          8864		.size	..gh.beginasm.146,0
00000356 1800d000         8865	nop
                          8866	
                          8867	..gh.endasm.147:
                          8868		.type	..gh.endasm.147,@object
                          8869		.size	..gh.endasm.147,0
                          8870	..gh.beginasm.148:
                          8871		.type	..gh.beginasm.148,@object
                          8872		.size	..gh.beginasm.148,0
0000035a 1800d000         8873	nop
                          8874	
                          8875	..gh.endasm.149:
                          8876		.type	..gh.endasm.149,@object
                          8877		.size	..gh.endasm.149,0
                          8878	..gh.beginasm.150:
                          8879		.type	..gh.beginasm.150,@object
                          8880		.size	..gh.beginasm.150,0
0000035e 1800d000         8881	nop
                          8882	
                          8883	..gh.endasm.151:
                          8884		.type	..gh.endasm.151,@object
                          8885		.size	..gh.endasm.151,0
                          8886	..gh.beginasm.152:
                          8887		.type	..gh.beginasm.152,@object
                          8888		.size	..gh.beginasm.152,0
00000362 1800d000         8889	nop
                          8890	
                          8891	..gh.endasm.153:

                                   Fri Apr 10 08:31:37 2020           Page 160
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                          8892		.type	..gh.endasm.153,@object
                          8893		.size	..gh.endasm.153,0
                          8894	..gh.beginasm.154:
                          8895		.type	..gh.beginasm.154,@object
                          8896		.size	..gh.beginasm.154,0
00000366 1800d000         8897	nop
                          8898	
                          8899	..gh.endasm.155:
                          8900		.type	..gh.endasm.155,@object
                          8901		.size	..gh.endasm.155,0
                          8902	..gh.beginasm.156:
                          8903		.type	..gh.beginasm.156,@object
                          8904		.size	..gh.beginasm.156,0
0000036a 1800d000         8905	nop
                          8906	
                          8907	..gh.endasm.157:
                          8908		.type	..gh.endasm.157,@object
                          8909		.size	..gh.endasm.157,0
                          8910	..gh.beginasm.158:
                          8911		.type	..gh.beginasm.158,@object
                          8912		.size	..gh.beginasm.158,0
0000036e 1800d000         8913	nop
                          8914	
                          8915	..gh.endasm.159:
                          8916		.type	..gh.endasm.159,@object
                          8917		.size	..gh.endasm.159,0
                          8918	..gh.beginasm.160:
                          8919		.type	..gh.beginasm.160,@object
                          8920		.size	..gh.beginasm.160,0
00000372 1800d000         8921	nop
                          8922	
                          8923	..gh.endasm.161:
                          8924		.type	..gh.endasm.161,@object
                          8925		.size	..gh.endasm.161,0
                          8926	..gh.beginasm.162:
                          8927		.type	..gh.beginasm.162,@object
                          8928		.size	..gh.beginasm.162,0
00000376 1800d000         8929	nop
                          8930	
                          8931	..gh.endasm.163:
                          8932		.type	..gh.endasm.163,@object
                          8933		.size	..gh.endasm.163,0
                          8934	#3140:   BRSHWNOP10();
                          8935	#line3140
                          8936	..lin.46275963..5758cf8.0_27::
                          8937	.LDWlin27:
                          8938	..gh.beginasm.164:
                          8939		.type	..gh.beginasm.164,@object
                          8940		.size	..gh.beginasm.164,0
0000037a 1800d000         8941	nop
                          8942	
                          8943	..gh.endasm.165:
                          8944		.type	..gh.endasm.165,@object
                          8945		.size	..gh.endasm.165,0
                          8946	..gh.beginasm.166:
                          8947		.type	..gh.beginasm.166,@object

                                   Fri Apr 10 08:31:37 2020           Page 161
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                          8948		.size	..gh.beginasm.166,0
0000037e 1800d000         8949	nop
                          8950	
                          8951	..gh.endasm.167:
                          8952		.type	..gh.endasm.167,@object
                          8953		.size	..gh.endasm.167,0
                          8954	..gh.beginasm.168:
                          8955		.type	..gh.beginasm.168,@object
                          8956		.size	..gh.beginasm.168,0
00000382 1800d000         8957	nop
                          8958	
                          8959	..gh.endasm.169:
                          8960		.type	..gh.endasm.169,@object
                          8961		.size	..gh.endasm.169,0
                          8962	..gh.beginasm.170:
                          8963		.type	..gh.beginasm.170,@object
                          8964		.size	..gh.beginasm.170,0
00000386 1800d000         8965	nop
                          8966	
                          8967	..gh.endasm.171:
                          8968		.type	..gh.endasm.171,@object
                          8969		.size	..gh.endasm.171,0
                          8970	..gh.beginasm.172:
                          8971		.type	..gh.beginasm.172,@object
                          8972		.size	..gh.beginasm.172,0
0000038a 1800d000         8973	nop
                          8974	
                          8975	..gh.endasm.173:
                          8976		.type	..gh.endasm.173,@object
                          8977		.size	..gh.endasm.173,0
                          8978	..gh.beginasm.174:
                          8979		.type	..gh.beginasm.174,@object
                          8980		.size	..gh.beginasm.174,0
0000038e 1800d000         8981	nop
                          8982	
                          8983	..gh.endasm.175:
                          8984		.type	..gh.endasm.175,@object
                          8985		.size	..gh.endasm.175,0
                          8986	..gh.beginasm.176:
                          8987		.type	..gh.beginasm.176,@object
                          8988		.size	..gh.beginasm.176,0
00000392 1800d000         8989	nop
                          8990	
                          8991	..gh.endasm.177:
                          8992		.type	..gh.endasm.177,@object
                          8993		.size	..gh.endasm.177,0
                          8994	..gh.beginasm.178:
                          8995		.type	..gh.beginasm.178,@object
                          8996		.size	..gh.beginasm.178,0
00000396 1800d000         8997	nop
                          8998	
                          8999	..gh.endasm.179:
                          9000		.type	..gh.endasm.179,@object
                          9001		.size	..gh.endasm.179,0
                          9002	..gh.beginasm.180:
                          9003		.type	..gh.beginasm.180,@object

                                   Fri Apr 10 08:31:37 2020           Page 162
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                          9004		.size	..gh.beginasm.180,0
0000039a 1800d000         9005	nop
                          9006	
                          9007	..gh.endasm.181:
                          9008		.type	..gh.endasm.181,@object
                          9009		.size	..gh.endasm.181,0
                          9010	..gh.beginasm.182:
                          9011		.type	..gh.beginasm.182,@object
                          9012		.size	..gh.beginasm.182,0
0000039e 1800d000         9013	nop
                          9014	
                          9015	..gh.endasm.183:
                          9016		.type	..gh.endasm.183,@object
                          9017		.size	..gh.endasm.183,0
                          9018	#3141:   BRSHWNOP10();
                          9019	#line3141
                          9020	..lin.46275963..5758cf8.0_28::
                          9021	.LDWlin28:
                          9022	..gh.beginasm.184:
                          9023		.type	..gh.beginasm.184,@object
                          9024		.size	..gh.beginasm.184,0
000003a2 1800d000         9025	nop
                          9026	
                          9027	..gh.endasm.185:
                          9028		.type	..gh.endasm.185,@object
                          9029		.size	..gh.endasm.185,0
                          9030	..gh.beginasm.186:
                          9031		.type	..gh.beginasm.186,@object
                          9032		.size	..gh.beginasm.186,0
000003a6 1800d000         9033	nop
                          9034	
                          9035	..gh.endasm.187:
                          9036		.type	..gh.endasm.187,@object
                          9037		.size	..gh.endasm.187,0
                          9038	..gh.beginasm.188:
                          9039		.type	..gh.beginasm.188,@object
                          9040		.size	..gh.beginasm.188,0
000003aa 1800d000         9041	nop
                          9042	
                          9043	..gh.endasm.189:
                          9044		.type	..gh.endasm.189,@object
                          9045		.size	..gh.endasm.189,0
                          9046	..gh.beginasm.190:
                          9047		.type	..gh.beginasm.190,@object
                          9048		.size	..gh.beginasm.190,0
000003ae 1800d000         9049	nop
                          9050	
                          9051	..gh.endasm.191:
                          9052		.type	..gh.endasm.191,@object
                          9053		.size	..gh.endasm.191,0
                          9054	..gh.beginasm.192:
                          9055		.type	..gh.beginasm.192,@object
                          9056		.size	..gh.beginasm.192,0
000003b2 1800d000         9057	nop
                          9058	
                          9059	..gh.endasm.193:

                                   Fri Apr 10 08:31:37 2020           Page 163
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                          9060		.type	..gh.endasm.193,@object
                          9061		.size	..gh.endasm.193,0
                          9062	..gh.beginasm.194:
                          9063		.type	..gh.beginasm.194,@object
                          9064		.size	..gh.beginasm.194,0
000003b6 1800d000         9065	nop
                          9066	
                          9067	..gh.endasm.195:
                          9068		.type	..gh.endasm.195,@object
                          9069		.size	..gh.endasm.195,0
                          9070	..gh.beginasm.196:
                          9071		.type	..gh.beginasm.196,@object
                          9072		.size	..gh.beginasm.196,0
000003ba 1800d000         9073	nop
                          9074	
                          9075	..gh.endasm.197:
                          9076		.type	..gh.endasm.197,@object
                          9077		.size	..gh.endasm.197,0
                          9078	..gh.beginasm.198:
                          9079		.type	..gh.beginasm.198,@object
                          9080		.size	..gh.beginasm.198,0
000003be 1800d000         9081	nop
                          9082	
                          9083	..gh.endasm.199:
                          9084		.type	..gh.endasm.199,@object
                          9085		.size	..gh.endasm.199,0
                          9086	..gh.beginasm.200:
                          9087		.type	..gh.beginasm.200,@object
                          9088		.size	..gh.beginasm.200,0
000003c2 1800d000         9089	nop
                          9090	
                          9091	..gh.endasm.201:
                          9092		.type	..gh.endasm.201,@object
                          9093		.size	..gh.endasm.201,0
                          9094	..gh.beginasm.202:
                          9095		.type	..gh.beginasm.202,@object
                          9096		.size	..gh.beginasm.202,0
000003c6 1800d000         9097	nop
                          9098	
                          9099	..gh.endasm.203:
                          9100		.type	..gh.endasm.203,@object
                          9101		.size	..gh.endasm.203,0
                          9102	#3142:   BRSHWNOP10();
                          9103	#line3142
                          9104	..lin.46275963..5758cf8.0_29::
                          9105	.LDWlin29:
                          9106	..gh.beginasm.204:
                          9107		.type	..gh.beginasm.204,@object
                          9108		.size	..gh.beginasm.204,0
000003ca 1800d000         9109	nop
                          9110	
                          9111	..gh.endasm.205:
                          9112		.type	..gh.endasm.205,@object
                          9113		.size	..gh.endasm.205,0
                          9114	..gh.beginasm.206:
                          9115		.type	..gh.beginasm.206,@object

                                   Fri Apr 10 08:31:37 2020           Page 164
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                          9116		.size	..gh.beginasm.206,0
000003ce 1800d000         9117	nop
                          9118	
                          9119	..gh.endasm.207:
                          9120		.type	..gh.endasm.207,@object
                          9121		.size	..gh.endasm.207,0
                          9122	..gh.beginasm.208:
                          9123		.type	..gh.beginasm.208,@object
                          9124		.size	..gh.beginasm.208,0
000003d2 1800d000         9125	nop
                          9126	
                          9127	..gh.endasm.209:
                          9128		.type	..gh.endasm.209,@object
                          9129		.size	..gh.endasm.209,0
                          9130	..gh.beginasm.210:
                          9131		.type	..gh.beginasm.210,@object
                          9132		.size	..gh.beginasm.210,0
000003d6 1800d000         9133	nop
                          9134	
                          9135	..gh.endasm.211:
                          9136		.type	..gh.endasm.211,@object
                          9137		.size	..gh.endasm.211,0
                          9138	..gh.beginasm.212:
                          9139		.type	..gh.beginasm.212,@object
                          9140		.size	..gh.beginasm.212,0
000003da 1800d000         9141	nop
                          9142	
                          9143	..gh.endasm.213:
                          9144		.type	..gh.endasm.213,@object
                          9145		.size	..gh.endasm.213,0
                          9146	..gh.beginasm.214:
                          9147		.type	..gh.beginasm.214,@object
                          9148		.size	..gh.beginasm.214,0
000003de 1800d000         9149	nop
                          9150	
                          9151	..gh.endasm.215:
                          9152		.type	..gh.endasm.215,@object
                          9153		.size	..gh.endasm.215,0
                          9154	..gh.beginasm.216:
                          9155		.type	..gh.beginasm.216,@object
                          9156		.size	..gh.beginasm.216,0
000003e2 1800d000         9157	nop
                          9158	
                          9159	..gh.endasm.217:
                          9160		.type	..gh.endasm.217,@object
                          9161		.size	..gh.endasm.217,0
                          9162	..gh.beginasm.218:
                          9163		.type	..gh.beginasm.218,@object
                          9164		.size	..gh.beginasm.218,0
000003e6 1800d000         9165	nop
                          9166	
                          9167	..gh.endasm.219:
                          9168		.type	..gh.endasm.219,@object
                          9169		.size	..gh.endasm.219,0
                          9170	..gh.beginasm.220:
                          9171		.type	..gh.beginasm.220,@object

                                   Fri Apr 10 08:31:37 2020           Page 165
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                          9172		.size	..gh.beginasm.220,0
000003ea 1800d000         9173	nop
                          9174	
                          9175	..gh.endasm.221:
                          9176		.type	..gh.endasm.221,@object
                          9177		.size	..gh.endasm.221,0
                          9178	..gh.beginasm.222:
                          9179		.type	..gh.beginasm.222,@object
                          9180		.size	..gh.beginasm.222,0
000003ee 1800d000         9181	nop
                          9182	
                          9183	..gh.endasm.223:
                          9184		.type	..gh.endasm.223,@object
                          9185		.size	..gh.endasm.223,0
                          9186	#3144:   BrsHwRestoreInterrupt();
                          9187	#line3144
                          9188	..lin.46275963..5758cf8.0_30::
                          9189	.LDWlin30:
000003f2 78000001         9190		e_bl	BrsHwRestoreInterrupt
                          9191	#3145: }
                          9192	#	    .ef
                          9193	.LDW14:
000003f6 c301             9194		se_lwz	r0, 12(sp)
000003f8 2071             9195		se_addi	sp, 8
000003fa 0090             9196		se_mtlr	r0
000003fc 0004             9197		se_blr
                          9198		.global	__ghs_eofn_BrsHwTime100NOP
                          9199	__ghs_eofn_BrsHwTime100NOP:
                          9200		.type	BrsHwTime100NOP,@function
                          9201		.size	BrsHwTime100NOP,$-BrsHwTime100NOP
                          9202		.align	1
                          9203	
                          9204	#function:			BrsHwTime100NOP
                          9205	#stack frame size:		8
                          9206	#link area offset:		0
                          9207	#local storage area offset:	8
                          9208	#
                          9209	
                          9210		.data
                          9211		.section ".vletext", "vax"
                          9212		.vle
                          9213		.vle
                          9214	
                          9215		.align	1
                          9216	#bBrsHwIntDiCounter	bBrsHwIntDiCounter	static
                          9217	
                          9218		.section ".rodata","a"
                          9219		.align	2
                          9220		.global	BRSHW_PORT_MUX_CAN0_RX
00000000 00000200         9221	BRSHW_PORT_MUX_CAN0_RX:	.byte	0,0,2,0
00000004 00000001         9222		.byte	0,0,0,1
                          9223		.type	BRSHW_PORT_MUX_CAN0_RX,@object
                          9224		.size	BRSHW_PORT_MUX_CAN0_RX,8
                          9225		.global	kBrsHwMainVersion
00000008 01               9226	kBrsHwMainVersion:	.byte	1
                          9227		.type	kBrsHwMainVersion,@object

                                   Fri Apr 10 08:31:37 2020           Page 166
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                          9228		.size	kBrsHwMainVersion,1
                          9229		.global	kBrsHwSubVersion
00000009 05               9230	kBrsHwSubVersion:	.byte	5
                          9231		.type	kBrsHwSubVersion,@object
                          9232		.size	kBrsHwSubVersion,1
                          9233		.global	kBrsHwBugfixVersion
0000000a 03               9234	kBrsHwBugfixVersion:	.byte	3
                          9235		.type	kBrsHwBugfixVersion,@object
                          9236		.size	kBrsHwBugfixVersion,1
0000000b 00               9237		.space	1
                          9238		.global	BRSHW_PORT_LED
0000000c 00000000         9239	BRSHW_PORT_LED:	.space	4
00000010 00000008         9240		.byte	0,0,0,8
00000014 00000000         9241		.space	4
                          9242		.type	BRSHW_PORT_LED,@object
                          9243		.size	BRSHW_PORT_LED,12
                          9244		.global	BRSHW_PORT_CAN0_TX
00000018 00000003         9245	BRSHW_PORT_CAN0_TX:	.byte	0,0,0,3
0000001c 0000000a         9246		.byte	0,0,0,10
00000020 00000001         9247		.byte	0,0,0,1
                          9248		.type	BRSHW_PORT_CAN0_TX,@object
                          9249		.size	BRSHW_PORT_CAN0_TX,12
                          9250		.global	BRSHW_PORT_CAN0_RX
00000024 00000003         9251	BRSHW_PORT_CAN0_RX:	.byte	0,0,0,3
00000028 00000009         9252		.byte	0,0,0,9
0000002c 00000000         9253		.space	4
                          9254		.type	BRSHW_PORT_CAN0_RX,@object
                          9255		.size	BRSHW_PORT_CAN0_RX,12
                          9256		.global	BRSHW_PORT_CAN0_TRCV_STB
00000030 00000000         9257	BRSHW_PORT_CAN0_TRCV_STB:	.space	4
00000034 00000007         9258		.byte	0,0,0,7
00000038 00000000         9259		.space	4
                          9260		.type	BRSHW_PORT_CAN0_TRCV_STB,@object
                          9261		.size	BRSHW_PORT_CAN0_TRCV_STB,12
                          9262		.data
                          9263		.note ".PPC.EMB.apuinfo",""
00000000 00000008         9264		.long	0x00000008
00000004 00000004         9265		.long	4
00000008 00000002         9266		.long	0x00000002
                          9267		# "APUinfo\000"
0000000c 41505569         9268		.byte	65,80,85,105
00000010 6e666f00         9269		.byte	110,102,111,0
00000014 01040001         9270		.long	0x01040001
                          9271		.ghsnote version,20
                          9272		.ghsnote tools,8195
                          9273		.ghsnote options,644
                          9274		.section ".vletext", "vax"
                          9275		.vle
                          9276		.vle
                          9277		.align	1
                          9278		.section ".RAMCODE","axv"
                          9279		.vle
                          9280		.align	1
                          9281		.section ".vletext", "vax"
                          9282		.vle
                          9283		.vle

                                   Fri Apr 10 08:31:37 2020           Page 167
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                          9284	..eof.C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5CBrsHw...43.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl..5E8FB058..0::
                          9285		.section ".RAMCODE","axv"
                          9286		.vle
                          9287	..eof.C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5CBrsHw...43.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl..5E8FB058..1::
                          9288		.section	.debug_info
                          9289	.Ldw_begin:
00000000 00000db0         9290		.long	.Ldw_end-.Ldw_begin-4
00000004 0002             9291		.byte	0,2
00000006 00000000         9292		.long	.Ldw_abbr_begin
0000000a 04               9293		.byte	4
                          9294		.section	.debug_abbrev
                          9295	.Ldw_abbr_begin:
                          9296		.section	.debug_info
0000000b 02               9297		.byte	2
0000000c 536f757263652f42 9298		.strz	"Source/BrsHw.c"
00000014 727348772e6300  
0000001b 433a5c566563746f 9299		.strz	"C:\\Vector\\CBD1800772_D00_Mpc57xx\\Demo\\DemoFbl\\Appl"
00000023 725c434244313830
0000002b 303737325f443030
00000033 5f4d706335377878
0000003b 5c44656d6f5c4465
00000043 6d6f46626c5c4170
0000004b 706c00          
0000004e 4748532043203230 9300		.strz	"GHS C 2017.5.4 [dual]"
00000056 31372e352e34205b
0000005e 6475616c5d00    
00000064 0001             9301		.byte	0,1
00000066 00000000         9302		.long	.Ldw_line_begin
0000006a 00000000         9303		.long	.Ldw_macinfo_begin
0000006e 00               9304		.byte	0
                          9305	
                          9306		.section	.debug_abbrev
00000000 02               9307		.byte	2
00000001 11               9308		.byte	17
00000002 01               9309		.byte	1
00000003 0308             9310		.byte	3,8
00000005 1b08             9311		.byte	27,8
00000007 2508             9312		.byte	37,8
00000009 1305             9313		.byte	19,5
0000000b 1006             9314		.byte	16,6
0000000d 4306             9315		.byte	67,6
0000000f 420b             9316		.byte	66,11
00000011 0000             9317		.byte	0,0
                          9318	
                          9319		.section	.debug_line
                          9320	.Ldw_line_begin:
00000000 000003a7         9321		.long	.Ldw_line_end-.Ldw_line_begin-4
00000004 0002             9322		.byte	0,2
00000006 000000e5         9323		.long	.Ldw_lpro_end-.Ldw_lpro_begin
                          9324	.Ldw_lpro_begin:
0000000a 01               9325		.byte	1
0000000b 00               9326		.byte	0
0000000c 00               9327		.byte	0
0000000d 04               9328		.byte	4
0000000e 0a               9329		.byte	10
0000000f 000101           9330		.byte	0,1,1
00000012 010100           9331		.byte	1,1,0
00000015 000001           9332		.byte	0,0,1
00000018 00               9333		.byte	0
00000019 536f757263652f42 9334		.strz	"Source/BrsHw.c"
00000021 727348772e6300  
00000028 000000           9335		.byte	0,0,0
0000002b 696e636c7564655c 9336		.strz	"include\\BrsHw.h"
00000033 42727348772e6800
0000003b 000000           9337		.byte	0,0,0
0000003e 696e636c7564655c 9338		.strz	"include\\BrsHw_DerivativeList.h"
00000046 42727348775f4465
0000004e 7269766174697665
00000056 4c6973742e6800  
0000005d 000000           9339		.byte	0,0,0

                                   Fri Apr 10 08:31:37 2020           Page 168
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
00000060 696e636c7564655c 9340		.strz	"include\\BrsCfg.h"
00000068 4272734366672e68
00000070 00              
00000071 000000           9341		.byte	0,0,0
00000074 696e636c7564655c 9342		.strz	"include\\BrsTypes.h"
0000007c 4272735479706573
00000084 2e6800          
00000087 000000           9343		.byte	0,0,0
0000008a 67656e646174615c 9344		.strz	"gendata\\v_cfg.h"
00000092 765f6366672e6800
0000009a 000000           9345		.byte	0,0,0
0000009d 2e2e2f2e2e2f2e2e 9346		.strz	"../../../bsw/_common/v_def.h"
000000a5 2f6273772f5f636f
000000ad 6d6d6f6e2f765f64
000000b5 65662e6800      
000000ba 000000           9347		.byte	0,0,0
000000bd 696e636c7564655c 9348		.strz	"include\\Brs_MemMap.h"
000000c5 4272735f4d656d4d
000000cd 61702e6800      
000000d2 000000           9349		.byte	0,0,0
000000d5 696e636c7564655c 9350		.strz	"include\\BrsHw_Ports.h"
000000dd 42727348775f506f
000000e5 7274732e6800    
000000eb 000000           9351		.byte	0,0,0
000000ee 00               9352		.byte	0
                          9353	.Ldw_lpro_end:
                          9354		.section	.debug_macinfo
                          9355	.Ldw_macinfo_begin:
                          9356		.section	.debug_frame
                          9357	.LDW_5b61c00:
00000000 0000008c         9358		.long	.LDW_unq_2-.LDW_unq_1
                          9359	.LDW_unq_1:
00000004 ffffffff         9360		.byte	255,255,255,255
00000008 01               9361		.byte	1
00000009 00               9362		.byte	0
0000000a 01               9363		.byte	1
0000000b 01               9364		.byte	1
0000000c 6c               9365		.byte	108
0000000d 0c               9366		.byte	12
0000000e 01               9367		.byte	1
0000000f 00               9368		.byte	0
00000010 07               9369		.byte	7
00000011 00               9370		.byte	0
00000012 07               9371		.byte	7
00000013 01               9372		.byte	1
00000014 07               9373		.byte	7
00000015 02               9374		.byte	2
00000016 07               9375		.byte	7
00000017 03               9376		.byte	3
00000018 07               9377		.byte	7
00000019 04               9378		.byte	4
0000001a 07               9379		.byte	7
0000001b 05               9380		.byte	5
0000001c 07               9381		.byte	7
0000001d 06               9382		.byte	6
0000001e 07               9383		.byte	7
0000001f 07               9384		.byte	7
00000020 07               9385		.byte	7
00000021 08               9386		.byte	8
00000022 07               9387		.byte	7
00000023 09               9388		.byte	9
00000024 07               9389		.byte	7
00000025 0a               9390		.byte	10
00000026 07               9391		.byte	7
00000027 0b               9392		.byte	11
00000028 07               9393		.byte	7
00000029 0c               9394		.byte	12
0000002a 07               9395		.byte	7

                                   Fri Apr 10 08:31:37 2020           Page 169
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
0000002b 0d               9396		.byte	13
0000002c 07               9397		.byte	7
0000002d 0e               9398		.byte	14
0000002e 07               9399		.byte	7
0000002f 0f               9400		.byte	15
00000030 07               9401		.byte	7
00000031 10               9402		.byte	16
00000032 07               9403		.byte	7
00000033 11               9404		.byte	17
00000034 07               9405		.byte	7
00000035 12               9406		.byte	18
00000036 07               9407		.byte	7
00000037 13               9408		.byte	19
00000038 07               9409		.byte	7
00000039 14               9410		.byte	20
0000003a 07               9411		.byte	7
0000003b 15               9412		.byte	21
0000003c 07               9413		.byte	7
0000003d 16               9414		.byte	22
0000003e 07               9415		.byte	7
0000003f 17               9416		.byte	23
00000040 07               9417		.byte	7
00000041 18               9418		.byte	24
00000042 07               9419		.byte	7
00000043 19               9420		.byte	25
00000044 07               9421		.byte	7
00000045 1a               9422		.byte	26
00000046 07               9423		.byte	7
00000047 1b               9424		.byte	27
00000048 07               9425		.byte	7
00000049 1c               9426		.byte	28
0000004a 07               9427		.byte	7
0000004b 1d               9428		.byte	29
0000004c 07               9429		.byte	7
0000004d 1e               9430		.byte	30
0000004e 07               9431		.byte	7
0000004f 1f               9432		.byte	31
00000050 07               9433		.byte	7
00000051 20               9434		.byte	32
00000052 07               9435		.byte	7
00000053 21               9436		.byte	33
00000054 07               9437		.byte	7
00000055 22               9438		.byte	34
00000056 07               9439		.byte	7
00000057 23               9440		.byte	35
00000058 07               9441		.byte	7
00000059 24               9442		.byte	36
0000005a 07               9443		.byte	7
0000005b 25               9444		.byte	37
0000005c 07               9445		.byte	7
0000005d 26               9446		.byte	38
0000005e 07               9447		.byte	7
0000005f 27               9448		.byte	39
00000060 07               9449		.byte	7
00000061 28               9450		.byte	40
00000062 07               9451		.byte	7

                                   Fri Apr 10 08:31:37 2020           Page 170
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
00000063 29               9452		.byte	41
00000064 07               9453		.byte	7
00000065 2a               9454		.byte	42
00000066 07               9455		.byte	7
00000067 2b               9456		.byte	43
00000068 07               9457		.byte	7
00000069 2c               9458		.byte	44
0000006a 07               9459		.byte	7
0000006b 2d               9460		.byte	45
0000006c 07               9461		.byte	7
0000006d 2e               9462		.byte	46
0000006e 07               9463		.byte	7
0000006f 2f               9464		.byte	47
00000070 07               9465		.byte	7
00000071 30               9466		.byte	48
00000072 07               9467		.byte	7
00000073 31               9468		.byte	49
00000074 07               9469		.byte	7
00000075 32               9470		.byte	50
00000076 07               9471		.byte	7
00000077 33               9472		.byte	51
00000078 07               9473		.byte	7
00000079 34               9474		.byte	52
0000007a 07               9475		.byte	7
0000007b 35               9476		.byte	53
0000007c 07               9477		.byte	7
0000007d 36               9478		.byte	54
0000007e 07               9479		.byte	7
0000007f 37               9480		.byte	55
00000080 07               9481		.byte	7
00000081 38               9482		.byte	56
00000082 07               9483		.byte	7
00000083 39               9484		.byte	57
00000084 07               9485		.byte	7
00000085 3a               9486		.byte	58
00000086 07               9487		.byte	7
00000087 3b               9488		.byte	59
00000088 07               9489		.byte	7
00000089 3c               9490		.byte	60
0000008a 07               9491		.byte	7
0000008b 3d               9492		.byte	61
0000008c 07               9493		.byte	7
0000008d 3e               9494		.byte	62
0000008e 07               9495		.byte	7
0000008f 3f               9496		.byte	63
                          9497	.LDW_unq_2:
                          9498		.section	.debug_info
                          9499	.LDW_4a6ca08:
0000006f 47               9500		.byte	71
00000070 01               9501		.byte	1
                          9502	
                          9503		.section	.debug_abbrev
00000013 47               9504		.byte	71
00000014 15               9505		.byte	21
00000015 01               9506		.byte	1
00000016 270c             9507		.byte	39,12

                                   Fri Apr 10 08:31:37 2020           Page 171
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
00000018 0000             9508		.byte	0,0
                          9509	
                          9510		.section	.debug_info
00000071 00               9511		.byte	0
                          9512	
                          9513	.LDW_4a6c3b0:
00000072 47               9514		.byte	71
00000073 01               9515		.byte	1
                          9516	
00000074 00               9517		.byte	0
                          9518	
                          9519	.LDW_4a6c998:
00000075 47               9520		.byte	71
00000076 01               9521		.byte	1
                          9522	
                          9523	.LDW_4a63508:
00000077 14               9524		.byte	20
00000078 00000000         9525		.long	.LDW_4aaad40
0000007c 00               9526		.byte	0
                          9527	
                          9528		.section	.debug_abbrev
0000001a 14               9529		.byte	20
0000001b 05               9530		.byte	5
0000001c 00               9531		.byte	0
0000001d 4910             9532		.byte	73,16
0000001f 4b0c             9533		.byte	75,12
00000021 0000             9534		.byte	0,0
                          9535	
                          9536		.section	.debug_info
                          9537	.LDW_4a63328:
0000007d 14               9538		.byte	20
0000007e 00000000         9539		.long	.LDW_4aaadf0
00000082 00               9540		.byte	0
                          9541	
00000083 00               9542		.byte	0
                          9543	
                          9544	.LDW_4a6ca78:
00000084 47               9545		.byte	71
00000085 01               9546		.byte	1
                          9547	
                          9548	.LDW_4a63178:
00000086 14               9549		.byte	20
00000087 00000000         9550		.long	.LDW_4aaad40
0000008b 00               9551		.byte	0
                          9552	
0000008c 00               9553		.byte	0
                          9554	
                          9555	.LDW_4a6c538:
0000008d 47               9556		.byte	71
0000008e 01               9557		.byte	1
                          9558	
                          9559	.LDW_4a632c8:
0000008f 14               9560		.byte	20
00000090 00000000         9561		.long	.LDW_4aaad40
00000094 00               9562		.byte	0
                          9563	

                                   Fri Apr 10 08:31:37 2020           Page 172
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                          9564	.LDW_4a63388:
00000095 14               9565		.byte	20
00000096 00000000         9566		.long	.LDW_4aab0d8
0000009a 00               9567		.byte	0
                          9568	
0000009b 00               9569		.byte	0
                          9570	
                          9571	.LDW_4a6c688:
0000009c 27               9572		.byte	39
0000009d 756e7369676e6564 9573		.strz	"unsigned char"
000000a5 206368617200    
000000ab 08               9574		.byte	8
000000ac 01               9575		.byte	1
                          9576	
                          9577		.section	.debug_abbrev
00000023 27               9578		.byte	39
00000024 24               9579		.byte	36
00000025 00               9580		.byte	0
00000026 0308             9581		.byte	3,8
00000028 3e0b             9582		.byte	62,11
0000002a 0b0b             9583		.byte	11,11
0000002c 0000             9584		.byte	0,0
                          9585	
                          9586		.section	.debug_info
                          9587	.LDW_4a6c6c0:
000000ad 47               9588		.byte	71
000000ae 01               9589		.byte	1
                          9590	
                          9591	.LDW_4a63208:
000000af 14               9592		.byte	20
000000b0 00000000         9593		.long	.LDW_4aaad40
000000b4 00               9594		.byte	0
                          9595	
                          9596	.LDW_4a63238:
000000b5 14               9597		.byte	20
000000b6 00000000         9598		.long	.LDW_4aab2d0
000000ba 00               9599		.byte	0
                          9600	
000000bb 00               9601		.byte	0
                          9602	
                          9603	.LDW_4a6c7d8:
000000bc 46               9604		.byte	70
000000bd 00000000         9605		.long	.LDW_4aab2d0
000000c1 01               9606		.byte	1
                          9607	
                          9608		.section	.debug_abbrev
0000002e 46               9609		.byte	70
0000002f 15               9610		.byte	21
00000030 01               9611		.byte	1
00000031 4910             9612		.byte	73,16
00000033 270c             9613		.byte	39,12
00000035 0000             9614		.byte	0,0
                          9615	
                          9616		.section	.debug_info
                          9617	.LDW_4a633e8:
000000c2 14               9618		.byte	20
000000c3 00000000         9619		.long	.LDW_4aaad40

                                   Fri Apr 10 08:31:37 2020           Page 173
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
000000c7 00               9620		.byte	0
                          9621	
000000c8 00               9622		.byte	0
                          9623	
                          9624	.LDW_4a6c7a0:
000000c9 27               9625		.byte	39
000000ca 756e7369676e6564 9626		.strz	"unsigned long"
000000d2 206c6f6e6700    
000000d8 07               9627		.byte	7
000000d9 04               9628		.byte	4
                          9629	
                          9630	.LDW_4a6c650:
000000da 47               9631		.byte	71
000000db 01               9632		.byte	1
                          9633	
000000dc 00               9634		.byte	0
                          9635	
                          9636	.LDW_4a6c5a8:
000000dd 47               9637		.byte	71
000000de 01               9638		.byte	1
                          9639	
000000df 00               9640		.byte	0
                          9641	
                          9642	.LDW_4a6c6f8:
000000e0 47               9643		.byte	71
000000e1 01               9644		.byte	1
                          9645	
000000e2 00               9646		.byte	0
                          9647	
                          9648	.LDW_4a6c5e0:
000000e3 47               9649		.byte	71
000000e4 01               9650		.byte	1
                          9651	
000000e5 00               9652		.byte	0
                          9653	
                          9654	.LDW_4a6c618:
000000e6 47               9655		.byte	71
000000e7 01               9656		.byte	1
                          9657	
000000e8 00               9658		.byte	0
                          9659	
                          9660	.LDW_4a6c458:
000000e9 47               9661		.byte	71
000000ea 01               9662		.byte	1
                          9663	
000000eb 00               9664		.byte	0
                          9665	
                          9666	.LDW_4a6ca40:
000000ec 47               9667		.byte	71
000000ed 01               9668		.byte	1
                          9669	
                          9670	.LDW_4a63538:
000000ee 14               9671		.byte	20
000000ef 00000000         9672		.long	.LDW_5b246d0
000000f3 00               9673		.byte	0
                          9674	
000000f4 00               9675		.byte	0

                                   Fri Apr 10 08:31:37 2020           Page 174
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                          9676	
                          9677	.LDW_4a6c8f0:
000000f5 47               9678		.byte	71
000000f6 01               9679		.byte	1
                          9680	
000000f7 00               9681		.byte	0
                          9682	
                          9683	.LDW_4a6c730:
000000f8 47               9684		.byte	71
000000f9 01               9685		.byte	1
                          9686	
000000fa 00               9687		.byte	0
                          9688	
                          9689	.LDW_5bacca0:
000000fb 2b               9690		.byte	43
000000fc 00000000         9691		.long	.LDW_4aaad40
                          9692	
                          9693		.section	.debug_abbrev
00000037 2b               9694		.byte	43
00000038 26               9695		.byte	38
00000039 00               9696		.byte	0
0000003a 4910             9697		.byte	73,16
0000003c 0000             9698		.byte	0,0
                          9699	
                          9700		.section	.debug_info
                          9701	.LDW_5bacd50:
00000100 2b               9702		.byte	43
00000101 00000000         9703		.long	.LDW_4aaadf0
                          9704	
                          9705	.LDW_5babe88:
00000105 2b               9706		.byte	43
00000106 00000000         9707		.long	.LDW_4aab2d0
                          9708	
                          9709	.LDW_4a6c8b8:
0000010a 27               9710		.byte	39
0000010b 696e7400         9711		.strz	"int"
0000010f 05               9712		.byte	5
00000110 04               9713		.byte	4
                          9714	
                          9715	.LDW_4aab278:
00000111 2a               9716		.byte	42
00000112 7675696e743800   9717		.strz	"vuint8"
00000119 9b04             9718		.byte	155,4
0000011b 18               9719		.byte	24
0000011c 07               9720		.byte	7
0000011d 00000000         9721		.long	.LDW_4a6c688
                          9722	
                          9723		.section	.debug_abbrev
0000003e 2a               9724		.byte	42
0000003f 16               9725		.byte	22
00000040 00               9726		.byte	0
00000041 0308             9727		.byte	3,8
00000043 3b0f             9728		.byte	59,15
00000045 390f             9729		.byte	57,15
00000047 3a0f             9730		.byte	58,15
00000049 4910             9731		.byte	73,16

                                   Fri Apr 10 08:31:37 2020           Page 175
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
0000004b 0000             9732		.byte	0,0
                          9733	
                          9734		.section	.debug_info
                          9735	.LDW_5b24620:
00000121 2a               9736		.byte	42
00000122 7675696e74333200 9737		.strz	"vuint32"
0000012a b204             9738		.byte	178,4
0000012c 18               9739		.byte	24
0000012d 07               9740		.byte	7
0000012e 00000000         9741		.long	.LDW_4a6c7a0
                          9742	
                          9743	.LDW_4aab2d0:
00000132 2a               9744		.byte	42
00000133 75696e743800     9745		.strz	"uint8"
00000139 36               9746		.byte	54
0000013a 13               9747		.byte	19
0000013b 05               9748		.byte	5
0000013c 00000000         9749		.long	.LDW_4aab278
                          9750	
                          9751	.LDW_5b24518:
00000140 2a               9752		.byte	42
00000141 75696e74333200   9753		.strz	"uint32"
00000148 3e               9754		.byte	62
00000149 14               9755		.byte	20
0000014a 05               9756		.byte	5
0000014b 00000000         9757		.long	.LDW_5b24620
                          9758	
                          9759	.LDW_5b24410:
0000014f 30               9760		.byte	48
00000150 00               9761		.byte	0
00000151 f602             9762		.byte	246,2
00000153 01               9763		.byte	1
00000154 02               9764		.byte	2
00000155 04               9765		.byte	4
00000156 01               9766		.byte	1
                          9767	
                          9768		.section	.debug_abbrev
0000004d 30               9769		.byte	48
0000004e 04               9770		.byte	4
0000004f 01               9771		.byte	1
00000050 0308             9772		.byte	3,8
00000052 3b0f             9773		.byte	59,15
00000054 390f             9774		.byte	57,15
00000056 3a0f             9775		.byte	58,15
00000058 0b0f             9776		.byte	11,15
0000005a 320b             9777		.byte	50,11
0000005c 0000             9778		.byte	0,0
                          9779	
                          9780		.section	.debug_info
                          9781	.LDW_4aab920:
00000157 2f               9782		.byte	47
00000158 42525348575f544f 9783		.strz	"BRSHW_TOGGLEPIN_LED"
00000160 47474c4550494e5f
00000168 4c454400        
0000016c f702             9784		.byte	247,2
0000016e 03               9785		.byte	3
0000016f 02               9786		.byte	2
00000170 00               9787		.byte	0

                                   Fri Apr 10 08:31:37 2020           Page 176
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                          9788	
                          9789		.section	.debug_abbrev
0000005e 2f               9790		.byte	47
0000005f 28               9791		.byte	40
00000060 00               9792		.byte	0
00000061 0308             9793		.byte	3,8
00000063 3b0f             9794		.byte	59,15
00000065 390f             9795		.byte	57,15
00000067 3a0f             9796		.byte	58,15
00000069 1c0d             9797		.byte	28,13
0000006b 0000             9798		.byte	0,0
                          9799	
                          9800		.section	.debug_info
                          9801	.LDW_4aab960:
00000171 2f               9802		.byte	47
00000172 42525348575f544f 9803		.strz	"BRSHW_TOGGLEPIN_WD"
0000017a 47474c4550494e5f
00000182 574400          
00000185 f802             9804		.byte	248,2
00000187 03               9805		.byte	3
00000188 02               9806		.byte	2
00000189 01               9807		.byte	1
                          9808	
                          9809	.LDW_4aab9a0:
0000018a 2f               9810		.byte	47
0000018b 42525348575f544f 9811		.strz	"BRSHW_TOGGLEPIN_CUSTOM"
00000193 47474c4550494e5f
0000019b 435553544f4d00  
000001a2 f902             9812		.byte	249,2
000001a4 03               9813		.byte	3
000001a5 02               9814		.byte	2
000001a6 02               9815		.byte	2
                          9816	
000001a7 00               9817		.byte	0
                          9818	
                          9819	.LDW_5b246d0:
000001a8 2a               9820		.byte	42
000001a9 62727348775f546f 9821		.strz	"brsHw_TogglePin"
000001b1 67676c6550696e00
000001b9 fa02             9822		.byte	250,2
000001bb 02               9823		.byte	2
000001bc 02               9824		.byte	2
000001bd 00000000         9825		.long	.LDW_5b24410
                          9826	
                          9827	.LDW_5baca38:
000001c1 30               9828		.byte	48
000001c2 00               9829		.byte	0
000001c3 3f               9830		.byte	63
000001c4 01               9831		.byte	1
000001c5 09               9832		.byte	9
000001c6 04               9833		.byte	4
000001c7 01               9834		.byte	1
                          9835	
                          9836	.LDW_5b24998:
000001c8 2f               9837		.byte	47
000001c9 42525348575f504f 9838		.strz	"BRSHW_PORT_PORTGROUP_A"
000001d1 52545f504f525447
000001d9 524f55505f4100  
000001e0 40               9839		.byte	64
000001e1 03               9840		.byte	3
000001e2 09               9841		.byte	9
000001e3 00               9842		.byte	0
                          9843	

                                   Fri Apr 10 08:31:37 2020           Page 177
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                          9844	.LDW_5b249d8:
000001e4 2f               9845		.byte	47
000001e5 42525348575f504f 9846		.strz	"BRSHW_PORT_PORTGROUP_B"
000001ed 52545f504f525447
000001f5 524f55505f4200  
000001fc 41               9847		.byte	65
000001fd 03               9848		.byte	3
000001fe 09               9849		.byte	9
000001ff 01               9850		.byte	1
                          9851	
                          9852	.LDW_5b24a18:
00000200 2f               9853		.byte	47
00000201 42525348575f504f 9854		.strz	"BRSHW_PORT_PORTGROUP_C"
00000209 52545f504f525447
00000211 524f55505f4300  
00000218 42               9855		.byte	66
00000219 03               9856		.byte	3
0000021a 09               9857		.byte	9
0000021b 02               9858		.byte	2
                          9859	
                          9860	.LDW_5b24a58:
0000021c 2f               9861		.byte	47
0000021d 42525348575f504f 9862		.strz	"BRSHW_PORT_PORTGROUP_D"
00000225 52545f504f525447
0000022d 524f55505f4400  
00000234 43               9863		.byte	67
00000235 03               9864		.byte	3
00000236 09               9865		.byte	9
00000237 03               9866		.byte	3
                          9867	
                          9868	.LDW_5b24a98:
00000238 2f               9869		.byte	47
00000239 42525348575f504f 9870		.strz	"BRSHW_PORT_PORTGROUP_E"
00000241 52545f504f525447
00000249 524f55505f4500  
00000250 44               9871		.byte	68
00000251 03               9872		.byte	3
00000252 09               9873		.byte	9
00000253 04               9874		.byte	4
                          9875	
                          9876	.LDW_5b24ad8:
00000254 2f               9877		.byte	47
00000255 42525348575f504f 9878		.strz	"BRSHW_PORT_PORTGROUP_F"
0000025d 52545f504f525447
00000265 524f55505f4600  
0000026c 45               9879		.byte	69
0000026d 03               9880		.byte	3
0000026e 09               9881		.byte	9
0000026f 05               9882		.byte	5
                          9883	
                          9884	.LDW_5b24b18:
00000270 2f               9885		.byte	47
00000271 42525348575f504f 9886		.strz	"BRSHW_PORT_PORTGROUP_G"
00000279 52545f504f525447
00000281 524f55505f4700  
00000288 46               9887		.byte	70
00000289 03               9888		.byte	3
0000028a 09               9889		.byte	9
0000028b 06               9890		.byte	6
                          9891	
                          9892	.LDW_5b24b58:
0000028c 2f               9893		.byte	47
0000028d 42525348575f504f 9894		.strz	"BRSHW_PORT_PORTGROUP_H"
00000295 52545f504f525447
0000029d 524f55505f4800  
000002a4 47               9895		.byte	71
000002a5 03               9896		.byte	3
000002a6 09               9897		.byte	9
000002a7 07               9898		.byte	7
                          9899	

                                   Fri Apr 10 08:31:37 2020           Page 178
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                          9900	.LDW_5bad358:
000002a8 2f               9901		.byte	47
000002a9 42525348575f504f 9902		.strz	"BRSHW_PORT_PORTGROUP_I"
000002b1 52545f504f525447
000002b9 524f55505f4900  
000002c0 48               9903		.byte	72
000002c1 03               9904		.byte	3
000002c2 09               9905		.byte	9
000002c3 08               9906		.byte	8
                          9907	
                          9908	.LDW_5bad318:
000002c4 2f               9909		.byte	47
000002c5 42525348575f504f 9910		.strz	"BRSHW_PORT_PORTGROUP_J"
000002cd 52545f504f525447
000002d5 524f55505f4a00  
000002dc 49               9911		.byte	73
000002dd 03               9912		.byte	3
000002de 09               9913		.byte	9
000002df 09               9914		.byte	9
                          9915	
                          9916	.LDW_5bad2d8:
000002e0 2f               9917		.byte	47
000002e1 42525348575f504f 9918		.strz	"BRSHW_PORT_PORTGROUP_K"
000002e9 52545f504f525447
000002f1 524f55505f4b00  
000002f8 4a               9919		.byte	74
000002f9 03               9920		.byte	3
000002fa 09               9921		.byte	9
000002fb 0a               9922		.byte	10
                          9923	
                          9924	.LDW_5bad418:
000002fc 2f               9925		.byte	47
000002fd 42525348575f504f 9926		.strz	"BRSHW_PORT_PORTGROUP_L"
00000305 52545f504f525447
0000030d 524f55505f4c00  
00000314 4b               9927		.byte	75
00000315 03               9928		.byte	3
00000316 09               9929		.byte	9
00000317 0b               9930		.byte	11
                          9931	
                          9932	.LDW_5bacfd8:
00000318 2f               9933		.byte	47
00000319 42525348575f504f 9934		.strz	"BRSHW_PORT_PORTGROUP_M"
00000321 52545f504f525447
00000329 524f55505f4d00  
00000330 4c               9935		.byte	76
00000331 03               9936		.byte	3
00000332 09               9937		.byte	9
00000333 0c               9938		.byte	12
                          9939	
00000334 00               9940		.byte	0
                          9941	
                          9942	.LDW_5bac930:
00000335 2a               9943		.byte	42
00000336 62727348775f506f 9944		.strz	"brsHw_Port_PortGroupType"
0000033e 72745f506f727447
00000346 726f757054797065
0000034e 00              
0000034f 4d               9945		.byte	77
00000350 02               9946		.byte	2
00000351 09               9947		.byte	9
00000352 00000000         9948		.long	.LDW_5baca38
                          9949	
                          9950	.LDW_5bacc48:
00000356 30               9951		.byte	48
00000357 00               9952		.byte	0
00000358 50               9953		.byte	80
00000359 01               9954		.byte	1
0000035a 09               9955		.byte	9

                                   Fri Apr 10 08:31:37 2020           Page 179
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
0000035b 04               9956		.byte	4
0000035c 01               9957		.byte	1
                          9958	
                          9959	.LDW_5bace18:
0000035d 2f               9960		.byte	47
0000035e 42525348575f504f 9961		.strz	"BRSHW_PORT_PORTNUMBER_0"
00000366 52545f504f52544e
0000036e 554d4245525f3000
00000376 51               9962		.byte	81
00000377 03               9963		.byte	3
00000378 09               9964		.byte	9
00000379 00               9965		.byte	0
                          9966	
                          9967	.LDW_5bad158:
0000037a 2f               9968		.byte	47
0000037b 42525348575f504f 9969		.strz	"BRSHW_PORT_PORTNUMBER_1"
00000383 52545f504f52544e
0000038b 554d4245525f3100
00000393 52               9970		.byte	82
00000394 03               9971		.byte	3
00000395 09               9972		.byte	9
00000396 01               9973		.byte	1
                          9974	
                          9975	.LDW_5bad218:
00000397 2f               9976		.byte	47
00000398 42525348575f504f 9977		.strz	"BRSHW_PORT_PORTNUMBER_2"
000003a0 52545f504f52544e
000003a8 554d4245525f3200
000003b0 53               9978		.byte	83
000003b1 03               9979		.byte	3
000003b2 09               9980		.byte	9
000003b3 02               9981		.byte	2
                          9982	
                          9983	.LDW_5bad258:
000003b4 2f               9984		.byte	47
000003b5 42525348575f504f 9985		.strz	"BRSHW_PORT_PORTNUMBER_3"
000003bd 52545f504f52544e
000003c5 554d4245525f3300
000003cd 54               9986		.byte	84
000003ce 03               9987		.byte	3
000003cf 09               9988		.byte	9
000003d0 03               9989		.byte	3
                          9990	
                          9991	.LDW_5bad558:
000003d1 2f               9992		.byte	47
000003d2 42525348575f504f 9993		.strz	"BRSHW_PORT_PORTNUMBER_4"
000003da 52545f504f52544e
000003e2 554d4245525f3400
000003ea 55               9994		.byte	85
000003eb 03               9995		.byte	3
000003ec 09               9996		.byte	9
000003ed 04               9997		.byte	4
                          9998	
                          9999	.LDW_5bad458:
000003ee 2f               10000		.byte	47
000003ef 42525348575f504f 10001		.strz	"BRSHW_PORT_PORTNUMBER_5"
000003f7 52545f504f52544e
000003ff 554d4245525f3500
00000407 56               10002		.byte	86
00000408 03               10003		.byte	3
00000409 09               10004		.byte	9
0000040a 05               10005		.byte	5
                          10006	
                          10007	.LDW_5bad298:
0000040b 2f               10008		.byte	47
0000040c 42525348575f504f 10009		.strz	"BRSHW_PORT_PORTNUMBER_6"
00000414 52545f504f52544e
0000041c 554d4245525f3600
00000424 57               10010		.byte	87
00000425 03               10011		.byte	3

                                   Fri Apr 10 08:31:37 2020           Page 180
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
00000426 09               10012		.byte	9
00000427 06               10013		.byte	6
                          10014	
                          10015	.LDW_5bacdd8:
00000428 2f               10016		.byte	47
00000429 42525348575f504f 10017		.strz	"BRSHW_PORT_PORTNUMBER_7"
00000431 52545f504f52544e
00000439 554d4245525f3700
00000441 58               10018		.byte	88
00000442 03               10019		.byte	3
00000443 09               10020		.byte	9
00000444 07               10021		.byte	7
                          10022	
                          10023	.LDW_5bace58:
00000445 2f               10024		.byte	47
00000446 42525348575f504f 10025		.strz	"BRSHW_PORT_PORTNUMBER_8"
0000044e 52545f504f52544e
00000456 554d4245525f3800
0000045e 59               10026		.byte	89
0000045f 03               10027		.byte	3
00000460 09               10028		.byte	9
00000461 08               10029		.byte	8
                          10030	
                          10031	.LDW_5bad398:
00000462 2f               10032		.byte	47
00000463 42525348575f504f 10033		.strz	"BRSHW_PORT_PORTNUMBER_9"
0000046b 52545f504f52544e
00000473 554d4245525f3900
0000047b 5a               10034		.byte	90
0000047c 03               10035		.byte	3
0000047d 09               10036		.byte	9
0000047e 09               10037		.byte	9
                          10038	
                          10039	.LDW_5bad4d8:
0000047f 2f               10040		.byte	47
00000480 42525348575f504f 10041		.strz	"BRSHW_PORT_PORTNUMBER_10"
00000488 52545f504f52544e
00000490 554d4245525f3130
00000498 00              
00000499 5b               10042		.byte	91
0000049a 03               10043		.byte	3
0000049b 09               10044		.byte	9
0000049c 0a               10045		.byte	10
                          10046	
                          10047	.LDW_5bad3d8:
0000049d 2f               10048		.byte	47
0000049e 42525348575f504f 10049		.strz	"BRSHW_PORT_PORTNUMBER_11"
000004a6 52545f504f52544e
000004ae 554d4245525f3131
000004b6 00              
000004b7 5c               10050		.byte	92
000004b8 03               10051		.byte	3
000004b9 09               10052		.byte	9
000004ba 0b               10053		.byte	11
                          10054	
                          10055	.LDW_5bace98:
000004bb 2f               10056		.byte	47
000004bc 42525348575f504f 10057		.strz	"BRSHW_PORT_PORTNUMBER_12"
000004c4 52545f504f52544e
000004cc 554d4245525f3132
000004d4 00              
000004d5 5d               10058		.byte	93
000004d6 03               10059		.byte	3
000004d7 09               10060		.byte	9
000004d8 0c               10061		.byte	12
                          10062	
                          10063	.LDW_5baced8:
000004d9 2f               10064		.byte	47
000004da 42525348575f504f 10065		.strz	"BRSHW_PORT_PORTNUMBER_13"
000004e2 52545f504f52544e
000004ea 554d4245525f3133
000004f2 00              
000004f3 5e               10066		.byte	94
000004f4 03               10067		.byte	3

                                   Fri Apr 10 08:31:37 2020           Page 181
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
000004f5 09               10068		.byte	9
000004f6 0d               10069		.byte	13
                          10070	
                          10071	.LDW_5bad498:
000004f7 2f               10072		.byte	47
000004f8 42525348575f504f 10073		.strz	"BRSHW_PORT_PORTNUMBER_14"
00000500 52545f504f52544e
00000508 554d4245525f3134
00000510 00              
00000511 5f               10074		.byte	95
00000512 03               10075		.byte	3
00000513 09               10076		.byte	9
00000514 0e               10077		.byte	14
                          10078	
                          10079	.LDW_5bad518:
00000515 2f               10080		.byte	47
00000516 42525348575f504f 10081		.strz	"BRSHW_PORT_PORTNUMBER_15"
0000051e 52545f504f52544e
00000526 554d4245525f3135
0000052e 00              
0000052f 60               10082		.byte	96
00000530 03               10083		.byte	3
00000531 09               10084		.byte	9
00000532 0f               10085		.byte	15
                          10086	
00000533 00               10087		.byte	0
                          10088	
                          10089	.LDW_5bacbf0:
00000534 2a               10090		.byte	42
00000535 62727348775f506f 10091		.strz	"brsHw_Port_PortNumberType"
0000053d 72745f506f72744e
00000545 756d626572547970
0000054d 6500            
0000054f 61               10092		.byte	97
00000550 02               10093		.byte	2
00000551 09               10094		.byte	9
00000552 00000000         10095		.long	.LDW_5bacc48
                          10096	
                          10097	.LDW_5bac988:
00000556 30               10098		.byte	48
00000557 00               10099		.byte	0
00000558 64               10100		.byte	100
00000559 01               10101		.byte	1
0000055a 09               10102		.byte	9
0000055b 04               10103		.byte	4
0000055c 01               10104		.byte	1
                          10105	
                          10106	.LDW_5bacf18:
0000055d 2f               10107		.byte	47
0000055e 42525348575f504f 10108		.strz	"BRSHW_PORT_ALT_0"
00000566 52545f414c545f30
0000056e 00              
0000056f 65               10109		.byte	101
00000570 03               10110		.byte	3
00000571 09               10111		.byte	9
00000572 00               10112		.byte	0
                          10113	
                          10114	.LDW_5bacf58:
00000573 2f               10115		.byte	47
00000574 42525348575f504f 10116		.strz	"BRSHW_PORT_ALT_1"
0000057c 52545f414c545f31
00000584 00              
00000585 66               10117		.byte	102
00000586 03               10118		.byte	3
00000587 09               10119		.byte	9
00000588 01               10120		.byte	1
                          10121	
                          10122	.LDW_5bacf98:
00000589 2f               10123		.byte	47

                                   Fri Apr 10 08:31:37 2020           Page 182
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
0000058a 42525348575f504f 10124		.strz	"BRSHW_PORT_ALT_2"
00000592 52545f414c545f32
0000059a 00              
0000059b 67               10125		.byte	103
0000059c 03               10126		.byte	3
0000059d 09               10127		.byte	9
0000059e 02               10128		.byte	2
                          10129	
                          10130	.LDW_5bad018:
0000059f 2f               10131		.byte	47
000005a0 42525348575f504f 10132		.strz	"BRSHW_PORT_ALT_3"
000005a8 52545f414c545f33
000005b0 00              
000005b1 68               10133		.byte	104
000005b2 03               10134		.byte	3
000005b3 09               10135		.byte	9
000005b4 03               10136		.byte	3
                          10137	
                          10138	.LDW_5bad058:
000005b5 2f               10139		.byte	47
000005b6 42525348575f504f 10140		.strz	"BRSHW_PORT_ALT_4"
000005be 52545f414c545f34
000005c6 00              
000005c7 69               10141		.byte	105
000005c8 03               10142		.byte	3
000005c9 09               10143		.byte	9
000005ca 04               10144		.byte	4
                          10145	
                          10146	.LDW_5bad098:
000005cb 2f               10147		.byte	47
000005cc 42525348575f504f 10148		.strz	"BRSHW_PORT_ALT_5"
000005d4 52545f414c545f35
000005dc 00              
000005dd 6a               10149		.byte	106
000005de 03               10150		.byte	3
000005df 09               10151		.byte	9
000005e0 05               10152		.byte	5
                          10153	
                          10154	.LDW_5bad0d8:
000005e1 2f               10155		.byte	47
000005e2 42525348575f504f 10156		.strz	"BRSHW_PORT_ALT_6"
000005ea 52545f414c545f36
000005f2 00              
000005f3 6b               10157		.byte	107
000005f4 03               10158		.byte	3
000005f5 09               10159		.byte	9
000005f6 06               10160		.byte	6
                          10161	
                          10162	.LDW_5bad118:
000005f7 2f               10163		.byte	47
000005f8 42525348575f504f 10164		.strz	"BRSHW_PORT_ALT_7"
00000600 52545f414c545f37
00000608 00              
00000609 6c               10165		.byte	108
0000060a 03               10166		.byte	3
0000060b 09               10167		.byte	9
0000060c 07               10168		.byte	7
                          10169	
                          10170	.LDW_5bad198:
0000060d 2f               10171		.byte	47
0000060e 42525348575f504f 10172		.strz	"BRSHW_PORT_ALT_8"
00000616 52545f414c545f38
0000061e 00              
0000061f 6d               10173		.byte	109
00000620 03               10174		.byte	3
00000621 09               10175		.byte	9
00000622 08               10176		.byte	8
                          10177	
                          10178	.LDW_5bad1d8:
00000623 2f               10179		.byte	47

                                   Fri Apr 10 08:31:37 2020           Page 183
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
00000624 42525348575f504f 10180		.strz	"BRSHW_PORT_ALT_9"
0000062c 52545f414c545f39
00000634 00              
00000635 6e               10181		.byte	110
00000636 03               10182		.byte	3
00000637 09               10183		.byte	9
00000638 09               10184		.byte	9
                          10185	
00000639 00               10186		.byte	0
                          10187	
                          10188	.LDW_5baca90:
0000063a 2a               10189		.byte	42
0000063b 62727348775f506f 10190		.strz	"brsHw_Port_AlternativeType"
00000643 72745f416c746572
0000064b 6e61746976655479
00000653 706500          
00000656 6f               10191		.byte	111
00000657 02               10192		.byte	2
00000658 09               10193		.byte	9
00000659 00000000         10194		.long	.LDW_5bac988
                          10195	
                          10196	.LDW_5bac8d8:
0000065d 30               10197		.byte	48
0000065e 00               10198		.byte	0
0000065f 72               10199		.byte	114
00000660 01               10200		.byte	1
00000661 09               10201		.byte	9
00000662 04               10202		.byte	4
00000663 01               10203		.byte	1
                          10204	
                          10205	.LDW_5bad968:
00000664 2f               10206		.byte	47
00000665 504f52545f50554c 10207		.strz	"PORT_PULL_UP_ENABLED"
0000066d 4c5f55505f454e41
00000675 424c454400      
0000067a 73               10208		.byte	115
0000067b 03               10209		.byte	3
0000067c 09               10210		.byte	9
0000067d 00               10211		.byte	0
                          10212	
                          10213	.LDW_5badd28:
0000067e 2f               10214		.byte	47
0000067f 504f52545f50554c 10215		.strz	"PORT_PULL_DOWN_ENABLED"
00000687 4c5f444f574e5f45
0000068f 4e41424c454400  
00000696 74               10216		.byte	116
00000697 03               10217		.byte	3
00000698 09               10218		.byte	9
00000699 01               10219		.byte	1
                          10220	
                          10221	.LDW_5bad828:
0000069a 2f               10222		.byte	47
0000069b 504f52545f50554c 10223		.strz	"PORT_PULL_FUNCTION_DISABLED"
000006a3 4c5f46554e435449
000006ab 4f4e5f4449534142
000006b3 4c454400        
000006b7 75               10224		.byte	117
000006b8 03               10225		.byte	3
000006b9 09               10226		.byte	9
000006ba 02               10227		.byte	2
                          10228	
000006bb 00               10229		.byte	0
                          10230	
                          10231	.LDW_5bac9e0:
000006bc 2a               10232		.byte	42
000006bd 62727348775f506f 10233		.strz	"brsHw_Port_PullOption"
000006c5 72745f50756c6c4f
000006cd 7074696f6e00    
000006d3 76               10234		.byte	118
000006d4 02               10235		.byte	2

                                   Fri Apr 10 08:31:37 2020           Page 184
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
000006d5 09               10236		.byte	9
000006d6 00000000         10237		.long	.LDW_5bac8d8
                          10238	
                          10239	.LDW_4aab080:
000006da 43               10240		.byte	67
000006db 79               10241		.byte	121
000006dc 01               10242		.byte	1
000006dd 09               10243		.byte	9
000006de 04               10244		.byte	4
000006df 01               10245		.byte	1
                          10246	
                          10247		.section	.debug_abbrev
0000006d 43               10248		.byte	67
0000006e 13               10249		.byte	19
0000006f 01               10250		.byte	1
00000070 3b0f             10251		.byte	59,15
00000072 390f             10252		.byte	57,15
00000074 3a0f             10253		.byte	58,15
00000076 0b0f             10254		.byte	11,15
00000078 320b             10255		.byte	50,11
0000007a 0000             10256		.byte	0,0
                          10257	
                          10258		.section	.debug_info
                          10259	.LDW_5b23c50:
000006e0 25               10260		.byte	37
000006e1 506f727450756c6c 10261		.strz	"PortPullOption"
000006e9 4f7074696f6e00  
000006f0 7a               10262		.byte	122
000006f1 19               10263		.byte	25
000006f2 09               10264		.byte	9
000006f3 00000000         10265		.long	.LDW_5bac9e0
000006f7 0223             10266		.byte	2,35
000006f9 00               10267		.byte	0
000006fa 01               10268		.byte	1
                          10269	
                          10270		.section	.debug_abbrev
0000007c 25               10271		.byte	37
0000007d 0d               10272		.byte	13
0000007e 00               10273		.byte	0
0000007f 0308             10274		.byte	3,8
00000081 3b0f             10275		.byte	59,15
00000083 390f             10276		.byte	57,15
00000085 3a0f             10277		.byte	58,15
00000087 4910             10278		.byte	73,16
00000089 380a             10279		.byte	56,10
0000008b 320b             10280		.byte	50,11
0000008d 0000             10281		.byte	0,0
                          10282	
                          10283		.section	.debug_info
000006fb 00               10284		.byte	0
                          10285	
                          10286	.LDW_4aab0d8:
000006fc 2a               10287		.byte	42
000006fd 62727348775f506f 10288		.strz	"brsHw_Port_ConfType"
00000705 72745f436f6e6654
0000070d 79706500        
00000711 7b               10289		.byte	123
00000712 02               10290		.byte	2
00000713 09               10291		.byte	9

                                   Fri Apr 10 08:31:37 2020           Page 185
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
00000714 00000000         10292		.long	.LDW_4aab080
                          10293	
                          10294	.LDW_4aaded8:
00000718 43               10295		.byte	67
00000719 9401             10296		.byte	148,1
0000071b 01               10297		.byte	1
0000071c 09               10298		.byte	9
0000071d 0c               10299		.byte	12
0000071e 01               10300		.byte	1
                          10301	
                          10302	.LDW_5b23aa0:
0000071f 25               10303		.byte	37
00000720 706f727447726f75 10304		.strz	"portGroup"
00000728 7000            
0000072a 9501             10305		.byte	149,1
0000072c 1e               10306		.byte	30
0000072d 09               10307		.byte	9
0000072e 00000000         10308		.long	.LDW_5bac930
00000732 0223             10309		.byte	2,35
00000734 00               10310		.byte	0
00000735 01               10311		.byte	1
                          10312	
                          10313	.LDW_5b23b78:
00000736 25               10314		.byte	37
00000737 706f72744e756d62 10315		.strz	"portNumber"
0000073f 657200          
00000742 9601             10316		.byte	150,1
00000744 1e               10317		.byte	30
00000745 09               10318		.byte	9
00000746 00000000         10319		.long	.LDW_5bacbf0
0000074a 0223             10320		.byte	2,35
0000074c 04               10321		.byte	4
0000074d 01               10322		.byte	1
                          10323	
                          10324	.LDW_5b23f20:
0000074e 25               10325		.byte	37
0000074f 706f7274416c7465 10326		.strz	"portAlternative"
00000757 726e617469766500
0000075f 9701             10327		.byte	151,1
00000761 1e               10328		.byte	30
00000762 09               10329		.byte	9
00000763 00000000         10330		.long	.LDW_5baca90
00000767 0223             10331		.byte	2,35
00000769 08               10332		.byte	8
0000076a 01               10333		.byte	1
                          10334	
0000076b 00               10335		.byte	0
                          10336	
                          10337	.LDW_4aaad40:
0000076c 2a               10338		.byte	42
0000076d 62727348775f506f 10339		.strz	"brsHw_Port_PortType"
00000775 72745f506f727454
0000077d 79706500        
00000781 9801             10340		.byte	152,1
00000783 02               10341		.byte	2
00000784 09               10342		.byte	9
00000785 00000000         10343		.long	.LDW_4aaded8
                          10344	
                          10345	.LDW_4aaad98:
00000789 43               10346		.byte	67
0000078a c501             10347		.byte	197,1

                                   Fri Apr 10 08:31:37 2020           Page 186
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
0000078c 01               10348		.byte	1
0000078d 09               10349		.byte	9
0000078e 08               10350		.byte	8
0000078f 01               10351		.byte	1
                          10352	
                          10353	.LDW_5b238f0:
00000790 25               10354		.byte	37
00000791 6d75784d53435256 10355		.strz	"muxMSCRValue"
00000799 616c756500      
0000079e c601             10356		.byte	198,1
000007a0 1e               10357		.byte	30
000007a1 09               10358		.byte	9
000007a2 00000000         10359		.long	.LDW_5b24518
000007a6 0223             10360		.byte	2,35
000007a8 00               10361		.byte	0
000007a9 01               10362		.byte	1
                          10363	
                          10364	.LDW_5b23db8:
000007aa 25               10365		.byte	37
000007ab 6d75784d756c7469 10366		.strz	"muxMultiplexedAlternative"
000007b3 706c65786564416c
000007bb 7465726e61746976
000007c3 6500            
000007c5 c701             10367		.byte	199,1
000007c7 1e               10368		.byte	30
000007c8 09               10369		.byte	9
000007c9 00000000         10370		.long	.LDW_5baca90
000007cd 0223             10371		.byte	2,35
000007cf 04               10372		.byte	4
000007d0 01               10373		.byte	1
                          10374	
000007d1 00               10375		.byte	0
                          10376	
                          10377	.LDW_4aaadf0:
000007d2 2a               10378		.byte	42
000007d3 62727348775f506f 10379		.strz	"brsHw_Port_MultiplexedType"
000007db 72745f4d756c7469
000007e3 706c657865645479
000007eb 706500          
000007ee c801             10380		.byte	200,1
000007f0 02               10381		.byte	2
000007f1 09               10382		.byte	9
000007f2 00000000         10383		.long	.LDW_4aaad98
                          10384	
                          10385	.LDW_5bacae8:
000007f6 06               10386		.byte	6
000007f7 42525348575f504f 10387		.strz	"BRSHW_PORT_LED"
000007ff 52545f4c454400  
00000806 bc02             10388		.byte	188,2
00000808 1b               10389		.byte	27
00000809 09               10390		.byte	9
0000080a 00000000         10391		.long	.LDW_5bacca0
0000080e 01               10392		.byte	1
0000080f 00               10393		.byte	0
00000810 0503             10394		.byte	5,3
00000812 00000000         10395		.long	BRSHW_PORT_LED
                          10396	
                          10397		.section	.debug_abbrev
0000008f 06               10398		.byte	6
00000090 34               10399		.byte	52
00000091 00               10400		.byte	0
00000092 0308             10401		.byte	3,8
00000094 3b0f             10402		.byte	59,15
00000096 390f             10403		.byte	57,15

                                   Fri Apr 10 08:31:37 2020           Page 187
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
00000098 3a0f             10404		.byte	58,15
0000009a 4910             10405		.byte	73,16
0000009c 3f0c             10406		.byte	63,12
0000009e 3c0c             10407		.byte	60,12
000000a0 020a             10408		.byte	2,10
000000a2 0000             10409		.byte	0,0
                          10410	
                          10411		.section	.debug_info
                          10412	.LDW_5bacb40:
00000816 06               10413		.byte	6
00000817 42525348575f504f 10414		.strz	"BRSHW_PORT_CAN0_TX"
0000081f 52545f43414e305f
00000827 545800          
0000082a f10c             10415		.byte	241,12
0000082c 1b               10416		.byte	27
0000082d 09               10417		.byte	9
0000082e 00000000         10418		.long	.LDW_5bacca0
00000832 01               10419		.byte	1
00000833 00               10420		.byte	0
00000834 0503             10421		.byte	5,3
00000836 00000000         10422		.long	BRSHW_PORT_CAN0_TX
                          10423	
                          10424	.LDW_5bacb98:
0000083a 06               10425		.byte	6
0000083b 42525348575f504f 10426		.strz	"BRSHW_PORT_CAN0_RX"
00000843 52545f43414e305f
0000084b 525800          
0000084e f50c             10427		.byte	245,12
00000850 1b               10428		.byte	27
00000851 09               10429		.byte	9
00000852 00000000         10430		.long	.LDW_5bacca0
00000856 01               10431		.byte	1
00000857 00               10432		.byte	0
00000858 0503             10433		.byte	5,3
0000085a 00000000         10434		.long	BRSHW_PORT_CAN0_RX
                          10435	
                          10436	.LDW_5bac358:
0000085e 06               10437		.byte	6
0000085f 42525348575f504f 10438		.strz	"BRSHW_PORT_MUX_CAN0_RX"
00000867 52545f4d55585f43
0000086f 414e305f525800  
00000876 f90c             10439		.byte	249,12
00000878 22               10440		.byte	34
00000879 09               10441		.byte	9
0000087a 00000000         10442		.long	.LDW_5bacd50
0000087e 01               10443		.byte	1
0000087f 00               10444		.byte	0
00000880 0503             10445		.byte	5,3
00000882 00000000         10446		.long	BRSHW_PORT_MUX_CAN0_RX
                          10447	
                          10448	.LDW_5babf90:
00000886 06               10449		.byte	6
00000887 42525348575f504f 10450		.strz	"BRSHW_PORT_CAN0_TRCV_STB"
0000088f 52545f43414e305f
00000897 545243565f535442
0000089f 00              
000008a0 fd0c             10451		.byte	253,12
000008a2 1b               10452		.byte	27
000008a3 09               10453		.byte	9
000008a4 00000000         10454		.long	.LDW_5bacca0
000008a8 01               10455		.byte	1
000008a9 00               10456		.byte	0
000008aa 0503             10457		.byte	5,3
000008ac 00000000         10458		.long	BRSHW_PORT_CAN0_TRCV_STB
                          10459	

                                   Fri Apr 10 08:31:37 2020           Page 188
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                          10460	.LDW_5bac1a0:
000008b0 06               10461		.byte	6
000008b1 6b42727348774d61 10462		.strz	"kBrsHwMainVersion"
000008b9 696e56657273696f
000008c1 6e00            
000008c3 8e02             10463		.byte	142,2
000008c5 0d               10464		.byte	13
000008c6 01               10465		.byte	1
000008c7 00000000         10466		.long	.LDW_5babe88
000008cb 01               10467		.byte	1
000008cc 00               10468		.byte	0
000008cd 0503             10469		.byte	5,3
000008cf 00000000         10470		.long	kBrsHwMainVersion
                          10471	
                          10472	.LDW_5babdd8:
000008d3 06               10473		.byte	6
000008d4 6b42727348775375 10474		.strz	"kBrsHwSubVersion"
000008dc 6256657273696f6e
000008e4 00              
000008e5 8f02             10475		.byte	143,2
000008e7 0d               10476		.byte	13
000008e8 01               10477		.byte	1
000008e9 00000000         10478		.long	.LDW_5babe88
000008ed 01               10479		.byte	1
000008ee 00               10480		.byte	0
000008ef 0503             10481		.byte	5,3
000008f1 00000000         10482		.long	kBrsHwSubVersion
                          10483	
                          10484	.LDW_5babe30:
000008f5 06               10485		.byte	6
000008f6 6b42727348774275 10486		.strz	"kBrsHwBugfixVersion"
000008fe 6766697856657273
00000906 696f6e00        
0000090a 9002             10487		.byte	144,2
0000090c 0d               10488		.byte	13
0000090d 01               10489		.byte	1
0000090e 00000000         10490		.long	.LDW_5babe88
00000912 01               10491		.byte	1
00000913 00               10492		.byte	0
00000914 0503             10493		.byte	5,3
00000916 00000000         10494		.long	kBrsHwBugfixVersion
                          10495	
                          10496	.LDW_5babee0:
0000091a 06               10497		.byte	6
0000091b 624272734877496e 10498		.strz	"bBrsHwIntDiCounter"
00000923 744469436f756e74
0000092b 657200          
0000092e 9c02             10499		.byte	156,2
00000930 0e               10500		.byte	14
00000931 01               10501		.byte	1
00000932 00000000         10502		.long	.LDW_4aab2d0
00000936 00               10503		.byte	0
00000937 00               10504		.byte	0
00000938 0503             10505		.byte	5,3
0000093a 00000000         10506		.long	bBrsHwIntDiCounter..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5CBrsHw.
                          10507	
                          10508	.LDW_4aadda8:
0000093e 15               10509		.byte	21
0000093f 4272734877576174 10510		.strz	"BrsHwWatchdogInitPowerOn"
00000947 6368646f67496e69
0000094f 74506f7765724f6e
00000957 00              
00000958 b108             10511		.byte	177,8
0000095a 06               10512		.byte	6
0000095b 01               10513		.byte	1
0000095c 00000000         10514		.long	BrsHwWatchdogInitPowerOn
00000960 00000000         10515		.long	__ghs_eofn_BrsHwWatchdogInitPowerOn

                                   Fri Apr 10 08:31:37 2020           Page 189
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
00000964 0151             10516		.byte	1,81
00000966 03               10517		.byte	3
00000967 00               10518		.byte	0
00000968 00               10519		.byte	0
00000969 00               10520		.byte	0
0000096a 00               10521		.byte	0
0000096b 00               10522		.byte	0
0000096c 00               10523		.byte	0
0000096d 01               10524		.byte	1
0000096e 01               10525		.byte	1
0000096f 00               10526		.byte	0
00000970 01               10527		.byte	1
                          10528	
                          10529		.section	.debug_abbrev
000000a4 15               10530		.byte	21
000000a5 2e               10531		.byte	46
000000a6 01               10532		.byte	1
000000a7 0308             10533		.byte	3,8
000000a9 3b0f             10534		.byte	59,15
000000ab 390f             10535		.byte	57,15
000000ad 3a0f             10536		.byte	58,15
000000af 1101             10537		.byte	17,1
000000b1 1201             10538		.byte	18,1
000000b3 400a             10539		.byte	64,10
000000b5 8341             10540		.byte	131,65
000000b7 0f               10541		.byte	15
000000b8 8741             10542		.byte	135,65
000000ba 0d               10543		.byte	13
000000bb 8541             10544		.byte	133,65
000000bd 0f               10545		.byte	15
000000be 8641             10546		.byte	134,65
000000c0 0d               10547		.byte	13
000000c1 9241             10548		.byte	146,65
000000c3 0f               10549		.byte	15
000000c4 3c0c             10550		.byte	60,12
000000c6 200b             10551		.byte	32,11
000000c8 3f0c             10552		.byte	63,12
000000ca 320b             10553		.byte	50,11
000000cc 4c0b             10554		.byte	76,11
000000ce 270c             10555		.byte	39,12
000000d0 0000             10556		.byte	0,0
                          10557	
                          10558		.section	.debug_frame
                          10559	.LDW_5bada68:
00000090 00000014         10560		.long	.LDW_unq_4-.LDW_unq_3
                          10561	.LDW_unq_3:
00000094 00000000         10562		.long	.LDW_5b61c00
00000098 00000000         10563		.long	BrsHwWatchdogInitPowerOn
0000009c 0000001e         10564		.long	__ghs_eofn_BrsHwWatchdogInitPowerOn-BrsHwWatchdogInitPowerOn
000000a0 01               10565		.byte	1
000000a1 00000000         10566		.long	.LDW11
000000a5 00               10567		.byte	0
000000a6 00               10568		.byte	0
000000a7 00               10569		.byte	0
                          10570	.LDW_unq_4:
                          10571		.section	.debug_line

                                   Fri Apr 10 08:31:37 2020           Page 190
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
000000ef 000502           10572		.byte	0,5,2
000000f2 00000000         10573		.long	BrsHwWatchdogInitPowerOn
000000f6 06               10574		.byte	6
000000f7 03               10575		.byte	3
000000f8 b408             10576		.byte	180,8
000000fa 02               10577		.byte	2
000000fb 00               10578		.byte	0
000000fc 01               10579		.byte	1
000000fd 43               10580		.byte	67
000000fe 23               10581		.byte	35
000000ff 03               10582		.byte	3
00000100 12               10583		.byte	18
00000101 02               10584		.byte	2
00000102 08               10585		.byte	8
00000103 01               10586		.byte	1
00000104 02               10587		.byte	2
00000105 02               10588		.byte	2
00000106 000101           10589		.byte	0,1,1
                          10590		.section	.debug_info
                          10591	.LDW_4a633b8:
00000971 1f               10592		.byte	31
00000972 00000000         10593		.long	.LDW01
00000976 00000000         10594		.long	.LDW11
                          10595	
                          10596		.section	.debug_abbrev
000000d2 1f               10597		.byte	31
000000d3 0b               10598		.byte	11
000000d4 01               10599		.byte	1
000000d5 1101             10600		.byte	17,1
000000d7 1201             10601		.byte	18,1
000000d9 0000             10602		.byte	0,0
                          10603	
                          10604		.section	.debug_info
0000097a 00               10605		.byte	0
                          10606	
0000097b 00               10607		.byte	0
                          10608	
                          10609	.LDW_4aade40:
0000097c 15               10610		.byte	21
0000097d 4272734877506c6c 10611		.strz	"BrsHwPllInitPowerOn"
00000985 496e6974506f7765
0000098d 724f6e00        
00000991 d508             10612		.byte	213,8
00000993 06               10613		.byte	6
00000994 01               10614		.byte	1
00000995 00000000         10615		.long	BrsHwPllInitPowerOn
00000999 00000000         10616		.long	__ghs_eofn_BrsHwPllInitPowerOn
0000099d 0151             10617		.byte	1,81
0000099f 03               10618		.byte	3
000009a0 00               10619		.byte	0
000009a1 00               10620		.byte	0
000009a2 00               10621		.byte	0
000009a3 00               10622		.byte	0
000009a4 00               10623		.byte	0
000009a5 00               10624		.byte	0
000009a6 01               10625		.byte	1
000009a7 01               10626		.byte	1
000009a8 00               10627		.byte	0

                                   Fri Apr 10 08:31:37 2020           Page 191
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
000009a9 01               10628		.byte	1
                          10629	
                          10630		.section	.debug_frame
                          10631	.LDW_5badce8:
000000a8 00000014         10632		.long	.LDW_unq_6-.LDW_unq_5
                          10633	.LDW_unq_5:
000000ac 00000000         10634		.long	.LDW_5b61c00
000000b0 00000000         10635		.long	BrsHwPllInitPowerOn
000000b4 00000034         10636		.long	__ghs_eofn_BrsHwPllInitPowerOn-BrsHwPllInitPowerOn
000000b8 01               10637		.byte	1
000000b9 00000000         10638		.long	.LDW51
000000bd 00               10639		.byte	0
000000be 00               10640		.byte	0
000000bf 00               10641		.byte	0
                          10642	.LDW_unq_6:
                          10643		.section	.debug_line
00000109 000502           10644		.byte	0,5,2
0000010c 00000000         10645		.long	BrsHwPllInitPowerOn
00000110 06               10646		.byte	6
00000111 03               10647		.byte	3
00000112 c609             10648		.byte	198,9
00000114 02               10649		.byte	2
00000115 00               10650		.byte	0
00000116 01               10651		.byte	1
00000117 33               10652		.byte	51
00000118 1b               10653		.byte	27
00000119 1b               10654		.byte	27
0000011a 14               10655		.byte	20
0000011b 1b               10656		.byte	27
0000011c 24               10657		.byte	36
0000011d 13               10658		.byte	19
0000011e 03               10659		.byte	3
0000011f 3a               10660		.byte	58
00000120 02               10661		.byte	2
00000121 04               10662		.byte	4
00000122 01               10663		.byte	1
00000123 03               10664		.byte	3
00000124 c000             10665		.byte	192,0
00000126 02               10666		.byte	2
00000127 0e               10667		.byte	14
00000128 01               10668		.byte	1
00000129 000502           10669		.byte	0,5,2
0000012c 00000000         10670		.long	__ghs_eofn_BrsHwPllInitPowerOn
00000130 0c               10671		.byte	12
00000131 000101           10672		.byte	0,1,1
                          10673		.section	.debug_info
                          10674	.LDW_4a635f8:
000009aa 1f               10675		.byte	31
000009ab 00000000         10676		.long	.LDW41
000009af 00000000         10677		.long	.LDW51
                          10678	
000009b3 00               10679		.byte	0
                          10680	
000009b4 00               10681		.byte	0
                          10682	
                          10683	.LDW_4aaae48:

                                   Fri Apr 10 08:31:37 2020           Page 192
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
000009b5 15               10684		.byte	21
000009b6 4272734877496e69 10685		.strz	"BrsHwInitPortInput"
000009be 74506f7274496e70
000009c6 757400          
000009c9 de0a             10686		.byte	222,10
000009cb 06               10687		.byte	6
000009cc 01               10688		.byte	1
000009cd 00000000         10689		.long	BrsHwInitPortInput
000009d1 00000000         10690		.long	__ghs_eofn_BrsHwInitPortInput
000009d5 0151             10691		.byte	1,81
000009d7 03               10692		.byte	3
000009d8 00               10693		.byte	0
000009d9 00               10694		.byte	0
000009da 00               10695		.byte	0
000009db 00               10696		.byte	0
000009dc 00               10697		.byte	0
000009dd 00               10698		.byte	0
000009de 01               10699		.byte	1
000009df 01               10700		.byte	1
000009e0 00               10701		.byte	0
000009e1 01               10702		.byte	1
                          10703	
                          10704		.section	.debug_frame
                          10705	.LDW_5badb28:
000000c0 00000014         10706		.long	.LDW_unq_8-.LDW_unq_7
                          10707	.LDW_unq_7:
000000c4 00000000         10708		.long	.LDW_5b61c00
000000c8 00000000         10709		.long	BrsHwInitPortInput
000000cc 0000002e         10710		.long	__ghs_eofn_BrsHwInitPortInput-BrsHwInitPortInput
000000d0 01               10711		.byte	1
000000d1 00000000         10712		.long	.LDW71
000000d5 00               10713		.byte	0
000000d6 00               10714		.byte	0
000000d7 00               10715		.byte	0
                          10716	.LDW_unq_8:
                          10717		.section	.debug_line
00000134 000502           10718		.byte	0,5,2
00000137 00000000         10719		.long	BrsHwInitPortInput
0000013b 06               10720		.byte	6
0000013c 03               10721		.byte	3
0000013d b40b             10722		.byte	180,11
0000013f 02               10723		.byte	2
00000140 00               10724		.byte	0
00000141 01               10725		.byte	1
00000142 03               10726		.byte	3
00000143 04               10727		.byte	4
00000144 02               10728		.byte	2
00000145 18               10729		.byte	24
00000146 01               10730		.byte	1
00000147 5d               10731		.byte	93
00000148 02               10732		.byte	2
00000149 02               10733		.byte	2
0000014a 000101           10734		.byte	0,1,1
                          10735		.section	.debug_info
                          10736	.LDW_4aaaee0:
000009e2 11               10737		.byte	17
000009e3 7000             10738		.strz	"p"
000009e5 de0a             10739		.byte	222,10

                                   Fri Apr 10 08:31:37 2020           Page 193
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
000009e7 2d               10740		.byte	45
000009e8 01               10741		.byte	1
000009e9 00000000         10742		.long	.LDW_4aaad40
000009ed 00               10743		.byte	0
000009ee 0273             10744		.byte	2,115
000009f0 00               10745		.byte	0
                          10746	
                          10747		.section	.debug_abbrev
000000db 11               10748		.byte	17
000000dc 05               10749		.byte	5
000000dd 00               10750		.byte	0
000000de 0308             10751		.byte	3,8
000000e0 3b0f             10752		.byte	59,15
000000e2 390f             10753		.byte	57,15
000000e4 3a0f             10754		.byte	58,15
000000e6 4910             10755		.byte	73,16
000000e8 4b0c             10756		.byte	75,12
000000ea 020a             10757		.byte	2,10
000000ec 0000             10758		.byte	0,0
                          10759	
                          10760		.section	.debug_info
                          10761	.LDW_4aaaf38:
000009f1 11               10762		.byte	17
000009f2 6d00             10763		.strz	"m"
000009f4 de0a             10764		.byte	222,10
000009f6 4b               10765		.byte	75
000009f7 01               10766		.byte	1
000009f8 00000000         10767		.long	.LDW_4aaadf0
000009fc 00               10768		.byte	0
000009fd 0274             10769		.byte	2,116
000009ff 00               10770		.byte	0
                          10771	
                          10772	.LDW_4a63358:
00000a00 1f               10773		.byte	31
00000a01 00000000         10774		.long	.LDW61
00000a05 00000000         10775		.long	.LDW71
                          10776	
00000a09 00               10777		.byte	0
                          10778	
00000a0a 00               10779		.byte	0
                          10780	
                          10781	.LDW_4aaaf90:
00000a0b 15               10782		.byte	21
00000a0c 4272734877496e69 10783		.strz	"BrsHwInitPortOutput"
00000a14 74506f72744f7574
00000a1c 70757400        
00000a20 ca0b             10784		.byte	202,11
00000a22 06               10785		.byte	6
00000a23 01               10786		.byte	1
00000a24 00000000         10787		.long	BrsHwInitPortOutput
00000a28 00000000         10788		.long	__ghs_eofn_BrsHwInitPortOutput
00000a2c 0151             10789		.byte	1,81
00000a2e 03               10790		.byte	3
00000a2f 00               10791		.byte	0
00000a30 00               10792		.byte	0
00000a31 00               10793		.byte	0
00000a32 00               10794		.byte	0
00000a33 00               10795		.byte	0

                                   Fri Apr 10 08:31:37 2020           Page 194
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
00000a34 00               10796		.byte	0
00000a35 01               10797		.byte	1
00000a36 01               10798		.byte	1
00000a37 00               10799		.byte	0
00000a38 01               10800		.byte	1
                          10801	
                          10802		.section	.debug_frame
                          10803	.LDW_5bad628:
000000d8 00000014         10804		.long	.LDW_unq_a-.LDW_unq_9
                          10805	.LDW_unq_9:
000000dc 00000000         10806		.long	.LDW_5b61c00
000000e0 00000000         10807		.long	BrsHwInitPortOutput
000000e4 00000024         10808		.long	__ghs_eofn_BrsHwInitPortOutput-BrsHwInitPortOutput
000000e8 01               10809		.byte	1
000000e9 00000000         10810		.long	.LDW91
000000ed 00               10811		.byte	0
000000ee 00               10812		.byte	0
000000ef 00               10813		.byte	0
                          10814	.LDW_unq_a:
                          10815		.section	.debug_line
0000014d 000502           10816		.byte	0,5,2
00000150 00000000         10817		.long	BrsHwInitPortOutput
00000154 06               10818		.byte	6
00000155 03               10819		.byte	3
00000156 dc0b             10820		.byte	220,11
00000158 02               10821		.byte	2
00000159 00               10822		.byte	0
0000015a 01               10823		.byte	1
0000015b 73               10824		.byte	115
0000015c 2c               10825		.byte	44
0000015d 02               10826		.byte	2
0000015e 02               10827		.byte	2
0000015f 000101           10828		.byte	0,1,1
                          10829		.section	.debug_info
                          10830	.LDW_4aab028:
00000a39 11               10831		.byte	17
00000a3a 7000             10832		.strz	"p"
00000a3c ca0b             10833		.byte	202,11
00000a3e 2e               10834		.byte	46
00000a3f 01               10835		.byte	1
00000a40 00000000         10836		.long	.LDW_4aaad40
00000a44 00               10837		.byte	0
00000a45 0273             10838		.byte	2,115
00000a47 00               10839		.byte	0
                          10840	
                          10841	.LDW_4a63268:
00000a48 1f               10842		.byte	31
00000a49 00000000         10843		.long	.LDW81
00000a4d 00000000         10844		.long	.LDW91
                          10845	
00000a51 00               10846		.byte	0
                          10847	
00000a52 00               10848		.byte	0
                          10849	
                          10850	.LDW_4aab130:
00000a53 15               10851		.byte	21

                                   Fri Apr 10 08:31:37 2020           Page 195
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
00000a54 4272734877496e69 10852		.strz	"BrsHwInitPortConfig"
00000a5c 74506f7274436f6e
00000a64 66696700        
00000a68 f00b             10853		.byte	240,11
00000a6a 06               10854		.byte	6
00000a6b 01               10855		.byte	1
00000a6c 00000000         10856		.long	BrsHwInitPortConfig
00000a70 00000000         10857		.long	__ghs_eofn_BrsHwInitPortConfig
00000a74 0151             10858		.byte	1,81
00000a76 03               10859		.byte	3
00000a77 00               10860		.byte	0
00000a78 00               10861		.byte	0
00000a79 00               10862		.byte	0
00000a7a 00               10863		.byte	0
00000a7b 00               10864		.byte	0
00000a7c 00               10865		.byte	0
00000a7d 01               10866		.byte	1
00000a7e 01               10867		.byte	1
00000a7f 00               10868		.byte	0
00000a80 01               10869		.byte	1
                          10870	
                          10871		.section	.debug_frame
                          10872	.LDW_5badd68:
000000f0 00000014         10873		.long	.LDW_unq_c-.LDW_unq_b
                          10874	.LDW_unq_b:
000000f4 00000000         10875		.long	.LDW_5b61c00
000000f8 00000000         10876		.long	BrsHwInitPortConfig
000000fc 00000002         10877		.long	__ghs_eofn_BrsHwInitPortConfig-BrsHwInitPortConfig
00000100 01               10878		.byte	1
00000101 00000000         10879		.long	.LDW12
00000105 00               10880		.byte	0
00000106 00               10881		.byte	0
00000107 00               10882		.byte	0
                          10883	.LDW_unq_c:
                          10884		.section	.debug_line
00000162 000502           10885		.byte	0,5,2
00000165 00000000         10886		.long	BrsHwInitPortConfig
00000169 06               10887		.byte	6
0000016a 03               10888		.byte	3
0000016b 810c             10889		.byte	129,12
0000016d 02               10890		.byte	2
0000016e 00               10891		.byte	0
0000016f 01               10892		.byte	1
00000170 02               10893		.byte	2
00000171 02               10894		.byte	2
00000172 000101           10895		.byte	0,1,1
                          10896		.section	.debug_info
                          10897	.LDW_4aab1c8:
00000a81 11               10898		.byte	17
00000a82 7000             10899		.strz	"p"
00000a84 f00b             10900		.byte	240,11
00000a86 2e               10901		.byte	46
00000a87 01               10902		.byte	1
00000a88 00000000         10903		.long	.LDW_4aaad40
00000a8c 00               10904		.byte	0
00000a8d 0273             10905		.byte	2,115
00000a8f 00               10906		.byte	0
                          10907	

                                   Fri Apr 10 08:31:37 2020           Page 196
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                          10908	.LDW_4aab220:
00000a90 11               10909		.byte	17
00000a91 6e00             10910		.strz	"n"
00000a93 f00b             10911		.byte	240,11
00000a95 45               10912		.byte	69
00000a96 01               10913		.byte	1
00000a97 00000000         10914		.long	.LDW_4aab0d8
00000a9b 00               10915		.byte	0
00000a9c 0274             10916		.byte	2,116
00000a9e 00               10917		.byte	0
                          10918	
                          10919	.LDW_4a63688:
00000a9f 1f               10920		.byte	31
00000aa0 00000000         10921		.long	.LDW02
00000aa4 00000000         10922		.long	.LDW12
                          10923	
00000aa8 00               10924		.byte	0
                          10925	
00000aa9 00               10926		.byte	0
                          10927	
                          10928	.LDW_4aab328:
00000aaa 15               10929		.byte	21
00000aab 4272734877506f72 10930		.strz	"BrsHwPort_SetLevel"
00000ab3 745f5365744c6576
00000abb 656c00          
00000abe 990c             10931		.byte	153,12
00000ac0 06               10932		.byte	6
00000ac1 01               10933		.byte	1
00000ac2 00000000         10934		.long	BrsHwPort_SetLevel
00000ac6 00000000         10935		.long	__ghs_eofn_BrsHwPort_SetLevel
00000aca 0151             10936		.byte	1,81
00000acc 03               10937		.byte	3
00000acd 00               10938		.byte	0
00000ace 00               10939		.byte	0
00000acf 00               10940		.byte	0
00000ad0 00               10941		.byte	0
00000ad1 00               10942		.byte	0
00000ad2 00               10943		.byte	0
00000ad3 01               10944		.byte	1
00000ad4 01               10945		.byte	1
00000ad5 00               10946		.byte	0
00000ad6 01               10947		.byte	1
                          10948	
                          10949		.section	.debug_frame
                          10950	.LDW_5bad728:
00000108 00000014         10951		.long	.LDW_unq_e-.LDW_unq_d
                          10952	.LDW_unq_d:
0000010c 00000000         10953		.long	.LDW_5b61c00
00000110 00000000         10954		.long	BrsHwPort_SetLevel
00000114 0000001c         10955		.long	__ghs_eofn_BrsHwPort_SetLevel-BrsHwPort_SetLevel
00000118 01               10956		.byte	1
00000119 00000000         10957		.long	.LDW32
0000011d 00               10958		.byte	0
0000011e 00               10959		.byte	0
0000011f 00               10960		.byte	0
                          10961	.LDW_unq_e:
                          10962		.section	.debug_line
00000175 000502           10963		.byte	0,5,2

                                   Fri Apr 10 08:31:37 2020           Page 197
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
00000178 00000000         10964		.long	BrsHwPort_SetLevel
0000017c 06               10965		.byte	6
0000017d 03               10966		.byte	3
0000017e 9a0c             10967		.byte	154,12
00000180 02               10968		.byte	2
00000181 00               10969		.byte	0
00000182 01               10970		.byte	1
00000183 2b               10971		.byte	43
00000184 03               10972		.byte	3
00000185 04               10973		.byte	4
00000186 02               10974		.byte	2
00000187 00               10975		.byte	0
00000188 01               10976		.byte	1
00000189 03               10977		.byte	3
0000018a 0a               10978		.byte	10
0000018b 02               10979		.byte	2
0000018c 12               10980		.byte	18
0000018d 01               10981		.byte	1
0000018e 02               10982		.byte	2
0000018f 00               10983		.byte	0
00000190 0b               10984		.byte	11
00000191 02               10985		.byte	2
00000192 02               10986		.byte	2
00000193 000101           10987		.byte	0,1,1
                          10988		.section	.debug_info
                          10989	.LDW_4aab3c0:
00000ad7 11               10990		.byte	17
00000ad8 7000             10991		.strz	"p"
00000ada 990c             10992		.byte	153,12
00000adc 2d               10993		.byte	45
00000add 01               10994		.byte	1
00000ade 00000000         10995		.long	.LDW_4aaad40
00000ae2 00               10996		.byte	0
00000ae3 0273             10997		.byte	2,115
00000ae5 00               10998		.byte	0
                          10999	
                          11000	.LDW_4aab418:
00000ae6 11               11001		.byte	17
00000ae7 4c6576656c00     11002		.strz	"Level"
00000aed 990c             11003		.byte	153,12
00000aef 36               11004		.byte	54
00000af0 01               11005		.byte	1
00000af1 00000000         11006		.long	.LDW_4aab2d0
00000af5 00               11007		.byte	0
00000af6 0154             11008		.byte	1,84
                          11009	
                          11010	.LDW_4a63628:
00000af8 1f               11011		.byte	31
00000af9 00000000         11012		.long	.LDW22
00000afd 00000000         11013		.long	.LDW32
                          11014	
00000b01 00               11015		.byte	0
                          11016	
00000b02 00               11017		.byte	0
                          11018	
                          11019	.LDW_4aab470:

                                   Fri Apr 10 08:31:37 2020           Page 198
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
00000b03 16               11020		.byte	22
00000b04 4272734877506f72 11021		.strz	"BrsHwPort_GetLevel"
00000b0c 745f4765744c6576
00000b14 656c00          
00000b17 c00c             11022		.byte	192,12
00000b19 07               11023		.byte	7
00000b1a 01               11024		.byte	1
00000b1b 00000000         11025		.long	.LDW_4aab2d0
00000b1f 00000000         11026		.long	BrsHwPort_GetLevel
00000b23 00000000         11027		.long	__ghs_eofn_BrsHwPort_GetLevel
00000b27 0151             11028		.byte	1,81
00000b29 03               11029		.byte	3
00000b2a 00               11030		.byte	0
00000b2b 00               11031		.byte	0
00000b2c 00               11032		.byte	0
00000b2d 00               11033		.byte	0
00000b2e 00               11034		.byte	0
00000b2f 00               11035		.byte	0
00000b30 01               11036		.byte	1
00000b31 01               11037		.byte	1
00000b32 00               11038		.byte	0
00000b33 01               11039		.byte	1
                          11040	
                          11041		.section	.debug_abbrev
000000ee 16               11042		.byte	22
000000ef 2e               11043		.byte	46
000000f0 01               11044		.byte	1
000000f1 0308             11045		.byte	3,8
000000f3 3b0f             11046		.byte	59,15
000000f5 390f             11047		.byte	57,15
000000f7 3a0f             11048		.byte	58,15
000000f9 4910             11049		.byte	73,16
000000fb 1101             11050		.byte	17,1
000000fd 1201             11051		.byte	18,1
000000ff 400a             11052		.byte	64,10
00000101 8341             11053		.byte	131,65
00000103 0f               11054		.byte	15
00000104 8741             11055		.byte	135,65
00000106 0d               11056		.byte	13
00000107 8541             11057		.byte	133,65
00000109 0f               11058		.byte	15
0000010a 8641             11059		.byte	134,65
0000010c 0d               11060		.byte	13
0000010d 9241             11061		.byte	146,65
0000010f 0f               11062		.byte	15
00000110 3c0c             11063		.byte	60,12
00000112 200b             11064		.byte	32,11
00000114 3f0c             11065		.byte	63,12
00000116 320b             11066		.byte	50,11
00000118 4c0b             11067		.byte	76,11
0000011a 270c             11068		.byte	39,12
0000011c 0000             11069		.byte	0,0
                          11070	
                          11071		.section	.debug_frame
                          11072	.LDW_5badc68:
00000120 00000014         11073		.long	.LDW_unq_10-.LDW_unq_f
                          11074	.LDW_unq_f:
00000124 00000000         11075		.long	.LDW_5b61c00

                                   Fri Apr 10 08:31:37 2020           Page 199
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
00000128 00000000         11076		.long	BrsHwPort_GetLevel
0000012c 0000001c         11077		.long	__ghs_eofn_BrsHwPort_GetLevel-BrsHwPort_GetLevel
00000130 01               11078		.byte	1
00000131 00000000         11079		.long	.LDW52
00000135 00               11080		.byte	0
00000136 00               11081		.byte	0
00000137 00               11082		.byte	0
                          11083	.LDW_unq_10:
                          11084		.section	.debug_line
00000196 000502           11085		.byte	0,5,2
00000199 00000000         11086		.long	BrsHwPort_GetLevel
0000019d 06               11087		.byte	6
0000019e 03               11088		.byte	3
0000019f c80c             11089		.byte	200,12
000001a1 02               11090		.byte	2
000001a2 00               11091		.byte	0
000001a3 01               11092		.byte	1
000001a4 03               11093		.byte	3
000001a5 07               11094		.byte	7
000001a6 02               11095		.byte	2
000001a7 1a               11096		.byte	26
000001a8 01               11097		.byte	1
000001a9 02               11098		.byte	2
000001aa 00               11099		.byte	0
000001ab 06               11100		.byte	6
000001ac 02               11101		.byte	2
000001ad 00               11102		.byte	0
000001ae 02               11103		.byte	2
000001af 02               11104		.byte	2
000001b0 000101           11105		.byte	0,1,1
                          11106		.section	.debug_info
                          11107	.LDW_5b24468:
00000b34 11               11108		.byte	17
00000b35 7000             11109		.strz	"p"
00000b37 c00c             11110		.byte	192,12
00000b39 2e               11111		.byte	46
00000b3a 01               11112		.byte	1
00000b3b 00000000         11113		.long	.LDW_4aaad40
00000b3f 00               11114		.byte	0
00000b40 0273             11115		.byte	2,115
00000b42 00               11116		.byte	0
                          11117	
                          11118	.LDW_4a63658:
00000b43 1f               11119		.byte	31
00000b44 00000000         11120		.long	.LDW42
00000b48 00000000         11121		.long	.LDW52
                          11122	
                          11123	.LDW_5b242b0:
00000b4c 07               11124		.byte	7
00000b4d 74656d7000       11125		.strz	"temp"
00000b52 c20c             11126		.byte	194,12
00000b54 0a               11127		.byte	10
00000b55 01               11128		.byte	1
00000b56 00000000         11129		.long	.LDW_5b24518
00000b5a 00               11130		.byte	0
00000b5b 00               11131		.byte	0

                                   Fri Apr 10 08:31:37 2020           Page 200
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                          11132	
                          11133		.section	.debug_abbrev
0000011e 07               11134		.byte	7
0000011f 34               11135		.byte	52
00000120 00               11136		.byte	0
00000121 0308             11137		.byte	3,8
00000123 3b0f             11138		.byte	59,15
00000125 390f             11139		.byte	57,15
00000127 3a0f             11140		.byte	58,15
00000129 4910             11141		.byte	73,16
0000012b 3f0c             11142		.byte	63,12
0000012d 3c0c             11143		.byte	60,12
0000012f 0000             11144		.byte	0,0
                          11145	
                          11146		.section	.debug_info
00000b5c 00               11147		.byte	0
                          11148	
00000b5d 00               11149		.byte	0
                          11150	
                          11151	.LDW_4aab508:
00000b5e 15               11152		.byte	21
00000b5f 4272734877506f72 11153		.strz	"BrsHwPortInitPowerOn"
00000b67 74496e6974506f77
00000b6f 65724f6e00      
00000b74 fa0c             11154		.byte	250,12
00000b76 06               11155		.byte	6
00000b77 01               11156		.byte	1
00000b78 00000000         11157		.long	BrsHwPortInitPowerOn
00000b7c 00000000         11158		.long	__ghs_eofn_BrsHwPortInitPowerOn
00000b80 0151             11159		.byte	1,81
00000b82 8080808008       11160		.byte	128,128,128,128,8
00000b87 cc00             11161		.byte	204,0
00000b89 00               11162		.byte	0
00000b8a d000             11163		.byte	208,0
00000b8c 00               11164		.byte	0
00000b8d 00               11165		.byte	0
00000b8e 00               11166		.byte	0
00000b8f 01               11167		.byte	1
00000b90 01               11168		.byte	1
00000b91 00               11169		.byte	0
00000b92 01               11170		.byte	1
                          11171	
                          11172		.section	.debug_frame
                          11173	.LDW_5bada28:
00000138 00000014         11174		.long	.LDW_unq_12-.LDW_unq_11
                          11175	.LDW_unq_11:
0000013c 00000000         11176		.long	.LDW_5b61c00
00000140 00000000         11177		.long	BrsHwPortInitPowerOn
00000144 000000b0         11178		.long	__ghs_eofn_BrsHwPortInitPowerOn-BrsHwPortInitPowerOn
00000148 01               11179		.byte	1
00000149 00000000         11180		.long	.LDW92
0000014d 00               11181		.byte	0
0000014e 00               11182		.byte	0
0000014f 00               11183		.byte	0
                          11184	.LDW_unq_12:
                          11185		.section	.debug_line
000001b3 000502           11186		.byte	0,5,2
000001b6 00000000         11187		.long	BrsHwPortInitPowerOn

                                   Fri Apr 10 08:31:37 2020           Page 201
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
000001ba 06               11188		.byte	6
000001bb 03               11189		.byte	3
000001bc fa0c             11190		.byte	250,12
000001be 02               11191		.byte	2
000001bf 00               11192		.byte	0
000001c0 01               11193		.byte	1
000001c1 03               11194		.byte	3
000001c2 0a               11195		.byte	10
000001c3 02               11196		.byte	2
000001c4 0e               11197		.byte	14
000001c5 01               11198		.byte	1
000001c6 000502           11199		.byte	0,5,2
000001c9 00000000         11200		.long	.LDWlin9
000001cd 0d               11201		.byte	13
000001ce 03               11202		.byte	3
000001cf cc00             11203		.byte	204,0
000001d1 02               11204		.byte	2
000001d2 06               11205		.byte	6
000001d3 01               11206		.byte	1
000001d4 000502           11207		.byte	0,5,2
000001d7 00000000         11208		.long	.LDWlin10
000001db 0b               11209		.byte	11
000001dc 000502           11210		.byte	0,5,2
000001df 00000000         11211		.long	.LDWlin11
000001e3 0c               11212		.byte	12
000001e4 000502           11213		.byte	0,5,2
000001e7 00000000         11214		.long	.LDWlin12
000001eb 0b               11215		.byte	11
000001ec 03               11216		.byte	3
000001ed dc02             11217		.byte	220,2
000001ef 02               11218		.byte	2
000001f0 16               11219		.byte	22
000001f1 01               11220		.byte	1
000001f2 02               11221		.byte	2
000001f3 10               11222		.byte	16
000001f4 000101           11223		.byte	0,1,1
                          11224		.section	.debug_info
                          11225	.LDW_4a63418:
00000b93 1f               11226		.byte	31
00000b94 00000000         11227		.long	.LDW82
00000b98 00000000         11228		.long	.LDW92
                          11229	
00000b9c 00               11230		.byte	0
                          11231	
00000b9d 00               11232		.byte	0
                          11233	
                          11234	.LDW_4aab628:
00000b9e 15               11235		.byte	21
00000b9f 4272734877446973 11236		.strz	"BrsHwDisableInterruptAtPowerOn"
00000ba7 61626c65496e7465
00000baf 7272757074417450
00000bb7 6f7765724f6e00  
00000bbe 8011             11237		.byte	128,17
00000bc0 06               11238		.byte	6
00000bc1 01               11239		.byte	1
00000bc2 00000000         11240		.long	BrsHwDisableInterruptAtPowerOn
00000bc6 00000000         11241		.long	__ghs_eofn_BrsHwDisableInterruptAtPowerOn
00000bca 0151             11242		.byte	1,81
00000bcc 03               11243		.byte	3

                                   Fri Apr 10 08:31:37 2020           Page 202
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
00000bcd 00               11244		.byte	0
00000bce 00               11245		.byte	0
00000bcf 00               11246		.byte	0
00000bd0 00               11247		.byte	0
00000bd1 00               11248		.byte	0
00000bd2 00               11249		.byte	0
00000bd3 01               11250		.byte	1
00000bd4 01               11251		.byte	1
00000bd5 00               11252		.byte	0
00000bd6 01               11253		.byte	1
                          11254	
                          11255		.section	.debug_frame
                          11256	.LDW_5badaa8:
00000150 00000014         11257		.long	.LDW_unq_14-.LDW_unq_13
                          11258	.LDW_unq_13:
00000154 00000000         11259		.long	.LDW_5b61c00
00000158 00000000         11260		.long	BrsHwDisableInterruptAtPowerOn
0000015c 00000010         11261		.long	__ghs_eofn_BrsHwDisableInterruptAtPowerOn-BrsHwDisableInterruptAtPowerOn
00000160 01               11262		.byte	1
00000161 00000000         11263		.long	.LDW13
00000165 00               11264		.byte	0
00000166 00               11265		.byte	0
00000167 00               11266		.byte	0
                          11267	.LDW_unq_14:
                          11268		.section	.debug_line
000001f7 000502           11269		.byte	0,5,2
000001fa 00000000         11270		.long	BrsHwDisableInterruptAtPowerOn
000001fe 06               11271		.byte	6
000001ff 03               11272		.byte	3
00000200 8111             11273		.byte	129,17
00000202 02               11274		.byte	2
00000203 00               11275		.byte	0
00000204 01               11276		.byte	1
00000205 34               11277		.byte	52
00000206 000502           11278		.byte	0,5,2
00000209 00000000         11279		.long	.LDWlin13
0000020d 0b               11280		.byte	11
0000020e 02               11281		.byte	2
0000020f 02               11282		.byte	2
00000210 000101           11283		.byte	0,1,1
                          11284		.section	.debug_info
                          11285	.LDW_4a63478:
00000bd7 1f               11286		.byte	31
00000bd8 00000000         11287		.long	.LDW03
00000bdc 00000000         11288		.long	.LDW13
                          11289	
00000be0 00               11290		.byte	0
                          11291	
00000be1 00               11292		.byte	0
                          11293	
                          11294	.LDW_4aab6c0:
00000be2 15               11295		.byte	21
00000be3 4272734877456e61 11296		.strz	"BrsHwEnableInterruptAtPowerOn"
00000beb 626c65496e746572
00000bf3 727570744174506f
00000bfb 7765724f6e00    
00000c01 9111             11297		.byte	145,17
00000c03 06               11298		.byte	6
00000c04 01               11299		.byte	1

                                   Fri Apr 10 08:31:37 2020           Page 203
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
00000c05 00000000         11300		.long	BrsHwEnableInterruptAtPowerOn
00000c09 00000000         11301		.long	__ghs_eofn_BrsHwEnableInterruptAtPowerOn
00000c0d 0151             11302		.byte	1,81
00000c0f 03               11303		.byte	3
00000c10 00               11304		.byte	0
00000c11 00               11305		.byte	0
00000c12 00               11306		.byte	0
00000c13 00               11307		.byte	0
00000c14 00               11308		.byte	0
00000c15 00               11309		.byte	0
00000c16 01               11310		.byte	1
00000c17 01               11311		.byte	1
00000c18 00               11312		.byte	0
00000c19 01               11313		.byte	1
                          11314	
                          11315		.section	.debug_frame
                          11316	.LDW_5badda8:
00000168 00000014         11317		.long	.LDW_unq_16-.LDW_unq_15
                          11318	.LDW_unq_15:
0000016c 00000000         11319		.long	.LDW_5b61c00
00000170 00000000         11320		.long	BrsHwEnableInterruptAtPowerOn
00000174 00000006         11321		.long	__ghs_eofn_BrsHwEnableInterruptAtPowerOn-BrsHwEnableInterruptAtPowerOn
00000178 01               11322		.byte	1
00000179 00000000         11323		.long	.LDW33
0000017d 00               11324		.byte	0
0000017e 00               11325		.byte	0
0000017f 00               11326		.byte	0
                          11327	.LDW_unq_16:
                          11328		.section	.debug_line
00000213 000502           11329		.byte	0,5,2
00000216 00000000         11330		.long	BrsHwEnableInterruptAtPowerOn
0000021a 06               11331		.byte	6
0000021b 03               11332		.byte	3
0000021c 9911             11333		.byte	153,17
0000021e 02               11334		.byte	2
0000021f 00               11335		.byte	0
00000220 01               11336		.byte	1
00000221 000502           11337		.byte	0,5,2
00000224 00000000         11338		.long	.LDWlin14
00000228 0b               11339		.byte	11
00000229 02               11340		.byte	2
0000022a 02               11341		.byte	2
0000022b 000101           11342		.byte	0,1,1
                          11343		.section	.debug_info
                          11344	.LDW_4a634a8:
00000c1a 1f               11345		.byte	31
00000c1b 00000000         11346		.long	.LDW23
00000c1f 00000000         11347		.long	.LDW33
                          11348	
00000c23 00               11349		.byte	0
                          11350	
00000c24 00               11351		.byte	0
                          11352	
                          11353	.LDW_4aab758:
00000c25 15               11354		.byte	21
00000c26 4272734877446973 11355		.strz	"BrsHwDisableInterrupt"
00000c2e 61626c65496e7465
00000c36 727275707400    

                                   Fri Apr 10 08:31:37 2020           Page 204
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
00000c3c 8117             11356		.byte	129,23
00000c3e 06               11357		.byte	6
00000c3f 01               11358		.byte	1
00000c40 00000000         11359		.long	BrsHwDisableInterrupt
00000c44 00000000         11360		.long	__ghs_eofn_BrsHwDisableInterrupt
00000c48 0151             11361		.byte	1,81
00000c4a 03               11362		.byte	3
00000c4b 00               11363		.byte	0
00000c4c 00               11364		.byte	0
00000c4d 00               11365		.byte	0
00000c4e 00               11366		.byte	0
00000c4f 00               11367		.byte	0
00000c50 00               11368		.byte	0
00000c51 01               11369		.byte	1
00000c52 01               11370		.byte	1
00000c53 00               11371		.byte	0
00000c54 01               11372		.byte	1
                          11373	
                          11374		.section	.debug_frame
                          11375	.LDW_5bad768:
00000180 00000014         11376		.long	.LDW_unq_18-.LDW_unq_17
                          11377	.LDW_unq_17:
00000184 00000000         11378		.long	.LDW_5b61c00
00000188 00000000         11379		.long	BrsHwDisableInterrupt
0000018c 0000001a         11380		.long	__ghs_eofn_BrsHwDisableInterrupt-BrsHwDisableInterrupt
00000190 01               11381		.byte	1
00000191 00000000         11382		.long	.LDW53
00000195 00               11383		.byte	0
00000196 00               11384		.byte	0
00000197 00               11385		.byte	0
                          11386	.LDW_unq_18:
                          11387		.section	.debug_line
0000022e 000502           11388		.byte	0,5,2
00000231 00000000         11389		.long	BrsHwDisableInterrupt
00000235 06               11390		.byte	6
00000236 03               11391		.byte	3
00000237 8417             11392		.byte	132,23
00000239 02               11393		.byte	2
0000023a 00               11394		.byte	0
0000023b 01               11395		.byte	1
0000023c 000502           11396		.byte	0,5,2
0000023f 00000000         11397		.long	.LDWlin15
00000243 0b               11398		.byte	11
00000244 0b               11399		.byte	11
00000245 000502           11400		.byte	0,5,2
00000248 00000000         11401		.long	.LDWlin16
0000024c 0b               11402		.byte	11
0000024d 02               11403		.byte	2
0000024e 00               11404		.byte	0
0000024f 0c               11405		.byte	12
00000250 23               11406		.byte	35
00000251 02               11407		.byte	2
00000252 02               11408		.byte	2
00000253 000101           11409		.byte	0,1,1
                          11410		.section	.debug_info
                          11411	.LDW_4a636b8:

                                   Fri Apr 10 08:31:37 2020           Page 205
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
00000c55 1f               11412		.byte	31
00000c56 00000000         11413		.long	.LDW43
00000c5a 00000000         11414		.long	.LDW53
                          11415	
00000c5e 00               11416		.byte	0
                          11417	
00000c5f 00               11418		.byte	0
                          11419	
                          11420	.LDW_4aab7f0:
00000c60 15               11421		.byte	21
00000c61 4272734877526573 11422		.strz	"BrsHwRestoreInterrupt"
00000c69 746f7265496e7465
00000c71 727275707400    
00000c77 9c17             11423		.byte	156,23
00000c79 06               11424		.byte	6
00000c7a 01               11425		.byte	1
00000c7b 00000000         11426		.long	BrsHwRestoreInterrupt
00000c7f 00000000         11427		.long	__ghs_eofn_BrsHwRestoreInterrupt
00000c83 0151             11428		.byte	1,81
00000c85 03               11429		.byte	3
00000c86 00               11430		.byte	0
00000c87 00               11431		.byte	0
00000c88 00               11432		.byte	0
00000c89 00               11433		.byte	0
00000c8a 00               11434		.byte	0
00000c8b 00               11435		.byte	0
00000c8c 01               11436		.byte	1
00000c8d 01               11437		.byte	1
00000c8e 00               11438		.byte	0
00000c8f 01               11439		.byte	1
                          11440	
                          11441		.section	.debug_frame
                          11442	.LDW_5bad5e8:
00000198 00000014         11443		.long	.LDW_unq_1a-.LDW_unq_19
                          11444	.LDW_unq_19:
0000019c 00000000         11445		.long	.LDW_5b61c00
000001a0 00000000         11446		.long	BrsHwRestoreInterrupt
000001a4 0000001a         11447		.long	__ghs_eofn_BrsHwRestoreInterrupt-BrsHwRestoreInterrupt
000001a8 01               11448		.byte	1
000001a9 00000000         11449		.long	.LDW73
000001ad 00               11450		.byte	0
000001ae 00               11451		.byte	0
000001af 00               11452		.byte	0
                          11453	.LDW_unq_1a:
                          11454		.section	.debug_line
00000256 000502           11455		.byte	0,5,2
00000259 00000000         11456		.long	BrsHwRestoreInterrupt
0000025d 06               11457		.byte	6
0000025e 03               11458		.byte	3
0000025f 9f17             11459		.byte	159,23
00000261 02               11460		.byte	2
00000262 00               11461		.byte	0
00000263 01               11462		.byte	1
00000264 0b               11463		.byte	11
00000265 03               11464		.byte	3
00000266 06               11465		.byte	6
00000267 02               11466		.byte	2
00000268 00               11467		.byte	0

                                   Fri Apr 10 08:31:37 2020           Page 206
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
00000269 01               11468		.byte	1
0000026a 02               11469		.byte	2
0000026b 00               11470		.byte	0
0000026c 0c               11471		.byte	12
0000026d 4b               11472		.byte	75
0000026e 000502           11473		.byte	0,5,2
00000271 00000000         11474		.long	.LDWlin17
00000275 0b               11475		.byte	11
00000276 0b               11476		.byte	11
00000277 000502           11477		.byte	0,5,2
0000027a 00000000         11478		.long	.LDWlin18
0000027e 0b               11479		.byte	11
0000027f 02               11480		.byte	2
00000280 00               11481		.byte	0
00000281 0b               11482		.byte	11
00000282 02               11483		.byte	2
00000283 02               11484		.byte	2
00000284 000101           11485		.byte	0,1,1
                          11486		.section	.debug_info
                          11487	.LDW_4a630e8:
00000c90 1f               11488		.byte	31
00000c91 00000000         11489		.long	.LDW63
00000c95 00000000         11490		.long	.LDW73
                          11491	
00000c99 00               11492		.byte	0
                          11493	
00000c9a 00               11494		.byte	0
                          11495	
                          11496	.LDW_4aab888:
00000c9b 15               11497		.byte	21
00000c9c 4272734877536f66 11498		.strz	"BrsHwSoftwareResetECU"
00000ca4 7477617265526573
00000cac 657445435500    
00000cb2 ba17             11499		.byte	186,23
00000cb4 06               11500		.byte	6
00000cb5 01               11501		.byte	1
00000cb6 00000000         11502		.long	BrsHwSoftwareResetECU
00000cba 00000000         11503		.long	__ghs_eofn_BrsHwSoftwareResetECU
00000cbe 0151             11504		.byte	1,81
00000cc0 00               11505		.byte	0
00000cc1 08               11506		.byte	8
00000cc2 00               11507		.byte	0
00000cc3 08               11508		.byte	8
00000cc4 00               11509		.byte	0
00000cc5 00               11510		.byte	0
00000cc6 00               11511		.byte	0
00000cc7 01               11512		.byte	1
00000cc8 01               11513		.byte	1
00000cc9 00               11514		.byte	0
00000cca 01               11515		.byte	1
                          11516	
                          11517		.section	.debug_frame
                          11518	.LDW_5bad928:
000001b0 00000014         11519		.long	.LDW_unq_1c-.LDW_unq_1b
                          11520	.LDW_unq_1b:
000001b4 00000000         11521		.long	.LDW_5b61c00
000001b8 00000000         11522		.long	BrsHwSoftwareResetECU
000001bc 00000024         11523		.long	__ghs_eofn_BrsHwSoftwareResetECU-BrsHwSoftwareResetECU

                                   Fri Apr 10 08:31:37 2020           Page 207
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
000001c0 01               11524		.byte	1
000001c1 00000000         11525		.long	.LDW93
000001c5 00               11526		.byte	0
000001c6 00               11527		.byte	0
000001c7 00               11528		.byte	0
                          11529	.LDW_unq_1c:
                          11530		.section	.debug_line
00000287 000502           11531		.byte	0,5,2
0000028a 00000000         11532		.long	BrsHwSoftwareResetECU
0000028e 06               11533		.byte	6
0000028f 03               11534		.byte	3
00000290 ba17             11535		.byte	186,23
00000292 02               11536		.byte	2
00000293 00               11537		.byte	0
00000294 01               11538		.byte	1
00000295 2b               11539		.byte	43
00000296 000502           11540		.byte	0,5,2
00000299 00000000         11541		.long	.LDWlin19
0000029d 03               11542		.byte	3
0000029e 07               11543		.byte	7
0000029f 02               11544		.byte	2
000002a0 00               11545		.byte	0
000002a1 01               11546		.byte	1
000002a2 2d               11547		.byte	45
000002a3 33               11548		.byte	51
000002a4 25               11549		.byte	37
000002a5 0d               11550		.byte	13
000002a6 000502           11551		.byte	0,5,2
000002a9 00000000         11552		.long	__ghs_eofn_BrsHwSoftwareResetECU
000002ad 02               11553		.byte	2
000002ae 00               11554		.byte	0
000002af 000101           11555		.byte	0,1,1
                          11556		.section	.debug_info
                          11557	.LDW_4a632f8:
00000ccb 1f               11558		.byte	31
00000ccc 00000000         11559		.long	.LDW83
00000cd0 00000000         11560		.long	.LDW93
                          11561	
00000cd4 00               11562		.byte	0
                          11563	
00000cd5 00               11564		.byte	0
                          11565	
                          11566	.LDW_5b247d0:
00000cd6 15               11567		.byte	21
00000cd7 4272734877546f67 11568		.strz	"BrsHwTogglePin"
00000cdf 676c6550696e00  
00000ce6 e617             11569		.byte	230,23
00000ce8 06               11570		.byte	6
00000ce9 01               11571		.byte	1
00000cea 00000000         11572		.long	BrsHwTogglePin
00000cee 00000000         11573		.long	__ghs_eofn_BrsHwTogglePin
00000cf2 0151             11574		.byte	1,81
00000cf4 808080800c       11575		.byte	128,128,128,128,12
00000cf9 18               11576		.byte	24
00000cfa 00               11577		.byte	0
00000cfb 20               11578		.byte	32
00000cfc 00               11579		.byte	0

                                   Fri Apr 10 08:31:37 2020           Page 208
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
00000cfd 00               11580		.byte	0
00000cfe 00               11581		.byte	0
00000cff 01               11582		.byte	1
00000d00 01               11583		.byte	1
00000d01 00               11584		.byte	0
00000d02 01               11585		.byte	1
                          11586	
                          11587		.section	.debug_frame
                          11588	.LDW_5bad868:
000001c8 00000014         11589		.long	.LDW_unq_1e-.LDW_unq_1d
                          11590	.LDW_unq_1d:
000001cc 00000000         11591		.long	.LDW_5b61c00
000001d0 00000000         11592		.long	BrsHwTogglePin
000001d4 00000046         11593		.long	__ghs_eofn_BrsHwTogglePin-BrsHwTogglePin
000001d8 01               11594		.byte	1
000001d9 00000000         11595		.long	.LDW72
000001dd 00               11596		.byte	0
000001de 00               11597		.byte	0
000001df 00               11598		.byte	0
                          11599	.LDW_unq_1e:
                          11600		.section	.debug_line
000002b2 000502           11601		.byte	0,5,2
000002b5 00000000         11602		.long	BrsHwTogglePin
000002b9 06               11603		.byte	6
000002ba 03               11604		.byte	3
000002bb e617             11605		.byte	230,23
000002bd 02               11606		.byte	2
000002be 00               11607		.byte	0
000002bf 01               11608		.byte	1
000002c0 03               11609		.byte	3
000002c1 18               11610		.byte	24
000002c2 02               11611		.byte	2
000002c3 0c               11612		.byte	12
000002c4 01               11613		.byte	1
000002c5 000502           11614		.byte	0,5,2
000002c8 00000000         11615		.long	.LDWlin7
000002cc 03               11616		.byte	3
000002cd 07               11617		.byte	7
000002ce 02               11618		.byte	2
000002cf 00               11619		.byte	0
000002d0 01               11620		.byte	1
000002d1 000502           11621		.byte	0,5,2
000002d4 00000000         11622		.long	.LDWlin8
000002d8 0c               11623		.byte	12
000002d9 1b               11624		.byte	27
000002da 03               11625		.byte	3
000002db 16               11626		.byte	22
000002dc 02               11627		.byte	2
000002dd 00               11628		.byte	0
000002de 01               11629		.byte	1
000002df 03               11630		.byte	3
000002e0 04               11631		.byte	4
000002e1 02               11632		.byte	2
000002e2 00               11633		.byte	0
000002e3 01               11634		.byte	1
000002e4 0b               11635		.byte	11

                                   Fri Apr 10 08:31:37 2020           Page 209
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
000002e5 0b               11636		.byte	11
000002e6 02               11637		.byte	2
000002e7 0c               11638		.byte	12
000002e8 000101           11639		.byte	0,1,1
                          11640		.section	.debug_info
                          11641	.LDW_5b243b8:
00000d03 11               11642		.byte	17
00000d04 50696e00         11643		.strz	"Pin"
00000d08 e617             11644		.byte	230,23
00000d0a 25               11645		.byte	37
00000d0b 01               11646		.byte	1
00000d0c 00000000         11647		.long	.LDW_5b246d0
00000d10 00               11648		.byte	0
00000d11 0153             11649		.byte	1,83
                          11650	
                          11651	.LDW_4a631d8:
00000d13 1f               11652		.byte	31
00000d14 00000000         11653		.long	.LDW62
00000d18 00000000         11654		.long	.LDW72
                          11655	
                          11656	.LDW_5b24048:
00000d1c 06               11657		.byte	6
00000d1d 42727348775f546f 11658		.strz	"BrsHw_ToggleSwitch_LED"
00000d25 67676c6553776974
00000d2d 63685f4c454400  
00000d34 f617             11659		.byte	246,23
00000d36 10               11660		.byte	16
00000d37 01               11661		.byte	1
00000d38 00000000         11662		.long	.LDW_4aab2d0
00000d3c 00               11663		.byte	0
00000d3d 00               11664		.byte	0
00000d3e 0503             11665		.byte	5,3
00000d40 00000000         11666		.long	BrsHw_ToggleSwitch_LED.BrsHwTogglePin.C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5CBrsHw..1
                          11667	
00000d44 00               11668		.byte	0
                          11669	
00000d45 00               11670		.byte	0
                          11671	
                          11672	.LDW_5b24868:
00000d46 15               11673		.byte	21
00000d47 427273487754696d 11674		.strz	"BrsHwTime100NOP"
00000d4f 653130304e4f5000
00000d57 b918             11675		.byte	185,24
00000d59 06               11676		.byte	6
00000d5a 01               11677		.byte	1
00000d5b 00000000         11678		.long	BrsHwTime100NOP
00000d5f 00000000         11679		.long	__ghs_eofn_BrsHwTime100NOP
00000d63 0151             11680		.byte	1,81
00000d65 00               11681		.byte	0
00000d66 08               11682		.byte	8
00000d67 00               11683		.byte	0
00000d68 08               11684		.byte	8
00000d69 00               11685		.byte	0
00000d6a 00               11686		.byte	0
00000d6b 00               11687		.byte	0
00000d6c 01               11688		.byte	1
00000d6d 01               11689		.byte	1
00000d6e 00               11690		.byte	0
00000d6f 01               11691		.byte	1

                                   Fri Apr 10 08:31:37 2020           Page 210
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                          11692	
                          11693		.section	.debug_frame
                          11694	.LDW_5bad668:
000001e0 00000014         11695		.long	.LDW_unq_20-.LDW_unq_1f
                          11696	.LDW_unq_1f:
000001e4 00000000         11697		.long	.LDW_5b61c00
000001e8 00000000         11698		.long	BrsHwTime100NOP
000001ec 000001a8         11699		.long	__ghs_eofn_BrsHwTime100NOP-BrsHwTime100NOP
000001f0 01               11700		.byte	1
000001f1 00000000         11701		.long	.LDW14
000001f5 00               11702		.byte	0
000001f6 00               11703		.byte	0
000001f7 00               11704		.byte	0
                          11705	.LDW_unq_20:
                          11706		.section	.debug_line
000002eb 000502           11707		.byte	0,5,2
000002ee 00000000         11708		.long	BrsHwTime100NOP
000002f2 06               11709		.byte	6
000002f3 03               11710		.byte	3
000002f4 b918             11711		.byte	185,24
000002f6 02               11712		.byte	2
000002f7 00               11713		.byte	0
000002f8 01               11714		.byte	1
000002f9 2b               11715		.byte	43
000002fa 1c               11716		.byte	28
000002fb 000502           11717		.byte	0,5,2
000002fe 00000000         11718		.long	.LDWlin21
00000302 0b               11719		.byte	11
00000303 000502           11720		.byte	0,5,2
00000306 00000000         11721		.long	.LDWlin22
0000030a 0b               11722		.byte	11
0000030b 000502           11723		.byte	0,5,2
0000030e 00000000         11724		.long	.LDWlin23
00000312 0b               11725		.byte	11
00000313 000502           11726		.byte	0,5,2
00000316 00000000         11727		.long	.LDWlin24
0000031a 0b               11728		.byte	11
0000031b 000502           11729		.byte	0,5,2
0000031e 00000000         11730		.long	.LDWlin25
00000322 0b               11731		.byte	11
00000323 000502           11732		.byte	0,5,2
00000326 00000000         11733		.long	.LDWlin26
0000032a 0b               11734		.byte	11
0000032b 000502           11735		.byte	0,5,2
0000032e 00000000         11736		.long	.LDWlin27
00000332 0b               11737		.byte	11
00000333 000502           11738		.byte	0,5,2
00000336 00000000         11739		.long	.LDWlin28
0000033a 0b               11740		.byte	11
0000033b 000502           11741		.byte	0,5,2
0000033e 00000000         11742		.long	.LDWlin29
00000342 0b               11743		.byte	11
00000343 000502           11744		.byte	0,5,2
00000346 00000000         11745		.long	.LDWlin30
0000034a 0c               11746		.byte	12
0000034b 1b               11747		.byte	27

                                   Fri Apr 10 08:31:37 2020           Page 211
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
0000034c 02               11748		.byte	2
0000034d 08               11749		.byte	8
0000034e 000101           11750		.byte	0,1,1
                          11751		.section	.debug_info
                          11752	.LDW_4a63568:
00000d70 1f               11753		.byte	31
00000d71 00000000         11754		.long	.LDW04
00000d75 00000000         11755		.long	.LDW14
                          11756	
00000d79 00               11757		.byte	0
                          11758	
00000d7a 00               11759		.byte	0
                          11760	
                          11761	.LDW_5b24900:
00000d7b 15               11762		.byte	21
00000d7c 4272734877537769 11763		.strz	"BrsHwSwitchRunMode"
00000d84 74636852756e4d6f
00000d8c 646500          
00000d8f 9123             11764		.byte	145,35
00000d91 06               11765		.byte	6
00000d92 01               11766		.byte	1
00000d93 00000000         11767		.long	BrsHwSwitchRunMode
00000d97 00000000         11768		.long	__ghs_eofn_BrsHwSwitchRunMode
00000d9b 0151             11769		.byte	1,81
00000d9d 03               11770		.byte	3
00000d9e 00               11771		.byte	0
00000d9f 00               11772		.byte	0
00000da0 00               11773		.byte	0
00000da1 00               11774		.byte	0
00000da2 00               11775		.byte	0
00000da3 00               11776		.byte	0
00000da4 01               11777		.byte	1
00000da5 01               11778		.byte	1
00000da6 00               11779		.byte	0
00000da7 01               11780		.byte	1
                          11781	
                          11782		.section	.debug_frame
                          11783	.LDW_5bad9a8:
000001f8 00000014         11784		.long	.LDW_unq_22-.LDW_unq_21
                          11785	.LDW_unq_21:
000001fc 00000000         11786		.long	.LDW_5b61c00
00000200 00000000         11787		.long	BrsHwSwitchRunMode
00000204 00000076         11788		.long	__ghs_eofn_BrsHwSwitchRunMode-BrsHwSwitchRunMode
00000208 01               11789		.byte	1
00000209 00000000         11790		.long	.LDW31
0000020d 00               11791		.byte	0
0000020e 00               11792		.byte	0
0000020f 00               11793		.byte	0
                          11794	.LDW_unq_22:
                          11795		.section	.debug_line
00000351 000502           11796		.byte	0,5,2
00000354 00000000         11797		.long	BrsHwSwitchRunMode
00000358 06               11798		.byte	6
00000359 03               11799		.byte	3
0000035a 9623             11800		.byte	150,35
0000035c 02               11801		.byte	2
0000035d 00               11802		.byte	0
0000035e 01               11803		.byte	1

                                   Fri Apr 10 08:31:37 2020           Page 212
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
0000035f 33               11804		.byte	51
00000360 2b               11805		.byte	43
00000361 35               11806		.byte	53
00000362 24               11807		.byte	36
00000363 23               11808		.byte	35
00000364 03               11809		.byte	3
00000365 1a               11810		.byte	26
00000366 02               11811		.byte	2
00000367 06               11812		.byte	6
00000368 01               11813		.byte	1
00000369 000502           11814		.byte	0,5,2
0000036c 00000000         11815		.long	.LDWlin1
00000370 0b               11816		.byte	11
00000371 0d               11817		.byte	13
00000372 23               11818		.byte	35
00000373 23               11819		.byte	35
00000374 02               11820		.byte	2
00000375 00               11821		.byte	0
00000376 000502           11822		.byte	0,5,2
00000379 00000000         11823		.long	.LDWlin2
0000037d 0d               11824		.byte	13
0000037e 0b               11825		.byte	11
0000037f 02               11826		.byte	2
00000380 00               11827		.byte	0
00000381 0b               11828		.byte	11
00000382 2b               11829		.byte	43
00000383 33               11830		.byte	51
00000384 02               11831		.byte	2
00000385 00               11832		.byte	0
00000386 000502           11833		.byte	0,5,2
00000389 00000000         11834		.long	.LDWlin3
0000038d 0d               11835		.byte	13
0000038e 0c               11836		.byte	12
0000038f 02               11837		.byte	2
00000390 00               11838		.byte	0
00000391 000502           11839		.byte	0,5,2
00000394 00000000         11840		.long	.LDWlin4
00000398 0d               11841		.byte	13
00000399 0c               11842		.byte	12
0000039a 02               11843		.byte	2
0000039b 00               11844		.byte	0
0000039c 000502           11845		.byte	0,5,2
0000039f 00000000         11846		.long	.LDWlin5
000003a3 0d               11847		.byte	13
000003a4 0b               11848		.byte	11
000003a5 1c               11849		.byte	28
000003a6 02               11850		.byte	2
000003a7 02               11851		.byte	2
000003a8 000101           11852		.byte	0,1,1
                          11853		.section	.debug_info
                          11854	.LDW_4a634d8:
00000da8 1f               11855		.byte	31
00000da9 00000000         11856		.long	.LDW21
00000dad 00000000         11857		.long	.LDW31
                          11858	
00000db1 00               11859		.byte	0

                                   Fri Apr 10 08:31:37 2020           Page 213
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
                          11860	
00000db2 00               11861		.byte	0
                          11862	
00000db3 00               11863		.byte	0
                          11864	
                          11865		.section	.debug_line
                          11866	.Ldw_line_end:
                          11867		.section	.debug_macinfo
00000000 01               11868		.byte	1
00000001 00               11869		.byte	0
00000002 4252535f44455249 11870		.strz	"BRS_DERIVATIVE_SPC570S50 1"
0000000a 5641544956455f53
00000012 5043353730533530
0000001a 203100          
0000001d 01               11871		.byte	1
0000001e 00               11872		.byte	0
0000001f 4252535f4f53435f 11873		.strz	"BRS_OSC_CLK 40"
00000027 434c4b20343000  
0000002e 01               11874		.byte	1
0000002f 00               11875		.byte	0
00000030 4252535f54494d45 11876		.strz	"BRS_TIMEBASE_CLOCK 80"
00000038 424153455f434c4f
00000040 434b20383000    
00000046 01               11877		.byte	1
00000047 00               11878		.byte	0
00000048 4252535f4f535f55 11879		.strz	"BRS_OS_USECASE_BRS 1"
00000050 5345434153455f42
00000058 5253203100      
0000005d 01               11880		.byte	1
0000005e 00               11881		.byte	0
0000005f 4252535f4556415f 11882		.strz	"BRS_EVA_BOARD_DEFAULT 1"
00000067 424f4152445f4445
0000006f 4641554c54203100
00000077 01               11883		.byte	1
00000078 00               11884		.byte	0
00000079 4252535f434f4d50 11885		.strz	"BRS_COMP_GHS 1"
00000081 5f474853203100  
00000088 01               11886		.byte	1
00000089 00               11887		.byte	0
0000008a 42525348575f494e 11888		.strz	"BRSHW_INSTRUCTION_SET_VLE 1"
00000092 535452554354494f
0000009a 4e5f5345545f564c
000000a2 45203100        
000000a6 03               11889		.byte	3
000000a7 00               11890		.byte	0
000000a8 01               11891		.byte	1
000000a9 03               11892		.byte	3
000000aa 9101             11893		.byte	145,1
000000ac 02               11894		.byte	2
000000ad 03               11895		.byte	3
000000ae 27               11896		.byte	39
000000af 03               11897		.byte	3
000000b0 01               11898		.byte	1
000000b1 df02             11899		.byte	223,2
000000b3 42525348575f5553 11900		.strz	"BRSHW_USED_CANCELL_DEFAULT "
000000bb 45445f43414e4345
000000c3 4c4c5f4445464155
000000cb 4c542000        
000000cf 01               11901		.byte	1
000000d0 e002             11902		.byte	224,2
000000d2 42525348575f4350 11903		.strz	"BRSHW_CPU_MAX_FREQUENCY 80"
000000da 555f4d41585f4652
000000e2 455155454e435920
000000ea 383000          
000000ed 01               11904		.byte	1
000000ee e502             11905		.byte	229,2
000000f0 42525348575f494e 11906		.strz	"BRSHW_INTERRUPT_TABLE_GROUP_F "
000000f8 544552525550545f
00000100 5441424c455f4752
00000108 4f55505f462000  
0000010f 01               11907		.byte	1
00000110 e602             11908		.byte	230,2
00000112 42525348575f5349 11909		.strz	"BRSHW_SIU_GROUP_F 0xFFFC0000"
0000011a 555f47524f55505f
00000122 4620307846464643
0000012a 3030303000      
0000012f 01               11910		.byte	1
00000130 e702             11911		.byte	231,2
00000132 42525348575f464d 11912		.strz	"BRSHW_FMPLL_GROUP_A_3 0xFFFB0100"
0000013a 504c4c5f47524f55
00000142 505f415f33203078
0000014a 4646464230313030
00000152 00              
00000153 01               11913		.byte	1
00000154 e902             11914		.byte	233,2
00000156 42525348575f5741 11915		.strz	"BRSHW_WATCHDOG_GROUP_A 0xFC058000"
0000015e 544348444f475f47
00000166 524f55505f412030
0000016e 7846433035383030
00000176 3000            

                                   Fri Apr 10 08:31:37 2020           Page 214
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
00000178 01               11916		.byte	1
00000179 ea02             11917		.byte	234,2
0000017b 42525348575f4f50 11918		.strz	"BRSHW_OPMODES_GROUP_A 0xFFFB8000"
00000183 4d4f4445535f4752
0000018b 4f55505f41203078
00000193 4646464238303030
0000019b 00              
0000019c 01               11919		.byte	1
0000019d eb02             11920		.byte	235,2
0000019f 42525348575f4c45 11921		.strz	"BRSHW_LED_PORT_NUMBER 8"
000001a7 445f504f52545f4e
000001af 554d424552203800
000001b7 01               11922		.byte	1
000001b8 ec02             11923		.byte	236,2
000001ba 42525348575f454e 11924		.strz	"BRSHW_ENABLE_ISR_SW_DISPATCHING "
000001c2 41424c455f495352
000001ca 5f53575f44495350
000001d2 41544348494e4720
000001da 00              
000001db 04               11925		.byte	4
000001dc 03               11926		.byte	3
000001dd 2f               11927		.byte	47
000001de 04               11928		.byte	4
000001df 03               11929		.byte	3
000001e0 34               11930		.byte	52
000001e1 05               11931		.byte	5
000001e2 03               11932		.byte	3
000001e3 32               11933		.byte	50
000001e4 06               11934		.byte	6
000001e5 01               11935		.byte	1
000001e6 4a               11936		.byte	74
000001e7 435f435055545950 11937		.strz	"C_CPUTYPE_32BIT "
000001ef 455f333242495420
000001f7 00              
000001f8 01               11938		.byte	1
000001f9 59               11939		.byte	89
000001fa 435f435055545950 11940		.strz	"C_CPUTYPE_BITORDER_MSB2LSB "
00000202 455f4249544f5244
0000020a 45525f4d5342324c
00000212 53422000        
00000216 01               11941		.byte	1
00000217 8901             11942		.byte	137,1
00000219 5647454e5f454e41 11943		.strz	"VGEN_ENABLE_CANFBL "
00000221 424c455f43414e46
00000229 424c2000        
0000022d 01               11944		.byte	1
0000022e be01             11945		.byte	190,1
00000230 565f434f4d505f47 11946		.strz	"V_COMP_GHS_MPC5700 "
00000238 48535f4d50433537
00000240 30302000        
00000244 04               11947		.byte	4
00000245 03               11948		.byte	3
00000246 33               11949		.byte	51
00000247 07               11950		.byte	7
00000248 01               11951		.byte	1
00000249 8704             11952		.byte	135,4
0000024b 565f4445465f5355 11953		.strz	"V_DEF_SUPPORTED_PLATFORM "
00000253 50504f525445445f
0000025b 504c4154464f524d
00000263 2000            
00000265 01               11954		.byte	1
00000266 da06             11955		.byte	218,6
00000268 4c4f43414c5f494e 11956		.strz	"LOCAL_INLINE static inline"
00000270 4c494e4520737461
00000278 74696320696e6c69
00000280 6e6500          
00000283 04               11957		.byte	4
00000284 04               11958		.byte	4
00000285 01               11959		.byte	1
00000286 3e               11960		.byte	62
00000287 5647454e5f454e41 11961		.strz	"VGEN_ENABLE_CAN_DRV "
0000028f 424c455f43414e5f
00000297 4452562000      
0000029c 01               11962		.byte	1
0000029d 3f               11963		.byte	63
0000029e 5647454e5f454e41 11964		.strz	"VGEN_ENABLE_IF_ASRIFCAN "
000002a6 424c455f49465f41
000002ae 5352494643414e20
000002b6 00              
000002b7 01               11965		.byte	1
000002b8 47               11966		.byte	71
000002b9 6b43616e50687973 11967		.strz	"kCanPhysToLogChannelIndex_0 "
000002c1 546f4c6f67436861
000002c9 6e6e656c496e6465
000002d1 785f302000      
000002d6 01               11968		.byte	1
000002d7 55               11969		.byte	85
000002d8 4252535f454e4142 11970		.strz	"BRS_ENABLE_SUPPORT_LEDS "
000002e0 4c455f535550504f
000002e8 52545f4c45445320
000002f0 00              
000002f1 01               11971		.byte	1

                                   Fri Apr 10 08:31:37 2020           Page 215
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
000002f2 67               11972		.byte	103
000002f3 4252535f454e4142 11973		.strz	"BRS_ENABLE_FBL_SUPPORT "
000002fb 4c455f46424c5f53
00000303 5550504f52542000
0000030b 04               11974		.byte	4
0000030c 01               11975		.byte	1
0000030d 52               11976		.byte	82
0000030e 42525348575f5645 11977		.strz	"BRSHW_VERSION 0x0105u"
00000316 5253494f4e203078
0000031e 303130357500    
00000324 01               11978		.byte	1
00000325 53               11979		.byte	83
00000326 42525348575f4255 11980		.strz	"BRSHW_BUGFIX_VERSION 0x03u"
0000032e 474649585f564552
00000336 53494f4e20307830
0000033e 337500          
00000341 01               11981		.byte	1
00000342 5b               11982		.byte	91
00000343 42525348575f494f 11983		.strz	"BRSHW_IOS(type,address) (*((volatile type *)(address)))"
0000034b 5328747970652c61
00000353 6464726573732920
0000035b 282a2828766f6c61
00000363 74696c6520747970
0000036b 65202a2928616464
00000373 7265737329292900
0000037b 01               11984		.byte	1
0000037c 8403             11985		.byte	132,3
0000037e 4252535f53544152 11986		.strz	"BRS_START_SEC_RAM_CODE "
00000386 545f5345435f5241
0000038e 4d5f434f44452000
00000396 03               11987		.byte	3
00000397 8503             11988		.byte	133,3
00000399 08               11989		.byte	8
0000039a 01               11990		.byte	1
0000039b 2c               11991		.byte	44
0000039c 4252535f4d454d4d 11992		.strz	"BRS_MEMMAP_ERROR "
000003a4 41505f4552524f52
000003ac 2000            
000003ae 04               11993		.byte	4
000003af 01               11994		.byte	1
000003b0 9903             11995		.byte	153,3
000003b2 4252535f53544f50 11996		.strz	"BRS_STOP_SEC_RAM_CODE "
000003ba 5f5345435f52414d
000003c2 5f434f44452000  
000003c9 03               11997		.byte	3
000003ca 9a03             11998		.byte	154,3
000003cc 08               11999		.byte	8
000003cd 01               12000		.byte	1
000003ce 2c               12001		.byte	44
000003cf 4252535f4d454d4d 12002		.strz	"BRS_MEMMAP_ERROR "
000003d7 41505f4552524f52
000003df 2000            
000003e1 04               12003		.byte	4
000003e2 04               12004		.byte	4
000003e3 03               12005		.byte	3
000003e4 d101             12006		.byte	209,1
000003e6 09               12007		.byte	9
000003e7 01               12008		.byte	1
000003e8 cb01             12009		.byte	203,1
000003ea 42525348575f504f 12010		.strz	"BRSHW_PORT_LOGIC_HIGH (uint8)1"
000003f2 52545f4c4f474943
000003fa 5f48494748202875
00000402 696e7438293100  
00000409 01               12011		.byte	1
0000040a cc01             12012		.byte	204,1
0000040c 42525348575f504f 12013		.strz	"BRSHW_PORT_LOGIC_LOW (uint8)0"
00000414 52545f4c4f474943
0000041c 5f4c4f5720287569
00000424 6e7438293000    
0000042a 01               12014		.byte	1
0000042b fc0c             12015		.byte	252,12
0000042d 5f42525348575f50 12016		.strz	"_BRSHW_PORT_CAN0_TRCV_STB "
00000435 4f52545f43414e30
0000043d 5f545243565f5354
00000445 422000          
00000448 04               12017		.byte	4
00000449 01               12018		.byte	1
0000044a b002             12019		.byte	176,2
0000044c 42525348575f464d 12020		.strz	"BRSHW_FMPLL_GROUP_A BRSHW_FMPLL_GROUP_A_3"
00000454 504c4c5f47524f55
0000045c 505f412042525348
00000464 575f464d504c4c5f
0000046c 47524f55505f415f
00000474 3300            
00000476 01               12021		.byte	1
00000477 b302             12022		.byte	179,2
00000479 464d504c4c5f4241 12023		.strz	"FMPLL_BASE_ADDR BRSHW_FMPLL_GROUP_A"
00000481 53455f4144445220
00000489 42525348575f464d
00000491 504c4c5f47524f55
00000499 505f4100        
0000049d 01               12024		.byte	1
0000049e b702             12025		.byte	183,2
000004a0 504c4c3044562042 12026		.strz	"PLL0DV BRSHW_IOS(uint32, FMPLL_BASE_ADDR + 0x08)"
000004a8 525348575f494f53
000004b0 2875696e7433322c
000004b8 20464d504c4c5f42
000004c0 4153455f41444452
000004c8 202b203078303829
000004d0 00              
000004d1 01               12027		.byte	1

                                   Fri Apr 10 08:31:37 2020           Page 216
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
000004d2 c102             12028		.byte	193,2
000004d4 43474d5f42415345 12029		.strz	"CGM_BASE_ADDR 0xFFFB0000"
000004dc 5f41444452203078
000004e4 4646464230303030
000004ec 00              
000004ed 01               12030		.byte	1
000004ee c402             12031		.byte	196,2
000004f0 43474d5f4143305f 12032		.strz	"CGM_AC0_SC BRSHW_IOS(uint32, CGM_BASE_ADDR + 0x0800)"
000004f8 5343204252534857
00000500 5f494f532875696e
00000508 7433322c2043474d
00000510 5f424153455f4144
00000518 4452202b20307830
00000520 3830302900      
00000525 01               12033		.byte	1
00000526 c602             12034		.byte	198,2
00000528 43474d5f4143305f 12035		.strz	"CGM_AC0_DC0 BRSHW_IOS(uint32, CGM_BASE_ADDR + 0x0808)"
00000530 4443302042525348
00000538 575f494f53287569
00000540 6e7433322c204347
00000548 4d5f424153455f41
00000550 444452202b203078
00000558 303830382900    
0000055e 01               12036		.byte	1
0000055f cd02             12037		.byte	205,2
00000561 43474d5f4143315f 12038		.strz	"CGM_AC1_SC BRSHW_IOS(uint32, CGM_BASE_ADDR + 0x0820)"
00000569 5343204252534857
00000571 5f494f532875696e
00000579 7433322c2043474d
00000581 5f424153455f4144
00000589 4452202b20307830
00000591 3832302900      
00000596 01               12039		.byte	1
00000597 cf02             12040		.byte	207,2
00000599 43474d5f4143315f 12041		.strz	"CGM_AC1_DC0 BRSHW_IOS(uint32, CGM_BASE_ADDR + 0x0828)"
000005a1 4443302042525348
000005a9 575f494f53287569
000005b1 6e7433322c204347
000005b9 4d5f424153455f41
000005c1 444452202b203078
000005c9 303832382900    
000005cf 01               12042		.byte	1
000005d0 d202             12043		.byte	210,2
000005d2 43474d5f4143325f 12044		.strz	"CGM_AC2_SC BRSHW_IOS(uint32, CGM_BASE_ADDR + 0x0840)"
000005da 5343204252534857
000005e2 5f494f532875696e
000005ea 7433322c2043474d
000005f2 5f424153455f4144
000005fa 4452202b20307830
00000602 3834302900      
00000607 01               12045		.byte	1
00000608 d602             12046		.byte	214,2
0000060a 43474d5f4143335f 12047		.strz	"CGM_AC3_SC BRSHW_IOS(uint32, CGM_BASE_ADDR + 0x0860)"
00000612 5343204252534857
0000061a 5f494f532875696e
00000622 7433322c2043474d
0000062a 5f424153455f4144
00000632 4452202b20307830
0000063a 3836302900      
0000063f 01               12048		.byte	1
00000640 e702             12049		.byte	231,2
00000642 43474d5f53435f44 12050		.strz	"CGM_SC_DC0 BRSHW_IOS(uint32, CGM_BASE_ADDR + 0x07E8)"
0000064a 4330204252534857
00000652 5f494f532875696e
0000065a 7433322c2043474d
00000662 5f424153455f4144
0000066a 4452202b20307830
00000672 3745382900      
00000677 01               12051		.byte	1
00000678 e802             12052		.byte	232,2
0000067a 43474d5f53435f44 12053		.strz	"CGM_SC_DC1 BRSHW_IOS(uint32, CGM_BASE_ADDR + 0x07EC)"
00000682 4331204252534857
0000068a 5f494f532875696e
00000692 7433322c2043474d
0000069a 5f424153455f4144
000006a2 4452202b20307830
000006aa 3745432900      
000006af 01               12054		.byte	1
000006b0 e103             12055		.byte	225,3
000006b2 5349555f42415345 12056		.strz	"SIU_BASE_ADDR BRSHW_SIU_GROUP_F"
000006ba 5f41444452204252
000006c2 5348575f5349555f
000006ca 47524f55505f4600
000006d2 01               12057		.byte	1
000006d3 8304             12058		.byte	131,4
000006d5 42525348575f5043 12059		.strz	"BRSHW_PCR_PIN_ASSIGNMENT_GPIO_INPUT 0x00080000"
000006dd 525f50494e5f4153
000006e5 5349474e4d454e54
000006ed 5f4750494f5f494e
000006f5 5055542030783030
000006fd 30383030303000  
00000704 01               12060		.byte	1
00000705 8704             12061		.byte	135,4
00000707 42525348575f5043 12062		.strz	"BRSHW_PCR_PIN_ASSIGNMENT_GPIO_OUTPUT 0x32000000"
0000070f 525f50494e5f4153
00000717 5349474e4d454e54
0000071f 5f4750494f5f4f55
00000727 5450555420307833
0000072f 3230303030303000
00000737 01               12063		.byte	1
00000738 9204             12064		.byte	146,4
0000073a 5349555f4d534352 12065		.strz	"SIU_MSCR(x) BRSHW_IOS(uint32, SIU_BASE_ADDR + 0x240 + (4*x))"
00000742 2878292042525348
0000074a 575f494f53287569
00000752 6e7433322c205349
0000075a 555f424153455f41
00000762 444452202b203078
0000076a 323430202b202834
00000772 2a78292900      
00000777 01               12066		.byte	1
00000778 9604             12067		.byte	150,4
0000077a 5349555f4750444f 12068		.strz	"SIU_GPDO(x) BRSHW_IOS(uint8, SIU_BASE_ADDR + 0x1300 + x)"
00000782 2878292042525348
0000078a 575f494f53287569
00000792 6e74382c20534955
0000079a 5f424153455f4144
000007a2 4452202b20307831
000007aa 333030202b207829
000007b2 00              
000007b3 01               12069		.byte	1
000007b4 9704             12070		.byte	151,4
000007b6 5349555f47504449 12071		.strz	"SIU_GPDI(x) BRSHW_IOS(uint8, SIU_BASE_ADDR + 0x1500 + x)"
000007be 2878292042525348
000007c6 575f494f53287569
000007ce 6e74382c20534955
000007d6 5f424153455f4144
000007de 4452202b20307831
000007e6 353030202b207829
000007ee 00              
000007ef 01               12072		.byte	1
000007f0 a804             12073		.byte	168,4
000007f2 4d455f424153455f 12074		.strz	"ME_BASE_ADDR BRSHW_OPMODES_GROUP_A"
000007fa 4144445220425253
00000802 48575f4f504d4f44
0000080a 45535f47524f5550
00000812 5f4100          
00000815 01               12075		.byte	1
00000816 ad04             12076		.byte	173,4
00000818 4d455f4753204252 12077		.strz	"ME_GS BRSHW_IOS(uint32, ME_BASE_ADDR + 0x00)"
00000820 5348575f494f5328
00000828 75696e7433322c20
00000830 4d455f424153455f
00000838 41444452202b2030
00000840 7830302900      
00000845 01               12078		.byte	1
00000846 ae04             12079		.byte	174,4
00000848 4d455f4d43544c20 12080		.strz	"ME_MCTL BRSHW_IOS(uint32, ME_BASE_ADDR + 0x004)"
00000850 42525348575f494f
00000858 532875696e743332
00000860 2c204d455f424153
00000868 455f41444452202b
00000870 2030783030342900
00000878 01               12081		.byte	1
00000879 af04             12082		.byte	175,4
0000087b 4d455f4d45204252 12083		.strz	"ME_ME BRSHW_IOS(uint32, ME_BASE_ADDR + 0x008)"
00000883 5348575f494f5328
0000088b 75696e7433322c20
00000893 4d455f424153455f
0000089b 41444452202b2030
000008a3 783030382900    

                                   Fri Apr 10 08:31:37 2020           Page 217
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
000008a9 01               12084		.byte	1
000008aa b004             12085		.byte	176,4
000008ac 4d455f4953204252 12086		.strz	"ME_IS BRSHW_IOS(uint32, ME_BASE_ADDR + 0x00C)"
000008b4 5348575f494f5328
000008bc 75696e7433322c20
000008c4 4d455f424153455f
000008cc 41444452202b2030
000008d4 783030432900    
000008da 01               12087		.byte	1
000008db b204             12088		.byte	178,4
000008dd 4d455f52554e5f4d 12089		.strz	"ME_RUN_MC(x) BRSHW_IOS(uint32, ME_BASE_ADDR + 0x030 + 4*x)"
000008e5 4328782920425253
000008ed 48575f494f532875
000008f5 696e7433322c204d
000008fd 455f424153455f41
00000905 444452202b203078
0000090d 303330202b20342a
00000915 782900          
00000918 01               12090		.byte	1
00000919 b304             12091		.byte	179,4
0000091b 4d455f52554e5f50 12092		.strz	"ME_RUN_PC(x) BRSHW_IOS(uint32, ME_BASE_ADDR + 0x080 + 4*x)"
00000923 4328782920425253
0000092b 48575f494f532875
00000933 696e7433322c204d
0000093b 455f424153455f41
00000943 444452202b203078
0000094b 303830202b20342a
00000953 782900          
00000956 01               12093		.byte	1
00000957 b404             12094		.byte	180,4
00000959 4d455f4c505f5043 12095		.strz	"ME_LP_PC(x) BRSHW_IOS(uint32, ME_BASE_ADDR + 0x0A0 + 4*x)"
00000961 2878292042525348
00000969 575f494f53287569
00000971 6e7433322c204d45
00000979 5f424153455f4144
00000981 4452202b20307830
00000989 4130202b20342a78
00000991 2900            
00000993 01               12096		.byte	1
00000994 df04             12097		.byte	223,4
00000996 5357545f42415345 12098		.strz	"SWT_BASE_ADDR BRSHW_WATCHDOG_GROUP_A"
0000099e 5f41444452204252
000009a6 5348575f57415443
000009ae 48444f475f47524f
000009b6 55505f4100      
000009bb 01               12099		.byte	1
000009bc e004             12100		.byte	224,4
000009be 5357545f43522042 12101		.strz	"SWT_CR BRSHW_IOS(uint32, SWT_BASE_ADDR + 0x00 )"
000009c6 525348575f494f53
000009ce 2875696e7433322c
000009d6 205357545f424153
000009de 455f41444452202b
000009e6 2030783030202900
000009ee 01               12102		.byte	1
000009ef e104             12103		.byte	225,4
000009f1 5357545f53522042 12104		.strz	"SWT_SR BRSHW_IOS(uint32, SWT_BASE_ADDR + 0x10 )"
000009f9 525348575f494f53
00000a01 2875696e7433322c
00000a09 205357545f424153
00000a11 455f41444452202b
00000a19 2030783130202900
00000a21 01               12105		.byte	1
00000a22 ad05             12106		.byte	173,5
00000a24 4d435f52474d5f42 12107		.strz	"MC_RGM_BASE 0xFFFA8000"
00000a2c 4153452030784646
00000a34 46413830303000  
00000a3b 01               12108		.byte	1
00000a3c ae05             12109		.byte	174,5
00000a3e 52474d5f46524554 12110		.strz	"RGM_FRET BRSHW_IOS(uint8, MC_RGM_BASE + 0x604)"
00000a46 2042525348575f49
00000a4e 4f532875696e7438
00000a56 2c204d435f52474d
00000a5e 5f42415345202b20
00000a66 30783630342900  
00000a6d 01               12111		.byte	1
00000a6e 9d08             12112		.byte	157,8
00000a70 42525348574e4f50 12113		.strz	"BRSHWNOP10() asm(\"nop\");asm(\"nop\");asm(\"nop\");asm(\"nop\");asm(\"nop\");asm(\"nop\");asm(\"nop\");asm(\"nop\");asm(\"nop\");asm(\"nop\")"
00000a78 313028292061736d
00000a80 28226e6f7022293b
00000a88 61736d28226e6f70
00000a90 22293b61736d2822
00000a98 6e6f7022293b6173
00000aa0 6d28226e6f702229
00000aa8 3b61736d28226e6f
00000ab0 7022293b61736d28
00000ab8 226e6f7022293b61
00000ac0 736d28226e6f7022
00000ac8 293b61736d28226e
00000ad0 6f7022293b61736d
00000ad8 28226e6f7022293b
00000ae0 61736d28226e6f70
00000ae8 222900          
00000aeb 01               12114		.byte	1
00000aec f909             12115		.byte	249,9
00000aee 5052454449562042 12116		.strz	"PREDIV BRS_OSC_CLK/10"
00000af6 52535f4f53435f43
00000afe 4c4b2f313000    
00000b04 01               12117		.byte	1
00000b05 fa09             12118		.byte	250,9
00000b07 4d4644204252535f 12119		.strz	"MFD BRS_TIMEBASE_CLOCK*8/10"
00000b0f 54494d4542415345
00000b17 5f434c4f434b2a38
00000b1f 2f313000        
00000b23 01               12120		.byte	1
00000b24 fb09             12121		.byte	251,9
00000b26 5246445048492034 12122		.strz	"RFDPHI 4*2"
00000b2e 2a3200          
00000b31 01               12123		.byte	1
00000b32 850c             12124		.byte	133,12
00000b34 4252535f53544152 12125		.strz	"BRS_START_SEC_RAM_CODE "
00000b3c 545f5345435f5241
00000b44 4d5f434f44452000
00000b4c 03               12126		.byte	3
00000b4d 860c             12127		.byte	134,12
00000b4f 08               12128		.byte	8
00000b50 01               12129		.byte	1
00000b51 2c               12130		.byte	44
00000b52 4252535f4d454d4d 12131		.strz	"BRS_MEMMAP_ERROR "
00000b5a 41505f4552524f52
00000b62 2000            
00000b64 04               12132		.byte	4
00000b65 01               12133		.byte	1
00000b66 ad0c             12134		.byte	173,12
00000b68 4252535f53544f50 12135		.strz	"BRS_STOP_SEC_RAM_CODE "
00000b70 5f5345435f52414d
00000b78 5f434f44452000  
00000b7f 03               12136		.byte	3
00000b80 ae0c             12137		.byte	174,12
00000b82 08               12138		.byte	8
00000b83 01               12139		.byte	1

                                   Fri Apr 10 08:31:37 2020           Page 218
                                   Fri Apr 10 08:31:36 2020   gh_0000csk1.si
00000b84 2c               12140		.byte	44
00000b85 4252535f4d454d4d 12141		.strz	"BRS_MEMMAP_ERROR "
00000b8d 41505f4552524f52
00000b95 2000            
00000b97 04               12142		.byte	4
00000b98 01               12143		.byte	1
00000b99 d417             12144		.byte	212,23
00000b9b 4252535f53544152 12145		.strz	"BRS_START_SEC_RAM_CODE "
00000ba3 545f5345435f5241
00000bab 4d5f434f44452000
00000bb3 03               12146		.byte	3
00000bb4 d517             12147		.byte	213,23
00000bb6 08               12148		.byte	8
00000bb7 01               12149		.byte	1
00000bb8 2c               12150		.byte	44
00000bb9 4252535f4d454d4d 12151		.strz	"BRS_MEMMAP_ERROR "
00000bc1 41505f4552524f52
00000bc9 2000            
00000bcb 04               12152		.byte	4
00000bcc 01               12153		.byte	1
00000bcd a718             12154		.byte	167,24
00000bcf 4252535f53544f50 12155		.strz	"BRS_STOP_SEC_RAM_CODE "
00000bd7 5f5345435f52414d
00000bdf 5f434f44452000  
00000be6 03               12156		.byte	3
00000be7 a818             12157		.byte	168,24
00000be9 08               12158		.byte	8
00000bea 01               12159		.byte	1
00000beb 2c               12160		.byte	44
00000bec 4252535f4d454d4d 12161		.strz	"BRS_MEMMAP_ERROR "
00000bf4 41505f4552524f52
00000bfc 2000            
00000bfe 04               12162		.byte	4
00000bff 04               12163		.byte	4
00000c00 00               12164		.byte	0
                          12165		.section	.debug_abbrev
00000131 00               12166		.byte	0
                          12167		.section	.debug_info
                          12168	.Ldw_end:
