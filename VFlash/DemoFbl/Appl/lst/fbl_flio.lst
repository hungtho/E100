
                                   Fri Apr 10 08:32:08 2020           Page 1
                                   Fri Apr 10 08:32:08 2020   gh_00002441.si
Command Line:   C:\ghs\comp_201754\asppc.exe -noundefined
                -stderr=err/fbl_flio.err -elf -b1 -I../../../bsw/_common
                -I../../../bsw/eep -I../../../bsw/fbl -I../../../bsw/flash
                -I../../../bsw/flash_xd1 -I../../../bsw/secmod
                -I../../../bsw/wrapnv -Ic:/ghs/comp_201754/ansi
                -Ic:/ghs/comp_201754/include/ppc -Ic:/ghs/comp_201754/src/libsys
                -Igendata -Iinclude -IC:\ghs\comp_201754\lib\ppc5514
                -cpu=ppc560xp
                -patch_dbo=C:\Vector\CBD1800772_D00_Mpc57xx\Demo\DemoFbl\Appl\obj\fbl_flio.dbo
                -source=fbl_flio.c -o obj\gh_00002441.o -list=lst/fbl_flio.lst
                C:\Users\owner\AppData\Local\Temp\gh_00002441.si
Source File:    C:\Users\owner\AppData\Local\Temp\gh_00002441.si
Directory:      C:\Vector\CBD1800772_D00_Mpc57xx\Demo\DemoFbl\Appl
Host OS:        Windows
AS: Copyright (C) 1983-2017 Green Hills Software.  All Rights Reserved.
Release: Compiler v2017.5.4
Build Directory: [Directory] COMP-VAL-WIN50:c:/autoval2/v2017.5-2017-10-03/win32-comp-ecom
Revision: [VCInfo] http://toolsvc/branches/release-branch-2017-5-comp/src@603870 (built by auto-compiler)
Revision Date: Wed Oct 04 11:30:08 2017

Release Date: Wed Oct 04 09:00:05 2017

                             1	#Driver Command: ccppc -DBRS_DERIVATIVE_SPC570S50 -DBRS_OSC_CLK=40
                             2	#		-DBRS_TIMEBASE_CLOCK=80 -DBRS_OS_USECASE_BRS
                             3	#		-DBRS_EVA_BOARD_DEFAULT -DBRS_PLATFORM_MPC57XX -DBRS_COMP_GHS
                             4	#		-DBRSHW_INSTRUCTION_SET_VLE -DBRS_CPU_STARTUP_ID=0
                             5	#		-object_dir=obj -list=lst/fbl_flio.lst -stderr=err/fbl_flio.err
                             6	#		-c -vle -DC_ENABLE_INSTRUCTION_SET_VLE -D__vle
                             7	#		--prototype_warnings -Odebug -Osize -Ospace -G -dual_debug
                             8	#		-nofloatio -cpu=ppc560xp -noobj -DRAM_48K -inline_prologue
                             9	#		-pragma_asm_inline -noSPE --no_exceptions --no_commons
                            10	#		-nokeeptempfiles -pnone --incorrect_pragma_warnings
                            11	#		--slash_comment --long_long -preprocess_assembly_files
                            12	#		-passsource -I../../../bsw/_common -I../../../bsw/eep
                            13	#		-I../../../bsw/fbl -I../../../bsw/flash -I../../../bsw/flash_xd1
                            14	#		-I../../../bsw/secmod -I../../../bsw/wrapnv
                            15	#		-Ic:/ghs/comp_201754/ansi -Ic:/ghs/comp_201754/include/ppc
                            16	#		-Ic:/ghs/comp_201754/src/libsys -Igendata -Iinclude
                            17	#		../../../BSW/Fbl/fbl_flio.c
                            18	#Source File:   ../../../BSW/Fbl/fbl_flio.c
                            19	#Directory:     C:\Vector\CBD1800772_D00_Mpc57xx\Demo\DemoFbl\Appl
                            20	#Compile Date:  Fri Apr 10 08:32:07 2020
                            21	#Host OS:       Win32
                            22	#Version:       C-POWERPC 2017.5.4 RELEASE VERSION
                            23	#Release:       Compiler v2017.5.4
                            24	#Revision Date: Wed Oct 04 11:39:37 2017
                            25	#Release Date:  Wed Oct 04 09:00:05 2017
                            26	# ecom  -g -w -OMS
                            27	
                            28	#1: /***********************************************************************************************************************
                            29	#2:  *  FILE DESCRIPTION
                            30	#3:  *  ------------------------------------------------------------------------------------------------------------------*/
                            31	#4: /** \file
                            32	#5:  *  \brief         Flash Driver wrapper for Freescale MPC57xx/ST SPC57x
                            33	#6:  *
                            34	#7:  *  --------------------------------------------------------------------------------------------------------------------
                            35	#8:  *  COPYRIGHT
                            36	#9:  *  --------------------------------------------------------------------------------------------------------------------
                            37	#10:  *  \par Copyright
                            38	#11:  *  \verbatim
                            39	#12:  *  Copyright (c) 2018 by Vector Informatik GmbH.                                                  All rights reserved.
                            40	#13:  *
                            41	#14:  *                This software is copyright protected and proprietary to Vector Informatik GmbH.
                            42	#15:  *                Vector Informatik GmbH grants to you only those rights as set out in the license conditions.

                                   Fri Apr 10 08:32:08 2020           Page 2
                                   Fri Apr 10 08:32:08 2020   gh_00002441.si
                            43	#16:  *                All other rights remain with Vector Informatik GmbH.
                            44	#17:  *  \endverbatim
                            45	#18:  */
                            46	#19: /**********************************************************************************************************************/
                            47	#21: /***********************************************************************************************************************
                            48	#22:  *  AUTHOR IDENTITY
                            49	#23:  *  --------------------------------------------------------------------------------------------------------------------
                            50	#24:  *  Name                          Initials      Company
                            51	#25:  *  --------------------------------------------------------------------------------------------------------------------
                            52	#26:  *  Achim Strobelt                Ach           Vector Informatik GmbH
                            53	#27:  *  Quetty Palacios               QPs           Vector Informatik GmbH
                            54	#28:  *  Marcel Viole                  MVi           Vector Informatik GmbH
                            55	#29:  *  Thomas Mueller                ThM           Vector Informatik GmbH
                            56	#30:  *  Marco Riedl                   Rie           Vector Informatik GmbH
                            57	#31:  *  Johannes Krimmel              KJs           Vector Informatik GmbH
                            58	#32:  *  Andreas Wenckebach            AWh           Vector Informatik GmbH
                            59	#33:  *  Dennis O'Donnell              Dod           Vector CANtech, Inc.
                            60	#34:  *  Matteo Trovo                  TMo           Vector Informatik GmbH
                            61	#35:  *  --------------------------------------------------------------------------------------------------------------------
                            62	#36:  *  REVISION HISTORY
                            63	#37:  *  --------------------------------------------------------------------------------------------------------------------
                            64	#38:  *  Version    Date        Author  Change Id        Description
                            65	#39:  *  --------------------------------------------------------------------------------------------------------------------
                            66	#40:  *  01.00.00   2013-07-05  Ach                      Initial version
                            67	#41:  *  01.01.00   2013-09-05  Ach     ESCAN00069405    Implement RCHW protection
                            68	#42:  *  01.02.00   2013-11-15  Ach     ESCAN00070397    Support second instance and data flash configuration
                            69	#43:  *  01.03.00   2014-02-28  QPs     ESCAN00073502    Support for MPC5748G derivative added
                            70	#44:  *                         MVi     ESCAN00073729    Added protection check for better error reporting
                            71	#45:  *  01.04.00   2014-05-09  Ach     ESCAN00075378    Support runtime selection of flash setup and MPC577xN/Cut 2
                            72	#46:  *  01.05.00   2014-05-13  Ach     ESCAN00075532    flashModuleSelect is not declared if flash setups are selected
                            73	#47:  *                                                   explicitly.
                            74	#48:  *  01.06.00   2014-07-17  Ach     ESCAN00075840    Support MPC577xC
                            75	#49:  *                                 ESCAN00075379    Move protection check to FblDrvFlash layer
                            76	#50:  *                                 ESCAN00076799    Add support for 577xM (Matterhorn)
                            77	#51:  *                                 ESCAN00076866    Writing of RCHWs cannot be enabled
                            78	#52:  *  01.07.00   2014-12-11  Ach     ESCAN00079411    Support SPC570S
                            79	#53:  *  01.08.00   2015-04-24  Ach     ESCAN00082598    Added FBL_ prefix to definitions
                            80	#54:  *  01.09.00   2016-01-26  Ach     ESCAN00083952    Compiler warning: Variable currentAddress is used before set
                            81	#55:  *                                 ESCAN00087630    Compiler warning: Variable "i" was declared but never referenced
                            82	#56:  *  01.10.00   2016-02-04  CB      ESCAN00088086    Added flash setup 7 for S32R
                            83	#57:  *  01.11.00   2016-03-23  ThM     ESCAN00089067    Added flash setup 8 for MPC574xK
                            84	#58:  *  01.12.00   2016-04-08  Rie     ESCAN00089146    Extended RCHW addresses for flash setup 2 for MPC5748G CUT2 (Calypso)
                            85	#59:  *                         KJs     ESCAN00089320    Support SPC58EC80/70
                            86	#60:  *  01.12.01   2016-05-02  Ach     ESCAN00089762    Do not accept RCHW write accesses with boot ID 0xA5
                            87	#61:  *  01.13.00   2016-06-23  Ach     ESCAN00090632    Support SPC582B60
                            88	#62:  *  01.14.00   2016-08-31  QPs     ESCAN00091686    Erase bit of flash block 3 for SPC58xx corrected
                            89	#63:  *                                 ESCAN00091702    Extension of block table to support memory partition 4 for SPC58XX
                            90	#64:  *  01.15.00   2016-12-10  Ach     ESCAN00093246    Rename defines to avoid collisions with MCAL
                            91	#65:  *  01.16.00   2017-03-16  Ach     ESCAN00094392    Move include of FlashRom image to header file
                            92	#66:  *  01.17.00   2017-04-03  Dod     ESCAN00094600    Support SPC58NE84
                            93	#67:  *  01.18.00   2017-04-13  Ach     ESCAN00094776    Support SPC574S (Flash Setup 10)
                            94	#68:  *  01.19.00   2017-08-12  Ach     ESCAN00096281    Support generic ECC safe read configuration switch
                            95	#69:  *  01.20.00   2017-11-08  Ach     ESCAN00096480    Support MPC5746R (Flash Setup 12)
                            96	#70:  *  01.21.00   2018-05-18  Ach     ESCAN00099445    Support SPC584B70 (Flash Setup 13)
                            97	#71:  *  01.21.01   2018-09-14  AWh     ESCAN00100743    FLASH_DRIVER_DEINIT is called unconditionally
                            98	#72:  *  01.21.02   2018-10-25  TMo     ESCAN00100923    Fixed SPC584B70 (Flash Setup 13)

                                   Fri Apr 10 08:32:08 2020           Page 3
                                   Fri Apr 10 08:32:08 2020   gh_00002441.si
                            99	#73:  **********************************************************************************************************************/
                           100	#75: /***********************************************************************************************************************
                           101	#76:  *  INCLUDES
                           102	#77:  **********************************************************************************************************************/
                           103	#79: #include "fbl_inc.h"
                           104	#81: /***********************************************************************************************************************
                           105	#82:  *  VERSION
                           106	#83:  **********************************************************************************************************************/
                           107	#85: #if ( FBLWRAPPERFLASH_MPC5700C55FMCHIS_VERSION != 0x0121u ) || \
                           108	#86:     ( FBLWRAPPERFLASH_MPC5700C55FMCHIS_RELEASE_VERSION != 0x02u )
                           109	#87: # error "Error in fbl_flio.c: Source and header file are inconsistent!"
                           110	#88: #endif
                           111	#89: #if ( FBLWRAPPERFLASH_MPC5700C55FMCHIS_VERSION != _FBLWRAPPERFLASH_HW_VERSION ) || \
                           112	#90:     ( FBLWRAPPERFLASH_MPC5700C55FMCHIS_RELEASE_VERSION != _FBLWRAPPERFLASH_HW_RELEASE_VERSION )
                           113	#91: # error "Error in fbl_flio.c: Source and v_ver.h are inconsistent!"
                           114	#92: #endif
                           115	#93: #if ( FBLDRVFLASH_MPC5700C55FMCHIS_VERSION < 0x0105u )
                           116	#94: # error "Error in fbl_flio.c: Incompatible FblDrvFlash used."
                           117	#95: #endif
                           118	#97: /***********************************************************************************************************************
                           119	#98:  *  DEFINES
                           120	#99:  **********************************************************************************************************************/
                           121	#101: /* Configuration options */
                           122	#102: #define kFblFlashSelectionAtRuntime -1
                           123	#104: /* Configure available flash setups */
                           124	#105: #if defined( FLASH_SETUP )
                           125	#106: # if( FLASH_SETUP == 0 )
                           126	#107: #  define FLASH_SETUP_0
                           127	#108: # elif( FLASH_SETUP == 1 )
                           128	#109: #  define FLASH_SETUP_1
                           129	#110: # elif( FLASH_SETUP == 2 )
                           130	#111: #  define FLASH_SETUP_2
                           131	#112: # elif( FLASH_SETUP == 3 )
                           132	#113: #  define FLASH_SETUP_3
                           133	#114: # elif( FLASH_SETUP == 4 )
                           134	#115: #  define FLASH_SETUP_4
                           135	#116: # elif( FLASH_SETUP == 5 )
                           136	#117: #  define FLASH_SETUP_5
                           137	#118: # elif( FLASH_SETUP == 6 )
                           138	#119: #  define FLASH_SETUP_6
                           139	#120: # elif( FLASH_SETUP == 7 )
                           140	#121: #  define FLASH_SETUP_7
                           141	#122: # elif( FLASH_SETUP == 8 )
                           142	#123: #  define FLASH_SETUP_8
                           143	#124: # elif( FLASH_SETUP == 9 )
                           144	#125: #  define FLASH_SETUP_9
                           145	#126: # elif( FLASH_SETUP == 10)
                           146	#127: #  define FLASH_SETUP_10
                           147	#128: # elif( FLASH_SETUP == 11)
                           148	#129: #  define FLASH_SETUP_11
                           149	#130: # elif( FLASH_SETUP == 12)
                           150	#131: #  define FLASH_SETUP_12
                           151	#132: # elif( FLASH_SETUP == 13)
                           152	#133: #  define FLASH_SETUP_13
                           153	#134: # elif( FLASH_SETUP == kFblFlashSelectionAtRuntime )
                           154	#135: #  define FLASH_SETUP_0

                                   Fri Apr 10 08:32:08 2020           Page 4
                                   Fri Apr 10 08:32:08 2020   gh_00002441.si
                           155	#136: #  define FLASH_SETUP_1
                           156	#137: #  define FLASH_SETUP_2
                           157	#138: #  define FLASH_SETUP_3
                           158	#139: #  define FLASH_SETUP_4
                           159	#140: #  define FLASH_SETUP_5
                           160	#141: #  define FLASH_SETUP_6
                           161	#142: #  define FLASH_SETUP_7
                           162	#143: #  define FLASH_SETUP_8
                           163	#144: #  define FLASH_SETUP_9
                           164	#145: #  define FLASH_SETUP_10
                           165	#146: #  define FLASH_SETUP_11
                           166	#147: #  define FLASH_SETUP_12
                           167	#148: #  define FLASH_SETUP_13
                           168	#149: #  define FLASH_SETUP_RUNTIME
                           169	#150: # else
                           170	#151: #  error "Please choose a known flash setup."
                           171	#152: # endif
                           172	#153: #else
                           173	#154: # error "Please choose a flash setup."
                           174	#155: #endif /* FLASH_SETUP */
                           175	#157: #if defined( FBL_ENABLE_USR_RREAD_SYNC )
                           176	#158: #else
                           177	#159: /* Compatibility switch for GENy */
                           178	#160: # if defined( FBL_ENABLE_DMA_FLASH_READ )
                           179	#161: #  define FBL_FLASH_ENABLE_ECC_SAFE_READ
                           180	#162: # endif /* FBL_ENABLE_DMA_FLASH_READ */
                           181	#164: # if defined( FBL_FLASH_ENABLE_ECC_SAFE_READ )
                           182	#165: #  define FBL_EDMA_CSR_START  0x0001u
                           183	#166: #  define FBL_EDMA_CSR_ACTIVE 0x0040u
                           184	#167: #  define FBL_EDMA_CSR_DONE   0x0080u
                           185	#168: #  if defined( FLASH_DMA_CHANNEL )
                           186	#169: #  else
                           187	#170: #   define FLASH_DMA_CHANNEL 0u
                           188	#171: #  endif
                           189	#172: # endif /* FBL_FLASH_ENABLE_ECC_SAFE_READ */
                           190	#173: #endif /* FBL_ENABLE_USR_RREAD_SYNC */
                           191	#175: /* Set default RCHW handling if not explicitly requested */
                           192	#176: #if defined( FBL_ENABLE_WRITE_RCHW ) || \
                           193	#177:     defined( FBL_DISABLE_WRITE_RCHW )
                           194	#178: #else
                           195	#179: # define FBL_DISABLE_WRITE_RCHW
                           196	#180: #endif
                           197	#182: /* Flash module register access macros */
                           198	#183: /** Access special function register of a flash module */ /* PRQA S 3453 1 */ /* MD_MSR_19.7 */
                           199	#184: #define FLASH_REG(a, b) *(volatile unsigned long *)((a) + (b))
                           200	#186: /* Macro to calculate array sizes */ /* PRQA S 3453 1 */ /* MD_MSR_19.7 */
                           201	#187: #define ARRAY_SIZE(a)  (sizeof(a)/sizeof((a)[0]))
                           202	#189: /* Block mask indices */
                           203	#190: #define kFlashSelectLowMid          0u             /**< Block mask index low/mid blocks */
                           204	#191: #define kFlashSelectHigh            1u             /**< Block mask index high blocks */
                           205	#192: #define kFlashSelectBig_0           2u             /**< Block mask index big blocks - first part */
                           206	#193: #define kFlashSelectBig_1           3u             /**< Block mask index big blocks - second part */
                           207	#194: #define kFlashSelectCount           4u             /**< Total count of block indices */
                           208	#196: #define kFlashAlignmentError        0x00ul         /**< Report alignment error */
                           209	#197: #define kFlashEraseAddressAligned   0x01ul         /**< Erase address aligned */
                           210	#198: #define kFlashEraseLengthAligned    0x02ul         /**< Erase length aligned */

                                   Fri Apr 10 08:32:08 2020           Page 5
                                   Fri Apr 10 08:32:08 2020   gh_00002441.si
                           211	#199: #define kFlashWriteAddressAligned   0x04ul         /**< Write address aligned */
                           212	#200: #define kFlashWriteLengthAligned    0x08ul         /**< Write length aligned */
                           213	#202: #define kFlashCheckAddress          0u             /**< Check state: Address */
                           214	#203: #define kFlashCheckLength           1u             /**< Check state: Length */
                           215	#204: #define kFlashStopCheck             2u             /**< Check state: Succeeded or Failed */
                           216	#206: #define kRchwMask                   0x00FF0000ul   /**< Mask of Boot ID in RCHW */
                           217	#207: #define kNrOfRchwValues             2u             /**< Number of known RCHW boot IDs */
                           218	#209: /* Size optimization if only one flash setup is used */
                           219	#210: #if defined( FLASH_SETUP_RUNTIME )
                           220	#211: #else
                           221	#212: # define kFblSingleFlashModule 0u
                           222	#213: #endif /* FLASH_SETUP_RUNTIME */
                           223	#215: /***********************************************************************************************************************
                           224	#216:  *  LOCAL DATA TYPES AND STRUCTURES
                           225	#217:  **********************************************************************************************************************/
                           226	#219: /** Describes one physical flash block */
                           227	#220: typedef struct tagC55fmcFlashBlock
                           228	#221: {
                           229	#222:    vuint32 startAddress;   /**< Start address of flash block */
                           230	#223:    vuint32 length;         /**< Length of flash block */
                           231	#224:    vuint32 count;          /**< Count of same flash blocks */
                           232	#225:    vuint32 bitMaskStart;   /**< Erase bit of flash block */
                           233	#226:    vuint32 bitMaskIndex;   /**< Bit mask selector */
                           234	#227: } tC55fmcFlashBlock;
                           235	#229: /** Describes one embedded flash memory module */
                           236	#230: typedef struct tagC55fmcFlashModule
                           237	#231: {
                           238	#232:    V_MEMROM1 tC55fmcFlashBlock V_MEMROM2 V_MEMROM3 * flashBlocks;    /**< Flash blocks assigned to flash module */
                           239	#233:    vuint32 flashBlockCount;                                          /**< Count of flash blocks */
                           240	#234:    vuint32 flashBaseAddress;                                         /**< Register base address */
                           241	#235:    vuint32 flashBigBlockSize;                                        /**< Size of big flash blocks (256K or 128K address space) */
                           242	#236:    vuint32 flashBigBlockFactor;                                      /**< Multiplication of big block count register value */
                           243	#237:    vuint32 flashSelectCount;                                         /**< Number of select registers */
                           244	#238:    V_MEMROM1 vuint32 V_MEMROM2 V_MEMROM3 * userProtectionBits;       /**< User protection bits of current flash module */
                           245	#239: #if defined( FBL_ENABLE_WRITE_RCHW )
                           246	#240: #else
                           247	#241:    V_MEMROM1 vuint32 V_MEMROM2 V_MEMROM3 * rchwPositions;            /**< Reset configuration halfword positions */
                           248	#242:    vuint32 rchwPositionCount;                                        /**< Number of RCHW start addresses */
                           249	#243: #endif /* FBL_ENABLE_WRITE_RCHW */
                           250	#244: } tC55fmcFlashModule;
                           251	#246: /***********************************************************************************************************************
                           252	#247:  *  GLOBAL DATA
                           253	#248:  **********************************************************************************************************************/
                           254	#250: # define FBLFLIO_FLASHCODE_START_SEC_VAR
                           255	#251: # include "MemMap.h"  /* PRQA S 5087 */ /* MD_MSR_19.1 */
                           256	#252: V_MEMRAM0 V_MEMRAM1 vuint8 V_MEMRAM2 flashCode[FLASH_SIZE];
                           257	#253: # define FBLFLIO_FLASHCODE_STOP_SEC_VAR
                           258	#254: # include "MemMap.h"  /* PRQA S 5087 */ /* MD_MSR_19.1 */
                           259	#256: /***********************************************************************************************************************
                           260	#257:  *  LOCAL DATA
                           261	#258:  **********************************************************************************************************************/
                           262	#260: /** Flash parameter structure - used to exchange data with flash driver */
                           263	#261: V_MEMRAM0 static V_MEMRAM1 tFlashParam V_MEMRAM2 flashParam;
                           264	#263: /** Known RCHW marker values */
                           265	#264: V_MEMROM0 static V_MEMROM1 vuint32 V_MEMROM2 rchwValues[kNrOfRchwValues] = {0x005A0000ul, 0x00A50000ul};
                           266	#266: /* Flash module setups - derivative specific */

                                   Fri Apr 10 08:32:08 2020           Page 6
                                   Fri Apr 10 08:32:08 2020   gh_00002441.si
                           267	#267: #if defined( FLASH_SETUP_0 )
                           268	#268: /* Basic flash setup used by e.g. 5744P, 577xN Cut 1 */
                           269	#269: V_MEMROM0 static V_MEMROM1 tC55fmcFlashBlock V_MEMROM2 flashBlocks_0[] =
                           270	#270: {
                           271	#271:    {0x00800000ul, 0x00004000ul,  2ul, 0x00010000ul, kFlashSelectLowMid},   /*  16K *  2, Low Address space */
                           272	#272:    {0x00808000ul, 0x00008000ul,  2ul, 0x00000001ul, kFlashSelectLowMid},   /*  32K *  2, Mid Address space */
                           273	#273:    {0x00F98000ul, 0x00004000ul,  2ul, 0x00040000ul, kFlashSelectLowMid},   /*  16K *  2, Low Address space */
                           274	#274:    {0x00FA0000ul, 0x00010000ul,  6ul, 0x00000001ul, kFlashSelectHigh},     /*  64K *  6, High Address space */
                           275	#275:    {0x01000000ul, 0x00040000ul, 32ul, 0x00000001ul, kFlashSelectBig_0},    /* 256K * 32, 256K Address space */
                           276	#276:    {0x01800000ul, 0x00040000ul, 16ul, 0x00000001ul, kFlashSelectBig_1}     /* 256K * 16, 256K Address space */
                           277	#277: };
                           278	#278: # if defined( FBL_ENABLE_WRITE_RCHW )
                           279	#279: # else
                           280	#280: /* RCHW addresses */
                           281	#281: V_MEMROM0 static V_MEMROM1 vuint32 V_MEMROM2 rchwPositions_0[] =
                           282	#282: {
                           283	#283:    0x00F98000ul, 0x00F9C000ul, 0x00FA0000ul, 0x00FB0000ul,
                           284	#284:    0x01000000ul, 0x01040000ul, 0x01080000ul, 0x010C0000ul
                           285	#285: };
                           286	#286: # endif /* FBL_ENABLE_WRITE_RCHW */
                           287	#287: #  if defined( FLASH_USER_PROTECTION_0 )
                           288	#288: #  else
                           289	#289: #   define FLASH_USER_PROTECTION_0 { 0x00000000ul, 0x00000000ul, 0x00000000ul, 0x00000000ul }
                           290	#290: #  endif /* FLASH_USER_PROTECTION_0 */
                           291	#292: /* Flash module settings */
                           292	#293: V_MEMROM0 static V_MEMROM1 vuint32 V_MEMROM2 flash_user_protection_0[4u] = FLASH_USER_PROTECTION_0;
                           293	#294: V_MEMROM0 static V_MEMROM1 tC55fmcFlashModule V_MEMROM2 flashModule_0 = { flashBlocks_0,
                           294	#295:                                                                           ARRAY_SIZE(flashBlocks_0),
                           295	#296:                                                                           FBL_FLASH_REG_0,
                           296	#297:                                                                           0x40000ul,
                           297	#298:                                                                           2ul,
                           298	#299:                                                                           4ul,
                           299	#300:                                                                           flash_user_protection_0,
                           300	#301: # if defined( FBL_ENABLE_WRITE_RCHW )
                           301	#302: # else
                           302	#303:                                                                           rchwPositions_0,
                           303	#304:                                                                           ARRAY_SIZE(rchwPositions_0)
                           304	#305: # endif /* FBL_ENABLE_WRITE_RCHW */
                           305	#306:                                                                          };
                           306	#307: #endif /* FLASH_SETUP_0 */
                           307	#308: #if defined( FLASH_SETUP_1 )
                           308	#309: /* Flash setup used by first 5744P samples - second 16K data flash block missing (e5076) */
                           309	#310: V_MEMROM0 static V_MEMROM1 tC55fmcFlashBlock V_MEMROM2 flashBlocks_1[] =
                           310	#311: {
                           311	#312:    {0x00800000ul, 0x00004000ul,  1ul, 0x00010000ul, kFlashSelectLowMid},   /*  16K *  1, Low Address space - second block missing due to e5076 */
                           312	#313:    {0x00804000ul, 0x00008000ul,  2ul, 0x00000001ul, kFlashSelectLowMid},   /*  32K *  2, Mid Address space */
                           313	#314:    {0x00F98000ul, 0x00004000ul,  2ul, 0x00040000ul, kFlashSelectLowMid},   /*  16K *  2, Low Address space */
                           314	#315:    {0x00FA0000ul, 0x00010000ul,  6ul, 0x00000001ul, kFlashSelectHigh},     /*  64K *  6, High Address space */
                           315	#316:    {0x01000000ul, 0x00040000ul, 32ul, 0x00000001ul, kFlashSelectBig_0},    /* 256K * 32, 256K Address space */
                           316	#317:    {0x01800000ul, 0x00040000ul, 16ul, 0x00000001ul, kFlashSelectBig_1}     /* 256K * 16, 256K Address space */
                           317	#318: };
                           318	#319: # if defined( FBL_ENABLE_WRITE_RCHW )
                           319	#320: # else
                           320	#321: /* RCHW addresses */
                           321	#322: V_MEMROM0 static V_MEMROM1 vuint32 V_MEMROM2 rchwPositions_1[] =
                           322	#323: {

                                   Fri Apr 10 08:32:08 2020           Page 7
                                   Fri Apr 10 08:32:08 2020   gh_00002441.si
                           323	#324:    0x00F98000ul, 0x00F9C000ul, 0x00FA0000ul, 0x00FB0000ul,
                           324	#325:    0x01000000ul, 0x01040000ul, 0x01080000ul, 0x010C0000ul
                           325	#326: };
                           326	#327: # endif /* FBL_ENABLE_WRITE_RCHW */
                           327	#328: #  if defined( FLASH_USER_PROTECTION_1 )
                           328	#329: #  else
                           329	#330: #   define FLASH_USER_PROTECTION_1 { 0x00000000ul, 0x00000000ul, 0x00000000ul, 0x00000000ul }
                           330	#331: #  endif /* FLASH_USER_PROTECTION_1 */
                           331	#333: /* Flash module settings */
                           332	#334: V_MEMROM0 static V_MEMROM1 vuint32 V_MEMROM2 flash_user_protection_1[4u] = FLASH_USER_PROTECTION_1;
                           333	#335: V_MEMROM0 static V_MEMROM1 tC55fmcFlashModule V_MEMROM2 flashModule_1 = { flashBlocks_1,
                           334	#336:                                                                           ARRAY_SIZE(flashBlocks_1),
                           335	#337:                                                                           FBL_FLASH_REG_0,
                           336	#338:                                                                           0x40000ul,
                           337	#339:                                                                           2ul,
                           338	#340:                                                                           4ul,
                           339	#341:                                                                           flash_user_protection_1,
                           340	#342: # if defined( FBL_ENABLE_WRITE_RCHW )
                           341	#343: # else
                           342	#344:                                                                           rchwPositions_1,
                           343	#345:                                                                           ARRAY_SIZE(rchwPositions_1)
                           344	#346: # endif /* FBL_ENABLE_WRITE_RCHW */
                           345	#347:                                                                          };
                           346	#348: #endif /* FLASH_SETUP_1 */
                           347	#349: #if defined( FLASH_SETUP_2 )
                           348	#350: /* Flash setup used by 574xG samples */
                           349	#351: V_MEMROM0 static V_MEMROM1 tC55fmcFlashBlock V_MEMROM2 flashBlocks_2[] =
                           350	#352: {
                           351	#353:    {0x00400000ul, 0x00004000ul,  1ul, 0x80000000ul, kFlashSelectLowMid},   /*  16K *  1, UTest NVM Block */
                           352	#354:    {0x00404000ul, 0x00004000ul,  1ul, 0x00020000ul, kFlashSelectLowMid},   /*  16K *  1, BAF Block */
                           353	#355:    {0x00610000ul, 0x00010000ul,  1ul, 0x00800000ul, kFlashSelectLowMid},   /*  64K *  1, HSM Code Block 2 */
                           354	#356:    {0x00620000ul, 0x00010000ul,  1ul, 0x02000000ul, kFlashSelectLowMid},   /*  64K *  1, HSM Code Block 3 */
                           355	#357:    {0x00F80000ul, 0x00004000ul,  2ul, 0x00000001ul, kFlashSelectHigh},     /*  16K *  2, HSM Data */
                           356	#358:    {0x00F8C000ul, 0x00004000ul,  1ul, 0x00010000ul, kFlashSelectLowMid},   /*  16K *  1, Low Address space */
                           357	#359:    {0x00F90000ul, 0x00004000ul,  8ul, 0x00000001ul, kFlashSelectLowMid},   /*  16K *  8, Mid Address space */
                           358	#360:    {0x00FB0000ul, 0x00008000ul,  2ul, 0x00000100ul, kFlashSelectLowMid},   /*  32K *  2, Mid Address space */
                           359	#361:    {0x00FC0000ul, 0x00008000ul,  4ul, 0x00040000ul, kFlashSelectLowMid},   /*  32K *  4, Low Address space */
                           360	#362:    {0x00FE0000ul, 0x00010000ul,  1ul, 0x00400000ul, kFlashSelectLowMid},   /*  64K *  1, Low Address space */
                           361	#363:    {0x00FF0000ul, 0x00010000ul,  1ul, 0x01000000ul, kFlashSelectLowMid},   /*  64K *  1, Low Address space */
                           362	#364:    {0x01000000ul, 0x00040000ul, 32ul, 0x00000001ul, kFlashSelectBig_0},    /* 256K * 32, 256K Address space */
                           363	#365:    {0x01800000ul, 0x00040000ul, 16ul, 0x00000001ul, kFlashSelectBig_1}     /* 256K * 16, 256K Address space */
                           364	#366: };
                           365	#367: # if defined( FBL_ENABLE_WRITE_RCHW )
                           366	#368: # else
                           367	#369: /* RCHW addresses */
                           368	#370: V_MEMROM0 static V_MEMROM1 vuint32 V_MEMROM2 rchwPositions_2[] =
                           369	#371: {
                           370	#372:    0x00F8C000ul, 0x00F90000ul, 0x00F94000ul, 0x00F98000ul,
                           371	#373:    0x00F9C000ul, 0x00FA0000ul, 0x00FA4000ul, 0x00FA8000ul,
                           372	#374:    0x00FC0000ul, 0x00FD8000ul, 0x00FE0000ul
                           373	#375: };
                           374	#376: # endif /* FBL_ENABLE_WRITE_RCHW */
                           375	#377: #  if defined( FLASH_USER_PROTECTION_2 )
                           376	#378: #  else
                           377	#379: #   define FLASH_USER_PROTECTION_2 { 0x80020000ul, 0x00000000ul, 0x00000000ul, 0x00000000ul }
                           378	#380: #  endif /* FLASH_USER_PROTECTION_2 */

                                   Fri Apr 10 08:32:08 2020           Page 8
                                   Fri Apr 10 08:32:08 2020   gh_00002441.si
                           379	#381: /* Flash module settings */
                           380	#382: V_MEMROM0 static V_MEMROM1 vuint32 V_MEMROM2 flash_user_protection_2[4u] = FLASH_USER_PROTECTION_2;
                           381	#383: V_MEMROM0 static V_MEMROM1 tC55fmcFlashModule V_MEMROM2 flashModule_2 = { flashBlocks_2,
                           382	#384:                                                                           ARRAY_SIZE(flashBlocks_2),
                           383	#385:                                                                           FBL_FLASH_REG_0,
                           384	#386:                                                                           0x40000ul,
                           385	#387:                                                                           2ul,
                           386	#388:                                                                           4ul,
                           387	#389:                                                                           flash_user_protection_2,
                           388	#390: # if defined( FBL_ENABLE_WRITE_RCHW )
                           389	#391: # else
                           390	#392:                                                                           rchwPositions_2,
                           391	#393:                                                                           ARRAY_SIZE(rchwPositions_2)
                           392	#394: # endif /* FBL_ENABLE_WRITE_RCHW */
                           393	#395:                                                                          };
                           394	#396: #endif /* FLASH_SETUP_2 */
                           395	#397: #if defined( FLASH_SETUP_3 )
                           396	#398: /* Flash setup used by 577xN/Cut2 samples */
                           397	#399: V_MEMROM0 static V_MEMROM1 tC55fmcFlashBlock V_MEMROM2 flashBlocks_3[] =
                           398	#400: {
                           399	#401:    {0x00800000ul, 0x00004000ul,  2ul, 0x00010000ul, kFlashSelectLowMid},   /*  16K * 2, eeprom block 0-1 */
                           400	#402:    {0x00808000ul, 0x00008000ul,  2ul, 0x00040000ul, kFlashSelectLowMid},   /*  32K * 2, eeprom block 2-3 */
                           401	#403:    {0x00F98000ul, 0x00004000ul,  2ul, 0x00000001ul, kFlashSelectLowMid},   /*  16K * 2, Mid Address space */
                           402	#404:    {0x00FA0000ul, 0x00010000ul,  6ul, 0x00000004ul, kFlashSelectLowMid},   /*  64K * 6, Mid Address space */
                           403	#405:    {0x01000000ul, 0x00040000ul, 32ul, 0x00000001ul, kFlashSelectBig_0},    /* 256K * 32, 256K Address space */
                           404	#406:    {0x01800000ul, 0x00040000ul, 16ul, 0x00000001ul, kFlashSelectBig_1}     /* 256K * 16, 256K Address space */
                           405	#407: };
                           406	#408: # if defined( FBL_ENABLE_WRITE_RCHW )
                           407	#409: # else
                           408	#410: /* RCHW addresses */
                           409	#411: V_MEMROM0 static V_MEMROM1 vuint32 V_MEMROM2 rchwPositions_3[] =
                           410	#412: {
                           411	#413:    0x00F98000ul, 0x00F9C000ul, 0x00FA0000ul, 0x00FB0000ul,
                           412	#414:    0x01000000ul, 0x01040000ul, 0x01080000ul, 0x010C0000ul
                           413	#415: };
                           414	#416: # endif /* FBL_ENABLE_WRITE_RCHW */
                           415	#417: #  if defined( FLASH_USER_PROTECTION_3 )
                           416	#418: #  else
                           417	#419: #   define FLASH_USER_PROTECTION_3 { 0x00000000ul, 0x00000000ul, 0x00000000ul, 0x00000000ul }
                           418	#420: #  endif /* FLASH_USER_PROTECTION_3 */
                           419	#421: /* Flash module settings */
                           420	#422: V_MEMROM0 static V_MEMROM1 vuint32 V_MEMROM2 flash_user_protection_3[4u] = FLASH_USER_PROTECTION_3;
                           421	#423: V_MEMROM0 static V_MEMROM1 tC55fmcFlashModule V_MEMROM2 flashModule_3 = { flashBlocks_3,
                           422	#424:                                                                           ARRAY_SIZE(flashBlocks_3),
                           423	#425:                                                                           FBL_FLASH_REG_0,
                           424	#426:                                                                           0x40000ul,
                           425	#427:                                                                           2ul,
                           426	#428:                                                                           4ul,
                           427	#429:                                                                           flash_user_protection_3,
                           428	#430: # if defined( FBL_ENABLE_WRITE_RCHW )
                           429	#431: # else
                           430	#432:                                                                           rchwPositions_3,
                           431	#433:                                                                           ARRAY_SIZE(rchwPositions_3)
                           432	#434: # endif /* FBL_ENABLE_WRITE_RCHW */
                           433	#435:                                                                          };
                           434	#436: #endif /* FLASH_SETUP_3 */

                                   Fri Apr 10 08:32:08 2020           Page 9
                                   Fri Apr 10 08:32:08 2020   gh_00002441.si
                           435	#437: #if defined( FLASH_SETUP_4 )
                           436	#438: /* Flash setup used by 577xC samples */
                           437	#439: V_MEMROM0 static V_MEMROM1 tC55fmcFlashBlock V_MEMROM2 flashBlocks_4[] =
                           438	#440: {
                           439	#441:    {0x00000000ul, 0x00010000ul,  2ul, 0x00010000ul, kFlashSelectLowMid},   /*  64K * 2, Eeprom Data Block 0-1 */
                           440	#442:    {0x00020000ul, 0x00010000ul,  2ul, 0x00000001ul, kFlashSelectLowMid},   /*  64K * 2, Eeprom Data Block 2-3 */
                           441	#443:    {0x00600000ul, 0x00004000ul,  2ul, 0x00000001ul, kFlashSelectHigh},     /*  16K * 2, CSE Data Block 0-1 */
                           442	#444:    {0x00800000ul, 0x00040000ul, 32ul, 0x00000001ul, kFlashSelectBig_0}     /* 256K * 32, 256K Address space */
                           443	#445: };
                           444	#446: # if defined( FBL_ENABLE_WRITE_RCHW )
                           445	#447: # else
                           446	#448: /* RCHW addresses */
                           447	#449: V_MEMROM0 static V_MEMROM1 vuint32 V_MEMROM2 rchwPositions_4[] =
                           448	#450: {
                           449	#451:    0x00000000ul, 0x00010000ul, 0x00020000ul, 0x00030000ul, 0x00800000ul
                           450	#452: };
                           451	#453: # endif /* FBL_ENABLE_WRITE_RCHW */
                           452	#454: #  if defined( FLASH_USER_PROTECTION_4 )
                           453	#455: #  else
                           454	#456: #   define FLASH_USER_PROTECTION_4 { 0x00000000ul, 0x00000000ul, 0x00000000ul, 0xFFFFFFFFul }
                           455	#457: #  endif /* FLASH_USER_PROTECTION_4 */
                           456	#458: /* Flash module settings */
                           457	#459: V_MEMROM0 static V_MEMROM1 vuint32 V_MEMROM2 flash_user_protection_4[4u] = FLASH_USER_PROTECTION_4;
                           458	#460: V_MEMROM0 static V_MEMROM1 tC55fmcFlashModule V_MEMROM2 flashModule_4 = { flashBlocks_4,
                           459	#461:                                                                           ARRAY_SIZE(flashBlocks_4),
                           460	#462:                                                                           FBL_FLASH_REG_0,
                           461	#463:                                                                           0x40000ul,
                           462	#464:                                                                           2ul,
                           463	#465:                                                                           3ul,
                           464	#466:                                                                           flash_user_protection_4,
                           465	#467: # if defined( FBL_ENABLE_WRITE_RCHW )
                           466	#468: # else
                           467	#469:                                                                           rchwPositions_4,
                           468	#470:                                                                           ARRAY_SIZE(rchwPositions_4)
                           469	#471: # endif /* FBL_ENABLE_WRITE_RCHW */
                           470	#472:                                                                          };
                           471	#473: #endif /* FLASH_SETUP_4 */
                           472	#474: #if defined( FLASH_SETUP_5 )
                           473	#475: /* Flash setup used by 577xM samples */
                           474	#476: V_MEMROM0 static V_MEMROM1 tC55fmcFlashBlock V_MEMROM2 flashBlocks_5[] =
                           475	#477: {
                           476	#478:    {0x00400000ul, 0x00004000ul,  1ul, 0x80000000ul, kFlashSelectLowMid},   /*  16K *  1, UTest NVM Block */
                           477	#479:    {0x00404000ul, 0x00004000ul,  1ul, 0x00010000ul, kFlashSelectLowMid},   /*  16K *  1, BAF Block */
                           478	#480:    {0x0060C000ul, 0x00004000ul,  1ul, 0x00200000ul, kFlashSelectLowMid},   /*  16K *  1, 1 * 16 KB secure code flash */
                           479	#481:    {0x00610000ul, 0x00010000ul,  2ul, 0x04000000ul, kFlashSelectLowMid},   /*  64K *  1, HSM Code Block 2, 3 */
                           480	#482:    {0x00680000ul, 0x00004000ul,  2ul, 0x00000001ul, kFlashSelectLowMid},   /*  16K *  2, HSM Data */
                           481	#483:    {0x00800000ul, 0x00010000ul,  8ul, 0x00000001ul, kFlashSelectHigh},     /*  64K *  8, Data Flash (Eeprom) */
                           482	#484:    {0x00FC0000ul, 0x00004000ul,  4ul, 0x00020000ul, kFlashSelectLowMid},   /*  16K *  4, Low Address space */
                           483	#485:    {0x00FD0000ul, 0x00008000ul,  2ul, 0x00400000ul, kFlashSelectLowMid},   /*  32K *  2, Low Address space */
                           484	#486:    {0x00FE0000ul, 0x00010000ul,  2ul, 0x01000000ul, kFlashSelectLowMid},   /*  64K *  2, Low Address space */
                           485	#487:    {0x01000000ul, 0x00040000ul, 32ul, 0x00000001ul, kFlashSelectBig_0},    /* 256K * 32, 256K Address space */
                           486	#488:    {0x01800000ul, 0x00040000ul, 16ul, 0x00000001ul, kFlashSelectBig_1}     /* 256K * 16, 256K Address space */
                           487	#489: };
                           488	#490: # if defined( FBL_ENABLE_WRITE_RCHW )
                           489	#491: # else
                           490	#492: /* RCHW addresses */

                                   Fri Apr 10 08:32:08 2020           Page 10
                                   Fri Apr 10 08:32:08 2020   gh_00002441.si
                           491	#493: V_MEMROM0 static V_MEMROM1 vuint32 V_MEMROM2 rchwPositions_5[] =
                           492	#494: {
                           493	#495:    0x00FC0000ul, 0x00FC4000ul, 0x00FC8000ul, 0x00FCC000ul,
                           494	#496:    0x01000000ul, 0x01040000ul, 0x01080000ul, 0x010C0000ul
                           495	#497: };
                           496	#498: # endif /* FBL_ENABLE_WRITE_RCHW */
                           497	#499: #  if defined( FLASH_USER_PROTECTION_5 )
                           498	#500: #  else
                           499	#501: #   define FLASH_USER_PROTECTION_5 { 0x80010000ul, 0x00000000ul, 0x00000000ul, 0x00000000ul }
                           500	#502: #  endif /* FLASH_USER_PROTECTION_5 */
                           501	#503: /* Flash module settings */
                           502	#504: V_MEMROM0 static V_MEMROM1 vuint32 V_MEMROM2 flash_user_protection_5[4u] = FLASH_USER_PROTECTION_5;
                           503	#505: V_MEMROM0 static V_MEMROM1 tC55fmcFlashModule V_MEMROM2 flashModule_5 = { flashBlocks_5,
                           504	#506:                                                                           ARRAY_SIZE(flashBlocks_5),
                           505	#507:                                                                           FBL_FLASH_REG_0,
                           506	#508:                                                                           0x40000ul,
                           507	#509:                                                                           2ul,
                           508	#510:                                                                           4ul,
                           509	#511:                                                                           flash_user_protection_5,
                           510	#512: # if defined( FBL_ENABLE_WRITE_RCHW )
                           511	#513: # else
                           512	#514:                                                                           rchwPositions_5,
                           513	#515:                                                                           ARRAY_SIZE(rchwPositions_5)
                           514	#516: # endif /* FBL_ENABLE_WRITE_RCHW */
                           515	#517:                                                                          };
                           516	#518: #endif /* FLASH_SETUP_5 */
                           517	#519: #if defined( FLASH_SETUP_6 )
                           518	#520: /* Flash setup used by SPC570S samples */
                           519	#521: V_MEMROM0 static V_MEMROM1 tC55fmcFlashBlock V_MEMROM2 flashBlocks_6[] =
                           520	#522: {
                           521	#523:    {0x00800000ul, 0x00002000ul,  4ul, 0x00000001ul, kFlashSelectHigh},     /*   8K *  4, B1F0 - B1F3 */
                           522	#524:    {0x00FC0000ul, 0x00004000ul,  4ul, 0x00020000ul, kFlashSelectLowMid},   /*  16K *  4, B0F1 - B0F4 */
                           523	#525:    {0x00FD0000ul, 0x00008000ul,  2ul, 0x00200000ul, kFlashSelectLowMid},   /*  32K *  2, B0F5, B0F6 */
                           524	#526:    {0x00FE0000ul, 0x00010000ul,  2ul, 0x00800000ul, kFlashSelectLowMid},   /*  64K *  2, B0F7, B0F8 */
                           525	#527:    {0x01000000ul, 0x00020000ul, 32ul, 0x00000001ul, kFlashSelectBig_0}     /* 128K * 32, 128K Address space */
                           526	#528: };
                           527	#529: # if defined( FBL_ENABLE_WRITE_RCHW )
                           528	#530: # else
                           529	#531: /* RCHW addresses */
                           530	#532: V_MEMROM0 static V_MEMROM1 vuint32 V_MEMROM2 rchwPositions_6[] =
                           531	#533: {
                           532	#534:    0x00FC0000ul, 0x00FC4000ul, 0x00FC8000ul, 0x00FCC000ul,
                           533	#535:    0x01000000ul, 0x01020000ul, 0x00404000ul
                           534	#536: };
                           535	#537: # endif /* FBL_ENABLE_WRITE_RCHW */
                           536	#538: #  if defined( FLASH_USER_PROTECTION_6 )
                           537	#539: #  else
                           538	#540: #   define FLASH_USER_PROTECTION_6 { 0x80010000ul, 0x00000000ul, 0x00000000ul, 0x00000000ul }
                           539	#541: #  endif /* FLASH_USER_PROTECTION_6 */
                           540	#542: /* Flash module settings */
                           541	#543: V_MEMROM0 static V_MEMROM1 vuint32 V_MEMROM2 flash_user_protection_6[4u] = FLASH_USER_PROTECTION_6;
                           542	#544: V_MEMROM0 static V_MEMROM1 tC55fmcFlashModule V_MEMROM2 flashModule_6 = { flashBlocks_6,
                           543	#545:                                                                           ARRAY_SIZE(flashBlocks_6),
                           544	#546:                                                                           FBL_FLASH_REG_0,
                           545	#547:                                                                           0x20000ul,
                           546	#548:                                                                           1ul,

                                   Fri Apr 10 08:32:08 2020           Page 11
                                   Fri Apr 10 08:32:08 2020   gh_00002441.si
                           547	#549:                                                                           3ul,
                           548	#550:                                                                           flash_user_protection_6,
                           549	#551: # if defined( FBL_ENABLE_WRITE_RCHW )
                           550	#552: # else
                           551	#553:                                                                           rchwPositions_6,
                           552	#554:                                                                           ARRAY_SIZE(rchwPositions_6)
                           553	#555: # endif /* FBL_ENABLE_WRITE_RCHW */
                           554	#556:                                                                          };
                           555	#557: #endif /* FLASH_SETUP_6 */
                           556	#558: #if defined( FLASH_SETUP_7 )
                           557	#559: /* Flash setup used by S32R samples */
                           558	#560: V_MEMROM0 static V_MEMROM1 tC55fmcFlashBlock V_MEMROM2 flashBlocks_7[] =
                           559	#561: {
                           560	#562:    {0x00800000ul, 0x00004000ul,  1ul, 0x00010000ul, kFlashSelectLowMid},   /*  16K * 1, eeprom block 0 */
                           561	#563:    {0x00804000ul, 0x00004000ul,  1ul, 0x00040000ul, kFlashSelectLowMid},   /*  16K * 1, eeprom block 2 */
                           562	#564:    {0x00808000ul, 0x00004000ul,  1ul, 0x00020000ul, kFlashSelectLowMid},   /*  16K * 1, eeprom block 1 */
                           563	#565:    {0x0080C000ul, 0x00004000ul,  1ul, 0x00080000ul, kFlashSelectLowMid},   /*  16K * 1, eeprom block 3 */
                           564	#566:    {0x00A00000ul, 0x00004000ul,  2ul, 0x00000001ul, kFlashSelectHigh},     /*  16K * 2, CSE2 High Address Space */
                           565	#567:    {0x00F98000ul, 0x00004000ul,  2ul, 0x00000001ul, kFlashSelectLowMid},   /*  16K * 2, Mid Address space */
                           566	#568:    {0x00FA0000ul, 0x00010000ul,  6ul, 0x00000004ul, kFlashSelectLowMid},   /*  64K * 6, Mid Address space */
                           567	#569:    {0x01000000ul, 0x00040000ul, 32ul, 0x00000001ul, kFlashSelectBig_0},    /* 256K * 32, 256K Address space */
                           568	#570:    {0x01800000ul, 0x00040000ul, 16ul, 0x00000001ul, kFlashSelectBig_1}     /* 256K * 16, 256K Address space */
                           569	#571: };
                           570	#572: # if defined( FBL_ENABLE_WRITE_RCHW )
                           571	#573: # else
                           572	#574: /* RCHW addresses */
                           573	#575: V_MEMROM0 static V_MEMROM1 vuint32 V_MEMROM2 rchwPositions_7[] =
                           574	#576: {
                           575	#577:    0x00F98000ul, 0x00F9C000ul, 0x00FA0000ul, 0x00FB0000ul,
                           576	#578:    0x01000000ul, 0x01040000ul, 0x01080000ul, 0x010C0000ul
                           577	#579: };
                           578	#580: # endif /* FBL_ENABLE_WRITE_RCHW */
                           579	#581: #  if defined( FLASH_USER_PROTECTION_7 )
                           580	#582: #  else
                           581	#583: #   define FLASH_USER_PROTECTION_7 { 0x00000000ul, 0x00000000ul, 0x00000000ul, 0x00000000ul }
                           582	#584: #  endif /* FLASH_USER_PROTECTION_7 */
                           583	#585: /* Flash module settings */
                           584	#586: V_MEMROM0 static V_MEMROM1 vuint32 V_MEMROM2 flash_user_protection_7[4u] = FLASH_USER_PROTECTION_7;
                           585	#587: V_MEMROM0 static V_MEMROM1 tC55fmcFlashModule V_MEMROM2 flashModule_7 = { flashBlocks_7,
                           586	#588:                                                                           ARRAY_SIZE(flashBlocks_7),
                           587	#589:                                                                           FBL_FLASH_REG_0,
                           588	#590:                                                                           0x40000ul,
                           589	#591:                                                                           2ul,
                           590	#592:                                                                           4ul,
                           591	#593:                                                                           flash_user_protection_7,
                           592	#594: # if defined( FBL_ENABLE_WRITE_RCHW )
                           593	#595: # else
                           594	#596:                                                                           rchwPositions_7,
                           595	#597:                                                                           ARRAY_SIZE(rchwPositions_7)
                           596	#598: # endif /* FBL_ENABLE_WRITE_RCHW */
                           597	#599:                                                                          };
                           598	#600: #endif /* FLASH_SETUP_7 */
                           599	#601: #if defined( FLASH_SETUP_8 )
                           600	#602: /* Flash setup used by 574Kxx samples */
                           601	#603: V_MEMROM0 static V_MEMROM1 tC55fmcFlashBlock V_MEMROM2 flashBlocks_8[] =
                           602	#604: {

                                   Fri Apr 10 08:32:08 2020           Page 12
                                   Fri Apr 10 08:32:08 2020   gh_00002441.si
                           603	#605:    {0x00800000ul, 0x00004000ul,  4ul, 0x00000001ul, kFlashSelectHigh},     /*  16K *  4, EEPROM Block */
                           604	#606:    {0x00FC0000ul, 0x00004000ul,  4ul, 0x00020000ul, kFlashSelectLowMid},   /*  16K *  4, Low Address space */
                           605	#607:    {0x00FD0000ul, 0x00008000ul,  2ul, 0x00200000ul, kFlashSelectLowMid},   /*  32K *  2, Low Address space */
                           606	#608:    {0x00FE0000ul, 0x00010000ul,  2ul, 0x00800000ul, kFlashSelectLowMid},   /*  64K *  2, Low Address space */
                           607	#609:    {0x01000000ul, 0x00040000ul, 32ul, 0x00000001ul, kFlashSelectBig_0}     /* 256K *  32, 256K Address space */
                           608	#610: };
                           609	#611: # if defined( FBL_ENABLE_WRITE_RCHW )
                           610	#612: # else
                           611	#613: /* RCHW addresses */
                           612	#614: V_MEMROM0 static V_MEMROM1 vuint32 V_MEMROM2 rchwPositions_8[] =
                           613	#615: {
                           614	#616:    0x00FC0000ul, 0x00FC4000ul, 0x00FC8000ul, 0x00FCC000ul,
                           615	#617:    0x01000000ul, 0x01040000ul, 0x01080000ul, 0x010C0000ul
                           616	#618: };
                           617	#619: # endif /* FBL_ENABLE_WRITE_RCHW */
                           618	#620: #  if defined( FLASH_USER_PROTECTION_8 )
                           619	#621: #  else
                           620	#622: #   define FLASH_USER_PROTECTION_8 { 0x00000000ul, 0x00000000ul, 0x00000000ul, 0x00000000ul }
                           621	#623: #  endif /* FLASH_USER_PROTECTION_8 */
                           622	#624: /* Flash module settings */
                           623	#625: V_MEMROM0 static V_MEMROM1 vuint32 V_MEMROM2 flash_user_protection_8[4u] = FLASH_USER_PROTECTION_8;
                           624	#626: V_MEMROM0 static V_MEMROM1 tC55fmcFlashModule V_MEMROM2 flashModule_8 = { flashBlocks_8,
                           625	#627:                                                                           ARRAY_SIZE(flashBlocks_8),
                           626	#628:                                                                           FBL_FLASH_REG_0,
                           627	#629:                                                                           0x40000ul,
                           628	#630:                                                                           1ul,
                           629	#631:                                                                           3ul,
                           630	#632:                                                                           flash_user_protection_8,
                           631	#633: # if defined( FBL_ENABLE_WRITE_RCHW )
                           632	#634: # else
                           633	#635:                                                                           rchwPositions_8,
                           634	#636:                                                                           ARRAY_SIZE(rchwPositions_8)
                           635	#637: # endif /* FBL_ENABLE_WRITE_RCHW */
                           636	#638:                                                                          };
                           637	#639: #endif /* FLASH_SETUP_8 */
                           638	#640: #if defined( FLASH_SETUP_9 )
                           639	#641: /* Flash setup used by SPC58EC80/70 */
                           640	#642: V_MEMROM0 static V_MEMROM1 tC55fmcFlashBlock V_MEMROM2 flashBlocks_9[] =
                           641	#643: {
                           642	#644:    {0x0060C000ul, 0x00004000ul,  1ul, 0x00200000ul, kFlashSelectLowMid},   /*  16K *  1, 1 * 16 KB secure code flash */
                           643	#645:    {0x00610000ul, 0x00010000ul,  2ul, 0x04000000ul, kFlashSelectLowMid},   /*  64K *  1, HSM Code Block 2, 3 */
                           644	#646:    {0x00680000ul, 0x00004000ul,  2ul, 0x00000001ul, kFlashSelectLowMid},   /*  16K *  2, HSM Data */
                           645	#647:    {0x00800000ul, 0x00008000ul,  4ul, 0x00000001ul, kFlashSelectHigh},     /*  32K *  4, Data Flash (Eeprom) */
                           646	#648:    {0x00FC0000ul, 0x00004000ul,  1ul, 0x00080000ul, kFlashSelectLowMid},   /*  16K *  1, Low Address space  */
                           647	#649:    {0x00FC4000ul, 0x00004000ul,  1ul, 0x00020000ul, kFlashSelectLowMid},   /*  16K *  1, Low Address space  */
                           648	#650:    {0x00FC8000ul, 0x00004000ul,  1ul, 0x00100000ul, kFlashSelectLowMid},   /*  16K *  1, Low Address space  */
                           649	#651:    {0x00FCC000ul, 0x00004000ul,  1ul, 0x00040000ul, kFlashSelectLowMid},   /*  16K *  1, Low Address space  */
                           650	#652:    {0x00FD0000ul, 0x00008000ul,  2ul, 0x00400000ul, kFlashSelectLowMid},   /*  32K *  2, Low Address space  */
                           651	#653:    {0x00FE0000ul, 0x00010000ul,  2ul, 0x01000000ul, kFlashSelectLowMid},   /*  64K *  2, Low Address space  */
                           652	#654:    {0x01000000ul, 0x00020000ul,  2ul, 0x00000001ul, kFlashSelectBig_0},    /* 128K *  2, 256K Address space */
                           653	#655:    {0x01040000ul, 0x00040000ul, 22ul, 0x00000004ul, kFlashSelectBig_0}     /* 256K * 22, 256K Address space */
                           654	#656: };
                           655	#657: # if defined( FBL_ENABLE_WRITE_RCHW )
                           656	#658: # else
                           657	#659: /* RCHW addresses */
                           658	#660: V_MEMROM0 static V_MEMROM1 vuint32 V_MEMROM2 rchwPositions_9[] =

                                   Fri Apr 10 08:32:08 2020           Page 13
                                   Fri Apr 10 08:32:08 2020   gh_00002441.si
                           659	#661: {
                           660	#662:    0x00FC0000ul, 0x00FC4000ul, 0x00FC8000ul, 0x00FCC000ul,
                           661	#663:    0x01000000ul, 0x01020000ul
                           662	#664: };
                           663	#665: # endif /* FBL_ENABLE_WRITE_RCHW */
                           664	#666: #  if defined( FLASH_USER_PROTECTION_9 )
                           665	#667: #  else
                           666	#668: #   define FLASH_USER_PROTECTION_9 { 0x00000000ul, 0x00000000ul, 0x00000000ul, 0x00000000ul }
                           667	#669: #  endif /* FLASH_USER_PROTECTION_9 */
                           668	#670: /* Flash module settings */
                           669	#671: V_MEMROM0 static V_MEMROM1 vuint32 V_MEMROM2 flash_user_protection_9[4u] = FLASH_USER_PROTECTION_9;
                           670	#672: V_MEMROM0 static V_MEMROM1 tC55fmcFlashModule V_MEMROM2 flashModule_9 = { flashBlocks_9,
                           671	#673:                                                                           ARRAY_SIZE(flashBlocks_9),
                           672	#674:                                                                           FBL_FLASH_REG_0,
                           673	#675:                                                                           0x40000ul,
                           674	#676:                                                                           1ul,
                           675	#677:                                                                           4ul,
                           676	#678:                                                                           flash_user_protection_9,
                           677	#679: # if defined( FBL_ENABLE_WRITE_RCHW )
                           678	#680: # else
                           679	#681:                                                                           rchwPositions_9,
                           680	#682:                                                                           ARRAY_SIZE(rchwPositions_9)
                           681	#683: # endif /* FBL_ENABLE_WRITE_RCHW */
                           682	#684:                                                                          };
                           683	#685: #endif /* FLASH_SETUP_9 */
                           684	#686: #if defined( FLASH_SETUP_10 )
                           685	#687: /* Flash setup used by SPC582B60, SPC574S */
                           686	#688: V_MEMROM0 static V_MEMROM1 tC55fmcFlashBlock V_MEMROM2 flashBlocks_10[] =
                           687	#689: {
                           688	#690:    {0x00800000ul, 0x00004000ul,  4ul, 0x00000001ul, kFlashSelectHigh},     /*  16K *  4, Data flash (Eeprom) */
                           689	#691:    {0x00FC0000ul, 0x00004000ul,  4ul, 0x00020000ul, kFlashSelectLowMid},   /*  16K *  4, Low Address space   */
                           690	#692:    {0x00FD0000ul, 0x00008000ul,  2ul, 0x00200000ul, kFlashSelectLowMid},   /*  32K *  2, Low Address space   */
                           691	#693:    {0x00FE0000ul, 0x00010000ul,  2ul, 0x00800000ul, kFlashSelectLowMid},   /*  64K *  2, Low Address space   */
                           692	#694:    {0x01000000ul, 0x00020000ul,  6ul, 0x00000001ul, kFlashSelectBig_0}     /* 128K *  6, 256K Address space  */
                           693	#695: };
                           694	#696: # if defined( FBL_ENABLE_WRITE_RCHW )
                           695	#697: # else
                           696	#698: /* RCHW addresses */
                           697	#699: V_MEMROM0 static V_MEMROM1 vuint32 V_MEMROM2 rchwPositions_10[] =
                           698	#700: {
                           699	#701:    0x00FC0000ul, 0x00FC4000ul, 0x00FC8000ul, 0x00FCC000ul,
                           700	#702:    0x01000000ul, 0x01020000ul, 0x01040000ul
                           701	#703: };
                           702	#704: # endif /* FBL_ENABLE_WRITE_RCHW */
                           703	#705: #  if defined( FLASH_USER_PROTECTION_10 )
                           704	#706: #  else
                           705	#707: #   define FLASH_USER_PROTECTION_10 { 0x00000000ul, 0x00000000ul, 0x00000000ul, 0x00000000ul }
                           706	#708: #  endif /* FLASH_USER_PROTECTION_10 */
                           707	#709: /* Flash module settings */
                           708	#710: V_MEMROM0 static V_MEMROM1 vuint32 V_MEMROM2 flash_user_protection_10[4u] = FLASH_USER_PROTECTION_10;
                           709	#711: V_MEMROM0 static V_MEMROM1 tC55fmcFlashModule V_MEMROM2 flashModule_10 = { flashBlocks_10,
                           710	#712:                                                                           ARRAY_SIZE(flashBlocks_10),
                           711	#713:                                                                           FBL_FLASH_REG_0,
                           712	#714:                                                                           0x20000ul,
                           713	#715:                                                                           1ul,
                           714	#716:                                                                           4ul,

                                   Fri Apr 10 08:32:08 2020           Page 14
                                   Fri Apr 10 08:32:08 2020   gh_00002441.si
                           715	#717:                                                                           flash_user_protection_10,
                           716	#718: # if defined( FBL_ENABLE_WRITE_RCHW )
                           717	#719: # else
                           718	#720:                                                                           rchwPositions_10,
                           719	#721:                                                                           ARRAY_SIZE(rchwPositions_10)
                           720	#722: # endif /* FBL_ENABLE_WRITE_RCHW */
                           721	#723:                                                                          };
                           722	#724: #endif /* FLASH_SETUP_10 */
                           723	#725: #if defined( FLASH_SETUP_11 )
                           724	#726: /* Flash setup used by SPC58NE84 */
                           725	#727: V_MEMROM0 static V_MEMROM1 tC55fmcFlashBlock V_MEMROM2 flashBlocks_11[] =
                           726	#728: {
                           727	#729:    {0x0060C000ul, 0x00004000ul,  1ul, 0x00200000ul, kFlashSelectLowMid},   /*  16K *  1, 1 * 16 KB secure code flash */
                           728	#730:    {0x00610000ul, 0x00010000ul,  2ul, 0x04000000ul, kFlashSelectLowMid},   /*  64K *  1, HSM Code Block 2, 3 */
                           729	#731:    {0x00680000ul, 0x00004000ul,  2ul, 0x00000001ul, kFlashSelectLowMid},   /*  16K *  2, HSM Data */
                           730	#732:    {0x00800000ul, 0x00010000ul,  4ul, 0x00000001ul, kFlashSelectHigh},     /*  64K *  4, Data Flash (Eeprom) */
                           731	#733:    {0x00FC0000ul, 0x00004000ul,  1ul, 0x00080000ul, kFlashSelectLowMid},   /*  16K *  1, Low Address space  */
                           732	#734:    {0x00FC4000ul, 0x00004000ul,  1ul, 0x00020000ul, kFlashSelectLowMid},   /*  16K *  1, Low Address space  */
                           733	#735:    {0x00FC8000ul, 0x00004000ul,  1ul, 0x00100000ul, kFlashSelectLowMid},   /*  16K *  1, Low Address space  */
                           734	#736:    {0x00FCC000ul, 0x00004000ul,  1ul, 0x00040000ul, kFlashSelectLowMid},   /*  16K *  1, Low Address space  */
                           735	#737:    {0x00FD0000ul, 0x00008000ul,  2ul, 0x00400000ul, kFlashSelectLowMid},   /*  32K *  2, Low Address space  */
                           736	#738:    {0x00FE0000ul, 0x00010000ul,  2ul, 0x01000000ul, kFlashSelectLowMid},   /*  64K *  2, Low Address space  */
                           737	#739:    {0x01000000ul, 0x00020000ul,  2ul, 0x00000001ul, kFlashSelectBig_0},    /* 128K *  2, 256K Address space */
                           738	#740:    {0x01040000ul, 0x00040000ul, 22ul, 0x00000004ul, kFlashSelectBig_0}     /* 256K * 22, 256K Address space */
                           739	#741: };
                           740	#742: # if defined( FBL_ENABLE_WRITE_RCHW )
                           741	#743: # else
                           742	#744: /* RCHW addresses */
                           743	#745: V_MEMROM0 static V_MEMROM1 vuint32 V_MEMROM2 rchwPositions_11[] =
                           744	#746: {
                           745	#747:    0x00FC0000ul, 0x00FC4000ul, 0x00FC8000ul, 0x00FCC000ul,
                           746	#748:    0x01000000ul, 0x01020000ul
                           747	#749: };
                           748	#750: # endif /* FBL_ENABLE_WRITE_RCHW */
                           749	#751: #  if defined( FLASH_USER_PROTECTION_11 )
                           750	#752: #  else
                           751	#753: #   define FLASH_USER_PROTECTION_11 { 0x00000000ul, 0x00000000ul, 0x00000000ul, 0x00000000ul }
                           752	#754: #  endif /* FLASH_USER_PROTECTION_11 */
                           753	#755: /* Flash module settings */
                           754	#756: V_MEMROM0 static V_MEMROM1 vuint32 V_MEMROM2 flash_user_protection_11[4u] = FLASH_USER_PROTECTION_11;
                           755	#757: V_MEMROM0 static V_MEMROM1 tC55fmcFlashModule V_MEMROM2 flashModule_11 = { flashBlocks_11,
                           756	#758:                                                                           ARRAY_SIZE(flashBlocks_11),
                           757	#759:                                                                           FBL_FLASH_REG_0,
                           758	#760:                                                                           0x40000ul,
                           759	#761:                                                                           1ul,
                           760	#762:                                                                           4ul,
                           761	#763:                                                                           flash_user_protection_11,
                           762	#764: # if defined( FBL_ENABLE_WRITE_RCHW )
                           763	#765: # else
                           764	#766:                                                                           rchwPositions_11,
                           765	#767:                                                                           ARRAY_SIZE(rchwPositions_11)
                           766	#768: # endif /* FBL_ENABLE_WRITE_RCHW */
                           767	#769:                                                                          };
                           768	#770: #endif /* FLASH_SETUP_11 */
                           769	#771: #if defined( FLASH_SETUP_12 )
                           770	#772: /* Flash setup used by MPC5746R */

                                   Fri Apr 10 08:32:08 2020           Page 15
                                   Fri Apr 10 08:32:08 2020   gh_00002441.si
                           771	#773: V_MEMROM0 static V_MEMROM1 tC55fmcFlashBlock V_MEMROM2 flashBlocks_12[] =
                           772	#774: {
                           773	#775:    { 0x00800000ul, 0x00004000ul, 8ul, 0x00000001ul, kFlashSelectLowMid },  /* 16 K * 8, EEPROM, Low address space */
                           774	#776:    { 0x00820000ul, 0x00010000ul, 2ul, 0x00000100ul, kFlashSelectLowMid },  /* 64 K * 2, EEPROM, Low address space */
                           775	#777:    { 0x00F9C000ul, 0x00004000ul, 1ul, 0x00200000ul, kFlashSelectLowMid },  /* 16 K * 1 , Low address space */
                           776	#778:    { 0x00FA0000ul, 0x00004000ul, 4ul, 0x00020000ul, kFlashSelectLowMid },  /* 16 K * 4, Low address space */
                           777	#779:    { 0x00FB0000ul, 0x00008000ul, 2ul, 0x00400000ul, kFlashSelectLowMid },  /* 32 K * 2, Low address space */
                           778	#780:    { 0x00FC0000ul, 0x00010000ul, 4ul, 0x01000000ul, kFlashSelectLowMid },  /* 64 K * 4, Low address space */
                           779	#781:    { 0x01000000ul, 0x00040000ul, 3ul, 0x00000001ul, kFlashSelectBig_0 },   /* 256K * 3, 256K address space */
                           780	#782:    { 0x010C0000ul, 0x00040000ul, 3ul, 0x00000080ul, kFlashSelectBig_0 },   /* 256K * 3, 256K address space */
                           781	#783:    { 0x01180000ul, 0x00040000ul, 4ul, 0x00000008ul, kFlashSelectBig_0 },   /* 256K * 4, 256K address space */
                           782	#784:    { 0x01280000ul, 0x00040000ul, 4ul, 0x00000400ul, kFlashSelectBig_0 }    /* 256K * 4, 256K address space */
                           783	#785: };
                           784	#786: # if defined( FBL_ENABLE_WRITE_RCHW )
                           785	#787: # else
                           786	#788: /* RCHW addresses */
                           787	#789: V_MEMROM0 static V_MEMROM1 vuint32 V_MEMROM2 rchwPositions_12[] =
                           788	#790: {
                           789	#791:    0x00F9C000ul, 0x00FA0000ul, 0x00FA4000ul, 0x00FA8000ul,
                           790	#792:    0x01000000ul, 0x01040000ul, 0x01080000ul, 0x010C0000ul
                           791	#793: };
                           792	#794: # endif /* FBL_ENABLE_WRITE_RCHW */
                           793	#795: #  if defined( FLASH_USER_PROTECTION_12 )
                           794	#796: #  else
                           795	#797: #   define FLASH_USER_PROTECTION_12 { 0x00000000ul, 0x00000000ul, 0x00000000ul, 0x00000000ul }
                           796	#798: #  endif /* FLASH_USER_PROTECTION_12 */
                           797	#799: /* Flash module settings */
                           798	#800: V_MEMROM0 static V_MEMROM1 vuint32 V_MEMROM2 flash_user_protection_12[4u] = FLASH_USER_PROTECTION_12;
                           799	#801: V_MEMROM0 static V_MEMROM1 tC55fmcFlashModule V_MEMROM2 flashModule_12 = { flashBlocks_12,
                           800	#802:                                                                            ARRAY_SIZE(flashBlocks_12),
                           801	#803:                                                                            FBL_FLASH_REG_0,
                           802	#804:                                                                            0x40000ul,
                           803	#805:                                                                            2ul,
                           804	#806:                                                                            4ul,
                           805	#807:                                                                            flash_user_protection_12,
                           806	#808: # if defined( FBL_ENABLE_WRITE_RCHW )
                           807	#809: # else
                           808	#810:                                                                            rchwPositions_12,
                           809	#811:                                                                            ARRAY_SIZE(rchwPositions_12)
                           810	#812: # endif /* FBL_ENABLE_WRITE_RCHW */
                           811	#813: };
                           812	#814: #endif /* FLASH_SETUP_12 */
                           813	#815: #if defined( FLASH_SETUP_13 )
                           814	#816: /* Flash setup used by SPC584B70 */
                           815	#817: V_MEMROM0 static V_MEMROM1 tC55fmcFlashBlock V_MEMROM2 flashBlocks_13[] =
                           816	#818: {
                           817	#819:    { 0x0060C000ul, 0x00004000ul, 1ul, 0x00080000ul, kFlashSelectLowMid },  /* 16K  * 1,  HSM Code, Low address space */
                           818	#820:    { 0x00610000ul, 0x00020000ul, 1ul, 0x00800000ul, kFlashSelectLowMid },  /* 128K * 1,  HSM Code, Low address space */
                           819	#821:    { 0x00680000ul, 0x00004000ul, 2ul, 0x00000001ul, kFlashSelectLowMid },  /* 16K  * 2,  HSM EEPROM, Mid address space */
                           820	#822:    { 0x00800000ul, 0x00004000ul, 4ul, 0x00000001ul, kFlashSelectHigh },    /* 16K  * 4,  EEPROM, High address space */
                           821	#823:    { 0x00FC0000ul, 0x00004000ul, 2ul, 0x00020000ul, kFlashSelectLowMid },  /* 16K  * 2,  Low address space */
                           822	#824:    { 0x00FC8000ul, 0x00008000ul, 3ul, 0x00100000ul, kFlashSelectLowMid },  /* 32K  * 3,  Low address space */
                           823	#825:    { 0x00FE0000ul, 0x00020000ul, 1ul, 0x00000001ul, kFlashSelectBig_0 },   /* 128K * 1,  256K address space  */
                           824	#826:    { 0x01000000ul, 0x00040000ul, 7ul, 0x00000002ul, kFlashSelectBig_0 },   /* 256K * 7,  256K address space  */
                           825	#827: };
                           826	#828: # if defined( FBL_ENABLE_WRITE_RCHW )

                                   Fri Apr 10 08:32:08 2020           Page 16
                                   Fri Apr 10 08:32:08 2020   gh_00002441.si
                           827	#829: # else
                           828	#830: /* RCHW addresses */
                           829	#831: V_MEMROM0 static V_MEMROM1 vuint32 V_MEMROM2 rchwPositions_13[] =
                           830	#832: {
                           831	#833:    0x00FC0000ul, 0x00FC4000ul, 0x00FC8000ul, 0x00FD0000ul,
                           832	#834:    0x00FE0000ul, 0x01000000ul
                           833	#835: };
                           834	#836: # endif /* FBL_ENABLE_WRITE_RCHW */
                           835	#837: #  if defined( FLASH_USER_PROTECTION_13 )
                           836	#838: #  else
                           837	#839: #   define FLASH_USER_PROTECTION_13 { 0x00000000ul, 0x00000000ul, 0x00000000ul, 0x00000000ul }
                           838	#840: #  endif /* FLASH_USER_PROTECTION_13 */
                           839	#841: /* Flash module settings */
                           840	#842: V_MEMROM0 static V_MEMROM1 vuint32 V_MEMROM2 flash_user_protection_13[4u] = FLASH_USER_PROTECTION_13;
                           841	#843: V_MEMROM0 static V_MEMROM1 tC55fmcFlashModule V_MEMROM2 flashModule_13 = { flashBlocks_13,
                           842	#844:                                                                            ARRAY_SIZE(flashBlocks_13),
                           843	#845:                                                                            FBL_FLASH_REG_0,
                           844	#846:                                                                            0x40000ul,
                           845	#847:                                                                            1ul,
                           846	#848:                                                                            4ul,
                           847	#849:                                                                            flash_user_protection_13,
                           848	#850: # if defined( FBL_ENABLE_WRITE_RCHW )
                           849	#851: # else
                           850	#852:                                                                            rchwPositions_13,
                           851	#853:                                                                            ARRAY_SIZE(rchwPositions_13)
                           852	#854: # endif /* FBL_ENABLE_WRITE_RCHW */
                           853	#855: };
                           854	#856: #endif /* FLASH_SETUP_13 */
                           855	#858: /** Flash module list: 1 member if a static configuration is selected, several
                           856	#859:     if runtime configuration is selected. */
                           857	#860: V_MEMROM0 static V_MEMROM1 tC55fmcFlashModule V_MEMROM2 V_MEMROM3 * V_MEMROM1 V_MEMROM2 flashModule[] =
                           858	#861: {
                           859	#862: #if defined( FLASH_SETUP_0 )
                           860	#863:    &flashModule_0
                           861	#864: #endif /* FLASH_SETUP_0 */
                           862	#865: #if defined( FLASH_SETUP_RUNTIME )
                           863	#866:    ,
                           864	#867: #endif /* FLASH_SETUP_RUNTIME */
                           865	#868: #if defined( FLASH_SETUP_1 )
                           866	#869:    &flashModule_1
                           867	#870: #endif /* FLASH_SETUP_1 */
                           868	#871: #if defined( FLASH_SETUP_RUNTIME )
                           869	#872:    ,
                           870	#873: #endif /* FLASH_SETUP_RUNTIME */
                           871	#874: #if defined( FLASH_SETUP_2 )
                           872	#875:    &flashModule_2
                           873	#876: #endif /* FLASH_SETUP_2 */
                           874	#877: #if defined( FLASH_SETUP_RUNTIME )
                           875	#878:    ,
                           876	#879: #endif /* FLASH_SETUP_RUNTIME */
                           877	#880: #if defined( FLASH_SETUP_3 )
                           878	#881:    &flashModule_3
                           879	#882: #endif /* FLASH_SETUP_3 */
                           880	#883: #if defined( FLASH_SETUP_RUNTIME )
                           881	#884:    ,
                           882	#885: #endif /* FLASH_SETUP_RUNTIME */

                                   Fri Apr 10 08:32:08 2020           Page 17
                                   Fri Apr 10 08:32:08 2020   gh_00002441.si
                           883	#886: #if defined( FLASH_SETUP_4 )
                           884	#887:    &flashModule_4
                           885	#888: #endif /* FLASH_SETUP_4 */
                           886	#889: #if defined( FLASH_SETUP_RUNTIME )
                           887	#890:    ,
                           888	#891: #endif /* FLASH_SETUP_RUNTIME */
                           889	#892: #if defined( FLASH_SETUP_5 )
                           890	#893:    &flashModule_5
                           891	#894: #endif /* FLASH_SETUP_5 */
                           892	#895: #if defined( FLASH_SETUP_RUNTIME )
                           893	#896:    ,
                           894	#897: #endif /* FLASH_SETUP_RUNTIME */
                           895	#898: #if defined( FLASH_SETUP_6 )
                           896	#899:    &flashModule_6
                           897	#900: #endif /* FLASH_SETUP_6 */
                           898	#901: #if defined( FLASH_SETUP_RUNTIME )
                           899	#902:    ,
                           900	#903: #endif /* FLASH_SETUP_RUNTIME */
                           901	#904: #if defined( FLASH_SETUP_7 )
                           902	#905:    &flashModule_7
                           903	#906: #endif /* FLASH_SETUP_7 */
                           904	#907: #if defined( FLASH_SETUP_RUNTIME )
                           905	#908:    ,
                           906	#909: #endif /* FLASH_SETUP_RUNTIME */
                           907	#910: #if defined( FLASH_SETUP_8 )
                           908	#911:    &flashModule_8
                           909	#912: #endif /* FLASH_SETUP_8 */
                           910	#913: #if defined( FLASH_SETUP_RUNTIME )
                           911	#914:    ,
                           912	#915: #endif /* FLASH_SETUP_RUNTIME */
                           913	#916: #if defined( FLASH_SETUP_9 )
                           914	#917:    &flashModule_9
                           915	#918: #endif /* FLASH_SETUP_9 */
                           916	#919: #if defined( FLASH_SETUP_RUNTIME )
                           917	#920:    ,
                           918	#921: #endif /* FLASH_SETUP_RUNTIME */
                           919	#922: #if defined( FLASH_SETUP_10 )
                           920	#923:    &flashModule_10
                           921	#924: #endif /* FLASH_SETUP_10 */
                           922	#925: #if defined( FLASH_SETUP_RUNTIME )
                           923	#926:    ,
                           924	#927: #endif /* FLASH_SETUP_RUNTIME */
                           925	#928: #if defined( FLASH_SETUP_11 )
                           926	#929:    &flashModule_11
                           927	#930: #endif /* FLASH_SETUP_11 */
                           928	#931: #if defined( FLASH_SETUP_RUNTIME )
                           929	#932:    ,
                           930	#933: #endif /* FLASH_SETUP_RUNTIME */
                           931	#934: #if defined( FLASH_SETUP_12 )
                           932	#935:    &flashModule_12
                           933	#936: #endif
                           934	#937: #if defined( FLASH_SETUP_13 )
                           935	#938:    &flashModule_13
                           936	#939: #endif
                           937	#940: };
                           938	#942: /** Currently used flash module */

                                   Fri Apr 10 08:32:08 2020           Page 18
                                   Fri Apr 10 08:32:08 2020   gh_00002441.si
                           939	#943: V_MEMRAM0 static V_MEMROM1 tC55fmcFlashModule V_MEMROM2 V_MEMROM3 * V_MEMRAM1 V_MEMRAM2 flashModuleSelect;
                           940	#945: /***********************************************************************************************************************
                           941	#946:  *  LOCAL FUNCTION PROTOTYPES
                           942	#947:  **********************************************************************************************************************/
                           943	#949: static vuint32 getNumberOfFlashBlocks( const tC55fmcFlashModule * pFlashModule, const tC55fmcFlashBlock * pFlashBlock );
                           944	#950: static vuint32 checkAddress( vuint32 * flashBlockMask, tFblLength length, tFblAddress address );
                           945	#951: #if defined( FBL_ENABLE_WRITE_RCHW )
                           946	#952: #else
                           947	#953: static tFlashAddress checkForRchwBootId( tFblLength length, tFblAddress address, vuint32 * pData );
                           948	#954: #endif /* FBL_ENABLE_WRITE_RCHW */
                           949	#956: /***********************************************************************************************************************
                           950	#957:  *   LOCAL FUNCTIONS
                           951	#958:  **********************************************************************************************************************/
                           952	#960: /***********************************************************************************************************************
                           953	#961:  *  getNumberOfFlashBlocks
                           954	#962:  **********************************************************************************************************************/
                           955	#963: /*! \brief       Computes number of flash blocks to be processed
                           956	#964:  *  \details     This function corrects the number of flashable blocks depending on
                           957	#965:  *               the MECR register of the flash module.
                           958	#966:  *  \param[in]   pFlashModule Flash module configuration
                           959	#967:  *  \param[in]   pFlashBlock Flash block configuration
                           960	#968:  *  \return      Number of flashable blocks for current implementation
                           961	#969:  **********************************************************************************************************************/
                           962		.section ".vletext", "vax"
                           963		.vle
                           964		.vle
                           965	..bof.C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_flio...43.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl..5E8FB078..0::
                           966		.align	1
                           967	..gh.f.p.4.a.1.r.0.e.0:
                           968		.type	..gh.f.p.4.a.1.r.0.e.0,@object
                           969		.size	..gh.f.p.4.a.1.r.0.e.0,0
                           970		.global	getNumberOfFlashBlocks..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_flio.
                           971	getNumberOfFlashBlocks..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_flio.:
                           972	getNumberOfFlashBlocks:
00000000 0137              973		se_mr	r7, r3
                           974	#	    .bf
                           975	.LDW01:
                           976	#970: static vuint32 getNumberOfFlashBlocks( const tC55fmcFlashModule * pFlashModule, const tC55fmcFlashBlock * pFlashBlock )
                           977	#971: {
                           978	#972:    vuint32 result;
                           979	#974:    /* Due to bit mask length, only 32 flash blocks can be addressed */
                           980	#975:    result = 32ul;
00000002 c404              981		se_lwz	r0, 16(r4)
                           982	#977:    /* Calculate maximum number of flash blocks for current iteration step */
                           983	#978:    switch (pFlashBlock->bitMaskIndex)
00000004 4a03              984		se_li	r3, 32
00000006 2210              985		se_cmpli	r0, 2
00000008 e400              986		se_blt	.L11
0000000a e600              987		se_beq	.L7
0000000c 2220              988		se_cmpli	r0, 3
0000000e e600              989		se_beq	.L8
                           990	.L9:
                           991	#1007:             }
                           992	#1008:             else
                           993	#1009:             {
                           994	#1010:                /* Second big mask does not include any flash blocks */

                                   Fri Apr 10 08:32:08 2020           Page 19
                                   Fri Apr 10 08:32:08 2020   gh_00002441.si
                           995	#1011:                result = 0ul;
                           996	#1012:             }
                           997	#1013:          }
                           998	#1014:          else
                           999	#1015:          {
                          1000	#1016:             /* Only 3 or less select masks available. */
                          1001	#1017:             result = 0ul;
                          1002	#1018:          }
                          1003	#1019:          break;
                          1004	#1020:       }
                          1005	#1021:       default:
                          1006	#1022:       {
                          1007	#1023:          /* Error - unknown flash block type */
                          1008	#1024:          result = 0ul;
                          1009	#line1024
                          1010	..lin.74adc43a..f923b00f.0_1::
                          1011	.LDWlin1:
00000010 4803             1012		se_li	r3, 0
00000012 e800             1013		se_b	.L11
                          1014	.L7:
                          1015	#979:    {
                          1016	#980:       /* Low/Mid: Table is assumed to be correct */
                          1017	#981:       case kFlashSelectLowMid:
                          1018	#982:       {
                          1019	#983:          break;
                          1020	#984:       }
                          1021	#985:       /* High: Table is assumed to be correct */
                          1022	#986:       case kFlashSelectHigh:
                          1023	#987:       {
                          1024	#988:          break;
                          1025	#989:       }
                          1026	#990:       case kFlashSelectBig_0:
                          1027	#991:       {
                          1028	#992:          /* Correct big block erase count to real value */
                          1029	#993:          /* PRQA S 0303 1 */ /* MD_FblFlioMpc57xx_0303 */
                          1030	#994:          result = ((FLASH_REG(pFlashModule->flashBaseAddress, FBL_FLASH_MCRE_OFFSET) & 0x1F000000ul) >> 24u) * pFlashModule->flashBigBlockFactor;
                          1031	#line994
                          1032	..lin.74adc43a..f923b00f.0_2::
                          1033	.LDWlin2:
00000014 c267             1034		se_lwz	r6, 8(r7)
00000016 c206             1035		se_lwz	r0, 8(r6)
00000018 c437             1036		se_lwz	r3, 16(r7)
0000001a 740046ff         1037		extrwi	r0, r0, 5, 3
0000001e 0503             1038		se_mullw	r3, r0
                          1039	#995:          break;
00000020 e800             1040		se_b	.L11
                          1041	.L8:
                          1042	#996:       }
                          1043	#997:       case kFlashSelectBig_1:
                          1044	#998:       {
                          1045	#999:          if (pFlashModule->flashSelectCount > kFlashSelectBig_0)
                          1046	#line999
                          1047	..lin.74adc43a..f923b00f.0_3::
                          1048	.LDWlin3:
00000022 c507             1049		se_lwz	r0, 20(r7)
00000024 2210             1050		se_cmpli	r0, 2

                                   Fri Apr 10 08:32:08 2020           Page 20
                                   Fri Apr 10 08:32:08 2020   gh_00002441.si
00000026 e100             1051		se_ble	.L9
                          1052	#1000:          {
                          1053	#1001:             /* PRQA S 0303 1 */ /* MD_FblFlioMpc57xx_0303 */
                          1054	#1002:             if (((FLASH_REG(pFlashModule->flashBaseAddress, FBL_FLASH_MCRE_OFFSET) & 0x1F000000ul) >> 23u) > 32ul)
                          1055	#line1002
                          1056	..lin.74adc43a..f923b00f.0_4::
                          1057	.LDWlin4:
00000028 c277             1058		se_lwz	r7, 8(r7)
0000002a c207             1059		se_lwz	r0, 8(r7)
0000002c 74004ebd         1060		e_rlwinm	r0, r0, 9, 26, 30
00000030 23f0             1061		se_cmpli	r0, 32
00000032 e100             1062		se_ble	.L9
                          1063	#1003:             {
                          1064	#1004:                /* Second mask includes flash blocks if more than 32 flash blocks are present */
                          1065	#1005:                /* PRQA S 0303 1 */ /* MD_FblFlioMpc57xx_0303 */
                          1066	#1006:                result = ((FLASH_REG(pFlashModule->flashBaseAddress, FBL_FLASH_MCRE_OFFSET) & 0x1F000000ul) >> 23u) - 32ul;
                          1067	#line1006
                          1068	..lin.74adc43a..f923b00f.0_5::
                          1069	.LDWlin5:
00000034 c207             1070		se_lwz	r0, 8(r7)
00000036 74034ebd         1071		e_rlwinm	r3, r0, 9, 26, 30
0000003a 25f3             1072		se_subi	r3, 32
                          1073	.L11:
                          1074	#1025:       }
                          1075	#1026:    }
                          1076	#1028:    /* If not all flash blocks from the table exist, reduce iteration count */
                          1077	#1029:    if (result > pFlashBlock->count)
0000003c c204             1078		se_lwz	r0, 8(r4)
0000003e 0d03             1079		se_cmpl	r3, r0
00000040 e100             1080		se_ble	.L2
                          1081	#1030:    {
                          1082	#1031:       result = pFlashBlock->count;
                          1083	#line1031
                          1084	..lin.74adc43a..f923b00f.0_6::
                          1085	.LDWlin6:
00000042 0103             1086		se_mr	r3, r0
                          1087	#1032:    }
                          1088	#1034:    return result;
                          1089	.L2:
                          1090	#	    .ef
                          1091	.LDW11:
00000044 0004             1092		se_blr
                          1093	__ghs_eofn_getNumberOfFlashBlocks:
                          1094		.type	getNumberOfFlashBlocks,@function
                          1095		.size	getNumberOfFlashBlocks,$-getNumberOfFlashBlocks
                          1096		.type	getNumberOfFlashBlocks..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_flio.,@function
                          1097		.size	getNumberOfFlashBlocks..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_flio.,$-getNumberOfFlashBlocks..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_flio.
                          1098		.align	1
                          1099	
                          1100	#function:			getNumberOfFlashBlocks
                          1101	#stack frame size:		0
                          1102	#
                          1103	#result	r3	local
                          1104	
                          1105	#pFlashModule	r7	param
                          1106	#pFlashBlock	r4	param

                                   Fri Apr 10 08:32:08 2020           Page 21
                                   Fri Apr 10 08:32:08 2020   gh_00002441.si
                          1107	
                          1108		.data
                          1109		.section ".vletext", "vax"
                          1110		.vle
                          1111		.vle
                          1112	
                          1113	#1035: }
                          1114	
                          1115	#1037: /***********************************************************************************************************************
                          1116	#1038:  *  checkAddress
                          1117	#1039:  **********************************************************************************************************************/
                          1118	#1040: /*! \brief       Computes flash block bit mask and checks address alignment
                          1119	#1041:  *  \details     This function computes the flash block bit mask of a given start address and length.
                          1120	#1042:  *               Additionally, the address and length alignments for erase and write requests are checked.
                          1121	#1043:  *               Please note: If address and range include a gap in flash memory, the bit mask won't be processed
                          1122	#1044:  *               and alignment checks will fail.
                          1123	#1045:  *  \param[out]  flashBlockMask Flash block bit mask
                          1124	#1046:  *  \param[in]   length Length of flash range
                          1125	#1047:  *  \param[in]   address Start address of flash range
                          1126	#1048:  *  \return      Reports if alignment requirements where met or not.
                          1127	#1049:  **********************************************************************************************************************/
                          1128		.align	1
                          1129		.align	1
                          1130		.align	1
                          1131	..gh.f.p.5.a.1.r.0.e.1:
                          1132		.type	..gh.f.p.5.a.1.r.0.e.1,@object
                          1133		.size	..gh.f.p.5.a.1.r.0.e.1,0
                          1134		.global	checkAddress..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_flio.
                          1135	checkAddress..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_flio.:
                          1136	checkAddress:
00000046 182106c8         1137		e_stwu	sp, -56(sp)
0000004a 0080             1138		se_mflr	r0
0000004c 1aa1090c         1139		e_stmw	r21, 12(sp)
00000050 df01             1140		se_stw	r0, 60(sp)
00000052 023e             1141		se_mtar	r22, r3
00000054 015e             1142		se_mr	r30, r5
                          1143	#	    .bf
                          1144	.LDW21:
                          1145	#1050: static vuint32 checkAddress( vuint32 * flashBlockMask, IO_SizeType length, IO_PositionType address )
                          1146	#1051: {
                          1147	#1052:    vuint32 i, j;
                          1148	#1054:    tFlashAddress currentAddress;
                          1149	#1055:    tFlashLength currentLength;
                          1150	#1056:    vuint32 maxIterationFlashBlocks;
                          1151	#1057:    vuint32 result;
                          1152	#1058:    vuint32 iterationState;
                          1153	#1060:    /* Initialize variables */
                          1154	#1061:    result = kFlashAlignmentError;
00000056 480d             1155		se_li	r29, 0
                          1156	#1062:    iterationState = kFlashCheckAddress;
00000058 01da             1157		se_mr	r26, r29
                          1158	#1063:    currentLength = length;
0000005a 01af             1159		se_mr	r31, r26
                          1160	#1064:    currentAddress = 0ul;
0000005c 01fb             1161		se_mr	r27, r31
                          1162	#1066:    for (i = 0u; i < kFlashSelectCount; i++)

                                   Fri Apr 10 08:32:08 2020           Page 22
                                   Fri Apr 10 08:32:08 2020   gh_00002441.si
0000005e 014c             1163		se_mr	r28, r4
                          1164	.L175:
                          1165	#1067:    {
                          1166	#1068:       flashBlockMask[i] = 0x00ul;
00000060 7f671070         1167		e_slwi	r7, r27, 2
00000064 7fe7b12e         1168		stwx	r31, r7, r22
00000068 200b             1169		se_addi	r27, 1
0000006a 223b             1170		se_cmpli	r27, 4
0000006c e400             1171		se_blt	.L175
                          1172	#1069:    }
                          1173	#1071:    /* Iterate over flash blocks */
                          1174	#1072:    i = 0u;
                          1175	#line1072
                          1176	..lin.74adc43a..54579149.0_7::
                          1177	.LDWlin7:
0000006e 480b             1178		se_li	r27, 0
                          1179	#1073:    while ((iterationState != kFlashStopCheck) && (i < flashModuleSelect->flashBlockCount))
00000070 e800             1180		se_b	.L176
                          1181	.L178:
                          1182	#1074:    {
                          1183	#1075:       /* Prepare variables for a set of flash blocks */
                          1184	#1076:       j = 0u;
                          1185	#line1076
                          1186	..lin.74adc43a..54579149.0_8::
                          1187	.LDWlin8:
00000072 c043             1188		se_lwz	r4, 0(r3)
                          1189	#1077:       if (iterationState == kFlashCheckAddress)
00000074 4808             1190		se_li	r24, 0
00000076 1afba014         1191		e_mulli	r23, r27, 20
0000007a 7c04b86e         1192		lwzux	r0, r4, r23
0000007e 2a0a             1193		se_cmpi	r26, 0
00000080 e200             1194		se_bne	.L179
                          1195	#1078:       {
                          1196	#1079:          currentAddress = flashModuleSelect->flashBlocks[i].startAddress;
00000082 010f             1197		se_mr	r31, r0
00000084 e800             1198		se_b	.L181
                          1199	.L179:
                          1200	#1080:       }
                          1201	#1081:       else
                          1202	#1082:       {
                          1203	#1083:          /* Check for gap after start address was verified */
                          1204	#1084:          if (currentAddress != flashModuleSelect->flashBlocks[i].startAddress)
00000086 0d0f             1205		se_cmpl	r31, r0
00000088 e600             1206		se_beq	.L181
                          1207	#1085:          {
                          1208	#1086:             /* Gap included - stop iteration */
                          1209	#1087:             result &= FblInvert32Bit(kFlashWriteLengthAligned | kFlashEraseLengthAligned);
                          1210	#line1087
                          1211	..lin.74adc43a..54579149.0_9::
                          1212	.LDWlin9:
0000008a 482a             1213		se_li	r26, 2
                          1214	#1088:             iterationState = kFlashStopCheck;
0000008c 1bbdc4f5         1215		e_andi	r29, r29, -11
                          1216	.L181:
                          1217	#1089:          }
                          1218	#1090:       }

                                   Fri Apr 10 08:32:08 2020           Page 23
                                   Fri Apr 10 08:32:08 2020   gh_00002441.si
                          1219	#1092:       /* Check for maximum number of blocks */
                          1220	#1093:       maxIterationFlashBlocks = getNumberOfFlashBlocks(flashModuleSelect, &(flashModuleSelect->flashBlocks[i]));
00000090 e900             1221		se_bl	getNumberOfFlashBlocks
00000092 023d             1222		se_mtar	r21, r3
                          1223	#1095:       while ((iterationState != kFlashStopCheck) && (j < maxIterationFlashBlocks))
                          1224	#line1095
                          1225	..lin.74adc43a..54579149.0_10::
                          1226	.LDWlin10:
00000094 e800             1227		se_b	.L184
                          1228	.L186:
                          1229	#1096:       {
                          1230	#1097:          (void)FblLookForWatchdog();
                          1231	#line1097
                          1232	..lin.74adc43a..54579149.0_11::
                          1233	.LDWlin11:
00000096 78000001         1234		e_bl	FblLookForWatchdog
                          1235	#1099:          /* First step: Check if start address is aligned correctly */
                          1236	#1100:          if (iterationState == kFlashCheckAddress)
0000009a 2a0a             1237		se_cmpi	r26, 0
0000009c e200             1238		se_bne	.L187
                          1239	#1101:          {
                          1240	#1102:             /* Check if address is located in a flash block */
                          1241	#1103:             if (   (address >= currentAddress)
                          1242	#line1103
                          1243	..lin.74adc43a..54579149.0_12::
                          1244	.LDWlin12:
0000009e 0dfe             1245		se_cmpl	r30, r31
000000a0 e400             1246		se_blt	.L189
000000a2 c079             1247		se_lwz	r7, 0(r25)
000000a4 c077             1248		se_lwz	r7, 0(r7)
000000a6 7ce7ba14         1249		add	r7, r7, r23
000000aa c177             1250		se_lwz	r7, 4(r7)
000000ac 7c1ff050         1251		subf	r0, r31, r30
000000b0 0d70             1252		se_cmpl	r0, r7
000000b2 e000             1253		se_bge	.L189
                          1254	#1104:                 && ((address -currentAddress) < (flashModuleSelect->flashBlocks[i].length))
                          1255	#1105:                )
                          1256	#1106:             {
                          1257	#1107:                /* Address located within a flash block - check length next */
                          1258	#1108:                iterationState = kFlashCheckLength;
                          1259	#line1108
                          1260	..lin.74adc43a..54579149.0_13::
                          1261	.LDWlin13:
000000b4 481a             1262		se_li	r26, 1
                          1263	#1110:                /* Check if address is aligned to a flash block start address */
                          1264	#1111:                if (address == currentAddress)
000000b6 0dfe             1265		se_cmpl	r30, r31
000000b8 e200             1266		se_bne	.L192
                          1267	#1112:                {
                          1268	#1113:                   result |= kFlashEraseAddressAligned;
                          1269	#line1113
                          1270	..lin.74adc43a..54579149.0_14::
                          1271	.LDWlin14:
000000ba 65fd             1272		se_bseti	r29, 31
                          1273	.L192:
                          1274	#1114:                }

                                   Fri Apr 10 08:32:08 2020           Page 24
                                   Fri Apr 10 08:32:08 2020   gh_00002441.si
                          1275	#1115:                /* Check if address is aligned to flash segment size */
                          1276	#1116:                if ((address & (FLASH_SEGMENT_SIZE - 1)) == 0x00ul)
000000bc 1bc0c807         1277		e_andi.	r0, r30, 7
000000c0 e200             1278		se_bne	.L194
                          1279	#1117:                {
                          1280	#1118:                   result |= kFlashWriteAddressAligned;
                          1281	#line1118
                          1282	..lin.74adc43a..54579149.0_15::
                          1283	.LDWlin15:
000000c2 65dd             1284		se_bseti	r29, 29
                          1285	.L194:
                          1286	#1119:                }
                          1287	#1120:                /* Check if length matches write requirements. This has to be done only once. */
                          1288	#1121:                if ((currentLength & (FLASH_SEGMENT_SIZE - 1)) == 0x00ul)
000000c4 1b80c807         1289		e_andi.	r0, r28, 7
000000c8 e200             1290		se_bne	.L203
                          1291	#1122:                {
                          1292	#1123:                   result |= kFlashWriteLengthAligned;
                          1293	#line1123
                          1294	..lin.74adc43a..54579149.0_16::
                          1295	.LDWlin16:
000000ca 65cd             1296		se_bseti	r29, 28
000000cc e800             1297		se_b	.L187
                          1298	.L189:
                          1299	#1124:                }
                          1300	#1125:             }
                          1301	#1126:             else if (address > currentAddress)
                          1302	#line1126
                          1303	..lin.74adc43a..54579149.0_17::
                          1304	.LDWlin17:
000000ce 0dfe             1305		se_cmpl	r30, r31
000000d0 e100             1306		se_ble	.L199
                          1307	#1127:             {
                          1308	#1128:                /* Erase address behind current address - proceed to next flash block */
                          1309	#1129:                currentAddress += flashModuleSelect->flashBlocks[i].length;
                          1310	#line1129
                          1311	..lin.74adc43a..54579149.0_18::
                          1312	.LDWlin18:
000000d2 c009             1313		se_lwz	r0, 0(r25)
000000d4 c070             1314		se_lwz	r7, 0(r0)
000000d6 7ce7ba14         1315		add	r7, r7, r23
000000da c107             1316		se_lwz	r0, 4(r7)
000000dc 040f             1317		se_add	r31, r0
                          1318	.L187:
                          1319	#1136:             }
                          1320	#1137:          }
                          1321	#1139:          /* Second step: Check if length is aligned correctly */
                          1322	#1140:          if (iterationState == kFlashCheckLength)
000000de 2a1a             1323		se_cmpi	r26, 1
000000e0 e200             1324		se_bne	.L202
                          1325	.L203:
                          1326	#1141:          {
                          1327	#1142:             /* Calculate bit mask for erase/lock */
                          1328	#1143:             flashBlockMask[flashModuleSelect->flashBlocks[i].bitMaskIndex] |= (vuint32)(flashModuleSelect->flashBlocks[i].bitMaskStart << j);
                          1329	#line1143
                          1330	..lin.74adc43a..54579149.0_19::

                                   Fri Apr 10 08:32:08 2020           Page 25
                                   Fri Apr 10 08:32:08 2020   gh_00002441.si
                          1331	.LDWlin19:
000000e2 c039             1332		se_lwz	r3, 0(r25)
000000e4 c043             1333		se_lwz	r4, 0(r3)
000000e6 7c84ba14         1334		add	r4, r4, r23
000000ea c404             1335		se_lwz	r0, 16(r4)
000000ec c364             1336		se_lwz	r6, 12(r4)
000000ee 6c20             1337		se_slwi	r0, 2
000000f0 7c160214         1338		add	r0, r22, r0
000000f4 c070             1339		se_lwz	r7, 0(r0)
000000f6 4286             1340		se_slw	r6, r24
000000f8 4467             1341		se_or	r7, r6
000000fa d070             1342		se_stw	r7, 0(r0)
                          1343	#1145:             /* Check if erase length is at least currently selected block */
                          1344	#1146:             if (currentLength >= flashModuleSelect->flashBlocks[i].length)
000000fc c104             1345		se_lwz	r0, 4(r4)
000000fe 0d0c             1346		se_cmpl	r28, r0
00000100 e400             1347		se_blt	.L204
                          1348	#1147:             {
                          1349	#1148:                /* Decrement length */
                          1350	#1149:                currentLength -= flashModuleSelect->flashBlocks[i].length;
                          1351	#line1149
                          1352	..lin.74adc43a..54579149.0_20::
                          1353	.LDWlin20:
00000102 060c             1354		se_sub	r28, r0
                          1355	#1150:                /* Increment start address */
                          1356	#1151:                currentAddress += flashModuleSelect->flashBlocks[i].length;
00000104 040f             1357		se_add	r31, r0
00000106 e800             1358		se_b	.L206
                          1359	.L199:
                          1360	#1130:             }
                          1361	#1131:             else
                          1362	#1132:             {
                          1363	#1133:                /* Current address behind request - address failure */
                          1364	#1134:                iterationState = kFlashStopCheck;
                          1365	#1135:                result = kFlashAlignmentError;
                          1366	#line1135
                          1367	..lin.74adc43a..54579149.0_21::
                          1368	.LDWlin21:
00000108 480d             1369		se_li	r29, 0
0000010a e800             1370		se_b	.L598
                          1371	.L204:
                          1372	#1152:             }
                          1373	#1153:             /* Check if write length crosses block boundary */
                          1374	#1154:             else if (((currentAddress + flashModuleSelect->flashBlocks[i].length) - address) < currentLength)
                          1375	#line1154
                          1376	..lin.74adc43a..54579149.0_22::
                          1377	.LDWlin22:
0000010c 04f0             1378		se_add	r0, r31
0000010e 7cfe0050         1379		subf	r7, r30, r0
00000112 0dc7             1380		se_cmpl	r7, r28
00000114 e000             1381		se_bge	.L207
                          1382	#1155:             {
                          1383	#1156:                /* Process remaining length in current block */
                          1384	#1157:                currentLength -= ((currentAddress + flashModuleSelect->flashBlocks[i].length) - address);
                          1385	#line1157
                          1386	..lin.74adc43a..54579149.0_23::

                                   Fri Apr 10 08:32:08 2020           Page 26
                                   Fri Apr 10 08:32:08 2020   gh_00002441.si
                          1387	.LDWlin23:
00000116 7ce0f050         1388		subf	r7, r0, r30
0000011a 047c             1389		se_add	r28, r7
                          1390	#1158:                currentAddress = (currentAddress + flashModuleSelect->flashBlocks[i].length);
0000011c 010f             1391		se_mr	r31, r0
0000011e e800             1392		se_b	.L206
                          1393	.L207:
                          1394	#1159:             }
                          1395	#1160:             else
                          1396	#1161:             {
                          1397	#1162:                /* Flash block shorter than actual selected flash block - stop further processing */
                          1398	#1163:                iterationState = kFlashStopCheck;
                          1399	#line1163
                          1400	..lin.74adc43a..54579149.0_24::
                          1401	.LDWlin24:
00000120 482a             1402		se_li	r26, 2
                          1403	.L206:
                          1404	#1164:             }
                          1405	#1165:             /* Check if length is aligned to the end of a flash block */
                          1406	#1166:             if (currentLength == 0x00ul)
00000122 2a0c             1407		se_cmpi	r28, 0
00000124 e200             1408		se_bne	.L202
                          1409	#1167:             {
                          1410	#1168:                /* Length matches - erase can be executed */
                          1411	#1169:                iterationState = kFlashStopCheck;
                          1412	#1170:                result |= kFlashEraseLengthAligned;
                          1413	#line1170
                          1414	..lin.74adc43a..54579149.0_25::
                          1415	.LDWlin25:
00000126 65ed             1416		se_bseti	r29, 30
                          1417	.L598:
00000128 482a             1418		se_li	r26, 2
                          1419	.L202:
                          1420	#1171:             }
                          1421	#1172:          }
                          1422	#1174:          /* Prepare next flash block */
                          1423	#1175:          j++;
0000012a 2008             1424		se_addi	r24, 1
                          1425	.L184:
0000012c 2a2a             1426		se_cmpi	r26, 2
0000012e e600             1427		se_beq	.L185
00000130 7c18a840         1428		cmplw	r24, r21
00000134 e400             1429		se_blt	.L186
                          1430	.L185:
                          1431	#1176:       }
                          1432	#1177:       /* Prepare next flash block */
                          1433	#1178:       i++;
                          1434	#line1178
                          1435	..lin.74adc43a..54579149.0_26::
                          1436	.LDWlin26:
00000136 200b             1437		se_addi	r27, 1
                          1438	.L176:
00000138 2a2a             1439		se_cmpi	r26, 2
0000013a e600             1440		se_beq	.L177
0000013c 7320e000         1441		e_lis	r25, %hiadj(flashModuleSelect)
00000140 1f390000         1442		e_add16i	r25, r25, %lo(flashModuleSelect)

                                   Fri Apr 10 08:32:08 2020           Page 27
                                   Fri Apr 10 08:32:08 2020   gh_00002441.si
00000144 c039             1443		se_lwz	r3, 0(r25)
00000146 c103             1444		se_lwz	r0, 4(r3)
00000148 0d0b             1445		se_cmpl	r27, r0
0000014a e400             1446		se_blt	.L178
                          1447	.L177:
                          1448	#1179:    }
                          1449	#1181:    return result;
                          1450	#line1181
                          1451	..lin.74adc43a..54579149.0_27::
                          1452	.LDWlin27:
0000014c 01d3             1453		se_mr	r3, r29
                          1454	#	    .ef
                          1455	.LDW31:
0000014e cf01             1456		se_lwz	r0, 60(sp)
00000150 1aa1080c         1457		e_lmw	r21, 12(sp)
00000154 18218038         1458		e_addi	sp, sp, 56
00000158 0090             1459		se_mtlr	r0
0000015a 0004             1460		se_blr
                          1461	__ghs_eofn_checkAddress:
                          1462		.type	checkAddress,@function
                          1463		.size	checkAddress,$-checkAddress
                          1464		.type	checkAddress..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_flio.,@function
                          1465		.size	checkAddress..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_flio.,$-checkAddress..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_flio.
                          1466		.align	1
                          1467	
                          1468	#function:			checkAddress
                          1469	#stack frame size:		56
                          1470	#link area offset:		0
                          1471	#local storage area offset:	12
                          1472	#gpr save area offset:		12
                          1473	#
                          1474	#i	r27	local
                          1475	#j	r24	local
                          1476	#currentAddress	r31	local
                          1477	#currentLength	r28	local
                          1478	#maxIterationFlashBlocks	r21	local
                          1479	#result	r29	local
                          1480	#iterationState	r26	local
                          1481	
                          1482	#flashBlockMask	r22	param
                          1483	#length	r4	param
                          1484	#address	r30	param
                          1485	
                          1486		.section ".bss","awb"
                          1487		.align	2
                          1488		.global	flashModuleSelect..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_flio.
                          1489	flashModuleSelect..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_flio.:
00000000                  1490	flashModuleSelect:	.space	4
                          1491		.type	flashModuleSelect..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_flio.,@object
                          1492		.size	flashModuleSelect..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_flio.,4
                          1493		.type	flashModuleSelect,@object
                          1494		.size	flashModuleSelect,4
                          1495		.global	flashParam..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_flio.
                          1496	flashParam..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_flio.:
00000004                  1497	flashParam:	.space	52
                          1498		.type	flashParam..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_flio.,@object

                                   Fri Apr 10 08:32:08 2020           Page 28
                                   Fri Apr 10 08:32:08 2020   gh_00002441.si
                          1499		.size	flashParam..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_flio.,52
                          1500		.type	flashParam,@object
                          1501		.size	flashParam,52
                          1502		.data
                          1503		.section ".vletext", "vax"
                          1504		.vle
                          1505		.vle
                          1506	
                          1507	#1182: }
                          1508	
                          1509	#1184: #if defined( FBL_ENABLE_WRITE_RCHW )
                          1510	#1185: #else
                          1511	#1186: /***********************************************************************************************************************
                          1512	#1187:  *  checkForRchwBootId
                          1513	#1188:  **********************************************************************************************************************/
                          1514	#1189: /*! \brief       Checks if data contains a valid RCHW
                          1515	#1190:  *  \details     This function checks if the data submitted to the flash driver
                          1516	#1191:  *               contains a valid RCHW. If a valid RCHW is found, the flash sequence
                          1517	#1192:  *               is aborted to avoid changes in the ECU's startup.
                          1518	#1193:  *  \param[in]   length Length of data
                          1519	#1194:  *  \param[in]   address Target address
                          1520	#1195:  *  \param[in]   pData RAM buffer of data to be flashed
                          1521	#1196:  *  \return      Address of failure, 0 if OK
                          1522	#1197:  **********************************************************************************************************************/
                          1523	#1198: static tFlashAddress checkForRchwBootId( tFblLength length, tFblAddress address, vuint32 * pData )
                          1524	#1199: {
                          1525	#1200:    vuint32 i, j;
                          1526	#1201:    tFlashAddress result;
                          1527	#1203:    /* Initialize variables */
                          1528	#1204:    result = 0ul;
                          1529	#1206:    /* Loop over known RCHW positions */
                          1530	#1207:    for (i = 0ul; i < flashModuleSelect->rchwPositionCount; i++)
                          1531	#1208:    {
                          1532	#1209:       /* Check if RCHW lies within flash request area */
                          1533	#1210:       if (   (flashModuleSelect->rchwPositions[i] >= address)
                          1534	#1211:           && ((flashModuleSelect->rchwPositions[i] - address) < length)
                          1535	#1212:          )
                          1536	#1213:       {
                          1537	#1214:          for (j = 0u; j < kNrOfRchwValues; j++)
                          1538	#1215:          {
                          1539	#1216:             if (rchwValues[j] == (pData[flashModuleSelect->rchwPositions[i] - address] & kRchwMask))
                          1540	#1217:             {
                          1541	#1218:                /* RCHW Boot ID found - report position to stop flashing */
                          1542	#1219:                result = flashModuleSelect->rchwPositions[i];
                          1543	#1220:             }
                          1544	#1221:          }
                          1545	#1222:       }
                          1546	#1223:    }
                          1547	#1225:    return result;
                          1548	#1226: }
                          1549	#1227: #endif /* FBL_ENABLE_WRITE_RCHW */
                          1550	#1229: /***********************************************************************************************************************
                          1551	#1230:  *  GLOBAL FUNCTIONS
                          1552	#1231:  **********************************************************************************************************************/
                          1553	#1233: /***********************************************************************************************************************
                          1554	#1234:  *  FlashDriver_InitSync

                                   Fri Apr 10 08:32:08 2020           Page 29
                                   Fri Apr 10 08:32:08 2020   gh_00002441.si
                          1555	#1235:  **********************************************************************************************************************/
                          1556	#1236: /*! \brief       Initializes the flash driver
                          1557	#1237:  *  \details     This function copies the flash driver to RAM if it is stored in a ROM image and calls the
                          1558	#1238:  *               initialization routine in RAM.
                          1559	#1239:  *  \pre         Flash driver has to be copied to RAM if a downloadable flash driver is used.
                          1560	#1240:  *  \param[in]   address Unused parameter to implement HIS interface.
                          1561	#1241:  *  \return      Reports if initialization was successful or not.
                          1562	#1242:  **********************************************************************************************************************/
                          1563		.align	1
                          1564		.align	1
                          1565		.align	1
                          1566	..gh.f.p.3.a.1.r.0.e.2:
                          1567		.type	..gh.f.p.3.a.1.r.0.e.2,@object
                          1568		.size	..gh.f.p.3.a.1.r.0.e.2,0
                          1569		.global	FlashDriver_InitSync
                          1570	FlashDriver_InitSync:
0000015c 182106f0         1571		e_stwu	sp, -16(sp)
00000160 d3f1             1572		se_stw	r31, 12(sp)
00000162 0080             1573		se_mflr	r0
00000164 d501             1574		se_stw	r0, 20(sp)
                          1575	#	    .bf
                          1576	.LDW41:
00000166 7000e000         1577		e_lis	r0, %hiadj(FblLookForWatchdog)
0000016a 1c000000         1578		e_add16i	r0, r0, %lo(FblLookForWatchdog)
                          1579	#1243: IO_ErrorType FlashDriver_InitSync( void * address )
                          1580	#1244: {
                          1581	#1245: #if defined( FLASH_SETUP_RUNTIME )
                          1582	#1246:    vuint32 flashIndex;
                          1583	#1247: #endif /* FLASH_SETUP_RUNTIME */
                          1584	#1250: #if defined( V_ENABLE_USE_DUMMY_STATEMENT )
                          1585	#1251:    (void)address; /* PRQA S 3112 */ /* MD_FblFlioMpc57xx_3112 */
                          1586	#1252: #endif /* V_ENABLE_USE_DUMMY_STATEMENT */
                          1587	#1254: #if defined( FLASH_SETUP_RUNTIME )
                          1588	#1255:    flashIndex = ApplFblSelectFlashSetup();
                          1589	#1256: # if( FBL_PROJECT_STATE == FBL_INTEGRATION)
                          1590	#1257:    if (flashIndex >= ARRAY_SIZE(flashModule))
                          1591	#1258:    {
                          1592	#1259:       while (1)
                          1593	#1260:       {
                          1594	#1261:          ;
                          1595	#1262:       }
                          1596	#1263:    }
                          1597	#1264: # endif
                          1598	#1265:    flashModuleSelect = flashModule[flashIndex];
                          1599	#1266: #else
                          1600	#1267:    flashModuleSelect = flashModule[kFblSingleFlashModule];
0000016e 73e0e000         1601		e_lis	r31, %hiadj(flashParam)
00000172 1fff0000         1602		e_add16i	r31, r31, %lo(flashParam)
                          1603	#1268: #endif /* FLASH_SETUP_RUNTIME */
                          1604	#1271:    /* Initialize flash parameter structure */
                          1605	#1272:    flashParam.wdTriggerFct = FblLookForWatchdog;
00000176 70e0e000         1606		e_lis	r7, %hiadj(flashModule)
0000017a 50e70000         1607		e_lwz	r7, %lo(flashModule)(r7)
0000017e d50f             1608		se_stw	r0, 20(r31)
00000180 4800             1609		se_li	r0, 0
00000182 930f             1610		se_stb	r0, 3(r31)

                                   Fri Apr 10 08:32:08 2020           Page 30
                                   Fri Apr 10 08:32:08 2020   gh_00002441.si
                          1611	#1273:    flashParam.reserved1 = 0x00u;
00000184 70c0e000         1612		e_lis	r6, %hiadj(flashModuleSelect)
00000188 54e60000         1613		e_stw	r7, %lo(flashModuleSelect)(r6)
                          1614	#1274:    flashParam.reserved2 = 0x00u;
0000018c 4816             1615		se_li	r6, 1
                          1616	#1275:    flashParam.errorCode = kFlashOk;
0000018e 926f             1617		se_stb	r6, 2(r31)
                          1618	#1276:    /* Version variables are preset with version of compile time flash driver */
                          1619	#1277:    flashParam.majorVersion = FLASH_DRIVER_VERSION_MAJOR;
00000190 4866             1620		se_li	r6, 6
00000192 916f             1621		se_stb	r6, 1(r31)
                          1622	#1278:    flashParam.minorVersion = FLASH_DRIVER_VERSION_MINOR;
00000194 c567             1623		se_lwz	r6, 20(r7)
00000196 d96f             1624		se_stw	r6, 36(r31)
                          1625	#1279:    flashParam.patchLevel = FLASH_DRIVER_VERSION_PATCH;
00000198 c667             1626		se_lwz	r6, 24(r7)
                          1627	#1280:    /* MPC specific data */
                          1628	#1281:    flashParam.selectCount = flashModuleSelect->flashSelectCount;
0000019a 900f             1629		se_stb	r0, 0(r31)
0000019c b30f             1630		se_sth	r0, 6(r31)
                          1631	#1282:    flashParam.protectSelect = flashModuleSelect->userProtectionBits;
0000019e b20f             1632		se_sth	r0, 4(r31)
000001a0 da6f             1633		se_stw	r6, 40(r31)
                          1634	#1283:    flashParam.blockSelect = V_NULL;
000001a2 db0f             1635		se_stw	r0, 44(r31)
                          1636	#1284:    flashParam.registerBase = flashModuleSelect->flashBaseAddress;
000001a4 c207             1637		se_lwz	r0, 8(r7)
000001a6 70e0e000         1638		e_lis	r7, %hiadj(flashCode)
                          1639	#1286:    /* Verify if flashcode signature is correct */
                          1640	#1287:    if (    FLASH_DRIVER_MCUTYPE(flashCode) != FLASH_DRIVER_VERSION_MCUTYPE
000001aa 1ce70000         1641		e_add16i	r7, r7, %lo(flashCode)
000001ae dc0f             1642		se_stw	r0, 48(r31)
000001b0 8307             1643		se_lbz	r0, 3(r7)
000001b2 1800a857         1644		e_cmpi	r0, 87
000001b6 e200             1645		se_bne	.L788
000001b8 8207             1646		se_lbz	r0, 2(r7)
000001ba 2a00             1647		se_cmpi	r0, 0
000001bc e200             1648		se_bne	.L788
000001be 8007             1649		se_lbz	r0, 0(r7)
000001c0 2a10             1650		se_cmpi	r0, 1
000001c2 e600             1651		se_beq	.L787
                          1652	.L788:
                          1653	#1288:         || FLASH_DRIVER_MASKTYPE(flashCode) != FLASH_DRIVER_VERSION_MASKTYPE
                          1654	#1289:         || FLASH_DRIVER_INTERFACE(flashCode) != FLASH_DRIVER_VERSION_INTERFACE
                          1655	#1290:       )
                          1656	#1291:    {
                          1657	#1292:       /* Flash driver signature mismatch, wrong flash driver */
                          1658	#1293:       flashParam.errorCode = kFlashInitInvalidVersion;
                          1659	#line1293
                          1660	..lin.74adc43a..2c4f206f.0_28::
                          1661	.LDWlin28:
000001c4 48a0             1662		se_li	r0, 10
000001c6 b20f             1663		se_sth	r0, 4(r31)
000001c8 e800             1664		se_b	.L791
                          1665	.L787:
                          1666	#1294:    }

                                   Fri Apr 10 08:32:08 2020           Page 31
                                   Fri Apr 10 08:32:08 2020   gh_00002441.si
                          1667	#1295:    else
                          1668	#1296:    {
                          1669	#1297:       /* Call init routine of flash driver */
                          1670	#1298:       FLASH_DRIVER_INIT(flashCode, &flashParam);
                          1671	#line1298
                          1672	..lin.74adc43a..2c4f206f.0_29::
                          1673	.LDWlin29:
000001ca c107             1674		se_lwz	r0, 4(r7)
000001cc 01f3             1675		se_mr	r3, r31
000001ce 0470             1676		se_add	r0, r7
000001d0 00b0             1677		se_mtctr	r0
000001d2 0007             1678		se_bctrl
                          1679	.L791:
                          1680	#1299:    }
                          1681	#1301:    return flashParam.errorCode;
000001d4 a23f             1682		se_lhz	r3, 4(r31)
                          1683	#	    .ef
                          1684	.LDW51:
000001d6 c501             1685		se_lwz	r0, 20(sp)
000001d8 c3f1             1686		se_lwz	r31, 12(sp)
000001da 20f1             1687		se_addi	sp, 16
000001dc 0090             1688		se_mtlr	r0
000001de 0004             1689		se_blr
                          1690		.global	__ghs_eofn_FlashDriver_InitSync
                          1691	__ghs_eofn_FlashDriver_InitSync:
                          1692		.type	FlashDriver_InitSync,@function
                          1693		.size	FlashDriver_InitSync,$-FlashDriver_InitSync
                          1694		.align	1
                          1695	
                          1696	#function:			FlashDriver_InitSync
                          1697	#stack frame size:		16
                          1698	#link area offset:		0
                          1699	#local storage area offset:	12
                          1700	#gpr save area offset:		12
                          1701	#
                          1702	
                          1703	#address	none	param
                          1704	
                          1705		.section ".rodata","a"
                          1706		.align	2
                          1707		.global	flashModule..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_flio.
                          1708	flashModule..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_flio.:
                          1709	flashModule:
00000000 00000000         1710		.long	flashModule_6
                          1711		.type	flashModule..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_flio.,@object
                          1712		.size	flashModule..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_flio.,4
                          1713		.type	flashModule,@object
                          1714		.size	flashModule,4
                          1715		.global	flashModule_6..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_flio.
                          1716	flashModule_6..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_flio.:
                          1717	flashModule_6:
00000004 00000000         1718		.long	flashBlocks_6
00000008 00000005         1719		.byte	0,0,0,5
0000000c fffe0000         1720		.byte	255,254,0,0
00000010 00020000         1721		.byte	0,2,0,0
00000014 00000001         1722		.byte	0,0,0,1

                                   Fri Apr 10 08:32:08 2020           Page 32
                                   Fri Apr 10 08:32:08 2020   gh_00002441.si
00000018 00000003         1723		.byte	0,0,0,3
0000001c 00000000         1724		.long	flash_user_protection_6
                          1725		.type	flashModule_6..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_flio.,@object
                          1726		.size	flashModule_6..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_flio.,28
                          1727		.type	flashModule_6,@object
                          1728		.size	flashModule_6,28
                          1729		.global	flashBlocks_6..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_flio.
                          1730	flashBlocks_6..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_flio.:
00000020 00800000         1731	flashBlocks_6:	.byte	0,128,0,0
00000024 00002000         1732		.byte	0,0,32,0
00000028 00000004         1733		.byte	0,0,0,4
0000002c 00000001         1734		.byte	0,0,0,1
00000030 00000001         1735		.byte	0,0,0,1
00000034 00fc0000         1736		.byte	0,252,0,0
00000038 00004000         1737		.byte	0,0,64,0
0000003c 00000004         1738		.byte	0,0,0,4
00000040 00020000         1739		.byte	0,2,0,0
00000044 00000000         1740		.space	4
00000048 00fd0000         1741		.byte	0,253,0,0
0000004c 00008000         1742		.byte	0,0,128,0
00000050 00000002         1743		.byte	0,0,0,2
00000054 00200000         1744		.byte	0,32,0,0
00000058 00000000         1745		.space	4
0000005c 00fe0000         1746		.byte	0,254,0,0
00000060 00010000         1747		.byte	0,1,0,0
00000064 00000002         1748		.byte	0,0,0,2
00000068 00800000         1749		.byte	0,128,0,0
0000006c 00000000         1750		.space	4
00000070 01000000         1751		.byte	1,0,0,0
00000074 00020000         1752		.byte	0,2,0,0
00000078 00000020         1753		.byte	0,0,0,32
0000007c 00000001         1754		.byte	0,0,0,1
00000080 00000002         1755		.byte	0,0,0,2
                          1756		.type	flashBlocks_6..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_flio.,@object
                          1757		.size	flashBlocks_6..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_flio.,100
                          1758		.type	flashBlocks_6,@object
                          1759		.size	flashBlocks_6,100
                          1760		.global	flash_user_protection_6..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_flio.
                          1761	flash_user_protection_6..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_flio.:
00000084 80010000         1762	flash_user_protection_6:	.byte	128,1,0,0
00000088 00000000         1763		.space	4
0000008c 00000000         1764		.space	4
00000090 00000000         1765		.space	4
                          1766		.type	flash_user_protection_6..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_flio.,@object
                          1767		.size	flash_user_protection_6..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_flio.,16
                          1768		.type	flash_user_protection_6,@object
                          1769		.size	flash_user_protection_6,16
                          1770		.data
                          1771		.section ".vletext", "vax"
                          1772		.vle
                          1773		.vle
                          1774	
                          1775	#1302: }
                          1776	
                          1777	#1304: /***********************************************************************************************************************
                          1778	#1305:  *  FlashDriver_DeinitSync

                                   Fri Apr 10 08:32:08 2020           Page 33
                                   Fri Apr 10 08:32:08 2020   gh_00002441.si
                          1779	#1306:  **********************************************************************************************************************/
                          1780	#1307: /*! \brief       Deinitializes the flash driver
                          1781	#1308:  *  \details     This function calls the deinitialization routine in RAM and removes the flash driver
                          1782	#1309:  *               from the RAM buffer.
                          1783	#1310:  *  \pre         Flash driver is initialized.
                          1784	#1311:  *  \param[in]   address Unused parameter to implement HIS interface.
                          1785	#1312:  *  \return      Reports if deinitialization was successful or not.
                          1786	#1313:  **********************************************************************************************************************/
                          1787		.align	1
                          1788		.align	1
                          1789	..gh.f.p.3.a.1.r.0.e.3:
                          1790		.type	..gh.f.p.3.a.1.r.0.e.3,@object
                          1791		.size	..gh.f.p.3.a.1.r.0.e.3,0
                          1792		.global	FlashDriver_DeinitSync
                          1793	FlashDriver_DeinitSync:
000001e0 182106e8         1794		e_stwu	sp, -24(sp)
000001e4 1ba1090c         1795		e_stmw	r29, 12(sp)
000001e8 0080             1796		se_mflr	r0
000001ea d701             1797		se_stw	r0, 28(sp)
                          1798	#	    .bf
                          1799	.LDW61:
                          1800	#1314: IO_ErrorType FlashDriver_DeinitSync( void * address )
                          1801	#1315: {
                          1802	#1316:    vuint32 i;
                          1803	#1318: #if defined( V_ENABLE_USE_DUMMY_STATEMENT )
                          1804	#1319:    (void)address; /* PRQA S 3112 */ /* MD_FblFlioMpc57xx_3112 */
                          1805	#1320: #endif /* V_ENABLE_USE_DUMMY_STATEMENT */
                          1806	#1322:    /* flashCode can be shared with another driver. */
                          1807	#1323:    /* Make sure that the code is still present before calling Deinit within flashCode  */
                          1808	#1324:    if (    (FLASH_DRIVER_MCUTYPE(flashCode)   == FLASH_DRIVER_VERSION_MCUTYPE)
000001ec 73e0e000         1809		e_lis	r31, %hiadj(flashCode)
000001f0 1fff0000         1810		e_add16i	r31, r31, %lo(flashCode)
000001f4 830f             1811		se_lbz	r0, 3(r31)
000001f6 73a0e000         1812		e_lis	r29, %hiadj(flashParam)
000001fa 1fbd0000         1813		e_add16i	r29, r29, %lo(flashParam)
000001fe 1800a857         1814		e_cmpi	r0, 87
00000202 e200             1815		se_bne	.L890
00000204 820f             1816		se_lbz	r0, 2(r31)
00000206 2a00             1817		se_cmpi	r0, 0
00000208 e200             1818		se_bne	.L890
0000020a 800f             1819		se_lbz	r0, 0(r31)
0000020c 2a10             1820		se_cmpi	r0, 1
0000020e e200             1821		se_bne	.L890
                          1822	#1325:         && (FLASH_DRIVER_MASKTYPE(flashCode)  == FLASH_DRIVER_VERSION_MASKTYPE)
                          1823	#1326:         && (FLASH_DRIVER_INTERFACE(flashCode) == FLASH_DRIVER_VERSION_INTERFACE))
                          1824	#1327:    {
                          1825	#1328:       /* Call deinitialization routine of flash driver */
                          1826	#1329:       FLASH_DRIVER_DEINIT(flashCode, &flashParam);
                          1827	#line1329
                          1828	..lin.74adc43a..b50f5e38.0_30::
                          1829	.LDWlin30:
00000210 c20f             1830		se_lwz	r0, 8(r31)
00000212 01d3             1831		se_mr	r3, r29
00000214 04f0             1832		se_add	r0, r31
00000216 00b0             1833		se_mtctr	r0
00000218 0007             1834		se_bctrl

                                   Fri Apr 10 08:32:08 2020           Page 34
                                   Fri Apr 10 08:32:08 2020   gh_00002441.si
                          1835	.L890:
                          1836	#1330:    }
                          1837	#1332:    /* Remove flash code from RAM */
                          1838	#1333:    for (i = 0u; i < FLASH_SIZE; i++)
0000021a 480e             1839		se_li	r30, 0
                          1840	.L896:
                          1841	#1334:    {
                          1842	#1335:       if ((i & 0x7Ful) == 0x00ul)
0000021c 1bc0c87f         1843		e_andi.	r0, r30, 127
00000220 e200             1844		se_bne	.L897
                          1845	#1336:       {
                          1846	#1337:          (void)FblLookForWatchdog();
                          1847	#line1337
                          1848	..lin.74adc43a..b50f5e38.0_31::
                          1849	.LDWlin31:
00000222 78000001         1850		e_bl	FblLookForWatchdog
                          1851	.L897:
                          1852	#1338:       }
                          1853	#1340:       flashCode[i] = 0x00u;
00000226 4800             1854		se_li	r0, 0
00000228 7c1ff1ae         1855		stbx	r0, r31, r30
0000022c 200e             1856		se_addi	r30, 1
0000022e 189ea906         1857		e_cmpli	r30, 1536
00000232 e400             1858		se_blt	.L896
                          1859	#1341:    }
                          1860	#1343:    return flashParam.errorCode;
                          1861	#line1343
                          1862	..lin.74adc43a..b50f5e38.0_32::
                          1863	.LDWlin32:
00000234 a23d             1864		se_lhz	r3, 4(r29)
                          1865	#	    .ef
                          1866	.LDW71:
00000236 c701             1867		se_lwz	r0, 28(sp)
00000238 1ba1080c         1868		e_lmw	r29, 12(sp)
0000023c 2171             1869		se_addi	sp, 24
0000023e 0090             1870		se_mtlr	r0
00000240 0004             1871		se_blr
                          1872		.global	__ghs_eofn_FlashDriver_DeinitSync
                          1873	__ghs_eofn_FlashDriver_DeinitSync:
                          1874		.type	FlashDriver_DeinitSync,@function
                          1875		.size	FlashDriver_DeinitSync,$-FlashDriver_DeinitSync
                          1876		.align	1
                          1877	
                          1878	#function:			FlashDriver_DeinitSync
                          1879	#stack frame size:		24
                          1880	#link area offset:		0
                          1881	#local storage area offset:	12
                          1882	#gpr save area offset:		12
                          1883	#
                          1884	#i	r30	local
                          1885	
                          1886	#address	none	param
                          1887	
                          1888		.data
                          1889		.section ".vletext", "vax"
                          1890		.vle

                                   Fri Apr 10 08:32:08 2020           Page 35
                                   Fri Apr 10 08:32:08 2020   gh_00002441.si
                          1891		.vle
                          1892	
                          1893	#1344: }
                          1894	
                          1895	#1346: /***********************************************************************************************************************
                          1896	#1347:  *  FlashDriver_RWriteSync
                          1897	#1348:  **********************************************************************************************************************/
                          1898	#1349: /*! \brief       Writes data to flash memory.
                          1899	#1350:  *  \details     This function programs flash memory by calling the flash driver routine stored in RAM.
                          1900	#1351:  *  \pre         Flash driver is initialized, memory to be programmed is erased.
                          1901	#1352:  *  \param[in]   writeBuffer Pointer to input data buffer.
                          1902	#1353:  *  \param[in]   writeLength Data length.
                          1903	#1354:  *  \param[in]   writeAddress Write target address ( in flash memory ).
                          1904	#1355:  *  \return      Reports write success or error code.
                          1905	#1356:  **********************************************************************************************************************/
                          1906		.align	1
                          1907		.align	1
                          1908	..gh.f.p.5.a.1.r.0.e.4:
                          1909		.type	..gh.f.p.5.a.1.r.0.e.4,@object
                          1910		.size	..gh.f.p.5.a.1.r.0.e.4,0
                          1911		.global	FlashDriver_RWriteSync
                          1912	FlashDriver_RWriteSync:
00000242 182106d8         1913		e_stwu	sp, -40(sp)
00000246 0080             1914		se_mflr	r0
00000248 1b810918         1915		e_stmw	r28, 24(sp)
0000024c db01             1916		se_stw	r0, 44(sp)
0000024e 013c             1917		se_mr	r28, r3
                          1918	#	    .bf
                          1919	.LDW81:
                          1920	#1357: IO_ErrorType FlashDriver_RWriteSync( IO_MemPtrType writeBuffer, IO_SizeType writeLength, IO_PositionType writeAddress )
                          1921	#1358: {
                          1922	#1359:    vuint32 writeAlignment;
                          1923	#1360:    vuint32 flashBlockMask[kFlashSelectCount];
                          1924	#1362:    /* Check write addresses and calculate block masks */
                          1925	#1363:    writeAlignment = checkAddress(flashBlockMask, writeLength, writeAddress);
00000250 014d             1926		se_mr	r29, r4
00000252 015e             1927		se_mr	r30, r5
00000254 18618008         1928		e_addi	r3, sp, 8
00000258 78000001         1929		se_bl	checkAddress
                          1930	#1365:    /* Check if write alignment is correct */
                          1931	#1366:    if ((writeAlignment & kFlashWriteAddressAligned) == 0x00ul)
                          1932	#line1366
                          1933	..lin.74adc43a..74dbbb78.0_33::
                          1934	.LDWlin33:
0000025c 73e0e000         1935		e_lis	r31, %hiadj(flashParam)
00000260 1fff0000         1936		e_add16i	r31, r31, %lo(flashParam)
00000264 67d3             1937		se_btsti	r3, 29
00000266 e200             1938		se_bne	.L1035
                          1939	#1367:    {
                          1940	#1368:       /* Address alignment is not correct */
                          1941	#1369:       flashParam.errorCode= kFlashWriteInvalidAddr;
00000268 4e40             1942		se_li	r0, 100
                          1943	#1370:       flashParam.errorAddress = writeAddress;
                          1944	#line1370
                          1945	..lin.74adc43a..74dbbb78.0_34::
                          1946	.LDWlin34:

                                   Fri Apr 10 08:32:08 2020           Page 36
                                   Fri Apr 10 08:32:08 2020   gh_00002441.si
0000026a e800             1947		se_b	.L1144
                          1948	.L1035:
                          1949	#1371:    }
                          1950	#1372:    else if ((writeAlignment & kFlashWriteLengthAligned) == 0x00ul)
0000026c 67c3             1951		se_btsti	r3, 28
0000026e e200             1952		se_bne	.L1038
                          1953	.L1039:
                          1954	#1373:    {
                          1955	#1374:       /* Size alignment is not correct */
                          1956	#1375:       flashParam.errorCode = kFlashWriteInvalidSize;
00000270 4e50             1957		se_li	r0, 101
                          1958	.L1144:
00000272 d8ef             1959		se_stw	r30, 32(r31)
                          1960	#1376:       flashParam.errorAddress = writeAddress;
                          1961	#line1376
                          1962	..lin.74adc43a..74dbbb78.0_35::
                          1963	.LDWlin35:
00000274 b20f             1964		se_sth	r0, 4(r31)
00000276 e800             1965		se_b	.L1037
                          1966	.L1038:
                          1967	#1377:    }
                          1968	#1378:    else
                          1969	#1379:    {
                          1970	#1380: #if defined( FBL_ENABLE_WRITE_RCHW )
                          1971	#1381: #else
                          1972	#1382:       /* Check for RCHW in data */
                          1973	#1383:       flashParam.errorAddress = checkForRchwBootId((tFblLength)writeLength, (tFblAddress)writeAddress, (vuint32*)writeBuffer);
                          1974	#1384:       if (0ul != flashParam.errorAddress)
                          1975	#1385:       {
                          1976	#1386:          /* Unallowed RCHW detected - stop flash sequence */
                          1977	#1387:          flashParam.errorCode = kFlashWriteInvalidData;
                          1978	#1388:       }
                          1979	#1389:       else
                          1980	#1390: #endif /* FBL_ENABLE_WRITE_RCHW */
                          1981	#1391:       {
                          1982	#1392:          /* Prepare actual write request to driver */
                          1983	#1393:          flashParam.address = writeAddress;
00000278 d2ef             1984		se_stw	r30, 8(r31)
                          1985	#1394:          flashParam.length = writeLength;
                          1986	#line1394
                          1987	..lin.74adc43a..74dbbb78.0_36::
                          1988	.LDWlin36:
0000027a d3df             1989		se_stw	r29, 12(r31)
                          1990	#1395:          flashParam.data = (tFlashData*)writeBuffer;
0000027c d4cf             1991		se_stw	r28, 16(r31)
                          1992	#1396:          flashParam.blockSelect = flashBlockMask;
0000027e 18018008         1993		e_addi	r0, sp, 8
00000282 70e0e000         1994		e_lis	r7, %hiadj(flashCode)
                          1995	#1398:          /* Call write routine of flash driver */
                          1996	#1399:          FLASH_DRIVER_WRITE(flashCode, &flashParam);
00000286 db0f             1997		se_stw	r0, 44(r31)
00000288 1ce70000         1998		e_add16i	r7, r7, %lo(flashCode)
0000028c c407             1999		se_lwz	r0, 16(r7)
0000028e 01f3             2000		se_mr	r3, r31
00000290 0470             2001		se_add	r0, r7
00000292 00b0             2002		se_mtctr	r0

                                   Fri Apr 10 08:32:08 2020           Page 37
                                   Fri Apr 10 08:32:08 2020   gh_00002441.si
00000294 0007             2003		se_bctrl
                          2004	.L1037:
                          2005	#1400:       }
                          2006	#1401:    }
                          2007	#1403:    return flashParam.errorCode;
00000296 a23f             2008		se_lhz	r3, 4(r31)
                          2009	#	    .ef
                          2010	.LDW91:
00000298 cb01             2011		se_lwz	r0, 44(sp)
0000029a 1b810818         2012		e_lmw	r28, 24(sp)
0000029e 18218028         2013		e_addi	sp, sp, 40
000002a2 0090             2014		se_mtlr	r0
000002a4 0004             2015		se_blr
                          2016		.global	__ghs_eofn_FlashDriver_RWriteSync
                          2017	__ghs_eofn_FlashDriver_RWriteSync:
                          2018		.type	FlashDriver_RWriteSync,@function
                          2019		.size	FlashDriver_RWriteSync,$-FlashDriver_RWriteSync
                          2020		.align	1
                          2021	
                          2022	#function:			FlashDriver_RWriteSync
                          2023	#stack frame size:		40
                          2024	#link area offset:		0
                          2025	#local storage area offset:	8
                          2026	#gpr save area offset:		24
                          2027	#
                          2028	#writeAlignment	r3	local
                          2029	#flashBlockMask	8(sp)	local
                          2030	
                          2031	#writeBuffer	r28	param
                          2032	#writeLength	r29	param
                          2033	#writeAddress	r30	param
                          2034	
                          2035		.data
                          2036		.section ".vletext", "vax"
                          2037		.vle
                          2038		.vle
                          2039	
                          2040	#1404: }
                          2041	
                          2042	#1406: /***********************************************************************************************************************
                          2043	#1407:  *  FlashDriver_REraseSync
                          2044	#1408:  **********************************************************************************************************************/
                          2045	#1409: /*! \brief       Erases area in flash memory.
                          2046	#1410:  *  \details     This function erases one or more logical sectors in flash memory.
                          2047	#1411:  *  \pre         Flash driver is initialized.
                          2048	#1412:  *  \param[in]   eraseLength Length of memory to be erased. The length has to be aligned to the length
                          2049	#1413:  *               of one or more flash sectors. The flash area has to be contiguous - gaps in must not
                          2050	#1414:  *               be included.
                          2051	#1415:  *  \param[in]   eraseAddress Start address of erase area. The start address has to be the start
                          2052	#1416:  *               address of a logical flash sector.
                          2053	#1417:  *  \return      Reports erase success or error code.
                          2054	#1418:  **********************************************************************************************************************/
                          2055		.align	1
                          2056		.align	1
                          2057	..gh.f.p.4.a.1.r.0.e.5:
                          2058		.type	..gh.f.p.4.a.1.r.0.e.5,@object

                                   Fri Apr 10 08:32:08 2020           Page 38
                                   Fri Apr 10 08:32:08 2020   gh_00002441.si
                          2059		.size	..gh.f.p.4.a.1.r.0.e.5,0
                          2060		.global	FlashDriver_REraseSync
                          2061	FlashDriver_REraseSync:
000002a6 182106e0         2062		e_stwu	sp, -32(sp)
000002aa 0080             2063		se_mflr	r0
000002ac 1bc10918         2064		e_stmw	r30, 24(sp)
000002b0 d901             2065		se_stw	r0, 36(sp)
000002b2 014e             2066		se_mr	r30, r4
                          2067	#	    .bf
                          2068	.LDW02:
                          2069	#1419: IO_ErrorType FlashDriver_REraseSync( IO_SizeType eraseLength, IO_PositionType eraseAddress )
                          2070	#1420: {
                          2071	#1421:    vuint32 eraseAlignment;
                          2072	#1422:    vuint32 flashBlockMask[kFlashSelectCount];
                          2073	#1424:    /* Check erase addresses and calculate block masks */
                          2074	#1425:    eraseAlignment = checkAddress(flashBlockMask, eraseLength, eraseAddress);
000002b4 0145             2075		se_mr	r5, r4
000002b6 0134             2076		se_mr	r4, r3
000002b8 18618008         2077		e_addi	r3, sp, 8
000002bc 78000001         2078		se_bl	checkAddress
                          2079	#1427:    /* Check if erase alignment is correct */
                          2080	#1428:    if ((eraseAlignment & kFlashEraseAddressAligned) == 0x00ul)
                          2081	#line1428
                          2082	..lin.74adc43a..d9f4babd.0_37::
                          2083	.LDWlin37:
000002c0 73e0e000         2084		e_lis	r31, %hiadj(flashParam)
000002c4 1fff0000         2085		e_add16i	r31, r31, %lo(flashParam)
000002c8 67f3             2086		se_btsti	r3, 31
000002ca e200             2087		se_bne	.L1147
                          2088	#1429:    {
                          2089	#1430:       /* Address alignment is not correct */
                          2090	#1431:       flashParam.errorCode = kFlashEraseInvalidAddr;
000002cc 4c40             2091		se_li	r0, 68
                          2092	#1432:       flashParam.errorAddress = eraseAddress;
                          2093	#line1432
                          2094	..lin.74adc43a..d9f4babd.0_38::
                          2095	.LDWlin38:
000002ce e800             2096		se_b	.L1256
                          2097	.L1147:
                          2098	#1433:    }
                          2099	#1434:    else if ((eraseAlignment & kFlashEraseLengthAligned) == 0x00ul)
000002d0 67e3             2100		se_btsti	r3, 30
000002d2 e200             2101		se_bne	.L1150
                          2102	.L1151:
                          2103	#1435:    {
                          2104	#1436:       /* Size alignment is not correct */
                          2105	#1437:       flashParam.errorCode = kFlashEraseInvalidSize;
000002d4 4c50             2106		se_li	r0, 69
                          2107	.L1256:
000002d6 d8ef             2108		se_stw	r30, 32(r31)
                          2109	#1438:       flashParam.errorAddress = eraseAddress;
                          2110	#line1438
                          2111	..lin.74adc43a..d9f4babd.0_39::
                          2112	.LDWlin39:
000002d8 b20f             2113		se_sth	r0, 4(r31)
000002da e800             2114		se_b	.L1149

                                   Fri Apr 10 08:32:08 2020           Page 39
                                   Fri Apr 10 08:32:08 2020   gh_00002441.si
                          2115	.L1150:
                          2116	#1439:    }
                          2117	#1440:    else
                          2118	#1441:    {
                          2119	#1442:       /* Prepare actual erase request to driver */
                          2120	#1443:       flashParam.blockSelect = flashBlockMask;
000002dc 18018008         2121		e_addi	r0, sp, 8
000002e0 70e0e000         2122		e_lis	r7, %hiadj(flashCode)
                          2123	#1444:       flashParam.address = eraseAddress;
                          2124	#line1444
                          2125	..lin.74adc43a..d9f4babd.0_40::
                          2126	.LDWlin40:
000002e4 db0f             2127		se_stw	r0, 44(r31)
                          2128	#1446:       /* Call erase routine of flash driver */
                          2129	#1447:       FLASH_DRIVER_ERASE(flashCode, &flashParam);
000002e6 1ce70000         2130		e_add16i	r7, r7, %lo(flashCode)
000002ea c307             2131		se_lwz	r0, 12(r7)
000002ec d2ef             2132		se_stw	r30, 8(r31)
000002ee 01f3             2133		se_mr	r3, r31
000002f0 0470             2134		se_add	r0, r7
000002f2 00b0             2135		se_mtctr	r0
000002f4 0007             2136		se_bctrl
                          2137	.L1149:
                          2138	#1448:    }
                          2139	#1450:    return flashParam.errorCode;
000002f6 a23f             2140		se_lhz	r3, 4(r31)
                          2141	#	    .ef
                          2142	.LDW12:
000002f8 c901             2143		se_lwz	r0, 36(sp)
000002fa 1bc10818         2144		e_lmw	r30, 24(sp)
000002fe 21f1             2145		se_addi	sp, 32
00000300 0090             2146		se_mtlr	r0
00000302 0004             2147		se_blr
                          2148		.global	__ghs_eofn_FlashDriver_REraseSync
                          2149	__ghs_eofn_FlashDriver_REraseSync:
                          2150		.type	FlashDriver_REraseSync,@function
                          2151		.size	FlashDriver_REraseSync,$-FlashDriver_REraseSync
                          2152		.align	1
                          2153	
                          2154	#function:			FlashDriver_REraseSync
                          2155	#stack frame size:		32
                          2156	#link area offset:		0
                          2157	#local storage area offset:	8
                          2158	#gpr save area offset:		24
                          2159	#
                          2160	#eraseAlignment	r3	local
                          2161	#flashBlockMask	8(sp)	local
                          2162	
                          2163	#eraseLength	r3	param
                          2164	#eraseAddress	r30	param
                          2165	
                          2166		.data
                          2167		.section ".vletext", "vax"
                          2168		.vle
                          2169		.vle
                          2170	

                                   Fri Apr 10 08:32:08 2020           Page 40
                                   Fri Apr 10 08:32:08 2020   gh_00002441.si
                          2171	#1451: }
                          2172	
                          2173	#1453: #if defined( FBL_ENABLE_USR_RREAD_SYNC )
                          2174	#1454: #else
                          2175	#1455: /***********************************************************************************************************************
                          2176	#1456:  *  FlashDriver_RReadSync
                          2177	#1457:  **********************************************************************************************************************/
                          2178	#1458: /*! \brief       Reads data from flash memory.
                          2179	#1459:  *  \details     This function reads data from flash memory. It can be configured to report ECC errors to the
                          2180	#1460:  *               calling function.
                          2181	#1461:  *  \param[out]  readBuffer Pointer to read target buffer. The buffer size must be at least readLength Bytes.
                          2182	#1462:  *  \param[in]   readLength Size of data to be read.
                          2183	#1463:  *  \param[in]   readAddress Start address of data to be read.
                          2184	#1464:  *  \return      Reports read success or error code.
                          2185	#1465:  **********************************************************************************************************************/
                          2186		.align	1
                          2187		.align	1
                          2188	..gh.f.p.5.a.1.r.0.e.6:
                          2189		.type	..gh.f.p.5.a.1.r.0.e.6,@object
                          2190		.size	..gh.f.p.5.a.1.r.0.e.6,0
                          2191		.global	FlashDriver_RReadSync
                          2192	FlashDriver_RReadSync:
00000304 182106f0         2193		e_stwu	sp, -16(sp)
00000308 1bc10908         2194		e_stmw	r30, 8(sp)
0000030c 0080             2195		se_mflr	r0
0000030e d501             2196		se_stw	r0, 20(sp)
                          2197	#	    .bf
                          2198	.LDW22:
00000310 70e0e000         2199		e_lis	r7, %hiadj(flashModule)
00000314 50e70000         2200		e_lwz	r7, %lo(flashModule)(r7)
                          2201	#1466: IO_ErrorType FlashDriver_RReadSync( IO_MemPtrType readBuffer, IO_SizeType readLength, IO_PositionType readAddress )
                          2202	#1467: {
                          2203	#1468: # if defined( FLASH_SETUP_RUNTIME )
                          2204	#1469:    vuint32 flashIndex;
                          2205	#1470: # endif /* FLASH_SETUP_RUNTIME */
                          2206	#1472: # if defined( FBL_FLASH_ENABLE_ECC_SAFE_READ )
                          2207	#1473:    IO_ErrorType result;
                          2208	#1475: #  if defined( FLASH_SETUP_RUNTIME )
                          2209	#1476:    flashIndex = ApplFblSelectFlashSetup();
                          2210	#1477: #   if( FBL_PROJECT_STATE == FBL_INTEGRATION)
                          2211	#1478:    if (flashIndex >= ARRAY_SIZE(flashModule))
                          2212	#1479:    {
                          2213	#1480:       while (1)
                          2214	#1481:       {
                          2215	#1482:          ;
                          2216	#1483:       }
                          2217	#1484:    }
                          2218	#1485: #   endif
                          2219	#1486:    flashModuleSelect = flashModule[flashIndex];
                          2220	#1487: #  else
                          2221	#1488:    flashModuleSelect = flashModule[kFblSingleFlashModule];
00000318 73c0e000         2222		e_lis	r30, %hiadj(flashModuleSelect)
0000031c 1fde0000         2223		e_add16i	r30, r30, %lo(flashModuleSelect)
00000320 d07e             2224		se_stw	r7, 0(r30)
                          2225	#1489: #  endif /* FLASH_SETUP_RUNTIME */
                          2226	#1491:    /* PRQA S 0303 TAG_RReadSync */ /* MD_FblFlioMpc57xx_0303 */

                                   Fri Apr 10 08:32:08 2020           Page 41
                                   Fri Apr 10 08:32:08 2020   gh_00002441.si
                          2227	#1492:    /* Clear ECC error detect register in flash module */
                          2228	#1493:    FLASH_REG(flashModuleSelect->flashBaseAddress, FBL_FLASH_MCR_OFFSET) |= FBL_FLASH_MCR_EER;
00000322 c277             2229		se_lwz	r7, 8(r7)
00000324 c007             2230		se_lwz	r0, 0(r7)
00000326 73ffe40a         2231		e_lis	r31, 64522
0000032a 1bff8110         2232		e_addi	r31, r31, 4096
                          2233	#1495:    /* Configure DMA transfer */
                          2234	#1496:    FBL_EDMA_TCD_SADDR(FLASH_DMA_CHANNEL) = readAddress;
0000032e 6500             2235		se_bseti	r0, 16
00000330 d007             2236		se_stw	r0, 0(r7)
00000332 d05f             2237		se_stw	r5, 0(r31)
                          2238	#1497:    FBL_EDMA_TCD_ATTR(FLASH_DMA_CHANNEL) = 0x00ul; /* SMOD disabled, 8 Bit source access,
00000334 4807             2239		se_li	r7, 0
00000336 b27f             2240		se_sth	r7, 4(r31)
                          2241	#1498:                                                      DMOD disabled, 8 Bit target access */
                          2242	#1499:    FBL_EDMA_TCD_SOFF(FLASH_DMA_CHANNEL) = 1; /* 1 Byte to be copied each cycle */
00000338 4810             2243		se_li	r0, 1
0000033a b30f             2244		se_sth	r0, 6(r31)
                          2245	#1500:    FBL_EDMA_TCD_NBYTES(FLASH_DMA_CHANNEL) = readLength;
0000033c d24f             2246		se_stw	r4, 8(r31)
                          2247	#1501:    FBL_EDMA_TCD_SLAST(FLASH_DMA_CHANNEL) = 0u;
0000033e d37f             2248		se_stw	r7, 12(r31)
                          2249	#1502:    FBL_EDMA_TCD_DADDR(FLASH_DMA_CHANNEL) = (vuint32)readBuffer;
00000340 d43f             2250		se_stw	r3, 16(r31)
                          2251	#1503:    FBL_EDMA_TCD_CITER(FLASH_DMA_CHANNEL) = 0x0001u; /* Disable channel-to-channel linking,
00000342 ba0f             2252		se_sth	r0, 20(r31)
                          2253	#1504:                                                        one DMA request to be processed */
                          2254	#1505:    FBL_EDMA_TCD_DOFF(FLASH_DMA_CHANNEL) = 1; /* 1 Byte to be copied each cycle */
00000344 bb0f             2255		se_sth	r0, 22(r31)
                          2256	#1506:    FBL_EDMA_TCD_DLASTSGA(FLASH_DMA_CHANNEL) = 0;
00000346 d67f             2257		se_stw	r7, 24(r31)
                          2258	#1507:    FBL_EDMA_TCD_BITER(FLASH_DMA_CHANNEL) = 0x0001u; /* Disable channel-to-channel linking,
00000348 be0f             2259		se_sth	r0, 28(r31)
                          2260	#1508:                                                        on DMA request to be processed */
                          2261	#1509:    FBL_EDMA_TCD_CSR(FLASH_DMA_CHANNEL) = 0x0001u; /* Start eDMA request */
0000034a bf0f             2262		se_sth	r0, 30(r31)
                          2263	#1511:    /* Poll to wait for end of DMA transfer */
                          2264	#1512:    while ((FBL_EDMA_TCD_CSR(FLASH_DMA_CHANNEL) & (FBL_EDMA_CSR_START | FBL_EDMA_CSR_ACTIVE)) != 0x0000u)
0000034c e800             2265		se_b	.L1259
                          2266	.L1261:
                          2267	#1513:    {
                          2268	#1514:       (void)FblLookForWatchdog();
                          2269	#line1514
                          2270	..lin.74adc43a..9843e289.0_41::
                          2271	.LDWlin41:
0000034e 78000001         2272		e_bl	FblLookForWatchdog
                          2273	.L1259:
00000352 af0f             2274		se_lhz	r0, 30(r31)
00000354 7000c841         2275		e_and2i.	r0, 65
00000358 e200             2276		se_bne	.L1261
                          2277	#1515:    }
                          2278	#1517:    /* Evaluate eDMA and ECC status */
                          2279	#1518:    if (   ((FBL_EDMA_TCD_CSR(FLASH_DMA_CHANNEL) & FBL_EDMA_CSR_DONE) == FBL_EDMA_CSR_DONE)
                          2280	#line1518
                          2281	..lin.74adc43a..9843e289.0_42::
                          2282	.LDWlin42:

                                   Fri Apr 10 08:32:08 2020           Page 42
                                   Fri Apr 10 08:32:08 2020   gh_00002441.si
0000035a af0f             2283		se_lhz	r0, 30(r31)
0000035c 6780             2284		se_btsti	r0, 24
0000035e e600             2285		se_beq	.L1262
00000360 c07e             2286		se_lwz	r7, 0(r30)
00000362 c207             2287		se_lwz	r0, 8(r7)
00000364 c000             2288		se_lwz	r0, 0(r0)
00000366 7010c800         2289		e_and2i.	r0, 32768
0000036a e600             2290		se_beq	.L1630
                          2291	#1519:        && ((FLASH_REG(flashModuleSelect->flashBaseAddress, FBL_FLASH_MCR_OFFSET) & FBL_FLASH_MCR_EER) != FBL_FLASH_MCR_EER))
                          2292	#1520:    {
                          2293	#1521:       result = IO_E_OK;
                          2294	.L1262:
                          2295	#1522:    }
                          2296	#1523:    else
                          2297	#1524:    {
                          2298	#1525:       /* Clear error flag */
                          2299	#1526:       FLASH_REG(flashModuleSelect->flashBaseAddress, FBL_FLASH_MCR_OFFSET) |= FBL_FLASH_MCR_EER;
                          2300	#line1526
                          2301	..lin.74adc43a..9843e289.0_43::
                          2302	.LDWlin43:
0000036c c07e             2303		se_lwz	r7, 0(r30)
0000036e c277             2304		se_lwz	r7, 8(r7)
00000370 c007             2305		se_lwz	r0, 0(r7)
00000372 6500             2306		se_bseti	r0, 16
00000374 d007             2307		se_stw	r0, 0(r7)
                          2308	#1528:       /* Read error detected */
                          2309	#1529:       flashParam.errorCode = kFlashFailed;
00000376 4810             2310		se_li	r0, 1
00000378 70e0e000         2311		e_lis	r7, %hiadj(flashParam+4)
0000037c 5c070000         2312		e_sth	r0, %lo(flashParam+4)(r7)
                          2313	.L1630:
                          2314	#1530:       result = IO_E_NOT_OK;
00000380 0103             2315		se_mr	r3, r0
                          2316	#1531:    }
                          2317	#1533:    /* PRQA L:TAG_RReadSync */
                          2318	#1535:    return result;
                          2319	.L1257:
                          2320	#	    .ef
                          2321	.LDW32:
00000382 c501             2322		se_lwz	r0, 20(sp)
00000384 1bc10808         2323		e_lmw	r30, 8(sp)
00000388 20f1             2324		se_addi	sp, 16
0000038a 0090             2325		se_mtlr	r0
0000038c 0004             2326		se_blr
                          2327		.global	__ghs_eofn_FlashDriver_RReadSync
                          2328	__ghs_eofn_FlashDriver_RReadSync:
                          2329		.type	FlashDriver_RReadSync,@function
                          2330		.size	FlashDriver_RReadSync,$-FlashDriver_RReadSync
                          2331		.align	1
                          2332	
                          2333	#function:			FlashDriver_RReadSync
                          2334	#stack frame size:		16
                          2335	#link area offset:		0
                          2336	#local storage area offset:	8
                          2337	#gpr save area offset:		8
                          2338	#

                                   Fri Apr 10 08:32:08 2020           Page 43
                                   Fri Apr 10 08:32:08 2020   gh_00002441.si
                          2339	#result	r3	local
                          2340	
                          2341	#readBuffer	r3	param
                          2342	#readLength	r4	param
                          2343	#readAddress	r5	param
                          2344	
                          2345		.data
                          2346		.section ".vletext", "vax"
                          2347		.vle
                          2348		.vle
                          2349	
                          2350	#1536: # else
                          2351	#1537:    /* Read flash with plain memcpy */
                          2352	#1538:    (void)MEMCPY((IO_U8 *)readBuffer, (IO_U8 *)readAddress, (IO_SizeType)readLength);
                          2353	#1540:    return IO_E_OK;
                          2354	#1541: # endif /* FBL_FLASH_ENABLE_ECC_SAFE_READ */
                          2355	#1542: }
                          2356	
                          2357	#1543: #endif /* FBL_ENABLE_USR_RREAD_SYNC */
                          2358	#1545: /***********************************************************************************************************************
                          2359	#1546:  *  FlashDriver_GetVersionOfDriver
                          2360	#1547:  **********************************************************************************************************************/
                          2361	#1548: /*! \brief       Reports the flash driver version.
                          2362	#1549:  *  \details     This function reads the flash driver version and reports it to the application. Depending on the
                          2363	#1550:  *               initialization state of the driver, the following data is reported:
                          2364	#1551:  *               - Flash driver version which was used to build the Bootloader if no driver has been downloaded yet.
                          2365	#1552:  *               - Actual flash driver version if the flash driver has been downloaded.
                          2366	#1553:  *  \return      BCD coded version of flash driver.
                          2367	#1554:  **********************************************************************************************************************/
                          2368		.align	1
                          2369		.align	1
                          2370	..gh.f.p.0.a.1.r.0.e.7:
                          2371		.type	..gh.f.p.0.a.1.r.0.e.7,@object
                          2372		.size	..gh.f.p.0.a.1.r.0.e.7,0
                          2373		.global	FlashDriver_GetVersionOfDriver
                          2374	FlashDriver_GetVersionOfDriver:
                          2375	#	    .bf
                          2376	.LDW42:
                          2377	#1555: IO_U32 FlashDriver_GetVersionOfDriver( void )
                          2378	#1556: {
                          2379	#1557:    IO_U32 returnValue;
                          2380	#1558:    /* Check if flash code is present */
                          2381	#1559:    if (    FLASH_DRIVER_MCUTYPE(flashCode)   != FLASH_DRIVER_VERSION_MCUTYPE
0000038e 70e0e000         2382		e_lis	r7, %hiadj(flashCode)
00000392 1ce70000         2383		e_add16i	r7, r7, %lo(flashCode)
00000396 8307             2384		se_lbz	r0, 3(r7)
00000398 1800a857         2385		e_cmpi	r0, 87
0000039c e200             2386		se_bne	.L1634
0000039e 8207             2387		se_lbz	r0, 2(r7)
000003a0 2a00             2388		se_cmpi	r0, 0
000003a2 e200             2389		se_bne	.L1634
000003a4 8007             2390		se_lbz	r0, 0(r7)
000003a6 2a10             2391		se_cmpi	r0, 1
000003a8 e600             2392		se_beq	.L1633
                          2393	.L1634:
                          2394	#1560:         || FLASH_DRIVER_MASKTYPE(flashCode)  != FLASH_DRIVER_VERSION_MASKTYPE

                                   Fri Apr 10 08:32:08 2020           Page 44
                                   Fri Apr 10 08:32:08 2020   gh_00002441.si
                          2395	#1561:         || FLASH_DRIVER_INTERFACE(flashCode) != FLASH_DRIVER_VERSION_INTERFACE
                          2396	#1562:       )
                          2397	#1563:    {
                          2398	#1564:       /* Flash driver not present or signature mismatch: return built-in version */
                          2399	#1565:       returnValue = (IO_U32)(((IO_U32)FLASH_DRIVER_VERSION_MAJOR << 16u) | \
                          2400	#line1565
                          2401	..lin.74adc43a..ffd1cfa5.0_44::
                          2402	.LDWlin44:
000003aa 70600e00         2403		e_li	r3, 67072
000003ae 0004             2404		se_blr
                          2405	.L1633:
                          2406	#1566:                              ((IO_U32)FLASH_DRIVER_VERSION_MINOR <<  8u) | \
                          2407	#1567:                              ((IO_U32)FLASH_DRIVER_VERSION_PATCH));
                          2408	#1568:    }
                          2409	#1569:    else
                          2410	#1570:    {
                          2411	#1571:       /* Flash driver is present, return actual version */
                          2412	#1572:       returnValue = (IO_U32)(((IO_U32)flashParam.majorVersion << 16) | \
000003b0 70e0e000         2413		e_lis	r7, %hiadj(flashParam)
000003b4 1ce70000         2414		e_add16i	r7, r7, %lo(flashParam)
000003b8 8237             2415		se_lbz	r3, 2(r7)
000003ba 8107             2416		se_lbz	r0, 1(r7)
000003bc 6d03             2417		se_slwi	r3, 16
000003be 7403442e         2418		e_rlwimi	r3, r0, 8, 16, 23
000003c2 8007             2419		se_lbz	r0, 0(r7)
000003c4 4403             2420		se_or	r3, r0
                          2421	#1573:                              ((IO_U32)flashParam.minorVersion <<  8) | \
                          2422	#1574:                              ((IO_U32)flashParam.patchLevel));
                          2423	#1575:    }
                          2424	#1577:    return returnValue;
                          2425	#	    .ef
                          2426	.LDW52:
000003c6 0004             2427		se_blr
                          2428		.global	__ghs_eofn_FlashDriver_GetVersionOfDriver
                          2429	__ghs_eofn_FlashDriver_GetVersionOfDriver:
                          2430		.type	FlashDriver_GetVersionOfDriver,@function
                          2431		.size	FlashDriver_GetVersionOfDriver,$-FlashDriver_GetVersionOfDriver
                          2432		.align	1
                          2433	
                          2434	#function:			FlashDriver_GetVersionOfDriver
                          2435	#stack frame size:		0
                          2436	#
                          2437	#returnValue	r3	local
                          2438	
                          2439		.data
                          2440		.section ".vletext", "vax"
                          2441		.vle
                          2442		.vle
                          2443	
                          2444	#1578: }
                          2445		.align	1
                          2446	#flashParam	flashParam	static
                          2447	#flashBlocks_6	flashBlocks_6	static
                          2448	#flash_user_protection_6	flash_user_protection_6	static
                          2449	#flashModule_6	flashModule_6	static
                          2450	#flashModule	flashModule	static

                                   Fri Apr 10 08:32:08 2020           Page 45
                                   Fri Apr 10 08:32:08 2020   gh_00002441.si
                          2451	#flashModuleSelect	flashModuleSelect	static
                          2452	
                          2453		.data
                          2454		.section "FLASHDRV","awb"
                          2455		.global	flashCode
00000000 0000000000000000 2456	flashCode:	.space	1536
00000008 0000000000000000
00000010 0000000000000000
00000018 0000000000000000
00000020 0000000000000000
00000028 0000000000000000
00000030 0000000000000000
00000038 0000000000000000
00000040 0000000000000000
00000048 0000000000000000
00000050 0000000000000000
00000058 0000000000000000
00000060 0000000000000000
00000068 0000000000000000
00000070 0000000000000000
00000078 0000000000000000
00000080 0000000000000000
00000088 0000000000000000
00000090 0000000000000000
00000098 0000000000000000
000000a0 0000000000000000
000000a8 0000000000000000
000000b0 0000000000000000
000000b8 0000000000000000
000000c0 0000000000000000
000000c8 0000000000000000
000000d0 0000000000000000
000000d8 0000000000000000
000000e0 0000000000000000
000000e8 0000000000000000
000000f0 0000000000000000
000000f8 0000000000000000
                          2457		.type	flashCode,@object
                          2458		.size	flashCode,1536
                          2459		.data
                          2460		.note ".PPC.EMB.apuinfo",""
00000000 00000008         2461		.long	0x00000008
00000004 00000004         2462		.long	4
00000008 00000002         2463		.long	0x00000002
                          2464		# "APUinfo\000"
0000000c 41505569         2465		.byte	65,80,85,105
00000010 6e666f00         2466		.byte	110,102,111,0
00000014 01040001         2467		.long	0x01040001
                          2468		.ghsnote version,20
                          2469		.ghsnote tools,3
                          2470		.ghsnote options,644
                          2471		.section ".vletext", "vax"
                          2472		.vle
                          2473		.vle
                          2474		.align	1
                          2475	..eof.C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_flio...43.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl..5E8FB078..0::
                          2476		.section	.debug_info
                          2477	.Ldw_begin:
00000000 00000ce3         2478		.long	.Ldw_end-.Ldw_begin-4
00000004 0002             2479		.byte	0,2
00000006 00000000         2480		.long	.Ldw_abbr_begin
0000000a 04               2481		.byte	4
                          2482		.section	.debug_abbrev
                          2483	.Ldw_abbr_begin:
                          2484		.section	.debug_info
0000000b 01               2485		.byte	1
0000000c 00000000         2486		.long	..bof.C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_flio...43.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl..5E8FB078..0
00000010 00000000         2487		.long	..eof.C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_flio...43.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl..5E8FB078..0
00000014 2e2e2f2e2e2f2e2e 2488		.strz	"../../../BSW/Fbl/fbl_flio.c"
0000001c 2f4253572f46626c
00000024 2f66626c5f666c69
0000002c 6f2e6300        
00000030 433a5c566563746f 2489		.strz	"C:\\Vector\\CBD1800772_D00_Mpc57xx\\Demo\\DemoFbl\\Appl"
00000038 725c434244313830
00000040 303737325f443030
00000048 5f4d706335377878
00000050 5c44656d6f5c4465
00000058 6d6f46626c5c4170
00000060 706c00          
00000063 4748532043203230 2490		.strz	"GHS C 2017.5.4 [dual]"
0000006b 31372e352e34205b
00000073 6475616c5d00    
00000079 0001             2491		.byte	0,1
0000007b 00000000         2492		.long	.Ldw_line_begin
0000007f 00000000         2493		.long	.Ldw_macinfo_begin
00000083 00               2494		.byte	0
                          2495	
                          2496		.section	.debug_abbrev
00000000 01               2497		.byte	1
00000001 11               2498		.byte	17
00000002 01               2499		.byte	1
00000003 1101             2500		.byte	17,1
00000005 1201             2501		.byte	18,1
00000007 0308             2502		.byte	3,8
00000009 1b08             2503		.byte	27,8
0000000b 2508             2504		.byte	37,8
0000000d 1305             2505		.byte	19,5
0000000f 1006             2506		.byte	16,6

                                   Fri Apr 10 08:32:08 2020           Page 46
                                   Fri Apr 10 08:32:08 2020   gh_00002441.si
00000011 4306             2507		.byte	67,6
00000013 420b             2508		.byte	66,11
00000015 0000             2509		.byte	0,0
                          2510	
                          2511		.section	.debug_line
                          2512	.Ldw_line_begin:
00000000 00000995         2513		.long	.Ldw_line_end-.Ldw_line_begin-4
00000004 0002             2514		.byte	0,2
00000006 000005f1         2515		.long	.Ldw_lpro_end-.Ldw_lpro_begin
                          2516	.Ldw_lpro_begin:
0000000a 01               2517		.byte	1
0000000b 00               2518		.byte	0
0000000c 00               2519		.byte	0
0000000d 04               2520		.byte	4
0000000e 0a               2521		.byte	10
0000000f 000101           2522		.byte	0,1,1
00000012 010100           2523		.byte	1,1,0
00000015 000001           2524		.byte	0,0,1
00000018 00               2525		.byte	0
00000019 2e2e2f2e2e2f2e2e 2526		.strz	"../../../BSW/Fbl/fbl_flio.c"
00000021 2f4253572f46626c
00000029 2f66626c5f666c69
00000031 6f2e6300        
00000035 000000           2527		.byte	0,0,0
00000038 696e636c7564655c 2528		.strz	"include\\fbl_inc.h"
00000040 66626c5f696e632e
00000048 6800            
0000004a 000000           2529		.byte	0,0,0
0000004d 2e2e2f2e2e2f2e2e 2530		.strz	"../../../bsw/fbl/v_ver.h"
00000055 2f6273772f66626c
0000005d 2f765f7665722e68
00000065 00              
00000066 000000           2531		.byte	0,0,0
00000069 67656e646174615c 2532		.strz	"gendata\\v_cfg.h"
00000071 765f6366672e6800
00000079 000000           2533		.byte	0,0,0
0000007c 67656e646174615c 2534		.strz	"gendata\\v_inc.h"
00000084 765f696e632e6800
0000008c 000000           2535		.byte	0,0,0
0000008f 67656e646174615c 2536		.strz	"gendata\\v_par.h"
00000097 765f7061722e6800
0000009f 000000           2537		.byte	0,0,0
000000a2 2e2e2f2e2e2f2e2e 2538		.strz	"../../../bsw/_common/v_def.h"
000000aa 2f6273772f5f636f
000000b2 6d6d6f6e2f765f64
000000ba 65662e6800      
000000bf 000000           2539		.byte	0,0,0
000000c2 2e2e2f2e2e2f2e2e 2540		.strz	"../../../bsw/secmod/SecM.h"
000000ca 2f6273772f736563
000000d2 6d6f642f5365634d
000000da 2e6800          
000000dd 000000           2541		.byte	0,0,0
000000e0 2e2e2f2e2e2f2e2e 2542		.strz	"../../../bsw/secmod/Sec.h"
000000e8 2f6273772f736563
000000f0 6d6f642f5365632e
000000f8 6800            
000000fa 000000           2543		.byte	0,0,0
000000fd 2e2e2f2e2e2f2e2e 2544		.strz	"../../../bsw/secmod/Sec_Inc.h"
00000105 2f6273772f736563
0000010d 6d6f642f5365635f
00000115 496e632e6800    
0000011b 000000           2545		.byte	0,0,0
0000011e 67656e646174615c 2546		.strz	"gendata\\SecM_cfg.h"
00000126 5365634d5f636667
0000012e 2e6800          
00000131 000000           2547		.byte	0,0,0
00000134 2e2e2f2e2e2f2e2e 2548		.strz	"../../../bsw/secmod/Sec_Types.h"
0000013c 2f6273772f736563
00000144 6d6f642f5365635f
0000014c 54797065732e6800
00000154 000000           2549		.byte	0,0,0
00000157 67656e646174615c 2550		.strz	"gendata\\SecMPar.h"
0000015f 5365634d5061722e
00000167 6800            
00000169 000000           2551		.byte	0,0,0
0000016c 2e2e2f2e2e2f2e2e 2552		.strz	"../../../bsw/secmod/SecM_inc.h"
00000174 2f6273772f736563
0000017c 6d6f642f5365634d
00000184 5f696e632e6800  
0000018b 000000           2553		.byte	0,0,0
0000018e 2e2e2f2e2e2f2e2e 2554		.strz	"../../../bsw/secmod/Sec_Crc.h"
00000196 2f6273772f736563
0000019e 6d6f642f5365635f
000001a6 4372632e6800    
000001ac 000000           2555		.byte	0,0,0
000001af 2e2e2f2e2e2f2e2e 2556		.strz	"../../../bsw/secmod/Sec_SeedKey.h"
000001b7 2f6273772f736563
000001bf 6d6f642f5365635f
000001c7 536565644b65792e
000001cf 6800            
000001d1 000000           2557		.byte	0,0,0
000001d4 696e636c7564655c 2558		.strz	"include\\Sec_SeedKey_Cfg.h"
000001dc 5365635f53656564
000001e4 4b65795f4366672e
000001ec 6800            
000001ee 000000           2559		.byte	0,0,0
000001f1 2e2e2f2e2e2f2e2e 2560		.strz	"../../../bsw/secmod/Sec_Verification.h"
000001f9 2f6273772f736563
00000201 6d6f642f5365635f
00000209 5665726966696361
00000211 74696f6e2e6800  
00000218 000000           2561		.byte	0,0,0
0000021b 2e2e2f2e2e2f2e2e 2562		.strz	"../../../bsw/fbl/fbl_def.h"
00000223 2f6273772f66626c
0000022b 2f66626c5f646566
00000233 2e6800          

                                   Fri Apr 10 08:32:08 2020           Page 47
                                   Fri Apr 10 08:32:08 2020   gh_00002441.si
00000236 000000           2563		.byte	0,0,0
00000239 67656e646174615c 2564		.strz	"gendata\\fbl_cfg.h"
00000241 66626c5f6366672e
00000249 6800            
0000024b 000000           2565		.byte	0,0,0
0000024e 2e2e2f2e2e2f2e2e 2566		.strz	"../../../bsw/fbl/fbl_assert.h"
00000256 2f6273772f66626c
0000025e 2f66626c5f617373
00000266 6572742e6800    
0000026c 000000           2567		.byte	0,0,0
0000026f 2e2e2f2e2e2f2e2e 2568		.strz	"../../../bsw/fbl/fbl_assert_oem.h"
00000277 2f6273772f66626c
0000027f 2f66626c5f617373
00000287 6572745f6f656d2e
0000028f 6800            
00000291 000000           2569		.byte	0,0,0
00000294 67656e646174615c 2570		.strz	"gendata\\fbl_mtab.h"
0000029c 66626c5f6d746162
000002a4 2e6800          
000002a7 000000           2571		.byte	0,0,0
000002aa 696e636c7564655c 2572		.strz	"include\\MemMap.h"
000002b2 4d656d4d61702e68
000002ba 00              
000002bb 000000           2573		.byte	0,0,0
000002be 2e2e2f2e2e2f2e2e 2574		.strz	"../../../bsw/flash/flashdrv.h"
000002c6 2f6273772f666c61
000002ce 73682f666c617368
000002d6 6472762e6800    
000002dc 000000           2575		.byte	0,0,0
000002df 2e2e2f2e2e2f2e2e 2576		.strz	"../../../bsw/flash_xd1/flashdrv_xd1.h"
000002e7 2f6273772f666c61
000002ef 73685f7864312f66
000002f7 6c6173686472765f
000002ff 7864312e6800    
00000305 000000           2577		.byte	0,0,0
00000308 2e2e2f2e2e2f2e2e 2578		.strz	"../../../bsw/fbl/fbl_wd.h"
00000310 2f6273772f66626c
00000318 2f66626c5f77642e
00000320 6800            
00000322 000000           2579		.byte	0,0,0
00000325 2e2e2f2e2e2f2e2e 2580		.strz	"../../../bsw/fbl/iotypes.h"
0000032d 2f6273772f66626c
00000335 2f696f7479706573
0000033d 2e6800          
00000340 000000           2581		.byte	0,0,0
00000343 2e2e2f2e2e2f2e2e 2582		.strz	"../../../bsw/fbl/fbl_mio.h"
0000034b 2f6273772f66626c
00000353 2f66626c5f6d696f
0000035b 2e6800          
0000035e 000000           2583		.byte	0,0,0
00000361 2e2e2f2e2e2f2e2e 2584		.strz	"../../../bsw/fbl/fbl_flio.h"
00000369 2f6273772f66626c
00000371 2f66626c5f666c69
00000379 6f2e6800        
0000037d 000000           2585		.byte	0,0,0
00000380 2e2e2f2e2e2f2e2e 2586		.strz	"../../../bsw/fbl/fbl_flio_xd1.h"
00000388 2f6273772f66626c
00000390 2f66626c5f666c69
00000398 6f5f7864312e6800
000003a0 000000           2587		.byte	0,0,0
000003a3 2e2e2f2e2e2f2e2e 2588		.strz	"../../../bsw/eep/EepInc.h"
000003ab 2f6273772f656570
000003b3 2f456570496e632e
000003bb 6800            
000003bd 000000           2589		.byte	0,0,0
000003c0 2e2e2f2e2e2f2e2e 2590		.strz	"../../../bsw/eep/EepIO.h"
000003c8 2f6273772f656570
000003d0 2f456570494f2e68
000003d8 00              
000003d9 000000           2591		.byte	0,0,0
000003dc 2e2e2f2e2e2f2e2e 2592		.strz	"../../../bsw/fbl/applvect.h"
000003e4 2f6273772f66626c
000003ec 2f6170706c766563
000003f4 742e6800        
000003f8 000000           2593		.byte	0,0,0
000003fb 2e2e2f2e2e2f2e2e 2594		.strz	"../../../bsw/fbl/fbl_cw.h"
00000403 2f6273772f66626c
0000040b 2f66626c5f63772e
00000413 6800            
00000415 000000           2595		.byte	0,0,0
00000418 67656e646174615c 2596		.strz	"gendata\\fbl_cw_cfg.h"
00000420 66626c5f63775f63
00000428 66672e6800      
0000042d 000000           2597		.byte	0,0,0
00000430 2e2e2f2e2e2f2e2e 2598		.strz	"../../../bsw/fbl/fbl_hw.h"
00000438 2f6273772f66626c
00000440 2f66626c5f68772e
00000448 6800            
0000044a 000000           2599		.byte	0,0,0
0000044d 2e2e2f2e2e2f2e2e 2600		.strz	"../../../bsw/fbl/fbl_sfr.h"
00000455 2f6273772f66626c
0000045d 2f66626c5f736672
00000465 2e6800          
00000468 000000           2601		.byte	0,0,0
0000046b 67656e646174615c 2602		.strz	"gendata\\ftp_cfg.h"
00000473 6674705f6366672e
0000047b 6800            
0000047d 000000           2603		.byte	0,0,0
00000480 2e2e2f2e2e2f2e2e 2604		.strz	"../../../bsw/fbl/fbl_tp.h"
00000488 2f6273772f66626c
00000490 2f66626c5f74702e
00000498 6800            
0000049a 000000           2605		.byte	0,0,0
0000049d 696e636c7564655c 2606		.strz	"include\\WrapNv_inc.h"
000004a5 577261704e765f69
000004ad 6e632e6800      
000004b2 000000           2607		.byte	0,0,0
000004b5 2e2e2f2e2e2f2e2e 2608		.strz	"../../../bsw/wrapnv/WrapNv.h"
000004bd 2f6273772f777261
000004c5 706e762f57726170
000004cd 4e762e6800      
000004d2 000000           2609		.byte	0,0,0
000004d5 67656e646174615c 2610		.strz	"gendata\\WrapNv_cfg.h"
000004dd 577261704e765f63
000004e5 66672e6800      
000004ea 000000           2611		.byte	0,0,0
000004ed 67656e646174615c 2612		.strz	"gendata\\fbl_apfb.h"
000004f5 66626c5f61706662
000004fd 2e6800          
00000500 000000           2613		.byte	0,0,0
00000503 2e2e2f2e2e2f2e2e 2614		.strz	"../../../bsw/fbl/fbl_diag.h"
0000050b 2f6273772f66626c
00000513 2f66626c5f646961
0000051b 672e6800        
0000051f 000000           2615		.byte	0,0,0
00000522 2e2e2f2e2e2f2e2e 2616		.strz	"../../../bsw/fbl/fbl_diag_oem.h"
0000052a 2f6273772f66626c
00000532 2f66626c5f646961
0000053a 675f6f656d2e6800
00000542 000000           2617		.byte	0,0,0
00000545 2e2e2f2e2e2f2e2e 2618		.strz	"../../../bsw/fbl/fbl_mem.h"
0000054d 2f6273772f66626c
00000555 2f66626c5f6d656d
0000055d 2e6800          

                                   Fri Apr 10 08:32:08 2020           Page 48
                                   Fri Apr 10 08:32:08 2020   gh_00002441.si
00000560 000000           2619		.byte	0,0,0
00000563 2e2e2f2e2e2f2e2e 2620		.strz	"../../../bsw/fbl/fbl_mem_oem.h"
0000056b 2f6273772f66626c
00000573 2f66626c5f6d656d
0000057b 5f6f656d2e6800  
00000582 000000           2621		.byte	0,0,0
00000585 696e636c7564655c 2622		.strz	"include\\fbl_ap.h"
0000058d 66626c5f61702e68
00000595 00              
00000596 000000           2623		.byte	0,0,0
00000599 696e636c7564655c 2624		.strz	"include\\fbl_apwd.h"
000005a1 66626c5f61707764
000005a9 2e6800          
000005ac 000000           2625		.byte	0,0,0
000005af 696e636c7564655c 2626		.strz	"include\\fbl_apdi.h"
000005b7 66626c5f61706469
000005bf 2e6800          
000005c2 000000           2627		.byte	0,0,0
000005c5 696e636c7564655c 2628		.strz	"include\\fbl_apnv.h"
000005cd 66626c5f61706e76
000005d5 2e6800          
000005d8 000000           2629		.byte	0,0,0
000005db 2e2e2f2e2e2f2e2e 2630		.strz	"../../../bsw/fbl/fbl_main.h"
000005e3 2f6273772f66626c
000005eb 2f66626c5f6d6169
000005f3 6e2e6800        
000005f7 000000           2631		.byte	0,0,0
000005fa 00               2632		.byte	0
                          2633	.Ldw_lpro_end:
                          2634		.section	.debug_macinfo
                          2635	.Ldw_macinfo_begin:
                          2636		.section	.debug_frame
                          2637	.LDW_5df2118:
00000000 0000008c         2638		.long	.LDW_unq_2-.LDW_unq_1
                          2639	.LDW_unq_1:
00000004 ffffffff         2640		.byte	255,255,255,255
00000008 01               2641		.byte	1
00000009 00               2642		.byte	0
0000000a 01               2643		.byte	1
0000000b 01               2644		.byte	1
0000000c 6c               2645		.byte	108
0000000d 0c               2646		.byte	12
0000000e 01               2647		.byte	1
0000000f 00               2648		.byte	0
00000010 07               2649		.byte	7
00000011 00               2650		.byte	0
00000012 07               2651		.byte	7
00000013 01               2652		.byte	1
00000014 07               2653		.byte	7
00000015 02               2654		.byte	2
00000016 07               2655		.byte	7
00000017 03               2656		.byte	3
00000018 07               2657		.byte	7
00000019 04               2658		.byte	4
0000001a 07               2659		.byte	7
0000001b 05               2660		.byte	5
0000001c 07               2661		.byte	7
0000001d 06               2662		.byte	6
0000001e 07               2663		.byte	7
0000001f 07               2664		.byte	7
00000020 07               2665		.byte	7
00000021 08               2666		.byte	8
00000022 07               2667		.byte	7
00000023 09               2668		.byte	9
00000024 07               2669		.byte	7
00000025 0a               2670		.byte	10
00000026 07               2671		.byte	7
00000027 0b               2672		.byte	11
00000028 07               2673		.byte	7
00000029 0c               2674		.byte	12

                                   Fri Apr 10 08:32:08 2020           Page 49
                                   Fri Apr 10 08:32:08 2020   gh_00002441.si
0000002a 07               2675		.byte	7
0000002b 0d               2676		.byte	13
0000002c 07               2677		.byte	7
0000002d 0e               2678		.byte	14
0000002e 07               2679		.byte	7
0000002f 0f               2680		.byte	15
00000030 07               2681		.byte	7
00000031 10               2682		.byte	16
00000032 07               2683		.byte	7
00000033 11               2684		.byte	17
00000034 07               2685		.byte	7
00000035 12               2686		.byte	18
00000036 07               2687		.byte	7
00000037 13               2688		.byte	19
00000038 07               2689		.byte	7
00000039 14               2690		.byte	20
0000003a 07               2691		.byte	7
0000003b 15               2692		.byte	21
0000003c 07               2693		.byte	7
0000003d 16               2694		.byte	22
0000003e 07               2695		.byte	7
0000003f 17               2696		.byte	23
00000040 07               2697		.byte	7
00000041 18               2698		.byte	24
00000042 07               2699		.byte	7
00000043 19               2700		.byte	25
00000044 07               2701		.byte	7
00000045 1a               2702		.byte	26
00000046 07               2703		.byte	7
00000047 1b               2704		.byte	27
00000048 07               2705		.byte	7
00000049 1c               2706		.byte	28
0000004a 07               2707		.byte	7
0000004b 1d               2708		.byte	29
0000004c 07               2709		.byte	7
0000004d 1e               2710		.byte	30
0000004e 07               2711		.byte	7
0000004f 1f               2712		.byte	31
00000050 07               2713		.byte	7
00000051 20               2714		.byte	32
00000052 07               2715		.byte	7
00000053 21               2716		.byte	33
00000054 07               2717		.byte	7
00000055 22               2718		.byte	34
00000056 07               2719		.byte	7
00000057 23               2720		.byte	35
00000058 07               2721		.byte	7
00000059 24               2722		.byte	36
0000005a 07               2723		.byte	7
0000005b 25               2724		.byte	37
0000005c 07               2725		.byte	7
0000005d 26               2726		.byte	38
0000005e 07               2727		.byte	7
0000005f 27               2728		.byte	39
00000060 07               2729		.byte	7
00000061 28               2730		.byte	40

                                   Fri Apr 10 08:32:08 2020           Page 50
                                   Fri Apr 10 08:32:08 2020   gh_00002441.si
00000062 07               2731		.byte	7
00000063 29               2732		.byte	41
00000064 07               2733		.byte	7
00000065 2a               2734		.byte	42
00000066 07               2735		.byte	7
00000067 2b               2736		.byte	43
00000068 07               2737		.byte	7
00000069 2c               2738		.byte	44
0000006a 07               2739		.byte	7
0000006b 2d               2740		.byte	45
0000006c 07               2741		.byte	7
0000006d 2e               2742		.byte	46
0000006e 07               2743		.byte	7
0000006f 2f               2744		.byte	47
00000070 07               2745		.byte	7
00000071 30               2746		.byte	48
00000072 07               2747		.byte	7
00000073 31               2748		.byte	49
00000074 07               2749		.byte	7
00000075 32               2750		.byte	50
00000076 07               2751		.byte	7
00000077 33               2752		.byte	51
00000078 07               2753		.byte	7
00000079 34               2754		.byte	52
0000007a 07               2755		.byte	7
0000007b 35               2756		.byte	53
0000007c 07               2757		.byte	7
0000007d 36               2758		.byte	54
0000007e 07               2759		.byte	7
0000007f 37               2760		.byte	55
00000080 07               2761		.byte	7
00000081 38               2762		.byte	56
00000082 07               2763		.byte	7
00000083 39               2764		.byte	57
00000084 07               2765		.byte	7
00000085 3a               2766		.byte	58
00000086 07               2767		.byte	7
00000087 3b               2768		.byte	59
00000088 07               2769		.byte	7
00000089 3c               2770		.byte	60
0000008a 07               2771		.byte	7
0000008b 3d               2772		.byte	61
0000008c 07               2773		.byte	7
0000008d 3e               2774		.byte	62
0000008e 07               2775		.byte	7
0000008f 3f               2776		.byte	63
                          2777	.LDW_unq_2:
                          2778		.section	.debug_info
                          2779	.LDW_4a9c8a8:
00000084 27               2780		.byte	39
00000085 756e7369676e6564 2781		.strz	"unsigned long"
0000008d 206c6f6e6700    
00000093 07               2782		.byte	7
00000094 04               2783		.byte	4
                          2784	
                          2785		.section	.debug_abbrev
00000017 27               2786		.byte	39

                                   Fri Apr 10 08:32:08 2020           Page 51
                                   Fri Apr 10 08:32:08 2020   gh_00002441.si
00000018 24               2787		.byte	36
00000019 00               2788		.byte	0
0000001a 0308             2789		.byte	3,8
0000001c 3e0b             2790		.byte	62,11
0000001e 0b0b             2791		.byte	11,11
00000020 0000             2792		.byte	0,0
                          2793	
                          2794		.section	.debug_info
                          2795	.LDW_4adda68:
00000095 2b               2796		.byte	43
00000096 00000000         2797		.long	.LDW_4adda10
                          2798	
                          2799		.section	.debug_abbrev
00000022 2b               2800		.byte	43
00000023 26               2801		.byte	38
00000024 00               2802		.byte	0
00000025 4910             2803		.byte	73,16
00000027 0000             2804		.byte	0,0
                          2805	
                          2806		.section	.debug_info
                          2807	.LDW_4a9c5d0:
0000009a 31               2808		.byte	49
0000009b 00000000         2809		.long	.LDW_4adda68
                          2810	
                          2811		.section	.debug_abbrev
00000029 31               2812		.byte	49
0000002a 0f               2813		.byte	15
0000002b 00               2814		.byte	0
0000002c 4910             2815		.byte	73,16
0000002e 0000             2816		.byte	0,0
                          2817	
                          2818		.section	.debug_info
                          2819	.LDW_4ada530:
0000009f 2b               2820		.byte	43
000000a0 00000000         2821		.long	.LDW_4ada4d8
                          2822	
                          2823	.LDW_4a9c7c8:
000000a4 31               2824		.byte	49
000000a5 00000000         2825		.long	.LDW_4ada530
                          2826	
                          2827	.LDW_4a9c988:
000000a9 46               2828		.byte	70
000000aa 00000000         2829		.long	.LDW_4adef90
000000ae 01               2830		.byte	1
                          2831	
                          2832		.section	.debug_abbrev
00000030 46               2833		.byte	70
00000031 15               2834		.byte	21
00000032 01               2835		.byte	1
00000033 4910             2836		.byte	73,16
00000035 270c             2837		.byte	39,12
00000037 0000             2838		.byte	0,0
                          2839	
                          2840		.section	.debug_info
                          2841	.LDW_4a932c0:
000000af 14               2842		.byte	20

                                   Fri Apr 10 08:32:08 2020           Page 52
                                   Fri Apr 10 08:32:08 2020   gh_00002441.si
000000b0 00000000         2843		.long	.LDW_4a9c5d0
000000b4 00               2844		.byte	0
                          2845	
                          2846		.section	.debug_abbrev
00000039 14               2847		.byte	20
0000003a 05               2848		.byte	5
0000003b 00               2849		.byte	0
0000003c 4910             2850		.byte	73,16
0000003e 4b0c             2851		.byte	75,12
00000040 0000             2852		.byte	0,0
                          2853	
                          2854		.section	.debug_info
                          2855	.LDW_4a93620:
000000b5 14               2856		.byte	20
000000b6 00000000         2857		.long	.LDW_4a9c7c8
000000ba 00               2858		.byte	0
                          2859	
000000bb 00               2860		.byte	0
                          2861	
                          2862	.LDW_4a9c598:
000000bc 31               2863		.byte	49
000000bd 00000000         2864		.long	.LDW_4adef90
                          2865	
                          2866	.LDW_4a9c560:
000000c1 46               2867		.byte	70
000000c2 00000000         2868		.long	.LDW_4adef90
000000c6 01               2869		.byte	1
                          2870	
                          2871	.LDW_4a933e0:
000000c7 14               2872		.byte	20
000000c8 00000000         2873		.long	.LDW_4a9c598
000000cc 00               2874		.byte	0
                          2875	
                          2876	.LDW_4a93410:
000000cd 14               2877		.byte	20
000000ce 00000000         2878		.long	.LDW_4ada728
000000d2 00               2879		.byte	0
                          2880	
                          2881	.LDW_4a932f0:
000000d3 14               2882		.byte	20
000000d4 00000000         2883		.long	.LDW_4ada780
000000d8 00               2884		.byte	0
                          2885	
000000d9 00               2886		.byte	0
                          2887	
                          2888	.LDW_4a9ca30:
000000da 27               2889		.byte	39
000000db 756e7369676e6564 2890		.strz	"unsigned short"
000000e3 2073686f727400  
000000ea 07               2891		.byte	7
000000eb 02               2892		.byte	2
                          2893	
                          2894	.LDW_4a9c6e8:
000000ec 27               2895		.byte	39
000000ed 766f69642a00     2896		.strz	"void*"
000000f3 01               2897		.byte	1
000000f4 04               2898		.byte	4

                                   Fri Apr 10 08:32:08 2020           Page 53
                                   Fri Apr 10 08:32:08 2020   gh_00002441.si
                          2899	
                          2900	.LDW_4a9c608:
000000f5 46               2901		.byte	70
000000f6 00000000         2902		.long	.LDW_5bf52a8
000000fa 01               2903		.byte	1
                          2904	
                          2905	.LDW_4a931a0:
000000fb 14               2906		.byte	20
000000fc 00000000         2907		.long	.LDW_4a9c6e8
00000100 00               2908		.byte	0
                          2909	
00000101 00               2910		.byte	0
                          2911	
                          2912	.LDW_4a9c8e0:
00000102 46               2913		.byte	70
00000103 00000000         2914		.long	.LDW_5bf52a8
00000107 01               2915		.byte	1
                          2916	
                          2917	.LDW_4a93560:
00000108 14               2918		.byte	20
00000109 00000000         2919		.long	.LDW_4a9c6e8
0000010d 00               2920		.byte	0
                          2921	
0000010e 00               2922		.byte	0
                          2923	
                          2924	.LDW_4a9c800:
0000010f 27               2925		.byte	39
00000110 756e7369676e6564 2926		.strz	"unsigned char"
00000118 206368617200    
0000011e 08               2927		.byte	8
0000011f 01               2928		.byte	1
                          2929	
                          2930	.LDW_4a9c918:
00000120 31               2931		.byte	49
00000121 00000000         2932		.long	.LDW_5bf5250
                          2933	
                          2934	.LDW_4a9c640:
00000125 46               2935		.byte	70
00000126 00000000         2936		.long	.LDW_5bf52a8
0000012a 01               2937		.byte	1
                          2938	
                          2939	.LDW_4a93290:
0000012b 14               2940		.byte	20
0000012c 00000000         2941		.long	.LDW_5bf5300
00000130 00               2942		.byte	0
                          2943	
                          2944	.LDW_4a93440:
00000131 14               2945		.byte	20
00000132 00000000         2946		.long	.LDW_4ada728
00000136 00               2947		.byte	0
                          2948	
                          2949	.LDW_4a93350:
00000137 14               2950		.byte	20
00000138 00000000         2951		.long	.LDW_4ada780
0000013c 00               2952		.byte	0
                          2953	
0000013d 00               2954		.byte	0

                                   Fri Apr 10 08:32:08 2020           Page 54
                                   Fri Apr 10 08:32:08 2020   gh_00002441.si
                          2955	
                          2956	.LDW_4a9c950:
0000013e 27               2957		.byte	39
0000013f 696e7400         2958		.strz	"int"
00000143 05               2959		.byte	5
00000144 04               2960		.byte	4
                          2961	
                          2962	.LDW_5bf5728:
00000145 3c               2963		.byte	60
00000146 00               2964		.byte	0
00000147 10               2965		.byte	16
00000148 00000000         2966		.long	.LDW_4adef90
                          2967	
                          2968		.section	.debug_abbrev
00000042 3c               2969		.byte	60
00000043 01               2970		.byte	1
00000044 01               2971		.byte	1
00000045 090b             2972		.byte	9,11
00000047 0b0f             2973		.byte	11,15
00000049 4910             2974		.byte	73,16
0000004b 0000             2975		.byte	0,0
                          2976	
                          2977		.section	.debug_info
0000014c 34               2978		.byte	52
0000014d 00000000         2979		.long	.LDW_4a9c950
00000151 04               2980		.byte	4
00000152 00               2981		.byte	0
00000153 03               2982		.byte	3
                          2983	
                          2984		.section	.debug_abbrev
0000004d 34               2985		.byte	52
0000004e 21               2986		.byte	33
0000004f 00               2987		.byte	0
00000050 4910             2988		.byte	73,16
00000052 0b0f             2989		.byte	11,15
00000054 220d             2990		.byte	34,13
00000056 2f0d             2991		.byte	47,13
00000058 0000             2992		.byte	0,0
                          2993	
                          2994		.section	.debug_info
00000154 00               2995		.byte	0
                          2996	
                          2997	.LDW_4a9c720:
00000155 46               2998		.byte	70
00000156 00000000         2999		.long	.LDW_5bf52a8
0000015a 01               3000		.byte	1
                          3001	
                          3002	.LDW_4a93590:
0000015b 14               3003		.byte	20
0000015c 00000000         3004		.long	.LDW_4ada728
00000160 00               3005		.byte	0
                          3006	
                          3007	.LDW_4a935c0:
00000161 14               3008		.byte	20
00000162 00000000         3009		.long	.LDW_4ada780
00000166 00               3010		.byte	0

                                   Fri Apr 10 08:32:08 2020           Page 55
                                   Fri Apr 10 08:32:08 2020   gh_00002441.si
                          3011	
00000167 00               3012		.byte	0
                          3013	
                          3014	.LDW_5bf5848:
00000168 3c               3015		.byte	60
00000169 00               3016		.byte	0
0000016a 10               3017		.byte	16
0000016b 00000000         3018		.long	.LDW_4adef90
                          3019	
0000016f 34               3020		.byte	52
00000170 00000000         3021		.long	.LDW_4a9c950
00000174 04               3022		.byte	4
00000175 00               3023		.byte	0
00000176 03               3024		.byte	3
                          3025	
00000177 00               3026		.byte	0
                          3027	
                          3028	.LDW_4a9ca68:
00000178 46               3029		.byte	70
00000179 00000000         3030		.long	.LDW_5bf52a8
0000017d 01               3031		.byte	1
                          3032	
                          3033	.LDW_4a93110:
0000017e 14               3034		.byte	20
0000017f 00000000         3035		.long	.LDW_5bf5300
00000183 00               3036		.byte	0
                          3037	
                          3038	.LDW_4a936b0:
00000184 14               3039		.byte	20
00000185 00000000         3040		.long	.LDW_4ada728
00000189 00               3041		.byte	0
                          3042	
                          3043	.LDW_4a936e0:
0000018a 14               3044		.byte	20
0000018b 00000000         3045		.long	.LDW_4ada780
0000018f 00               3046		.byte	0
                          3047	
00000190 00               3048		.byte	0
                          3049	
                          3050	.LDW_4a9caa0:
00000191 46               3051		.byte	70
00000192 00000000         3052		.long	.LDW_5c8e1a8
00000196 01               3053		.byte	1
                          3054	
00000197 00               3055		.byte	0
                          3056	
                          3057	.LDW_4a9c3d8:
00000198 27               3058		.byte	39
00000199 73686f727400     3059		.strz	"short"
0000019f 05               3060		.byte	5
000001a0 02               3061		.byte	2
                          3062	
                          3063	.LDW_4a9c528:
000001a1 27               3064		.byte	39
000001a2 6c6f6e6700       3065		.strz	"long"
000001a7 05               3066		.byte	5

                                   Fri Apr 10 08:32:08 2020           Page 56
                                   Fri Apr 10 08:32:08 2020   gh_00002441.si
000001a8 04               3067		.byte	4
                          3068	
                          3069	.LDW_4a9c410:
000001a9 31               3070		.byte	49
000001aa 00000000         3071		.long	.LDW_4a9c800
                          3072	
                          3073	.LDW_5cbd7a0:
000001ae 31               3074		.byte	49
000001af 00000000         3075		.long	.LDW_5da7b08
                          3076	
                          3077	.LDW_5cbdd50:
000001b3 46               3078		.byte	70
000001b4 00000000         3079		.long	.LDW_4a9c800
000001b8 01               3080		.byte	1
                          3081	
000001b9 00               3082		.byte	0
                          3083	
                          3084	.LDW_5cbdce0:
000001ba 31               3085		.byte	49
000001bb 00000000         3086		.long	.LDW_5cbdd50
                          3087	
                          3088	.LDW_5cbdec8:
000001bf 3c               3089		.byte	60
000001c0 00               3090		.byte	0
000001c1 04               3091		.byte	4
000001c2 00000000         3092		.long	.LDW_5da7b08
                          3093	
000001c6 34               3094		.byte	52
000001c7 00000000         3095		.long	.LDW_4a9c950
000001cb 04               3096		.byte	4
000001cc 00               3097		.byte	0
000001cd 03               3098		.byte	3
                          3099	
000001ce 00               3100		.byte	0
                          3101	
                          3102	.LDW_5cbdf50:
000001cf 3c               3103		.byte	60
000001d0 00               3104		.byte	0
000001d1 04               3105		.byte	4
000001d2 00000000         3106		.long	.LDW_5da7b08
                          3107	
000001d6 34               3108		.byte	52
000001d7 00000000         3109		.long	.LDW_4a9c950
000001db 04               3110		.byte	4
000001dc 00               3111		.byte	0
000001dd 03               3112		.byte	3
                          3113	
000001de 00               3114		.byte	0
                          3115	
                          3116	.LDW_5da8030:
000001df 2b               3117		.byte	43
000001e0 00000000         3118		.long	.LDW_4a9c8a8
                          3119	
                          3120	.LDW_5cbdd18:
000001e4 31               3121		.byte	49
000001e5 00000000         3122		.long	.LDW_5da8030

                                   Fri Apr 10 08:32:08 2020           Page 57
                                   Fri Apr 10 08:32:08 2020   gh_00002441.si
                          3123	
                          3124	.LDW_5e2a130:
000001e9 31               3125		.byte	49
000001ea 00000000         3126		.long	.LDW_4a9c8a8
                          3127	
                          3128	.LDW_5e2a670:
000001ee 31               3129		.byte	49
000001ef 00000000         3130		.long	.LDW_5da8088
                          3131	
                          3132	.LDW_5e2a520:
000001f3 47               3133		.byte	71
000001f4 01               3134		.byte	1
                          3135	
                          3136		.section	.debug_abbrev
0000005a 47               3137		.byte	71
0000005b 15               3138		.byte	21
0000005c 01               3139		.byte	1
0000005d 270c             3140		.byte	39,12
0000005f 0000             3141		.byte	0,0
                          3142	
                          3143		.section	.debug_info
                          3144	.LDW_5da7338:
000001f5 14               3145		.byte	20
000001f6 00000000         3146		.long	.LDW_5e2a670
000001fa 00               3147		.byte	0
                          3148	
000001fb 00               3149		.byte	0
                          3150	
                          3151	.LDW_5e2a6a8:
000001fc 31               3152		.byte	49
000001fd 00000000         3153		.long	.LDW_5e2a520
                          3154	
                          3155	.LDW_5e2b6c8:
00000201 2b               3156		.byte	43
00000202 00000000         3157		.long	.LDW_4adef90
                          3158	
                          3159	.LDW_5e2a1d8:
00000206 31               3160		.byte	49
00000207 00000000         3161		.long	.LDW_5e2b6c8
                          3162	
                          3163	.LDW_5e2b858:
0000020b 3c               3164		.byte	60
0000020c 00               3165		.byte	0
0000020d 800c             3166		.byte	128,12
0000020f 00000000         3167		.long	.LDW_5bf5250
                          3168	
00000213 34               3169		.byte	52
00000214 00000000         3170		.long	.LDW_4a9c950
00000218 04               3171		.byte	4
00000219 00               3172		.byte	0
0000021a ff0b             3173		.byte	255,11
                          3174	
0000021c 00               3175		.byte	0
                          3176	
                          3177	.LDW_5e2c270:
0000021d 3c               3178		.byte	60

                                   Fri Apr 10 08:32:08 2020           Page 58
                                   Fri Apr 10 08:32:08 2020   gh_00002441.si
0000021e 00               3179		.byte	0
0000021f 64               3180		.byte	100
00000220 00000000         3181		.long	.LDW_4ada530
                          3182	
00000224 34               3183		.byte	52
00000225 00000000         3184		.long	.LDW_4a9c950
00000229 04               3185		.byte	4
0000022a 00               3186		.byte	0
0000022b 04               3187		.byte	4
                          3188	
0000022c 00               3189		.byte	0
                          3190	
                          3191	.LDW_5e2c2f8:
0000022d 3c               3192		.byte	60
0000022e 00               3193		.byte	0
0000022f 10               3194		.byte	16
00000230 00000000         3195		.long	.LDW_5e2b6c8
                          3196	
00000234 34               3197		.byte	52
00000235 00000000         3198		.long	.LDW_4a9c950
00000239 04               3199		.byte	4
0000023a 00               3200		.byte	0
0000023b 03               3201		.byte	3
                          3202	
0000023c 00               3203		.byte	0
                          3204	
                          3205	.LDW_5daa608:
0000023d 2b               3206		.byte	43
0000023e 00000000         3207		.long	.LDW_4a9c5d0
                          3208	
                          3209	.LDW_5e2c5a0:
00000242 3c               3210		.byte	60
00000243 00               3211		.byte	0
00000244 04               3212		.byte	4
00000245 00000000         3213		.long	.LDW_5daa608
                          3214	
00000249 34               3215		.byte	52
0000024a 00000000         3216		.long	.LDW_4a9c950
0000024e 04               3217		.byte	4
0000024f 00               3218		.byte	0
00000250 00               3219		.byte	0
                          3220	
00000251 00               3221		.byte	0
                          3222	
                          3223	.LDW_5e2efe8:
00000252 46               3224		.byte	70
00000253 00000000         3225		.long	.LDW_5bf5250
00000257 01               3226		.byte	1
                          3227	
00000258 00               3228		.byte	0
                          3229	
                          3230	.LDW_5daca80:
00000259 27               3231		.byte	39
0000025a 756e7369676e6564 3232		.strz	"unsigned int"
00000262 20696e7400      
00000267 07               3233		.byte	7
00000268 04               3234		.byte	4

                                   Fri Apr 10 08:32:08 2020           Page 59
                                   Fri Apr 10 08:32:08 2020   gh_00002441.si
                          3235	
                          3236	.LDW_5bf5250:
00000269 2a               3237		.byte	42
0000026a 7675696e743800   3238		.strz	"vuint8"
00000271 9b04             3239		.byte	155,4
00000273 18               3240		.byte	24
00000274 07               3241		.byte	7
00000275 00000000         3242		.long	.LDW_4a9c800
                          3243	
                          3244		.section	.debug_abbrev
00000061 2a               3245		.byte	42
00000062 16               3246		.byte	22
00000063 00               3247		.byte	0
00000064 0308             3248		.byte	3,8
00000066 3b0f             3249		.byte	59,15
00000068 390f             3250		.byte	57,15
0000006a 3a0f             3251		.byte	58,15
0000006c 4910             3252		.byte	73,16
0000006e 0000             3253		.byte	0,0
                          3254	
                          3255		.section	.debug_info
                          3256	.LDW_5bf53b0:
00000279 2a               3257		.byte	42
0000027a 7675696e74313600 3258		.strz	"vuint16"
00000282 a604             3259		.byte	166,4
00000284 18               3260		.byte	24
00000285 07               3261		.byte	7
00000286 00000000         3262		.long	.LDW_4a9ca30
                          3263	
                          3264	.LDW_5c8e938:
0000028a 2a               3265		.byte	42
0000028b 7673696e74313600 3266		.strz	"vsint16"
00000293 ab04             3267		.byte	171,4
00000295 18               3268		.byte	24
00000296 07               3269		.byte	7
00000297 00000000         3270		.long	.LDW_4a9c3d8
                          3271	
                          3272	.LDW_4adef90:
0000029b 2a               3273		.byte	42
0000029c 7675696e74333200 3274		.strz	"vuint32"
000002a4 b204             3275		.byte	178,4
000002a6 18               3276		.byte	24
000002a7 07               3277		.byte	7
000002a8 00000000         3278		.long	.LDW_4a9c8a8
                          3279	
                          3280	.LDW_5c8e990:
000002ac 2a               3281		.byte	42
000002ad 7673696e74333200 3282		.strz	"vsint32"
000002b5 b704             3283		.byte	183,4
000002b7 18               3284		.byte	24
000002b8 07               3285		.byte	7
000002b9 00000000         3286		.long	.LDW_4a9c528
                          3287	
                          3288	.LDW_5da7b08:
000002bd 2a               3289		.byte	42
000002be 74466c6173684461 3290		.strz	"tFlashData"
000002c6 746100          

                                   Fri Apr 10 08:32:08 2020           Page 60
                                   Fri Apr 10 08:32:08 2020   gh_00002441.si
000002c9 9501             3291		.byte	149,1
000002cb 18               3292		.byte	24
000002cc 19               3293		.byte	25
000002cd 00000000         3294		.long	.LDW_4a9c800
                          3295	
                          3296	.LDW_5bf4d80:
000002d1 2a               3297		.byte	42
000002d2 74466c6173684164 3298		.strz	"tFlashAddress"
000002da 647265737300    
000002e0 9601             3299		.byte	150,1
000002e2 18               3300		.byte	24
000002e3 19               3301		.byte	25
000002e4 00000000         3302		.long	.LDW_4a9c8a8
                          3303	
                          3304	.LDW_5bf4dd8:
000002e8 2a               3305		.byte	42
000002e9 74466c6173684c65 3306		.strz	"tFlashLength"
000002f1 6e67746800      
000002f6 9701             3307		.byte	151,1
000002f8 18               3308		.byte	24
000002f9 19               3309		.byte	25
000002fa 00000000         3310		.long	.LDW_4a9c8a8
                          3311	
                          3312	.LDW_5da7d18:
000002fe 2a               3313		.byte	42
000002ff 74466c6173684572 3314		.strz	"tFlashErrorCode"
00000307 726f72436f646500
0000030f 9801             3315		.byte	152,1
00000311 18               3316		.byte	24
00000312 19               3317		.byte	25
00000313 00000000         3318		.long	.LDW_4a9ca30
                          3319	
                          3320	.LDW_5da7d70:
00000317 42               3321		.byte	66
00000318 746167466c617368 3322		.strz	"tagFlashParam"
00000320 506172616d00    
00000326 9b01             3323		.byte	155,1
00000328 10               3324		.byte	16
00000329 19               3325		.byte	25
0000032a 34               3326		.byte	52
0000032b 01               3327		.byte	1
                          3328	
                          3329		.section	.debug_abbrev
00000070 42               3330		.byte	66
00000071 13               3331		.byte	19
00000072 01               3332		.byte	1
00000073 0308             3333		.byte	3,8
00000075 3b0f             3334		.byte	59,15
00000077 390f             3335		.byte	57,15
00000079 3a0f             3336		.byte	58,15
0000007b 0b0f             3337		.byte	11,15
0000007d 320b             3338		.byte	50,11
0000007f 0000             3339		.byte	0,0
                          3340	
                          3341		.section	.debug_info
                          3342	.LDW_5da5760:
0000032c 25               3343		.byte	37
0000032d 70617463684c6576 3344		.strz	"patchLevel"
00000335 656c00          
00000338 9e01             3345		.byte	158,1
0000033a 19               3346		.byte	25

                                   Fri Apr 10 08:32:08 2020           Page 61
                                   Fri Apr 10 08:32:08 2020   gh_00002441.si
0000033b 19               3347		.byte	25
0000033c 00000000         3348		.long	.LDW_4a9c800
00000340 0223             3349		.byte	2,35
00000342 00               3350		.byte	0
00000343 01               3351		.byte	1
                          3352	
                          3353		.section	.debug_abbrev
00000081 25               3354		.byte	37
00000082 0d               3355		.byte	13
00000083 00               3356		.byte	0
00000084 0308             3357		.byte	3,8
00000086 3b0f             3358		.byte	59,15
00000088 390f             3359		.byte	57,15
0000008a 3a0f             3360		.byte	58,15
0000008c 4910             3361		.byte	73,16
0000008e 380a             3362		.byte	56,10
00000090 320b             3363		.byte	50,11
00000092 0000             3364		.byte	0,0
                          3365	
                          3366		.section	.debug_info
                          3367	.LDW_5da9370:
00000344 25               3368		.byte	37
00000345 6d696e6f72566572 3369		.strz	"minorVersion"
0000034d 73696f6e00      
00000352 9f01             3370		.byte	159,1
00000354 19               3371		.byte	25
00000355 19               3372		.byte	25
00000356 00000000         3373		.long	.LDW_4a9c800
0000035a 0223             3374		.byte	2,35
0000035c 01               3375		.byte	1
0000035d 01               3376		.byte	1
                          3377	
                          3378	.LDW_5da8d40:
0000035e 25               3379		.byte	37
0000035f 6d616a6f72566572 3380		.strz	"majorVersion"
00000367 73696f6e00      
0000036c a001             3381		.byte	160,1
0000036e 19               3382		.byte	25
0000036f 19               3383		.byte	25
00000370 00000000         3384		.long	.LDW_4a9c800
00000374 0223             3385		.byte	2,35
00000376 02               3386		.byte	2
00000377 01               3387		.byte	1
                          3388	
                          3389	.LDW_5da9250:
00000378 25               3390		.byte	37
00000379 7265736572766564 3391		.strz	"reserved1"
00000381 3100            
00000383 a101             3392		.byte	161,1
00000385 19               3393		.byte	25
00000386 19               3394		.byte	25
00000387 00000000         3395		.long	.LDW_4a9c800
0000038b 0223             3396		.byte	2,35
0000038d 03               3397		.byte	3
0000038e 01               3398		.byte	1
                          3399	
                          3400	.LDW_5da9010:
0000038f 25               3401		.byte	37
00000390 6572726f72436f64 3402		.strz	"errorCode"
00000398 6500            

                                   Fri Apr 10 08:32:08 2020           Page 62
                                   Fri Apr 10 08:32:08 2020   gh_00002441.si
0000039a a401             3403		.byte	164,1
0000039c 19               3404		.byte	25
0000039d 19               3405		.byte	25
0000039e 00000000         3406		.long	.LDW_5da7d18
000003a2 0223             3407		.byte	2,35
000003a4 04               3408		.byte	4
000003a5 01               3409		.byte	1
                          3410	
                          3411	.LDW_5da8f38:
000003a6 25               3412		.byte	37
000003a7 7265736572766564 3413		.strz	"reserved2"
000003af 3200            
000003b1 a501             3414		.byte	165,1
000003b3 19               3415		.byte	25
000003b4 19               3416		.byte	25
000003b5 00000000         3417		.long	.LDW_4a9ca30
000003b9 0223             3418		.byte	2,35
000003bb 06               3419		.byte	6
000003bc 01               3420		.byte	1
                          3421	
                          3422	.LDW_5da8d88:
000003bd 25               3423		.byte	37
000003be 6164647265737300 3424		.strz	"address"
000003c6 a801             3425		.byte	168,1
000003c8 19               3426		.byte	25
000003c9 19               3427		.byte	25
000003ca 00000000         3428		.long	.LDW_5bf4d80
000003ce 0223             3429		.byte	2,35
000003d0 08               3430		.byte	8
000003d1 01               3431		.byte	1
                          3432	
                          3433	.LDW_5da8ab8:
000003d2 25               3434		.byte	37
000003d3 6c656e67746800   3435		.strz	"length"
000003da a901             3436		.byte	169,1
000003dc 19               3437		.byte	25
000003dd 19               3438		.byte	25
000003de 00000000         3439		.long	.LDW_5bf4dd8
000003e2 0223             3440		.byte	2,35
000003e4 0c               3441		.byte	12
000003e5 01               3442		.byte	1
                          3443	
                          3444	.LDW_5da90a0:
000003e6 25               3445		.byte	37
000003e7 6461746100       3446		.strz	"data"
000003ec aa01             3447		.byte	170,1
000003ee 19               3448		.byte	25
000003ef 19               3449		.byte	25
000003f0 00000000         3450		.long	.LDW_5cbd7a0
000003f4 0223             3451		.byte	2,35
000003f6 10               3452		.byte	16
000003f7 01               3453		.byte	1
                          3454	
                          3455	.LDW_5da9328:
000003f8 25               3456		.byte	37
000003f9 7764547269676765 3457		.strz	"wdTriggerFct"
00000401 7246637400      
00000406 ad01             3458		.byte	173,1

                                   Fri Apr 10 08:32:08 2020           Page 63
                                   Fri Apr 10 08:32:08 2020   gh_00002441.si
00000408 1c               3459		.byte	28
00000409 19               3460		.byte	25
0000040a 00000000         3461		.long	.LDW_5cbdce0
0000040e 0223             3462		.byte	2,35
00000410 14               3463		.byte	20
00000411 01               3464		.byte	1
                          3465	
                          3466	.LDW_5da8cf8:
00000412 25               3467		.byte	37
00000413 696e74656e646564 3468		.strz	"intendedData"
0000041b 4461746100      
00000420 b001             3469		.byte	176,1
00000422 19               3470		.byte	25
00000423 19               3471		.byte	25
00000424 00000000         3472		.long	.LDW_5cbdec8
00000428 0223             3473		.byte	2,35
0000042a 18               3474		.byte	24
0000042b 01               3475		.byte	1
                          3476	
                          3477	.LDW_5da9178:
0000042c 25               3478		.byte	37
0000042d 61637475616c4461 3479		.strz	"actualData"
00000435 746100          
00000438 b101             3480		.byte	177,1
0000043a 19               3481		.byte	25
0000043b 19               3482		.byte	25
0000043c 00000000         3483		.long	.LDW_5cbdf50
00000440 0223             3484		.byte	2,35
00000442 1c               3485		.byte	28
00000443 01               3486		.byte	1
                          3487	
                          3488	.LDW_5da8c68:
00000444 25               3489		.byte	37
00000445 6572726f72416464 3490		.strz	"errorAddress"
0000044d 7265737300      
00000452 b201             3491		.byte	178,1
00000454 19               3492		.byte	25
00000455 19               3493		.byte	25
00000456 00000000         3494		.long	.LDW_5bf4d80
0000045a 0223             3495		.byte	2,35
0000045c 20               3496		.byte	32
0000045d 01               3497		.byte	1
                          3498	
                          3499	.LDW_5da8ea8:
0000045e 25               3500		.byte	37
0000045f 73656c656374436f 3501		.strz	"selectCount"
00000467 756e7400        
0000046b b501             3502		.byte	181,1
0000046d 19               3503		.byte	25
0000046e 19               3504		.byte	25
0000046f 00000000         3505		.long	.LDW_4a9c8a8
00000473 0223             3506		.byte	2,35
00000475 24               3507		.byte	36
00000476 01               3508		.byte	1
                          3509	
                          3510	.LDW_5da8f80:
00000477 25               3511		.byte	37
00000478 70726f7465637453 3512		.strz	"protectSelect"
00000480 656c65637400    
00000486 b601             3513		.byte	182,1
00000488 19               3514		.byte	25

                                   Fri Apr 10 08:32:08 2020           Page 64
                                   Fri Apr 10 08:32:08 2020   gh_00002441.si
00000489 19               3515		.byte	25
0000048a 00000000         3516		.long	.LDW_5cbdd18
0000048e 0223             3517		.byte	2,35
00000490 28               3518		.byte	40
00000491 01               3519		.byte	1
                          3520	
                          3521	.LDW_5da8cb0:
00000492 25               3522		.byte	37
00000493 626c6f636b53656c 3523		.strz	"blockSelect"
0000049b 65637400        
0000049f b701             3524		.byte	183,1
000004a1 19               3525		.byte	25
000004a2 19               3526		.byte	25
000004a3 00000000         3527		.long	.LDW_5e2a130
000004a7 0223             3528		.byte	2,35
000004a9 2c               3529		.byte	44
000004aa 01               3530		.byte	1
                          3531	
                          3532	.LDW_5da9208:
000004ab 25               3533		.byte	37
000004ac 7265676973746572 3534		.strz	"registerBase"
000004b4 4261736500      
000004b9 b801             3535		.byte	184,1
000004bb 19               3536		.byte	25
000004bc 19               3537		.byte	25
000004bd 00000000         3538		.long	.LDW_4a9c8a8
000004c1 0223             3539		.byte	2,35
000004c3 30               3540		.byte	48
000004c4 01               3541		.byte	1
                          3542	
000004c5 00               3543		.byte	0
                          3544	
                          3545	.LDW_5da8088:
000004c6 2a               3546		.byte	42
000004c7 74466c6173685061 3547		.strz	"tFlashParam"
000004cf 72616d00        
000004d3 ba01             3548		.byte	186,1
000004d5 03               3549		.byte	3
000004d6 19               3550		.byte	25
000004d7 00000000         3551		.long	.LDW_5da7d70
                          3552	
                          3553	.LDW_5da8768:
000004db 2a               3554		.byte	42
000004dc 74466c6173684663 3555		.strz	"tFlashFct"
000004e4 7400            
000004e6 c101             3556		.byte	193,1
000004e8 11               3557		.byte	17
000004e9 19               3558		.byte	25
000004ea 00000000         3559		.long	.LDW_5e2a6a8
                          3560	
                          3561	.LDW_5c8e1a8:
000004ee 2a               3562		.byte	42
000004ef 494f5f55333200   3563		.strz	"IO_U32"
000004f6 57               3564		.byte	87
000004f7 13               3565		.byte	19
000004f8 1c               3566		.byte	28
000004f9 00000000         3567		.long	.LDW_4adef90
                          3568	
                          3569	.LDW_4ada728:
000004fd 2a               3570		.byte	42

                                   Fri Apr 10 08:32:08 2020           Page 65
                                   Fri Apr 10 08:32:08 2020   gh_00002441.si
000004fe 494f5f53697a6554 3571		.strz	"IO_SizeType"
00000506 79706500        
0000050a 5e               3572		.byte	94
0000050b 13               3573		.byte	19
0000050c 1c               3574		.byte	28
0000050d 00000000         3575		.long	.LDW_4adef90
                          3576	
                          3577	.LDW_4ada780:
00000511 2a               3578		.byte	42
00000512 494f5f506f736974 3579		.strz	"IO_PositionType"
0000051a 696f6e5479706500
00000522 5f               3580		.byte	95
00000523 13               3581		.byte	19
00000524 1c               3582		.byte	28
00000525 00000000         3583		.long	.LDW_4adef90
                          3584	
                          3585	.LDW_5bf52a8:
00000529 2a               3586		.byte	42
0000052a 494f5f4572726f72 3587		.strz	"IO_ErrorType"
00000532 5479706500      
00000537 65               3588		.byte	101
00000538 13               3589		.byte	19
00000539 1c               3590		.byte	28
0000053a 00000000         3591		.long	.LDW_5bf53b0
                          3592	
                          3593	.LDW_5bf5300:
0000053e 2a               3594		.byte	42
0000053f 494f5f4d656d5074 3595		.strz	"IO_MemPtrType"
00000547 725479706500    
0000054d 66               3596		.byte	102
0000054e 13               3597		.byte	19
0000054f 1c               3598		.byte	28
00000550 00000000         3599		.long	.LDW_4a9c918
                          3600	
                          3601	.LDW_4ada480:
00000554 42               3602		.byte	66
00000555 746167433535666d 3603		.strz	"tagC55fmcFlashBlock"
0000055d 63466c617368426c
00000565 6f636b00        
00000569 dc01             3604		.byte	220,1
0000056b 10               3605		.byte	16
0000056c 01               3606		.byte	1
0000056d 14               3607		.byte	20
0000056e 01               3608		.byte	1
                          3609	
                          3610	.LDW_5e30ec0:
0000056f 25               3611		.byte	37
00000570 7374617274416464 3612		.strz	"startAddress"
00000578 7265737300      
0000057d de01             3613		.byte	222,1
0000057f 0c               3614		.byte	12
00000580 01               3615		.byte	1
00000581 00000000         3616		.long	.LDW_4adef90
00000585 0223             3617		.byte	2,35
00000587 00               3618		.byte	0
00000588 01               3619		.byte	1
                          3620	
                          3621	.LDW_5e30f98:
00000589 25               3622		.byte	37
0000058a 6c656e67746800   3623		.strz	"length"
00000591 df01             3624		.byte	223,1
00000593 0c               3625		.byte	12
00000594 01               3626		.byte	1

                                   Fri Apr 10 08:32:08 2020           Page 66
                                   Fri Apr 10 08:32:08 2020   gh_00002441.si
00000595 00000000         3627		.long	.LDW_4adef90
00000599 0223             3628		.byte	2,35
0000059b 04               3629		.byte	4
0000059c 01               3630		.byte	1
                          3631	
                          3632	.LDW_5e30968:
0000059d 25               3633		.byte	37
0000059e 636f756e7400     3634		.strz	"count"
000005a4 e001             3635		.byte	224,1
000005a6 0c               3636		.byte	12
000005a7 01               3637		.byte	1
000005a8 00000000         3638		.long	.LDW_4adef90
000005ac 0223             3639		.byte	2,35
000005ae 08               3640		.byte	8
000005af 01               3641		.byte	1
                          3642	
                          3643	.LDW_5e30fe0:
000005b0 25               3644		.byte	37
000005b1 6269744d61736b53 3645		.strz	"bitMaskStart"
000005b9 7461727400      
000005be e101             3646		.byte	225,1
000005c0 0c               3647		.byte	12
000005c1 01               3648		.byte	1
000005c2 00000000         3649		.long	.LDW_4adef90
000005c6 0223             3650		.byte	2,35
000005c8 0c               3651		.byte	12
000005c9 01               3652		.byte	1
                          3653	
                          3654	.LDW_5e309f8:
000005ca 25               3655		.byte	37
000005cb 6269744d61736b49 3656		.strz	"bitMaskIndex"
000005d3 6e64657800      
000005d8 e201             3657		.byte	226,1
000005da 0c               3658		.byte	12
000005db 01               3659		.byte	1
000005dc 00000000         3660		.long	.LDW_4adef90
000005e0 0223             3661		.byte	2,35
000005e2 10               3662		.byte	16
000005e3 01               3663		.byte	1
                          3664	
000005e4 00               3665		.byte	0
                          3666	
                          3667	.LDW_4ada4d8:
000005e5 2a               3668		.byte	42
000005e6 74433535666d6346 3669		.strz	"tC55fmcFlashBlock"
000005ee 6c617368426c6f63
000005f6 6b00            
000005f8 e301             3670		.byte	227,1
000005fa 03               3671		.byte	3
000005fb 01               3672		.byte	1
000005fc 00000000         3673		.long	.LDW_4ada480
                          3674	
                          3675	.LDW_4adb9b0:
00000600 42               3676		.byte	66
00000601 746167433535666d 3677		.strz	"tagC55fmcFlashModule"
00000609 63466c6173684d6f
00000611 64756c6500      
00000616 e601             3678		.byte	230,1
00000618 10               3679		.byte	16
00000619 01               3680		.byte	1
0000061a 1c               3681		.byte	28
0000061b 01               3682		.byte	1

                                   Fri Apr 10 08:32:08 2020           Page 67
                                   Fri Apr 10 08:32:08 2020   gh_00002441.si
                          3683	
                          3684	.LDW_5e30b18:
0000061c 25               3685		.byte	37
0000061d 666c617368426c6f 3686		.strz	"flashBlocks"
00000625 636b7300        
00000629 e801             3687		.byte	232,1
0000062b 36               3688		.byte	54
0000062c 01               3689		.byte	1
0000062d 00000000         3690		.long	.LDW_4a9c7c8
00000631 0223             3691		.byte	2,35
00000633 00               3692		.byte	0
00000634 01               3693		.byte	1
                          3694	
                          3695	.LDW_5e30ba8:
00000635 25               3696		.byte	37
00000636 666c617368426c6f 3697		.strz	"flashBlockCount"
0000063e 636b436f756e7400
00000646 e901             3698		.byte	233,1
00000648 0c               3699		.byte	12
00000649 01               3700		.byte	1
0000064a 00000000         3701		.long	.LDW_4adef90
0000064e 0223             3702		.byte	2,35
00000650 04               3703		.byte	4
00000651 01               3704		.byte	1
                          3705	
                          3706	.LDW_5e31070:
00000652 25               3707		.byte	37
00000653 666c617368426173 3708		.strz	"flashBaseAddress"
0000065b 6541646472657373
00000663 00              
00000664 ea01             3709		.byte	234,1
00000666 0c               3710		.byte	12
00000667 01               3711		.byte	1
00000668 00000000         3712		.long	.LDW_4adef90
0000066c 0223             3713		.byte	2,35
0000066e 08               3714		.byte	8
0000066f 01               3715		.byte	1
                          3716	
                          3717	.LDW_5e30890:
00000670 25               3718		.byte	37
00000671 666c617368426967 3719		.strz	"flashBigBlockSize"
00000679 426c6f636b53697a
00000681 6500            
00000683 eb01             3720		.byte	235,1
00000685 0c               3721		.byte	12
00000686 01               3722		.byte	1
00000687 00000000         3723		.long	.LDW_4adef90
0000068b 0223             3724		.byte	2,35
0000068d 0c               3725		.byte	12
0000068e 01               3726		.byte	1
                          3727	
                          3728	.LDW_5e30c38:
0000068f 25               3729		.byte	37
00000690 666c617368426967 3730		.strz	"flashBigBlockFactor"
00000698 426c6f636b466163
000006a0 746f7200        
000006a4 ec01             3731		.byte	236,1
000006a6 0c               3732		.byte	12
000006a7 01               3733		.byte	1
000006a8 00000000         3734		.long	.LDW_4adef90
000006ac 0223             3735		.byte	2,35
000006ae 10               3736		.byte	16
000006af 01               3737		.byte	1
                          3738	

                                   Fri Apr 10 08:32:08 2020           Page 68
                                   Fri Apr 10 08:32:08 2020   gh_00002441.si
                          3739	.LDW_5e30cc8:
000006b0 25               3740		.byte	37
000006b1 666c61736853656c 3741		.strz	"flashSelectCount"
000006b9 656374436f756e74
000006c1 00              
000006c2 ed01             3742		.byte	237,1
000006c4 0c               3743		.byte	12
000006c5 01               3744		.byte	1
000006c6 00000000         3745		.long	.LDW_4adef90
000006ca 0223             3746		.byte	2,35
000006cc 14               3747		.byte	20
000006cd 01               3748		.byte	1
                          3749	
                          3750	.LDW_5e312f8:
000006ce 25               3751		.byte	37
000006cf 7573657250726f74 3752		.strz	"userProtectionBits"
000006d7 656374696f6e4269
000006df 747300          
000006e2 ee01             3753		.byte	238,1
000006e4 2c               3754		.byte	44
000006e5 01               3755		.byte	1
000006e6 00000000         3756		.long	.LDW_5e2a1d8
000006ea 0223             3757		.byte	2,35
000006ec 18               3758		.byte	24
000006ed 01               3759		.byte	1
                          3760	
000006ee 00               3761		.byte	0
                          3762	
                          3763	.LDW_4adda10:
000006ef 2a               3764		.byte	42
000006f0 74433535666d6346 3765		.strz	"tC55fmcFlashModule"
000006f8 6c6173684d6f6475
00000700 6c6500          
00000703 f401             3766		.byte	244,1
00000705 03               3767		.byte	3
00000706 01               3768		.byte	1
00000707 00000000         3769		.long	.LDW_4adb9b0
                          3770	
                          3771	.LDW_5daa4a8:
0000070b 06               3772		.byte	6
0000070c 666c617368436f64 3773		.strz	"flashCode"
00000714 6500            
00000716 fc01             3774		.byte	252,1
00000718 26               3775		.byte	38
00000719 01               3776		.byte	1
0000071a 00000000         3777		.long	.LDW_5e2b858
0000071e 01               3778		.byte	1
0000071f 00               3779		.byte	0
00000720 0503             3780		.byte	5,3
00000722 00000000         3781		.long	flashCode
                          3782	
                          3783		.section	.debug_abbrev
00000094 06               3784		.byte	6
00000095 34               3785		.byte	52
00000096 00               3786		.byte	0
00000097 0308             3787		.byte	3,8
00000099 3b0f             3788		.byte	59,15
0000009b 390f             3789		.byte	57,15
0000009d 3a0f             3790		.byte	58,15
0000009f 4910             3791		.byte	73,16
000000a1 3f0c             3792		.byte	63,12
000000a3 3c0c             3793		.byte	60,12
000000a5 020a             3794		.byte	2,10

                                   Fri Apr 10 08:32:08 2020           Page 69
                                   Fri Apr 10 08:32:08 2020   gh_00002441.si
000000a7 0000             3795		.byte	0,0
                          3796	
                          3797		.section	.debug_info
                          3798	.LDW_5da9e20:
00000726 06               3799		.byte	6
00000727 666c617368506172 3800		.strz	"flashParam"
0000072f 616d00          
00000732 8502             3801		.byte	133,2
00000734 32               3802		.byte	50
00000735 01               3803		.byte	1
00000736 00000000         3804		.long	.LDW_5da8088
0000073a 00               3805		.byte	0
0000073b 00               3806		.byte	0
0000073c 0503             3807		.byte	5,3
0000073e 00000000         3808		.long	flashParam..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_flio.
                          3809	
                          3810	.LDW_5daa500:
00000742 06               3811		.byte	6
00000743 666c617368426c6f 3812		.strz	"flashBlocks_6"
0000074b 636b735f3600    
00000751 8904             3813		.byte	137,4
00000753 38               3814		.byte	56
00000754 01               3815		.byte	1
00000755 00000000         3816		.long	.LDW_5e2c270
00000759 00               3817		.byte	0
0000075a 00               3818		.byte	0
0000075b 0503             3819		.byte	5,3
0000075d 00000000         3820		.long	flashBlocks_6..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_flio.
                          3821	
                          3822	.LDW_5da9d70:
00000761 06               3823		.byte	6
00000762 666c6173685f7573 3824		.strz	"flash_user_protection_6"
0000076a 65725f70726f7465
00000772 6374696f6e5f3600
0000077a 9f04             3825		.byte	159,4
0000077c 2e               3826		.byte	46
0000077d 01               3827		.byte	1
0000077e 00000000         3828		.long	.LDW_5e2c2f8
00000782 00               3829		.byte	0
00000783 00               3830		.byte	0
00000784 0503             3831		.byte	5,3
00000786 00000000         3832		.long	flash_user_protection_6..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_flio.
                          3833	
                          3834	.LDW_5daa1e8:
0000078a 06               3835		.byte	6
0000078b 666c6173684d6f64 3836		.strz	"flashModule_6"
00000793 756c655f3600    
00000799 a004             3837		.byte	160,4
0000079b 39               3838		.byte	57
0000079c 01               3839		.byte	1
0000079d 00000000         3840		.long	.LDW_4adda68
000007a1 00               3841		.byte	0
000007a2 00               3842		.byte	0
000007a3 0503             3843		.byte	5,3
000007a5 00000000         3844		.long	flashModule_6..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_flio.
                          3845	
                          3846	.LDW_5daa030:
000007a9 06               3847		.byte	6
000007aa 666c6173684d6f64 3848		.strz	"flashModule"
000007b2 756c6500        
000007b6 dc06             3849		.byte	220,6
000007b8 59               3850		.byte	89

                                   Fri Apr 10 08:32:08 2020           Page 70
                                   Fri Apr 10 08:32:08 2020   gh_00002441.si
000007b9 01               3851		.byte	1
000007ba 00000000         3852		.long	.LDW_5e2c5a0
000007be 00               3853		.byte	0
000007bf 00               3854		.byte	0
000007c0 0503             3855		.byte	5,3
000007c2 00000000         3856		.long	flashModule..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_flio.
                          3857	
                          3858	.LDW_5daa558:
000007c6 06               3859		.byte	6
000007c7 666c6173684d6f64 3860		.strz	"flashModuleSelect"
000007cf 756c6553656c6563
000007d7 7400            
000007d9 af07             3861		.byte	175,7
000007db 59               3862		.byte	89
000007dc 01               3863		.byte	1
000007dd 00000000         3864		.long	.LDW_4a9c5d0
000007e1 00               3865		.byte	0
000007e2 00               3866		.byte	0
000007e3 0503             3867		.byte	5,3
000007e5 00000000         3868		.long	flashModuleSelect..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_flio.
                          3869	
                          3870	.LDW_5dabe48:
000007e9 18               3871		.byte	24
000007ea 46626c4c6f6f6b46 3872		.strz	"FblLookForWatchdog"
000007f2 6f72576174636864
000007fa 6f6700          
000007fd 8e01             3873		.byte	142,1
000007ff 13               3874		.byte	19
00000800 1b               3875		.byte	27
00000801 00000000         3876		.long	.LDW_5bf5250
00000805 01               3877		.byte	1
00000806 00               3878		.byte	0
00000807 01               3879		.byte	1
00000808 01               3880		.byte	1
00000809 00               3881		.byte	0
0000080a 01               3882		.byte	1
                          3883	
                          3884		.section	.debug_abbrev
000000a9 18               3885		.byte	24
000000aa 2e               3886		.byte	46
000000ab 01               3887		.byte	1
000000ac 0308             3888		.byte	3,8
000000ae 3b0f             3889		.byte	59,15
000000b0 390f             3890		.byte	57,15
000000b2 3a0f             3891		.byte	58,15
000000b4 4910             3892		.byte	73,16
000000b6 3c0c             3893		.byte	60,12
000000b8 200b             3894		.byte	32,11
000000ba 3f0c             3895		.byte	63,12
000000bc 320b             3896		.byte	50,11
000000be 4c0b             3897		.byte	76,11
000000c0 270c             3898		.byte	39,12
000000c2 0000             3899		.byte	0,0
                          3900	
                          3901		.section	.debug_info
0000080b 00               3902		.byte	0
                          3903	
                          3904	.LDW_4ada588:
0000080c 16               3905		.byte	22
0000080d 6765744e756d6265 3906		.strz	"getNumberOfFlashBlocks"
00000815 724f66466c617368
0000081d 426c6f636b7300  

                                   Fri Apr 10 08:32:08 2020           Page 71
                                   Fri Apr 10 08:32:08 2020   gh_00002441.si
00000824 ca07             3907		.byte	202,7
00000826 10               3908		.byte	16
00000827 01               3909		.byte	1
00000828 00000000         3910		.long	.LDW_4adef90
0000082c 00000000         3911		.long	getNumberOfFlashBlocks..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_flio.
00000830 00000000         3912		.long	__ghs_eofn_getNumberOfFlashBlocks
00000834 0151             3913		.byte	1,81
00000836 03               3914		.byte	3
00000837 00               3915		.byte	0
00000838 00               3916		.byte	0
00000839 00               3917		.byte	0
0000083a 00               3918		.byte	0
0000083b 00               3919		.byte	0
0000083c 00               3920		.byte	0
0000083d 00               3921		.byte	0
0000083e 01               3922		.byte	1
0000083f 00               3923		.byte	0
00000840 01               3924		.byte	1
                          3925	
                          3926		.section	.debug_abbrev
000000c4 16               3927		.byte	22
000000c5 2e               3928		.byte	46
000000c6 01               3929		.byte	1
000000c7 0308             3930		.byte	3,8
000000c9 3b0f             3931		.byte	59,15
000000cb 390f             3932		.byte	57,15
000000cd 3a0f             3933		.byte	58,15
000000cf 4910             3934		.byte	73,16
000000d1 1101             3935		.byte	17,1
000000d3 1201             3936		.byte	18,1
000000d5 400a             3937		.byte	64,10
000000d7 8341             3938		.byte	131,65
000000d9 0f               3939		.byte	15
000000da 8741             3940		.byte	135,65
000000dc 0d               3941		.byte	13
000000dd 8541             3942		.byte	133,65
000000df 0f               3943		.byte	15
000000e0 8641             3944		.byte	134,65
000000e2 0d               3945		.byte	13
000000e3 9241             3946		.byte	146,65
000000e5 0f               3947		.byte	15
000000e6 3c0c             3948		.byte	60,12
000000e8 200b             3949		.byte	32,11
000000ea 3f0c             3950		.byte	63,12
000000ec 320b             3951		.byte	50,11
000000ee 4c0b             3952		.byte	76,11
000000f0 270c             3953		.byte	39,12
000000f2 0000             3954		.byte	0,0
                          3955	
                          3956		.section	.debug_frame
                          3957	.LDW_5e307c8:
00000090 00000014         3958		.long	.LDW_unq_4-.LDW_unq_3
                          3959	.LDW_unq_3:
00000094 00000000         3960		.long	.LDW_5df2118
00000098 00000000         3961		.long	getNumberOfFlashBlocks..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_flio.
0000009c 00000046         3962		.long	__ghs_eofn_getNumberOfFlashBlocks-getNumberOfFlashBlocks..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_flio.

                                   Fri Apr 10 08:32:08 2020           Page 72
                                   Fri Apr 10 08:32:08 2020   gh_00002441.si
000000a0 01               3963		.byte	1
000000a1 00000000         3964		.long	.LDW11
000000a5 00               3965		.byte	0
000000a6 00               3966		.byte	0
000000a7 00               3967		.byte	0
                          3968	.LDW_unq_4:
                          3969		.section	.debug_line
000005fb 000502           3970		.byte	0,5,2
000005fe 00000000         3971		.long	getNumberOfFlashBlocks..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_flio.
00000602 06               3972		.byte	6
00000603 03               3973		.byte	3
00000604 ca07             3974		.byte	202,7
00000606 02               3975		.byte	2
00000607 00               3976		.byte	0
00000608 01               3977		.byte	1
00000609 03               3978		.byte	3
0000060a 04               3979		.byte	4
0000060b 02               3980		.byte	2
0000060c 02               3981		.byte	2
0000060d 01               3982		.byte	1
0000060e 15               3983		.byte	21
0000060f 06               3984		.byte	6
00000610 000502           3985		.byte	0,5,2
00000613 00000000         3986		.long	.LDWlin1
00000617 03               3987		.byte	3
00000618 21               3988		.byte	33
00000619 02               3989		.byte	2
0000061a 00               3990		.byte	0
0000061b 01               3991		.byte	1
0000061c 03               3992		.byte	3
0000061d 06               3993		.byte	6
0000061e 02               3994		.byte	2
0000061f 00               3995		.byte	0
00000620 01               3996		.byte	1
00000621 06               3997		.byte	6
00000622 0b               3998		.byte	11
00000623 02               3999		.byte	2
00000624 00               4000		.byte	0
00000625 0d               4001		.byte	13
00000626 02               4002		.byte	2
00000627 00               4003		.byte	0
00000628 0d               4004		.byte	13
00000629 14               4005		.byte	20
0000062a 000502           4006		.byte	0,5,2
0000062d 00000000         4007		.long	.LDWlin2
00000631 03               4008		.byte	3
00000632 54               4009		.byte	84
00000633 02               4010		.byte	2
00000634 00               4011		.byte	0
00000635 01               4012		.byte	1
00000636 03               4013		.byte	3
00000637 04               4014		.byte	4
00000638 02               4015		.byte	2
00000639 00               4016		.byte	0
0000063a 01               4017		.byte	1
0000063b 0b               4018		.byte	11

                                   Fri Apr 10 08:32:08 2020           Page 73
                                   Fri Apr 10 08:32:08 2020   gh_00002441.si
0000063c 0d               4019		.byte	13
0000063d 0b               4020		.byte	11
0000063e 0d               4021		.byte	13
0000063f 3b               4022		.byte	59
00000640 000502           4023		.byte	0,5,2
00000643 00000000         4024		.long	.LDWlin3
00000647 0c               4025		.byte	12
00000648 0b               4026		.byte	11
00000649 0b               4027		.byte	11
0000064a 000502           4028		.byte	0,5,2
0000064d 00000000         4029		.long	.LDWlin4
00000651 0b               4030		.byte	11
00000652 0c               4031		.byte	12
00000653 000502           4032		.byte	0,5,2
00000656 00000000         4033		.long	.LDWlin5
0000065a 0b               4034		.byte	11
0000065b 0d               4035		.byte	13
0000065c 03               4036		.byte	3
0000065d 14               4037		.byte	20
0000065e 02               4038		.byte	2
0000065f 08               4039		.byte	8
00000660 01               4040		.byte	1
00000661 0d               4041		.byte	13
00000662 000502           4042		.byte	0,5,2
00000665 00000000         4043		.long	.LDWlin6
00000669 0b               4044		.byte	11
0000066a 0b               4045		.byte	11
0000066b 13               4046		.byte	19
0000066c 02               4047		.byte	2
0000066d 00               4048		.byte	0
0000066e 0c               4049		.byte	12
0000066f 02               4050		.byte	2
00000670 02               4051		.byte	2
00000671 000101           4052		.byte	0,1,1
                          4053		.section	.debug_info
                          4054	.LDW_4ada620:
00000841 11               4055		.byte	17
00000842 70466c6173684d6f 4056		.strz	"pFlashModule"
0000084a 64756c6500      
0000084f ca07             4057		.byte	202,7
00000851 43               4058		.byte	67
00000852 01               4059		.byte	1
00000853 00000000         4060		.long	.LDW_4a9c5d0
00000857 00               4061		.byte	0
00000858 0157             4062		.byte	1,87
                          4063	
                          4064		.section	.debug_abbrev
000000f4 11               4065		.byte	17
000000f5 05               4066		.byte	5
000000f6 00               4067		.byte	0
000000f7 0308             4068		.byte	3,8
000000f9 3b0f             4069		.byte	59,15
000000fb 390f             4070		.byte	57,15
000000fd 3a0f             4071		.byte	58,15
000000ff 4910             4072		.byte	73,16
00000101 4b0c             4073		.byte	75,12
00000103 020a             4074		.byte	2,10

                                   Fri Apr 10 08:32:08 2020           Page 74
                                   Fri Apr 10 08:32:08 2020   gh_00002441.si
00000105 0000             4075		.byte	0,0
                          4076	
                          4077		.section	.debug_info
                          4078	.LDW_4ada678:
0000085a 11               4079		.byte	17
0000085b 70466c617368426c 4080		.strz	"pFlashBlock"
00000863 6f636b00        
00000867 ca07             4081		.byte	202,7
00000869 6b               4082		.byte	107
0000086a 01               4083		.byte	1
0000086b 00000000         4084		.long	.LDW_4a9c7c8
0000086f 00               4085		.byte	0
00000870 0154             4086		.byte	1,84
                          4087	
                          4088	.LDW_4a93680:
00000872 1f               4089		.byte	31
00000873 00000000         4090		.long	.LDW01
00000877 00000000         4091		.long	.LDW11
                          4092	
                          4093		.section	.debug_abbrev
00000107 1f               4094		.byte	31
00000108 0b               4095		.byte	11
00000109 01               4096		.byte	1
0000010a 1101             4097		.byte	17,1
0000010c 1201             4098		.byte	18,1
0000010e 0000             4099		.byte	0,0
                          4100	
                          4101		.section	.debug_info
                          4102	.LDW_4ada6d0:
0000087b 06               4103		.byte	6
0000087c 726573756c7400   4104		.strz	"result"
00000883 cc07             4105		.byte	204,7
00000885 0c               4106		.byte	12
00000886 01               4107		.byte	1
00000887 00000000         4108		.long	.LDW_4adef90
0000088b 00               4109		.byte	0
0000088c 00               4110		.byte	0
0000088d 0153             4111		.byte	1,83
                          4112	
0000088f 00               4113		.byte	0
                          4114	
00000890 00               4115		.byte	0
                          4116	
                          4117	.LDW_4ada7d8:
00000891 16               4118		.byte	22
00000892 636865636b416464 4119		.strz	"checkAddress"
0000089a 7265737300      
0000089f 9a08             4120		.byte	154,8
000008a1 10               4121		.byte	16
000008a2 01               4122		.byte	1
000008a3 00000000         4123		.long	.LDW_4adef90
000008a7 00000000         4124		.long	checkAddress..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_flio.
000008ab 00000000         4125		.long	__ghs_eofn_checkAddress
000008af 0151             4126		.byte	1,81
000008b1 808080ff0f       4127		.byte	128,128,128,255,15
000008b6 0c               4128		.byte	12
000008b7 00               4129		.byte	0
000008b8 38               4130		.byte	56

                                   Fri Apr 10 08:32:08 2020           Page 75
                                   Fri Apr 10 08:32:08 2020   gh_00002441.si
000008b9 00               4131		.byte	0
000008ba 00               4132		.byte	0
000008bb 00               4133		.byte	0
000008bc 00               4134		.byte	0
000008bd 01               4135		.byte	1
000008be 00               4136		.byte	0
000008bf 01               4137		.byte	1
                          4138	
                          4139		.section	.debug_frame
                          4140	.LDW_5e30688:
000000a8 00000014         4141		.long	.LDW_unq_6-.LDW_unq_5
                          4142	.LDW_unq_5:
000000ac 00000000         4143		.long	.LDW_5df2118
000000b0 00000000         4144		.long	checkAddress..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_flio.
000000b4 00000116         4145		.long	__ghs_eofn_checkAddress-checkAddress..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_flio.
000000b8 01               4146		.byte	1
000000b9 00000000         4147		.long	.LDW31
000000bd 00               4148		.byte	0
000000be 00               4149		.byte	0
000000bf 00               4150		.byte	0
                          4151	.LDW_unq_6:
                          4152		.section	.debug_line
00000674 000502           4153		.byte	0,5,2
00000677 00000000         4154		.long	checkAddress..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_flio.
0000067b 06               4155		.byte	6
0000067c 03               4156		.byte	3
0000067d 9a08             4157		.byte	154,8
0000067f 02               4158		.byte	2
00000680 00               4159		.byte	0
00000681 01               4160		.byte	1
00000682 03               4161		.byte	3
00000683 0a               4162		.byte	10
00000684 02               4163		.byte	2
00000685 10               4164		.byte	16
00000686 01               4165		.byte	1
00000687 13               4166		.byte	19
00000688 13               4167		.byte	19
00000689 13               4168		.byte	19
0000068a 14               4169		.byte	20
0000068b 02               4170		.byte	2
0000068c 02               4171		.byte	2
0000068d 0c               4172		.byte	12
0000068e 03               4173		.byte	3
0000068f 7e               4174		.byte	126
00000690 02               4175		.byte	2
00000691 08               4176		.byte	8
00000692 01               4177		.byte	1
00000693 000502           4178		.byte	0,5,2
00000696 00000000         4179		.long	.LDWlin7
0000069a 0d               4180		.byte	13
0000069b 0d               4181		.byte	13
0000069c 13               4182		.byte	19
0000069d 000502           4183		.byte	0,5,2
000006a0 00000000         4184		.long	.LDWlin8
000006a4 0d               4185		.byte	13
000006a5 13               4186		.byte	19

                                   Fri Apr 10 08:32:08 2020           Page 76
                                   Fri Apr 10 08:32:08 2020   gh_00002441.si
000006a6 06               4187		.byte	6
000006a7 03               4188		.byte	3
000006a8 07               4189		.byte	7
000006a9 02               4190		.byte	2
000006aa 00               4191		.byte	0
000006ab 01               4192		.byte	1
000006ac 03               4193		.byte	3
000006ad 7b               4194		.byte	123
000006ae 02               4195		.byte	2
000006af 00               4196		.byte	0
000006b0 01               4197		.byte	1
000006b1 03               4198		.byte	3
000006b2 7e               4199		.byte	126
000006b3 02               4200		.byte	2
000006b4 00               4201		.byte	0
000006b5 01               4202		.byte	1
000006b6 06               4203		.byte	6
000006b7 000502           4204		.byte	0,5,2
000006ba 00000000         4205		.long	.LDWlin9
000006be 03               4206		.byte	3
000006bf 08               4207		.byte	8
000006c0 02               4208		.byte	2
000006c1 00               4209		.byte	0
000006c2 01               4210		.byte	1
000006c3 0c               4211		.byte	12
000006c4 13               4212		.byte	19
000006c5 1b               4213		.byte	27
000006c6 02               4214		.byte	2
000006c7 00               4215		.byte	0
000006c8 0b               4216		.byte	11
000006c9 02               4217		.byte	2
000006ca 00               4218		.byte	0
000006cb 0d               4219		.byte	13
000006cc 000502           4220		.byte	0,5,2
000006cf 00000000         4221		.long	.LDWlin10
000006d3 0c               4222		.byte	12
000006d4 000502           4223		.byte	0,5,2
000006d7 00000000         4224		.long	.LDWlin11
000006db 0c               4225		.byte	12
000006dc 1d               4226		.byte	29
000006dd 000502           4227		.byte	0,5,2
000006e0 00000000         4228		.long	.LDWlin12
000006e4 0b               4229		.byte	11
000006e5 0c               4230		.byte	12
000006e6 000502           4231		.byte	0,5,2
000006e9 00000000         4232		.long	.LDWlin13
000006ed 0d               4233		.byte	13
000006ee 0c               4234		.byte	12
000006ef 15               4235		.byte	21
000006f0 000502           4236		.byte	0,5,2
000006f3 00000000         4237		.long	.LDWlin14
000006f7 0b               4238		.byte	11
000006f8 0b               4239		.byte	11
000006f9 13               4240		.byte	19
000006fa 02               4241		.byte	2
000006fb 00               4242		.byte	0

                                   Fri Apr 10 08:32:08 2020           Page 77
                                   Fri Apr 10 08:32:08 2020   gh_00002441.si
000006fc 0c               4243		.byte	12
000006fd 000502           4244		.byte	0,5,2
00000700 00000000         4245		.long	.LDWlin15
00000704 0b               4246		.byte	11
00000705 0b               4247		.byte	11
00000706 13               4248		.byte	19
00000707 02               4249		.byte	2
00000708 00               4250		.byte	0
00000709 0c               4251		.byte	12
0000070a 000502           4252		.byte	0,5,2
0000070d 00000000         4253		.long	.LDWlin16
00000711 0b               4254		.byte	11
00000712 0b               4255		.byte	11
00000713 000502           4256		.byte	0,5,2
00000716 00000000         4257		.long	.LDWlin17
0000071a 0b               4258		.byte	11
0000071b 02               4259		.byte	2
0000071c 00               4260		.byte	0
0000071d 0b               4261		.byte	11
0000071e 0b               4262		.byte	11
0000071f 000502           4263		.byte	0,5,2
00000722 00000000         4264		.long	.LDWlin18
00000726 0b               4265		.byte	11
00000727 0c               4266		.byte	12
00000728 03               4267		.byte	3
00000729 07               4268		.byte	7
0000072a 02               4269		.byte	2
0000072b 0c               4270		.byte	12
0000072c 01               4271		.byte	1
0000072d 02               4272		.byte	2
0000072e 00               4273		.byte	0
0000072f 0b               4274		.byte	11
00000730 02               4275		.byte	2
00000731 00               4276		.byte	0
00000732 0d               4277		.byte	13
00000733 000502           4278		.byte	0,5,2
00000736 00000000         4279		.long	.LDWlin19
0000073a 0b               4280		.byte	11
0000073b 0c               4281		.byte	12
0000073c 75               4282		.byte	117
0000073d 000502           4283		.byte	0,5,2
00000740 00000000         4284		.long	.LDWlin20
00000744 0b               4285		.byte	11
00000745 0c               4286		.byte	12
00000746 14               4287		.byte	20
00000747 000502           4288		.byte	0,5,2
0000074a 00000000         4289		.long	.LDWlin21
0000074e 03               4290		.byte	3
0000074f 6b               4291		.byte	107
00000750 02               4292		.byte	2
00000751 00               4293		.byte	0
00000752 01               4294		.byte	1
00000753 0c               4295		.byte	12
00000754 0d               4296		.byte	13
00000755 000502           4297		.byte	0,5,2
00000758 00000000         4298		.long	.LDWlin22

                                   Fri Apr 10 08:32:08 2020           Page 78
                                   Fri Apr 10 08:32:08 2020   gh_00002441.si
0000075c 03               4299		.byte	3
0000075d 11               4300		.byte	17
0000075e 02               4301		.byte	2
0000075f 00               4302		.byte	0
00000760 01               4303		.byte	1
00000761 0c               4304		.byte	12
00000762 000502           4305		.byte	0,5,2
00000765 00000000         4306		.long	.LDWlin23
00000769 0b               4307		.byte	11
0000076a 0c               4308		.byte	12
0000076b 23               4309		.byte	35
0000076c 000502           4310		.byte	0,5,2
0000076f 00000000         4311		.long	.LDWlin24
00000773 0b               4312		.byte	11
00000774 0c               4313		.byte	12
00000775 0c               4314		.byte	12
00000776 13               4315		.byte	19
00000777 02               4316		.byte	2
00000778 00               4317		.byte	0
00000779 0c               4318		.byte	12
0000077a 000502           4319		.byte	0,5,2
0000077d 00000000         4320		.long	.LDWlin25
00000781 0b               4321		.byte	11
00000782 0d               4322		.byte	13
00000783 1b               4323		.byte	27
00000784 02               4324		.byte	2
00000785 00               4325		.byte	0
00000786 0b               4326		.byte	11
00000787 02               4327		.byte	2
00000788 00               4328		.byte	0
00000789 0d               4329		.byte	13
0000078a 03               4330		.byte	3
0000078b b07f             4331		.byte	176,127
0000078d 02               4332		.byte	2
0000078e 02               4333		.byte	2
0000078f 01               4334		.byte	1
00000790 000502           4335		.byte	0,5,2
00000793 00000000         4336		.long	.LDWlin26
00000797 03               4337		.byte	3
00000798 d100             4338		.byte	209,0
0000079a 02               4339		.byte	2
0000079b 00               4340		.byte	0
0000079c 01               4341		.byte	1
0000079d 0c               4342		.byte	12
0000079e 03               4343		.byte	3
0000079f 977f             4344		.byte	151,127
000007a1 02               4345		.byte	2
000007a2 02               4346		.byte	2
000007a3 01               4347		.byte	1
000007a4 000502           4348		.byte	0,5,2
000007a7 00000000         4349		.long	.LDWlin27
000007ab 03               4350		.byte	3
000007ac ea00             4351		.byte	234,0
000007ae 02               4352		.byte	2
000007af 00               4353		.byte	0
000007b0 01               4354		.byte	1

                                   Fri Apr 10 08:32:08 2020           Page 79
                                   Fri Apr 10 08:32:08 2020   gh_00002441.si
000007b1 0c               4355		.byte	12
000007b2 06               4356		.byte	6
000007b3 02               4357		.byte	2
000007b4 02               4358		.byte	2
000007b5 02               4359		.byte	2
000007b6 0e               4360		.byte	14
000007b7 000101           4361		.byte	0,1,1
                          4362		.section	.debug_info
                          4363	.LDW_4ada870:
000008c0 11               4364		.byte	17
000008c1 666c617368426c6f 4365		.strz	"flashBlockMask"
000008c9 636b4d61736b00  
000008d0 9a08             4366		.byte	154,8
000008d2 28               4367		.byte	40
000008d3 01               4368		.byte	1
000008d4 00000000         4369		.long	.LDW_4a9c598
000008d8 00               4370		.byte	0
000008d9 0166             4371		.byte	1,102
                          4372	
                          4373	.LDW_5bf4ca8:
000008db 11               4374		.byte	17
000008dc 6c656e67746800   4375		.strz	"length"
000008e3 9a08             4376		.byte	154,8
000008e5 44               4377		.byte	68
000008e6 01               4378		.byte	1
000008e7 00000000         4379		.long	.LDW_4ada728
000008eb 00               4380		.byte	0
000008ec 0154             4381		.byte	1,84
                          4382	
                          4383	.LDW_5bf4d00:
000008ee 11               4384		.byte	17
000008ef 6164647265737300 4385		.strz	"address"
000008f7 9a08             4386		.byte	154,8
000008f9 5c               4387		.byte	92
000008fa 01               4388		.byte	1
000008fb 00000000         4389		.long	.LDW_4ada780
000008ff 00               4390		.byte	0
00000900 016e             4391		.byte	1,110
                          4392	
                          4393	.LDW_4a934d0:
00000902 1f               4394		.byte	31
00000903 00000000         4395		.long	.LDW21
00000907 00000000         4396		.long	.LDW31
                          4397	
                          4398	.LDW_5bf50f0:
0000090b 06               4399		.byte	6
0000090c 6900             4400		.strz	"i"
0000090e 9c08             4401		.byte	156,8
00000910 0c               4402		.byte	12
00000911 01               4403		.byte	1
00000912 00000000         4404		.long	.LDW_4adef90
00000916 00               4405		.byte	0
00000917 00               4406		.byte	0
00000918 016b             4407		.byte	1,107
                          4408	
                          4409	.LDW_5bf5040:
0000091a 06               4410		.byte	6

                                   Fri Apr 10 08:32:08 2020           Page 80
                                   Fri Apr 10 08:32:08 2020   gh_00002441.si
0000091b 6a00             4411		.strz	"j"
0000091d 9c08             4412		.byte	156,8
0000091f 0f               4413		.byte	15
00000920 01               4414		.byte	1
00000921 00000000         4415		.long	.LDW_4adef90
00000925 00               4416		.byte	0
00000926 00               4417		.byte	0
00000927 0168             4418		.byte	1,104
                          4419	
                          4420	.LDW_5bf54b8:
00000929 06               4421		.byte	6
0000092a 63757272656e7441 4422		.strz	"currentAddress"
00000932 64647265737300  
00000939 9e08             4423		.byte	158,8
0000093b 12               4424		.byte	18
0000093c 01               4425		.byte	1
0000093d 00000000         4426		.long	.LDW_5bf4d80
00000941 00               4427		.byte	0
00000942 00               4428		.byte	0
00000943 016f             4429		.byte	1,111
                          4430	
                          4431	.LDW_5bf5098:
00000945 06               4432		.byte	6
00000946 63757272656e744c 4433		.strz	"currentLength"
0000094e 656e67746800    
00000954 9f08             4434		.byte	159,8
00000956 11               4435		.byte	17
00000957 01               4436		.byte	1
00000958 00000000         4437		.long	.LDW_5bf4dd8
0000095c 00               4438		.byte	0
0000095d 00               4439		.byte	0
0000095e 016c             4440		.byte	1,108
                          4441	
                          4442	.LDW_5bf5358:
00000960 06               4443		.byte	6
00000961 6d61784974657261 4444		.strz	"maxIterationFlashBlocks"
00000969 74696f6e466c6173
00000971 68426c6f636b7300
00000979 a008             4445		.byte	160,8
0000097b 0c               4446		.byte	12
0000097c 01               4447		.byte	1
0000097d 00000000         4448		.long	.LDW_4adef90
00000981 00               4449		.byte	0
00000982 00               4450		.byte	0
00000983 0165             4451		.byte	1,101
                          4452	
                          4453	.LDW_5bf4e30:
00000985 06               4454		.byte	6
00000986 726573756c7400   4455		.strz	"result"
0000098d a108             4456		.byte	161,8
0000098f 0c               4457		.byte	12
00000990 01               4458		.byte	1
00000991 00000000         4459		.long	.LDW_4adef90
00000995 00               4460		.byte	0
00000996 00               4461		.byte	0
00000997 016d             4462		.byte	1,109
                          4463	
                          4464	.LDW_5bf4ee0:
00000999 06               4465		.byte	6
0000099a 697465726174696f 4466		.strz	"iterationState"
000009a2 6e537461746500  

                                   Fri Apr 10 08:32:08 2020           Page 81
                                   Fri Apr 10 08:32:08 2020   gh_00002441.si
000009a9 a208             4467		.byte	162,8
000009ab 0c               4468		.byte	12
000009ac 01               4469		.byte	1
000009ad 00000000         4470		.long	.LDW_4adef90
000009b1 00               4471		.byte	0
000009b2 00               4472		.byte	0
000009b3 016a             4473		.byte	1,106
                          4474	
000009b5 00               4475		.byte	0
                          4476	
000009b6 00               4477		.byte	0
                          4478	
                          4479	.LDW_5bf5560:
000009b7 16               4480		.byte	22
000009b8 466c617368447269 4481		.strz	"FlashDriver_InitSync"
000009c0 7665725f496e6974
000009c8 53796e6300      
000009cd db09             4482		.byte	219,9
000009cf 0e               4483		.byte	14
000009d0 01               4484		.byte	1
000009d1 00000000         4485		.long	.LDW_5bf52a8
000009d5 00000000         4486		.long	FlashDriver_InitSync
000009d9 00000000         4487		.long	__ghs_eofn_FlashDriver_InitSync
000009dd 0151             4488		.byte	1,81
000009df 8080808008       4489		.byte	128,128,128,128,8
000009e4 0c               4490		.byte	12
000009e5 00               4491		.byte	0
000009e6 10               4492		.byte	16
000009e7 00               4493		.byte	0
000009e8 00               4494		.byte	0
000009e9 00               4495		.byte	0
000009ea 01               4496		.byte	1
000009eb 01               4497		.byte	1
000009ec 00               4498		.byte	0
000009ed 01               4499		.byte	1
                          4500	
                          4501		.section	.debug_frame
                          4502	.LDW_5e30188:
000000c0 00000014         4503		.long	.LDW_unq_8-.LDW_unq_7
                          4504	.LDW_unq_7:
000000c4 00000000         4505		.long	.LDW_5df2118
000000c8 00000000         4506		.long	FlashDriver_InitSync
000000cc 00000084         4507		.long	__ghs_eofn_FlashDriver_InitSync-FlashDriver_InitSync
000000d0 01               4508		.byte	1
000000d1 00000000         4509		.long	.LDW51
000000d5 00               4510		.byte	0
000000d6 00               4511		.byte	0
000000d7 00               4512		.byte	0
                          4513	.LDW_unq_8:
                          4514		.section	.debug_line
000007ba 000502           4515		.byte	0,5,2
000007bd 00000000         4516		.long	FlashDriver_InitSync
000007c1 06               4517		.byte	6
000007c2 03               4518		.byte	3
000007c3 db09             4519		.byte	219,9
000007c5 02               4520		.byte	2
000007c6 00               4521		.byte	0
000007c7 01               4522		.byte	1

                                   Fri Apr 10 08:32:08 2020           Page 82
                                   Fri Apr 10 08:32:08 2020   gh_00002441.si
000007c8 02               4523		.byte	2
000007c9 0a               4524		.byte	10
000007ca 03               4525		.byte	3
000007cb 17               4526		.byte	23
000007cc 02               4527		.byte	2
000007cd 08               4528		.byte	8
000007ce 01               4529		.byte	1
000007cf 03               4530		.byte	3
000007d0 05               4531		.byte	5
000007d1 02               4532		.byte	2
000007d2 08               4533		.byte	8
000007d3 01               4534		.byte	1
000007d4 43               4535		.byte	67
000007d5 2b               4536		.byte	43
000007d6 13               4537		.byte	19
000007d7 14               4538		.byte	20
000007d8 1b               4539		.byte	27
000007d9 1b               4540		.byte	27
000007da 14               4541		.byte	20
000007db 1b               4542		.byte	27
000007dc 1b               4543		.byte	27
000007dd 13               4544		.byte	19
000007de 25               4545		.byte	37
000007df 000502           4546		.byte	0,5,2
000007e2 00000000         4547		.long	.LDWlin28
000007e6 03               4548		.byte	3
000007e7 04               4549		.byte	4
000007e8 02               4550		.byte	2
000007e9 00               4551		.byte	0
000007ea 01               4552		.byte	1
000007eb 0c               4553		.byte	12
000007ec 000502           4554		.byte	0,5,2
000007ef 00000000         4555		.long	.LDWlin29
000007f3 0b               4556		.byte	11
000007f4 0c               4557		.byte	12
000007f5 0c               4558		.byte	12
000007f6 33               4559		.byte	51
000007f7 02               4560		.byte	2
000007f8 00               4561		.byte	0
000007f9 0c               4562		.byte	12
000007fa 06               4563		.byte	6
000007fb 02               4564		.byte	2
000007fc 02               4565		.byte	2
000007fd 02               4566		.byte	2
000007fe 0a               4567		.byte	10
000007ff 000101           4568		.byte	0,1,1
                          4569		.section	.debug_info
                          4570	.LDW_5bf51f8:
000009ee 11               4571		.byte	17
000009ef 6164647265737300 4572		.strz	"address"
000009f7 db09             4573		.byte	219,9
000009f9 2b               4574		.byte	43
000009fa 01               4575		.byte	1
000009fb 00000000         4576		.long	.LDW_4a9c6e8
000009ff 00               4577		.byte	0
00000a00 0153             4578		.byte	1,83

                                   Fri Apr 10 08:32:08 2020           Page 83
                                   Fri Apr 10 08:32:08 2020   gh_00002441.si
                          4579	
                          4580	.LDW_4a934a0:
00000a02 1f               4581		.byte	31
00000a03 00000000         4582		.long	.LDW41
00000a07 00000000         4583		.long	.LDW51
                          4584	
00000a0b 00               4585		.byte	0
                          4586	
00000a0c 00               4587		.byte	0
                          4588	
                          4589	.LDW_5bf55f8:
00000a0d 16               4590		.byte	22
00000a0e 466c617368447269 4591		.strz	"FlashDriver_DeinitSync"
00000a16 7665725f4465696e
00000a1e 697453796e6300  
00000a25 a20a             4592		.byte	162,10
00000a27 0e               4593		.byte	14
00000a28 01               4594		.byte	1
00000a29 00000000         4595		.long	.LDW_5bf52a8
00000a2d 00000000         4596		.long	FlashDriver_DeinitSync
00000a31 00000000         4597		.long	__ghs_eofn_FlashDriver_DeinitSync
00000a35 0151             4598		.byte	1,81
00000a37 808080800e       4599		.byte	128,128,128,128,14
00000a3c 0c               4600		.byte	12
00000a3d 00               4601		.byte	0
00000a3e 18               4602		.byte	24
00000a3f 00               4603		.byte	0
00000a40 00               4604		.byte	0
00000a41 00               4605		.byte	0
00000a42 01               4606		.byte	1
00000a43 01               4607		.byte	1
00000a44 00               4608		.byte	0
00000a45 01               4609		.byte	1
                          4610	
                          4611		.section	.debug_frame
                          4612	.LDW_5e301c8:
000000d8 00000014         4613		.long	.LDW_unq_a-.LDW_unq_9
                          4614	.LDW_unq_9:
000000dc 00000000         4615		.long	.LDW_5df2118
000000e0 00000000         4616		.long	FlashDriver_DeinitSync
000000e4 00000062         4617		.long	__ghs_eofn_FlashDriver_DeinitSync-FlashDriver_DeinitSync
000000e8 01               4618		.byte	1
000000e9 00000000         4619		.long	.LDW71
000000ed 00               4620		.byte	0
000000ee 00               4621		.byte	0
000000ef 00               4622		.byte	0
                          4623	.LDW_unq_a:
                          4624		.section	.debug_line
00000802 000502           4625		.byte	0,5,2
00000805 00000000         4626		.long	FlashDriver_DeinitSync
00000809 06               4627		.byte	6
0000080a 03               4628		.byte	3
0000080b a20a             4629		.byte	162,10
0000080d 02               4630		.byte	2
0000080e 00               4631		.byte	0
0000080f 01               4632		.byte	1
00000810 03               4633		.byte	3
00000811 09               4634		.byte	9

                                   Fri Apr 10 08:32:08 2020           Page 84
                                   Fri Apr 10 08:32:08 2020   gh_00002441.si
00000812 02               4635		.byte	2
00000813 0c               4636		.byte	12
00000814 01               4637		.byte	1
00000815 000502           4638		.byte	0,5,2
00000818 00000000         4639		.long	.LDWlin30
0000081c 0d               4640		.byte	13
0000081d 0c               4641		.byte	12
0000081e 33               4642		.byte	51
0000081f 02               4643		.byte	2
00000820 00               4644		.byte	0
00000821 0d               4645		.byte	13
00000822 02               4646		.byte	2
00000823 02               4647		.byte	2
00000824 0c               4648		.byte	12
00000825 000502           4649		.byte	0,5,2
00000828 00000000         4650		.long	.LDWlin31
0000082c 0b               4651		.byte	11
0000082d 0b               4652		.byte	11
0000082e 1b               4653		.byte	27
0000082f 02               4654		.byte	2
00000830 00               4655		.byte	0
00000831 0c               4656		.byte	12
00000832 03               4657		.byte	3
00000833 79               4658		.byte	121
00000834 02               4659		.byte	2
00000835 06               4660		.byte	6
00000836 01               4661		.byte	1
00000837 000502           4662		.byte	0,5,2
0000083a 00000000         4663		.long	.LDWlin32
0000083e 03               4664		.byte	3
0000083f 08               4665		.byte	8
00000840 02               4666		.byte	2
00000841 00               4667		.byte	0
00000842 01               4668		.byte	1
00000843 0c               4669		.byte	12
00000844 06               4670		.byte	6
00000845 02               4671		.byte	2
00000846 02               4672		.byte	2
00000847 02               4673		.byte	2
00000848 0c               4674		.byte	12
00000849 000101           4675		.byte	0,1,1
                          4676		.section	.debug_info
                          4677	.LDW_5bf5148:
00000a46 11               4678		.byte	17
00000a47 6164647265737300 4679		.strz	"address"
00000a4f a20a             4680		.byte	162,10
00000a51 2d               4681		.byte	45
00000a52 01               4682		.byte	1
00000a53 00000000         4683		.long	.LDW_4a9c6e8
00000a57 00               4684		.byte	0
00000a58 0153             4685		.byte	1,83
                          4686	
                          4687	.LDW_4a93500:
00000a5a 1f               4688		.byte	31
00000a5b 00000000         4689		.long	.LDW61
00000a5f 00000000         4690		.long	.LDW71

                                   Fri Apr 10 08:32:08 2020           Page 85
                                   Fri Apr 10 08:32:08 2020   gh_00002441.si
                          4691	
                          4692	.LDW_5bf5408:
00000a63 06               4693		.byte	6
00000a64 6900             4694		.strz	"i"
00000a66 a40a             4695		.byte	164,10
00000a68 0c               4696		.byte	12
00000a69 01               4697		.byte	1
00000a6a 00000000         4698		.long	.LDW_4adef90
00000a6e 00               4699		.byte	0
00000a6f 00               4700		.byte	0
00000a70 016e             4701		.byte	1,110
                          4702	
00000a72 00               4703		.byte	0
                          4704	
00000a73 00               4705		.byte	0
                          4706	
                          4707	.LDW_5bf5690:
00000a74 16               4708		.byte	22
00000a75 466c617368447269 4709		.strz	"FlashDriver_RWriteSync"
00000a7d 7665725f52577269
00000a85 746553796e6300  
00000a8c cd0a             4710		.byte	205,10
00000a8e 0e               4711		.byte	14
00000a8f 01               4712		.byte	1
00000a90 00000000         4713		.long	.LDW_5bf52a8
00000a94 00000000         4714		.long	FlashDriver_RWriteSync
00000a98 00000000         4715		.long	__ghs_eofn_FlashDriver_RWriteSync
00000a9c 0151             4716		.byte	1,81
00000a9e 808080800f       4717		.byte	128,128,128,128,15
00000aa3 18               4718		.byte	24
00000aa4 00               4719		.byte	0
00000aa5 28               4720		.byte	40
00000aa6 00               4721		.byte	0
00000aa7 00               4722		.byte	0
00000aa8 00               4723		.byte	0
00000aa9 01               4724		.byte	1
00000aaa 01               4725		.byte	1
00000aab 00               4726		.byte	0
00000aac 01               4727		.byte	1
                          4728	
                          4729		.section	.debug_frame
                          4730	.LDW_5e302c8:
000000f0 00000014         4731		.long	.LDW_unq_c-.LDW_unq_b
                          4732	.LDW_unq_b:
000000f4 00000000         4733		.long	.LDW_5df2118
000000f8 00000000         4734		.long	FlashDriver_RWriteSync
000000fc 00000064         4735		.long	__ghs_eofn_FlashDriver_RWriteSync-FlashDriver_RWriteSync
00000100 01               4736		.byte	1
00000101 00000000         4737		.long	.LDW91
00000105 00               4738		.byte	0
00000106 00               4739		.byte	0
00000107 00               4740		.byte	0
                          4741	.LDW_unq_c:
                          4742		.section	.debug_line
0000084c 000502           4743		.byte	0,5,2
0000084f 00000000         4744		.long	FlashDriver_RWriteSync
00000853 06               4745		.byte	6
00000854 03               4746		.byte	3

                                   Fri Apr 10 08:32:08 2020           Page 86
                                   Fri Apr 10 08:32:08 2020   gh_00002441.si
00000855 cd0a             4747		.byte	205,10
00000857 02               4748		.byte	2
00000858 00               4749		.byte	0
00000859 01               4750		.byte	1
0000085a 03               4751		.byte	3
0000085b 05               4752		.byte	5
0000085c 02               4753		.byte	2
0000085d 0e               4754		.byte	14
0000085e 01               4755		.byte	1
0000085f 000502           4756		.byte	0,5,2
00000862 00000000         4757		.long	.LDWlin33
00000866 0d               4758		.byte	13
00000867 06               4759		.byte	6
00000868 03               4760		.byte	3
00000869 06               4761		.byte	6
0000086a 02               4762		.byte	2
0000086b 08               4763		.byte	8
0000086c 01               4764		.byte	1
0000086d 03               4765		.byte	3
0000086e 15               4766		.byte	21
0000086f 02               4767		.byte	2
00000870 00               4768		.byte	0
00000871 01               4769		.byte	1
00000872 03               4770		.byte	3
00000873 6e               4771		.byte	110
00000874 02               4772		.byte	2
00000875 00               4773		.byte	0
00000876 01               4774		.byte	1
00000877 03               4775		.byte	3
00000878 7a               4776		.byte	122
00000879 02               4777		.byte	2
0000087a 00               4778		.byte	0
0000087b 01               4779		.byte	1
0000087c 03               4780		.byte	3
0000087d 7d               4781		.byte	125
0000087e 02               4782		.byte	2
0000087f 00               4783		.byte	0
00000880 01               4784		.byte	1
00000881 06               4785		.byte	6
00000882 000502           4786		.byte	0,5,2
00000885 00000000         4787		.long	.LDWlin34
00000889 03               4788		.byte	3
0000088a 04               4789		.byte	4
0000088b 02               4790		.byte	2
0000088c 00               4791		.byte	0
0000088d 01               4792		.byte	1
0000088e 000502           4793		.byte	0,5,2
00000891 00000000         4794		.long	.LDWlin35
00000895 03               4795		.byte	3
00000896 06               4796		.byte	6
00000897 02               4797		.byte	2
00000898 00               4798		.byte	0
00000899 01               4799		.byte	1
0000089a 000502           4800		.byte	0,5,2
0000089d 00000000         4801		.long	.LDWlin36
000008a1 03               4802		.byte	3

                                   Fri Apr 10 08:32:08 2020           Page 87
                                   Fri Apr 10 08:32:08 2020   gh_00002441.si
000008a2 12               4803		.byte	18
000008a3 02               4804		.byte	2
000008a4 00               4805		.byte	0
000008a5 01               4806		.byte	1
000008a6 13               4807		.byte	19
000008a7 13               4808		.byte	19
000008a8 2d               4809		.byte	45
000008a9 4c               4810		.byte	76
000008aa 02               4811		.byte	2
000008ab 00               4812		.byte	0
000008ac 0c               4813		.byte	12
000008ad 06               4814		.byte	6
000008ae 02               4815		.byte	2
000008af 02               4816		.byte	2
000008b0 02               4817		.byte	2
000008b1 0e               4818		.byte	14
000008b2 000101           4819		.byte	0,1,1
                          4820		.section	.debug_info
                          4821	.LDW_5bf51a0:
00000aad 11               4822		.byte	17
00000aae 7772697465427566 4823		.strz	"writeBuffer"
00000ab6 66657200        
00000aba cd0a             4824		.byte	205,10
00000abc 34               4825		.byte	52
00000abd 01               4826		.byte	1
00000abe 00000000         4827		.long	.LDW_5bf5300
00000ac2 00               4828		.byte	0
00000ac3 016c             4829		.byte	1,108
                          4830	
                          4831	.LDW_5bf4fe8:
00000ac5 11               4832		.byte	17
00000ac6 77726974654c656e 4833		.strz	"writeLength"
00000ace 67746800        
00000ad2 cd0a             4834		.byte	205,10
00000ad4 4d               4835		.byte	77
00000ad5 01               4836		.byte	1
00000ad6 00000000         4837		.long	.LDW_4ada728
00000ada 00               4838		.byte	0
00000adb 016d             4839		.byte	1,109
                          4840	
                          4841	.LDW_5bf4f90:
00000add 11               4842		.byte	17
00000ade 7772697465416464 4843		.strz	"writeAddress"
00000ae6 7265737300      
00000aeb cd0a             4844		.byte	205,10
00000aed 6a               4845		.byte	106
00000aee 01               4846		.byte	1
00000aef 00000000         4847		.long	.LDW_4ada780
00000af3 00               4848		.byte	0
00000af4 016e             4849		.byte	1,110
                          4850	
                          4851	.LDW_4a93170:
00000af6 1f               4852		.byte	31
00000af7 00000000         4853		.long	.LDW81
00000afb 00000000         4854		.long	.LDW91
                          4855	
                          4856	.LDW_5bf5460:
00000aff 06               4857		.byte	6
00000b00 7772697465416c69 4858		.strz	"writeAlignment"
00000b08 676e6d656e7400  

                                   Fri Apr 10 08:32:08 2020           Page 88
                                   Fri Apr 10 08:32:08 2020   gh_00002441.si
00000b0f cf0a             4859		.byte	207,10
00000b11 0c               4860		.byte	12
00000b12 01               4861		.byte	1
00000b13 00000000         4862		.long	.LDW_4adef90
00000b17 00               4863		.byte	0
00000b18 00               4864		.byte	0
00000b19 0153             4865		.byte	1,83
                          4866	
                          4867	.LDW_5bf4f38:
00000b1b 06               4868		.byte	6
00000b1c 666c617368426c6f 4869		.strz	"flashBlockMask"
00000b24 636b4d61736b00  
00000b2b d00a             4870		.byte	208,10
00000b2d 0c               4871		.byte	12
00000b2e 01               4872		.byte	1
00000b2f 00000000         4873		.long	.LDW_5bf5728
00000b33 00               4874		.byte	0
00000b34 00               4875		.byte	0
00000b35 0271             4876		.byte	2,113
00000b37 08               4877		.byte	8
                          4878	
00000b38 00               4879		.byte	0
                          4880	
00000b39 00               4881		.byte	0
                          4882	
                          4883	.LDW_5bf57b0:
00000b3a 16               4884		.byte	22
00000b3b 466c617368447269 4885		.strz	"FlashDriver_REraseSync"
00000b43 7665725f52457261
00000b4b 736553796e6300  
00000b52 8b0b             4886		.byte	139,11
00000b54 0e               4887		.byte	14
00000b55 01               4888		.byte	1
00000b56 00000000         4889		.long	.LDW_5bf52a8
00000b5a 00000000         4890		.long	FlashDriver_REraseSync
00000b5e 00000000         4891		.long	__ghs_eofn_FlashDriver_REraseSync
00000b62 0151             4892		.byte	1,81
00000b64 808080800c       4893		.byte	128,128,128,128,12
00000b69 18               4894		.byte	24
00000b6a 00               4895		.byte	0
00000b6b 20               4896		.byte	32
00000b6c 00               4897		.byte	0
00000b6d 00               4898		.byte	0
00000b6e 00               4899		.byte	0
00000b6f 01               4900		.byte	1
00000b70 01               4901		.byte	1
00000b71 00               4902		.byte	0
00000b72 01               4903		.byte	1
                          4904	
                          4905		.section	.debug_frame
                          4906	.LDW_5e30588:
00000108 00000014         4907		.long	.LDW_unq_e-.LDW_unq_d
                          4908	.LDW_unq_d:
0000010c 00000000         4909		.long	.LDW_5df2118
00000110 00000000         4910		.long	FlashDriver_REraseSync
00000114 0000005e         4911		.long	__ghs_eofn_FlashDriver_REraseSync-FlashDriver_REraseSync
00000118 01               4912		.byte	1
00000119 00000000         4913		.long	.LDW12
0000011d 00               4914		.byte	0

                                   Fri Apr 10 08:32:08 2020           Page 89
                                   Fri Apr 10 08:32:08 2020   gh_00002441.si
0000011e 00               4915		.byte	0
0000011f 00               4916		.byte	0
                          4917	.LDW_unq_e:
                          4918		.section	.debug_line
000008b5 000502           4919		.byte	0,5,2
000008b8 00000000         4920		.long	FlashDriver_REraseSync
000008bc 06               4921		.byte	6
000008bd 03               4922		.byte	3
000008be 8b0b             4923		.byte	139,11
000008c0 02               4924		.byte	2
000008c1 00               4925		.byte	0
000008c2 01               4926		.byte	1
000008c3 03               4927		.byte	3
000008c4 05               4928		.byte	5
000008c5 02               4929		.byte	2
000008c6 0e               4930		.byte	14
000008c7 01               4931		.byte	1
000008c8 000502           4932		.byte	0,5,2
000008cb 00000000         4933		.long	.LDWlin37
000008cf 0d               4934		.byte	13
000008d0 06               4935		.byte	6
000008d1 03               4936		.byte	3
000008d2 06               4937		.byte	6
000008d3 02               4938		.byte	2
000008d4 08               4939		.byte	8
000008d5 01               4940		.byte	1
000008d6 03               4941		.byte	3
000008d7 09               4942		.byte	9
000008d8 02               4943		.byte	2
000008d9 00               4944		.byte	0
000008da 01               4945		.byte	1
000008db 03               4946		.byte	3
000008dc 7a               4947		.byte	122
000008dd 02               4948		.byte	2
000008de 00               4949		.byte	0
000008df 01               4950		.byte	1
000008e0 03               4951		.byte	3
000008e1 7a               4952		.byte	122
000008e2 02               4953		.byte	2
000008e3 00               4954		.byte	0
000008e4 01               4955		.byte	1
000008e5 03               4956		.byte	3
000008e6 7d               4957		.byte	125
000008e7 02               4958		.byte	2
000008e8 00               4959		.byte	0
000008e9 01               4960		.byte	1
000008ea 06               4961		.byte	6
000008eb 000502           4962		.byte	0,5,2
000008ee 00000000         4963		.long	.LDWlin38
000008f2 03               4964		.byte	3
000008f3 04               4965		.byte	4
000008f4 02               4966		.byte	2
000008f5 00               4967		.byte	0
000008f6 01               4968		.byte	1
000008f7 000502           4969		.byte	0,5,2
000008fa 00000000         4970		.long	.LDWlin39

                                   Fri Apr 10 08:32:08 2020           Page 90
                                   Fri Apr 10 08:32:08 2020   gh_00002441.si
000008fe 03               4971		.byte	3
000008ff 06               4972		.byte	6
00000900 02               4973		.byte	2
00000901 00               4974		.byte	0
00000902 01               4975		.byte	1
00000903 000502           4976		.byte	0,5,2
00000906 00000000         4977		.long	.LDWlin40
0000090a 03               4978		.byte	3
0000090b 06               4979		.byte	6
0000090c 02               4980		.byte	2
0000090d 00               4981		.byte	0
0000090e 01               4982		.byte	1
0000090f 15               4983		.byte	21
00000910 4b               4984		.byte	75
00000911 02               4985		.byte	2
00000912 00               4986		.byte	0
00000913 0c               4987		.byte	12
00000914 06               4988		.byte	6
00000915 02               4989		.byte	2
00000916 02               4990		.byte	2
00000917 02               4991		.byte	2
00000918 0c               4992		.byte	12
00000919 000101           4993		.byte	0,1,1
                          4994		.section	.debug_info
                          4995	.LDW_5bf4e88:
00000b73 11               4996		.byte	17
00000b74 65726173654c656e 4997		.strz	"eraseLength"
00000b7c 67746800        
00000b80 8b0b             4998		.byte	139,11
00000b82 32               4999		.byte	50
00000b83 01               5000		.byte	1
00000b84 00000000         5001		.long	.LDW_4ada728
00000b88 00               5002		.byte	0
00000b89 0153             5003		.byte	1,83
                          5004	
                          5005	.LDW_5c8e518:
00000b8b 11               5006		.byte	17
00000b8c 6572617365416464 5007		.strz	"eraseAddress"
00000b94 7265737300      
00000b99 8b0b             5008		.byte	139,11
00000b9b 4f               5009		.byte	79
00000b9c 01               5010		.byte	1
00000b9d 00000000         5011		.long	.LDW_4ada780
00000ba1 00               5012		.byte	0
00000ba2 016e             5013		.byte	1,110
                          5014	
                          5015	.LDW_4a935f0:
00000ba4 1f               5016		.byte	31
00000ba5 00000000         5017		.long	.LDW02
00000ba9 00000000         5018		.long	.LDW12
                          5019	
                          5020	.LDW_5c8ec50:
00000bad 06               5021		.byte	6
00000bae 6572617365416c69 5022		.strz	"eraseAlignment"
00000bb6 676e6d656e7400  
00000bbd 8d0b             5023		.byte	141,11
00000bbf 0c               5024		.byte	12
00000bc0 01               5025		.byte	1
00000bc1 00000000         5026		.long	.LDW_4adef90

                                   Fri Apr 10 08:32:08 2020           Page 91
                                   Fri Apr 10 08:32:08 2020   gh_00002441.si
00000bc5 00               5027		.byte	0
00000bc6 00               5028		.byte	0
00000bc7 0153             5029		.byte	1,83
                          5030	
                          5031	.LDW_5c8e7d8:
00000bc9 06               5032		.byte	6
00000bca 666c617368426c6f 5033		.strz	"flashBlockMask"
00000bd2 636b4d61736b00  
00000bd9 8e0b             5034		.byte	142,11
00000bdb 0c               5035		.byte	12
00000bdc 01               5036		.byte	1
00000bdd 00000000         5037		.long	.LDW_5bf5848
00000be1 00               5038		.byte	0
00000be2 00               5039		.byte	0
00000be3 0271             5040		.byte	2,113
00000be5 08               5041		.byte	8
                          5042	
00000be6 00               5043		.byte	0
                          5044	
00000be7 00               5045		.byte	0
                          5046	
                          5047	.LDW_5bf5a70:
00000be8 16               5048		.byte	22
00000be9 466c617368447269 5049		.strz	"FlashDriver_RReadSync"
00000bf1 7665725f52526561
00000bf9 6453796e6300    
00000bff ba0b             5050		.byte	186,11
00000c01 0e               5051		.byte	14
00000c02 01               5052		.byte	1
00000c03 00000000         5053		.long	.LDW_5bf52a8
00000c07 00000000         5054		.long	FlashDriver_RReadSync
00000c0b 00000000         5055		.long	__ghs_eofn_FlashDriver_RReadSync
00000c0f 0151             5056		.byte	1,81
00000c11 808080800c       5057		.byte	128,128,128,128,12
00000c16 08               5058		.byte	8
00000c17 00               5059		.byte	0
00000c18 10               5060		.byte	16
00000c19 00               5061		.byte	0
00000c1a 00               5062		.byte	0
00000c1b 00               5063		.byte	0
00000c1c 01               5064		.byte	1
00000c1d 01               5065		.byte	1
00000c1e 00               5066		.byte	0
00000c1f 01               5067		.byte	1
                          5068	
                          5069		.section	.debug_frame
                          5070	.LDW_5e30388:
00000120 00000014         5071		.long	.LDW_unq_10-.LDW_unq_f
                          5072	.LDW_unq_f:
00000124 00000000         5073		.long	.LDW_5df2118
00000128 00000000         5074		.long	FlashDriver_RReadSync
0000012c 0000008a         5075		.long	__ghs_eofn_FlashDriver_RReadSync-FlashDriver_RReadSync
00000130 01               5076		.byte	1
00000131 00000000         5077		.long	.LDW32
00000135 00               5078		.byte	0
00000136 00               5079		.byte	0
00000137 00               5080		.byte	0
                          5081	.LDW_unq_10:
                          5082		.section	.debug_line

                                   Fri Apr 10 08:32:08 2020           Page 92
                                   Fri Apr 10 08:32:08 2020   gh_00002441.si
0000091c 000502           5083		.byte	0,5,2
0000091f 00000000         5084		.long	FlashDriver_RReadSync
00000923 06               5085		.byte	6
00000924 03               5086		.byte	3
00000925 ba0b             5087		.byte	186,11
00000927 02               5088		.byte	2
00000928 00               5089		.byte	0
00000929 01               5090		.byte	1
0000092a 02               5091		.byte	2
0000092b 0c               5092		.byte	12
0000092c 03               5093		.byte	3
0000092d 15               5094		.byte	21
0000092e 02               5095		.byte	2
0000092f 08               5096		.byte	8
00000930 01               5097		.byte	1
00000931 03               5098		.byte	3
00000932 05               5099		.byte	5
00000933 02               5100		.byte	2
00000934 0a               5101		.byte	10
00000935 01               5102		.byte	1
00000936 3d               5103		.byte	61
00000937 23               5104		.byte	35
00000938 1c               5105		.byte	28
00000939 1b               5106		.byte	27
0000093a 13               5107		.byte	19
0000093b 13               5108		.byte	19
0000093c 13               5109		.byte	19
0000093d 14               5110		.byte	20
0000093e 13               5111		.byte	19
0000093f 13               5112		.byte	19
00000940 14               5113		.byte	20
00000941 15               5114		.byte	21
00000942 000502           5115		.byte	0,5,2
00000945 00000000         5116		.long	.LDWlin41
00000949 0c               5117		.byte	12
0000094a 03               5118		.byte	3
0000094b 7e               5119		.byte	126
0000094c 02               5120		.byte	2
0000094d 04               5121		.byte	4
0000094e 01               5122		.byte	1
0000094f 000502           5123		.byte	0,5,2
00000952 00000000         5124		.long	.LDWlin42
00000956 0d               5125		.byte	13
00000957 0d               5126		.byte	13
00000958 000502           5127		.byte	0,5,2
0000095b 00000000         5128		.long	.LDWlin43
0000095f 0c               5129		.byte	12
00000960 0c               5130		.byte	12
00000961 0c               5131		.byte	12
00000962 0c               5132		.byte	12
00000963 35               5133		.byte	53
00000964 33               5134		.byte	51
00000965 13               5135		.byte	19
00000966 02               5136		.byte	2
00000967 00               5137		.byte	0
00000968 03               5138		.byte	3

                                   Fri Apr 10 08:32:08 2020           Page 93
                                   Fri Apr 10 08:32:08 2020   gh_00002441.si
00000969 04               5139		.byte	4
0000096a 02               5140		.byte	2
0000096b 00               5141		.byte	0
0000096c 01               5142		.byte	1
0000096d 02               5143		.byte	2
0000096e 0c               5144		.byte	12
0000096f 000101           5145		.byte	0,1,1
                          5146		.section	.debug_info
                          5147	.LDW_5c8e570:
00000c20 11               5148		.byte	17
00000c21 7265616442756666 5149		.strz	"readBuffer"
00000c29 657200          
00000c2c ba0b             5150		.byte	186,11
00000c2e 33               5151		.byte	51
00000c2f 01               5152		.byte	1
00000c30 00000000         5153		.long	.LDW_5bf5300
00000c34 00               5154		.byte	0
00000c35 0153             5155		.byte	1,83
                          5156	
                          5157	.LDW_5c8eba0:
00000c37 11               5158		.byte	17
00000c38 726561644c656e67 5159		.strz	"readLength"
00000c40 746800          
00000c43 ba0b             5160		.byte	186,11
00000c45 4b               5161		.byte	75
00000c46 01               5162		.byte	1
00000c47 00000000         5163		.long	.LDW_4ada728
00000c4b 00               5164		.byte	0
00000c4c 0154             5165		.byte	1,84
                          5166	
                          5167	.LDW_5c8e830:
00000c4e 11               5168		.byte	17
00000c4f 7265616441646472 5169		.strz	"readAddress"
00000c57 65737300        
00000c5b ba0b             5170		.byte	186,11
00000c5d 67               5171		.byte	103
00000c5e 01               5172		.byte	1
00000c5f 00000000         5173		.long	.LDW_4ada780
00000c63 00               5174		.byte	0
00000c64 0155             5175		.byte	1,85
                          5176	
                          5177	.LDW_4a93140:
00000c66 1f               5178		.byte	31
00000c67 00000000         5179		.long	.LDW22
00000c6b 00000000         5180		.long	.LDW32
                          5181	
                          5182	.LDW_5c8e888:
00000c6f 06               5183		.byte	6
00000c70 726573756c7400   5184		.strz	"result"
00000c77 c10b             5185		.byte	193,11
00000c79 11               5186		.byte	17
00000c7a 01               5187		.byte	1
00000c7b 00000000         5188		.long	.LDW_5bf52a8
00000c7f 00               5189		.byte	0
00000c80 00               5190		.byte	0
00000c81 0153             5191		.byte	1,83
                          5192	
00000c83 00               5193		.byte	0
                          5194	

                                   Fri Apr 10 08:32:08 2020           Page 94
                                   Fri Apr 10 08:32:08 2020   gh_00002441.si
00000c84 00               5195		.byte	0
                          5196	
                          5197	.LDW_5bf5b08:
00000c85 16               5198		.byte	22
00000c86 466c617368447269 5199		.strz	"FlashDriver_GetVersionOfDriver"
00000c8e 7665725f47657456
00000c96 657273696f6e4f66
00000c9e 44726976657200  
00000ca5 930c             5200		.byte	147,12
00000ca7 08               5201		.byte	8
00000ca8 01               5202		.byte	1
00000ca9 00000000         5203		.long	.LDW_5c8e1a8
00000cad 00000000         5204		.long	FlashDriver_GetVersionOfDriver
00000cb1 00000000         5205		.long	__ghs_eofn_FlashDriver_GetVersionOfDriver
00000cb5 0151             5206		.byte	1,81
00000cb7 03               5207		.byte	3
00000cb8 00               5208		.byte	0
00000cb9 00               5209		.byte	0
00000cba 00               5210		.byte	0
00000cbb 00               5211		.byte	0
00000cbc 00               5212		.byte	0
00000cbd 00               5213		.byte	0
00000cbe 01               5214		.byte	1
00000cbf 01               5215		.byte	1
00000cc0 00               5216		.byte	0
00000cc1 01               5217		.byte	1
                          5218	
                          5219		.section	.debug_frame
                          5220	.LDW_5e304c8:
00000138 00000014         5221		.long	.LDW_unq_12-.LDW_unq_11
                          5222	.LDW_unq_11:
0000013c 00000000         5223		.long	.LDW_5df2118
00000140 00000000         5224		.long	FlashDriver_GetVersionOfDriver
00000144 0000003a         5225		.long	__ghs_eofn_FlashDriver_GetVersionOfDriver-FlashDriver_GetVersionOfDriver
00000148 01               5226		.byte	1
00000149 00000000         5227		.long	.LDW52
0000014d 00               5228		.byte	0
0000014e 00               5229		.byte	0
0000014f 00               5230		.byte	0
                          5231	.LDW_unq_12:
                          5232		.section	.debug_line
00000972 000502           5233		.byte	0,5,2
00000975 00000000         5234		.long	FlashDriver_GetVersionOfDriver
00000979 06               5235		.byte	6
0000097a 03               5236		.byte	3
0000097b 960c             5237		.byte	150,12
0000097d 02               5238		.byte	2
0000097e 00               5239		.byte	0
0000097f 01               5240		.byte	1
00000980 000502           5241		.byte	0,5,2
00000983 00000000         5242		.long	.LDWlin44
00000987 03               5243		.byte	3
00000988 04               5244		.byte	4
00000989 02               5245		.byte	2
0000098a 00               5246		.byte	0
0000098b 01               5247		.byte	1
0000098c 0c               5248		.byte	12
0000098d 25               5249		.byte	37
0000098e 0c               5250		.byte	12

                                   Fri Apr 10 08:32:08 2020           Page 95
                                   Fri Apr 10 08:32:08 2020   gh_00002441.si
0000098f 0c               5251		.byte	12
00000990 65               5252		.byte	101
00000991 02               5253		.byte	2
00000992 00               5254		.byte	0
00000993 0c               5255		.byte	12
00000994 02               5256		.byte	2
00000995 02               5257		.byte	2
00000996 000101           5258		.byte	0,1,1
                          5259		.section	.debug_info
                          5260	.LDW_4a931d0:
00000cc2 1f               5261		.byte	31
00000cc3 00000000         5262		.long	.LDW42
00000cc7 00000000         5263		.long	.LDW52
                          5264	
                          5265	.LDW_5c8e5c8:
00000ccb 06               5266		.byte	6
00000ccc 72657475726e5661 5267		.strz	"returnValue"
00000cd4 6c756500        
00000cd8 950c             5268		.byte	149,12
00000cda 0b               5269		.byte	11
00000cdb 01               5270		.byte	1
00000cdc 00000000         5271		.long	.LDW_5c8e1a8
00000ce0 00               5272		.byte	0
00000ce1 00               5273		.byte	0
00000ce2 0153             5274		.byte	1,83
                          5275	
00000ce4 00               5276		.byte	0
                          5277	
00000ce5 00               5278		.byte	0
                          5279	
00000ce6 00               5280		.byte	0
                          5281	
                          5282		.section	.debug_line
                          5283	.Ldw_line_end:
                          5284		.section	.debug_macinfo
00000000 01               5285		.byte	1
00000001 00               5286		.byte	0
00000002 5f5f4c494e455f5f 5287		.strz	"__LINE__"
0000000a 00              
0000000b 01               5288		.byte	1
0000000c 00               5289		.byte	0
0000000d 5f5f46494c455f5f 5290		.strz	"__FILE__"
00000015 00              
00000016 03               5291		.byte	3
00000017 00               5292		.byte	0
00000018 01               5293		.byte	1
00000019 03               5294		.byte	3
0000001a 4f               5295		.byte	79
0000001b 02               5296		.byte	2
0000001c 01               5297		.byte	1
0000001d 4a               5298		.byte	74
0000001e 5f5f46424c5f494e 5299		.strz	"__FBL_INC_H__ "
00000026 435f485f5f2000  
0000002d 03               5300		.byte	3
0000002e 59               5301		.byte	89
0000002f 03               5302		.byte	3
00000030 01               5303		.byte	1
00000031 8201             5304		.byte	130,1
00000033 5f46424c57524150 5305		.strz	"_FBLWRAPPERFLASH_HW_VERSION 0x0121u"
0000003b 504552464c415348
00000043 5f48575f56455253
0000004b 494f4e2030783031
00000053 32317500        
00000057 01               5306		.byte	1

                                   Fri Apr 10 08:32:08 2020           Page 96
                                   Fri Apr 10 08:32:08 2020   gh_00002441.si
00000058 8301             5307		.byte	131,1
0000005a 5f46424c57524150 5308		.strz	"_FBLWRAPPERFLASH_HW_RELEASE_VERSION 0x02u"
00000062 504552464c415348
0000006a 5f48575f52454c45
00000072 4153455f56455253
0000007a 494f4e2030783032
00000082 7500            
00000084 04               5309		.byte	4
00000085 03               5310		.byte	3
00000086 5a               5311		.byte	90
00000087 04               5312		.byte	4
00000088 01               5313		.byte	1
00000089 30               5314		.byte	48
0000008a 5647454e5f47454e 5315		.strz	"VGEN_GENY "
00000092 592000          
00000095 01               5316		.byte	1
00000096 4a               5317		.byte	74
00000097 435f435055545950 5318		.strz	"C_CPUTYPE_32BIT "
0000009f 455f333242495420
000000a7 00              
000000a8 01               5319		.byte	1
000000a9 54               5320		.byte	84
000000aa 435f435055545950 5321		.strz	"C_CPUTYPE_BIGENDIAN "
000000b2 455f424947454e44
000000ba 49414e2000      
000000bf 01               5322		.byte	1
000000c0 59               5323		.byte	89
000000c1 435f435055545950 5324		.strz	"C_CPUTYPE_BITORDER_MSB2LSB "
000000c9 455f4249544f5244
000000d1 45525f4d5342324c
000000d9 53422000        
000000dd 01               5325		.byte	1
000000de 63               5326		.byte	99
000000df 565f454e41424c45 5327		.strz	"V_ENABLE_USE_DUMMY_STATEMENT "
000000e7 5f5553455f44554d
000000ef 4d595f5354415445
000000f7 4d454e542000    
000000fd 01               5328		.byte	1
000000fe 8901             5329		.byte	137,1
00000100 5647454e5f454e41 5330		.strz	"VGEN_ENABLE_CANFBL "
00000108 424c455f43414e46
00000110 424c2000        
00000114 01               5331		.byte	1
00000115 be01             5332		.byte	190,1
00000117 565f434f4d505f47 5333		.strz	"V_COMP_GHS_MPC5700 "
0000011f 48535f4d50433537
00000127 30302000        
0000012b 01               5334		.byte	1
0000012c bf01             5335		.byte	191,1
0000012e 565f4350555f4d50 5336		.strz	"V_CPU_MPC5700 "
00000136 43353730302000  
0000013d 01               5337		.byte	1
0000013e ca01             5338		.byte	202,1
00000140 4d414749435f4e55 5339		.strz	"MAGIC_NUMBER 312540478"
00000148 4d42455220333132
00000150 35343034373800  
00000157 04               5340		.byte	4
00000158 03               5341		.byte	3
00000159 5c               5342		.byte	92
0000015a 05               5343		.byte	5
0000015b 03               5344		.byte	3
0000015c 31               5345		.byte	49
0000015d 06               5346		.byte	6
0000015e 03               5347		.byte	3
0000015f 34               5348		.byte	52
00000160 07               5349		.byte	7
00000161 01               5350		.byte	1
00000162 8704             5351		.byte	135,4
00000164 565f4445465f5355 5352		.strz	"V_DEF_SUPPORTED_PLATFORM "
0000016c 50504f525445445f
00000174 504c4154464f524d
0000017c 2000            
0000017e 01               5353		.byte	1
0000017f e104             5354		.byte	225,4
00000181 7675696e74782076 5355		.strz	"vuintx vuint32"
00000189 75696e74333200  
00000190 01               5356		.byte	1
00000191 da06             5357		.byte	218,6
00000193 4c4f43414c5f494e 5358		.strz	"LOCAL_INLINE static inline"
0000019b 4c494e4520737461
000001a3 74696320696e6c69
000001ab 6e6500          
000001ae 01               5359		.byte	1
000001af e406             5360		.byte	228,6
000001b1 565f4d454d524f4d 5361		.strz	"V_MEMROM0 "
000001b9 302000          
000001bc 01               5362		.byte	1

                                   Fri Apr 10 08:32:08 2020           Page 97
                                   Fri Apr 10 08:32:08 2020   gh_00002441.si
000001bd ec06             5363		.byte	236,6
000001bf 565f4d454d524f4d 5364		.strz	"V_MEMROM1 "
000001c7 312000          
000001ca 01               5365		.byte	1
000001cb f006             5366		.byte	240,6
000001cd 565f4d454d524f4d 5367		.strz	"V_MEMROM1_FAR "
000001d5 315f4641522000  
000001dc 01               5368		.byte	1
000001dd 8007             5369		.byte	128,7
000001df 565f4d454d524f4d 5370		.strz	"V_MEMROM2 const"
000001e7 3220636f6e737400
000001ef 01               5371		.byte	1
000001f0 8307             5372		.byte	131,7
000001f2 4d454d4f52595f52 5373		.strz	"MEMORY_ROM V_MEMROM2"
000001fa 4f4d20565f4d454d
00000202 524f4d3200      
00000207 01               5374		.byte	1
00000208 8a07             5375		.byte	138,7
0000020a 565f4d454d524f4d 5376		.strz	"V_MEMROM2_FAR const"
00000212 325f46415220636f
0000021a 6e737400        
0000021e 01               5377		.byte	1
0000021f 9307             5378		.byte	147,7
00000221 565f4d454d524f4d 5379		.strz	"V_MEMROM3 "
00000229 332000          
0000022c 01               5380		.byte	1
0000022d 9907             5381		.byte	153,7
0000022f 565f4d454d52414d 5382		.strz	"V_MEMRAM0 "
00000237 302000          
0000023a 01               5383		.byte	1
0000023b 9d07             5384		.byte	157,7
0000023d 565f4d454d52414d 5385		.strz	"V_MEMRAM1_NEAR "
00000245 315f4e4541522000
0000024d 01               5386		.byte	1
0000024e a107             5387		.byte	161,7
00000250 565f4d454d52414d 5388		.strz	"V_MEMRAM1 "
00000258 312000          
0000025b 01               5389		.byte	1
0000025c ab07             5390		.byte	171,7
0000025e 565f4d454d52414d 5391		.strz	"V_MEMRAM2_NEAR "
00000266 325f4e4541522000
0000026e 01               5392		.byte	1
0000026f ae07             5393		.byte	174,7
00000271 4d454d4f52595f4e 5394		.strz	"MEMORY_NEAR V_MEMRAM2_NEAR"
00000279 45415220565f4d45
00000281 4d52414d325f4e45
00000289 415200          
0000028c 01               5395		.byte	1
0000028d b507             5396		.byte	181,7
0000028f 565f4d454d52414d 5397		.strz	"V_MEMRAM2 "
00000297 322000          
0000029a 01               5398		.byte	1
0000029b bf07             5399		.byte	191,7
0000029d 565f4d454d52414d 5400		.strz	"V_MEMRAM2_FAR "
000002a5 325f4641522000  
000002ac 01               5401		.byte	1
000002ad c207             5402		.byte	194,7
000002af 4d454d4f52595f46 5403		.strz	"MEMORY_FAR V_MEMRAM2_FAR"
000002b7 415220565f4d454d
000002bf 52414d325f464152
000002c7 00              
000002c8 01               5404		.byte	1
000002c9 cc07             5405		.byte	204,7
000002cb 565f4d454d52414d 5406		.strz	"V_MEMRAM3 "
000002d3 332000          
000002d6 01               5407		.byte	1
000002d7 f907             5408		.byte	249,7
000002d9 565f4e554c4c2028 5409		.strz	"V_NULL ((void*)0)"
000002e1 28766f69642a2930
000002e9 2900            
000002eb 01               5410		.byte	1
000002ec fe07             5411		.byte	254,7
000002ee 4e554c4c20565f4e 5412		.strz	"NULL V_NULL"
000002f6 554c4c00        
000002fa 04               5413		.byte	4
000002fb 01               5414		.byte	1
000002fc 45               5415		.byte	69
000002fd 6b47454e79566572 5416		.strz	"kGENyVersionNumberOfBytes 10"
00000305 73696f6e4e756d62
0000030d 65724f6642797465
00000315 7320313000      
0000031a 04               5417		.byte	4
0000031b 04               5418		.byte	4

                                   Fri Apr 10 08:32:08 2020           Page 98
                                   Fri Apr 10 08:32:08 2020   gh_00002441.si
0000031c 03               5419		.byte	3
0000031d 60               5420		.byte	96
0000031e 08               5421		.byte	8
0000031f 03               5422		.byte	3
00000320 44               5423		.byte	68
00000321 09               5424		.byte	9
00000322 03               5425		.byte	3
00000323 55               5426		.byte	85
00000324 0a               5427		.byte	10
00000325 01               5428		.byte	1
00000326 45               5429		.byte	69
00000327 5f5f5345435f494e 5430		.strz	"__SEC_INC_H__ "
0000032f 435f485f5f2000  
00000336 03               5431		.byte	3
00000337 56               5432		.byte	86
00000338 0b               5433		.byte	11
00000339 01               5434		.byte	1
0000033a 2f               5435		.byte	47
0000033b 5345435f434c4153 5436		.strz	"SEC_CLASS_DDD 0"
00000343 535f444444203000
0000034b 01               5437		.byte	1
0000034c 30               5438		.byte	48
0000034d 5345435f434c4153 5439		.strz	"SEC_CLASS_C 1"
00000355 535f43203100    
0000035b 01               5440		.byte	1
0000035c 31               5441		.byte	49
0000035d 5345435f434c4153 5442		.strz	"SEC_CLASS_CCC 2"
00000365 535f434343203200
0000036d 01               5443		.byte	1
0000036e 32               5444		.byte	50
0000036f 5345435f434c4153 5445		.strz	"SEC_CLASS_VENDOR 3"
00000377 535f56454e444f52
0000037f 203300          
00000382 01               5446		.byte	1
00000383 39               5447		.byte	57
00000384 5345435f52495045 5448		.strz	"SEC_RIPEMD160 0"
0000038c 4d44313630203000
00000394 01               5449		.byte	1
00000395 3a               5450		.byte	58
00000396 5345435f53484131 5451		.strz	"SEC_SHA1 1"
0000039e 203100          
000003a1 01               5452		.byte	1
000003a2 3b               5453		.byte	59
000003a3 5345435f53484132 5454		.strz	"SEC_SHA256 2"
000003ab 3536203200      
000003b0 01               5455		.byte	1
000003b1 44               5456		.byte	68
000003b2 5345435f4b45595f 5457		.strz	"SEC_KEY_TIMEOUT 0"
000003ba 54494d454f555420
000003c2 3000            
000003c4 01               5458		.byte	1
000003c5 48               5459		.byte	72
000003c6 5345435f48415348 5460		.strz	"SEC_HASH_ALGORITHM SEC_SHA1"
000003ce 5f414c474f524954
000003d6 484d205345435f53
000003de 48413100        
000003e2 01               5461		.byte	1
000003e3 49               5462		.byte	73
000003e4 5345435f53454355 5463		.strz	"SEC_SECURITY_CLASS SEC_CLASS_DDD"
000003ec 524954595f434c41
000003f4 5353205345435f43
000003fc 4c4153535f444444
00000404 00              
00000405 01               5464		.byte	1
00000406 4f               5465		.byte	79
00000407 5345435f454e4142 5466		.strz	"SEC_ENABLE_VERIFICATION_KEY_INTERNAL "
0000040f 4c455f5645524946
00000417 49434154494f4e5f
0000041f 4b45595f494e5445
00000427 524e414c2000    
0000042d 01               5467		.byte	1
0000042e 50               5468		.byte	80
0000042f 5345435f53495a45 5469		.strz	"SEC_SIZE_CHECKSUM_VENDOR 0"
00000437 5f434845434b5355
0000043f 4d5f56454e444f52
00000447 203000          
0000044a 01               5470		.byte	1
0000044b 52               5471		.byte	82
0000044c 5345435f56455249 5472		.strz	"SEC_VERIFY_BYTES 64"
00000454 46595f4259544553
0000045c 20363400        
00000460 01               5473		.byte	1
00000461 53               5474		.byte	83

                                   Fri Apr 10 08:32:08 2020           Page 99
                                   Fri Apr 10 08:32:08 2020   gh_00002441.si
00000462 5345435f454e4142 5475		.strz	"SEC_ENABLE_VERIFICATION_ADDRESS_LENGTH "
0000046a 4c455f5645524946
00000472 49434154494f4e5f
0000047a 414444524553535f
00000482 4c454e4754482000
0000048a 01               5476		.byte	1
0000048b 54               5477		.byte	84
0000048c 5345435f454e4142 5478		.strz	"SEC_ENABLE_CRC_TOTAL "
00000494 4c455f4352435f54
0000049c 4f54414c2000    
000004a2 01               5479		.byte	1
000004a3 57               5480		.byte	87
000004a4 5345435f5645525f 5481		.strz	"SEC_VER_SIG_OFFSET 0"
000004ac 5349475f4f464653
000004b4 4554203000      
000004b9 01               5482		.byte	1
000004ba 58               5483		.byte	88
000004bb 5345435f5645525f 5484		.strz	"SEC_VER_CRC_OFFSET 0"
000004c3 4352435f4f464653
000004cb 4554203000      
000004d0 04               5485		.byte	4
000004d1 03               5486		.byte	3
000004d2 59               5487		.byte	89
000004d3 0c               5488		.byte	12
000004d4 03               5489		.byte	3
000004d5 4d               5490		.byte	77
000004d6 0a               5491		.byte	10
000004d7 04               5492		.byte	4
000004d8 01               5493		.byte	1
000004d9 59               5494		.byte	89
000004da 5345435f57415443 5495		.strz	"SEC_WATCHDOG_CYCLE_COUNT (0x20u)"
000004e2 48444f475f435943
000004ea 4c455f434f554e54
000004f2 2028307832307529
000004fa 00              
000004fb 01               5496		.byte	1
000004fc 60               5497		.byte	96
000004fd 5345435f454e4142 5498		.strz	"SEC_ENABLE_WORKSPACE_INTERNAL "
00000505 4c455f574f524b53
0000050d 504143455f494e54
00000515 45524e414c2000  
0000051c 01               5499		.byte	1
0000051d 66               5500		.byte	102
0000051e 5345435f43484543 5501		.strz	"SEC_CHECKSUM_TYPE_CRC 0u"
00000526 4b53554d5f545950
0000052e 455f435243203075
00000536 00              
00000537 01               5502		.byte	1
00000538 6b               5503		.byte	107
00000539 5345435f43484543 5504		.strz	"SEC_CHECKSUM_TYPE_HASH (SEC_CHECKSUM_TYPE_CRC + 1u)"
00000541 4b53554d5f545950
00000549 455f484153482028
00000551 5345435f43484543
00000559 4b53554d5f545950
00000561 455f435243202b20
00000569 31752900        
0000056d 01               5505		.byte	1
0000056e 71               5506		.byte	113
0000056f 5345435f4d41435f 5507		.strz	"SEC_MAC_TYPE_HMAC 0u"
00000577 545950455f484d41
0000057f 4320307500      
00000584 01               5508		.byte	1
00000585 8601             5509		.byte	134,1
00000587 5345435f43524333 5510		.strz	"SEC_CRC32 0u"
0000058f 3220307500      
00000594 01               5511		.byte	1
00000595 8e01             5512		.byte	142,1
00000597 5345435f43524331 5513		.strz	"SEC_CRC16 (SEC_CRC32 + 1u)"
0000059f 3620285345435f43
000005a7 52433332202b2031
000005af 752900          
000005b2 01               5514		.byte	1
000005b3 ca01             5515		.byte	202,1
000005b5 5345435f5349474e 5516		.strz	"SEC_SIGNATURE_SCHEME_RSA_V15 0u"
000005bd 41545552455f5343
000005c5 48454d455f525341
000005cd 5f56313520307500
000005d5 01               5517		.byte	1
000005d6 e301             5518		.byte	227,1
000005d8 5345435f43414c4c 5519		.strz	"SEC_CALL_TYPE "
000005e0 5f545950452000  
000005e7 04               5520		.byte	4
000005e8 03               5521		.byte	3
000005e9 5c               5522		.byte	92
000005ea 0d               5523		.byte	13
000005eb 03               5524		.byte	3
000005ec 2f               5525		.byte	47
000005ed 0e               5526		.byte	14
000005ee 04               5527		.byte	4
000005ef 04               5528		.byte	4
000005f0 04               5529		.byte	4
000005f1 03               5530		.byte	3

                                   Fri Apr 10 08:32:08 2020           Page 100
                                   Fri Apr 10 08:32:08 2020   gh_00002441.si
000005f2 58               5531		.byte	88
000005f3 0f               5532		.byte	15
000005f4 01               5533		.byte	1
000005f5 6d               5534		.byte	109
000005f6 5345435f4352435f 5535		.strz	"SEC_CRC_TYPE SEC_CRC32"
000005fe 5459504520534543
00000606 5f435243333200  
0000060d 01               5536		.byte	1
0000060e 78               5537		.byte	120
0000060f 5345435f454e4142 5538		.strz	"SEC_ENABLE_CRC_TYPE_CRC32 "
00000617 4c455f4352435f54
0000061f 5950455f43524333
00000627 322000          
0000062a 04               5539		.byte	4
0000062b 03               5540		.byte	3
0000062c 59               5541		.byte	89
0000062d 10               5542		.byte	16
0000062e 03               5543		.byte	3
0000062f 55               5544		.byte	85
00000630 11               5545		.byte	17
00000631 01               5546		.byte	1
00000632 3e               5547		.byte	62
00000633 5345435f53454544 5548		.strz	"SEC_SEED_LENGTH 8u"
0000063b 5f4c454e47544820
00000643 387500          
00000646 01               5549		.byte	1
00000647 40               5550		.byte	64
00000648 5345435f4b45595f 5551		.strz	"SEC_KEY_LENGTH 4u"
00000650 4c454e4754482034
00000658 7500            
0000065a 04               5552		.byte	4
0000065b 01               5553		.byte	1
0000065c 7e               5554		.byte	126
0000065d 5345435f50524e47 5555		.strz	"SEC_PRNG_LCG 0u"
00000665 5f4c434720307500
0000066d 01               5556		.byte	1
0000066e 8301             5557		.byte	131,1
00000670 5345435f50524e47 5558		.strz	"SEC_PRNG_FIPS186 (SEC_PRNG_LCG + 1u)"
00000678 5f46495053313836
00000680 20285345435f5052
00000688 4e475f4c4347202b
00000690 2031752900      
00000695 01               5559		.byte	1
00000696 8901             5560		.byte	137,1
00000698 5345435f50524e47 5561		.strz	"SEC_PRNG SEC_PRNG_LCG"
000006a0 205345435f50524e
000006a8 475f4c434700    
000006ae 04               5562		.byte	4
000006af 03               5563		.byte	3
000006b0 5a               5564		.byte	90
000006b1 12               5565		.byte	18
000006b2 01               5566		.byte	1
000006b3 ba01             5567		.byte	186,1
000006b5 5345435f53454355 5568		.strz	"SEC_SECURITY_CLASS_VERIFY SEC_SECURITY_CLASS"
000006bd 524954595f434c41
000006c5 53535f5645524946
000006cd 59205345435f5345
000006d5 4355524954595f43
000006dd 4c41535300      
000006e2 01               5569		.byte	1
000006e3 c001             5570		.byte	192,1
000006e5 5345435f53454355 5571		.strz	"SEC_SECURITY_CLASS_VERIFICATION SEC_SECURITY_CLASS"
000006ed 524954595f434c41
000006f5 53535f5645524946
000006fd 49434154494f4e20
00000705 5345435f53454355
0000070d 524954595f434c41
00000715 535300          
00000718 01               5572		.byte	1
00000719 c701             5573		.byte	199,1
0000071b 5345435f43484543 5574		.strz	"SEC_CHECKSUM_TYPE SEC_CHECKSUM_TYPE_CRC"
00000723 4b53554d5f545950
0000072b 45205345435f4348
00000733 45434b53554d5f54
0000073b 5950455f43524300
00000743 01               5575		.byte	1
00000744 cd01             5576		.byte	205,1
00000746 5345435f4d41435f 5577		.strz	"SEC_MAC_TYPE SEC_MAC_TYPE_HMAC"
0000074e 5459504520534543
00000756 5f4d41435f545950
0000075e 455f484d414300  
00000765 01               5578		.byte	1
00000766 d301             5579		.byte	211,1
00000768 5345435f5349474e 5580		.strz	"SEC_SIGNATURE_SCHEME SEC_SIGNATURE_SCHEME_RSA_V15"
00000770 41545552455f5343
00000778 48454d4520534543
00000780 5f5349474e415455
00000788 52455f534348454d
00000790 455f5253415f5631
00000798 3500            
0000079a 01               5581		.byte	1
0000079b fd01             5582		.byte	253,1
0000079d 5345435f454e4142 5583		.strz	"SEC_ENABLE_SECURITY_CLASS_DDD "
000007a5 4c455f5345435552
000007ad 4954595f434c4153
000007b5 535f4444442000  
000007bc 01               5584		.byte	1
000007bd 8f02             5585		.byte	143,2
000007bf 5345435f454e4142 5586		.strz	"SEC_ENABLE_CHECKSUM_TYPE_CRC "
000007c7 4c455f434845434b
000007cf 53554d5f54595045
000007d7 5f4352432000    

                                   Fri Apr 10 08:32:08 2020           Page 101
                                   Fri Apr 10 08:32:08 2020   gh_00002441.si
000007dd 01               5587		.byte	1
000007de db02             5588		.byte	219,2
000007e0 5345435f454e4142 5589		.strz	"SEC_ENABLE_VERIFY_CHECKSUM_CRC "
000007e8 4c455f5645524946
000007f0 595f434845434b53
000007f8 554d5f4352432000
00000800 04               5590		.byte	4
00000801 04               5591		.byte	4
00000802 04               5592		.byte	4
00000803 03               5593		.byte	3
00000804 62               5594		.byte	98
00000805 13               5595		.byte	19
00000806 03               5596		.byte	3
00000807 48               5597		.byte	72
00000808 14               5598		.byte	20
00000809 01               5599		.byte	1
0000080a 33               5600		.byte	51
0000080b 46424c5f5553455f 5601		.strz	"FBL_USE_OWN_MEMCPY "
00000813 4f574e5f4d454d43
0000081b 50592000        
0000081f 01               5602		.byte	1
00000820 34               5603		.byte	52
00000821 46424c5f57415443 5604		.strz	"FBL_WATCHDOG_ON "
00000829 48444f475f4f4e20
00000831 00              
00000832 01               5605		.byte	1
00000833 35               5606		.byte	53
00000834 46424c5f57415443 5607		.strz	"FBL_WATCHDOG_TIME (1 / FBL_REPEAT_CALL_CYCLE)"
0000083c 48444f475f54494d
00000844 45202831202f2046
0000084c 424c5f5245504541
00000854 545f43414c4c5f43
0000085c 59434c452900    
00000862 01               5608		.byte	1
00000863 36               5609		.byte	54
00000864 46424c5f48454144 5610		.strz	"FBL_HEADER_ADDRESS 0xFC0400u"
0000086c 45525f4144445245
00000874 5353203078464330
0000087c 3430307500      
00000881 01               5611		.byte	1
00000882 37               5612		.byte	55
00000883 46424c5f454e4142 5613		.strz	"FBL_ENABLE_APPL_TASK "
0000088b 4c455f4150504c5f
00000893 5441534b2000    
00000899 01               5614		.byte	1
0000089a 39               5615		.byte	57
0000089b 46424c5f44494147 5616		.strz	"FBL_DIAG_BUFFER_LENGTH 4095"
000008a3 5f4255464645525f
000008ab 4c454e4754482034
000008b3 30393500        
000008b7 01               5617		.byte	1
000008b8 3b               5618		.byte	59
000008b9 46424c5f44494147 5619		.strz	"FBL_DIAG_TIME_P3MAX (2000 / FBL_REPEAT_CALL_CYCLE)"
000008c1 5f54494d455f5033
000008c9 4d41582028323030
000008d1 30202f2046424c5f
000008d9 5245504541545f43
000008e1 414c4c5f4359434c
000008e9 452900          
000008ec 01               5620		.byte	1
000008ed 3c               5621		.byte	60
000008ee 46424c5f454e4142 5622		.strz	"FBL_ENABLE_SLEEPMODE "
000008f6 4c455f534c454550
000008fe 4d4f44452000    
00000904 01               5623		.byte	1
00000905 3e               5624		.byte	62
00000906 46424c5f454e4142 5625		.strz	"FBL_ENABLE_GAP_FILL "
0000090e 4c455f4741505f46
00000916 494c4c2000      
0000091b 01               5626		.byte	1
0000091c 40               5627		.byte	64
0000091d 46424c5f454e4142 5628		.strz	"FBL_ENABLE_MULTIPLE_MEM_DEVICES "
00000925 4c455f4d554c5449
0000092d 504c455f4d454d5f
00000935 4445564943455320
0000093d 00              
0000093e 01               5629		.byte	1
0000093f 41               5630		.byte	65
00000940 46424c5f4d454d44 5631		.strz	"FBL_MEMDRV_SEGMENT_SIZE 8"
00000948 52565f5345474d45
00000950 4e545f53495a4520
00000958 3800            
0000095a 01               5632		.byte	1
0000095b 42               5633		.byte	66
0000095c 46424c5f454e4142 5634		.strz	"FBL_ENABLE_PRESENCE_PATTERN "
00000964 4c455f5052455345
0000096c 4e43455f50415454
00000974 45524e2000      
00000979 01               5635		.byte	1
0000097a 43               5636		.byte	67
0000097b 46424c5f454e4142 5637		.strz	"FBL_ENABLE_FBL_START "
00000983 4c455f46424c5f53
0000098b 544152542000    
00000991 01               5638		.byte	1
00000992 45               5639		.byte	69
00000993 46424c5f44495341 5640		.strz	"FBL_DISABLE_USERSUBFUNCTION "
0000099b 424c455f55534552
000009a3 53554246554e4354
000009ab 494f4e2000      
000009b0 01               5641		.byte	1
000009b1 47               5642		.byte	71

                                   Fri Apr 10 08:32:08 2020           Page 102
                                   Fri Apr 10 08:32:08 2020   gh_00002441.si
000009b2 46424c5f4d544142 5643		.strz	"FBL_MTAB_NO_OF_BLOCKS 2"
000009ba 5f4e4f5f4f465f42
000009c2 4c4f434b53203200
000009ca 01               5644		.byte	1
000009cb 49               5645		.byte	73
000009cc 46424c5f44495341 5646		.strz	"FBL_DISABLE_DATA_PROCESSING "
000009d4 424c455f44415441
000009dc 5f50524f43455353
000009e4 494e472000      
000009e9 01               5647		.byte	1
000009ea 51               5648		.byte	81
000009eb 46424c5f454e4142 5649		.strz	"FBL_ENABLE_SYSTEM_CHECK "
000009f3 4c455f5359535445
000009fb 4d5f434845434b20
00000a03 00              
00000a04 01               5650		.byte	1
00000a05 52               5651		.byte	82
00000a06 46424c5f454e4142 5652		.strz	"FBL_ENABLE_DEBUG_STATUS "
00000a0e 4c455f4445425547
00000a16 5f53544154555320
00000a1e 00              
00000a1f 01               5653		.byte	1
00000a20 53               5654		.byte	83
00000a21 46424c5f454e4142 5655		.strz	"FBL_ENABLE_ASSERTION "
00000a29 4c455f4153534552
00000a31 54494f4e2000    
00000a37 01               5656		.byte	1
00000a38 56               5657		.byte	86
00000a39 46424c5f4d454d5f 5658		.strz	"FBL_MEM_ENABLE_VERIFY_OUTPUT "
00000a41 454e41424c455f56
00000a49 45524946595f4f55
00000a51 545055542000    
00000a57 01               5659		.byte	1
00000a58 5f               5660		.byte	95
00000a59 464c4153485f5349 5661		.strz	"FLASH_SIZE 1536"
00000a61 5a45203135333600
00000a69 01               5662		.byte	1
00000a6a 61               5663		.byte	97
00000a6b 46424c5f454e4142 5664		.strz	"FBL_ENABLE_DMA_FLASH_READ "
00000a73 4c455f444d415f46
00000a7b 4c4153485f524541
00000a83 442000          
00000a86 01               5665		.byte	1
00000a87 62               5666		.byte	98
00000a88 46424c5f464c4153 5667		.strz	"FBL_FLASH_REG_0 0xFFFE0000u"
00000a90 485f5245475f3020
00000a98 3078464646453030
00000aa0 30307500        
00000aa4 01               5668		.byte	1
00000aa5 63               5669		.byte	99
00000aa6 464c4153485f5345 5670		.strz	"FLASH_SETUP 6"
00000aae 545550203600    
00000ab4 01               5671		.byte	1
00000ab5 72               5672		.byte	114
00000ab6 53574d5f44415441 5673		.strz	"SWM_DATA_MAX_NOAR 8"
00000abe 5f4d41585f4e4f41
00000ac6 52203800        
00000aca 01               5674		.byte	1
00000acb 74               5675		.byte	116
00000acc 46424c5f454e4142 5676		.strz	"FBL_ENABLE_SEC_ACCESS_DELAY "
00000ad4 4c455f5345435f41
00000adc 43434553535f4445
00000ae4 4c41592000      
00000ae9 01               5677		.byte	1
00000aea 8001             5678		.byte	128,1
00000aec 46424c5f454e4142 5679		.strz	"FBL_ENABLE_WRITE_RCHW "
00000af4 4c455f5752495445
00000afc 5f524348572000  
00000b03 01               5680		.byte	1
00000b04 8201             5681		.byte	130,1
00000b06 46424c5f454e4142 5682		.strz	"FBL_ENABLE_CAN_CONFIRMATION "
00000b0e 4c455f43414e5f43
00000b16 4f4e4649524d4154
00000b1e 494f4e2000      
00000b23 01               5683		.byte	1
00000b24 8301             5684		.byte	131,1
00000b26 46424c5f454e4142 5685		.strz	"FBL_ENABLE_SECMOD_VECTOR "
00000b2e 4c455f5345434d4f
00000b36 445f564543544f52
00000b3e 2000            
00000b40 01               5686		.byte	1
00000b41 8501             5687		.byte	133,1
00000b43 46424c5f454e4142 5688		.strz	"FBL_ENABLE_WRAPPER_NV "
00000b4b 4c455f5752415050
00000b53 45525f4e562000  
00000b5a 01               5689		.byte	1
00000b5b 8d01             5690		.byte	141,1
00000b5d 46424c5f454e4142 5691		.strz	"FBL_ENABLE_APPL_STATE_TASK "
00000b65 4c455f4150504c5f
00000b6d 53544154455f5441
00000b75 534b2000        
00000b79 01               5692		.byte	1
00000b7a 9001             5693		.byte	144,1
00000b7c 46424c5f454e4142 5694		.strz	"FBL_ENABLE_APPL_TIMER_TASK "
00000b84 4c455f4150504c5f
00000b8c 54494d45525f5441
00000b94 534b2000        
00000b98 01               5695		.byte	1
00000b99 9901             5696		.byte	153,1
00000b9b 46424c5f5346525f 5697		.strz	"FBL_SFR_SIU_TYPE 2u"
00000ba3 5349555f54595045
00000bab 20327500        
00000baf 01               5698		.byte	1

                                   Fri Apr 10 08:32:08 2020           Page 103
                                   Fri Apr 10 08:32:08 2020   gh_00002441.si
00000bb0 9f01             5699		.byte	159,1
00000bb2 46424c5f4d455f42 5700		.strz	"FBL_ME_BASE 0xFFFB8000ul"
00000bba 4153452030784646
00000bc2 464238303030756c
00000bca 00              
00000bcb 01               5701		.byte	1
00000bcc a001             5702		.byte	160,1
00000bce 46424c5f434d555f 5703		.strz	"FBL_CMU_BASE 0xC3FE0100ul"
00000bd6 4241534520307843
00000bde 3346453031303075
00000be6 6c00            
00000be8 01               5704		.byte	1
00000be9 a101             5705		.byte	161,1
00000beb 46424c5f434d555f 5706		.strz	"FBL_CMU_PLL_BASE 0xFFFB0200ul"
00000bf3 504c4c5f42415345
00000bfb 2030784646464230
00000c03 323030756c00    
00000c09 01               5707		.byte	1
00000c0a a201             5708		.byte	162,1
00000c0c 46424c5f43474d5f 5709		.strz	"FBL_CGM_BASE 0xFFFB0000ul"
00000c14 4241534520307846
00000c1c 4646423030303075
00000c24 6c00            
00000c26 01               5710		.byte	1
00000c27 a301             5711		.byte	163,1
00000c29 46424c5f52474d5f 5712		.strz	"FBL_RGM_BASE 0xFFFA8000ul"
00000c31 4241534520307846
00000c39 4646413830303075
00000c41 6c00            
00000c43 01               5713		.byte	1
00000c44 a601             5714		.byte	166,1
00000c46 46424c5f45444d41 5715		.strz	"FBL_EDMA_BASE 0xFC0A0000ul"
00000c4e 5f42415345203078
00000c56 4643304130303030
00000c5e 756c00          
00000c61 01               5716		.byte	1
00000c62 a901             5717		.byte	169,1
00000c64 46424c5f5346525f 5718		.strz	"FBL_SFR_BASE_ADRESSES_PRECONFIGURED "
00000c6c 424153455f414452
00000c74 45535345535f5052
00000c7c 45434f4e46494755
00000c84 5245442000      
00000c89 04               5719		.byte	4
00000c8a 03               5720		.byte	3
00000c8b 5a               5721		.byte	90
00000c8c 15               5722		.byte	21
00000c8d 03               5723		.byte	3
00000c8e 54               5724		.byte	84
00000c8f 16               5725		.byte	22
00000c90 04               5726		.byte	4
00000c91 01               5727		.byte	1
00000c92 5a               5728		.byte	90
00000c93 46424c5f4445434c 5729		.strz	"FBL_DECL_ASSERT_EXTENDED_INFO(n) n"
00000c9b 5f4153534552545f
00000ca3 455854454e444544
00000cab 5f494e464f286e29
00000cb3 206e00          
00000cb6 04               5730		.byte	4
00000cb7 01               5731		.byte	1
00000cb8 6c               5732		.byte	108
00000cb9 46424c5f4445465f 5733		.strz	"FBL_DEF_ENABLE_NON_KB_MAIN "
00000cc1 454e41424c455f4e
00000cc9 4f4e5f4b425f4d41
00000cd1 494e2000        
00000cd5 01               5734		.byte	1
00000cd6 9501             5735		.byte	149,1
00000cd8 46424c5f52455045 5736		.strz	"FBL_REPEAT_CALL_CYCLE 1"
00000ce0 41545f43414c4c5f
00000ce8 4359434c45203100
00000cf0 01               5737		.byte	1
00000cf1 9a01             5738		.byte	154,1
00000cf3 46424c5f43414c4c 5739		.strz	"FBL_CALL_TYPE "
00000cfb 5f545950452000  
00000d02 01               5740		.byte	1
00000d03 9e01             5741		.byte	158,1
00000d05 565f43414c4c4241 5742		.strz	"V_CALLBACK_NEAR "
00000d0d 434b5f4e45415220
00000d15 00              
00000d16 01               5743		.byte	1
00000d17 a101             5744		.byte	161,1
00000d19 565f4150495f4e45 5745		.strz	"V_API_NEAR "
00000d21 41522000        
00000d25 01               5746		.byte	1
00000d26 d901             5747		.byte	217,1
00000d28 46626c496e766572 5748		.strz	"FblInvert32Bit(x) ((vuint32)((x) ^ ((vuint32)0xFFFFFFFFul)))"
00000d30 7433324269742878
00000d38 292028287675696e
00000d40 7433322928287829
00000d48 205e202828767569
00000d50 6e74333229307846
00000d58 4646464646464675
00000d60 6c29292900      
00000d65 01               5749		.byte	1
00000d66 8502             5750		.byte	133,2
00000d68 46424c5f53544154 5751		.strz	"FBL_STATE_BITS 32"
00000d70 455f424954532033
00000d78 3200            
00000d7a 01               5752		.byte	1
00000d7b 9302             5753		.byte	147,2
00000d7d 46424c5f53544154 5754		.strz	"FBL_STATE_INDEX(bit) ((bit) / FBL_STATE_BITS)"
00000d85 455f494e44455828
00000d8d 6269742920282862
00000d95 697429202f204642
00000d9d 4c5f53544154455f
00000da5 424954532900    

                                   Fri Apr 10 08:32:08 2020           Page 104
                                   Fri Apr 10 08:32:08 2020   gh_00002441.si
00000dab 01               5755		.byte	1
00000dac b002             5756		.byte	176,2
00000dae 4d454d53495a455f 5757		.strz	"MEMSIZE_OK "
00000db6 4f4b2000        
00000dba 04               5758		.byte	4
00000dbb 03               5759		.byte	3
00000dbc 68               5760		.byte	104
00000dbd 17               5761		.byte	23
00000dbe 01               5762		.byte	1
00000dbf 3b               5763		.byte	59
00000dc0 6b4e724f6656616c 5764		.strz	"kNrOfValidationBytes 1"
00000dc8 69646174696f6e42
00000dd0 79746573203100  
00000dd7 01               5765		.byte	1
00000dd8 5c               5766		.byte	92
00000dd9 46424c5f4c42545f 5767		.strz	"FBL_LBT_START_SEC_CONST "
00000de1 53544152545f5345
00000de9 435f434f4e535420
00000df1 00              
00000df2 03               5768		.byte	3
00000df3 5d               5769		.byte	93
00000df4 18               5770		.byte	24
00000df5 01               5771		.byte	1
00000df6 2b               5772		.byte	43
00000df7 46424c5f4d454d4d 5773		.strz	"FBL_MEMMAP_ERROR "
00000dff 41505f4552524f52
00000e07 2000            
00000e09 04               5774		.byte	4
00000e0a 01               5775		.byte	1
00000e0b 5f               5776		.byte	95
00000e0c 46424c5f4c42545f 5777		.strz	"FBL_LBT_STOP_SEC_CONST "
00000e14 53544f505f534543
00000e1c 5f434f4e53542000
00000e24 03               5778		.byte	3
00000e25 60               5779		.byte	96
00000e26 18               5780		.byte	24
00000e27 01               5781		.byte	1
00000e28 2b               5782		.byte	43
00000e29 46424c5f4d454d4d 5783		.strz	"FBL_MEMMAP_ERROR "
00000e31 41505f4552524f52
00000e39 2000            
00000e3b 04               5784		.byte	4
00000e3c 04               5785		.byte	4
00000e3d 03               5786		.byte	3
00000e3e 6e               5787		.byte	110
00000e3f 19               5788		.byte	25
00000e40 01               5789		.byte	1
00000e41 2f               5790		.byte	47
00000e42 46424c445256464c 5791		.strz	"FBLDRVFLASH_MPC5700C55FMCHIS_VERSION 0x0106u"
00000e4a 4153485f4d504335
00000e52 373030433535464d
00000e5a 434849535f564552
00000e62 53494f4e20307830
00000e6a 3130367500      
00000e6f 01               5792		.byte	1
00000e70 30               5793		.byte	48
00000e71 46424c445256464c 5794		.strz	"FBLDRVFLASH_MPC5700C55FMCHIS_RELEASE_VERSION 0x00u"
00000e79 4153485f4d504335
00000e81 373030433535464d
00000e89 434849535f52454c
00000e91 454153455f564552
00000e99 53494f4e20307830
00000ea1 307500          
00000ea4 01               5795		.byte	1
00000ea5 37               5796		.byte	55
00000ea6 464c4153485f4452 5797		.strz	"FLASH_DRIVER_VERSION_MCUTYPE 0x57u"
00000eae 495645525f564552
00000eb6 53494f4e5f4d4355
00000ebe 5459504520307835
00000ec6 377500          
00000ec9 01               5798		.byte	1
00000eca 38               5799		.byte	56
00000ecb 464c4153485f4452 5800		.strz	"FLASH_DRIVER_VERSION_MASKTYPE 0x00u"
00000ed3 495645525f564552
00000edb 53494f4e5f4d4153
00000ee3 4b54595045203078
00000eeb 30307500        
00000eef 01               5801		.byte	1
00000ef0 39               5802		.byte	57
00000ef1 464c4153485f4452 5803		.strz	"FLASH_DRIVER_VERSION_INTERFACE 0x01u"
00000ef9 495645525f564552
00000f01 53494f4e5f494e54
00000f09 4552464143452030
00000f11 7830317500      
00000f16 01               5804		.byte	1
00000f17 3c               5805		.byte	60
00000f18 464c4153485f4452 5806		.strz	"FLASH_DRIVER_VERSION_MAJOR ((FBLDRVFLASH_MPC5700C55FMCHIS_VERSION >> 8) & 0xffu)"
00000f20 495645525f564552
00000f28 53494f4e5f4d414a
00000f30 4f5220282846424c
00000f38 445256464c415348
00000f40 5f4d504335373030
00000f48 433535464d434849
00000f50 535f56455253494f
00000f58 4e203e3e20382920
00000f60 2620307866667529
00000f68 00              
00000f69 01               5807		.byte	1
00000f6a 3d               5808		.byte	61
00000f6b 464c4153485f4452 5809		.strz	"FLASH_DRIVER_VERSION_MINOR (FBLDRVFLASH_MPC5700C55FMCHIS_VERSION & 0xffu)"
00000f73 495645525f564552
00000f7b 53494f4e5f4d494e
00000f83 4f52202846424c44
00000f8b 5256464c4153485f
00000f93 4d50433537303043
00000f9b 3535464d43484953
00000fa3 5f56455253494f4e
00000fab 2026203078666675
00000fb3 2900            
00000fb5 01               5810		.byte	1

                                   Fri Apr 10 08:32:08 2020           Page 105
                                   Fri Apr 10 08:32:08 2020   gh_00002441.si
00000fb6 3e               5811		.byte	62
00000fb7 464c4153485f4452 5812		.strz	"FLASH_DRIVER_VERSION_PATCH FBLDRVFLASH_MPC5700C55FMCHIS_RELEASE_VERSION"
00000fbf 495645525f564552
00000fc7 53494f4e5f504154
00000fcf 43482046424c4452
00000fd7 56464c4153485f4d
00000fdf 5043353730304335
00000fe7 35464d434849535f
00000fef 52454c454153455f
00000ff7 56455253494f4e00
00000fff 01               5813		.byte	1
00001000 41               5814		.byte	65
00001001 464c4153485f4452 5815		.strz	"FLASH_DRIVER_HEADER_OFFSET 0x04"
00001009 495645525f484541
00001011 4445525f4f464653
00001019 4554203078303400
00001021 01               5816		.byte	1
00001022 43               5817		.byte	67
00001023 464c4153485f4452 5818		.strz	"FLASH_DRIVER_INIT_OFFSET (FLASH_DRIVER_HEADER_OFFSET + 0x00u)"
0000102b 495645525f494e49
00001033 545f4f4646534554
0000103b 2028464c4153485f
00001043 4452495645525f48
0000104b 45414445525f4f46
00001053 46534554202b2030
0000105b 783030752900    
00001061 01               5819		.byte	1
00001062 44               5820		.byte	68
00001063 464c4153485f4452 5821		.strz	"FLASH_DRIVER_DEINIT_OFFSET (FLASH_DRIVER_HEADER_OFFSET + 0x04u)"
0000106b 495645525f444549
00001073 4e49545f4f464653
0000107b 45542028464c4153
00001083 485f445249564552
0000108b 5f4845414445525f
00001093 4f4646534554202b
0000109b 2030783034752900
000010a3 01               5822		.byte	1
000010a4 45               5823		.byte	69
000010a5 464c4153485f4452 5824		.strz	"FLASH_DRIVER_ERASE_OFFSET (FLASH_DRIVER_HEADER_OFFSET + 0x08u)"
000010ad 495645525f455241
000010b5 53455f4f46465345
000010bd 542028464c415348
000010c5 5f4452495645525f
000010cd 4845414445525f4f
000010d5 4646534554202b20
000010dd 30783038752900  
000010e4 01               5825		.byte	1
000010e5 46               5826		.byte	70
000010e6 464c4153485f4452 5827		.strz	"FLASH_DRIVER_WRITE_OFFSET (FLASH_DRIVER_HEADER_OFFSET + 0x0Cu)"
000010ee 495645525f575249
000010f6 54455f4f46465345
000010fe 542028464c415348
00001106 5f4452495645525f
0000110e 4845414445525f4f
00001116 4646534554202b20
0000111e 30783043752900  
00001125 01               5828		.byte	1
00001126 4a               5829		.byte	74
00001127 464c4153485f4452 5830		.strz	"FLASH_DRIVER_MCUTYPE(flashCode) (*(unsigned char*)(flashCode + 0x03u))"
0000112f 495645525f4d4355
00001137 5459504528666c61
0000113f 7368436f64652920
00001147 282a28756e736967
0000114f 6e65642063686172
00001157 2a2928666c617368
0000115f 436f6465202b2030
00001167 78303375292900  
0000116e 01               5831		.byte	1
0000116f 4b               5832		.byte	75
00001170 464c4153485f4452 5833		.strz	"FLASH_DRIVER_MASKTYPE(flashCode) (*(unsigned char*)(flashCode + 0x02u))"
00001178 495645525f4d4153
00001180 4b5459504528666c
00001188 617368436f646529
00001190 20282a28756e7369
00001198 676e656420636861
000011a0 722a2928666c6173
000011a8 68436f6465202b20
000011b0 3078303275292900
000011b8 01               5834		.byte	1
000011b9 4c               5835		.byte	76
000011ba 464c4153485f4452 5836		.strz	"FLASH_DRIVER_INTERFACE(flashCode) (*(unsigned char*)(flashCode + 0x00u))"
000011c2 495645525f494e54
000011ca 4552464143452866
000011d2 6c617368436f6465
000011da 2920282a28756e73
000011e2 69676e6564206368
000011ea 61722a2928666c61
000011f2 7368436f6465202b
000011fa 2030783030752929
00001202 00              
00001203 01               5837		.byte	1
00001204 54               5838		.byte	84
00001205 464c4153485f5345 5839		.strz	"FLASH_SEGMENT_SIZE 8u"
0000120d 474d454e545f5349
00001215 5a4520387500    
0000121b 01               5840		.byte	1
0000121c 5a               5841		.byte	90
0000121d 6b466c6173684663 5842		.strz	"kFlashFctInit 0x00u"
00001225 74496e6974203078
0000122d 30307500        
00001231 01               5843		.byte	1
00001232 5c               5844		.byte	92
00001233 6b466c6173684663 5845		.strz	"kFlashFctErase 0x40u"
0000123b 7445726173652030
00001243 7834307500      
00001248 01               5846		.byte	1
00001249 5d               5847		.byte	93
0000124a 6b466c6173684663 5848		.strz	"kFlashFctWrite 0x60u"
00001252 7457726974652030
0000125a 7836307500      
0000125f 01               5849		.byte	1
00001260 60               5850		.byte	96
00001261 6b466c6173684f6b 5851		.strz	"kFlashOk 0x00u"
00001269 20307830307500  
00001270 01               5852		.byte	1
00001271 61               5853		.byte	97
00001272 6b466c6173684661 5854		.strz	"kFlashFailed 0x01u"
0000127a 696c656420307830
00001282 317500          
00001285 01               5855		.byte	1
00001286 64               5856		.byte	100
00001287 6b466c617368496e 5857		.strz	"kFlashInvalidAddress 0x04u"
0000128f 76616c6964416464
00001297 7265737320307830
0000129f 347500          
000012a2 01               5858		.byte	1
000012a3 65               5859		.byte	101
000012a4 6b466c617368496e 5860		.strz	"kFlashInvalidSize 0x05u"
000012ac 76616c696453697a
000012b4 6520307830357500
000012bc 01               5861		.byte	1
000012bd 66               5862		.byte	102
000012be 6b466c617368496e 5863		.strz	"kFlashInvalidVersion 0x0Au"
000012c6 76616c6964566572
000012ce 73696f6e20307830
000012d6 417500          
000012d9 01               5864		.byte	1
000012da 6d               5865		.byte	109
000012db 6b466c617368496e 5866		.strz	"kFlashInitInvalidVersion (kFlashFctInit | kFlashInvalidVersion)"
000012e3 6974496e76616c69
000012eb 6456657273696f6e
000012f3 20286b466c617368
000012fb 466374496e697420
00001303 7c206b466c617368
0000130b 496e76616c696456
00001313 657273696f6e2900

                                   Fri Apr 10 08:32:08 2020           Page 106
                                   Fri Apr 10 08:32:08 2020   gh_00002441.si
0000131b 01               5867		.byte	1
0000131c 74               5868		.byte	116
0000131d 6b466c6173684572 5869		.strz	"kFlashEraseInvalidAddr (kFlashFctErase | kFlashInvalidAddress)"
00001325 617365496e76616c
0000132d 6964416464722028
00001335 6b466c6173684663
0000133d 744572617365207c
00001345 206b466c61736849
0000134d 6e76616c69644164
00001355 64726573732900  
0000135c 01               5870		.byte	1
0000135d 75               5871		.byte	117
0000135e 6b466c6173684572 5872		.strz	"kFlashEraseInvalidSize (kFlashFctErase | kFlashInvalidSize)"
00001366 617365496e76616c
0000136e 696453697a652028
00001376 6b466c6173684663
0000137e 744572617365207c
00001386 206b466c61736849
0000138e 6e76616c69645369
00001396 7a652900        
0000139a 01               5873		.byte	1
0000139b 7b               5874		.byte	123
0000139c 6b466c6173685772 5875		.strz	"kFlashWriteInvalidAddr (kFlashFctWrite | kFlashInvalidAddress)"
000013a4 697465496e76616c
000013ac 6964416464722028
000013b4 6b466c6173684663
000013bc 745772697465207c
000013c4 206b466c61736849
000013cc 6e76616c69644164
000013d4 64726573732900  
000013db 01               5876		.byte	1
000013dc 7c               5877		.byte	124
000013dd 6b466c6173685772 5878		.strz	"kFlashWriteInvalidSize (kFlashFctWrite | kFlashInvalidSize)"
000013e5 697465496e76616c
000013ed 696453697a652028
000013f5 6b466c6173684663
000013fd 745772697465207c
00001405 206b466c61736849
0000140d 6e76616c69645369
00001415 7a652900        
00001419 01               5879		.byte	1
0000141a 8101             5880		.byte	129,1
0000141c 46424c5f464c4153 5881		.strz	"FBL_FLASH_MCR_OFFSET 0x00ul"
00001424 485f4d43525f4f46
0000142c 4653455420307830
00001434 30756c00        
00001438 01               5882		.byte	1
00001439 8201             5883		.byte	130,1
0000143b 46424c5f464c4153 5884		.strz	"FBL_FLASH_MCRE_OFFSET 0x08ul"
00001443 485f4d4352455f4f
0000144b 4646534554203078
00001453 3038756c00      
00001458 01               5885		.byte	1
00001459 8f01             5886		.byte	143,1
0000145b 46424c5f464c4153 5887		.strz	"FBL_FLASH_MCR_EER 0x00008000ul"
00001463 485f4d43525f4545
0000146b 5220307830303030
00001473 38303030756c00  
0000147a 01               5888		.byte	1
0000147b c301             5889		.byte	195,1
0000147d 464c4153485f4643 5890		.strz	"FLASH_FCT_ADDRESS(fOffset,fBuffer) (unsigned long)&(fBuffer)[*(unsigned long *)&(fBuffer)[fOffset]]"
00001485 545f414444524553
0000148d 5328664f66667365
00001495 742c664275666665
0000149d 72292028756e7369
000014a5 676e6564206c6f6e
000014ad 6729262866427566
000014b5 666572295b2a2875
000014bd 6e7369676e656420
000014c5 6c6f6e67202a2926
000014cd 2866427566666572
000014d5 295b664f66667365
000014dd 745d5d00        
000014e1 01               5891		.byte	1
000014e2 c601             5892		.byte	198,1
000014e4 464c4153485f4452 5893		.strz	"FLASH_DRIVER_WRITE(fBuffer,fStructure) ((tFlashFct)(FLASH_FCT_ADDRESS(FLASH_DRIVER_WRITE_OFFSET, fBuffer)))(fStructure)"
000014ec 495645525f575249
000014f4 5445286642756666
000014fc 65722c6653747275
00001504 6374757265292028
0000150c 2874466c61736846
00001514 63742928464c4153
0000151c 485f4643545f4144
00001524 445245535328464c
0000152c 4153485f44524956
00001534 45525f5752495445
0000153c 5f4f46465345542c
00001544 2066427566666572
0000154c 2929292866537472
00001554 7563747572652900
0000155c 01               5894		.byte	1
0000155d ca01             5895		.byte	202,1
0000155f 464c4153485f4452 5896		.strz	"FLASH_DRIVER_ERASE(fBuffer,fStructure) ((tFlashFct)(FLASH_FCT_ADDRESS(FLASH_DRIVER_ERASE_OFFSET, fBuffer)))(fStructure)"
00001567 495645525f455241
0000156f 5345286642756666
00001577 65722c6653747275
0000157f 6374757265292028
00001587 2874466c61736846
0000158f 63742928464c4153
00001597 485f4643545f4144
0000159f 445245535328464c
000015a7 4153485f44524956
000015af 45525f4552415345
000015b7 5f4f46465345542c
000015bf 2066427566666572
000015c7 2929292866537472
000015cf 7563747572652900
000015d7 01               5897		.byte	1
000015d8 ce01             5898		.byte	206,1
000015da 464c4153485f4452 5899		.strz	"FLASH_DRIVER_INIT(fBuffer,fStructure) ((tFlashFct)(FLASH_FCT_ADDRESS(FLASH_DRIVER_INIT_OFFSET, fBuffer)))(fStructure)"
000015e2 495645525f494e49
000015ea 5428664275666665
000015f2 722c665374727563
000015fa 7475726529202828
00001602 74466c6173684663
0000160a 742928464c415348
00001612 5f4643545f414444
0000161a 5245535328464c41
00001622 53485f4452495645
0000162a 525f494e49545f4f
00001632 46465345542c2066
0000163a 4275666665722929
00001642 2928665374727563
0000164a 747572652900    
00001650 01               5900		.byte	1
00001651 d201             5901		.byte	210,1
00001653 464c4153485f4452 5902		.strz	"FLASH_DRIVER_DEINIT(fBuffer,fStructure) ((tFlashFct)(FLASH_FCT_ADDRESS(FLASH_DRIVER_DEINIT_OFFSET, fBuffer)))(fStructure)"
0000165b 495645525f444549
00001663 4e49542866427566
0000166b 6665722c66537472
00001673 7563747572652920
0000167b 282874466c617368
00001683 4663742928464c41
0000168b 53485f4643545f41
00001693 4444524553532846
0000169b 4c4153485f445249
000016a3 5645525f4445494e
000016ab 49545f4f46465345
000016b3 542c206642756666
000016bb 6572292929286653
000016c3 7472756374757265
000016cb 2900            
000016cd 04               5903		.byte	4
000016ce 03               5904		.byte	3
000016cf 6f               5905		.byte	111
000016d0 1a               5906		.byte	26
000016d1 04               5907		.byte	4
000016d2 03               5908		.byte	3
000016d3 75               5909		.byte	117
000016d4 1b               5910		.byte	27
000016d5 01               5911		.byte	1
000016d6 7c               5912		.byte	124
000016d7 494e495457415443 5913		.strz	"INITWATCHDOG_START_SEC_CODE_EXPORT "
000016df 48444f475f535441
000016e7 52545f5345435f43
000016ef 4f44455f4558504f
000016f7 52542000        
000016fb 03               5914		.byte	3
000016fc 7d               5915		.byte	125
000016fd 18               5916		.byte	24
000016fe 01               5917		.byte	1
000016ff 2b               5918		.byte	43
00001700 46424c5f4d454d4d 5919		.strz	"FBL_MEMMAP_ERROR "
00001708 41505f4552524f52
00001710 2000            
00001712 04               5920		.byte	4
00001713 01               5921		.byte	1
00001714 8001             5922		.byte	128,1

                                   Fri Apr 10 08:32:08 2020           Page 107
                                   Fri Apr 10 08:32:08 2020   gh_00002441.si
00001716 494e495457415443 5923		.strz	"INITWATCHDOG_STOP_SEC_CODE_EXPORT "
0000171e 48444f475f53544f
00001726 505f5345435f434f
0000172e 44455f4558504f52
00001736 542000          
00001739 03               5924		.byte	3
0000173a 8101             5925		.byte	129,1
0000173c 18               5926		.byte	24
0000173d 01               5927		.byte	1
0000173e 2b               5928		.byte	43
0000173f 46424c5f4d454d4d 5929		.strz	"FBL_MEMMAP_ERROR "
00001747 41505f4552524f52
0000174f 2000            
00001751 04               5930		.byte	4
00001752 01               5931		.byte	1
00001753 8301             5932		.byte	131,1
00001755 4c4f4f4b464f5257 5933		.strz	"LOOKFORWATCHDOG_START_SEC_CODE_EXPORT "
0000175d 41544348444f475f
00001765 53544152545f5345
0000176d 435f434f44455f45
00001775 58504f52542000  
0000177c 03               5934		.byte	3
0000177d 8401             5935		.byte	132,1
0000177f 18               5936		.byte	24
00001780 01               5937		.byte	1
00001781 2b               5938		.byte	43
00001782 46424c5f4d454d4d 5939		.strz	"FBL_MEMMAP_ERROR "
0000178a 41505f4552524f52
00001792 2000            
00001794 04               5940		.byte	4
00001795 01               5941		.byte	1
00001796 8801             5942		.byte	136,1
00001798 4c4f4f4b464f5257 5943		.strz	"LOOKFORWATCHDOG_STOP_SEC_CODE_EXPORT "
000017a0 41544348444f475f
000017a8 53544f505f534543
000017b0 5f434f44455f4558
000017b8 504f52542000    
000017be 03               5944		.byte	3
000017bf 8901             5945		.byte	137,1
000017c1 18               5946		.byte	24
000017c2 01               5947		.byte	1
000017c3 2b               5948		.byte	43
000017c4 46424c5f4d454d4d 5949		.strz	"FBL_MEMMAP_ERROR "
000017cc 41505f4552524f52
000017d4 2000            
000017d6 04               5950		.byte	4
000017d7 01               5951		.byte	1
000017d8 8b01             5952		.byte	139,1
000017da 4c4f4f4b464f5257 5953		.strz	"LOOKFORWATCHDOG_START_SEC_CODE_EXPORT "
000017e2 41544348444f475f
000017ea 53544152545f5345
000017f2 435f434f44455f45
000017fa 58504f52542000  
00001801 03               5954		.byte	3
00001802 8c01             5955		.byte	140,1
00001804 18               5956		.byte	24
00001805 01               5957		.byte	1
00001806 2b               5958		.byte	43
00001807 46424c5f4d454d4d 5959		.strz	"FBL_MEMMAP_ERROR "
0000180f 41505f4552524f52
00001817 2000            
00001819 04               5960		.byte	4
0000181a 01               5961		.byte	1
0000181b 9001             5962		.byte	144,1
0000181d 4c4f4f4b464f5257 5963		.strz	"LOOKFORWATCHDOG_STOP_SEC_CODE_EXPORT "
00001825 41544348444f475f
0000182d 53544f505f534543
00001835 5f434f44455f4558
0000183d 504f52542000    
00001843 03               5964		.byte	3
00001844 9101             5965		.byte	145,1
00001846 18               5966		.byte	24
00001847 01               5967		.byte	1
00001848 2b               5968		.byte	43
00001849 46424c5f4d454d4d 5969		.strz	"FBL_MEMMAP_ERROR "
00001851 41505f4552524f52
00001859 2000            
0000185b 04               5970		.byte	4
0000185c 04               5971		.byte	4
0000185d 03               5972		.byte	3
0000185e 76               5973		.byte	118
0000185f 1c               5974		.byte	28
00001860 01               5975		.byte	1
00001861 4d               5976		.byte	77
00001862 494f5f455f4f4b20 5977		.strz	"IO_E_OK ((vuint8)0x00u)"
0000186a 28287675696e7438
00001872 2930783030752900
0000187a 01               5978		.byte	1

                                   Fri Apr 10 08:32:08 2020           Page 108
                                   Fri Apr 10 08:32:08 2020   gh_00002441.si
0000187b 4e               5979		.byte	78
0000187c 494f5f455f4e4f54 5980		.strz	"IO_E_NOT_OK ((vuint8)0x01u)"
00001884 5f4f4b2028287675
0000188c 696e743829307830
00001894 31752900        
00001898 04               5981		.byte	4
00001899 03               5982		.byte	3
0000189a 7e               5983		.byte	126
0000189b 1d               5984		.byte	29
0000189c 01               5985		.byte	1
0000189d ca01             5986		.byte	202,1
0000189f 46424c5f4d41585f 5987		.strz	"FBL_MAX_SEGMENT_SIZE_MIO FBL_MEMDRV_SEGMENT_SIZE"
000018a7 5345474d454e545f
000018af 53495a455f4d494f
000018b7 2046424c5f4d454d
000018bf 4452565f5345474d
000018c7 454e545f53495a45
000018cf 00              
000018d0 01               5988		.byte	1
000018d1 e601             5989		.byte	230,1
000018d3 46424c5f4d41585f 5990		.strz	"FBL_MAX_SEGMENT_SIZE FBL_MAX_SEGMENT_SIZE_MIO"
000018db 5345474d454e545f
000018e3 53495a452046424c
000018eb 5f4d41585f534547
000018f3 4d454e545f53495a
000018fb 455f4d494f00    
00001901 01               5991		.byte	1
00001902 8702             5992		.byte	135,2
00001904 46424c5f4d494f5f 5993		.strz	"FBL_MIO_DEFAULT_FCT_PTR "
0000190c 44454641554c545f
00001914 4643545f50545220
0000191c 00              
0000191d 01               5994		.byte	1
0000191e a002             5995		.byte	160,2
00001920 46424c4d494f5f53 5996		.strz	"FBLMIO_START_SEC_CODE "
00001928 544152545f534543
00001930 5f434f44452000  
00001937 03               5997		.byte	3
00001938 a102             5998		.byte	161,2
0000193a 18               5999		.byte	24
0000193b 01               6000		.byte	1
0000193c 2b               6001		.byte	43
0000193d 46424c5f4d454d4d 6002		.strz	"FBL_MEMMAP_ERROR "
00001945 41505f4552524f52
0000194d 2000            
0000194f 04               6003		.byte	4
00001950 01               6004		.byte	1
00001951 b102             6005		.byte	177,2
00001953 46424c4d494f5f53 6006		.strz	"FBLMIO_STOP_SEC_CODE "
0000195b 544f505f5345435f
00001963 434f44452000    
00001969 03               6007		.byte	3
0000196a b202             6008		.byte	178,2
0000196c 18               6009		.byte	24
0000196d 01               6010		.byte	1
0000196e 2b               6011		.byte	43
0000196f 46424c5f4d454d4d 6012		.strz	"FBL_MEMMAP_ERROR "
00001977 41505f4552524f52
0000197f 2000            
00001981 04               6013		.byte	4
00001982 04               6014		.byte	4
00001983 03               6015		.byte	3
00001984 7f               6016		.byte	127
00001985 1e               6017		.byte	30
00001986 01               6018		.byte	1
00001987 56               6019		.byte	86
00001988 46424c5752415050 6020		.strz	"FBLWRAPPERFLASH_MPC5700C55FMCHIS_VERSION 0x0121u"
00001990 4552464c4153485f
00001998 4d50433537303043
000019a0 3535464d43484953
000019a8 5f56455253494f4e
000019b0 2030783031323175
000019b8 00              
000019b9 01               6021		.byte	1
000019ba 57               6022		.byte	87
000019bb 46424c5752415050 6023		.strz	"FBLWRAPPERFLASH_MPC5700C55FMCHIS_RELEASE_VERSION 0x02u"
000019c3 4552464c4153485f
000019cb 4d50433537303043
000019d3 3535464d43484953
000019db 5f52454c45415345
000019e3 5f56455253494f4e
000019eb 20307830327500  
000019f2 01               6024		.byte	1
000019f3 66               6025		.byte	102
000019f4 46424c464c494f5f 6026		.strz	"FBLFLIO_FLASHCODE_START_SEC_VAR "
000019fc 464c415348434f44
00001a04 455f53544152545f
00001a0c 5345435f56415220
00001a14 00              
00001a15 03               6027		.byte	3
00001a16 67               6028		.byte	103
00001a17 18               6029		.byte	24
00001a18 01               6030		.byte	1
00001a19 2b               6031		.byte	43
00001a1a 46424c5f4d454d4d 6032		.strz	"FBL_MEMMAP_ERROR "
00001a22 41505f4552524f52
00001a2a 2000            
00001a2c 04               6033		.byte	4
00001a2d 01               6034		.byte	1

                                   Fri Apr 10 08:32:08 2020           Page 109
                                   Fri Apr 10 08:32:08 2020   gh_00002441.si
00001a2e 69               6035		.byte	105
00001a2f 46424c464c494f5f 6036		.strz	"FBLFLIO_FLASHCODE_STOP_SEC_VAR "
00001a37 464c415348434f44
00001a3f 455f53544f505f53
00001a47 45435f5641522000
00001a4f 03               6037		.byte	3
00001a50 6a               6038		.byte	106
00001a51 18               6039		.byte	24
00001a52 01               6040		.byte	1
00001a53 2b               6041		.byte	43
00001a54 46424c5f4d454d4d 6042		.strz	"FBL_MEMMAP_ERROR "
00001a5c 41505f4552524f52
00001a64 2000            
00001a66 04               6043		.byte	4
00001a67 04               6044		.byte	4
00001a68 03               6045		.byte	3
00001a69 8001             6046		.byte	128,1
00001a6b 1f               6047		.byte	31
00001a6c 04               6048		.byte	4
00001a6d 03               6049		.byte	3
00001a6e 8101             6050		.byte	129,1
00001a70 20               6051		.byte	32
00001a71 03               6052		.byte	3
00001a72 2a               6053		.byte	42
00001a73 02               6054		.byte	2
00001a74 04               6055		.byte	4
00001a75 03               6056		.byte	3
00001a76 2b               6057		.byte	43
00001a77 21               6058		.byte	33
00001a78 01               6059		.byte	1
00001a79 49               6060		.byte	73
00001a7a 45455044554d4d59 6061		.strz	"EEPDUMMY_FULL_START_SEC_CODE "
00001a82 5f46554c4c5f5354
00001a8a 4152545f5345435f
00001a92 434f44452000    
00001a98 03               6062		.byte	3
00001a99 4a               6063		.byte	74
00001a9a 18               6064		.byte	24
00001a9b 01               6065		.byte	1
00001a9c 2b               6066		.byte	43
00001a9d 46424c5f4d454d4d 6067		.strz	"FBL_MEMMAP_ERROR "
00001aa5 41505f4552524f52
00001aad 2000            
00001aaf 04               6068		.byte	4
00001ab0 01               6069		.byte	1
00001ab1 54               6070		.byte	84
00001ab2 45455044554d4d59 6071		.strz	"EEPDUMMY_FULL_STOP_SEC_CODE "
00001aba 5f46554c4c5f5354
00001ac2 4f505f5345435f43
00001aca 4f44452000      
00001acf 03               6072		.byte	3
00001ad0 55               6073		.byte	85
00001ad1 18               6074		.byte	24
00001ad2 01               6075		.byte	1
00001ad3 2b               6076		.byte	43
00001ad4 46424c5f4d454d4d 6077		.strz	"FBL_MEMMAP_ERROR "
00001adc 41505f4552524f52
00001ae4 2000            
00001ae6 04               6078		.byte	4
00001ae7 04               6079		.byte	4
00001ae8 04               6080		.byte	4
00001ae9 03               6081		.byte	3
00001aea 8401             6082		.byte	132,1
00001aec 22               6083		.byte	34
00001aed 01               6084		.byte	1
00001aee 55               6085		.byte	85
00001aef 46424c5f4150504c 6086		.strz	"FBL_APPLVECT_START_SEC_CONST "
00001af7 564543545f535441
00001aff 52545f5345435f43
00001b07 4f4e53542000    
00001b0d 03               6087		.byte	3
00001b0e 56               6088		.byte	86
00001b0f 18               6089		.byte	24
00001b10 01               6090		.byte	1

                                   Fri Apr 10 08:32:08 2020           Page 110
                                   Fri Apr 10 08:32:08 2020   gh_00002441.si
00001b11 2b               6091		.byte	43
00001b12 46424c5f4d454d4d 6092		.strz	"FBL_MEMMAP_ERROR "
00001b1a 41505f4552524f52
00001b22 2000            
00001b24 04               6093		.byte	4
00001b25 01               6094		.byte	1
00001b26 5a               6095		.byte	90
00001b27 46424c5f4150504c 6096		.strz	"FBL_APPLVECT_STOP_SEC_CONST "
00001b2f 564543545f53544f
00001b37 505f5345435f434f
00001b3f 4e53542000      
00001b44 03               6097		.byte	3
00001b45 5b               6098		.byte	91
00001b46 18               6099		.byte	24
00001b47 01               6100		.byte	1
00001b48 2b               6101		.byte	43
00001b49 46424c5f4d454d4d 6102		.strz	"FBL_MEMMAP_ERROR "
00001b51 41505f4552524f52
00001b59 2000            
00001b5b 04               6103		.byte	4
00001b5c 04               6104		.byte	4
00001b5d 03               6105		.byte	3
00001b5e 8801             6106		.byte	136,1
00001b60 23               6107		.byte	35
00001b61 03               6108		.byte	3
00001b62 3c               6109		.byte	60
00001b63 24               6110		.byte	36
00001b64 01               6111		.byte	1
00001b65 49               6112		.byte	73
00001b66 46424c5f43414e5f 6113		.strz	"FBL_CAN_NUMBER_OF_RX_ID 2u"
00001b6e 4e554d4245525f4f
00001b76 465f52585f494420
00001b7e 327500          
00001b81 01               6114		.byte	1
00001b82 4a               6115		.byte	74
00001b83 46424c5f43414e5f 6116		.strz	"FBL_CAN_NUMBER_OF_RANGES 0u"
00001b8b 4e554d4245525f4f
00001b93 465f52414e474553
00001b9b 20307500        
00001b9f 01               6117		.byte	1
00001ba0 4b               6118		.byte	75
00001ba1 46424c5f4e554d42 6119		.strz	"FBL_NUMBER_OF_RX_ID (FBL_CAN_NUMBER_OF_RX_ID + FBL_CAN_NUMBER_OF_RANGES)"
00001ba9 45525f4f465f5258
00001bb1 5f4944202846424c
00001bb9 5f43414e5f4e554d
00001bc1 4245525f4f465f52
00001bc9 585f4944202b2046
00001bd1 424c5f43414e5f4e
00001bd9 554d4245525f4f46
00001be1 5f52414e47455329
00001be9 00              
00001bea 01               6120		.byte	1
00001beb 54               6121		.byte	84
00001bec 46424c5f4e554d42 6122		.strz	"FBL_NUMBER_OF_TX_ID 1u"
00001bf4 45525f4f465f5458
00001bfc 5f494420317500  
00001c03 01               6123		.byte	1
00001c04 57               6124		.byte	87
00001c05 46424c5f43575f43 6125		.strz	"FBL_CW_CFG_START_SEC_CONST "
00001c0d 46475f5354415254
00001c15 5f5345435f434f4e
00001c1d 53542000        
00001c21 03               6126		.byte	3
00001c22 58               6127		.byte	88
00001c23 18               6128		.byte	24
00001c24 01               6129		.byte	1
00001c25 2b               6130		.byte	43
00001c26 46424c5f4d454d4d 6131		.strz	"FBL_MEMMAP_ERROR "
00001c2e 41505f4552524f52
00001c36 2000            
00001c38 04               6132		.byte	4
00001c39 01               6133		.byte	1
00001c3a 67               6134		.byte	103
00001c3b 46424c5f43575f43 6135		.strz	"FBL_CW_CFG_STOP_SEC_CONST "
00001c43 46475f53544f505f
00001c4b 5345435f434f4e53
00001c53 542000          
00001c56 03               6136		.byte	3
00001c57 68               6137		.byte	104
00001c58 18               6138		.byte	24
00001c59 01               6139		.byte	1
00001c5a 2b               6140		.byte	43
00001c5b 46424c5f4d454d4d 6141		.strz	"FBL_MEMMAP_ERROR "
00001c63 41505f4552524f52
00001c6b 2000            
00001c6d 04               6142		.byte	4
00001c6e 01               6143		.byte	1
00001c6f 6d               6144		.byte	109
00001c70 46424c5f43575f45 6145		.strz	"FBL_CW_ENABLE_PHYSICAL_REQUEST_HANDLER "
00001c78 4e41424c455f5048
00001c80 59534943414c5f52
00001c88 4551554553545f48
00001c90 414e444c45522000
00001c98 01               6146		.byte	1

                                   Fri Apr 10 08:32:08 2020           Page 111
                                   Fri Apr 10 08:32:08 2020   gh_00002441.si
00001c99 6e               6147		.byte	110
00001c9a 46424c5f43575f45 6148		.strz	"FBL_CW_ENABLE_FUNCTIONAL_REQUEST_HANDLER "
00001ca2 4e41424c455f4655
00001caa 4e4354494f4e414c
00001cb2 5f52455155455354
00001cba 5f48414e444c4552
00001cc2 2000            
00001cc4 04               6149		.byte	4
00001cc5 03               6150		.byte	3
00001cc6 4d               6151		.byte	77
00001cc7 25               6152		.byte	37
00001cc8 03               6153		.byte	3
00001cc9 54               6154		.byte	84
00001cca 26               6155		.byte	38
00001ccb 01               6156		.byte	1
00001ccc 55               6157		.byte	85
00001ccd 46424c5f494f5328 6158		.strz	"FBL_IOS(type,base,offset) (*((volatile type *)((base) + (offset))))"
00001cd5 747970652c626173
00001cdd 652c6f6666736574
00001ce5 2920282a2828766f
00001ced 6c6174696c652074
00001cf5 797065202a292828
00001cfd 6261736529202b20
00001d05 286f666673657429
00001d0d 29292900        
00001d11 01               6159		.byte	1
00001d12 d901             6160		.byte	217,1
00001d14 46424c5f45444d41 6161		.strz	"FBL_EDMA_TCD_SADDR(x) FBL_IOS(vuint32, FBL_EDMA_BASE, 0x1000ul + ((x) * 0x20ul))"
00001d1c 5f5443445f534144
00001d24 4452287829204642
00001d2c 4c5f494f53287675
00001d34 696e7433322c2046
00001d3c 424c5f45444d415f
00001d44 424153452c203078
00001d4c 31303030756c202b
00001d54 2028287829202a20
00001d5c 30783230756c2929
00001d64 00              
00001d65 01               6162		.byte	1
00001d66 da01             6163		.byte	218,1
00001d68 46424c5f45444d41 6164		.strz	"FBL_EDMA_TCD_ATTR(x) FBL_IOS(vuint16, FBL_EDMA_BASE, 0x1004ul + ((x) * 0x20ul))"
00001d70 5f5443445f415454
00001d78 522878292046424c
00001d80 5f494f5328767569
00001d88 6e7431362c204642
00001d90 4c5f45444d415f42
00001d98 4153452c20307831
00001da0 303034756c202b20
00001da8 28287829202a2030
00001db0 783230756c292900
00001db8 01               6165		.byte	1
00001db9 db01             6166		.byte	219,1
00001dbb 46424c5f45444d41 6167		.strz	"FBL_EDMA_TCD_SOFF(x) FBL_IOS(vsint16, FBL_EDMA_BASE, 0x1006ul + ((x) * 0x20ul))"
00001dc3 5f5443445f534f46
00001dcb 462878292046424c
00001dd3 5f494f5328767369
00001ddb 6e7431362c204642
00001de3 4c5f45444d415f42
00001deb 4153452c20307831
00001df3 303036756c202b20
00001dfb 28287829202a2030
00001e03 783230756c292900
00001e0b 01               6168		.byte	1
00001e0c dc01             6169		.byte	220,1
00001e0e 46424c5f45444d41 6170		.strz	"FBL_EDMA_TCD_NBYTES(x) FBL_IOS(vuint32, FBL_EDMA_BASE, 0x1008ul + ((x) * 0x20ul))"
00001e16 5f5443445f4e4259
00001e1e 5445532878292046
00001e26 424c5f494f532876
00001e2e 75696e7433322c20
00001e36 46424c5f45444d41
00001e3e 5f424153452c2030
00001e46 7831303038756c20
00001e4e 2b2028287829202a
00001e56 2030783230756c29
00001e5e 2900            
00001e60 01               6171		.byte	1
00001e61 dd01             6172		.byte	221,1
00001e63 46424c5f45444d41 6173		.strz	"FBL_EDMA_TCD_SLAST(x) FBL_IOS(vuint32, FBL_EDMA_BASE, 0x100Cul + ((x) * 0x20ul))"
00001e6b 5f5443445f534c41
00001e73 5354287829204642
00001e7b 4c5f494f53287675
00001e83 696e7433322c2046
00001e8b 424c5f45444d415f
00001e93 424153452c203078
00001e9b 31303043756c202b
00001ea3 2028287829202a20
00001eab 30783230756c2929
00001eb3 00              
00001eb4 01               6174		.byte	1
00001eb5 de01             6175		.byte	222,1
00001eb7 46424c5f45444d41 6176		.strz	"FBL_EDMA_TCD_DADDR(x) FBL_IOS(vuint32, FBL_EDMA_BASE, 0x1010ul + ((x) * 0x20ul))"
00001ebf 5f5443445f444144
00001ec7 4452287829204642
00001ecf 4c5f494f53287675
00001ed7 696e7433322c2046
00001edf 424c5f45444d415f
00001ee7 424153452c203078
00001eef 31303130756c202b
00001ef7 2028287829202a20
00001eff 30783230756c2929
00001f07 00              
00001f08 01               6177		.byte	1
00001f09 df01             6178		.byte	223,1
00001f0b 46424c5f45444d41 6179		.strz	"FBL_EDMA_TCD_CITER(x) FBL_IOS(vuint16, FBL_EDMA_BASE, 0x1014ul + ((x) * 0x20ul))"
00001f13 5f5443445f434954
00001f1b 4552287829204642
00001f23 4c5f494f53287675
00001f2b 696e7431362c2046
00001f33 424c5f45444d415f
00001f3b 424153452c203078
00001f43 31303134756c202b
00001f4b 2028287829202a20
00001f53 30783230756c2929
00001f5b 00              
00001f5c 01               6180		.byte	1
00001f5d e001             6181		.byte	224,1
00001f5f 46424c5f45444d41 6182		.strz	"FBL_EDMA_TCD_DOFF(x) FBL_IOS(vsint16, FBL_EDMA_BASE, 0x1016ul + ((x) * 0x20ul))"
00001f67 5f5443445f444f46
00001f6f 462878292046424c
00001f77 5f494f5328767369
00001f7f 6e7431362c204642
00001f87 4c5f45444d415f42
00001f8f 4153452c20307831
00001f97 303136756c202b20
00001f9f 28287829202a2030
00001fa7 783230756c292900
00001faf 01               6183		.byte	1
00001fb0 e101             6184		.byte	225,1
00001fb2 46424c5f45444d41 6185		.strz	"FBL_EDMA_TCD_DLASTSGA(x) FBL_IOS(vsint32, FBL_EDMA_BASE, 0x1018ul + ((x) * 0x20ul))"
00001fba 5f5443445f444c41
00001fc2 5354534741287829
00001fca 2046424c5f494f53
00001fd2 287673696e743332
00001fda 2c2046424c5f4544
00001fe2 4d415f424153452c
00001fea 2030783130313875
00001ff2 6c202b2028287829
00001ffa 202a203078323075
00002002 6c292900        
00002006 01               6186		.byte	1
00002007 e201             6187		.byte	226,1
00002009 46424c5f45444d41 6188		.strz	"FBL_EDMA_TCD_BITER(x) FBL_IOS(vuint16, FBL_EDMA_BASE, 0x101Cul + ((x) * 0x20ul))"
00002011 5f5443445f424954
00002019 4552287829204642
00002021 4c5f494f53287675
00002029 696e7431362c2046
00002031 424c5f45444d415f
00002039 424153452c203078
00002041 31303143756c202b
00002049 2028287829202a20
00002051 30783230756c2929
00002059 00              
0000205a 01               6189		.byte	1
0000205b e301             6190		.byte	227,1
0000205d 46424c5f45444d41 6191		.strz	"FBL_EDMA_TCD_CSR(x) FBL_IOS(vuint16, FBL_EDMA_BASE, 0x101Eul + ((x) * 0x20ul))"
00002065 5f5443445f435352
0000206d 2878292046424c5f
00002075 494f53287675696e
0000207d 7431362c2046424c
00002085 5f45444d415f4241
0000208d 53452c2030783130
00002095 3145756c202b2028
0000209d 287829202a203078
000020a5 3230756c292900  
000020ac 04               6192		.byte	4
000020ad 01               6193		.byte	1
000020ae 74               6194		.byte	116
000020af 4d554c5449504c45 6195		.strz	"MULTIPLE_RECEIVE_BUFFER "
000020b7 5f52454345495645
000020bf 5f42554646455220
000020c7 00              
000020c8 01               6196		.byte	1
000020c9 9902             6197		.byte	153,2
000020cb 6b46626c43616e4d 6198		.strz	"kFblCanMaxMB 16"
000020d3 61784d4220313600
000020db 01               6199		.byte	1
000020dc cd03             6200		.byte	205,3
000020de 46424c48575f5241 6201		.strz	"FBLHW_RAMCODE_START_SEC_CODE "
000020e6 4d434f44455f5354
000020ee 4152545f5345435f
000020f6 434f44452000    
000020fc 03               6202		.byte	3

                                   Fri Apr 10 08:32:08 2020           Page 112
                                   Fri Apr 10 08:32:08 2020   gh_00002441.si
000020fd ce03             6203		.byte	206,3
000020ff 18               6204		.byte	24
00002100 01               6205		.byte	1
00002101 2b               6206		.byte	43
00002102 46424c5f4d454d4d 6207		.strz	"FBL_MEMMAP_ERROR "
0000210a 41505f4552524f52
00002112 2000            
00002114 04               6208		.byte	4
00002115 01               6209		.byte	1
00002116 d003             6210		.byte	208,3
00002118 46424c48575f5241 6211		.strz	"FBLHW_RAMCODE_STOP_SEC_CODE "
00002120 4d434f44455f5354
00002128 4f505f5345435f43
00002130 4f44452000      
00002135 03               6212		.byte	3
00002136 d103             6213		.byte	209,3
00002138 18               6214		.byte	24
00002139 01               6215		.byte	1
0000213a 2b               6216		.byte	43
0000213b 46424c5f4d454d4d 6217		.strz	"FBL_MEMMAP_ERROR "
00002143 41505f4552524f52
0000214b 2000            
0000214d 04               6218		.byte	4
0000214e 01               6219		.byte	1
0000214f d703             6220		.byte	215,3
00002151 46424c48575f5354 6221		.strz	"FBLHW_START_SEC_CODE "
00002159 4152545f5345435f
00002161 434f44452000    
00002167 03               6222		.byte	3
00002168 d803             6223		.byte	216,3
0000216a 18               6224		.byte	24
0000216b 01               6225		.byte	1
0000216c 2b               6226		.byte	43
0000216d 46424c5f4d454d4d 6227		.strz	"FBL_MEMMAP_ERROR "
00002175 41505f4552524f52
0000217d 2000            
0000217f 04               6228		.byte	4
00002180 01               6229		.byte	1
00002181 da03             6230		.byte	218,3
00002183 46424c48575f5354 6231		.strz	"FBLHW_STOP_SEC_CODE "
0000218b 4f505f5345435f43
00002193 4f44452000      
00002198 03               6232		.byte	3
00002199 db03             6233		.byte	219,3
0000219b 18               6234		.byte	24
0000219c 01               6235		.byte	1
0000219d 2b               6236		.byte	43
0000219e 46424c5f4d454d4d 6237		.strz	"FBL_MEMMAP_ERROR "
000021a6 41505f4552524f52
000021ae 2000            
000021b0 04               6238		.byte	4
000021b1 01               6239		.byte	1
000021b2 df03             6240		.byte	223,3
000021b4 46424c48575f4642 6241		.strz	"FBLHW_FBLCANTRANSMITTED_START_SEC_CODE "
000021bc 4c43414e5452414e
000021c4 534d49545445445f
000021cc 53544152545f5345
000021d4 435f434f44452000
000021dc 03               6242		.byte	3
000021dd e003             6243		.byte	224,3
000021df 18               6244		.byte	24
000021e0 01               6245		.byte	1
000021e1 2b               6246		.byte	43
000021e2 46424c5f4d454d4d 6247		.strz	"FBL_MEMMAP_ERROR "
000021ea 41505f4552524f52
000021f2 2000            
000021f4 04               6248		.byte	4
000021f5 01               6249		.byte	1
000021f6 e203             6250		.byte	226,3
000021f8 46424c48575f4642 6251		.strz	"FBLHW_FBLCANTRANSMITTED_STOP_SEC_CODE "
00002200 4c43414e5452414e
00002208 534d49545445445f
00002210 53544f505f534543
00002218 5f434f44452000  
0000221f 03               6252		.byte	3
00002220 e303             6253		.byte	227,3
00002222 18               6254		.byte	24
00002223 01               6255		.byte	1
00002224 2b               6256		.byte	43
00002225 46424c5f4d454d4d 6257		.strz	"FBL_MEMMAP_ERROR "
0000222d 41505f4552524f52
00002235 2000            
00002237 04               6258		.byte	4

                                   Fri Apr 10 08:32:08 2020           Page 113
                                   Fri Apr 10 08:32:08 2020   gh_00002441.si
00002238 01               6259		.byte	1
00002239 e503             6260		.byte	229,3
0000223b 46424c48575f5354 6261		.strz	"FBLHW_START_SEC_CODE "
00002243 4152545f5345435f
0000224b 434f44452000    
00002251 03               6262		.byte	3
00002252 e603             6263		.byte	230,3
00002254 18               6264		.byte	24
00002255 01               6265		.byte	1
00002256 2b               6266		.byte	43
00002257 46424c5f4d454d4d 6267		.strz	"FBL_MEMMAP_ERROR "
0000225f 41505f4552524f52
00002267 2000            
00002269 04               6268		.byte	4
0000226a 01               6269		.byte	1
0000226b e803             6270		.byte	232,3
0000226d 46424c48575f5354 6271		.strz	"FBLHW_STOP_SEC_CODE "
00002275 4f505f5345435f43
0000227d 4f44452000      
00002282 03               6272		.byte	3
00002283 e903             6273		.byte	233,3
00002285 18               6274		.byte	24
00002286 01               6275		.byte	1
00002287 2b               6276		.byte	43
00002288 46424c5f4d454d4d 6277		.strz	"FBL_MEMMAP_ERROR "
00002290 41505f4552524f52
00002298 2000            
0000229a 04               6278		.byte	4
0000229b 01               6279		.byte	1
0000229c f903             6280		.byte	249,3
0000229e 4d454d4350595f53 6281		.strz	"MEMCPY_START_SEC_CODE "
000022a6 544152545f534543
000022ae 5f434f44452000  
000022b5 03               6282		.byte	3
000022b6 fa03             6283		.byte	250,3
000022b8 18               6284		.byte	24
000022b9 01               6285		.byte	1
000022ba 2b               6286		.byte	43
000022bb 46424c5f4d454d4d 6287		.strz	"FBL_MEMMAP_ERROR "
000022c3 41505f4552524f52
000022cb 2000            
000022cd 04               6288		.byte	4
000022ce 01               6289		.byte	1
000022cf fd03             6290		.byte	253,3
000022d1 4d454d4350595f53 6291		.strz	"MEMCPY_STOP_SEC_CODE "
000022d9 544f505f5345435f
000022e1 434f44452000    
000022e7 03               6292		.byte	3
000022e8 fe03             6293		.byte	254,3
000022ea 18               6294		.byte	24
000022eb 01               6295		.byte	1
000022ec 2b               6296		.byte	43
000022ed 46424c5f4d454d4d 6297		.strz	"FBL_MEMMAP_ERROR "
000022f5 41505f4552524f52
000022fd 2000            
000022ff 04               6298		.byte	4
00002300 04               6299		.byte	4
00002301 03               6300		.byte	3
00002302 4e               6301		.byte	78
00002303 27               6302		.byte	39
00002304 01               6303		.byte	1
00002305 3b               6304		.byte	59
00002306 46424c5f54505f45 6305		.strz	"FBL_TP_ENABLE_ISO15765_2_2 "
0000230e 4e41424c455f4953
00002316 4f31353736355f32
0000231e 5f322000        
00002322 01               6306		.byte	1
00002323 41               6307		.byte	65
00002324 46424c5f54505f45 6308		.strz	"FBL_TP_ENABLE_CONFIRMATION_INTERRUPT "
0000232c 4e41424c455f434f
00002334 4e4649524d415449
0000233c 4f4e5f494e544552
00002344 525550542000    
0000234a 04               6309		.byte	4
0000234b 03               6310		.byte	3
0000234c 4f               6311		.byte	79
0000234d 28               6312		.byte	40
0000234e 01               6313		.byte	1
0000234f b101             6314		.byte	177,1

                                   Fri Apr 10 08:32:08 2020           Page 114
                                   Fri Apr 10 08:32:08 2020   gh_00002441.si
00002351 46424c54505f5241 6315		.strz	"FBLTP_RAMCODE_START_SEC_CODE "
00002359 4d434f44455f5354
00002361 4152545f5345435f
00002369 434f44452000    
0000236f 03               6316		.byte	3
00002370 b201             6317		.byte	178,1
00002372 18               6318		.byte	24
00002373 01               6319		.byte	1
00002374 2b               6320		.byte	43
00002375 46424c5f4d454d4d 6321		.strz	"FBL_MEMMAP_ERROR "
0000237d 41505f4552524f52
00002385 2000            
00002387 04               6322		.byte	4
00002388 01               6323		.byte	1
00002389 c301             6324		.byte	195,1
0000238b 46424c54505f5241 6325		.strz	"FBLTP_RAMCODE_STOP_SEC_CODE "
00002393 4d434f44455f5354
0000239b 4f505f5345435f43
000023a3 4f44452000      
000023a8 03               6326		.byte	3
000023a9 c401             6327		.byte	196,1
000023ab 18               6328		.byte	24
000023ac 01               6329		.byte	1
000023ad 2b               6330		.byte	43
000023ae 46424c5f4d454d4d 6331		.strz	"FBL_MEMMAP_ERROR "
000023b6 41505f4552524f52
000023be 2000            
000023c0 04               6332		.byte	4
000023c1 04               6333		.byte	4
000023c2 01               6334		.byte	1
000023c3 c601             6335		.byte	198,1
000023c5 46424c5f43575f46 6336		.strz	"FBL_CW_FULL_START_SEC_CODE "
000023cd 554c4c5f53544152
000023d5 545f5345435f434f
000023dd 44452000        
000023e1 03               6337		.byte	3
000023e2 c701             6338		.byte	199,1
000023e4 18               6339		.byte	24
000023e5 01               6340		.byte	1
000023e6 2b               6341		.byte	43
000023e7 46424c5f4d454d4d 6342		.strz	"FBL_MEMMAP_ERROR "
000023ef 41505f4552524f52
000023f7 2000            
000023f9 04               6343		.byte	4
000023fa 01               6344		.byte	1
000023fb cd01             6345		.byte	205,1
000023fd 46424c5f43575f54 6346		.strz	"FBL_CW_TASK_START_SEC_CODE "
00002405 41534b5f53544152
0000240d 545f5345435f434f
00002415 44452000        
00002419 03               6347		.byte	3
0000241a ce01             6348		.byte	206,1
0000241c 18               6349		.byte	24
0000241d 01               6350		.byte	1
0000241e 2b               6351		.byte	43
0000241f 46424c5f4d454d4d 6352		.strz	"FBL_MEMMAP_ERROR "
00002427 41505f4552524f52
0000242f 2000            
00002431 04               6353		.byte	4
00002432 01               6354		.byte	1
00002433 d101             6355		.byte	209,1
00002435 46424c5f43575f54 6356		.strz	"FBL_CW_TASK_STOP_SEC_CODE "
0000243d 41534b5f53544f50
00002445 5f5345435f434f44
0000244d 452000          
00002450 03               6357		.byte	3
00002451 d201             6358		.byte	210,1
00002453 18               6359		.byte	24
00002454 01               6360		.byte	1
00002455 2b               6361		.byte	43
00002456 46424c5f4d454d4d 6362		.strz	"FBL_MEMMAP_ERROR "
0000245e 41505f4552524f52
00002466 2000            
00002468 04               6363		.byte	4
00002469 01               6364		.byte	1
0000246a fa01             6365		.byte	250,1
0000246c 46424c5f43575f46 6366		.strz	"FBL_CW_FULL_STOP_SEC_CODE "
00002474 554c4c5f53544f50
0000247c 5f5345435f434f44
00002484 452000          
00002487 03               6367		.byte	3
00002488 fb01             6368		.byte	251,1
0000248a 18               6369		.byte	24
0000248b 01               6370		.byte	1

                                   Fri Apr 10 08:32:08 2020           Page 115
                                   Fri Apr 10 08:32:08 2020   gh_00002441.si
0000248c 2b               6371		.byte	43
0000248d 46424c5f4d454d4d 6372		.strz	"FBL_MEMMAP_ERROR "
00002495 41505f4552524f52
0000249d 2000            
0000249f 04               6373		.byte	4
000024a0 04               6374		.byte	4
000024a1 03               6375		.byte	3
000024a2 8e01             6376		.byte	142,1
000024a4 29               6377		.byte	41
000024a5 03               6378		.byte	3
000024a6 39               6379		.byte	57
000024a7 2a               6380		.byte	42
000024a8 03               6381		.byte	3
000024a9 3b               6382		.byte	59
000024aa 2b               6383		.byte	43
000024ab 01               6384		.byte	1
000024ac 31               6385		.byte	49
000024ad 4e565f454e41424c 6386		.strz	"NV_ENABLE_ADDRESS_LOOKUP "
000024b5 455f414444524553
000024bd 535f4c4f4f4b5550
000024c5 2000            
000024c7 01               6387		.byte	1
000024c8 5f               6388		.byte	95
000024c9 6b45657053697a65 6389		.strz	"kEepSizeValidityFlags 0x01u"
000024d1 56616c6964697479
000024d9 466c616773203078
000024e1 30317500        
000024e5 04               6390		.byte	4
000024e6 04               6391		.byte	4
000024e7 04               6392		.byte	4
000024e8 03               6393		.byte	3
000024e9 9501             6394		.byte	149,1
000024eb 2c               6395		.byte	44
000024ec 01               6396		.byte	1
000024ed 40               6397		.byte	64
000024ee 46424c5f4642545f 6398		.strz	"FBL_FBT_START_SEC_CONST "
000024f6 53544152545f5345
000024fe 435f434f4e535420
00002506 00              
00002507 03               6399		.byte	3
00002508 41               6400		.byte	65
00002509 18               6401		.byte	24
0000250a 01               6402		.byte	1
0000250b 2b               6403		.byte	43
0000250c 46424c5f4d454d4d 6404		.strz	"FBL_MEMMAP_ERROR "
00002514 41505f4552524f52
0000251c 2000            
0000251e 04               6405		.byte	4
0000251f 01               6406		.byte	1
00002520 47               6407		.byte	71
00002521 46424c5f4642545f 6408		.strz	"FBL_FBT_STOP_SEC_CONST "
00002529 53544f505f534543
00002531 5f434f4e53542000
00002539 03               6409		.byte	3
0000253a 48               6410		.byte	72
0000253b 18               6411		.byte	24
0000253c 01               6412		.byte	1
0000253d 2b               6413		.byte	43
0000253e 46424c5f4d454d4d 6414		.strz	"FBL_MEMMAP_ERROR "
00002546 41505f4552524f52
0000254e 2000            
00002550 04               6415		.byte	4
00002551 04               6416		.byte	4
00002552 03               6417		.byte	3
00002553 a101             6418		.byte	161,1
00002555 2d               6419		.byte	45
00002556 03               6420		.byte	3
00002557 4b               6421		.byte	75
00002558 2e               6422		.byte	46
00002559 01               6423		.byte	1
0000255a 56               6424		.byte	86
0000255b 46424c5f44494147 6425		.strz	"FBL_DIAG_ENABLE_CORE_SEGMENTHANDLING "
00002563 5f454e41424c455f
0000256b 434f52455f534547
00002573 4d454e5448414e44
0000257b 4c494e472000    
00002581 01               6426		.byte	1

                                   Fri Apr 10 08:32:08 2020           Page 116
                                   Fri Apr 10 08:32:08 2020   gh_00002441.si
00002582 61               6427		.byte	97
00002583 6b44696167537461 6428		.strz	"kDiagStateIdxSecurityKeyAllowed (kDiagLastCoreStateIdx + 1u)"
0000258b 7465496478536563
00002593 75726974794b6579
0000259b 416c6c6f77656420
000025a3 286b446961674c61
000025ab 7374436f72655374
000025b3 617465496478202b
000025bb 2031752900      
000025c0 01               6429		.byte	1
000025c1 62               6430		.byte	98
000025c2 6b44696167537461 6431		.strz	"kDiagStateIdxSecurityUnlock (kDiagStateIdxSecurityKeyAllowed + 1u)"
000025ca 7465496478536563
000025d2 7572697479556e6c
000025da 6f636b20286b4469
000025e2 6167537461746549
000025ea 6478536563757269
000025f2 74794b6579416c6c
000025fa 6f776564202b2031
00002602 752900          
00002605 01               6432		.byte	1
00002606 63               6433		.byte	99
00002607 6b44696167537461 6434		.strz	"kDiagStateIdxFingerprintValid (kDiagStateIdxSecurityUnlock + 1u)"
0000260f 746549647846696e
00002617 6765727072696e74
0000261f 56616c696420286b
00002627 4469616753746174
0000262f 6549647853656375
00002637 72697479556e6c6f
0000263f 636b202b20317529
00002647 00              
00002648 01               6435		.byte	1
00002649 64               6436		.byte	100
0000264a 6b44696167537461 6437		.strz	"kDiagStateIdxEraseSucceeded (kDiagStateIdxFingerprintValid + 1u)"
00002652 7465496478457261
0000265a 7365537563636565
00002662 64656420286b4469
0000266a 6167537461746549
00002672 647846696e676572
0000267a 7072696e7456616c
00002682 6964202b20317529
0000268a 00              
0000268b 01               6438		.byte	1
0000268c 65               6439		.byte	101
0000268d 6b44696167537461 6440		.strz	"kDiagStateIdxTransferDataAllowed (kDiagStateIdxEraseSucceeded + 1u)"
00002695 7465496478547261
0000269d 6e73666572446174
000026a5 61416c6c6f776564
000026ad 20286b4469616753
000026b5 7461746549647845
000026bd 7261736553756363
000026c5 6565646564202b20
000026cd 31752900        
000026d1 01               6441		.byte	1
000026d2 66               6442		.byte	102
000026d3 6b44696167537461 6443		.strz	"kDiagStateIdxTransferDataSucceeded (kDiagStateIdxTransferDataAllowed + 1u)"
000026db 7465496478547261
000026e3 6e73666572446174
000026eb 6153756363656564
000026f3 656420286b446961
000026fb 6753746174654964
00002703 785472616e736665
0000270b 7244617461416c6c
00002713 6f776564202b2031
0000271b 752900          
0000271e 01               6444		.byte	1
0000271f 67               6445		.byte	103
00002720 6b44696167537461 6446		.strz	"kDiagStateIdxChecksumAllowed (kDiagStateIdxTransferDataSucceeded + 1u)"
00002728 7465496478436865
00002730 636b73756d416c6c
00002738 6f77656420286b44
00002740 6961675374617465
00002748 4964785472616e73
00002750 6665724461746153
00002758 7563636565646564
00002760 202b2031752900  
00002767 01               6447		.byte	1
00002768 69               6448		.byte	105
00002769 6b446961674c6173 6449		.strz	"kDiagLastOemStateIdx kDiagStateIdxChecksumAllowed"
00002771 744f656d53746174
00002779 65496478206b4469
00002781 6167537461746549
00002789 6478436865636b73
00002791 756d416c6c6f7765
00002799 6400            
0000279b 04               6450		.byte	4
0000279c 01               6451		.byte	1
0000279d 5a               6452		.byte	90
0000279e 6b4469616743616c 6453		.strz	"kDiagCallCycle 1u"
000027a6 6c4379636c652031
000027ae 7500            
000027b0 01               6454		.byte	1
000027b1 7d               6455		.byte	125
000027b2 6b44696167537461 6456		.strz	"kDiagStateIdxMemDriverInitialized 17u"
000027ba 74654964784d656d
000027c2 447269766572496e
000027ca 697469616c697a65
000027d2 642031377500    
000027d8 01               6457		.byte	1
000027d9 7f               6458		.byte	127
000027da 6b446961674c6173 6459		.strz	"kDiagLastCoreStateIdx kDiagStateIdxMemDriverInitialized"
000027e2 74436f7265537461
000027ea 7465496478206b44
000027f2 6961675374617465
000027fa 4964784d656d4472
00002802 69766572496e6974
0000280a 69616c697a656400
00002812 01               6460		.byte	1
00002813 8201             6461		.byte	130,1
00002815 6b446961674e756d 6462		.strz	"kDiagNumberOfStates ( kDiagLastOemStateIdx + 1u )"
0000281d 6265724f66537461
00002825 7465732028206b44
0000282d 6961674c6173744f
00002835 656d537461746549
0000283d 6478202b20317520
00002845 2900            
00002847 01               6463		.byte	1
00002848 8301             6464		.byte	131,1
0000284a 6b446961674e756d 6465		.strz	"kDiagNumberOfDispatchStates kDiagNumberOfStates"
00002852 6265724f66446973
0000285a 7061746368537461
00002862 746573206b446961
0000286a 674e756d6265724f
00002872 6653746174657300
0000287a 01               6466		.byte	1
0000287b c801             6467		.byte	200,1
0000287d 46424c5f44494147 6468		.strz	"FBL_DIAG_STATECHECK_ARRAYSIZE (((kDiagNumberOfDispatchStates - 1u) / FBL_STATE_BITS) + 1u)"
00002885 5f53544154454348
0000288d 45434b5f41525241
00002895 5953495a45202828
0000289d 286b446961674e75
000028a5 6d6265724f664469
000028ad 7370617463685374
000028b5 61746573202d2031
000028bd 7529202f2046424c
000028c5 5f53544154455f42
000028cd 49545329202b2031
000028d5 752900          
000028d8 01               6469		.byte	1
000028d9 ae02             6470		.byte	174,2
000028db 6b44696167457272 6471		.strz	"kDiagErrorNone 0x00u"
000028e3 6f724e6f6e652030
000028eb 7830307500      
000028f0 01               6472		.byte	1
000028f1 af02             6473		.byte	175,2
000028f3 6b446961674e7263 6474		.strz	"kDiagNrcGeneralReject 0x10u"
000028fb 47656e6572616c52
00002903 656a656374203078
0000290b 31307500        
0000290f 01               6475		.byte	1
00002910 b502             6476		.byte	181,2
00002912 6b446961674e7263 6477		.strz	"kDiagNrcConditionsNotCorrect 0x22u"
0000291a 436f6e646974696f
00002922 6e734e6f74436f72
0000292a 7265637420307832
00002932 327500          
00002935 01               6478		.byte	1
00002936 b602             6479		.byte	182,2
00002938 6b446961674e7263 6480		.strz	"kDiagNrcRequestSequenceError 0x24u"
00002940 5265717565737453
00002948 657175656e636545
00002950 72726f7220307832
00002958 347500          
0000295b 01               6481		.byte	1
0000295c b702             6482		.byte	183,2

                                   Fri Apr 10 08:32:08 2020           Page 117
                                   Fri Apr 10 08:32:08 2020   gh_00002441.si
0000295e 6b446961674e7263 6483		.strz	"kDiagNrcRequestOutOfRange 0x31u"
00002966 526571756573744f
0000296e 75744f6652616e67
00002976 6520307833317500
0000297e 01               6484		.byte	1
0000297f bc02             6485		.byte	188,2
00002981 6b446961674e7263 6486		.strz	"kDiagNrcUploadDownloadNotAccepted 0x70u"
00002989 55706c6f6164446f
00002991 776e6c6f61644e6f
00002999 7441636365707465
000029a1 6420307837307500
000029a9 01               6487		.byte	1
000029aa bd02             6488		.byte	189,2
000029ac 6b446961674e7263 6489		.strz	"kDiagNrcTransferDataSuspended 0x71u"
000029b4 5472616e73666572
000029bc 4461746153757370
000029c4 656e646564203078
000029cc 37317500        
000029d0 01               6490		.byte	1
000029d1 be02             6491		.byte	190,2
000029d3 6b446961674e7263 6492		.strz	"kDiagNrcGeneralProgrammingFailure 0x72u"
000029db 47656e6572616c50
000029e3 726f6772616d6d69
000029eb 6e674661696c7572
000029f3 6520307837327500
000029fb 01               6493		.byte	1
000029fc cf03             6494		.byte	207,3
000029fe 46424c444941475f 6495		.strz	"FBLDIAG_RAMCODE_START_SEC_CODE "
00002a06 52414d434f44455f
00002a0e 53544152545f5345
00002a16 435f434f44452000
00002a1e 03               6496		.byte	3
00002a1f d003             6497		.byte	208,3
00002a21 18               6498		.byte	24
00002a22 01               6499		.byte	1
00002a23 2b               6500		.byte	43
00002a24 46424c5f4d454d4d 6501		.strz	"FBL_MEMMAP_ERROR "
00002a2c 41505f4552524f52
00002a34 2000            
00002a36 04               6502		.byte	4
00002a37 01               6503		.byte	1
00002a38 dc03             6504		.byte	220,3
00002a3a 46424c444941475f 6505		.strz	"FBLDIAG_RAMCODE_STOP_SEC_CODE "
00002a42 52414d434f44455f
00002a4a 53544f505f534543
00002a52 5f434f44452000  
00002a59 03               6506		.byte	3
00002a5a dd03             6507		.byte	221,3
00002a5c 18               6508		.byte	24
00002a5d 01               6509		.byte	1
00002a5e 2b               6510		.byte	43
00002a5f 46424c5f4d454d4d 6511		.strz	"FBL_MEMMAP_ERROR "
00002a67 41505f4552524f52
00002a6f 2000            
00002a71 04               6512		.byte	4
00002a72 04               6513		.byte	4
00002a73 03               6514		.byte	3
00002a74 a301             6515		.byte	163,1
00002a76 2f               6516		.byte	47
00002a77 03               6517		.byte	3
00002a78 b201             6518		.byte	178,1
00002a7a 30               6519		.byte	48
00002a7b 01               6520		.byte	1
00002a7c 79               6521		.byte	121
00002a7d 46424c5f4d454d5f 6522		.strz	"FBL_MEM_BUFFER_SIZE FBL_DIAG_BUFFER_LENGTH"
00002a85 4255464645525f53
00002a8d 495a452046424c5f
00002a95 444941475f425546
00002a9d 4645525f4c454e47
00002aa5 544800          
00002aa8 01               6523		.byte	1
00002aa9 7b               6524		.byte	123
00002aaa 46424c5f4d454d5f 6525		.strz	"FBL_MEM_DEFAULT_PREAMBLE_LENGTH 2u"
00002ab2 44454641554c545f
00002aba 505245414d424c45
00002ac2 5f4c454e47544820
00002aca 327500          
00002acd 01               6526		.byte	1
00002ace 7d               6527		.byte	125
00002acf 46424c5f4d454d5f 6528		.strz	"FBL_MEM_MAX_PREAMBLE_LENGTH 2u"
00002ad7 4d41585f50524541
00002adf 4d424c455f4c454e
00002ae7 47544820327500  
00002aee 01               6529		.byte	1
00002aef ad01             6530		.byte	173,1
00002af1 5f5f4170706c4662 6531		.strz	"__ApplFblMemPreWrite() FblDiagMemPreWrite()"
00002af9 6c4d656d50726557
00002b01 7269746528292046
00002b09 626c446961674d65
00002b11 6d50726557726974
00002b19 65282900        
00002b1d 01               6532		.byte	1
00002b1e ae01             6533		.byte	174,1
00002b20 5f5f4170706c4662 6534		.strz	"__ApplFblMemPostWrite() FblDiagMemPostWrite()"
00002b28 6c4d656d506f7374
00002b30 5772697465282920
00002b38 46626c446961674d
00002b40 656d506f73745772
00002b48 697465282900    
00002b4e 01               6535		.byte	1
00002b4f b301             6536		.byte	179,1
00002b51 5f5f4170706c4662 6537		.strz	"__ApplFblMemPreErase() FblDiagMemPreWrite()"
00002b59 6c4d656d50726545
00002b61 7261736528292046
00002b69 626c446961674d65
00002b71 6d50726557726974
00002b79 65282900        
00002b7d 01               6538		.byte	1

                                   Fri Apr 10 08:32:08 2020           Page 118
                                   Fri Apr 10 08:32:08 2020   gh_00002441.si
00002b7e b401             6539		.byte	180,1
00002b80 5f5f4170706c4662 6540		.strz	"__ApplFblMemPostErase() FblDiagMemPostWrite()"
00002b88 6c4d656d506f7374
00002b90 4572617365282920
00002b98 46626c446961674d
00002ba0 656d506f73745772
00002ba8 697465282900    
00002bae 01               6541		.byte	1
00002baf bd01             6542		.byte	189,1
00002bb1 46424c5f4d454d5f 6543		.strz	"FBL_MEM_WD_TRIGGER_DEFAULT (FBL_NO_TRIGGER)"
00002bb9 57445f5452494747
00002bc1 45525f4445464155
00002bc9 4c54202846424c5f
00002bd1 4e4f5f5452494747
00002bd9 45522900        
00002bdd 01               6544		.byte	1
00002bde c201             6545		.byte	194,1
00002be0 46424c5f4d454d5f 6546		.strz	"FBL_MEM_TRIGGER_STATUS_OVERWRITE vuint8"
00002be8 545249474745525f
00002bf0 5354415455535f4f
00002bf8 5645525752495445
00002c00 207675696e743800
00002c08 01               6547		.byte	1
00002c09 e601             6548		.byte	230,1
00002c0b 46424c5f4d454d5f 6549		.strz	"FBL_MEM_ENABLE_STATUS_OVERWRITE "
00002c13 454e41424c455f53
00002c1b 54415455535f4f56
00002c23 4552575249544520
00002c2b 00              
00002c2c 01               6550		.byte	1
00002c2d ef01             6551		.byte	239,1
00002c2f 46424c5f4d454d5f 6552		.strz	"FBL_MEM_STATUS_Ok kDiagErrorNone"
00002c37 5354415455535f4f
00002c3f 6b206b4469616745
00002c47 72726f724e6f6e65
00002c4f 00              
00002c50 01               6553		.byte	1
00002c51 f001             6554		.byte	240,1
00002c53 46424c5f4d454d5f 6555		.strz	"FBL_MEM_STATUS_Failed kDiagNrcConditionsNotCorrect"
00002c5b 5354415455535f46
00002c63 61696c6564206b44
00002c6b 6961674e7263436f
00002c73 6e646974696f6e73
00002c7b 4e6f74436f727265
00002c83 637400          
00002c86 01               6556		.byte	1
00002c87 f201             6557		.byte	242,1
00002c89 46424c5f4d454d5f 6558		.strz	"FBL_MEM_STATUS_BlockEraseSequence kDiagNrcRequestSequenceError"
00002c91 5354415455535f42
00002c99 6c6f636b45726173
00002ca1 6553657175656e63
00002ca9 65206b446961674e
00002cb1 7263526571756573
00002cb9 7453657175656e63
00002cc1 654572726f7200  
00002cc8 01               6559		.byte	1
00002cc9 f401             6560		.byte	244,1
00002ccb 46424c5f4d454d5f 6561		.strz	"FBL_MEM_STATUS_BlockStartSequence kDiagNrcRequestSequenceError"
00002cd3 5354415455535f42
00002cdb 6c6f636b53746172
00002ce3 7453657175656e63
00002ceb 65206b446961674e
00002cf3 7263526571756573
00002cfb 7453657175656e63
00002d03 654572726f7200  
00002d0a 01               6562		.byte	1
00002d0b f501             6563		.byte	245,1
00002d0d 46424c5f4d454d5f 6564		.strz	"FBL_MEM_STATUS_BlockStartParam kDiagNrcConditionsNotCorrect"
00002d15 5354415455535f42
00002d1d 6c6f636b53746172
00002d25 74506172616d206b
00002d2d 446961674e726343
00002d35 6f6e646974696f6e
00002d3d 734e6f74436f7272
00002d45 65637400        
00002d49 01               6565		.byte	1
00002d4a f701             6566		.byte	247,1
00002d4c 46424c5f4d454d5f 6567		.strz	"FBL_MEM_STATUS_BlockEndSequence kDiagNrcRequestSequenceError"
00002d54 5354415455535f42
00002d5c 6c6f636b456e6453
00002d64 657175656e636520
00002d6c 6b446961674e7263
00002d74 5265717565737453
00002d7c 657175656e636545
00002d84 72726f7200      
00002d89 01               6568		.byte	1
00002d8a f801             6569		.byte	248,1
00002d8c 46424c5f4d454d5f 6570		.strz	"FBL_MEM_STATUS_BlockEndVerifyFinalize kDiagNrcGeneralProgrammingFailure"
00002d94 5354415455535f42
00002d9c 6c6f636b456e6456
00002da4 657269667946696e
00002dac 616c697a65206b44
00002db4 6961674e72634765
00002dbc 6e6572616c50726f
00002dc4 6772616d6d696e67
00002dcc 4661696c75726500
00002dd4 01               6571		.byte	1
00002dd5 fa01             6572		.byte	250,1
00002dd7 46424c5f4d454d5f 6573		.strz	"FBL_MEM_STATUS_BlockVerifySequence kDiagNrcRequestSequenceError"
00002ddf 5354415455535f42
00002de7 6c6f636b56657269
00002def 667953657175656e
00002df7 6365206b44696167
00002dff 4e72635265717565
00002e07 737453657175656e
00002e0f 63654572726f7200
00002e17 01               6574		.byte	1
00002e18 fb01             6575		.byte	251,1
00002e1a 46424c5f4d454d5f 6576		.strz	"FBL_MEM_STATUS_BlockVerifyInputVerify kDiagNrcGeneralReject"
00002e22 5354415455535f42
00002e2a 6c6f636b56657269
00002e32 6679496e70757456
00002e3a 6572696679206b44
00002e42 6961674e72634765
00002e4a 6e6572616c52656a
00002e52 65637400        
00002e56 01               6577		.byte	1
00002e57 fc01             6578		.byte	252,1
00002e59 46424c5f4d454d5f 6579		.strz	"FBL_MEM_STATUS_BlockVerifyProcessedVerify kDiagNrcGeneralReject"
00002e61 5354415455535f42
00002e69 6c6f636b56657269
00002e71 667950726f636573
00002e79 7365645665726966
00002e81 79206b446961674e
00002e89 726347656e657261
00002e91 6c52656a65637400
00002e99 01               6580		.byte	1
00002e9a fd01             6581		.byte	253,1
00002e9c 46424c5f4d454d5f 6582		.strz	"FBL_MEM_STATUS_BlockVerifyPipeVerify kDiagNrcGeneralReject"
00002ea4 5354415455535f42
00002eac 6c6f636b56657269
00002eb4 6679506970655665
00002ebc 72696679206b4469
00002ec4 61674e726347656e
00002ecc 6572616c52656a65
00002ed4 637400          
00002ed7 01               6583		.byte	1
00002ed8 fe01             6584		.byte	254,1
00002eda 46424c5f4d454d5f 6585		.strz	"FBL_MEM_STATUS_BlockVerifyOutputVerify kDiagNrcGeneralReject"
00002ee2 5354415455535f42
00002eea 6c6f636b56657269
00002ef2 66794f7574707574
00002efa 566572696679206b
00002f02 446961674e726347
00002f0a 656e6572616c5265
00002f12 6a65637400      
00002f17 01               6586		.byte	1
00002f18 8002             6587		.byte	128,2
00002f1a 46424c5f4d454d5f 6588		.strz	"FBL_MEM_STATUS_SegmentStartSequence kDiagNrcRequestSequenceError"
00002f22 5354415455535f53
00002f2a 65676d656e745374
00002f32 6172745365717565
00002f3a 6e6365206b446961
00002f42 674e726352657175
00002f4a 6573745365717565
00002f52 6e63654572726f72
00002f5a 00              
00002f5b 01               6589		.byte	1
00002f5c 8102             6590		.byte	129,2
00002f5e 46424c5f4d454d5f 6591		.strz	"FBL_MEM_STATUS_SegmentStartDataProcInit kDiagNrcUploadDownloadNotAccepted"
00002f66 5354415455535f53
00002f6e 65676d656e745374
00002f76 6172744461746150
00002f7e 726f63496e697420
00002f86 6b446961674e7263
00002f8e 55706c6f6164446f
00002f96 776e6c6f61644e6f
00002f9e 7441636365707465
00002fa6 6400            
00002fa8 01               6592		.byte	1
00002fa9 8202             6593		.byte	130,2
00002fab 46424c5f4d454d5f 6594		.strz	"FBL_MEM_STATUS_SegmentStartStreamOutInit kDiagNrcUploadDownloadNotAccepted"
00002fb3 5354415455535f53
00002fbb 65676d656e745374
00002fc3 6172745374726561
00002fcb 6d4f7574496e6974
00002fd3 206b446961674e72
00002fdb 6355706c6f616444
00002fe3 6f776e6c6f61644e
00002feb 6f74416363657074
00002ff3 656400          

                                   Fri Apr 10 08:32:08 2020           Page 119
                                   Fri Apr 10 08:32:08 2020   gh_00002441.si
00002ff6 01               6595		.byte	1
00002ff7 8302             6596		.byte	131,2
00002ff9 46424c5f4d454d5f 6597		.strz	"FBL_MEM_STATUS_SegmentStartVerifyInit kDiagNrcConditionsNotCorrect"
00003001 5354415455535f53
00003009 65676d656e745374
00003011 6172745665726966
00003019 79496e6974206b44
00003021 6961674e7263436f
00003029 6e646974696f6e73
00003031 4e6f74436f727265
00003039 637400          
0000303c 01               6598		.byte	1
0000303d 8402             6599		.byte	132,2
0000303f 46424c5f4d454d5f 6600		.strz	"FBL_MEM_STATUS_SegmentStartVerifyCompute kDiagNrcGeneralProgrammingFailure"
00003047 5354415455535f53
0000304f 65676d656e745374
00003057 6172745665726966
0000305f 79436f6d70757465
00003067 206b446961674e72
0000306f 6347656e6572616c
00003077 50726f6772616d6d
0000307f 696e674661696c75
00003087 726500          
0000308a 01               6601		.byte	1
0000308b 8502             6602		.byte	133,2
0000308d 46424c5f4d454d5f 6603		.strz	"FBL_MEM_STATUS_SegmentStartSegmentCount kDiagNrcRequestOutOfRange"
00003095 5354415455535f53
0000309d 65676d656e745374
000030a5 6172745365676d65
000030ad 6e74436f756e7420
000030b5 6b446961674e7263
000030bd 526571756573744f
000030c5 75744f6652616e67
000030cd 6500            
000030cf 01               6604		.byte	1
000030d0 8702             6605		.byte	135,2
000030d2 46424c5f4d454d5f 6606		.strz	"FBL_MEM_STATUS_SegmentEndSequence kDiagNrcRequestSequenceError"
000030da 5354415455535f53
000030e2 65676d656e74456e
000030ea 6453657175656e63
000030f2 65206b446961674e
000030fa 7263526571756573
00003102 7453657175656e63
0000310a 654572726f7200  
00003111 01               6607		.byte	1
00003112 8802             6608		.byte	136,2
00003114 46424c5f4d454d5f 6609		.strz	"FBL_MEM_STATUS_SegmentEndInsufficientData kDiagNrcRequestSequenceError"
0000311c 5354415455535f53
00003124 65676d656e74456e
0000312c 64496e7375666669
00003134 6369656e74446174
0000313c 61206b446961674e
00003144 7263526571756573
0000314c 7453657175656e63
00003154 654572726f7200  
0000315b 01               6610		.byte	1
0000315c 8902             6611		.byte	137,2
0000315e 46424c5f4d454d5f 6612		.strz	"FBL_MEM_STATUS_SegmentEndPost kDiagNrcConditionsNotCorrect"
00003166 5354415455535f53
0000316e 65676d656e74456e
00003176 64506f7374206b44
0000317e 6961674e7263436f
00003186 6e646974696f6e73
0000318e 4e6f74436f727265
00003196 637400          
00003199 01               6613		.byte	1
0000319a 8b02             6614		.byte	139,2
0000319c 46424c5f4d454d5f 6615		.strz	"FBL_MEM_STATUS_DataIndSequence kDiagNrcRequestSequenceError"
000031a4 5354415455535f44
000031ac 617461496e645365
000031b4 7175656e6365206b
000031bc 446961674e726352
000031c4 6571756573745365
000031cc 7175656e63654572
000031d4 726f7200        
000031d8 01               6616		.byte	1
000031d9 8c02             6617		.byte	140,2
000031db 46424c5f4d454d5f 6618		.strz	"FBL_MEM_STATUS_DataIndParam kDiagNrcGeneralProgrammingFailure"
000031e3 5354415455535f44
000031eb 617461496e645061
000031f3 72616d206b446961
000031fb 674e726347656e65
00003203 72616c50726f6772
0000320b 616d6d696e674661
00003213 696c75726500    
00003219 01               6619		.byte	1
0000321a 8d02             6620		.byte	141,2
0000321c 46424c5f4d454d5f 6621		.strz	"FBL_MEM_STATUS_DataIndOverflow kDiagNrcTransferDataSuspended"
00003224 5354415455535f44
0000322c 617461496e644f76
00003234 6572666c6f77206b
0000323c 446961674e726354
00003244 72616e7366657244
0000324c 6174615375737065
00003254 6e64656400      
00003259 01               6622		.byte	1
0000325a 8f02             6623		.byte	143,2
0000325c 46424c5f4d454d5f 6624		.strz	"FBL_MEM_STATUS_DataProc kDiagNrcGeneralProgrammingFailure"
00003264 5354415455535f44
0000326c 61746150726f6320
00003274 6b446961674e7263
0000327c 47656e6572616c50
00003284 726f6772616d6d69
0000328c 6e674661696c7572
00003294 6500            
00003296 01               6625		.byte	1
00003297 9002             6626		.byte	144,2
00003299 46424c5f4d454d5f 6627		.strz	"FBL_MEM_STATUS_DataProcConsume kDiagNrcGeneralProgrammingFailure"
000032a1 5354415455535f44
000032a9 61746150726f6343
000032b1 6f6e73756d65206b
000032b9 446961674e726347
000032c1 656e6572616c5072
000032c9 6f6772616d6d696e
000032d1 674661696c757265
000032d9 00              
000032da 01               6628		.byte	1
000032db 9102             6629		.byte	145,2
000032dd 46424c5f4d454d5f 6630		.strz	"FBL_MEM_STATUS_DataProcDeinit kDiagNrcConditionsNotCorrect"
000032e5 5354415455535f44
000032ed 61746150726f6344
000032f5 65696e6974206b44
000032fd 6961674e7263436f
00003305 6e646974696f6e73
0000330d 4e6f74436f727265
00003315 637400          
00003318 01               6631		.byte	1
00003319 9302             6632		.byte	147,2
0000331b 46424c5f4d454d5f 6633		.strz	"FBL_MEM_STATUS_StreamOutput kDiagNrcGeneralProgrammingFailure"
00003323 5354415455535f53
0000332b 747265616d4f7574
00003333 707574206b446961
0000333b 674e726347656e65
00003343 72616c50726f6772
0000334b 616d6d696e674661
00003353 696c75726500    
00003359 01               6634		.byte	1
0000335a 9402             6635		.byte	148,2
0000335c 46424c5f4d454d5f 6636		.strz	"FBL_MEM_STATUS_StreamOutputConsume kDiagNrcGeneralProgrammingFailure"
00003364 5354415455535f53
0000336c 747265616d4f7574
00003374 707574436f6e7375
0000337c 6d65206b44696167
00003384 4e726347656e6572
0000338c 616c50726f677261
00003394 6d6d696e67466169
0000339c 6c75726500      
000033a1 01               6637		.byte	1
000033a2 9502             6638		.byte	149,2
000033a4 46424c5f4d454d5f 6639		.strz	"FBL_MEM_STATUS_StreamOutputOverflow kDiagNrcTransferDataSuspended"
000033ac 5354415455535f53
000033b4 747265616d4f7574
000033bc 7075744f76657266
000033c4 6c6f77206b446961
000033cc 674e72635472616e
000033d4 7366657244617461
000033dc 53757370656e6465
000033e4 6400            
000033e6 01               6640		.byte	1
000033e7 9602             6641		.byte	150,2
000033e9 46424c5f4d454d5f 6642		.strz	"FBL_MEM_STATUS_StreamOutputDeinit kDiagNrcConditionsNotCorrect"
000033f1 5354415455535f53
000033f9 747265616d4f7574
00003401 7075744465696e69
00003409 74206b446961674e
00003411 7263436f6e646974
00003419 696f6e734e6f7443
00003421 6f727265637400  
00003428 01               6643		.byte	1
00003429 9802             6644		.byte	152,2
0000342b 46424c5f4d454d5f 6645		.strz	"FBL_MEM_STATUS_DriverResumeWrite kDiagNrcGeneralProgrammingFailure"
00003433 5354415455535f44
0000343b 7269766572526573
00003443 756d655772697465
0000344b 206b446961674e72
00003453 6347656e6572616c
0000345b 50726f6772616d6d
00003463 696e674661696c75
0000346b 726500          
0000346e 01               6646		.byte	1
0000346f 9902             6647		.byte	153,2
00003471 46424c5f4d454d5f 6648		.strz	"FBL_MEM_STATUS_DriverWrite kDiagNrcGeneralProgrammingFailure"
00003479 5354415455535f44
00003481 7269766572577269
00003489 7465206b44696167
00003491 4e726347656e6572
00003499 616c50726f677261
000034a1 6d6d696e67466169
000034a9 6c75726500      
000034ae 01               6649		.byte	1
000034af 9a02             6650		.byte	154,2

                                   Fri Apr 10 08:32:08 2020           Page 120
                                   Fri Apr 10 08:32:08 2020   gh_00002441.si
000034b1 46424c5f4d454d5f 6651		.strz	"FBL_MEM_STATUS_DriverErase kDiagNrcGeneralProgrammingFailure"
000034b9 5354415455535f44
000034c1 7269766572457261
000034c9 7365206b44696167
000034d1 4e726347656e6572
000034d9 616c50726f677261
000034e1 6d6d696e67466169
000034e9 6c75726500      
000034ee 01               6652		.byte	1
000034ef 9b02             6653		.byte	155,2
000034f1 46424c5f4d454d5f 6654		.strz	"FBL_MEM_STATUS_DriverRemainder kDiagNrcGeneralProgrammingFailure"
000034f9 5354415455535f44
00003501 726976657252656d
00003509 61696e646572206b
00003511 446961674e726347
00003519 656e6572616c5072
00003521 6f6772616d6d696e
00003529 674661696c757265
00003531 00              
00003532 01               6655		.byte	1
00003533 9c02             6656		.byte	156,2
00003535 46424c5f4d454d5f 6657		.strz	"FBL_MEM_STATUS_DriverSuspendWrite kDiagNrcGeneralProgrammingFailure"
0000353d 5354415455535f44
00003545 7269766572537573
0000354d 70656e6457726974
00003555 65206b446961674e
0000355d 726347656e657261
00003565 6c50726f6772616d
0000356d 6d696e674661696c
00003575 75726500        
00003579 01               6658		.byte	1
0000357a 9e02             6659		.byte	158,2
0000357c 46424c5f4d454d5f 6660		.strz	"FBL_MEM_STATUS_ProgramOverflow kDiagNrcTransferDataSuspended"
00003584 5354415455535f50
0000358c 726f6772616d4f76
00003594 6572666c6f77206b
0000359c 446961674e726354
000035a4 72616e7366657244
000035ac 6174615375737065
000035b4 6e64656400      
000035b9 01               6661		.byte	1
000035ba 9f02             6662		.byte	159,2
000035bc 46424c5f4d454d5f 6663		.strz	"FBL_MEM_STATUS_ProgramOutsideFbt kDiagNrcTransferDataSuspended"
000035c4 5354415455535f50
000035cc 726f6772616d4f75
000035d4 7473696465466274
000035dc 206b446961674e72
000035e4 635472616e736665
000035ec 7244617461537573
000035f4 70656e64656400  
000035fb 01               6664		.byte	1
000035fc a002             6665		.byte	160,2
000035fe 46424c5f4d454d5f 6666		.strz	"FBL_MEM_STATUS_ProgramUnalignedAddress kDiagNrcGeneralProgrammingFailure"
00003606 5354415455535f50
0000360e 726f6772616d556e
00003616 616c69676e656441
0000361e 646472657373206b
00003626 446961674e726347
0000362e 656e6572616c5072
00003636 6f6772616d6d696e
0000363e 674661696c757265
00003646 00              
00003647 01               6667		.byte	1
00003648 a102             6668		.byte	161,2
0000364a 46424c5f4d454d5f 6669		.strz	"FBL_MEM_STATUS_ProgramDriverNotReady kDiagNrcRequestSequenceError"
00003652 5354415455535f50
0000365a 726f6772616d4472
00003662 697665724e6f7452
0000366a 65616479206b4469
00003672 61674e7263526571
0000367a 7565737453657175
00003682 656e63654572726f
0000368a 7200            
0000368c 01               6670		.byte	1
0000368d a202             6671		.byte	162,2
0000368f 46424c5f4d454d5f 6672		.strz	"FBL_MEM_STATUS_ProgramPreWrite kDiagNrcGeneralProgrammingFailure"
00003697 5354415455535f50
0000369f 726f6772616d5072
000036a7 655772697465206b
000036af 446961674e726347
000036b7 656e6572616c5072
000036bf 6f6772616d6d696e
000036c7 674661696c757265
000036cf 00              
000036d0 01               6673		.byte	1
000036d1 a302             6674		.byte	163,2
000036d3 46424c5f4d454d5f 6675		.strz	"FBL_MEM_STATUS_ProgramPostWrite kDiagNrcGeneralProgrammingFailure"
000036db 5354415455535f50
000036e3 726f6772616d506f
000036eb 7374577269746520
000036f3 6b446961674e7263
000036fb 47656e6572616c50
00003703 726f6772616d6d69
0000370b 6e674661696c7572
00003713 6500            
00003715 01               6676		.byte	1
00003716 a502             6677		.byte	165,2
00003718 46424c5f4d454d5f 6678		.strz	"FBL_MEM_STATUS_EraseOutsideFbt kDiagNrcRequestOutOfRange"
00003720 5354415455535f45
00003728 726173654f757473
00003730 696465466274206b
00003738 446961674e726352
00003740 6571756573744f75
00003748 744f6652616e6765
00003750 00              
00003751 01               6679		.byte	1
00003752 a602             6680		.byte	166,2
00003754 46424c5f4d454d5f 6681		.strz	"FBL_MEM_STATUS_EraseDriverNotReady kDiagNrcConditionsNotCorrect"
0000375c 5354415455535f45
00003764 7261736544726976
0000376c 65724e6f74526561
00003774 6479206b44696167
0000377c 4e7263436f6e6469
00003784 74696f6e734e6f74
0000378c 436f727265637400
00003794 01               6682		.byte	1
00003795 a702             6683		.byte	167,2
00003797 46424c5f4d454d5f 6684		.strz	"FBL_MEM_STATUS_ErasePreErase kDiagNrcConditionsNotCorrect"
0000379f 5354415455535f45
000037a7 7261736550726545
000037af 72617365206b4469
000037b7 61674e7263436f6e
000037bf 646974696f6e734e
000037c7 6f74436f72726563
000037cf 7400            
000037d1 01               6685		.byte	1
000037d2 a802             6686		.byte	168,2
000037d4 46424c5f4d454d5f 6687		.strz	"FBL_MEM_STATUS_ErasePostErase kDiagNrcConditionsNotCorrect"
000037dc 5354415455535f45
000037e4 72617365506f7374
000037ec 4572617365206b44
000037f4 6961674e7263436f
000037fc 6e646974696f6e73
00003804 4e6f74436f727265
0000380c 637400          
0000380f 01               6688		.byte	1
00003810 aa02             6689		.byte	170,2
00003812 46424c5f4d454d5f 6690		.strz	"FBL_MEM_STATUS_VerifyCompute kDiagNrcGeneralProgrammingFailure"
0000381a 5354415455535f56
00003822 6572696679436f6d
0000382a 70757465206b4469
00003832 61674e726347656e
0000383a 6572616c50726f67
00003842 72616d6d696e6746
0000384a 61696c75726500  
00003851 01               6691		.byte	1
00003852 ab02             6692		.byte	171,2
00003854 46424c5f4d454d5f 6693		.strz	"FBL_MEM_STATUS_VerifyFinalize kDiagNrcGeneralProgrammingFailure"
0000385c 5354415455535f56
00003864 657269667946696e
0000386c 616c697a65206b44
00003874 6961674e72634765
0000387c 6e6572616c50726f
00003884 6772616d6d696e67
0000388c 4661696c75726500
00003894 01               6694		.byte	1
00003895 ad02             6695		.byte	173,2
00003897 46424c5f4d454d5f 6696		.strz	"FBL_MEM_STATUS_PassThroughLocal kDiagNrcConditionsNotCorrect"
0000389f 5354415455535f50
000038a7 6173735468726f75
000038af 67684c6f63616c20
000038b7 6b446961674e7263
000038bf 436f6e646974696f
000038c7 6e734e6f74436f72
000038cf 7265637400      
000038d4 01               6697		.byte	1
000038d5 ae02             6698		.byte	174,2
000038d7 46424c5f4d454d5f 6699		.strz	"FBL_MEM_STATUS_PassThroughRemote kDiagNrcConditionsNotCorrect"
000038df 5354415455535f50
000038e7 6173735468726f75
000038ef 676852656d6f7465
000038f7 206b446961674e72
000038ff 63436f6e64697469
00003907 6f6e734e6f74436f
0000390f 727265637400    
00003915 01               6700		.byte	1
00003916 b302             6701		.byte	179,2
00003918 46424c5f4d454d5f 6702		.strz	"FBL_MEM_ENABLE_EXT_STATUS "
00003920 454e41424c455f45
00003928 58545f5354415455
00003930 532000          
00003933 01               6703		.byte	1
00003934 b602             6704		.byte	182,2
00003936 46424c5f4d454d5f 6705		.strz	"FBL_MEM_EXT_STATUS_Ok(status) "
0000393e 4558545f53544154
00003946 55535f4f6b287374
0000394e 61747573292000  
00003955 01               6706		.byte	1

                                   Fri Apr 10 08:32:08 2020           Page 121
                                   Fri Apr 10 08:32:08 2020   gh_00002441.si
00003956 b702             6707		.byte	183,2
00003958 46424c5f4d454d5f 6708		.strz	"FBL_MEM_EXT_STATUS_Failed(status) "
00003960 4558545f53544154
00003968 55535f4661696c65
00003970 6428737461747573
00003978 292000          
0000397b 04               6709		.byte	4
0000397c 01               6710		.byte	1
0000397d e901             6711		.byte	233,1
0000397f 46424c5f4d454d5f 6712		.strz	"FBL_MEM_ENABLE_GAP_FILL "
00003987 454e41424c455f47
0000398f 41505f46494c4c20
00003997 00              
00003998 01               6713		.byte	1
00003999 f901             6714		.byte	249,1
0000399b 46424c5f4d454d5f 6715		.strz	"FBL_MEM_ENABLE_SEGMENT_HANDLING "
000039a3 454e41424c455f53
000039ab 45474d454e545f48
000039b3 414e444c494e4720
000039bb 00              
000039bc 01               6716		.byte	1
000039bd a902             6717		.byte	169,2
000039bf 46424c5f4d454d5f 6718		.strz	"FBL_MEM_STATUS_NAME(name) kFblMemStatus_ ## name"
000039c7 5354415455535f4e
000039cf 414d45286e616d65
000039d7 29206b46626c4d65
000039df 6d5374617475735f
000039e7 202323206e616d65
000039ef 00              
000039f0 01               6719		.byte	1
000039f1 aa02             6720		.byte	170,2
000039f3 46424c5f4d454d5f 6721		.strz	"FBL_MEM_STATUS_DEFINE(name) FBL_MEM_STATUS_ ## name"
000039fb 5354415455535f44
00003a03 4546494e45286e61
00003a0b 6d65292046424c5f
00003a13 4d454d5f53544154
00003a1b 55535f202323206e
00003a23 616d6500        
00003a27 01               6722		.byte	1
00003a28 ae02             6723		.byte	174,2
00003a2a 46424c5f4d454d5f 6724		.strz	"FBL_MEM_STATUS_DEFINITION(name) FBL_MEM_STATUS_NAME(name) = FBL_MEM_STATUS_DEFINE(name)"
00003a32 5354415455535f44
00003a3a 4546494e4954494f
00003a42 4e286e616d652920
00003a4a 46424c5f4d454d5f
00003a52 5354415455535f4e
00003a5a 414d45286e616d65
00003a62 29203d2046424c5f
00003a6a 4d454d5f53544154
00003a72 55535f444546494e
00003a7a 45286e616d652900
00003a82 01               6725		.byte	1
00003a83 e006             6726		.byte	224,6
00003a85 46424c4c49425f4d 6727		.strz	"FBLLIB_MEM_RAMCODE_START_SEC_CODE_EXPORT "
00003a8d 454d5f52414d434f
00003a95 44455f5354415254
00003a9d 5f5345435f434f44
00003aa5 455f4558504f5254
00003aad 2000            
00003aaf 03               6728		.byte	3
00003ab0 e106             6729		.byte	225,6
00003ab2 18               6730		.byte	24
00003ab3 01               6731		.byte	1
00003ab4 2b               6732		.byte	43
00003ab5 46424c5f4d454d4d 6733		.strz	"FBL_MEMMAP_ERROR "
00003abd 41505f4552524f52
00003ac5 2000            
00003ac7 04               6734		.byte	4
00003ac8 01               6735		.byte	1
00003ac9 e506             6736		.byte	229,6
00003acb 46424c4c49425f4d 6737		.strz	"FBLLIB_MEM_RAMCODE_STOP_SEC_CODE_EXPORT "
00003ad3 454d5f52414d434f
00003adb 44455f53544f505f
00003ae3 5345435f434f4445
00003aeb 5f4558504f525420
00003af3 00              
00003af4 03               6738		.byte	3
00003af5 e606             6739		.byte	230,6
00003af7 18               6740		.byte	24
00003af8 01               6741		.byte	1
00003af9 2b               6742		.byte	43
00003afa 46424c5f4d454d4d 6743		.strz	"FBL_MEMMAP_ERROR "
00003b02 41505f4552524f52
00003b0a 2000            
00003b0c 04               6744		.byte	4
00003b0d 01               6745		.byte	1
00003b0e f106             6746		.byte	241,6
00003b10 46424c4c49425f4d 6747		.strz	"FBLLIB_MEM_START_SEC_VAR_EXPORT "
00003b18 454d5f5354415254
00003b20 5f5345435f564152
00003b28 5f4558504f525420
00003b30 00              
00003b31 03               6748		.byte	3
00003b32 f206             6749		.byte	242,6
00003b34 18               6750		.byte	24
00003b35 01               6751		.byte	1
00003b36 2b               6752		.byte	43
00003b37 46424c5f4d454d4d 6753		.strz	"FBL_MEMMAP_ERROR "
00003b3f 41505f4552524f52
00003b47 2000            
00003b49 04               6754		.byte	4
00003b4a 01               6755		.byte	1
00003b4b f606             6756		.byte	246,6
00003b4d 46424c4c49425f4d 6757		.strz	"FBLLIB_MEM_STOP_SEC_VAR_EXPORT "
00003b55 454d5f53544f505f
00003b5d 5345435f5641525f
00003b65 4558504f52542000
00003b6d 03               6758		.byte	3
00003b6e f706             6759		.byte	247,6
00003b70 18               6760		.byte	24
00003b71 01               6761		.byte	1
00003b72 2b               6762		.byte	43

                                   Fri Apr 10 08:32:08 2020           Page 122
                                   Fri Apr 10 08:32:08 2020   gh_00002441.si
00003b73 46424c5f4d454d4d 6763		.strz	"FBL_MEMMAP_ERROR "
00003b7b 41505f4552524f52
00003b83 2000            
00003b85 04               6764		.byte	4
00003b86 04               6765		.byte	4
00003b87 03               6766		.byte	3
00003b88 a901             6767		.byte	169,1
00003b8a 31               6768		.byte	49
00003b8b 01               6769		.byte	1
00003b8c ac02             6770		.byte	172,2
00003b8e 46424c41505f5241 6771		.strz	"FBLAP_RAMCODE_START_SEC_CODE_EXPORT "
00003b96 4d434f44455f5354
00003b9e 4152545f5345435f
00003ba6 434f44455f455850
00003bae 4f52542000      
00003bb3 03               6772		.byte	3
00003bb4 ad02             6773		.byte	173,2
00003bb6 18               6774		.byte	24
00003bb7 01               6775		.byte	1
00003bb8 2b               6776		.byte	43
00003bb9 46424c5f4d454d4d 6777		.strz	"FBL_MEMMAP_ERROR "
00003bc1 41505f4552524f52
00003bc9 2000            
00003bcb 04               6778		.byte	4
00003bcc 01               6779		.byte	1
00003bcd af02             6780		.byte	175,2
00003bcf 46424c41505f5241 6781		.strz	"FBLAP_RAMCODE_STOP_SEC_CODE_EXPORT "
00003bd7 4d434f44455f5354
00003bdf 4f505f5345435f43
00003be7 4f44455f4558504f
00003bef 52542000        
00003bf3 03               6782		.byte	3
00003bf4 b002             6783		.byte	176,2
00003bf6 18               6784		.byte	24
00003bf7 01               6785		.byte	1
00003bf8 2b               6786		.byte	43
00003bf9 46424c5f4d454d4d 6787		.strz	"FBL_MEMMAP_ERROR "
00003c01 41505f4552524f52
00003c09 2000            
00003c0b 04               6788		.byte	4
00003c0c 04               6789		.byte	4
00003c0d 03               6790		.byte	3
00003c0e aa01             6791		.byte	170,1
00003c10 32               6792		.byte	50
00003c11 01               6793		.byte	1
00003c12 9402             6794		.byte	148,2
00003c14 5744545249474745 6795		.strz	"WDTRIGGER_START_SEC_CODE_EXPORT "
00003c1c 525f53544152545f
00003c24 5345435f434f4445
00003c2c 5f4558504f525420
00003c34 00              
00003c35 03               6796		.byte	3
00003c36 9502             6797		.byte	149,2
00003c38 18               6798		.byte	24
00003c39 01               6799		.byte	1
00003c3a 2b               6800		.byte	43
00003c3b 46424c5f4d454d4d 6801		.strz	"FBL_MEMMAP_ERROR "
00003c43 41505f4552524f52
00003c4b 2000            
00003c4d 04               6802		.byte	4
00003c4e 01               6803		.byte	1
00003c4f 9702             6804		.byte	151,2
00003c51 5744545249474745 6805		.strz	"WDTRIGGER_STOP_SEC_CODE_EXPORT "
00003c59 525f53544f505f53
00003c61 45435f434f44455f
00003c69 4558504f52542000
00003c71 03               6806		.byte	3
00003c72 9802             6807		.byte	152,2
00003c74 18               6808		.byte	24
00003c75 01               6809		.byte	1
00003c76 2b               6810		.byte	43
00003c77 46424c5f4d454d4d 6811		.strz	"FBL_MEMMAP_ERROR "
00003c7f 41505f4552524f52
00003c87 2000            
00003c89 04               6812		.byte	4
00003c8a 04               6813		.byte	4
00003c8b 03               6814		.byte	3
00003c8c ab01             6815		.byte	171,1
00003c8e 33               6816		.byte	51
00003c8f 04               6817		.byte	4
00003c90 03               6818		.byte	3

                                   Fri Apr 10 08:32:08 2020           Page 123
                                   Fri Apr 10 08:32:08 2020   gh_00002441.si
00003c91 ac01             6819		.byte	172,1
00003c93 34               6820		.byte	52
00003c94 01               6821		.byte	1
00003c95 f501             6822		.byte	245,1
00003c97 6b46626c50726573 6823		.strz	"kFblPresencePatternSize 4u"
00003c9f 656e636550617474
00003ca7 65726e53697a6520
00003caf 347500          
00003cb2 04               6824		.byte	4
00003cb3 03               6825		.byte	3
00003cb4 b201             6826		.byte	178,1
00003cb6 35               6827		.byte	53
00003cb7 01               6828		.byte	1
00003cb8 47               6829		.byte	71
00003cb9 6b46626c4d61696e 6830		.strz	"kFblMainNumberOfStates 7u"
00003cc1 4e756d6265724f66
00003cc9 5374617465732037
00003cd1 7500            
00003cd3 01               6831		.byte	1
00003cd4 8701             6832		.byte	135,1
00003cd6 6b46626c4e6f4f66 6833		.strz	"kFblNoOfMagicBytes 8u"
00003cde 4d61676963427974
00003ce6 657320387500    
00003cec 01               6834		.byte	1
00003ced e501             6835		.byte	229,1
00003cef 46424c4845414445 6836		.strz	"FBLHEADER_START_SEC_CONST "
00003cf7 525f53544152545f
00003cff 5345435f434f4e53
00003d07 542000          
00003d0a 03               6837		.byte	3
00003d0b e601             6838		.byte	230,1
00003d0d 18               6839		.byte	24
00003d0e 01               6840		.byte	1
00003d0f 2b               6841		.byte	43
00003d10 46424c5f4d454d4d 6842		.strz	"FBL_MEMMAP_ERROR "
00003d18 41505f4552524f52
00003d20 2000            
00003d22 04               6843		.byte	4
00003d23 01               6844		.byte	1
00003d24 e801             6845		.byte	232,1
00003d26 46424c4845414445 6846		.strz	"FBLHEADER_STOP_SEC_CONST "
00003d2e 525f53544f505f53
00003d36 45435f434f4e5354
00003d3e 2000            
00003d40 03               6847		.byte	3
00003d41 e901             6848		.byte	233,1
00003d43 18               6849		.byte	24
00003d44 01               6850		.byte	1
00003d45 2b               6851		.byte	43
00003d46 46424c5f4d454d4d 6852		.strz	"FBL_MEMMAP_ERROR "
00003d4e 41505f4552524f52
00003d56 2000            
00003d58 04               6853		.byte	4
00003d59 01               6854		.byte	1
00003d5a ec01             6855		.byte	236,1
00003d5c 46424c5f4d41494e 6856		.strz	"FBL_MAIN_MAGICFLAG_START_SEC_VAR "
00003d64 5f4d41474943464c
00003d6c 41475f5354415254
00003d74 5f5345435f564152
00003d7c 2000            
00003d7e 03               6857		.byte	3
00003d7f ed01             6858		.byte	237,1
00003d81 18               6859		.byte	24
00003d82 01               6860		.byte	1
00003d83 2b               6861		.byte	43
00003d84 46424c5f4d454d4d 6862		.strz	"FBL_MEMMAP_ERROR "
00003d8c 41505f4552524f52
00003d94 2000            
00003d96 04               6863		.byte	4
00003d97 01               6864		.byte	1
00003d98 f301             6865		.byte	243,1
00003d9a 46424c5f4d41494e 6866		.strz	"FBL_MAIN_MAGICFLAG_STOP_SEC_VAR "
00003da2 5f4d41474943464c
00003daa 41475f53544f505f
00003db2 5345435f56415220
00003dba 00              
00003dbb 03               6867		.byte	3
00003dbc f401             6868		.byte	244,1
00003dbe 18               6869		.byte	24
00003dbf 01               6870		.byte	1
00003dc0 2b               6871		.byte	43
00003dc1 46424c5f4d454d4d 6872		.strz	"FBL_MEMMAP_ERROR "
00003dc9 41505f4552524f52
00003dd1 2000            
00003dd3 04               6873		.byte	4
00003dd4 01               6874		.byte	1

                                   Fri Apr 10 08:32:08 2020           Page 124
                                   Fri Apr 10 08:32:08 2020   gh_00002441.si
00003dd5 fc01             6875		.byte	252,1
00003dd7 46424c5f4d41494e 6876		.strz	"FBL_MAIN_FBLSTART_START_SEC_CODE "
00003ddf 5f46424c53544152
00003de7 545f53544152545f
00003def 5345435f434f4445
00003df7 2000            
00003df9 03               6877		.byte	3
00003dfa fd01             6878		.byte	253,1
00003dfc 18               6879		.byte	24
00003dfd 01               6880		.byte	1
00003dfe 2b               6881		.byte	43
00003dff 46424c5f4d454d4d 6882		.strz	"FBL_MEMMAP_ERROR "
00003e07 41505f4552524f52
00003e0f 2000            
00003e11 04               6883		.byte	4
00003e12 01               6884		.byte	1
00003e13 8302             6885		.byte	131,2
00003e15 46424c5f4d41494e 6886		.strz	"FBL_MAIN_FBLSTART_STOP_SEC_CODE "
00003e1d 5f46424c53544152
00003e25 545f53544f505f53
00003e2d 45435f434f444520
00003e35 00              
00003e36 03               6887		.byte	3
00003e37 8402             6888		.byte	132,2
00003e39 18               6889		.byte	24
00003e3a 01               6890		.byte	1
00003e3b 2b               6891		.byte	43
00003e3c 46424c5f4d454d4d 6892		.strz	"FBL_MEMMAP_ERROR "
00003e44 41505f4552524f52
00003e4c 2000            
00003e4e 04               6893		.byte	4
00003e4f 04               6894		.byte	4
00003e50 04               6895		.byte	4
00003e51 01               6896		.byte	1
00003e52 77               6897		.byte	119
00003e53 464c4153485f5345 6898		.strz	"FLASH_SETUP_6 "
00003e5b 5455505f362000  
00003e62 01               6899		.byte	1
00003e63 a101             6900		.byte	161,1
00003e65 46424c5f464c4153 6901		.strz	"FBL_FLASH_ENABLE_ECC_SAFE_READ "
00003e6d 485f454e41424c45
00003e75 5f4543435f534146
00003e7d 455f524541442000
00003e85 01               6902		.byte	1
00003e86 a501             6903		.byte	165,1
00003e88 46424c5f45444d41 6904		.strz	"FBL_EDMA_CSR_START 0x0001u"
00003e90 5f4353525f535441
00003e98 5254203078303030
00003ea0 317500          
00003ea3 01               6905		.byte	1
00003ea4 a601             6906		.byte	166,1
00003ea6 46424c5f45444d41 6907		.strz	"FBL_EDMA_CSR_ACTIVE 0x0040u"
00003eae 5f4353525f414354
00003eb6 4956452030783030
00003ebe 34307500        
00003ec2 01               6908		.byte	1
00003ec3 a701             6909		.byte	167,1
00003ec5 46424c5f45444d41 6910		.strz	"FBL_EDMA_CSR_DONE 0x0080u"
00003ecd 5f4353525f444f4e
00003ed5 4520307830303830
00003edd 7500            
00003edf 01               6911		.byte	1
00003ee0 aa01             6912		.byte	170,1
00003ee2 464c4153485f444d 6913		.strz	"FLASH_DMA_CHANNEL 0u"
00003eea 415f4348414e4e45
00003ef2 4c20307500      
00003ef7 01               6914		.byte	1
00003ef8 b801             6915		.byte	184,1
00003efa 464c4153485f5245 6916		.strz	"FLASH_REG(a,b) *(volatile unsigned long *)((a) + (b))"
00003f02 4728612c6229202a
00003f0a 28766f6c6174696c
00003f12 6520756e7369676e
00003f1a 6564206c6f6e6720
00003f22 2a2928286129202b
00003f2a 202862292900    
00003f30 01               6917		.byte	1
00003f31 bb01             6918		.byte	187,1
00003f33 41525241595f5349 6919		.strz	"ARRAY_SIZE(a) (sizeof(a)/sizeof((a)[0]))"
00003f3b 5a45286129202873
00003f43 697a656f66286129
00003f4b 2f73697a656f6628
00003f53 2861295b305d2929
00003f5b 00              
00003f5c 01               6920		.byte	1
00003f5d be01             6921		.byte	190,1
00003f5f 6b466c6173685365 6922		.strz	"kFlashSelectLowMid 0u"
00003f67 6c6563744c6f774d
00003f6f 696420307500    
00003f75 01               6923		.byte	1
00003f76 bf01             6924		.byte	191,1
00003f78 6b466c6173685365 6925		.strz	"kFlashSelectHigh 1u"
00003f80 6c65637448696768
00003f88 20317500        
00003f8c 01               6926		.byte	1
00003f8d c001             6927		.byte	192,1
00003f8f 6b466c6173685365 6928		.strz	"kFlashSelectBig_0 2u"
00003f97 6c6563744269675f
00003f9f 3020327500      
00003fa4 01               6929		.byte	1
00003fa5 c101             6930		.byte	193,1

                                   Fri Apr 10 08:32:08 2020           Page 125
                                   Fri Apr 10 08:32:08 2020   gh_00002441.si
00003fa7 6b466c6173685365 6931		.strz	"kFlashSelectBig_1 3u"
00003faf 6c6563744269675f
00003fb7 3120337500      
00003fbc 01               6932		.byte	1
00003fbd c201             6933		.byte	194,1
00003fbf 6b466c6173685365 6934		.strz	"kFlashSelectCount 4u"
00003fc7 6c656374436f756e
00003fcf 7420347500      
00003fd4 01               6935		.byte	1
00003fd5 c401             6936		.byte	196,1
00003fd7 6b466c617368416c 6937		.strz	"kFlashAlignmentError 0x00ul"
00003fdf 69676e6d656e7445
00003fe7 72726f7220307830
00003fef 30756c00        
00003ff3 01               6938		.byte	1
00003ff4 c501             6939		.byte	197,1
00003ff6 6b466c6173684572 6940		.strz	"kFlashEraseAddressAligned 0x01ul"
00003ffe 6173654164647265
00004006 7373416c69676e65
0000400e 642030783031756c
00004016 00              
00004017 01               6941		.byte	1
00004018 c601             6942		.byte	198,1
0000401a 6b466c6173684572 6943		.strz	"kFlashEraseLengthAligned 0x02ul"
00004022 6173654c656e6774
0000402a 68416c69676e6564
00004032 2030783032756c00
0000403a 01               6944		.byte	1
0000403b c701             6945		.byte	199,1
0000403d 6b466c6173685772 6946		.strz	"kFlashWriteAddressAligned 0x04ul"
00004045 6974654164647265
0000404d 7373416c69676e65
00004055 642030783034756c
0000405d 00              
0000405e 01               6947		.byte	1
0000405f c801             6948		.byte	200,1
00004061 6b466c6173685772 6949		.strz	"kFlashWriteLengthAligned 0x08ul"
00004069 6974654c656e6774
00004071 68416c69676e6564
00004079 2030783038756c00
00004081 01               6950		.byte	1
00004082 ca01             6951		.byte	202,1
00004084 6b466c6173684368 6952		.strz	"kFlashCheckAddress 0u"
0000408c 65636b4164647265
00004094 737320307500    
0000409a 01               6953		.byte	1
0000409b cb01             6954		.byte	203,1
0000409d 6b466c6173684368 6955		.strz	"kFlashCheckLength 1u"
000040a5 65636b4c656e6774
000040ad 6820317500      
000040b2 01               6956		.byte	1
000040b3 cc01             6957		.byte	204,1
000040b5 6b466c6173685374 6958		.strz	"kFlashStopCheck 2u"
000040bd 6f70436865636b20
000040c5 327500          
000040c8 01               6959		.byte	1
000040c9 cf01             6960		.byte	207,1
000040cb 6b4e724f66526368 6961		.strz	"kNrOfRchwValues 2u"
000040d3 7756616c75657320
000040db 327500          
000040de 01               6962		.byte	1
000040df d401             6963		.byte	212,1
000040e1 6b46626c53696e67 6964		.strz	"kFblSingleFlashModule 0u"
000040e9 6c65466c6173684d
000040f1 6f64756c65203075
000040f9 00              
000040fa 01               6965		.byte	1
000040fb fa01             6966		.byte	250,1
000040fd 46424c464c494f5f 6967		.strz	"FBLFLIO_FLASHCODE_START_SEC_VAR "
00004105 464c415348434f44
0000410d 455f53544152545f
00004115 5345435f56415220
0000411d 00              
0000411e 03               6968		.byte	3
0000411f fb01             6969		.byte	251,1
00004121 18               6970		.byte	24
00004122 01               6971		.byte	1
00004123 2b               6972		.byte	43
00004124 46424c5f4d454d4d 6973		.strz	"FBL_MEMMAP_ERROR "
0000412c 41505f4552524f52
00004134 2000            
00004136 04               6974		.byte	4
00004137 01               6975		.byte	1
00004138 fd01             6976		.byte	253,1
0000413a 46424c464c494f5f 6977		.strz	"FBLFLIO_FLASHCODE_STOP_SEC_VAR "
00004142 464c415348434f44
0000414a 455f53544f505f53
00004152 45435f5641522000
0000415a 03               6978		.byte	3
0000415b fe01             6979		.byte	254,1
0000415d 18               6980		.byte	24
0000415e 01               6981		.byte	1
0000415f 2b               6982		.byte	43
00004160 46424c5f4d454d4d 6983		.strz	"FBL_MEMMAP_ERROR "
00004168 41505f4552524f52
00004170 2000            
00004172 04               6984		.byte	4
00004173 01               6985		.byte	1
00004174 9c04             6986		.byte	156,4

                                   Fri Apr 10 08:32:08 2020           Page 126
                                   Fri Apr 10 08:32:08 2020   gh_00002441.si
00004176 464c4153485f5553 6987		.strz	"FLASH_USER_PROTECTION_6 { 0x80010000ul, 0x00000000ul, 0x00000000ul, 0x00000000ul }"
0000417e 45525f50524f5445
00004186 4354494f4e5f3620
0000418e 7b20307838303031
00004196 30303030756c2c20
0000419e 3078303030303030
000041a6 3030756c2c203078
000041ae 3030303030303030
000041b6 756c2c2030783030
000041be 303030303030756c
000041c6 207d00          
000041c9 04               6988		.byte	4
000041ca 00               6989		.byte	0
                          6990		.section	.debug_abbrev
00000110 00               6991		.byte	0
                          6992		.section	.debug_info
                          6993	.Ldw_end:
