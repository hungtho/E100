
                                   Fri Apr 10 08:32:04 2020           Page 1
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
Command Line:   C:\ghs\comp_201754\asppc.exe -noundefined
                -stderr=err/fbl_diag_core.err -elf -b1 -I../../../bsw/_common
                -I../../../bsw/eep -I../../../bsw/fbl -I../../../bsw/flash
                -I../../../bsw/flash_xd1 -I../../../bsw/secmod
                -I../../../bsw/wrapnv -Ic:/ghs/comp_201754/ansi
                -Ic:/ghs/comp_201754/include/ppc -Ic:/ghs/comp_201754/src/libsys
                -Igendata -Iinclude -IC:\ghs\comp_201754\lib\ppc5514
                -cpu=ppc560xp
                -patch_dbo=C:\Vector\CBD1800772_D00_Mpc57xx\Demo\DemoFbl\Appl\obj\fbl_diag_core.dbo
                -source=fbl_diag_core.c -o obj\gh_00007d41.o
                -list=lst/fbl_diag_core.lst
                C:\Users\owner\AppData\Local\Temp\gh_00007d41.si
Source File:    C:\Users\owner\AppData\Local\Temp\gh_00007d41.si
Directory:      C:\Vector\CBD1800772_D00_Mpc57xx\Demo\DemoFbl\Appl
Host OS:        Windows
AS: Copyright (C) 1983-2017 Green Hills Software.  All Rights Reserved.
Release: Compiler v2017.5.4
Build Directory: [Directory] COMP-VAL-WIN50:c:/autoval2/v2017.5-2017-10-03/win32-comp-ecom
Revision: [VCInfo] http://toolsvc/branches/release-branch-2017-5-comp/src@603870 (built by auto-compiler)
Revision Date: Wed Oct 04 11:30:08 2017

Release Date: Wed Oct 04 09:00:05 2017

                             1	#Driver Command: ccppc -DBRS_DERIVATIVE_SPC570S50 -DBRS_OSC_CLK=40
                             2	#		-DBRS_TIMEBASE_CLOCK=80 -DBRS_OS_USECASE_BRS
                             3	#		-DBRS_EVA_BOARD_DEFAULT -DBRS_PLATFORM_MPC57XX -DBRS_COMP_GHS
                             4	#		-DBRSHW_INSTRUCTION_SET_VLE -DBRS_CPU_STARTUP_ID=0
                             5	#		-object_dir=obj -list=lst/fbl_diag_core.lst
                             6	#		-stderr=err/fbl_diag_core.err -c -vle
                             7	#		-DC_ENABLE_INSTRUCTION_SET_VLE -D__vle --prototype_warnings
                             8	#		-Odebug -Osize -Ospace -G -dual_debug -nofloatio -cpu=ppc560xp
                             9	#		-noobj -DRAM_48K -inline_prologue -pragma_asm_inline -noSPE
                            10	#		--no_exceptions --no_commons -nokeeptempfiles -pnone
                            11	#		--incorrect_pragma_warnings --slash_comment --long_long
                            12	#		-preprocess_assembly_files -passsource -I../../../bsw/_common
                            13	#		-I../../../bsw/eep -I../../../bsw/fbl -I../../../bsw/flash
                            14	#		-I../../../bsw/flash_xd1 -I../../../bsw/secmod
                            15	#		-I../../../bsw/wrapnv -Ic:/ghs/comp_201754/ansi
                            16	#		-Ic:/ghs/comp_201754/include/ppc -Ic:/ghs/comp_201754/src/libsys
                            17	#		-Igendata -Iinclude ../../../BSW/Fbl/fbl_diag_core.c
                            18	#Source File:   ../../../BSW/Fbl/fbl_diag_core.c
                            19	#Directory:     C:\Vector\CBD1800772_D00_Mpc57xx\Demo\DemoFbl\Appl
                            20	#Compile Date:  Fri Apr 10 08:32:04 2020
                            21	#Host OS:       Win32
                            22	#Version:       C-POWERPC 2017.5.4 RELEASE VERSION
                            23	#Release:       Compiler v2017.5.4
                            24	#Revision Date: Wed Oct 04 11:39:37 2017
                            25	#Release Date:  Wed Oct 04 09:00:05 2017
                            26	# ecom  -g -w -OMS
                            27	
                            28	#1: /***********************************************************************************************************************
                            29	#2:  *  FILE DESCRIPTION
                            30	#3:  *  ------------------------------------------------------------------------------------------------------------------*/
                            31	#4: /** \file
                            32	#5:  *  \brief         Diagnostic services supported in boot mode
                            33	#6:  *                 Declaration of functions, variables, and constants
                            34	#7:  *
                            35	#8:  *  --------------------------------------------------------------------------------------------------------------------
                            36	#9:  *  COPYRIGHT
                            37	#10:  *  --------------------------------------------------------------------------------------------------------------------
                            38	#11:  *  \par Copyright
                            39	#12:  *  \verbatim
                            40	#13:  *  Copyright (c) 2018 by Vector Informatik GmbH.                                                  All rights reserved.
                            41	#14:  *

                                   Fri Apr 10 08:32:04 2020           Page 2
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
                            42	#15:  *                This software is copyright protected and proprietary to Vector Informatik GmbH.
                            43	#16:  *                Vector Informatik GmbH grants to you only those rights as set out in the license conditions.
                            44	#17:  *                All other rights remain with Vector Informatik GmbH.
                            45	#18:  *  \endverbatim
                            46	#19:  */
                            47	#20: /**********************************************************************************************************************/
                            48	#22: /***********************************************************************************************************************
                            49	#23:  *  AUTHOR IDENTITY
                            50	#24:  *  --------------------------------------------------------------------------------------------------------------------
                            51	#25:  *  Name                          Initials      Company
                            52	#26:  *  --------------------------------------------------------------------------------------------------------------------
                            53	#27:  *  Achim Strobelt                Ach           Vector Informatik GmbH
                            54	#28:  *  Marco Riedl                   Rie           Vector Informatik GmbH
                            55	#29:  *  Sebastian Loos                Shs           Vector Informatik GmbH
                            56	#30:  *  Andreas Wenckebach            AWh           Vector Informatik GmbH
                            57	#31:  *  Johannes Krimmel              KJs           Vector Informatik GmbH
                            58	#32:  *  --------------------------------------------------------------------------------------------------------------------
                            59	#33:  *  REVISION HISTORY
                            60	#34:  *  --------------------------------------------------------------------------------------------------------------------
                            61	#35:  *  Version    Date        Author  Change Id        Description
                            62	#36:  *  --------------------------------------------------------------------------------------------------------------------
                            63	#37:  *  02.00.00   2015-03-02  Rie     ESCAN00078948    General rework
                            64	#38:  *                         Ach     ESCAN00079649    Move OEM de-init call to a place before actual deinitialization
                            65	#39:  *  02.01.00   2015-06-03  Ach     ESCAN00083232    Use gap fill feature from FblLib_Mem
                            66	#40:  *                                 ESCAN00083244    FblMemSegmentNrGet() local variables declared but not used
                            67	#41:  *                                 ESCAN00082920    No changes
                            68	#42:  *  02.02.00   2015-06-22  Ach     ESCAN00083496    Renamed block number get function encapsulation
                            69	#43:  *  02.03.00   2015-07-02  Ach     ESCAN00083675    Suppress NRCs 7E and 7F for 14229:2013 configurations
                            70	#44:  *  02.03.01   2015-08-13  Ach     ESCAN00084514    No changes
                            71	#45:  *  02.04.00   2015-11-10  Ach     ESCAN00086228    CheckSubparameter() sets incorrect error bit
                            72	#46:  *                                 ESCAN00086236    Added configuration option for security access delay
                            73	#47:  *                                                  flag initialization
                            74	#48:  *  02.05.00   2016-02-26  Ach     ESCAN00086880    Added task lock macros
                            75	#49:  *                                 ESCAN00088283    Added new state "Response pending allowed"
                            76	#50:  *                                 ESCAN00088286    Added configuration options for startup response contents
                            77	#51:  *                                 ESCAN00088288    Support non-kernelbuilder main module
                            78	#52:  *  02.05.01   2016-02-29  Ach     ESCAN00088609    GetMainStartMessageReceived() not defined
                            79	#53:  *  02.06.00   2016-05-10  Rie     ESCAN00089943    Added additional RoutineControlTypes, moved MISRA justifications to header
                            80	#54:  *  02.06.01   2016-05-20  Rie     ESCAN00090104    Fixed function call to FblDiagOemPrepareSdsResponse
                            81	#55:  *  02.06.02   2016-06-07  Shs     ESCAN00090324    Initial Response Pending on 0x36 is sent out late.
                            82	#56:  *  02.07.00   2016-07-20  Ach     ESCAN00091003    Allow usage of FblGetBlockNrFromAddress() and FblGetBlockNrFromIndex()
                            83	#57:  *                                 ESCAN00091083    Physical tester present requests bypass default service handling
                            84	#58:  *  02.08.00   2016-08-22  Ach     ESCAN00091540    Support post-handler calls for response after reset responses
                            85	#59:  *  02.09.00   2016-12-02  AWh     ESCAN00093099    Add Misra justifications, rename "buffer" to "funcBuffer"
                            86	#60:  *                         Ach     ESCAN00093098    Extend support of non diagnostic control messages to go to Bootloader
                            87	#61:  *  02.10.00   2017-04-22  KJs     ESCAN00094615    Fixed typos
                            88	#62:  *                         Ach     ESCAN00094863    Added configuration option to turn off security acces delay flag write
                            89	#63:  *  02.10.01   2017-07-03  Rie     ESCAN00095702    Encapsulate FblMemResumeIndication
                            90	#64:  *  02.10.02   2018-03-14  Ach     ESCAN00097594    Post handler is not called in case an NRC is detected early
                            91	#65:  **********************************************************************************************************************/
                            92	#67: /***********************************************************************************************************************
                            93	#68:  *  INCLUDES
                            94	#69:  **********************************************************************************************************************/
                            95	#70: /* Common Bootloader includes */
                            96	#71: #include "fbl_inc.h"
                            97	#72: #include "fbl_diag_core.h"

                                   Fri Apr 10 08:32:04 2020           Page 3
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
                            98	#74: /***********************************************************************************************************************
                            99	#75:  *  VERSION
                           100	#76:  **********************************************************************************************************************/
                           101	#77: /* Diagnostic core module version check */
                           102	#78: #if ((FBLDIAG_14229_COREINT_VERSION != 0x0210u) || \
                           103	#79:      (FBLDIAG_14229_COREINT_RELEASE_VERSION != 0x02u))
                           104	#80: # error "Error in fbl_diag_core.c: Source and header file are inconsistent!"
                           105	#81: #endif
                           106	#82: #if (( FBLDIAG_14229_COREINT_VERSION != FBLDIAG_14229_CORE_VERSION ) || \
                           107	#83:      ( FBLDIAG_14229_COREINT_RELEASE_VERSION != FBLDIAG_14229_CORE_RELEASE_VERSION ))
                           108	#84: # error "Error in fbl_diag_core.h: Header versions are inconsistent."
                           109	#85: #endif
                           110	#86: #if ((FBLDIAG_14229_CORE_VERSION != _FBLDIAG_14229_CORE_VERSION) || \
                           111	#87:      (FBLDIAG_14229_CORE_RELEASE_VERSION != _FBLDIAG_14229_CORE_RELEASE_VERSION))
                           112	#88: # error "Error in fbl_diag_core.c: Source and v_ver.h file are inconsistent!"
                           113	#89: #endif
                           114	#91: /* Interface version compatibility check */
                           115	#92: #if defined( FBL_DIAGCORE_API_REFERENCE_VERSION_MAJOR ) && \
                           116	#93:     defined( FBL_DIAGCORE_API_REFERENCE_VERSION_MINOR )
                           117	#94: #else
                           118	#95: #  error "Error in fbl_diag_core.c: Interface version requirements not defined!"
                           119	#96: #endif
                           120	#98: #if ( FBL_DIAGCORE_API_REFERENCE_VERSION_MAJOR != FBL_DIAGCORE_API_VERSION_MAJOR) || \
                           121	#99:     ( FBL_DIAGCORE_API_REFERENCE_VERSION_MINOR > FBL_DIAGCORE_API_VERSION_MINOR)
                           122	#100: # error "Error in fbl_diag_core.c: Interface version compatibility check failed!"
                           123	#101: #endif
                           124	#103: /***********************************************************************************************************************
                           125	#104:  *  DEFINES
                           126	#105:  **********************************************************************************************************************/
                           127	#107: /* Diagnostic states configuration checks */
                           128	#108: #if( kDiagStateIdxSessionDefault != 0u )  || \
                           129	#109:    ( kDiagStateIdxSessionExtended != 1u ) || \
                           130	#110:    ( kDiagStateIdxSessionProgramming != 2u )
                           131	#111: # error "Session states must not be changed to different values."
                           132	#112: #endif
                           133	#114: /** Bit mask to check if response is already configured */
                           134	#115: #define kDiagResponseActive               ( kDiagPutNoResponse  | kDiagPutPosResponse | kDiagPutNegResponse )
                           135	#117: #if defined( FBL_DIAG_ENABLE_OEM_SESSIONCHECK_NRC )
                           136	#118: #else
                           137	#119: # define DiagNRCServiceCheckNotSucceeded() DiagNRCServiceNotSupportedInActiveSession() /**< Define configurable session check NRC */
                           138	#120: #endif
                           139	#122: #if !defined( FBL_DIAG_ENABLE_SPS_EXTENDED_SESSION ) && \
                           140	#123:     !defined( FBL_DIAG_DISABLE_SPS_EXTENDED_SESSION )
                           141	#124: # define FBL_DIAG_ENABLE_SPS_EXTENDED_SESSION
                           142	#125: #endif
                           143	#126: #if !defined( kDiagRqlSpsFromAppl )
                           144	#127: # define kDiagRqlSpsFromAppl kDiagRqlDiagnosticSessionControl
                           145	#128: #endif
                           146	#130: /* Specific service responses */
                           147	#131: /* RoutineControl status for eraseMemory */
                           148	#132: #if !defined( kDiagEraseSucceeded )
                           149	#133: # define kDiagEraseSucceeded                                0x00u                /**< Erase memory was started and succeeded */
                           150	#134: #endif /* kDiagEraseSucceeded */
                           151	#135: #if !defined( kDiagEraseFailed )
                           152	#136: # define kDiagEraseFailed                                   0x01u                /**< Failure occurred after routine was started */
                           153	#137: #endif /* kDiagEraseFailed */

                                   Fri Apr 10 08:32:04 2020           Page 4
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
                           154	#139: /* Signature handling */
                           155	#140: #if !defined(kSecSigSize)
                           156	#141: # define kSecSigSize 0
                           157	#142: #endif
                           158	#144: /* Gap fill */
                           159	#145: /* Buffer size for gap fill function */
                           160	#146: #if ( FBL_MAX_SEGMENT_SIZE > 64u )
                           161	#147: # define FILL_BUFFER_SIZE FBL_MAX_SEGMENT_SIZE
                           162	#148: #else
                           163	#149: # define FILL_BUFFER_SIZE 64u
                           164	#150: #endif
                           165	#152: #if defined( FBL_DIAG_ENABLE_TASK_LOCKS )
                           166	#153: /* Flags indicate which task is currently running */
                           167	#154: # define kFblDiagStateTaskRunning      FBL_BIT0    /**< State task active */
                           168	#155: # define kFblDiagTimerTaskRunning      FBL_BIT1    /**< Timer task active */
                           169	#157: # define SetDiagStateTaskRunning()     (diagTaskState |= kFblDiagStateTaskRunning)                                /**< Set running state of state task */
                           170	#158: # define ClrDiagStateTaskRunning()     (diagTaskState &= FblInvert8Bit(kFblDiagStateTaskRunning))                 /**< Clear running state of state task */
                           171	#159: # define GetDiagStateTaskRunning()     ((diagTaskState & kFblDiagStateTaskRunning) == kFblDiagStateTaskRunning)   /**< Return running state of state task */
                           172	#161: # define SetDiagTimerTaskRunning()     (diagTaskState |= kFblDiagTimerTaskRunning)                                /**< Set running state of timer task */
                           173	#162: # define ClrDiagTimerTaskRunning()     (diagTaskState &= FblInvert8Bit(kFblDiagTimerTaskRunning))                 /**< Clear running state of timer task */
                           174	#163: # define GetDiagTimerTaskRunning()     ((diagTaskState & kFblDiagTimerTaskRunning) == kFblDiagTimerTaskRunning)   /**< Return running state of timer task */
                           175	#164: #endif /* FBL_DIAG_ENABLE_TASK_LOCKS */
                           176	#166: #if !defined( FBL_DEF_ENABLE_NON_KB_MAIN )
                           177	#167: # define FblMainGetStartMessageReceived() ((fblMode & FBL_START_WITH_PING) == FBL_START_WITH_PING)
                           178	#168: #endif
                           179	#170: /***********************************************************************************************************************
                           180	#171:  *  TYPEDEFS AND STRUCTURES FOR INTERNAL USE
                           181	#172:  **********************************************************************************************************************/
                           182	#174: /***********************************************************************************************************************
                           183	#175:  *  GLOBAL DATA
                           184	#176:  **********************************************************************************************************************/
                           185	#177: /** Pointer to the data transfer buffer */
                           186	#178: V_MEMRAM0 V_MEMRAM1      vuint8              V_MEMRAM2 V_MEMRAM3 * V_MEMRAM1 V_MEMRAM2 DiagBuffer;
                           187	#179: /** Memory segment handle */
                           188	#180: V_MEMRAM0 V_MEMRAM1      vsint16             V_MEMRAM2      memSegment;
                           189	#181: /** Stores number of received data */
                           190	#182: V_MEMRAM0 V_MEMRAM1_NEAR tCwDataLengthType   V_MEMRAM2_NEAR DiagDataLength;
                           191	#183: /** Timer value for TesterPresent timeout */
                           192	#184: V_MEMRAM0 V_MEMRAM1_NEAR vuint16             V_MEMRAM2_NEAR testerPresentTimeout;
                           193	#185: /** Contains the currently processed diag service ID */
                           194	#186: V_MEMRAM0 V_MEMRAM1_NEAR vuint8              V_MEMRAM2_NEAR diagServiceCurrent;
                           195	#187: /** State bitmap array */
                           196	#188: V_MEMRAM0 V_MEMRAM1_NEAR tFblStateBitmap     V_MEMRAM2_NEAR fblDiagStates[FBL_STATE_INDEX(kDiagNumberOfStates - 1u) + 1u];
                           197	#189: /** Temporary index for sub-parameter table of a diag service */
                           198	#190: V_MEMRAM0 V_MEMRAM1      vuint8              V_MEMRAM2      subParTabIdx;
                           199	#192: #if defined( FBL_ENABLE_DEBUG_STATUS )
                           200	#193: /* Variables for error status reporting */
                           201	#194: V_MEMRAM0 V_MEMRAM1      vuint16          V_MEMRAM2      errStatErrorCode;          /**< Error status */
                           202	#195: V_MEMRAM0 V_MEMRAM1      vuint16          V_MEMRAM2      errStatFblStates;          /**< FBL state flag */
                           203	#196: V_MEMRAM0 V_MEMRAM1      vuint8           V_MEMRAM2      errStatLastServiceId;      /**< Last received service identifier */
                           204	#197: V_MEMRAM0 V_MEMRAM1      vuint8           V_MEMRAM2      errStatFlashDrvVersion[3]; /**< Flash driver version information */
                           205	#198: V_MEMRAM0 V_MEMRAM1      vuint16          V_MEMRAM2      errStatFlashDrvErrorCode;  /**< Flash driver error code */
                           206	#199: V_MEMRAM0 V_MEMRAM1      tBlockDescriptor V_MEMRAM2      errStatDescriptor;         /**< Error status block descriptor */
                           207	#200: #endif
                           208	#202: /***********************************************************************************************************************
                           209	#203:  *  LOCAL DATA

                                   Fri Apr 10 08:32:04 2020           Page 5
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
                           210	#204:  **********************************************************************************************************************/
                           211	#205: V_MEMRAM0 static V_MEMRAM1 vuint8               V_MEMRAM2      diagPostParam;
                           212	#206: /** Buffer for response pending message */
                           213	#207: V_MEMRAM0 static V_MEMRAM1 vuint8               V_MEMRAM2      rcrrpBuffer[3];   /* PRQA S 3218 */ /* MD_FblDiag_3218 */
                           214	#209: /** Diagnostic response length */
                           215	#210: V_MEMRAM0 static V_MEMRAM1 tCwDataLengthType    V_MEMRAM2      diagResLen;
                           216	#211: /** Index of current service's main handler in main handler table */
                           217	#212: V_MEMRAM0 static V_MEMRAM1 tFblDiagMainHandler  V_MEMRAM2      serviceMainHandler;
                           218	#214: /** The session state flags for the current service - stored for possible use in service handlers */
                           219	#215: V_MEMRAM0 static V_MEMRAM1 vuint8               V_MEMRAM2      currentServiceSessionSupport;
                           220	#217: #if defined( FBL_DIAG_ENABLE_OEM_SEGMENTNRGET )
                           221	#218: #else
                           222	#219: /* FblMemSegmentNrGet caching */
                           223	#220: V_MEMRAM0 static V_MEMRAM1 vsint16              V_MEMRAM2      cachedSegment;
                           224	#221: V_MEMRAM0 static V_MEMRAM1 tFlashBlock          V_MEMRAM2      cachedBlock;
                           225	#222: V_MEMRAM0 static V_MEMRAM1 vsint16              V_MEMRAM2      nextValidSegment;
                           226	#223: #endif /* FBL_DIAG_ENABLE_OEM_SEGMENTNRGET || FBL_DIAG_ENABLE_OEM_READPROM */
                           227	#225: #if defined( FBL_DIAG_ENABLE_TASK_LOCKS )
                           228	#226: V_MEMRAM0 static V_MEMRAM1 vuint8               V_MEMRAM2      diagTaskState;
                           229	#227: #endif /* FBL_DIAG_ENABLE_TASK_LOCKS */
                           230	#229: /***********************************************************************************************************************
                           231	#230:  *  LOCAL DATA - visible in core and OEM layer
                           232	#231:  **********************************************************************************************************************/
                           233	#233: /** Pointer to current service's information table */
                           234	#234: V_MEMRAM0 V_MEMROM1 tServiceInfoTable    V_MEMROM2 V_MEMROM3 * V_MEMRAM1 V_MEMRAM2 serviceInfo;
                           235	#235: /** Flag indicating the state of positive response */
                           236	#236: V_MEMRAM0 V_MEMRAM1_NEAR vuint8          V_MEMRAM2_NEAR diagResponseFlag;
                           237	#237: /** Diagnostic error code */
                           238	#238: V_MEMRAM0 V_MEMRAM1 vuint8               V_MEMRAM2      diagErrorCode;
                           239	#240: #if defined( FBL_DIAG_ENABLE_CORE_SEGMENTHANDLING )
                           240	#241: /* Temporary data used during download in TransferData */
                           241	#242: /** Actual number of segments */
                           242	#243: V_MEMRAM0 V_MEMRAM1 vuint8               V_MEMRAM2      segmentCount;
                           243	#244: #endif /* FBL_DIAG_ENABLE_CORE_SEGMENTHANDLING */
                           244	#246: /** Reset timeout observation [ms] */
                           245	#247: V_MEMRAM0 V_MEMRAM1 vuint16              V_MEMRAM2      ecuResetTimeout;
                           246	#248: /* Sleep mode handling */
                           247	#249: #if defined( FBL_ENABLE_SLEEPMODE )
                           248	#250: /** Counter, determines when to sleep */
                           249	#251: V_MEMRAM0 V_MEMRAM1        vuint32              V_MEMRAM2      sleepCounter;
                           250	#252: #endif
                           251	#253: #if defined( FBL_ENABLE_SEC_ACCESS_DELAY )
                           252	#254: /** Security access delay [ms] */
                           253	#255: V_MEMRAM0 V_MEMRAM1 vuint32              V_MEMRAM2      secSecurityAccessDelay;
                           254	#256: #endif
                           255	#258: /***********************************************************************************************************************
                           256	#259:  *  EXTERNAL DATA
                           257	#260:  **********************************************************************************************************************/
                           258	#262: /***********************************************************************************************************************
                           259	#263:  *  LOCAL FUNCTION PROTOTYPES
                           260	#264:  **********************************************************************************************************************/
                           261	#266: static void       ChkSuppressPosRspMsgIndication(vuint8 *subparam);
                           262	#267: static void       FblDiagDiscardReception(void);
                           263	#268: static void       FblDiagResponseProcessor(void);
                           264	#270: static tFblResult CheckServicePreconditions(V_MEMROM1 tServiceInfoTable V_MEMROM2 V_MEMROM3 * pServiceInfo);
                           265	#271: static V_MEMROM1  tServiceInfoTable V_MEMROM2 V_MEMROM3 * FindServiceInfo(vuint8 serviceId);

                                   Fri Apr 10 08:32:04 2020           Page 6
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
                           266	#273: static vuint16 CheckSubparameter(V_MEMROM1 vuint8 V_MEMROM2 V_MEMROM3 * subFctParamIdTable, vsintx paramId);
                           267	#274: static vuint16 CheckSubServiceTable(V_MEMROM1 tSubFctInfoTable V_MEMROM2 V_MEMROM3 * subFctInfo, vsintx infoTableLen, vsintx paramIdTableLen);
                           268	#275: static vuint16 CheckServiceTable(V_MEMROM1 tServiceInfoTable V_MEMROM2 V_MEMROM3 * pServiceInfo);
                           269	#277: static void FblDiagDeinit(void);
                           270	#279: /* Start codeseg to be executed in RAM */
                           271	#280: #define FBLDIAG_RAMCODE_START_SEC_CODE
                           272	#281: #include "MemMap.h"  /* PRQA S 5087 */ /* MD_MSR_19.1 */
                           273	#282: static void FblDiagResetServiceFlags(void);
                           274	#283: static void FblDiagConfirmation(void);
                           275	#284: /* End section to execute code from RAM */
                           276	#285: #define FBLDIAG_RAMCODE_STOP_SEC_CODE
                           277	#286: #include "MemMap.h"  /* PRQA S 5087 */ /* MD_MSR_19.1 */
                           278	#288: /***********************************************************************************************************************
                           279	#289:  *  ROUTINES TO MANAGE DIAGNOSTIC SERVICES
                           280	#290:  **********************************************************************************************************************/
                           281	#292: /***********************************************************************************************************************
                           282	#293:  *  Service support functions
                           283	#294:  **********************************************************************************************************************/
                           284	#296: #if defined( FBL_DIAG_ENABLE_OEM_READPROM )
                           285	#297: #else
                           286	#298: /***********************************************************************************************************************
                           287	#299:  *  FblReadProm
                           288	#300:  **********************************************************************************************************************/
                           289	#301: /*! \brief       Read from ROM memory.
                           290	#302:  *  \details     Reads data from ROM memory using the read function supplied with the flash driver.
                           291	#303:  *  \param[in]   address Memory address to read out (logical address).
                           292	#304:  *  \param[out]  buffer Target buffer.
                           293	#305:  *  \param[in]   length Number of bytes to be read.
                           294	#306:  *  \return      Number of actually copied bytes.
                           295	#307:  **********************************************************************************************************************/
                           296	#308: tFblLength FblReadProm(tFblAddress address, vuint8 *buffer, tFblLength length)
                           297	#309: {
                           298	#310:    tFblLength actualReadCount;    /* Actual read bytes */
                           299	#311:    tFblLength currentReadCount;
                           300	#312:    vsint16    nextMemSegment;
                           301	#314:    /* Initialize variables */
                           302	#315:    actualReadCount = 0u;
                           303	#317:    (void)FblRealTimeSupport();
                           304	#319:    /* Find start segment */
                           305	#320:    memSegment = FblMemSegmentNrGet(address);
                           306	#322:    if (memSegment < 0)
                           307	#323:    {
                           308	#324:       /* Start address does not lie within a valid memory segment
                           309	#325:        * Search first segment which overlaps with requested range
                           310	#326:        * This allows segmented reading of memory areas which include gaps
                           311	#327:        * (e.g. CRC calculation or signature verification) */
                           312	#329:       /* nextValidSegment contains first segment behind gap */
                           313	#330:       if (nextValidSegment < kNrOfFlashBlock)
                           314	#331:       {
                           315	#332:          /* Gap detection */
                           316	#333:          if (
                           317	#334:                (address < FlashBlock[nextValidSegment].begin) &&
                           318	#335:                (length > (FlashBlock[nextValidSegment].begin - address))
                           319	#336:             )
                           320	#337:          {
                           321	#338:             /* Found first segment which overlaps requested range */

                                   Fri Apr 10 08:32:04 2020           Page 7
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
                           322	#339:             memSegment = nextValidSegment;
                           323	#341:             /* Remove gap from read length */
                           324	#342:             length -= (FlashBlock[memSegment].begin - address);
                           325	#343:             /* Adapt start address to segment start */
                           326	#344:             address = FlashBlock[memSegment].begin;
                           327	#345:          }
                           328	#346:       }
                           329	#347:    }
                           330	#349:    /* Initialize next memory segment index */
                           331	#350:    nextMemSegment = memSegment;
                           332	#352:    /* Start segment found, read segment */
                           333	#353:    if (memSegment >= 0)
                           334	#354:    {
                           335	#355:       while (length > 0u)
                           336	#356:       {
                           337	#357:          /* Check if read range crosses Flash block boundary */
                           338	#358:          if ((address + (length - 1u)) > FlashBlock[memSegment].end) /* PRQA S 3689 */ /* MD_FblDiag_3689 */
                           339	#359:          {
                           340	#360:             currentReadCount = (FlashBlock[memSegment].end - address) + 1u;   /* PRQA S 3689 */ /* MD_FblDiag_3689 */
                           341	#362:             nextMemSegment++;
                           342	#364:             if (nextMemSegment < kNrOfFlashBlock)
                           343	#365:             {
                           344	#366:                length = ((FlashBlock[nextMemSegment].begin - address) < length)
                           345	#367:                   ? (length - (FlashBlock[nextMemSegment].begin - address)) : 0u;
                           346	#368:             }
                           347	#369:             else
                           348	#370:             /* Flash block index overflow, exit loop */
                           349	#371:             {
                           350	#372:                length = 0u;
                           351	#373:             }
                           352	#374:          }
                           353	#375:          else
                           354	#376:          {
                           355	#377:             currentReadCount = length;
                           356	#378:             length = 0u;
                           357	#379:          }
                           358	#381:          if (MemDriver_RReadSync(buffer, currentReadCount, address) == IO_E_OK)
                           359	#382:          {
                           360	#383:             memSegment = nextMemSegment;
                           361	#384:             buffer = (vuint8 *)&buffer[currentReadCount];
                           362	#385:             address = FlashBlock[memSegment].begin;   /* PRQA S 3689 */ /* MD_FblDiag_3689 */
                           363	#386:             actualReadCount += currentReadCount;
                           364	#387:          }
                           365	#388:          else
                           366	#389:          {
                           367	#390:             /* In case of error quit loop */
                           368	#391:             length = 0u;
                           369	#392:          }
                           370	#394:          (void)FblRealTimeSupport();
                           371	#395:       }
                           372	#396:    }
                           373	#397:    else
                           374	#398:    {
                           375	#399:       actualReadCount = 0u;
                           376	#400:    }
                           377	#403:    return actualReadCount;

                                   Fri Apr 10 08:32:04 2020           Page 8
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
                           378	#404: }
                           379	#405: #endif /* FBL_DIAG_ENABLE_OEM_READPROM */
                           380	#407: /***********************************************************************************************************************
                           381	#408:  *  FblEcuReset
                           382	#409:  **********************************************************************************************************************/
                           383	#410: /*! \brief       Start ECU reset.
                           384	#411:  **********************************************************************************************************************/
                           385	#412: void FblDiagEcuReset(void)
                           386	#413: {
                           387	#414:    /* Disable tester present timeout monitoring */
                           388	#415:    StopTesterTimeout();
                           389	#417:    /* Do not transmit response message */
                           390	#418:    DiagSetNoResponse();
                           391	#419:    FblDiagDeinit();
                           392	#420: }
                           393	#422: /***********************************************************************************************************************
                           394	#423:  *  END OF DIAGNOSTIC SERVICE MANAGEMENT HANDLERS
                           395	#424:  **********************************************************************************************************************/
                           396	#426: /***********************************************************************************************************************
                           397	#427:  *  DIAGNOSTIC SUPPORT FUNCTIONS
                           398	#428:  **********************************************************************************************************************/
                           399	#430: /***********************************************************************************************************************
                           400	#431:  *  Global diagnostic support functions (OEM independent)
                           401	#432:  **********************************************************************************************************************/
                           402	#434: /***********************************************************************************************************************
                           403	#435:  *  FblDiagSetError
                           404	#436:  **********************************************************************************************************************/
                           405	#437: /*! \brief       Sets the corresponding error code for the currently active service
                           406	#438:  *  \param[in]   errorCode Negative response code
                           407	#439:  **********************************************************************************************************************/
                           408	#440: void FblDiagSetError( vuint8 errorCode )
                           409	#441: {
                           410	#442:    diagErrorCode = errorCode;
                           411	#444:    /* No negative response for functional requests with these error codes */
                           412	#445:    if (    (GetFunctionalRequest())
                           413	#446:         && (!GetRcrRpInProgress())
                           414	#447:         && (   (errorCode == kDiagNrcServiceNotSupported )
                           415	#448:             || (errorCode == kDiagNrcSubFunctionNotSupported )
                           416	#449:             || (errorCode == kDiagNrcRequestOutOfRange )
                           417	#450: #if defined( FBL_DIAG_ENABLE_14229_2013 )
                           418	#451:             || (errorCode == kDiagNrcSubfunctionNotSupportedInActiveSession)
                           419	#452:             || (errorCode == kDiagNrcServiceNotSupportedInActiveSession)
                           420	#453: #endif /* FBL_DIAG_ENABLE_14229_2013 */
                           421	#454:            )
                           422	#455:       )
                           423	#456:    {
                           424	#457:      DiagSetNoResponse();
                           425	#458:    }
                           426	#459:    else
                           427	#460:    {
                           428	#461:       /* Send negative response for all other cases */
                           429	#462:       diagResponseFlag |= kDiagPutNegResponse;
                           430	#463:    }
                           431	#464: }
                           432	#466: /***********************************************************************************************************************
                           433	#467:  *  FblRealTimeSupport

                                   Fri Apr 10 08:32:04 2020           Page 9
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
                           434	#468:  **********************************************************************************************************************/
                           435	#469: /*! \brief       Transmit busy messages and triggers the watchdog according to system timer.
                           436	#470:  *  \pre         Diagnosis and communication stack must be initialized, diagnostic request has to be received.
                           437	#471:  **********************************************************************************************************************/
                           438	#472: vuint8 FblRealTimeSupport( void )
                           439	#473: {
                           440	#474:    vuint8 returnCode;
                           441	#476:    returnCode = (vuint8)FblLookForWatchdog();
                           442	#477:    DiagExRCRResponsePending(kNotForceSendResponsePending);
                           443	#478:    return returnCode;
                           444	#479: }
                           445	#481: /***********************************************************************************************************************
                           446	#482:  *  DiagExRCRResponsePending
                           447	#483:  **********************************************************************************************************************/
                           448	#484: /*! \brief       Transmit a busy message if timer expires
                           449	#485:  *  \details     (forceSend == kNotForceSendResponsePending) or if kForceSendResponsePending is passed.
                           450	#486:  *  \param[in]   forceSend Determines if a message is sent independently from timer state
                           451	#487:  **********************************************************************************************************************/
                           452		.section ".vletext", "vax"
                           453		.vle
                           454		.vle
                           455	..bof.C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_diag_core...43.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl..5E8FB074..0::
                           456		.align	1
                           457	..gh.f.p.3.a.1.r.0.e.0:
                           458		.type	..gh.f.p.3.a.1.r.0.e.0,@object
                           459		.size	..gh.f.p.3.a.1.r.0.e.0,0
                           460		.global	DiagExRCRResponsePending
                           461	DiagExRCRResponsePending:
00000000 182106f0          462		e_stwu	sp, -16(sp)
00000004 1bc10908          463		e_stmw	r30, 8(sp)
00000008 0080              464		se_mflr	r0
0000000a d501              465		se_stw	r0, 20(sp)
                           466	#	    .bf
                           467	.LDW01:
                           468	#488: void DiagExRCRResponsePending( vuint8 forceSend )
                           469	#489: {
                           470	#490:    /* Only send response pending if service is in progress */
                           471	#491:    if (GetRcrRpAllowed())
0000000c 73e0e000          472		e_lis	r31, %hiadj(fblDiagStates)
00000010 1fff0000          473		e_add16i	r31, r31, %lo(fblDiagStates)
00000014 c00f              474		se_lwz	r0, 0(r31)
00000016 6780              475		se_btsti	r0, 24
00000018 e600              476		se_beq	.L2
                           477	#492:    {
                           478	#493:       /* Conditions to send an RCR-RP if P2-timer expired
                           479	#494:        * or parameter contains kForceSendResponsePending */
                           480	#495:       if ((forceSend == kForceSendResponsePending)
                           481	#line495
                           482	..lin.1e9356d..e1a80112.0_1::
                           483	.LDWlin1:
0000001a 73c0e000          484		e_lis	r30, %hiadj(P2Timer)
0000001e 1fde0000          485		e_add16i	r30, r30, %lo(P2Timer)
00000022 2a13              486		se_cmpi	r3, 1
00000024 e600              487		se_beq	.L7
00000026 2a23              488		se_cmpi	r3, 2
00000028 e200              489		se_bne	.L11

                                   Fri Apr 10 08:32:04 2020           Page 10
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
0000002a 6770              490		se_btsti	r0, 23
0000002c e600              491		se_beq	.L7
                           492	.L11:
0000002e c00f              493		se_lwz	r0, 0(r31)
00000030 4997              494		se_li	r7, 25
00000032 6770              495		se_btsti	r0, 23
00000034 700003e8          496		e_li	r0, 1000
00000038 7ce7009e          497		iseleq	r7, r7, r0
0000003c a00e              498		se_lhz	r0, 0(r30)
0000003e 0d70              499		se_cmpl	r0, r7
00000040 e000              500		se_bge	.L2
                           501	.L7:
                           502	#496:             || ((forceSend == kForceSendRpIfNotInProgress) && (!GetRcrRpInProgress()))
                           503	#497:             || (GetP2Timer() < (GetRcrRpInProgress() ? kFblDiagP2StarMinThreshold : kFblDiagP2MinThreshold)) )
                           504	#498:       {
                           505	#499:          /* Prepare parameter for the Diag-confirmation function */
                           506	#500:          diagPostParam = kDiagPostRcrRp;
                           507	#line500
                           508	..lin.1e9356d..e1a80112.0_2::
                           509	.LDWlin2:
00000042 4830              510		se_li	r0, 3
00000044 70e0e000          511		e_lis	r7, %hiadj(diagPostParam)
00000048 7060e000          512		e_lis	r3, %hiadj(rcrrpBuffer)
                           513	#502:          /* Prepare and transmit RCRRP buffer */
                           514	#503:          rcrrpBuffer[0] = kDiagRidNegativeResponse;
0000004c 34070000          515		e_stb	r0, %lo(diagPostParam)(r7)
00000050 1c630000          516		e_add16i	r3, r3, %lo(rcrrpBuffer)
00000054 4ff0              517		se_li	r0, 127
00000056 9003              518		se_stb	r0, 0(r3)
                           519	#504:          rcrrpBuffer[1] = diagServiceCurrent;
00000058 70e0e000          520		e_lis	r7, %hiadj(diagServiceCurrent)
0000005c 30070000          521		e_lbz	r0, %lo(diagServiceCurrent)(r7)
00000060 9103              522		se_stb	r0, 1(r3)
                           523	#505:          rcrrpBuffer[2] = kDiagNrcRcrResponsePending;
00000062 4f80              524		se_li	r0, 120
00000064 9203              525		se_stb	r0, 2(r3)
                           526	#506:          FblCwTransmitRP(rcrrpBuffer);
00000066 78000001          527		e_bl	FblCwTransmitRP
                           528	#508:          /* Restart P2-Timer to P2* */
                           529	#509:          SetP2Timer(kFblDiagTimeP2Star);
0000006a 700007d0          530		e_li	r0, 2000
0000006e 70e0e000          531		e_lis	r7, %hiadj(diagResponseFlag)
                           532	#511:          /* If response pending is transmitted and no response
                           533	#512:           * is set, a positive response has to be transmitted anyway. */
                           534	#513:          diagResponseFlag &= FblInvert8Bit(kDiagPutNoResponse);
00000072 b00e              535		se_sth	r0, 0(r30)
00000074 1ce70000          536		e_add16i	r7, r7, %lo(diagResponseFlag)
00000078 8007              537		se_lbz	r0, 0(r7)
0000007a 61e0              538		se_bclri	r0, 30
0000007c 9007              539		se_stb	r0, 0(r7)
                           540	#515:          SetRcrRpInProgress();
0000007e c00f              541		se_lwz	r0, 0(r31)
00000080 6570              542		se_bseti	r0, 23
00000082 d00f              543		se_stw	r0, 0(r31)
                           544	.L2:
                           545	#516:       }

                                   Fri Apr 10 08:32:04 2020           Page 11
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
                           546	#517:    }
                           547	#518: }
                           548	#	    .ef
                           549	.LDW11:
00000084 c501              550		se_lwz	r0, 20(sp)
00000086 1bc10808          551		e_lmw	r30, 8(sp)
0000008a 20f1              552		se_addi	sp, 16
0000008c 0090              553		se_mtlr	r0
0000008e 0004              554		se_blr
                           555		.global	__ghs_eofn_DiagExRCRResponsePending
                           556	__ghs_eofn_DiagExRCRResponsePending:
                           557		.type	DiagExRCRResponsePending,@function
                           558		.size	DiagExRCRResponsePending,$-DiagExRCRResponsePending
                           559		.align	1
                           560	
                           561	#function:			DiagExRCRResponsePending
                           562	#stack frame size:		16
                           563	#link area offset:		0
                           564	#local storage area offset:	8
                           565	#gpr save area offset:		8
                           566	#
                           567	
                           568	#forceSend	r3	param
                           569	
                           570		.section ".bss","awb"
                           571		.align	2
                           572		.global	serviceMainHandler..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_diag_core.
                           573	serviceMainHandler..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_diag_core.:
00000000                   574	serviceMainHandler:	.space	4
                           575		.type	serviceMainHandler..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_diag_core.,@object
                           576		.size	serviceMainHandler..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_diag_core.,4
                           577		.type	serviceMainHandler,@object
                           578		.size	serviceMainHandler,4
                           579		.global	diagResLen..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_diag_core.
                           580	diagResLen..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_diag_core.:
00000004                   581	diagResLen:	.space	2
                           582		.type	diagResLen..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_diag_core.,@object
                           583		.size	diagResLen..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_diag_core.,2
                           584		.type	diagResLen,@object
                           585		.size	diagResLen,2
                           586		.global	cachedSegment..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_diag_core.
                           587	cachedSegment..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_diag_core.:
00000006                   588	cachedSegment:	.space	2
                           589		.type	cachedSegment..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_diag_core.,@object
                           590		.size	cachedSegment..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_diag_core.,2
                           591		.type	cachedSegment,@object
                           592		.size	cachedSegment,2
                           593		.global	nextValidSegment..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_diag_core.
                           594	nextValidSegment..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_diag_core.:
00000008                   595	nextValidSegment:	.space	2
                           596		.type	nextValidSegment..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_diag_core.,@object
                           597		.size	nextValidSegment..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_diag_core.,2
                           598		.type	nextValidSegment,@object
                           599		.size	nextValidSegment,2
                           600		.global	diagPostParam..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_diag_core.
                           601	diagPostParam..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_diag_core.:

                                   Fri Apr 10 08:32:04 2020           Page 12
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
0000000a                   602	diagPostParam:	.space	1
                           603		.type	diagPostParam..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_diag_core.,@object
                           604		.size	diagPostParam..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_diag_core.,1
                           605		.type	diagPostParam,@object
                           606		.size	diagPostParam,1
                           607		.global	currentServiceSessionSupport..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_diag_core.
                           608	currentServiceSessionSupport..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_diag_core.:
0000000b                   609	currentServiceSessionSupport:	.space	1
                           610		.type	currentServiceSessionSupport..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_diag_core.,@object
                           611		.size	currentServiceSessionSupport..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_diag_core.,1
                           612		.type	currentServiceSessionSupport,@object
                           613		.size	currentServiceSessionSupport,1
                           614		.global	rcrrpBuffer..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_diag_core.
                           615	rcrrpBuffer..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_diag_core.:
0000000c                   616	rcrrpBuffer:	.space	3
                           617		.type	rcrrpBuffer..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_diag_core.,@object
                           618		.size	rcrrpBuffer..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_diag_core.,3
                           619		.type	rcrrpBuffer,@object
                           620		.size	rcrrpBuffer,3
0000000f                   621		.space	1
                           622		.global	cachedBlock..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_diag_core.
                           623	cachedBlock..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_diag_core.:
00000010                   624	cachedBlock:	.space	12
                           625		.type	cachedBlock..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_diag_core.,@object
                           626		.size	cachedBlock..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_diag_core.,12
                           627		.type	cachedBlock,@object
                           628		.size	cachedBlock,12
                           629		.data
                           630		.section ".vletext", "vax"
                           631		.vle
                           632		.vle
                           633	
                           634	
                           635		.align	1
                           636		.align	1
                           637	..gh.f.p.0.a.1.r.0.e.1:
                           638		.type	..gh.f.p.0.a.1.r.0.e.1,@object
                           639		.size	..gh.f.p.0.a.1.r.0.e.1,0
                           640		.global	FblRealTimeSupport
                           641	FblRealTimeSupport:
00000090 182106f0          642		e_stwu	sp, -16(sp)
00000094 0080              643		se_mflr	r0
00000096 d3f1              644		se_stw	r31, 12(sp)
00000098 d501              645		se_stw	r0, 20(sp)
                           646	#	    .bf
                           647	.LDW21:
                           648	#472: vuint8 FblRealTimeSupport( void )
                           649	#473: {
                           650	#474:    vuint8 returnCode;
                           651	#476:    returnCode = (vuint8)FblLookForWatchdog();
0000009a 78000001          652		e_bl	FblLookForWatchdog
                           653	#477:    DiagExRCRResponsePending(kNotForceSendResponsePending);
0000009e 013f              654		se_mr	r31, r3
000000a0 4803              655		se_li	r3, 0
000000a2 e900              656		se_bl	DiagExRCRResponsePending
                           657	#478:    return returnCode;

                                   Fri Apr 10 08:32:04 2020           Page 13
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
                           658	#line478
                           659	..lin.1e9356d..855c7429.0_3::
                           660	.LDWlin3:
000000a4 01f3              661		se_mr	r3, r31
                           662	#	    .ef
                           663	.LDW31:
000000a6 c501              664		se_lwz	r0, 20(sp)
000000a8 c3f1              665		se_lwz	r31, 12(sp)
000000aa 20f1              666		se_addi	sp, 16
000000ac 0090              667		se_mtlr	r0
000000ae 0004              668		se_blr
                           669		.global	__ghs_eofn_FblRealTimeSupport
                           670	__ghs_eofn_FblRealTimeSupport:
                           671		.type	FblRealTimeSupport,@function
                           672		.size	FblRealTimeSupport,$-FblRealTimeSupport
                           673		.align	1
                           674	
                           675	#function:			FblRealTimeSupport
                           676	#stack frame size:		16
                           677	#link area offset:		0
                           678	#local storage area offset:	12
                           679	#gpr save area offset:		12
                           680	#
                           681	
                           682		.data
                           683		.section ".vletext", "vax"
                           684		.vle
                           685		.vle
                           686	
                           687	#479: }
                           688	
                           689	#481: /***********************************************************************************************************************
                           690	#482:  *  DiagExRCRResponsePending
                           691	#483:  **********************************************************************************************************************/
                           692	#484: /*! \brief       Transmit a busy message if timer expires
                           693	#485:  *  \details     (forceSend == kNotForceSendResponsePending) or if kForceSendResponsePending is passed.
                           694	#486:  *  \param[in]   forceSend Determines if a message is sent independently from timer state
                           695	#487:  **********************************************************************************************************************/
                           696	#488: void DiagExRCRResponsePending( vuint8 forceSend )
                           697	#489: {
                           698	#490:    /* Only send response pending if service is in progress */
                           699	#491:    if (GetRcrRpAllowed())
                           700	#492:    {
                           701	#493:       /* Conditions to send an RCR-RP if P2-timer expired
                           702	#494:        * or parameter contains kForceSendResponsePending */
                           703	#495:       if ((forceSend == kForceSendResponsePending)
                           704	#496:             || ((forceSend == kForceSendRpIfNotInProgress) && (!GetRcrRpInProgress()))
                           705	#497:             || (GetP2Timer() < (GetRcrRpInProgress() ? kFblDiagP2StarMinThreshold : kFblDiagP2MinThreshold)) )
                           706	#498:       {
                           707	#499:          /* Prepare parameter for the Diag-confirmation function */
                           708	#500:          diagPostParam = kDiagPostRcrRp;
                           709	#502:          /* Prepare and transmit RCRRP buffer */
                           710	#503:          rcrrpBuffer[0] = kDiagRidNegativeResponse;
                           711	#504:          rcrrpBuffer[1] = diagServiceCurrent;
                           712	#505:          rcrrpBuffer[2] = kDiagNrcRcrResponsePending;
                           713	#506:          FblCwTransmitRP(rcrrpBuffer);

                                   Fri Apr 10 08:32:04 2020           Page 14
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
                           714	#508:          /* Restart P2-Timer to P2* */
                           715	#509:          SetP2Timer(kFblDiagTimeP2Star);
                           716	#511:          /* If response pending is transmitted and no response
                           717	#512:           * is set, a positive response has to be transmitted anyway. */
                           718	#513:          diagResponseFlag &= FblInvert8Bit(kDiagPutNoResponse);
                           719	#515:          SetRcrRpInProgress();
                           720	#516:       }
                           721	#517:    }
                           722	#518: }
                           723	#521: #if defined( FBL_DIAG_ENABLE_OEM_SEGMENTNRGET )
                           724	#522: #else
                           725	#523: /***********************************************************************************************************************
                           726	#524:  *  FblMemSegmentNrGet
                           727	#525:  **********************************************************************************************************************/
                           728	#526: /*! \brief       Get the number of the corresponding flash block for the given address
                           729	#527:  *  \return      Index of flash block; -1, if not found
                           730	#528:  *  \param[in]   address
                           731	#529:  **********************************************************************************************************************/
                           732		.align	1
                           733		.align	1
                           734	..gh.f.p.3.a.1.r.0.e.2:
                           735		.type	..gh.f.p.3.a.1.r.0.e.2,@object
                           736		.size	..gh.f.p.3.a.1.r.0.e.2,0
                           737		.global	FblMemSegmentNrGet
                           738	FblMemSegmentNrGet:
000000b0 182106e0          739		e_stwu	sp, -32(sp)
000000b4 1b410908          740		e_stmw	r26, 8(sp)
000000b8 0080              741		se_mflr	r0
000000ba d901              742		se_stw	r0, 36(sp)
000000bc 013e              743		se_mr	r30, r3
                           744	#	    .bf
                           745	.LDW41:
                           746	#530: vsint16 FblMemSegmentNrGet( tFblAddress address )
                           747	#531: {
                           748	#532:    vsint16 segment;
                           749	#534:    /* Check address against cached range */
                           750	#535:    if (   ( address >= cachedBlock.begin )
000000be 73e0e000          751		e_lis	r31, %hiadj(cachedBlock)
000000c2 1fff0000          752		e_add16i	r31, r31, %lo(cachedBlock)
000000c6 c00f              753		se_lwz	r0, 0(r31)
000000c8 7380e000          754		e_lis	r28, %hiadj(cachedSegment)
000000cc 1f9c0000          755		e_add16i	r28, r28, %lo(cachedSegment)
000000d0 0d03              756		se_cmpl	r3, r0
000000d2 e400              757		se_blt	.L165
000000d4 c10f              758		se_lwz	r0, 4(r31)
000000d6 0d03              759		se_cmpl	r3, r0
000000d8 e500              760		se_bgt	.L165
                           761	#536:        && ( address <= cachedBlock.end )
                           762	#537:       )
                           763	#538:    {
                           764	#539:       /* Range matches, finish processing and return cached segment */
                           765	#540:       segment = cachedSegment;
                           766	#line540
                           767	..lin.1e9356d..3262f58b.0_4::
                           768	.LDWlin4:
000000da 387c0000          769		e_lha	r3, 0(r28)

                                   Fri Apr 10 08:32:04 2020           Page 15
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
000000de e800              770		se_b	.L163
                           771	.L165:
                           772	#541:    }
                           773	#542:    else
                           774	#543:    {
                           775	#544:       /* Search matching flash block */
                           776	#545:       for (nextValidSegment = 0; nextValidSegment < (vsint16)kNrOfFlashBlock; nextValidSegment++)
                           777	#line545
                           778	..lin.1e9356d..3262f58b.0_5::
                           779	.LDWlin5:
000000e0 7360e000          780		e_lis	r27, %hiadj(nextValidSegment)
000000e4 1f7b0000          781		e_add16i	r27, r27, %lo(nextValidSegment)
000000e8 4800              782		se_li	r0, 0
000000ea e800              783		se_b	.L172
                           784	.L171:
                           785	#546:       {
                           786	#547:          /* Reduced number of watchdog trigger calls */
                           787	#548:          if (((vuint8)nextValidSegment & (vuint8)0x0Fu) == (vuint8)0x00u)
                           788	#line548
                           789	..lin.1e9356d..3262f58b.0_6::
                           790	.LDWlin6:
000000ec 7000c80f          791		e_and2i.	r0, 15
000000f0 e200              792		se_bne	.L173
                           793	#549:          {
                           794	#550:             (void)FblRealTimeSupport();
                           795	#line550
                           796	..lin.1e9356d..3262f58b.0_7::
                           797	.LDWlin7:
000000f2 e900              798		se_bl	FblRealTimeSupport
                           799	.L173:
                           800	#551:          }
                           801	#553:          /* Found first potential match */
                           802	#554:          if (FlashBlock[nextValidSegment].end >= address)
                           803	#line554
                           804	..lin.1e9356d..3262f58b.0_8::
                           805	.LDWlin8:
000000f4 381b0000          806		e_lha	r0, 0(r27)
000000f8 18e0a00c          807		e_mulli	r7, r0, 12
000000fc 04a7              808		se_add	r7, r26
000000fe c167              809		se_lwz	r6, 4(r7)
00000100 0de6              810		se_cmpl	r6, r30
00000102 e000              811		se_bge	.L177
                           812	#555:          {
                           813	#556:             break;
                           814	#line545
                           815	..lin.1e9356d..3262f58b.0_9::
                           816	.LDWlin9:
00000104 2000              817		se_addi	r0, 1
00000106 00f0              818		se_extsh	r0
                           819	.L172:
00000108 73a0e000          820		e_lis	r29, %hiadj(kNrOfFlashBlock)
0000010c 33bd0000          821		e_lbz	r29, %lo(kNrOfFlashBlock)(r29)
00000110 7340e000          822		e_lis	r26, %hiadj(FlashBlock)
00000114 1f5a0000          823		e_add16i	r26, r26, %lo(FlashBlock)
00000118 b00b              824		se_sth	r0, 0(r27)
0000011a 0cd0              825		se_cmp	r0, r29

                                   Fri Apr 10 08:32:04 2020           Page 16
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
0000011c e400              826		se_blt	.L171
                           827	.L179:
                           828	#590:          }
                           829	#591:       }
                           830	#592:       else
                           831	#593:       {
                           832	#594:          /* Address lies behind last block => gap detected */
                           833	#595:          segment = -1;
                           834	#line595
                           835	..lin.1e9356d..3262f58b.0_10::
                           836	.LDWlin10:
0000011e 18fda00c          837		e_mulli	r7, r29, 12
                           838	#597:          /* Cache current gap
                           839	#598:           * Gap starts after end of previous block */
                           840	#599:          cachedBlock.begin = FlashBlock[kNrOfFlashBlock - 1u].end + 1u;
00000122 04a7              841		se_add	r7, r26
00000124 5007fff8          842		e_lwz	r0, -8(r7)
00000128 2c03              843		se_bmaski	r3, 0
0000012a 2000              844		se_addi	r0, 1
0000012c d00f              845		se_stw	r0, 0(r31)
                           846	#600:          /* Gap ends at end of address space */
                           847	#601:          /* PRQA S 0277 1 */ /* MD_FblDiag_0277 */
                           848	#602:          cachedBlock.end = (tFblAddress) - 1;   /* Note: The correct conversion is guaranteed by the C standard */
0000012e 2c07              849		se_bmaski	r7, 0
00000130 e800              850		se_b	.L187
                           851	.L177:
                           852	#557:          }
                           853	#558:       }
                           854	#560:       /* Valid match found */
                           855	#561:       if (nextValidSegment < (vsint16)kNrOfFlashBlock)
                           856	#line561
                           857	..lin.1e9356d..3262f58b.0_11::
                           858	.LDWlin11:
00000132 0cd0              859		se_cmp	r0, r29
00000134 e000              860		se_bge	.L179
                           861	#562:       {
                           862	#563:          if (address >= FlashBlock[nextValidSegment].begin)
                           863	#line563
                           864	..lin.1e9356d..3262f58b.0_12::
                           865	.LDWlin12:
00000136 c077              866		se_lwz	r7, 0(r7)
00000138 0d7e              867		se_cmpl	r30, r7
0000013a e400              868		se_blt	.L181
                           869	#564:          {
                           870	#565:             /* Address lies within block => valid segment */
                           871	#566:             segment = nextValidSegment;
                           872	#line566
                           873	..lin.1e9356d..3262f58b.0_13::
                           874	.LDWlin13:
0000013c 18e0a00c          875		e_mulli	r7, r0, 12
                           876	#568:             /* Cache current match */
                           877	#569:             cachedBlock.begin = FlashBlock[segment].begin;
00000140 0103              878		se_mr	r3, r0
00000142 7c07d06e          879		lwzux	r0, r7, r26
00000146 c177              880		se_lwz	r7, 4(r7)
                           881	#570:             cachedBlock.end = FlashBlock[segment].end;

                                   Fri Apr 10 08:32:04 2020           Page 17
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
00000148 d00f              882		se_stw	r0, 0(r31)
0000014a e800              883		se_b	.L187
                           884	.L181:
                           885	#571:          }
                           886	#572:          else
                           887	#573:          {
                           888	#574:             /* Address lies in front of block => gap detected */
                           889	#575:             segment = -1;
                           890	#line575
                           891	..lin.1e9356d..3262f58b.0_14::
                           892	.LDWlin14:
0000014c 2c03              893		se_bmaski	r3, 0
                           894	#577:             /* Cache current gap */
                           895	#578:             if (nextValidSegment <= 0)
0000014e 4806              896		se_li	r6, 0
00000150 2a00              897		se_cmpi	r0, 0
00000152 e100              898		se_ble	.L186
                           899	#579:             {
                           900	#580:                /* First block, gap starts at beginning of address space */
                           901	#581:                cachedBlock.begin = 0x00u;
                           902	#582:             }
                           903	#583:             else
                           904	#584:             {
                           905	#585:                /* Gap starts after end of previous block */
                           906	#586:                cachedBlock.begin = FlashBlock[nextValidSegment - 1].end + 1;
                           907	#line586
                           908	..lin.1e9356d..3262f58b.0_15::
                           909	.LDWlin15:
00000154 18c0a00c          910		e_mulli	r6, r0, 12
00000158 04a6              911		se_add	r6, r26
0000015a 50c6fff8          912		e_lwz	r6, -8(r6)
0000015e 2006              913		se_addi	r6, 1
                           914	.L186:
                           915	#587:             }
                           916	#588:             /* Gap ends in front of current segment */
                           917	#589:             cachedBlock.end = FlashBlock[nextValidSegment].begin - 1;
00000160 2407              918		se_subi	r7, 1
00000162 d06f              919		se_stw	r6, 0(r31)
                           920	.L187:
                           921	#603:       }
                           922	#605:       /* Cache current segment for next request */
                           923	#606:       cachedSegment = segment;
00000164 b03c              924		se_sth	r3, 0(r28)
00000166 d17f              925		se_stw	r7, 4(r31)
                           926	#607:    }
                           927	#609:    return segment;
                           928	.L163:
                           929	#	    .ef
                           930	.LDW51:
00000168 c901              931		se_lwz	r0, 36(sp)
0000016a 1b410808          932		e_lmw	r26, 8(sp)
0000016e 21f1              933		se_addi	sp, 32
00000170 0090              934		se_mtlr	r0
00000172 0004              935		se_blr
                           936		.global	__ghs_eofn_FblMemSegmentNrGet
                           937	__ghs_eofn_FblMemSegmentNrGet:

                                   Fri Apr 10 08:32:04 2020           Page 18
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
                           938		.type	FblMemSegmentNrGet,@function
                           939		.size	FblMemSegmentNrGet,$-FblMemSegmentNrGet
                           940		.align	1
                           941	
                           942	#function:			FblMemSegmentNrGet
                           943	#stack frame size:		32
                           944	#link area offset:		0
                           945	#local storage area offset:	8
                           946	#gpr save area offset:		8
                           947	#
                           948	#segment	r3	local
                           949	
                           950	#address	r30	param
                           951	
                           952		.data
                           953		.section ".vletext", "vax"
                           954		.vle
                           955		.vle
                           956	
                           957	#610: }
                           958	
                           959		.align	1
                           960		.align	1
                           961	..gh.f.p.5.a.1.r.0.e.3:
                           962		.type	..gh.f.p.5.a.1.r.0.e.3,@object
                           963		.size	..gh.f.p.5.a.1.r.0.e.3,0
                           964		.global	FblReadProm
                           965	FblReadProm:
00000174 182106d0          966		e_stwu	sp, -48(sp)
00000178 0080              967		se_mflr	r0
0000017a 1ae1090c          968		e_stmw	r23, 12(sp)
0000017e dd01              969		se_stw	r0, 52(sp)
00000180 013f              970		se_mr	r31, r3
00000182 0149              971		se_mr	r25, r4
00000184 015e              972		se_mr	r30, r5
                           973	#	    .bf
                           974	.LDW61:
                           975	#308: tFblLength FblReadProm(tFblAddress address, vuint8 *buffer, tFblLength length)
                           976	#309: {
                           977	#310:    tFblLength actualReadCount;    /* Actual read bytes */
                           978	#311:    tFblLength currentReadCount;
                           979	#312:    vsint16    nextMemSegment;
                           980	#314:    /* Initialize variables */
                           981	#315:    actualReadCount = 0u;
00000186 72e00000          982		e_li	r23, 0
                           983	#317:    (void)FblRealTimeSupport();
0000018a e900              984		se_bl	FblRealTimeSupport
                           985	#319:    /* Find start segment */
                           986	#320:    memSegment = FblMemSegmentNrGet(address);
                           987	#line320
                           988	..lin.1e9356d..8a28453.0_16::
                           989	.LDWlin16:
0000018c 01f3              990		se_mr	r3, r31
0000018e e900              991		se_bl	FblMemSegmentNrGet
00000190 7380e000          992		e_lis	r28, %hiadj(memSegment)
00000194 1f9c0000          993		e_add16i	r28, r28, %lo(memSegment)

                                   Fri Apr 10 08:32:04 2020           Page 19
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
00000198 7300e000          994		e_lis	r24, %hiadj(kNrOfFlashBlock)
                           995	#322:    if (memSegment < 0)
                           996	#line322
                           997	..lin.1e9356d..8a28453.0_17::
                           998	.LDWlin17:
0000019c b03c              999		se_sth	r3, 0(r28)
0000019e 7360e000         1000		e_lis	r27, %hiadj(FlashBlock)
000001a2 1f180000         1001		e_add16i	r24, r24, %lo(kNrOfFlashBlock)
000001a6 1f7b0000         1002		e_add16i	r27, r27, %lo(FlashBlock)
000001aa 2a03             1003		se_cmpi	r3, 0
000001ac e000             1004		se_bge	.L476
                          1005	#line323
                          1006	..lin.1e9356d..8a28453.0_18::
                          1007	.LDWlin18:
000001ae 70e0e000         1008		e_lis	r7, %hiadj(nextValidSegment)
000001b2 8008             1009		se_lbz	r0, 0(r24)
                          1010	#323:    {
                          1011	#324:       /* Start address does not lie within a valid memory segment
                          1012	#325:        * Search first segment which overlaps with requested range
                          1013	#326:        * This allows segmented reading of memory areas which include gaps
                          1014	#327:        * (e.g. CRC calculation or signature verification) */
                          1015	#329:       /* nextValidSegment contains first segment behind gap */
                          1016	#330:       if (nextValidSegment < kNrOfFlashBlock)
000001b4 38e70000         1017		e_lha	r7, %lo(nextValidSegment)(r7)
000001b8 0c07             1018		se_cmp	r7, r0
000001ba e000             1019		se_bge	.L476
                          1020	#331:       {
                          1021	#332:          /* Gap detection */
                          1022	#333:          if (
                          1023	#line333
                          1024	..lin.1e9356d..8a28453.0_19::
                          1025	.LDWlin19:
000001bc 18c7a00c         1026		e_mulli	r6, r7, 12
000001c0 7c06d82e         1027		lwzx	r0, r6, r27
000001c4 0d0f             1028		se_cmpl	r31, r0
000001c6 e000             1029		se_bge	.L476
000001c8 06f0             1030		se_sub	r0, r31
000001ca 0d0e             1031		se_cmpl	r30, r0
000001cc e100             1032		se_ble	.L476
                          1033	#334:                (address < FlashBlock[nextValidSegment].begin) &&
                          1034	#335:                (length > (FlashBlock[nextValidSegment].begin - address))
                          1035	#336:             )
                          1036	#337:          {
                          1037	#338:             /* Found first segment which overlaps requested range */
                          1038	#339:             memSegment = nextValidSegment;
                          1039	#line339
                          1040	..lin.1e9356d..8a28453.0_20::
                          1041	.LDWlin20:
000001ce 7c06d82e         1042		lwzx	r0, r6, r27
000001d2 0173             1043		se_mr	r3, r7
                          1044	#341:             /* Remove gap from read length */
                          1045	#342:             length -= (FlashBlock[memSegment].begin - address);
000001d4 b07c             1046		se_sth	r7, 0(r28)
000001d6 7ce0f850         1047		subf	r7, r0, r31
000001da 047e             1048		se_add	r30, r7
                          1049	#343:             /* Adapt start address to segment start */

                                   Fri Apr 10 08:32:04 2020           Page 20
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
                          1050	#344:             address = FlashBlock[memSegment].begin;
000001dc 010f             1051		se_mr	r31, r0
                          1052	.L476:
                          1053	#345:          }
                          1054	#346:       }
                          1055	#347:    }
                          1056	#349:    /* Initialize next memory segment index */
                          1057	#350:    nextMemSegment = memSegment;
000001de 013d             1058		se_mr	r29, r3
                          1059	#352:    /* Start segment found, read segment */
                          1060	#353:    if (memSegment >= 0)
000001e0 2a03             1061		se_cmpi	r3, 0
000001e2 e400             1062		se_blt	.L499
000001e4 e800             1063		se_b	.L485
                          1064	.L487:
                          1065	#354:    {
                          1066	#355:       while (length > 0u)
                          1067	#356:       {
                          1068	#357:          /* Check if read range crosses Flash block boundary */
                          1069	#358:          if ((address + (length - 1u)) > FlashBlock[memSegment].end) /* PRQA S 3689 */ /* MD_FblDiag_3689 */
                          1070	#line358
                          1071	..lin.1e9356d..8a28453.0_21::
                          1072	.LDWlin21:
000001e6 387c0000         1073		e_lha	r3, 0(r28)
000001ea 18e3a00c         1074		e_mulli	r7, r3, 12
000001ee 04b7             1075		se_add	r7, r27
000001f0 c167             1076		se_lwz	r6, 4(r7)
000001f2 7c1ff214         1077		add	r0, r31, r30
000001f6 18a084ff         1078		e_addi	r5, r0, -1
000001fa 0d65             1079		se_cmpl	r5, r6
000001fc e100             1080		se_ble	.L488
                          1081	#359:          {
                          1082	#360:             currentReadCount = (FlashBlock[memSegment].end - address) + 1u;   /* PRQA S 3689 */ /* MD_FblDiag_3689 */
                          1083	#line360
                          1084	..lin.1e9356d..8a28453.0_22::
                          1085	.LDWlin22:
000001fe 7f5f3050         1086		subf	r26, r31, r6
00000202 8068             1087		se_lbz	r6, 0(r24)
                          1088	#362:             nextMemSegment++;
00000204 200d             1089		se_addi	r29, 1
00000206 00fd             1090		se_extsh	r29
                          1091	#364:             if (nextMemSegment < kNrOfFlashBlock)
00000208 200a             1092		se_addi	r26, 1
0000020a 0c6d             1093		se_cmp	r29, r6
0000020c e000             1094		se_bge	.L786
                          1095	#365:             {
                          1096	#366:                length = ((FlashBlock[nextMemSegment].begin - address) < length)
                          1097	#line366
                          1098	..lin.1e9356d..8a28453.0_23::
                          1099	.LDWlin23:
0000020e 18bda00c         1100		e_mulli	r5, r29, 12
00000212 7ca5d82e         1101		lwzx	r5, r5, r27
00000216 4806             1102		se_li	r6, 0
00000218 7c9f2850         1103		subf	r4, r31, r5
0000021c 0de4             1104		se_cmpl	r4, r30
0000021e e000             1105		se_bge	.L492

                                   Fri Apr 10 08:32:04 2020           Page 21
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
00000220 7cc50050         1106		subf	r6, r5, r0
                          1107	.L492:
00000224 016e             1108		se_mr	r30, r6
00000226 e800             1109		se_b	.L495
                          1110	#367:                   ? (length - (FlashBlock[nextMemSegment].begin - address)) : 0u;
                          1111	#368:             }
                          1112	#369:             else
                          1113	#370:             /* Flash block index overflow, exit loop */
                          1114	#371:             {
                          1115	#372:                length = 0u;
                          1116	.L488:
                          1117	#373:             }
                          1118	#374:          }
                          1119	#375:          else
                          1120	#376:          {
                          1121	#377:             currentReadCount = length;
                          1122	#line377
                          1123	..lin.1e9356d..8a28453.0_24::
                          1124	.LDWlin24:
00000228 01ea             1125		se_mr	r26, r30
                          1126	.L786:
                          1127	#378:             length = 0u;
0000022a 480e             1128		se_li	r30, 0
                          1129	.L495:
                          1130	#379:          }
                          1131	#381:          if (MemDriver_RReadSync(buffer, currentReadCount, address) == IO_E_OK)
0000022c 8807             1132		se_lbz	r0, 8(r7)
0000022e 1800a018         1133		e_mulli	r0, r0, 24
00000232 1cc00010         1134		e_add16i	r6, r0, %lo(memDrvLst+16)
00000236 70069000         1135		e_add2is	r6, %hiadj(memDrvLst+16)
0000023a c006             1136		se_lwz	r0, 0(r6)
0000023c 01f5             1137		se_mr	r5, r31
0000023e 01a4             1138		se_mr	r4, r26
00000240 0193             1139		se_mr	r3, r25
00000242 00b0             1140		se_mtctr	r0
00000244 0007             1141		se_bctrl
00000246 2a03             1142		se_cmpi	r3, 0
00000248 e200             1143		se_bne	.L496
                          1144	#382:          {
                          1145	#383:             memSegment = nextMemSegment;
                          1146	#line383
                          1147	..lin.1e9356d..8a28453.0_25::
                          1148	.LDWlin25:
0000024a 18fda00c         1149		e_mulli	r7, r29, 12
                          1150	#384:             buffer = (vuint8 *)&buffer[currentReadCount];
0000024e b0dc             1151		se_sth	r29, 0(r28)
                          1152	#385:             address = FlashBlock[memSegment].begin;   /* PRQA S 3689 */ /* MD_FblDiag_3689 */
00000250 7fe7d82e         1153		lwzx	r31, r7, r27
00000254 04a9             1154		se_add	r25, r26
                          1155	#386:             actualReadCount += currentReadCount;
00000256 7ef7d214         1156		add	r23, r23, r26
0000025a e800             1157		se_b	.L498
                          1158	.L496:
                          1159	#387:          }
                          1160	#388:          else
                          1161	#389:          {

                                   Fri Apr 10 08:32:04 2020           Page 22
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
                          1162	#390:             /* In case of error quit loop */
                          1163	#391:             length = 0u;
                          1164	#line391
                          1165	..lin.1e9356d..8a28453.0_26::
                          1166	.LDWlin26:
0000025c 480e             1167		se_li	r30, 0
                          1168	.L498:
                          1169	#392:          }
                          1170	#394:          (void)FblRealTimeSupport();
0000025e 78000001         1171		se_bl	FblRealTimeSupport
                          1172	.L485:
                          1173	#line355
                          1174	..lin.1e9356d..8a28453.0_27::
                          1175	.LDWlin27:
00000262 2a0e             1176		se_cmpi	r30, 0
00000264 e200             1177		se_bne	.L487
                          1178	#395:       }
                          1179	#396:    }
                          1180	#397:    else
                          1181	#398:    {
                          1182	#399:       actualReadCount = 0u;
                          1183	.L499:
                          1184	#400:    }
                          1185	#403:    return actualReadCount;
                          1186	#line403
                          1187	..lin.1e9356d..8a28453.0_28::
                          1188	.LDWlin28:
00000266 03f3             1189		se_mfar	r3, r23
                          1190	#	    .ef
                          1191	.LDW71:
00000268 cd01             1192		se_lwz	r0, 52(sp)
0000026a 1ae1080c         1193		e_lmw	r23, 12(sp)
0000026e 18218030         1194		e_addi	sp, sp, 48
00000272 0090             1195		se_mtlr	r0
00000274 0004             1196		se_blr
                          1197		.global	__ghs_eofn_FblReadProm
                          1198	__ghs_eofn_FblReadProm:
                          1199		.type	FblReadProm,@function
                          1200		.size	FblReadProm,$-FblReadProm
                          1201		.align	1
                          1202	
                          1203	#function:			FblReadProm
                          1204	#stack frame size:		48
                          1205	#link area offset:		0
                          1206	#local storage area offset:	12
                          1207	#gpr save area offset:		12
                          1208	#
                          1209	#actualReadCount	r23	local
                          1210	#currentReadCount	r26	local
                          1211	#nextMemSegment	r29	local
                          1212	
                          1213	#address	r31	param
                          1214	#buffer	r25	param
                          1215	#length	r30	param
                          1216	
                          1217		.data

                                   Fri Apr 10 08:32:04 2020           Page 23
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
                          1218		.section ".vletext", "vax"
                          1219		.vle
                          1220		.vle
                          1221	
                          1222	#404: }
                          1223	
                          1224	#405: #endif /* FBL_DIAG_ENABLE_OEM_READPROM */
                          1225	#407: /***********************************************************************************************************************
                          1226	#408:  *  FblEcuReset
                          1227	#409:  **********************************************************************************************************************/
                          1228	#410: /*! \brief       Start ECU reset.
                          1229	#411:  **********************************************************************************************************************/
                          1230	#412: void FblDiagEcuReset(void)
                          1231	#413: {
                          1232	#414:    /* Disable tester present timeout monitoring */
                          1233	#415:    StopTesterTimeout();
                          1234	#417:    /* Do not transmit response message */
                          1235	#418:    DiagSetNoResponse();
                          1236	#419:    FblDiagDeinit();
                          1237	#420: }
                          1238	#422: /***********************************************************************************************************************
                          1239	#423:  *  END OF DIAGNOSTIC SERVICE MANAGEMENT HANDLERS
                          1240	#424:  **********************************************************************************************************************/
                          1241	#426: /***********************************************************************************************************************
                          1242	#427:  *  DIAGNOSTIC SUPPORT FUNCTIONS
                          1243	#428:  **********************************************************************************************************************/
                          1244	#430: /***********************************************************************************************************************
                          1245	#431:  *  Global diagnostic support functions (OEM independent)
                          1246	#432:  **********************************************************************************************************************/
                          1247	#434: /***********************************************************************************************************************
                          1248	#435:  *  FblDiagSetError
                          1249	#436:  **********************************************************************************************************************/
                          1250	#437: /*! \brief       Sets the corresponding error code for the currently active service
                          1251	#438:  *  \param[in]   errorCode Negative response code
                          1252	#439:  **********************************************************************************************************************/
                          1253	#440: void FblDiagSetError( vuint8 errorCode )
                          1254	#441: {
                          1255	#442:    diagErrorCode = errorCode;
                          1256	#444:    /* No negative response for functional requests with these error codes */
                          1257	#445:    if (    (GetFunctionalRequest())
                          1258	#446:         && (!GetRcrRpInProgress())
                          1259	#447:         && (   (errorCode == kDiagNrcServiceNotSupported )
                          1260	#448:             || (errorCode == kDiagNrcSubFunctionNotSupported )
                          1261	#449:             || (errorCode == kDiagNrcRequestOutOfRange )
                          1262	#450: #if defined( FBL_DIAG_ENABLE_14229_2013 )
                          1263	#451:             || (errorCode == kDiagNrcSubfunctionNotSupportedInActiveSession)
                          1264	#452:             || (errorCode == kDiagNrcServiceNotSupportedInActiveSession)
                          1265	#453: #endif /* FBL_DIAG_ENABLE_14229_2013 */
                          1266	#454:            )
                          1267	#455:       )
                          1268	#456:    {
                          1269	#457:      DiagSetNoResponse();
                          1270	#458:    }
                          1271	#459:    else
                          1272	#460:    {
                          1273	#461:       /* Send negative response for all other cases */

                                   Fri Apr 10 08:32:04 2020           Page 24
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
                          1274	#462:       diagResponseFlag |= kDiagPutNegResponse;
                          1275	#463:    }
                          1276	#464: }
                          1277	#466: /***********************************************************************************************************************
                          1278	#467:  *  FblRealTimeSupport
                          1279	#468:  **********************************************************************************************************************/
                          1280	#469: /*! \brief       Transmit busy messages and triggers the watchdog according to system timer.
                          1281	#470:  *  \pre         Diagnosis and communication stack must be initialized, diagnostic request has to be received.
                          1282	#471:  **********************************************************************************************************************/
                          1283	#472: vuint8 FblRealTimeSupport( void )
                          1284	#473: {
                          1285	#474:    vuint8 returnCode;
                          1286	#476:    returnCode = (vuint8)FblLookForWatchdog();
                          1287	#477:    DiagExRCRResponsePending(kNotForceSendResponsePending);
                          1288	#478:    return returnCode;
                          1289	#479: }
                          1290	#481: /***********************************************************************************************************************
                          1291	#482:  *  DiagExRCRResponsePending
                          1292	#483:  **********************************************************************************************************************/
                          1293	#484: /*! \brief       Transmit a busy message if timer expires
                          1294	#485:  *  \details     (forceSend == kNotForceSendResponsePending) or if kForceSendResponsePending is passed.
                          1295	#486:  *  \param[in]   forceSend Determines if a message is sent independently from timer state
                          1296	#487:  **********************************************************************************************************************/
                          1297	#488: void DiagExRCRResponsePending( vuint8 forceSend )
                          1298	#489: {
                          1299	#490:    /* Only send response pending if service is in progress */
                          1300	#491:    if (GetRcrRpAllowed())
                          1301	#492:    {
                          1302	#493:       /* Conditions to send an RCR-RP if P2-timer expired
                          1303	#494:        * or parameter contains kForceSendResponsePending */
                          1304	#495:       if ((forceSend == kForceSendResponsePending)
                          1305	#496:             || ((forceSend == kForceSendRpIfNotInProgress) && (!GetRcrRpInProgress()))
                          1306	#497:             || (GetP2Timer() < (GetRcrRpInProgress() ? kFblDiagP2StarMinThreshold : kFblDiagP2MinThreshold)) )
                          1307	#498:       {
                          1308	#499:          /* Prepare parameter for the Diag-confirmation function */
                          1309	#500:          diagPostParam = kDiagPostRcrRp;
                          1310	#502:          /* Prepare and transmit RCRRP buffer */
                          1311	#503:          rcrrpBuffer[0] = kDiagRidNegativeResponse;
                          1312	#504:          rcrrpBuffer[1] = diagServiceCurrent;
                          1313	#505:          rcrrpBuffer[2] = kDiagNrcRcrResponsePending;
                          1314	#506:          FblCwTransmitRP(rcrrpBuffer);
                          1315	#508:          /* Restart P2-Timer to P2* */
                          1316	#509:          SetP2Timer(kFblDiagTimeP2Star);
                          1317	#511:          /* If response pending is transmitted and no response
                          1318	#512:           * is set, a positive response has to be transmitted anyway. */
                          1319	#513:          diagResponseFlag &= FblInvert8Bit(kDiagPutNoResponse);
                          1320	#515:          SetRcrRpInProgress();
                          1321	#516:       }
                          1322	#517:    }
                          1323	#518: }
                          1324	#521: #if defined( FBL_DIAG_ENABLE_OEM_SEGMENTNRGET )
                          1325	#522: #else
                          1326	#523: /***********************************************************************************************************************
                          1327	#524:  *  FblMemSegmentNrGet
                          1328	#525:  **********************************************************************************************************************/
                          1329	#526: /*! \brief       Get the number of the corresponding flash block for the given address

                                   Fri Apr 10 08:32:04 2020           Page 25
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
                          1330	#527:  *  \return      Index of flash block; -1, if not found
                          1331	#528:  *  \param[in]   address
                          1332	#529:  **********************************************************************************************************************/
                          1333	#530: vsint16 FblMemSegmentNrGet( tFblAddress address )
                          1334	#531: {
                          1335	#532:    vsint16 segment;
                          1336	#534:    /* Check address against cached range */
                          1337	#535:    if (   ( address >= cachedBlock.begin )
                          1338	#536:        && ( address <= cachedBlock.end )
                          1339	#537:       )
                          1340	#538:    {
                          1341	#539:       /* Range matches, finish processing and return cached segment */
                          1342	#540:       segment = cachedSegment;
                          1343	#541:    }
                          1344	#542:    else
                          1345	#543:    {
                          1346	#544:       /* Search matching flash block */
                          1347	#545:       for (nextValidSegment = 0; nextValidSegment < (vsint16)kNrOfFlashBlock; nextValidSegment++)
                          1348	#546:       {
                          1349	#547:          /* Reduced number of watchdog trigger calls */
                          1350	#548:          if (((vuint8)nextValidSegment & (vuint8)0x0Fu) == (vuint8)0x00u)
                          1351	#549:          {
                          1352	#550:             (void)FblRealTimeSupport();
                          1353	#551:          }
                          1354	#553:          /* Found first potential match */
                          1355	#554:          if (FlashBlock[nextValidSegment].end >= address)
                          1356	#555:          {
                          1357	#556:             break;
                          1358	#557:          }
                          1359	#558:       }
                          1360	#560:       /* Valid match found */
                          1361	#561:       if (nextValidSegment < (vsint16)kNrOfFlashBlock)
                          1362	#562:       {
                          1363	#563:          if (address >= FlashBlock[nextValidSegment].begin)
                          1364	#564:          {
                          1365	#565:             /* Address lies within block => valid segment */
                          1366	#566:             segment = nextValidSegment;
                          1367	#568:             /* Cache current match */
                          1368	#569:             cachedBlock.begin = FlashBlock[segment].begin;
                          1369	#570:             cachedBlock.end = FlashBlock[segment].end;
                          1370	#571:          }
                          1371	#572:          else
                          1372	#573:          {
                          1373	#574:             /* Address lies in front of block => gap detected */
                          1374	#575:             segment = -1;
                          1375	#577:             /* Cache current gap */
                          1376	#578:             if (nextValidSegment <= 0)
                          1377	#579:             {
                          1378	#580:                /* First block, gap starts at beginning of address space */
                          1379	#581:                cachedBlock.begin = 0x00u;
                          1380	#582:             }
                          1381	#583:             else
                          1382	#584:             {
                          1383	#585:                /* Gap starts after end of previous block */
                          1384	#586:                cachedBlock.begin = FlashBlock[nextValidSegment - 1].end + 1;
                          1385	#587:             }

                                   Fri Apr 10 08:32:04 2020           Page 26
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
                          1386	#588:             /* Gap ends in front of current segment */
                          1387	#589:             cachedBlock.end = FlashBlock[nextValidSegment].begin - 1;
                          1388	#590:          }
                          1389	#591:       }
                          1390	#592:       else
                          1391	#593:       {
                          1392	#594:          /* Address lies behind last block => gap detected */
                          1393	#595:          segment = -1;
                          1394	#597:          /* Cache current gap
                          1395	#598:           * Gap starts after end of previous block */
                          1396	#599:          cachedBlock.begin = FlashBlock[kNrOfFlashBlock - 1u].end + 1u;
                          1397	#600:          /* Gap ends at end of address space */
                          1398	#601:          /* PRQA S 0277 1 */ /* MD_FblDiag_0277 */
                          1399	#602:          cachedBlock.end = (tFblAddress) - 1;   /* Note: The correct conversion is guaranteed by the C standard */
                          1400	#603:       }
                          1401	#605:       /* Cache current segment for next request */
                          1402	#606:       cachedSegment = segment;
                          1403	#607:    }
                          1404	#609:    return segment;
                          1405	#610: }
                          1406	#611: #endif /* FBL_DIAG_ENABLE_OEM_SEGMENTNRGET */
                          1407	#613: /***********************************************************************************************************************
                          1408	#614:  *  FblDiagMemGetActiveBuffer
                          1409	#615:  **********************************************************************************************************************/
                          1410	#616: /*! \brief       Function updates core Diagnostic buffer (DiagBuffer) and returns updated pbDiagData to handler
                          1411	#617:  *  \return      updated pbDiagData buffer used by diagnostic handler functions *
                          1412	#618:  **********************************************************************************************************************/
                          1413	#619: V_MEMRAM1 vuint8 V_MEMRAM2 V_MEMRAM3 * FblDiagMemGetActiveBuffer(void)
                          1414	#620: {
                          1415	#621:    DiagBuffer = FblMemGetActiveBuffer();
                          1416	#622:    return &DiagBuffer[kDiagFmtpbDiagData];
                          1417	#623: }
                          1418	#625: #if defined( FBL_DIAG_ENABLE_CORE_RANGECHECKS )
                          1419	#626: /***********************************************************************************************************************
                          1420	#627:  *  FblCheckAddressRange
                          1421	#628:  **********************************************************************************************************************/
                          1422	#629: /*! \brief       Check whether an address lies within a specified address range
                          1423	#630:  *  \param[in]   address Address to be checked
                          1424	#631:  *  \param[in]   rangeStart Start of range
                          1425	#632:  *  \param[in]   rangeLength Length of range
                          1426	#633:  *  \return      kFblOk if address lies within range, kFblFailed otherwise
                          1427	#634:  **********************************************************************************************************************/
                          1428	#635: tFblResult FblCheckAddressRange( tFblAddress address, tFblAddress rangeStart, tFblLength rangeLength )
                          1429	#636: {
                          1430	#637:    tFblResult result;
                          1431	#639:    result = kFblFailed;
                          1432	#641:    if ((address >= rangeStart)
                          1433	#642:         && ((address - rangeStart) < rangeLength))
                          1434	#643:    {
                          1435	#644:       result = kFblOk;
                          1436	#645:    }
                          1437	#647:    return result;
                          1438	#648: }
                          1439	#650: /***********************************************************************************************************************
                          1440	#651:  *  FblCheckRangeContained
                          1441	#652:  **********************************************************************************************************************/

                                   Fri Apr 10 08:32:04 2020           Page 27
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
                          1442	#653: /*! \brief       Check whether an address range lies within another specified address range
                          1443	#654:  *  \details     This function checks if the range specified with address and length lies within the
                          1444	#655:  *               enclosing range specified by rangeStart and rangeLength.
                          1445	#656:  *  \param[in]   address Start address of range to be checked
                          1446	#657:  *  \param[in]   length Length of range to be checked
                          1447	#658:  *  \param[in]   rangeStart Start of range
                          1448	#659:  *  \param[in]   rangeLength Length of range
                          1449	#660:  *  \return      kFblOk if range lies within range, kFblFailed otherwise
                          1450	#661:  **********************************************************************************************************************/
                          1451	#662: tFblResult FblCheckRangeContained( tFblAddress address, tFblLength length, tFblAddress rangeStart, tFblLength rangeLength )
                          1452	#663: {
                          1453	#664:    tFblResult result;
                          1454	#666:    result = kFblFailed;
                          1455	#668:    if ((FblCheckAddressRange(address, rangeStart, rangeLength) == kFblOk)
                          1456	#669:        && (length <= rangeLength)
                          1457	#670:        && ((address - rangeStart) <= (rangeLength - length)))
                          1458	#671:    {
                          1459	#672:       result = kFblOk;
                          1460	#673:    }
                          1461	#675:    return result;
                          1462	#676: }
                          1463	#677: #endif /* FBL_DIAG_ENABLE_CORE_RANGECHECKS */
                          1464	#679: /***********************************************************************************************************************
                          1465	#680:  *  Local diagnostic support functions (OEM independent)
                          1466	#681:  **********************************************************************************************************************/
                          1467	#683: /***********************************************************************************************************************
                          1468	#684:  *  DiagProcessingDone
                          1469	#685:  **********************************************************************************************************************/
                          1470	#686: /*! \brief       Prepare positive response.
                          1471	#687:  *  \details     Prepares the positive response for the currently processed service.
                          1472	#688:  *  \pre         Service must be in progress
                          1473	#689:  *  \param[in]   dataLength Data length to be transmitted (excluding the service-id itself).
                          1474	#690:  **********************************************************************************************************************/
                          1475	#691: void DiagProcessingDone( tCwDataLengthType dataLength )
                          1476	#692: {
                          1477	#693:    diagResponseFlag |= kDiagPutPosResponse;
                          1478	#694:    diagResLen        = dataLength;
                          1479	#695: }
                          1480	#697: /***********************************************************************************************************************
                          1481	#698:  *  FblDiagDiscardReception
                          1482	#699:  **********************************************************************************************************************/
                          1483	#700: /*! \brief       Received diagnostic messages are discarded
                          1484	#701:  *  \details     Discards all messages which have been received during a service is processed.
                          1485	#702:  **********************************************************************************************************************/
                          1486	#703: static void FblDiagDiscardReception( void )
                          1487	#704: {
                          1488	#705:    SetResponseProcessing();   /* Set flag for running response procedure */
                          1489	#707:    FblCwDiscardReception();
                          1490	#708:    ClrResponseProcessing();
                          1491	#709: }
                          1492	#711: /* Start codeseg to be executed in RAM */
                          1493	#712: #define FBLDIAG_RAMCODE_START_SEC_CODE
                          1494	#713: #include "MemMap.h" /* PRQA S 5087 */ /* MD_MSR_19.1 */
                          1495	#714: /***********************************************************************************************************************
                          1496	#715:  *  FblDiagResetServiceFlags
                          1497	#716:  **********************************************************************************************************************/

                                   Fri Apr 10 08:32:04 2020           Page 28
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
                          1498	#717: /*! \brief       Clear all status flags relevant for service handling.
                          1499	#718:  *  \pre         Service response shall be finished.
                          1500	#719:  **********************************************************************************************************************/
                          1501		.align	1
                          1502		.align	1
                          1503	..gh.f.p.0.a.1.r.0.e.4:
                          1504		.type	..gh.f.p.0.a.1.r.0.e.4,@object
                          1505		.size	..gh.f.p.0.a.1.r.0.e.4,0
                          1506		.global	FblDiagResetServiceFlags..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_diag_core.
                          1507	FblDiagResetServiceFlags..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_diag_core.:
                          1508	FblDiagResetServiceFlags:
                          1509	#	    .bf
                          1510	.LDW81:
                          1511	#720: static void FblDiagResetServiceFlags( void )
                          1512	#721: {
                          1513	#722:    /* Clear negative response indicator */
                          1514	#723:    DiagClrError();
00000276 4800             1515		se_li	r0, 0
00000278 70e0e000         1516		e_lis	r7, %hiadj(diagErrorCode)
0000027c 34070000         1517		e_stb	r0, %lo(diagErrorCode)(r7)
00000280 7060e000         1518		e_lis	r3, %hiadj(fblDiagStates)
00000284 50e30000         1519		e_lwz	r7, %lo(fblDiagStates)(r3)
                          1520	#725:    /* Reset internal state in case no response was sent */
                          1521	#726:    ClrServiceInProgress();
00000288 70df7c97         1522		e_li	r6, -873
0000028c 4667             1523		se_and	r7, r6
0000028e 54e30000         1524		e_stw	r7, %lo(fblDiagStates)(r3)
                          1525	#727:    ClrRcrRpInProgress();
                          1526	#728:    /* Reset flag for functional request, default is physical request */
                          1527	#729:    ClrFunctionalRequest();
                          1528	#730:    ClrDiagHandlerCalled();
                          1529	#731:    /* Reset flag for suppress positive response bit */
                          1530	#732:    ClrSuppressPosRspMsg();
                          1531	#734:    /* diagResponse state back to idle */
                          1532	#735:    diagResponseFlag = kDiagResponseIdle;
00000292 70e0e000         1533		e_lis	r7, %hiadj(diagResponseFlag)
00000296 34070000         1534		e_stb	r0, %lo(diagResponseFlag)(r7)
                          1535	#736: }
                          1536	#	    .ef
                          1537	.LDW91:
0000029a 0004             1538		se_blr
                          1539	__ghs_eofn_FblDiagResetServiceFlags:
                          1540		.type	FblDiagResetServiceFlags,@function
                          1541		.size	FblDiagResetServiceFlags,$-FblDiagResetServiceFlags
                          1542		.type	FblDiagResetServiceFlags..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_diag_core.,@function
                          1543		.size	FblDiagResetServiceFlags..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_diag_core.,$-FblDiagResetServiceFlags..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_diag_core.
                          1544		.align	1
                          1545	
                          1546	#function:			FblDiagResetServiceFlags
                          1547	#stack frame size:		0
                          1548	#
                          1549	
                          1550		.data
                          1551		.section ".vletext", "vax"
                          1552		.vle
                          1553		.vle

                                   Fri Apr 10 08:32:04 2020           Page 29
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
                          1554	
                          1555	
                          1556	#738: /***********************************************************************************************************************
                          1557	#739:  *  FblDiagConfirmation
                          1558	#740:  **********************************************************************************************************************/
                          1559	#741: /*! \brief       Clear all status flags and conclude service transmission.
                          1560	#742:  *  \pre         Service response has been sent recently.
                          1561	#743:  **********************************************************************************************************************/
                          1562	#744: static void FblDiagConfirmation( void )
                          1563	#745: {
                          1564	#746:    /* Buffer is now available */
                          1565	#747:    ClrDiagBufferLocked();
                          1566	#749:    /* Restart the tester present timer if not in default session */
                          1567	#750:    if (GetDiagProgrammingSession() || GetDiagExtendedSession())
                          1568	#751:    {
                          1569	#752:       ResetTesterTimeout();
                          1570	#753:    }
                          1571	#755:    /* Clear all diagnostic states */
                          1572	#756:    ClrP2Timer();
                          1573	#759:    /* Clear all flags for service handling */
                          1574	#760:    FblDiagResetServiceFlags();
                          1575	#761: }
                          1576	#763: /* End section to execute code from RAM */
                          1577	#764: #define FBLDIAG_RAMCODE_STOP_SEC_CODE
                          1578	#765: #include "MemMap.h"  /* PRQA S 5087 */ /* MD_MSR_19.1 */
                          1579	#767: /***********************************************************************************************************************
                          1580	#768:  *  FblDiagResponseProcessor
                          1581	#769:  **********************************************************************************************************************/
                          1582	#770: /*! \brief       Prepares response message and hands it over to ComWrapper.
                          1583	#771:  *  \details     Prepares either a positive or negative response. Depending on the response type,
                          1584	#772:  *               the service ID is set to SID + 0x40 or 0x7F.
                          1585	#773:  *  \pre         Current SID must be in DiagBuffer[0], diagErrorCode must be initialized.
                          1586	#774:  **********************************************************************************************************************/
                          1587	#775: static void FblDiagResponseProcessor( void )
                          1588	#776: {
                          1589	#777:    /* Service will be concluded under this condition */
                          1590	#778:    if(( diagResponseFlag & kDiagResponseActive ) != 0u )
                          1591	#779:    {
                          1592	#780:       /* Stop transmission of response pending messages */
                          1593	#781:       ClrRcrRpAllowed();
                          1594	#782:       ClrP2Timer();
                          1595	#783:       ClrRcrRpInProgress();
                          1596	#785:       /* Discard all service requests received during processing this one */
                          1597	#786:       FblDiagDiscardReception();
                          1598	#787:       FblErrStatSetSId( diagServiceCurrent );
                          1599	#789:       /* Negative response has highest priority.
                          1600	#790:        * Must be checked first. */
                          1601	#791:       if(( diagResponseFlag & kDiagPutNegResponse) != 0u )
                          1602	#792:       {
                          1603	#793:          /* Set response type */
                          1604	#794:          diagPostParam = kDiagPostNegResponse;
                          1605	#796:          /* Prepare response message */
                          1606	#797:          DiagBuffer[kDiagFmtSubparam]     = diagServiceCurrent;
                          1607	#798:          DiagBuffer[kDiagFmtServiceId]    = kDiagRidNegativeResponse;
                          1608	#799:          DiagBuffer[kDiagFmtNegResponse]  = DiagGetError();
                          1609	#801:          assertFblUser(DiagGetError() != kDiagErrorNone, kFblSysAssertParameterOutOfRange);  /* PRQA S 2214 */ /* MD_FblDiag_2214 */

                                   Fri Apr 10 08:32:04 2020           Page 30
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
                          1610	#802:          FblCwTransmit(DiagBuffer, 3u, kFblCwTxCallNegResponse);
                          1611	#804:          /* diagResponse state back to idle */
                          1612	#805:          diagResponseFlag = kDiagResponseIdle;
                          1613	#806:       }
                          1614	#807:       else if (( diagResponseFlag & kDiagPutNoResponse ) != 0u )
                          1615	#808:       {
                          1616	#809:          /* Set response type */
                          1617	#810:          diagPostParam = kDiagPostNoResponse;
                          1618	#812:          /* Service conclusion */
                          1619	#813:          FblDiagConfirmation();
                          1620	#815:          /* Check if a reset shall be generated without message transmission */
                          1621	#816:          if (GetWaitEcuReset())
                          1622	#817:          {
                          1623	#818:             /* If so, generate the reset immediately */
                          1624	#819:             SetResetMsgConfirmed();
                          1625	#820:          }
                          1626	#822:          FblCwResetRxBlock();
                          1627	#823:       }
                          1628	#824:       else if (( diagResponseFlag & kDiagPutPosResponse ) != 0u )
                          1629	#825:       {
                          1630	#826:          /* Set response type */
                          1631	#827:          diagPostParam = kDiagPostPosResponse;
                          1632	#829:          /* Transmit positive response if not suppressed */
                          1633	#830:          DiagBuffer[kDiagFmtServiceId] = (vuint8)(diagServiceCurrent + 0x40u);
                          1634	#831:          FblCwTransmit(DiagBuffer, (tCwDataLengthType)( diagResLen + 1u ), kFblCwTxCallPosResponse );
                          1635	#833:          /* diagResponse state back to idle */
                          1636	#834:          diagResponseFlag = kDiagResponseIdle;
                          1637	#835:       }
                          1638	#836:       else
                          1639	#837:       {
                          1640	#838:          /* This is an illegal state and should not occur */
                          1641	#839:          assertFblInternal(0u, kFblSysAssertParameterOutOfRange );  /* PRQA S 2214 */ /* MD_FblDiag_2214 */
                          1642	#841:          /* Set response type */
                          1643	#842:          diagPostParam = kDiagResponseIdle;
                          1644	#843:       }
                          1645	#845:       /* Should be an assertion */
                          1646	#846:       if( diagPostParam == kDiagPostRcrRp )
                          1647	#847:       {
                          1648	#848:         /* diagResponse state back to idle */
                          1649	#849:         diagResponseFlag = kDiagResponseIdle;
                          1650	#850:       }
                          1651	#851:    }
                          1652	#852: }  /* PRQA S 6080 */ /* MD_MSR_STMIF */
                          1653	#854: /***********************************************************************************************************************
                          1654	#855:  *  ChkSuppressPosRspMsgIndication
                          1655	#856:  **********************************************************************************************************************/
                          1656	#857: /*! \brief       This functions checks if a diagnostic response has to be sent.
                          1657	#858:  *  \details     If the request is received with Suppress Positive Response Bit (0x80), the response is cancelled.
                          1658	#859:  *  \param[in]   subparam Diagnostic sub-parameter
                          1659	#860:  **********************************************************************************************************************/
                          1660	#861: static void ChkSuppressPosRspMsgIndication( vuint8 *subparam )
                          1661	#862: {
                          1662	#863:    if (((*(subparam)) & (kDiagSuppressPosRspMsgIndicationBit)) != 0)
                          1663	#864:    {
                          1664	#865:       /* Set internal flag to suppress positive response */
                          1665	#866:       DiagSetNoResponse();

                                   Fri Apr 10 08:32:04 2020           Page 31
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
                          1666	#867:       SetSuppressPosRspMsg();
                          1667	#869:       /* Clear suppress bit in request message */
                          1668	#870:       (*(subparam)) &= FblInvert8Bit( kDiagSuppressPosRspMsgIndicationBit );
                          1669	#871:    }
                          1670	#872: }
                          1671	#873: #if defined( FBL_DIAG_ENABLE_CORE_SEGMENTHANDLING )
                          1672	#874: /***********************************************************************************************************************
                          1673	#875:  *  FblDiagSegmentNext
                          1674	#876:  **********************************************************************************************************************/
                          1675	#877: /*! \brief       Keep track of segment counter
                          1676	#878:  *  \return      kSwmOutOfRange if maximum segment count exceeded, number of segments otherwise
                          1677	#879:  **********************************************************************************************************************/
                          1678	#880: vuint8 FblDiagSegmentNext( void )
                          1679	#881: {
                          1680	#882:    vuint8 result;
                          1681	#884:    /* Compare current used NOAR against max. value */
                          1682	#885:    if (segmentCount >= SWM_DATA_MAX_NOAR)
                          1683	#886:    {
                          1684	#887:       /* ALL PMA processed. Stop reading data */
                          1685	#888:       result =  kSwmOutOfRange;
                          1686	#889:    }
                          1687	#890:    else
                          1688	#891:    {
                          1689	#892:       /* Increment segment count */
                          1690	#893:       segmentCount++;
                          1691	#895:       result = segmentCount;
                          1692	#896:    }
                          1693	#898:    return result;
                          1694	#899: }
                          1695	#900: #endif /* FBL_DIAG_ENABLE_CORE_SEGMENTHANDLING */
                          1696	#902: #if defined( FBL_DIAG_ENABLE_CORE_GETBLOCKFROMADDR )
                          1697	#903: /***********************************************************************************************************************
                          1698	#904:  *  FblGetBlockNrFromAddress
                          1699	#905:  **********************************************************************************************************************/
                          1700	#906: /*! \brief       Get logical block number from address and length
                          1701	#907:  *  \details     Get the number of the corresponding logical block for the given block address.
                          1702	#908:  *  \param[in]   blockAddress Start address of address range
                          1703	#909:  *  \param[in]   blockLength Length of address range
                          1704	#910:  *  \param[out]  pLogicalBlock Logical block number
                          1705	#911:  *  \return      kFblOk if blockIndex has been found, otherwise kFblFailed
                          1706	#912:  **********************************************************************************************************************/
                          1707	#913: tFblResult FblGetBlockNrFromAddress(tFblAddress blockAddress, tFblLength blockLength, vuint8* pLogicalBlock)
                          1708	#914: {
                          1709	#915:    tFblResult result;
                          1710	#916:    vuint8 tempCount;
                          1711	#918:    /* Initialize variables */
                          1712	#919:    result = kFblFailed;
                          1713	#920:    *pLogicalBlock = 0xFFu;
                          1714	#922:    if( blockLength > 0u)
                          1715	#923:    {
                          1716	#924:       (void)FblLookForWatchdog();
                          1717	#925:       tempCount = 0u;
                          1718	#926:       /* Search logical block table for blockIndex */
                          1719	#927:       while ((result == kFblFailed) && (tempCount < FblLogicalBlockTable.noOfBlocks))
                          1720	#928:       {
                          1721	#929:          /* Check if requested addresses lie within a logical block */

                                   Fri Apr 10 08:32:04 2020           Page 32
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
                          1722	#930:          result = FblCheckRangeContained(blockAddress,
                          1723	#931:                                      blockLength,
                          1724	#932:                                      FblLogicalBlockTable.logicalBlock[tempCount].blockStartAddress,
                          1725	#933:                                      FblLogicalBlockTable.logicalBlock[tempCount].blockLength
                          1726	#934:                                     );
                          1727	#936:          /* Logical block found - save block number */
                          1728	#937:          if (result == kFblOk)
                          1729	#938:          {
                          1730	#939:             *pLogicalBlock = tempCount;
                          1731	#940:          }
                          1732	#942:          /* Increment loop counter */
                          1733	#943:          tempCount++;
                          1734	#944:       }
                          1735	#945:    }
                          1736	#947:    return result;
                          1737	#948: }
                          1738	#949: #endif /* FBL_DIAG_ENABLE_CORE_GETBLOCKFROMADDR */
                          1739	#951: #if defined( FBL_DIAG_ENABLE_CORE_GETBLOCKFROMID )
                          1740	#952: /***********************************************************************************************************************
                          1741	#953:  *  FblGetBlockNrFromIndex
                          1742	#954:  **********************************************************************************************************************/
                          1743	#955: /*! \brief       Get logical block number for a given block index
                          1744	#956:  *  \details     Get the number of the corresponding logical block for the given block index.
                          1745	#957:  *  \param[in]   blockIndex Index of logical block
                          1746	#958:  *  \param[out]  pLogicalBlock Logical block number
                          1747	#959:  *  \return      kFblOk if blockIndex has been found, otherwise kFblFailed
                          1748	#960:  **********************************************************************************************************************/
                          1749	#961: tFblResult FblGetBlockNrFromIndex(vuint8 blockIndex, vuint8* pLogicalBlock)
                          1750	#962: {
                          1751	#963:    tFblResult result;
                          1752	#964:    vuint8 tempCount;
                          1753	#966:    /* Initialize variables */
                          1754	#967:    result = kFblFailed;
                          1755	#968:    *pLogicalBlock = 0xFFu;
                          1756	#970:    (void)FblLookForWatchdog();
                          1757	#971:    tempCount = 0u;
                          1758	#972:    /* Search logical block table for blockIndex */
                          1759	#973:    while ((result == kFblFailed) && (tempCount < FblLogicalBlockTable.noOfBlocks))
                          1760	#974:    {
                          1761	#975:       /* Check if requested index matches a logical block index */
                          1762	#976:       if (blockIndex == FblLogicalBlockTable.logicalBlock[tempCount].blockIndex)
                          1763	#977:       {
                          1764	#978:          result = kFblOk;
                          1765	#979:          *pLogicalBlock = tempCount;
                          1766	#980:       }
                          1767	#982:       /* Increment loop counter */
                          1768	#983:       tempCount++;
                          1769	#984:    }
                          1770	#986:    return result;
                          1771	#987: }
                          1772	#988: #endif /* FBL_DIAG_ENABLE_CORE_GETBLOCKFROMID */
                          1773	#990: /***********************************************************************************************************************
                          1774	#991:  *  DIAGNOSTIC MODULE CONTROL ROUTINES
                          1775	#992:  **********************************************************************************************************************/
                          1776	#994: /***********************************************************************************************************************
                          1777	#995:  *  Initialization handling of diagnostic module

                                   Fri Apr 10 08:32:04 2020           Page 33
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
                          1778	#996:  **********************************************************************************************************************/
                          1779	#998: /***********************************************************************************************************************
                          1780	#999:  *  FblDiagInitPowerOn
                          1781	#1000:  **********************************************************************************************************************/
                          1782	#1001: /*! \brief       Initialize module variables
                          1783	#1002:  **********************************************************************************************************************/
                          1784	#1003: void FblDiagInitPowerOn(void)
                          1785	#1004: {
                          1786	#1005:    vuint8 i;
                          1787	#1007:    /* Initialize diagnostic states */
                          1788	#1008:    for (i = 0u; i < (FBL_STATE_INDEX(kDiagNumberOfStates - 1u) + 1u); i++)
                          1789	#1009:    {
                          1790	#1010:       fblDiagStates[i] = (tFblStateBitmap)0x00u;
                          1791	#1011:    }
                          1792	#1013:    /* Initialize diagnostic variables */
                          1793	#1014:    memSegment = -1;
                          1794	#1015:    diagResponseFlag = kDiagResponseIdle;
                          1795	#1017:    DiagClrError();
                          1796	#1019:    serviceMainHandler = V_NULL;
                          1797	#1021:    /* Initialize diagnostic session */
                          1798	#1022:    SetDiagDefaultSession();   /* PRQA S 3109 */ /* MD_FblDiag_3109 */
                          1799	#1024:    /* Stop tester present timer */
                          1800	#1025:    StopTesterTimeout();
                          1801	#1027:    /* Clear timer for response pending transmission */
                          1802	#1028:    ClrP2Timer();
                          1803	#1030:    /* Make sure to turn off the programming voltage */
                          1804	#1031:    ApplFblResetVfp();
                          1805	#1033:    StopEcuResetTimeout();
                          1806	#1035: #if defined( FBL_DEF_ENABLE_NON_KB_MAIN )
                          1807	#1036: # if defined( FBL_ENABLE_SLEEPMODE )
                          1808	#1037:    /* Sleep Timer not running during startup */
                          1809	#1038:    FblSleepCounterClear();
                          1810	#1039: # endif
                          1811	#1040: #endif /* FBL_DEF_ENABLE_NON_KB_MAIN */
                          1812	#1042: #if defined( FBL_DIAG_ENABLE_OEM_SEGMENTNRGET )
                          1813	#1043: #else
                          1814	#1044:    /* FblMemSegmentNrGet caching - initialize cache with a valid entry */
                          1815	#1045:    cachedSegment = 0;
                          1816	#1046:    cachedBlock.begin = FlashBlock[0].begin;
                          1817	#1047:    cachedBlock.end = FlashBlock[0].end;
                          1818	#1048: #endif /* FBL_DIAG_ENABLE_OEM_SEGMENTNRGET */
                          1819	#1050: #if defined( FBL_DIAG_ENABLE_TASK_LOCKS )
                          1820	#1051:    diagTaskState = 0u;
                          1821	#1052: #endif /* FBL_DIAG_ENABLE_TASK_LOCKS */
                          1822	#1054: #if defined( FBL_DIAG_ENABLE_OEM_INITPOWERON )
                          1823	#1055:    /* OEM-specific initializations */
                          1824	#1056:    FblDiagOemInitPowerOn();
                          1825	#1057: #endif /* FBL_DIAG_ENABLE_OEM_INITPOWERON */
                          1826	#1058: }
                          1827	#1060: /***********************************************************************************************************************
                          1828	#1061:  *  FblDiagInit
                          1829	#1062:  **********************************************************************************************************************/
                          1830	#1063: /*! \brief       Initialize diagnostic module
                          1831	#1064:  *  \details     Sets the diagnostic module to default session and initializes depending modules. The diagnostic
                          1832	#1065:  *               module is working from here, but NV-memory dependent features are not available in all configurations.
                          1833	#1066:  **********************************************************************************************************************/

                                   Fri Apr 10 08:32:04 2020           Page 34
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
                          1834	#1067: void FblDiagInit(void)
                          1835	#1068: {
                          1836	#1070:    /* Get aligned diag buffer pointer from memory library */
                          1837	#1071:    DiagBuffer = FblMemInitPowerOn();
                          1838	#1073: #if defined( FBL_ENABLE_SEC_ACCESS_DELAY )
                          1839	#1074: # if defined( FBL_DIAG_ENABLE_CORE_READ_SECACCESSDELAY_FLAG )
                          1840	#1075: #  if defined( FBL_DEF_ENABLE_NON_KB_MAIN )
                          1841	#1076:    /* Pre-init security access delay status - no NV-memory available here */
                          1842	#1077:    SetSecurityAccessDelay();
                          1843	#1078: #  else
                          1844	#1079:    /* Initialize security access delay timer. NV-memory driver has to be initialized here */
                          1845	#1080:    if (ApplFblGetSecAccessDelayFlag())
                          1846	#1081:    {
                          1847	#1082:       SetSecurityAccessDelay();
                          1848	#1083:    }
                          1849	#1084:    else
                          1850	#1085:    {
                          1851	#1086:       ClrSecurityAccessDelay();
                          1852	#1087:    }
                          1853	#1088: #  endif /* FBL_DEF_ENABLE_NON_KB_MAIN */
                          1854	#1089: # endif /* FBL_DIAG_ENABLE_CORE_READ_SECACCESSDELAY_FLAG */
                          1855	#1090: #endif
                          1856	#1092: #if defined( FBL_ENABLE_DEBUG_STATUS )
                          1857	#1093:    /* Initialize error status */
                          1858	#1094:    ApplFblInitErrStatus();
                          1859	#1095: #endif
                          1860	#1097: #if defined ( FBL_DIAG_ENABLE_CORE_SEGMENTHANDLING )
                          1861	#1098:    /* Initialize segment counter */
                          1862	#1099:    FblDiagSegmentInit();
                          1863	#1100: #endif
                          1864	#1102:    /* Initialize security module */
                          1865	#1103:    (void)ApplFblSecurityInit();
                          1866	#1105:    /* Init ComWrapper */
                          1867	#1106:    FblCwSetTxInit();
                          1868	#1108: #if defined( FBL_DIAG_ENABLE_OEM_INIT )
                          1869	#1109:    /* OEM-specific initializations */
                          1870	#1110:    FblDiagOemInit();
                          1871	#1111: #endif /* FBL_DIAG_ENABLE_OEM_INIT */
                          1872	#1112: }
                          1873	#1114: #if defined( FBL_DEF_ENABLE_NON_KB_MAIN )
                          1874	#1115: /***********************************************************************************************************************
                          1875	#1116:  *  FblDiagPostInit
                          1876	#1117:  **********************************************************************************************************************/
                          1877	#1118: /*! \brief       Initialize diagnostic module
                          1878	#1119:  *  \details     Finishes the initialization of the diagnostic module. NV-memory dependent initialization can
                          1879	#1120:  *               be done here.
                          1880	#1121:  **********************************************************************************************************************/
                          1881	#1122: void FblDiagPostInit(void)
                          1882	#1123: {
                          1883	#1124: # if defined( FBL_ENABLE_RESPONSE_AFTER_RESET )
                          1884	#1125: vuint8 resetCauseRead;
                          1885	#1126: vuint8 resetCauseWrite;
                          1886	#1127: # endif
                          1887	#1129: # if defined( FBL_ENABLE_SEC_ACCESS_DELAY )
                          1888	#1130: #  if defined( FBL_DIAG_ENABLE_CORE_READ_SECACCESSDELAY_FLAG )
                          1889	#1131:    /* Initialize security access delay timer after nv-memory access is possible. */

                                   Fri Apr 10 08:32:04 2020           Page 35
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
                          1890	#1132:    if (!ApplFblGetSecAccessDelayFlag())
                          1891	#1133:    {
                          1892	#1134:       ClrSecurityAccessDelay();
                          1893	#1135:    }
                          1894	#1136: #  endif /* FBL_DIAG_ENABLE_CORE_READ_SECACCESSDELAY_FLAG */
                          1895	#1137: # endif
                          1896	#1139: # if defined( FBL_ENABLE_RESPONSE_AFTER_RESET )
                          1897	#1140:          /* Check if reset has been caused by diagnostic service
                          1898	#1141:           * StartDiagnosticSession (Default Session) or EcuReset */
                          1899	#1142:          if (   (kFblOk == ApplFblReadResetResponseFlag(&resetCauseRead))
                          1900	#1143:              && (resetCauseRead != RESET_RESPONSE_NOT_REQUIRED))
                          1901	#1144:          {
                          1902	#1145:             /* FBL started from reset
                          1903	#1146:              * Clear flag before sending response to be ready for the next request */
                          1904	#1147:             resetCauseWrite = RESET_RESPONSE_NOT_REQUIRED;
                          1905	#1149:             (void)ApplFblWriteResetResponseFlag(&resetCauseWrite);   /* PRQA S 3425 */ /* MD_FblDiag_3425 */
                          1906	#1151:             if (FblMainGetStartFromAppl())
                          1907	#1152:             {
                          1908	#1153:                /* Both reprogramming flag and reset response flag are set.
                          1909	#1154:                 * Clear reset response flag but prioritize the reprogramming flag. */
                          1910	#1155:                assertFblInternal(0u, kFblOemAssertInvalidError);  /* PRQA S 2214 */ /* MD_FblDiag_2214 */
                          1911	#1156:             }
                          1912	#1157:             else
                          1913	#1158:             {
                          1914	#1159:                /* Send response for StartDiagnosticSession or EcuReset request */
                          1915	#1160:                FblDiagInitStartFromReset(resetCauseRead);
                          1916	#1161:             }
                          1917	#1162:          }
                          1918	#1163: # endif /* FBL_ENABLE_RESPONSE_AFTER_RESET */
                          1919	#1165:          /* Send programming session request response */
                          1920	#1166:          if (FblMainGetStartFromAppl())
                          1921	#1167:          {
                          1922	#1168:             /* FBL started from application */
                          1923	#1169:             FblDiagInitStartFromAppl();
                          1924	#1170:          }
                          1925	#1172: # if defined( FBL_ENABLE_SLEEPMODE )
                          1926	#1173:          /* Initialize sleep mode counter */
                          1927	#1174:          FblSleepCounterReload();
                          1928	#1175: # endif
                          1929	#1177: # if defined( FBL_DIAG_ENABLE_OEM_POSTINIT )
                          1930	#1178:    /* OEM-specific initializations */
                          1931	#1179:    FblDiagOemPostInit();
                          1932	#1180: # endif /* FBL_DIAG_ENABLE_OEM_POSTINIT */
                          1933	#1181: }
                          1934	#1182: #endif /* FBL_DEF_ENABLE_NON_KB_MAIN */
                          1935	#1184: /***********************************************************************************************************************
                          1936	#1185:  *  FblDiagDeinit
                          1937	#1186:  **********************************************************************************************************************/
                          1938	#1187: /*! \brief       Function prepares for FBL shutdown on diagnostic service request.
                          1939	#1188:  **********************************************************************************************************************/
                          1940		.align	1
                          1941		.align	1
                          1942	..gh.f.p.0.a.1.r.0.e.5:
                          1943		.type	..gh.f.p.0.a.1.r.0.e.5,@object
                          1944		.size	..gh.f.p.0.a.1.r.0.e.5,0
                          1945		.global	FblDiagDeinit..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_diag_core.

                                   Fri Apr 10 08:32:04 2020           Page 36
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
                          1946	FblDiagDeinit..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_diag_core.:
                          1947	FblDiagDeinit:
0000029c 182106f0         1948		e_stwu	sp, -16(sp)
000002a0 0080             1949		se_mflr	r0
000002a2 d3f1             1950		se_stw	r31, 12(sp)
000002a4 d501             1951		se_stw	r0, 20(sp)
                          1952	#	    .bf
                          1953	.LDW02:
                          1954	#1189: static void FblDiagDeinit(void)
                          1955	#1190: {
                          1956	#1191:    /* Discard pending FblLib_Mem tasks */
                          1957	#1192:    FblMemDeinit();
000002a6 78000001         1958		e_bl	FblMemDeinit
                          1959	#1194: #if defined( FBL_DIAG_ENABLE_OEM_DEINIT )
                          1960	#1195:    /* Shutdown OEM-specific service handling */
                          1961	#1196:    FblDiagOemDeinit();
                          1962	#1197: #endif /* FBL_DIAG_ENABLE_OEM_DEINIT */
                          1963	#1199:    if (GetDiagProgrammingSession())
000002aa 73e0e000         1964		e_lis	r31, %hiadj(fblDiagStates)
000002ae 1fff0000         1965		e_add16i	r31, r31, %lo(fblDiagStates)
000002b2 c00f             1966		se_lwz	r0, 0(r31)
000002b4 67d0             1967		se_btsti	r0, 29
000002b6 e600             1968		se_beq	.L835
                          1969	#1200:    {
                          1970	#1201:       /* ECU programming mode is active */
                          1971	#1202:       ClrDiagProgrammingSession();
                          1972	#line1202
                          1973	..lin.1e9356d..1eb5116b.0_29::
                          1974	.LDWlin29:
000002b8 61d0             1975		se_bclri	r0, 29
000002ba d00f             1976		se_stw	r0, 0(r31)
                          1977	#1203:       if (GetMemDriverInitialized())
000002bc 66e0             1978		se_btsti	r0, 14
000002be e600             1979		se_beq	.L837
                          1980	#1204:       {
                          1981	#1205:          /* Remove memory driver from RAM-buffer */
                          1982	#1206:          FblCwSetOfflineMode();
                          1983	#1208:          (void)MemDriver_DeinitSync(V_NULL);
                          1984	#line1208
                          1985	..lin.1e9356d..1eb5116b.0_30::
                          1986	.LDWlin30:
000002c0 4803             1987		se_li	r3, 0
000002c2 78000001         1988		e_bl	MemDriver_RDeinitSync
                          1989	#1210:          FblCwSetOnlineMode();
                          1990	#1212:          /* Reinitialize memory driver flash */
                          1991	#1213:          ClrMemDriverInitialized();
000002c6 c00f             1992		se_lwz	r0, 0(r31)
000002c8 60e0             1993		se_bclri	r0, 14
000002ca d00f             1994		se_stw	r0, 0(r31)
                          1995	.L837:
                          1996	#1214:       }
                          1997	#1216:       /* Turn off programming voltage */
                          1998	#1217:       ApplFblResetVfp();
000002cc 78000001         1999		e_bl	ApplFblResetVfp
                          2000	.L835:
                          2001	#1218:    }

                                   Fri Apr 10 08:32:04 2020           Page 37
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
                          2002	#1220:    ClrWaitEcuReset();   /* PRQA S 3109 */ /* MD_FblDiag_3109 */
000002d0 c00f             2003		se_lwz	r0, 0(r31)
000002d2 70e0e000         2004		e_lis	r7, %hiadj(ecuResetTimeout)
000002d6 6120             2005		se_bclri	r0, 18
000002d8 d00f             2006		se_stw	r0, 0(r31)
000002da 4800             2007		se_li	r0, 0
000002dc 5c070000         2008		e_sth	r0, %lo(ecuResetTimeout)(r7)
                          2009	#1222:    /* Clear all flags for service handling */
                          2010	#1223:    FblDiagResetServiceFlags();
000002e0 e900             2011		se_bl	FblDiagResetServiceFlags
                          2012	#line1226
                          2013	..lin.1e9356d..1eb5116b.0_31::
                          2014	.LDWlin31:
000002e2 70c0e000         2015		e_lis	r6, %hiadj(fblMainStates)
000002e6 50e60000         2016		e_lwz	r7, %lo(fblMainStates)(r6)
                          2017	#1225:    /* Request shutdown from ComWrapper */
                          2018	#1226:    FblCwShutdownRequest(kFblCwResetEcuRegularCase);
000002ea 6597             2019		se_bseti	r7, 25
000002ec 54e60000         2020		e_stw	r7, %lo(fblMainStates)(r6)
                          2021	#1227: }
                          2022	#	    .ef
                          2023	.LDW12:
000002f0 c501             2024		se_lwz	r0, 20(sp)
000002f2 c3f1             2025		se_lwz	r31, 12(sp)
000002f4 20f1             2026		se_addi	sp, 16
000002f6 0090             2027		se_mtlr	r0
000002f8 0004             2028		se_blr
                          2029	__ghs_eofn_FblDiagDeinit:
                          2030		.type	FblDiagDeinit,@function
                          2031		.size	FblDiagDeinit,$-FblDiagDeinit
                          2032		.type	FblDiagDeinit..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_diag_core.,@function
                          2033		.size	FblDiagDeinit..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_diag_core.,$-FblDiagDeinit..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_diag_core.
                          2034		.align	1
                          2035	
                          2036	#function:			FblDiagDeinit
                          2037	#stack frame size:		16
                          2038	#link area offset:		0
                          2039	#local storage area offset:	12
                          2040	#gpr save area offset:		12
                          2041	#
                          2042	
                          2043		.data
                          2044		.section ".vletext", "vax"
                          2045		.vle
                          2046		.vle
                          2047	
                          2048	
                          2049		.align	1
                          2050		.align	1
                          2051	..gh.f.p.0.a.1.r.0.e.6:
                          2052		.type	..gh.f.p.0.a.1.r.0.e.6,@object
                          2053		.size	..gh.f.p.0.a.1.r.0.e.6,0
                          2054		.global	FblDiagEcuReset
                          2055	FblDiagEcuReset:
                          2056	#	    .bf
                          2057	.LDW22:

                                   Fri Apr 10 08:32:04 2020           Page 38
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
                          2058	#412: void FblDiagEcuReset(void)
                          2059	#413: {
                          2060	#414:    /* Disable tester present timeout monitoring */
                          2061	#415:    StopTesterTimeout();
000002fa 4800             2062		se_li	r0, 0
000002fc 70e0e000         2063		e_lis	r7, %hiadj(testerPresentTimeout)
00000300 5c070000         2064		e_sth	r0, %lo(testerPresentTimeout)(r7)
                          2065	#417:    /* Do not transmit response message */
                          2066	#418:    DiagSetNoResponse();
00000304 70e0e000         2067		e_lis	r7, %hiadj(diagResponseFlag)
00000308 1ce70000         2068		e_add16i	r7, r7, %lo(diagResponseFlag)
0000030c 8007             2069		se_lbz	r0, 0(r7)
0000030e 65e0             2070		se_bseti	r0, 30
00000310 9007             2071		se_stb	r0, 0(r7)
                          2072	#419:    FblDiagDeinit();
00000312 e800             2073		se_b	FblDiagDeinit
                          2074	#420: }
                          2075	#	    .ef
                          2076	.LDW32:
                          2077	..lin.1e9356d..c8d84ae.0_32::
                          2078	.LDWlin32:
                          2079		.global	__ghs_eofn_FblDiagEcuReset
                          2080	__ghs_eofn_FblDiagEcuReset:
                          2081		.type	FblDiagEcuReset,@function
                          2082		.size	FblDiagEcuReset,$-FblDiagEcuReset
                          2083		.align	1
                          2084	
                          2085	#function:			FblDiagEcuReset
                          2086	#stack frame size:		0
                          2087	#
                          2088	
                          2089		.data
                          2090		.section ".vletext", "vax"
                          2091		.vle
                          2092		.vle
                          2093	
                          2094	
                          2095	#422: /***********************************************************************************************************************
                          2096	#423:  *  END OF DIAGNOSTIC SERVICE MANAGEMENT HANDLERS
                          2097	#424:  **********************************************************************************************************************/
                          2098	#426: /***********************************************************************************************************************
                          2099	#427:  *  DIAGNOSTIC SUPPORT FUNCTIONS
                          2100	#428:  **********************************************************************************************************************/
                          2101	#430: /***********************************************************************************************************************
                          2102	#431:  *  Global diagnostic support functions (OEM independent)
                          2103	#432:  **********************************************************************************************************************/
                          2104	#434: /***********************************************************************************************************************
                          2105	#435:  *  FblDiagSetError
                          2106	#436:  **********************************************************************************************************************/
                          2107	#437: /*! \brief       Sets the corresponding error code for the currently active service
                          2108	#438:  *  \param[in]   errorCode Negative response code
                          2109	#439:  **********************************************************************************************************************/
                          2110		.align	1
                          2111		.align	1
                          2112	..gh.f.p.3.a.1.r.0.e.7:
                          2113		.type	..gh.f.p.3.a.1.r.0.e.7,@object

                                   Fri Apr 10 08:32:04 2020           Page 39
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
                          2114		.size	..gh.f.p.3.a.1.r.0.e.7,0
                          2115		.global	FblDiagSetError
                          2116	FblDiagSetError:
                          2117	#	    .bf
                          2118	.LDW42:
                          2119	#440: void FblDiagSetError( vuint8 errorCode )
                          2120	#441: {
                          2121	#442:    diagErrorCode = errorCode;
00000314 70e0e000         2122		e_lis	r7, %hiadj(diagErrorCode)
00000318 34670000         2123		e_stb	r3, %lo(diagErrorCode)(r7)
0000031c 70e0e000         2124		e_lis	r7, %hiadj(fblDiagStates)
00000320 50e70000         2125		e_lwz	r7, %lo(fblDiagStates)(r7)
                          2126	#444:    /* No negative response for functional requests with these error codes */
                          2127	#445:    if (    (GetFunctionalRequest())
00000324 67c7             2128		se_btsti	r7, 28
00000326 e600             2129		se_beq	.L962
00000328 6777             2130		se_btsti	r7, 23
0000032a e200             2131		se_bne	.L962
0000032c 2b13             2132		se_cmpi	r3, 17
0000032e e600             2133		se_beq	.L963
00000330 2b23             2134		se_cmpi	r3, 18
00000332 e600             2135		se_beq	.L963
00000334 1803a831         2136		e_cmpi	r3, 49
00000338 e200             2137		se_bne	.L962
                          2138	.L963:
                          2139	#446:         && (!GetRcrRpInProgress())
                          2140	#447:         && (   (errorCode == kDiagNrcServiceNotSupported )
                          2141	#448:             || (errorCode == kDiagNrcSubFunctionNotSupported )
                          2142	#449:             || (errorCode == kDiagNrcRequestOutOfRange )
                          2143	#450: #if defined( FBL_DIAG_ENABLE_14229_2013 )
                          2144	#451:             || (errorCode == kDiagNrcSubfunctionNotSupportedInActiveSession)
                          2145	#452:             || (errorCode == kDiagNrcServiceNotSupportedInActiveSession)
                          2146	#453: #endif /* FBL_DIAG_ENABLE_14229_2013 */
                          2147	#454:            )
                          2148	#455:       )
                          2149	#456:    {
                          2150	#457:      DiagSetNoResponse();
                          2151	#line457
                          2152	..lin.1e9356d..8ee25944.0_33::
                          2153	.LDWlin33:
0000033a 4827             2154		se_li	r7, 2
0000033c e800             2155		se_b	.L996
                          2156	.L962:
                          2157	#458:    }
                          2158	#459:    else
                          2159	#460:    {
                          2160	#461:       /* Send negative response for all other cases */
                          2161	#462:       diagResponseFlag |= kDiagPutNegResponse;
                          2162	#line462
                          2163	..lin.1e9356d..8ee25944.0_34::
                          2164	.LDWlin34:
0000033e 4887             2165		se_li	r7, 8
                          2166	.L996:
00000340 70c0e000         2167		e_lis	r6, %hiadj(diagResponseFlag)
00000344 1cc60000         2168		e_add16i	r6, r6, %lo(diagResponseFlag)
00000348 8006             2169		se_lbz	r0, 0(r6)

                                   Fri Apr 10 08:32:04 2020           Page 40
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
0000034a 4470             2170		se_or	r0, r7
0000034c 9006             2171		se_stb	r0, 0(r6)
                          2172	#463:    }
                          2173	#464: }
                          2174	#	    .ef
                          2175	.LDW52:
0000034e 0004             2176		se_blr
                          2177		.global	__ghs_eofn_FblDiagSetError
                          2178	__ghs_eofn_FblDiagSetError:
                          2179		.type	FblDiagSetError,@function
                          2180		.size	FblDiagSetError,$-FblDiagSetError
                          2181		.align	1
                          2182	
                          2183	#function:			FblDiagSetError
                          2184	#stack frame size:		0
                          2185	#
                          2186	
                          2187	#errorCode	r3	param
                          2188	
                          2189		.data
                          2190		.section ".vletext", "vax"
                          2191		.vle
                          2192		.vle
                          2193	
                          2194	
                          2195	#466: /***********************************************************************************************************************
                          2196	#467:  *  FblRealTimeSupport
                          2197	#468:  **********************************************************************************************************************/
                          2198	#469: /*! \brief       Transmit busy messages and triggers the watchdog according to system timer.
                          2199	#470:  *  \pre         Diagnosis and communication stack must be initialized, diagnostic request has to be received.
                          2200	#471:  **********************************************************************************************************************/
                          2201	#472: vuint8 FblRealTimeSupport( void )
                          2202	#473: {
                          2203	#474:    vuint8 returnCode;
                          2204	#476:    returnCode = (vuint8)FblLookForWatchdog();
                          2205	#477:    DiagExRCRResponsePending(kNotForceSendResponsePending);
                          2206	#478:    return returnCode;
                          2207	#479: }
                          2208	#481: /***********************************************************************************************************************
                          2209	#482:  *  DiagExRCRResponsePending
                          2210	#483:  **********************************************************************************************************************/
                          2211	#484: /*! \brief       Transmit a busy message if timer expires
                          2212	#485:  *  \details     (forceSend == kNotForceSendResponsePending) or if kForceSendResponsePending is passed.
                          2213	#486:  *  \param[in]   forceSend Determines if a message is sent independently from timer state
                          2214	#487:  **********************************************************************************************************************/
                          2215	#488: void DiagExRCRResponsePending( vuint8 forceSend )
                          2216	#489: {
                          2217	#490:    /* Only send response pending if service is in progress */
                          2218	#491:    if (GetRcrRpAllowed())
                          2219	#492:    {
                          2220	#493:       /* Conditions to send an RCR-RP if P2-timer expired
                          2221	#494:        * or parameter contains kForceSendResponsePending */
                          2222	#495:       if ((forceSend == kForceSendResponsePending)
                          2223	#496:             || ((forceSend == kForceSendRpIfNotInProgress) && (!GetRcrRpInProgress()))
                          2224	#497:             || (GetP2Timer() < (GetRcrRpInProgress() ? kFblDiagP2StarMinThreshold : kFblDiagP2MinThreshold)) )
                          2225	#498:       {

                                   Fri Apr 10 08:32:04 2020           Page 41
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
                          2226	#499:          /* Prepare parameter for the Diag-confirmation function */
                          2227	#500:          diagPostParam = kDiagPostRcrRp;
                          2228	#502:          /* Prepare and transmit RCRRP buffer */
                          2229	#503:          rcrrpBuffer[0] = kDiagRidNegativeResponse;
                          2230	#504:          rcrrpBuffer[1] = diagServiceCurrent;
                          2231	#505:          rcrrpBuffer[2] = kDiagNrcRcrResponsePending;
                          2232	#506:          FblCwTransmitRP(rcrrpBuffer);
                          2233	#508:          /* Restart P2-Timer to P2* */
                          2234	#509:          SetP2Timer(kFblDiagTimeP2Star);
                          2235	#511:          /* If response pending is transmitted and no response
                          2236	#512:           * is set, a positive response has to be transmitted anyway. */
                          2237	#513:          diagResponseFlag &= FblInvert8Bit(kDiagPutNoResponse);
                          2238	#515:          SetRcrRpInProgress();
                          2239	#516:       }
                          2240	#517:    }
                          2241	#518: }
                          2242	#521: #if defined( FBL_DIAG_ENABLE_OEM_SEGMENTNRGET )
                          2243	#522: #else
                          2244	#523: /***********************************************************************************************************************
                          2245	#524:  *  FblMemSegmentNrGet
                          2246	#525:  **********************************************************************************************************************/
                          2247	#526: /*! \brief       Get the number of the corresponding flash block for the given address
                          2248	#527:  *  \return      Index of flash block; -1, if not found
                          2249	#528:  *  \param[in]   address
                          2250	#529:  **********************************************************************************************************************/
                          2251	#530: vsint16 FblMemSegmentNrGet( tFblAddress address )
                          2252	#531: {
                          2253	#532:    vsint16 segment;
                          2254	#534:    /* Check address against cached range */
                          2255	#535:    if (   ( address >= cachedBlock.begin )
                          2256	#536:        && ( address <= cachedBlock.end )
                          2257	#537:       )
                          2258	#538:    {
                          2259	#539:       /* Range matches, finish processing and return cached segment */
                          2260	#540:       segment = cachedSegment;
                          2261	#541:    }
                          2262	#542:    else
                          2263	#543:    {
                          2264	#544:       /* Search matching flash block */
                          2265	#545:       for (nextValidSegment = 0; nextValidSegment < (vsint16)kNrOfFlashBlock; nextValidSegment++)
                          2266	#546:       {
                          2267	#547:          /* Reduced number of watchdog trigger calls */
                          2268	#548:          if (((vuint8)nextValidSegment & (vuint8)0x0Fu) == (vuint8)0x00u)
                          2269	#549:          {
                          2270	#550:             (void)FblRealTimeSupport();
                          2271	#551:          }
                          2272	#553:          /* Found first potential match */
                          2273	#554:          if (FlashBlock[nextValidSegment].end >= address)
                          2274	#555:          {
                          2275	#556:             break;
                          2276	#557:          }
                          2277	#558:       }
                          2278	#560:       /* Valid match found */
                          2279	#561:       if (nextValidSegment < (vsint16)kNrOfFlashBlock)
                          2280	#562:       {
                          2281	#563:          if (address >= FlashBlock[nextValidSegment].begin)

                                   Fri Apr 10 08:32:04 2020           Page 42
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
                          2282	#564:          {
                          2283	#565:             /* Address lies within block => valid segment */
                          2284	#566:             segment = nextValidSegment;
                          2285	#568:             /* Cache current match */
                          2286	#569:             cachedBlock.begin = FlashBlock[segment].begin;
                          2287	#570:             cachedBlock.end = FlashBlock[segment].end;
                          2288	#571:          }
                          2289	#572:          else
                          2290	#573:          {
                          2291	#574:             /* Address lies in front of block => gap detected */
                          2292	#575:             segment = -1;
                          2293	#577:             /* Cache current gap */
                          2294	#578:             if (nextValidSegment <= 0)
                          2295	#579:             {
                          2296	#580:                /* First block, gap starts at beginning of address space */
                          2297	#581:                cachedBlock.begin = 0x00u;
                          2298	#582:             }
                          2299	#583:             else
                          2300	#584:             {
                          2301	#585:                /* Gap starts after end of previous block */
                          2302	#586:                cachedBlock.begin = FlashBlock[nextValidSegment - 1].end + 1;
                          2303	#587:             }
                          2304	#588:             /* Gap ends in front of current segment */
                          2305	#589:             cachedBlock.end = FlashBlock[nextValidSegment].begin - 1;
                          2306	#590:          }
                          2307	#591:       }
                          2308	#592:       else
                          2309	#593:       {
                          2310	#594:          /* Address lies behind last block => gap detected */
                          2311	#595:          segment = -1;
                          2312	#597:          /* Cache current gap
                          2313	#598:           * Gap starts after end of previous block */
                          2314	#599:          cachedBlock.begin = FlashBlock[kNrOfFlashBlock - 1u].end + 1u;
                          2315	#600:          /* Gap ends at end of address space */
                          2316	#601:          /* PRQA S 0277 1 */ /* MD_FblDiag_0277 */
                          2317	#602:          cachedBlock.end = (tFblAddress) - 1;   /* Note: The correct conversion is guaranteed by the C standard */
                          2318	#603:       }
                          2319	#605:       /* Cache current segment for next request */
                          2320	#606:       cachedSegment = segment;
                          2321	#607:    }
                          2322	#609:    return segment;
                          2323	#610: }
                          2324	#611: #endif /* FBL_DIAG_ENABLE_OEM_SEGMENTNRGET */
                          2325	#613: /***********************************************************************************************************************
                          2326	#614:  *  FblDiagMemGetActiveBuffer
                          2327	#615:  **********************************************************************************************************************/
                          2328	#616: /*! \brief       Function updates core Diagnostic buffer (DiagBuffer) and returns updated pbDiagData to handler
                          2329	#617:  *  \return      updated pbDiagData buffer used by diagnostic handler functions *
                          2330	#618:  **********************************************************************************************************************/
                          2331		.align	1
                          2332		.align	1
                          2333	..gh.f.p.0.a.1.r.0.e.8:
                          2334		.type	..gh.f.p.0.a.1.r.0.e.8,@object
                          2335		.size	..gh.f.p.0.a.1.r.0.e.8,0
                          2336		.global	FblDiagMemGetActiveBuffer
                          2337	FblDiagMemGetActiveBuffer:

                                   Fri Apr 10 08:32:04 2020           Page 43
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
00000350 0080             2338		se_mflr	r0
00000352 d101             2339		se_stw	r0, 4(sp)
00000354 182106f8         2340		e_stwu	sp, -8(sp)
                          2341	#	    .bf
                          2342	.LDW62:
                          2343	#619: V_MEMRAM1 vuint8 V_MEMRAM2 V_MEMRAM3 * FblDiagMemGetActiveBuffer(void)
                          2344	#620: {
                          2345	#621:    DiagBuffer = FblMemGetActiveBuffer();
00000358 78000001         2346		e_bl	FblMemGetActiveBuffer
0000035c 70e0e000         2347		e_lis	r7, %hiadj(DiagBuffer)
00000360 54670000         2348		e_stw	r3, %lo(DiagBuffer)(r7)
                          2349	#622:    return &DiagBuffer[kDiagFmtpbDiagData];
00000364 2003             2350		se_addi	r3, 1
                          2351	#	    .ef
                          2352	.LDW72:
00000366 c301             2353		se_lwz	r0, 12(sp)
00000368 2071             2354		se_addi	sp, 8
0000036a 0090             2355		se_mtlr	r0
0000036c 0004             2356		se_blr
                          2357		.global	__ghs_eofn_FblDiagMemGetActiveBuffer
                          2358	__ghs_eofn_FblDiagMemGetActiveBuffer:
                          2359		.type	FblDiagMemGetActiveBuffer,@function
                          2360		.size	FblDiagMemGetActiveBuffer,$-FblDiagMemGetActiveBuffer
                          2361		.align	1
                          2362	
                          2363	#function:			FblDiagMemGetActiveBuffer
                          2364	#stack frame size:		8
                          2365	#link area offset:		0
                          2366	#local storage area offset:	8
                          2367	#
                          2368	
                          2369		.data
                          2370		.section ".vletext", "vax"
                          2371		.vle
                          2372		.vle
                          2373	
                          2374	#623: }
                          2375	
                          2376	#625: #if defined( FBL_DIAG_ENABLE_CORE_RANGECHECKS )
                          2377	#626: /***********************************************************************************************************************
                          2378	#627:  *  FblCheckAddressRange
                          2379	#628:  **********************************************************************************************************************/
                          2380	#629: /*! \brief       Check whether an address lies within a specified address range
                          2381	#630:  *  \param[in]   address Address to be checked
                          2382	#631:  *  \param[in]   rangeStart Start of range
                          2383	#632:  *  \param[in]   rangeLength Length of range
                          2384	#633:  *  \return      kFblOk if address lies within range, kFblFailed otherwise
                          2385	#634:  **********************************************************************************************************************/
                          2386		.align	1
                          2387		.align	1
                          2388	..gh.f.p.5.a.1.r.0.e.9:
                          2389		.type	..gh.f.p.5.a.1.r.0.e.9,@object
                          2390		.size	..gh.f.p.5.a.1.r.0.e.9,0
                          2391		.global	FblCheckAddressRange
                          2392	FblCheckAddressRange:
                          2393	#	    .bf

                                   Fri Apr 10 08:32:04 2020           Page 44
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
                          2394	.LDW82:
                          2395	#635: tFblResult FblCheckAddressRange( tFblAddress address, tFblAddress rangeStart, tFblLength rangeLength )
                          2396	#636: {
                          2397	#637:    tFblResult result;
                          2398	#639:    result = kFblFailed;
0000036e 4810             2399		se_li	r0, 1
                          2400	#641:    if ((address >= rangeStart)
00000370 0d43             2401		se_cmpl	r3, r4
00000372 e400             2402		se_blt	.L1122
00000374 0734             2403		se_subf	r4, r3
00000376 0d54             2404		se_cmpl	r4, r5
00000378 7c00001e         2405		isellt	r0, r0, r0
0000037c 00c0             2406		se_extzb	r0
                          2407	.L1122:
                          2408	#642:         && ((address - rangeStart) < rangeLength))
                          2409	#643:    {
                          2410	#644:       result = kFblOk;
                          2411	#645:    }
                          2412	#647:    return result;
                          2413	#line647
                          2414	..lin.1e9356d..5a03c5aa.0_35::
                          2415	.LDWlin35:
0000037e 0103             2416		se_mr	r3, r0
                          2417	#	    .ef
                          2418	.LDW92:
00000380 0004             2419		se_blr
                          2420		.global	__ghs_eofn_FblCheckAddressRange
                          2421	__ghs_eofn_FblCheckAddressRange:
                          2422		.type	FblCheckAddressRange,@function
                          2423		.size	FblCheckAddressRange,$-FblCheckAddressRange
                          2424		.align	1
                          2425	
                          2426	#function:			FblCheckAddressRange
                          2427	#stack frame size:		0
                          2428	#
                          2429	#result	r0	local
                          2430	
                          2431	#address	r3	param
                          2432	#rangeStart	r4	param
                          2433	#rangeLength	r5	param
                          2434	
                          2435		.data
                          2436		.section ".vletext", "vax"
                          2437		.vle
                          2438		.vle
                          2439	
                          2440	#648: }
                          2441	
                          2442	#650: /***********************************************************************************************************************
                          2443	#651:  *  FblCheckRangeContained
                          2444	#652:  **********************************************************************************************************************/
                          2445	#653: /*! \brief       Check whether an address range lies within another specified address range
                          2446	#654:  *  \details     This function checks if the range specified with address and length lies within the
                          2447	#655:  *               enclosing range specified by rangeStart and rangeLength.
                          2448	#656:  *  \param[in]   address Start address of range to be checked
                          2449	#657:  *  \param[in]   length Length of range to be checked

                                   Fri Apr 10 08:32:04 2020           Page 45
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
                          2450	#658:  *  \param[in]   rangeStart Start of range
                          2451	#659:  *  \param[in]   rangeLength Length of range
                          2452	#660:  *  \return      kFblOk if range lies within range, kFblFailed otherwise
                          2453	#661:  **********************************************************************************************************************/
                          2454		.align	1
                          2455		.align	1
                          2456	..gh.f.p.6.a.1.r.0.e.10:
                          2457		.type	..gh.f.p.6.a.1.r.0.e.10,@object
                          2458		.size	..gh.f.p.6.a.1.r.0.e.10,0
                          2459		.global	FblCheckRangeContained
                          2460	FblCheckRangeContained:
00000382 182106e8         2461		e_stwu	sp, -24(sp)
00000386 0080             2462		se_mflr	r0
00000388 1ba1090c         2463		e_stmw	r29, 12(sp)
0000038c d701             2464		se_stw	r0, 28(sp)
0000038e 014f             2465		se_mr	r31, r4
00000390 0157             2466		se_mr	r7, r5
                          2467	#	    .bf
                          2468	.LDW03:
                          2469	#662: tFblResult FblCheckRangeContained( tFblAddress address, tFblLength length, tFblAddress rangeStart, tFblLength rangeLength )
                          2470	#663: {
                          2471	#664:    tFblResult result;
                          2472	#666:    result = kFblFailed;
00000392 481e             2473		se_li	r30, 1
                          2474	#668:    if ((FblCheckAddressRange(address, rangeStart, rangeLength) == kFblOk)
00000394 0154             2475		se_mr	r4, r5
00000396 013d             2476		se_mr	r29, r3
00000398 0165             2477		se_mr	r5, r6
0000039a e900             2478		se_bl	FblCheckAddressRange
0000039c 2a03             2479		se_cmpi	r3, 0
0000039e e200             2480		se_bne	.L1196
000003a0 0d6f             2481		se_cmpl	r31, r6
000003a2 e500             2482		se_bgt	.L1196
000003a4 07d7             2483		se_subf	r7, r29
000003a6 076f             2484		se_subf	r31, r6
000003a8 4800             2485		se_li	r0, 0
000003aa 0df7             2486		se_cmpl	r7, r31
000003ac 7fde005e         2487		iselgt	r30, r30, r0
000003b0 00ce             2488		se_extzb	r30
                          2489	.L1196:
                          2490	#669:        && (length <= rangeLength)
                          2491	#670:        && ((address - rangeStart) <= (rangeLength - length)))
                          2492	#671:    {
                          2493	#672:       result = kFblOk;
                          2494	#673:    }
                          2495	#675:    return result;
                          2496	#line675
                          2497	..lin.1e9356d..28229e99.0_36::
                          2498	.LDWlin36:
000003b2 01e3             2499		se_mr	r3, r30
                          2500	#	    .ef
                          2501	.LDW13:
000003b4 c701             2502		se_lwz	r0, 28(sp)
000003b6 1ba1080c         2503		e_lmw	r29, 12(sp)
000003ba 2171             2504		se_addi	sp, 24
000003bc 0090             2505		se_mtlr	r0

                                   Fri Apr 10 08:32:04 2020           Page 46
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
000003be 0004             2506		se_blr
                          2507		.global	__ghs_eofn_FblCheckRangeContained
                          2508	__ghs_eofn_FblCheckRangeContained:
                          2509		.type	FblCheckRangeContained,@function
                          2510		.size	FblCheckRangeContained,$-FblCheckRangeContained
                          2511		.align	1
                          2512	
                          2513	#function:			FblCheckRangeContained
                          2514	#stack frame size:		24
                          2515	#link area offset:		0
                          2516	#local storage area offset:	12
                          2517	#gpr save area offset:		12
                          2518	#
                          2519	#result	r30	local
                          2520	
                          2521	#address	r29	param
                          2522	#length	r31	param
                          2523	#rangeStart	r7	param
                          2524	#rangeLength	r6	param
                          2525	
                          2526		.data
                          2527		.section ".vletext", "vax"
                          2528		.vle
                          2529		.vle
                          2530	
                          2531	#676: }
                          2532	
                          2533	#677: #endif /* FBL_DIAG_ENABLE_CORE_RANGECHECKS */
                          2534	#679: /***********************************************************************************************************************
                          2535	#680:  *  Local diagnostic support functions (OEM independent)
                          2536	#681:  **********************************************************************************************************************/
                          2537	#683: /***********************************************************************************************************************
                          2538	#684:  *  DiagProcessingDone
                          2539	#685:  **********************************************************************************************************************/
                          2540	#686: /*! \brief       Prepare positive response.
                          2541	#687:  *  \details     Prepares the positive response for the currently processed service.
                          2542	#688:  *  \pre         Service must be in progress
                          2543	#689:  *  \param[in]   dataLength Data length to be transmitted (excluding the service-id itself).
                          2544	#690:  **********************************************************************************************************************/
                          2545		.align	1
                          2546		.align	1
                          2547	..gh.f.p.3.a.1.r.0.e.11:
                          2548		.type	..gh.f.p.3.a.1.r.0.e.11,@object
                          2549		.size	..gh.f.p.3.a.1.r.0.e.11,0
                          2550		.global	DiagProcessingDone
                          2551	DiagProcessingDone:
                          2552	#	    .bf
                          2553	.LDW23:
                          2554	#691: void DiagProcessingDone( tCwDataLengthType dataLength )
                          2555	#692: {
                          2556	#693:    diagResponseFlag |= kDiagPutPosResponse;
000003c0 70e0e000         2557		e_lis	r7, %hiadj(diagResponseFlag)
000003c4 1ce70000         2558		e_add16i	r7, r7, %lo(diagResponseFlag)
000003c8 8007             2559		se_lbz	r0, 0(r7)
000003ca 65d0             2560		se_bseti	r0, 29
000003cc 9007             2561		se_stb	r0, 0(r7)

                                   Fri Apr 10 08:32:04 2020           Page 47
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
                          2562	#694:    diagResLen        = dataLength;
000003ce 70e0e000         2563		e_lis	r7, %hiadj(diagResLen)
000003d2 5c670000         2564		e_sth	r3, %lo(diagResLen)(r7)
                          2565	#695: }
                          2566	#	    .ef
                          2567	.LDW33:
000003d6 0004             2568		se_blr
                          2569		.global	__ghs_eofn_DiagProcessingDone
                          2570	__ghs_eofn_DiagProcessingDone:
                          2571		.type	DiagProcessingDone,@function
                          2572		.size	DiagProcessingDone,$-DiagProcessingDone
                          2573		.align	1
                          2574	
                          2575	#function:			DiagProcessingDone
                          2576	#stack frame size:		0
                          2577	#
                          2578	
                          2579	#dataLength	r3	param
                          2580	
                          2581		.data
                          2582		.section ".vletext", "vax"
                          2583		.vle
                          2584		.vle
                          2585	
                          2586	
                          2587	#697: /***********************************************************************************************************************
                          2588	#698:  *  FblDiagDiscardReception
                          2589	#699:  **********************************************************************************************************************/
                          2590	#700: /*! \brief       Received diagnostic messages are discarded
                          2591	#701:  *  \details     Discards all messages which have been received during a service is processed.
                          2592	#702:  **********************************************************************************************************************/
                          2593		.align	1
                          2594		.align	1
                          2595	..gh.f.p.0.a.1.r.0.e.12:
                          2596		.type	..gh.f.p.0.a.1.r.0.e.12,@object
                          2597		.size	..gh.f.p.0.a.1.r.0.e.12,0
                          2598		.global	FblDiagDiscardReception..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_diag_core.
                          2599	FblDiagDiscardReception..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_diag_core.:
                          2600	FblDiagDiscardReception:
000003d8 182106f0         2601		e_stwu	sp, -16(sp)
000003dc 0080             2602		se_mflr	r0
000003de d3f1             2603		se_stw	r31, 12(sp)
000003e0 d501             2604		se_stw	r0, 20(sp)
                          2605	#	    .bf
                          2606	.LDW43:
                          2607	#703: static void FblDiagDiscardReception( void )
                          2608	#704: {
                          2609	#705:    SetResponseProcessing();   /* Set flag for running response procedure */
000003e2 73e0e000         2610		e_lis	r31, %hiadj(fblDiagStates)
000003e6 1fff0000         2611		e_add16i	r31, r31, %lo(fblDiagStates)
000003ea c00f             2612		se_lwz	r0, 0(r31)
000003ec 6540             2613		se_bseti	r0, 20
000003ee d00f             2614		se_stw	r0, 0(r31)
                          2615	#707:    FblCwDiscardReception();
000003f0 78000001         2616		e_bl	FblCwDiscardReception
                          2617	#708:    ClrResponseProcessing();

                                   Fri Apr 10 08:32:04 2020           Page 48
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
000003f4 c00f             2618		se_lwz	r0, 0(r31)
000003f6 6140             2619		se_bclri	r0, 20
000003f8 d00f             2620		se_stw	r0, 0(r31)
                          2621	#709: }
                          2622	#	    .ef
                          2623	.LDW53:
000003fa c501             2624		se_lwz	r0, 20(sp)
000003fc c3f1             2625		se_lwz	r31, 12(sp)
000003fe 20f1             2626		se_addi	sp, 16
00000400 0090             2627		se_mtlr	r0
00000402 0004             2628		se_blr
                          2629	__ghs_eofn_FblDiagDiscardReception:
                          2630		.type	FblDiagDiscardReception,@function
                          2631		.size	FblDiagDiscardReception,$-FblDiagDiscardReception
                          2632		.type	FblDiagDiscardReception..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_diag_core.,@function
                          2633		.size	FblDiagDiscardReception..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_diag_core.,$-FblDiagDiscardReception..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_diag_core.
                          2634		.align	1
                          2635	
                          2636	#function:			FblDiagDiscardReception
                          2637	#stack frame size:		16
                          2638	#link area offset:		0
                          2639	#local storage area offset:	12
                          2640	#gpr save area offset:		12
                          2641	#
                          2642	
                          2643		.data
                          2644		.section ".vletext", "vax"
                          2645		.vle
                          2646		.vle
                          2647	
                          2648	
                          2649	#711: /* Start codeseg to be executed in RAM */
                          2650	#712: #define FBLDIAG_RAMCODE_START_SEC_CODE
                          2651	#713: #include "MemMap.h" /* PRQA S 5087 */ /* MD_MSR_19.1 */
                          2652	#714: /***********************************************************************************************************************
                          2653	#715:  *  FblDiagResetServiceFlags
                          2654	#716:  **********************************************************************************************************************/
                          2655	#717: /*! \brief       Clear all status flags relevant for service handling.
                          2656	#718:  *  \pre         Service response shall be finished.
                          2657	#719:  **********************************************************************************************************************/
                          2658	#720: static void FblDiagResetServiceFlags( void )
                          2659	#721: {
                          2660	#722:    /* Clear negative response indicator */
                          2661	#723:    DiagClrError();
                          2662	#725:    /* Reset internal state in case no response was sent */
                          2663	#726:    ClrServiceInProgress();
                          2664	#727:    ClrRcrRpInProgress();
                          2665	#728:    /* Reset flag for functional request, default is physical request */
                          2666	#729:    ClrFunctionalRequest();
                          2667	#730:    ClrDiagHandlerCalled();
                          2668	#731:    /* Reset flag for suppress positive response bit */
                          2669	#732:    ClrSuppressPosRspMsg();
                          2670	#734:    /* diagResponse state back to idle */
                          2671	#735:    diagResponseFlag = kDiagResponseIdle;
                          2672	#736: }
                          2673	#738: /***********************************************************************************************************************

                                   Fri Apr 10 08:32:04 2020           Page 49
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
                          2674	#739:  *  FblDiagConfirmation
                          2675	#740:  **********************************************************************************************************************/
                          2676	#741: /*! \brief       Clear all status flags and conclude service transmission.
                          2677	#742:  *  \pre         Service response has been sent recently.
                          2678	#743:  **********************************************************************************************************************/
                          2679		.align	1
                          2680		.align	1
                          2681	..gh.f.p.0.a.1.r.0.e.13:
                          2682		.type	..gh.f.p.0.a.1.r.0.e.13,@object
                          2683		.size	..gh.f.p.0.a.1.r.0.e.13,0
                          2684		.global	FblDiagConfirmation..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_diag_core.
                          2685	FblDiagConfirmation..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_diag_core.:
                          2686	FblDiagConfirmation:
                          2687	#	    .bf
                          2688	.LDW63:
00000404 70c0e000         2689		e_lis	r6, %hiadj(fblDiagStates)
00000408 50e60000         2690		e_lwz	r7, %lo(fblDiagStates)(r6)
                          2691	#744: static void FblDiagConfirmation( void )
                          2692	#745: {
                          2693	#746:    /* Buffer is now available */
                          2694	#747:    ClrDiagBufferLocked();
0000040c 61b7             2695		se_bclri	r7, 27
0000040e 54e60000         2696		e_stw	r7, %lo(fblDiagStates)(r6)
                          2697	#749:    /* Restart the tester present timer if not in default session */
                          2698	#750:    if (GetDiagProgrammingSession() || GetDiagExtendedSession())
00000412 18e0c806         2699		e_andi.	r0, r7, 6
00000416 e600             2700		se_beq	.L1346
                          2701	#751:    {
                          2702	#752:       ResetTesterTimeout();
                          2703	#line752
                          2704	..lin.1e9356d..3d7cbfb7.0_37::
                          2705	.LDWlin37:
00000418 70020388         2706		e_li	r0, 5000
0000041c 70e0e000         2707		e_lis	r7, %hiadj(testerPresentTimeout)
00000420 5c070000         2708		e_sth	r0, %lo(testerPresentTimeout)(r7)
                          2709	.L1346:
                          2710	#753:    }
                          2711	#755:    /* Clear all diagnostic states */
                          2712	#756:    ClrP2Timer();
00000424 4800             2713		se_li	r0, 0
00000426 70e0e000         2714		e_lis	r7, %hiadj(P2Timer)
0000042a 5c070000         2715		e_sth	r0, %lo(P2Timer)(r7)
                          2716	#759:    /* Clear all flags for service handling */
                          2717	#760:    FblDiagResetServiceFlags();
0000042e 78000000         2718		se_b	FblDiagResetServiceFlags
                          2719	#761: }
                          2720	#	    .ef
                          2721	.LDW73:
                          2722	..lin.1e9356d..3d7cbfb7.0_38::
                          2723	.LDWlin38:
                          2724	__ghs_eofn_FblDiagConfirmation:
                          2725		.type	FblDiagConfirmation,@function
                          2726		.size	FblDiagConfirmation,$-FblDiagConfirmation
                          2727		.type	FblDiagConfirmation..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_diag_core.,@function
                          2728		.size	FblDiagConfirmation..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_diag_core.,$-FblDiagConfirmation..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_diag_core.
                          2729		.align	1

                                   Fri Apr 10 08:32:04 2020           Page 50
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
                          2730	
                          2731	#function:			FblDiagConfirmation
                          2732	#stack frame size:		0
                          2733	#
                          2734	
                          2735		.data
                          2736		.section ".vletext", "vax"
                          2737		.vle
                          2738		.vle
                          2739	
                          2740	
                          2741	#763: /* End section to execute code from RAM */
                          2742	#764: #define FBLDIAG_RAMCODE_STOP_SEC_CODE
                          2743	#765: #include "MemMap.h"  /* PRQA S 5087 */ /* MD_MSR_19.1 */
                          2744	#767: /***********************************************************************************************************************
                          2745	#768:  *  FblDiagResponseProcessor
                          2746	#769:  **********************************************************************************************************************/
                          2747	#770: /*! \brief       Prepares response message and hands it over to ComWrapper.
                          2748	#771:  *  \details     Prepares either a positive or negative response. Depending on the response type,
                          2749	#772:  *               the service ID is set to SID + 0x40 or 0x7F.
                          2750	#773:  *  \pre         Current SID must be in DiagBuffer[0], diagErrorCode must be initialized.
                          2751	#774:  **********************************************************************************************************************/
                          2752		.align	1
                          2753		.align	1
                          2754	..gh.f.p.0.a.1.r.0.e.14:
                          2755		.type	..gh.f.p.0.a.1.r.0.e.14,@object
                          2756		.size	..gh.f.p.0.a.1.r.0.e.14,0
                          2757		.global	FblDiagResponseProcessor..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_diag_core.
                          2758	FblDiagResponseProcessor..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_diag_core.:
                          2759	FblDiagResponseProcessor:
00000432 182106e0         2760		e_stwu	sp, -32(sp)
00000436 1b61090c         2761		e_stmw	r27, 12(sp)
0000043a 0080             2762		se_mflr	r0
0000043c d901             2763		se_stw	r0, 36(sp)
                          2764	#	    .bf
                          2765	.LDW83:
                          2766	#775: static void FblDiagResponseProcessor( void )
                          2767	#776: {
                          2768	#777:    /* Service will be concluded under this condition */
                          2769	#778:    if(( diagResponseFlag & kDiagResponseActive ) != 0u )
0000043e 73c0e000         2770		e_lis	r30, %hiadj(diagResponseFlag)
00000442 1fde0000         2771		e_add16i	r30, r30, %lo(diagResponseFlag)
00000446 800e             2772		se_lbz	r0, 0(r30)
00000448 480f             2773		se_li	r31, 0
0000044a 7000c80e         2774		e_and2i.	r0, 14
0000044e e600             2775		se_beq	.L1423
                          2776	#779:    {
                          2777	#780:       /* Stop transmission of response pending messages */
                          2778	#781:       ClrRcrRpAllowed();
                          2779	#line781
                          2780	..lin.1e9356d..414253d.0_39::
                          2781	.LDWlin39:
00000450 7380e000         2782		e_lis	r28, %hiadj(fblDiagStates)
00000454 1f9c0000         2783		e_add16i	r28, r28, %lo(fblDiagStates)
00000458 c00c             2784		se_lwz	r0, 0(r28)
0000045a 70c0e000         2785		e_lis	r6, %hiadj(P2Timer)

                                   Fri Apr 10 08:32:04 2020           Page 51
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
                          2786	#782:       ClrP2Timer();
0000045e 5fe60000         2787		e_sth	r31, %lo(P2Timer)(r6)
00000462 7400066d         2788		e_rlwinm	r0, r0, 0, 25, 22
                          2789	#783:       ClrRcrRpInProgress();
00000466 d00c             2790		se_stw	r0, 0(r28)
                          2791	#785:       /* Discard all service requests received during processing this one */
                          2792	#786:       FblDiagDiscardReception();
00000468 e900             2793		se_bl	FblDiagDiscardReception
                          2794	#line787
                          2795	..lin.1e9356d..414253d.0_40::
                          2796	.LDWlin40:
0000046a 70e0e000         2797		e_lis	r7, %hiadj(diagServiceCurrent)
0000046e 30e70000         2798		e_lbz	r7, %lo(diagServiceCurrent)(r7)
                          2799	#787:       FblErrStatSetSId( diagServiceCurrent );
00000472 70c0e000         2800		e_lis	r6, %hiadj(errStatLastServiceId)
00000476 7360e000         2801		e_lis	r27, %hiadj(DiagBuffer)
                          2802	#789:       /* Negative response has highest priority.
                          2803	#790:        * Must be checked first. */
                          2804	#791:       if(( diagResponseFlag & kDiagPutNegResponse) != 0u )
0000047a 800e             2805		se_lbz	r0, 0(r30)
0000047c 73a0e000         2806		e_lis	r29, %hiadj(diagPostParam)
00000480 34e60000         2807		e_stb	r7, %lo(errStatLastServiceId)(r6)
00000484 1f7b0000         2808		e_add16i	r27, r27, %lo(DiagBuffer)
00000488 1fbd0000         2809		e_add16i	r29, r29, %lo(diagPostParam)
0000048c 67c0             2810		se_btsti	r0, 28
0000048e e600             2811		se_beq	.L1427
                          2812	#792:       {
                          2813	#793:          /* Set response type */
                          2814	#794:          diagPostParam = kDiagPostNegResponse;
                          2815	#line794
                          2816	..lin.1e9356d..414253d.0_41::
                          2817	.LDWlin41:
00000490 c06b             2818		se_lwz	r6, 0(r27)
00000492 4810             2819		se_li	r0, 1
                          2820	#796:          /* Prepare response message */
                          2821	#797:          DiagBuffer[kDiagFmtSubparam]     = diagServiceCurrent;
00000494 900d             2822		se_stb	r0, 0(r29)
00000496 9176             2823		se_stb	r7, 1(r6)
                          2824	#798:          DiagBuffer[kDiagFmtServiceId]    = kDiagRidNegativeResponse;
00000498 c07b             2825		se_lwz	r7, 0(r27)
0000049a 4ff0             2826		se_li	r0, 127
0000049c 9007             2827		se_stb	r0, 0(r7)
                          2828	#799:          DiagBuffer[kDiagFmtNegResponse]  = DiagGetError();
0000049e 7000e000         2829		e_lis	r0, %hiadj(diagErrorCode)
000004a2 1c000000         2830		e_add16i	r0, r0, %lo(diagErrorCode)
000004a6 c06b             2831		se_lwz	r6, 0(r27)
000004a8 8070             2832		se_lbz	r7, 0(r0)
000004aa 9276             2833		se_stb	r7, 2(r6)
                          2834	#801:          assertFblUser(DiagGetError() != kDiagErrorNone, kFblSysAssertParameterOutOfRange);  /* PRQA S 2214 */ /* MD_FblDiag_2214 */
000004ac 8000             2835		se_lbz	r0, 0(r0)
000004ae 2a00             2836		se_cmpi	r0, 0
000004b0 e200             2837		se_bne	.L1429
000004b2 4d03             2838		se_li	r3, 80
000004b4 78000001         2839		e_bl	ApplFblFatalError
                          2840	.L1429:
                          2841	#802:          FblCwTransmit(DiagBuffer, 3u, kFblCwTxCallNegResponse);

                                   Fri Apr 10 08:32:04 2020           Page 52
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
                          2842	#line802
                          2843	..lin.1e9356d..414253d.0_42::
                          2844	.LDWlin42:
000004b8 c03b             2845		se_lwz	r3, 0(r27)
000004ba 4834             2846		se_li	r4, 3
                          2847	#804:          /* diagResponse state back to idle */
                          2848	#805:          diagResponseFlag = kDiagResponseIdle;
000004bc e800             2849		se_b	.L1618
                          2850	.L1427:
                          2851	#806:       }
                          2852	#807:       else if (( diagResponseFlag & kDiagPutNoResponse ) != 0u )
                          2853	#line807
                          2854	..lin.1e9356d..414253d.0_43::
                          2855	.LDWlin43:
000004be 67e0             2856		se_btsti	r0, 30
000004c0 e600             2857		se_beq	.L1432
                          2858	#808:       {
                          2859	#809:          /* Set response type */
                          2860	#810:          diagPostParam = kDiagPostNoResponse;
                          2861	#line810
                          2862	..lin.1e9356d..414253d.0_44::
                          2863	.LDWlin44:
000004c2 4840             2864		se_li	r0, 4
000004c4 900d             2865		se_stb	r0, 0(r29)
                          2866	#812:          /* Service conclusion */
                          2867	#813:          FblDiagConfirmation();
000004c6 e900             2868		se_bl	FblDiagConfirmation
                          2869	#815:          /* Check if a reset shall be generated without message transmission */
                          2870	#816:          if (GetWaitEcuReset())
                          2871	#line816
                          2872	..lin.1e9356d..414253d.0_45::
                          2873	.LDWlin45:
000004c8 c00c             2874		se_lwz	r0, 0(r28)
000004ca 6720             2875		se_btsti	r0, 18
000004cc e600             2876		se_beq	.L1434
                          2877	#817:          {
                          2878	#818:             /* If so, generate the reset immediately */
                          2879	#819:             SetResetMsgConfirmed();
                          2880	#line819
                          2881	..lin.1e9356d..414253d.0_46::
                          2882	.LDWlin46:
000004ce 6500             2883		se_bseti	r0, 16
000004d0 d00c             2884		se_stw	r0, 0(r28)
                          2885	.L1434:
                          2886	#820:          }
                          2887	#822:          FblCwResetRxBlock();
000004d2 78000001         2888		e_bl	FblCwResetRxBlock
000004d6 e800             2889		se_b	.L1431
                          2890	.L1432:
                          2891	#823:       }
                          2892	#824:       else if (( diagResponseFlag & kDiagPutPosResponse ) != 0u )
                          2893	#line824
                          2894	..lin.1e9356d..414253d.0_47::
                          2895	.LDWlin47:
000004d8 67d0             2896		se_btsti	r0, 29
000004da e600             2897		se_beq	.L1441

                                   Fri Apr 10 08:32:04 2020           Page 53
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
                          2898	.L1438:
                          2899	#825:       {
                          2900	#826:          /* Set response type */
                          2901	#827:          diagPostParam = kDiagPostPosResponse;
                          2902	#line827
                          2903	..lin.1e9356d..414253d.0_48::
                          2904	.LDWlin48:
000004dc c00b             2905		se_lwz	r0, 0(r27)
                          2906	#829:          /* Transmit positive response if not suppressed */
                          2907	#830:          DiagBuffer[kDiagFmtServiceId] = (vuint8)(diagServiceCurrent + 0x40u);
000004de 18e78040         2908		e_addi	r7, r7, 64
000004e2 90fd             2909		se_stb	r31, 0(r29)
000004e4 9070             2910		se_stb	r7, 0(r0)
                          2911	#831:          FblCwTransmit(DiagBuffer, (tCwDataLengthType)( diagResLen + 1u ), kFblCwTxCallPosResponse );
000004e6 70e0e000         2912		e_lis	r7, %hiadj(diagResLen)
000004ea 58070000         2913		e_lhz	r0, %lo(diagResLen)(r7)
000004ee c03b             2914		se_lwz	r3, 0(r27)
000004f0 2000             2915		se_addi	r0, 1
000004f2 7404043f         2916		clrlwi	r4, r0, 16
                          2917	.L1618:
000004f6 78000001         2918		e_bl	FblCwCanTransmit
                          2919	#833:          /* diagResponse state back to idle */
                          2920	#834:          diagResponseFlag = kDiagResponseIdle;
000004fa 90fe             2921		se_stb	r31, 0(r30)
000004fc e800             2922		se_b	.L1431
                          2923	.L1441:
                          2924	#835:       }
                          2925	#836:       else
                          2926	#837:       {
                          2927	#838:          /* This is an illegal state and should not occur */
                          2928	#839:          assertFblInternal(0u, kFblSysAssertParameterOutOfRange );  /* PRQA S 2214 */ /* MD_FblDiag_2214 */
                          2929	#line839
                          2930	..lin.1e9356d..414253d.0_49::
                          2931	.LDWlin49:
000004fe 4d03             2932		se_li	r3, 80
00000500 78000001         2933		e_bl	ApplFblFatalError
                          2934	#841:          /* Set response type */
                          2935	#842:          diagPostParam = kDiagResponseIdle;
00000504 90fd             2936		se_stb	r31, 0(r29)
                          2937	.L1431:
                          2938	#843:       }
                          2939	#845:       /* Should be an assertion */
                          2940	#846:       if( diagPostParam == kDiagPostRcrRp )
00000506 800d             2941		se_lbz	r0, 0(r29)
00000508 2a30             2942		se_cmpi	r0, 3
0000050a e200             2943		se_bne	.L1423
                          2944	#847:       {
                          2945	#848:         /* diagResponse state back to idle */
                          2946	#849:         diagResponseFlag = kDiagResponseIdle;
                          2947	#line849
                          2948	..lin.1e9356d..414253d.0_50::
                          2949	.LDWlin50:
0000050c 90fe             2950		se_stb	r31, 0(r30)
                          2951	.L1423:
                          2952	#850:       }
                          2953	#851:    }

                                   Fri Apr 10 08:32:04 2020           Page 54
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
                          2954	#852: }  /* PRQA S 6080 */ /* MD_MSR_STMIF */
                          2955	#	    .ef
                          2956	.LDW93:
0000050e c901             2957		se_lwz	r0, 36(sp)
00000510 1b61080c         2958		e_lmw	r27, 12(sp)
00000514 21f1             2959		se_addi	sp, 32
00000516 0090             2960		se_mtlr	r0
00000518 0004             2961		se_blr
                          2962	__ghs_eofn_FblDiagResponseProcessor:
                          2963		.type	FblDiagResponseProcessor,@function
                          2964		.size	FblDiagResponseProcessor,$-FblDiagResponseProcessor
                          2965		.type	FblDiagResponseProcessor..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_diag_core.,@function
                          2966		.size	FblDiagResponseProcessor..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_diag_core.,$-FblDiagResponseProcessor..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_diag_core.
                          2967		.align	1
                          2968	
                          2969	#function:			FblDiagResponseProcessor
                          2970	#stack frame size:		32
                          2971	#link area offset:		0
                          2972	#local storage area offset:	12
                          2973	#gpr save area offset:		12
                          2974	#
                          2975	
                          2976		.data
                          2977		.section ".vletext", "vax"
                          2978		.vle
                          2979		.vle
                          2980	
                          2981	
                          2982	#854: /***********************************************************************************************************************
                          2983	#855:  *  ChkSuppressPosRspMsgIndication
                          2984	#856:  **********************************************************************************************************************/
                          2985	#857: /*! \brief       This functions checks if a diagnostic response has to be sent.
                          2986	#858:  *  \details     If the request is received with Suppress Positive Response Bit (0x80), the response is cancelled.
                          2987	#859:  *  \param[in]   subparam Diagnostic sub-parameter
                          2988	#860:  **********************************************************************************************************************/
                          2989		.align	1
                          2990		.align	1
                          2991	..gh.f.p.3.a.1.r.0.e.15:
                          2992		.type	..gh.f.p.3.a.1.r.0.e.15,@object
                          2993		.size	..gh.f.p.3.a.1.r.0.e.15,0
                          2994		.global	ChkSuppressPosRspMsgIndication..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_diag_core.
                          2995	ChkSuppressPosRspMsgIndication..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_diag_core.:
                          2996	ChkSuppressPosRspMsgIndication:
                          2997	#	    .bf
                          2998	.LDW04:
                          2999	#861: static void ChkSuppressPosRspMsgIndication( vuint8 *subparam )
                          3000	#862: {
                          3001	#863:    if (((*(subparam)) & (kDiagSuppressPosRspMsgIndicationBit)) != 0)
0000051a 8003             3002		se_lbz	r0, 0(r3)
0000051c 6780             3003		se_btsti	r0, 24
0000051e e600             3004		se_beq	.L1619
                          3005	#864:    {
                          3006	#865:       /* Set internal flag to suppress positive response */
                          3007	#866:       DiagSetNoResponse();
                          3008	#line866
                          3009	..lin.1e9356d..44c69a10.0_51::

                                   Fri Apr 10 08:32:04 2020           Page 55
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
                          3010	.LDWlin51:
00000520 70e0e000         3011		e_lis	r7, %hiadj(diagResponseFlag)
00000524 1ce70000         3012		e_add16i	r7, r7, %lo(diagResponseFlag)
00000528 8007             3013		se_lbz	r0, 0(r7)
0000052a 70c0e000         3014		e_lis	r6, %hiadj(fblDiagStates)
0000052e 65e0             3015		se_bseti	r0, 30
00000530 9007             3016		se_stb	r0, 0(r7)
00000532 50e60000         3017		e_lwz	r7, %lo(fblDiagStates)(r6)
                          3018	#867:       SetSuppressPosRspMsg();
00000536 6567             3019		se_bseti	r7, 22
00000538 54e60000         3020		e_stw	r7, %lo(fblDiagStates)(r6)
                          3021	#869:       /* Clear suppress bit in request message */
                          3022	#870:       (*(subparam)) &= FblInvert8Bit( kDiagSuppressPosRspMsgIndicationBit );
0000053c 8003             3023		se_lbz	r0, 0(r3)
0000053e 6180             3024		se_bclri	r0, 24
00000540 9003             3025		se_stb	r0, 0(r3)
                          3026	.L1619:
                          3027	#871:    }
                          3028	#872: }
                          3029	#	    .ef
                          3030	.LDW14:
00000542 0004             3031		se_blr
                          3032	__ghs_eofn_ChkSuppressPosRspMsgIndication:
                          3033		.type	ChkSuppressPosRspMsgIndication,@function
                          3034		.size	ChkSuppressPosRspMsgIndication,$-ChkSuppressPosRspMsgIndication
                          3035		.type	ChkSuppressPosRspMsgIndication..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_diag_core.,@function
                          3036		.size	ChkSuppressPosRspMsgIndication..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_diag_core.,$-ChkSuppressPosRspMsgIndication..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_diag_core.
                          3037		.align	1
                          3038	
                          3039	#function:			ChkSuppressPosRspMsgIndication
                          3040	#stack frame size:		0
                          3041	#
                          3042	
                          3043	#subparam	r3	param
                          3044	
                          3045		.data
                          3046		.section ".vletext", "vax"
                          3047		.vle
                          3048		.vle
                          3049	
                          3050	
                          3051	#873: #if defined( FBL_DIAG_ENABLE_CORE_SEGMENTHANDLING )
                          3052	#874: /***********************************************************************************************************************
                          3053	#875:  *  FblDiagSegmentNext
                          3054	#876:  **********************************************************************************************************************/
                          3055	#877: /*! \brief       Keep track of segment counter
                          3056	#878:  *  \return      kSwmOutOfRange if maximum segment count exceeded, number of segments otherwise
                          3057	#879:  **********************************************************************************************************************/
                          3058		.align	1
                          3059		.align	1
                          3060	..gh.f.p.0.a.1.r.0.e.16:
                          3061		.type	..gh.f.p.0.a.1.r.0.e.16,@object
                          3062		.size	..gh.f.p.0.a.1.r.0.e.16,0
                          3063		.global	FblDiagSegmentNext
                          3064	FblDiagSegmentNext:
                          3065	#	    .bf

                                   Fri Apr 10 08:32:04 2020           Page 56
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
                          3066	.LDW24:
                          3067	#880: vuint8 FblDiagSegmentNext( void )
                          3068	#881: {
                          3069	#882:    vuint8 result;
                          3070	#884:    /* Compare current used NOAR against max. value */
                          3071	#885:    if (segmentCount >= SWM_DATA_MAX_NOAR)
00000544 7000e000         3072		e_lis	r0, %hiadj(segmentCount)
00000548 1c000000         3073		e_add16i	r0, r0, %lo(segmentCount)
0000054c 8030             3074		se_lbz	r3, 0(r0)
0000054e 2273             3075		se_cmpli	r3, 8
00000550 e400             3076		se_blt	.L1676
                          3077	#886:    {
                          3078	#887:       /* ALL PMA processed. Stop reading data */
                          3079	#888:       result =  kSwmOutOfRange;
                          3080	#line888
                          3081	..lin.1e9356d..facb4b00.0_52::
                          3082	.LDWlin52:
00000552 2c83             3083		se_bmaski	r3, 8
00000554 0004             3084		se_blr
                          3085	.L1676:
                          3086	#889:    }
                          3087	#890:    else
                          3088	#891:    {
                          3089	#892:       /* Increment segment count */
                          3090	#893:       segmentCount++;
00000556 2003             3091		se_addi	r3, 1
00000558 00c3             3092		se_extzb	r3
0000055a 9030             3093		se_stb	r3, 0(r0)
                          3094	#895:       result = segmentCount;
                          3095	#896:    }
                          3096	#898:    return result;
                          3097	#	    .ef
                          3098	.LDW34:
0000055c 0004             3099		se_blr
                          3100		.global	__ghs_eofn_FblDiagSegmentNext
                          3101	__ghs_eofn_FblDiagSegmentNext:
                          3102		.type	FblDiagSegmentNext,@function
                          3103		.size	FblDiagSegmentNext,$-FblDiagSegmentNext
                          3104		.align	1
                          3105	
                          3106	#function:			FblDiagSegmentNext
                          3107	#stack frame size:		0
                          3108	#
                          3109	#result	r3	local
                          3110	
                          3111		.data
                          3112		.section ".vletext", "vax"
                          3113		.vle
                          3114		.vle
                          3115	
                          3116	#899: }
                          3117	
                          3118	#900: #endif /* FBL_DIAG_ENABLE_CORE_SEGMENTHANDLING */
                          3119	#902: #if defined( FBL_DIAG_ENABLE_CORE_GETBLOCKFROMADDR )
                          3120	#903: /***********************************************************************************************************************
                          3121	#904:  *  FblGetBlockNrFromAddress

                                   Fri Apr 10 08:32:04 2020           Page 57
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
                          3122	#905:  **********************************************************************************************************************/
                          3123	#906: /*! \brief       Get logical block number from address and length
                          3124	#907:  *  \details     Get the number of the corresponding logical block for the given block address.
                          3125	#908:  *  \param[in]   blockAddress Start address of address range
                          3126	#909:  *  \param[in]   blockLength Length of address range
                          3127	#910:  *  \param[out]  pLogicalBlock Logical block number
                          3128	#911:  *  \return      kFblOk if blockIndex has been found, otherwise kFblFailed
                          3129	#912:  **********************************************************************************************************************/
                          3130		.align	1
                          3131		.align	1
                          3132	..gh.f.p.5.a.1.r.0.e.17:
                          3133		.type	..gh.f.p.5.a.1.r.0.e.17,@object
                          3134		.size	..gh.f.p.5.a.1.r.0.e.17,0
                          3135		.global	FblGetBlockNrFromAddress
                          3136	FblGetBlockNrFromAddress:
0000055e 182106e0         3137		e_stwu	sp, -32(sp)
00000562 0080             3138		se_mflr	r0
00000564 1b61090c         3139		e_stmw	r27, 12(sp)
00000568 d901             3140		se_stw	r0, 36(sp)
0000056a 013b             3141		se_mr	r27, r3
0000056c 014c             3142		se_mr	r28, r4
0000056e 015d             3143		se_mr	r29, r5
                          3144	#	    .bf
                          3145	.LDW44:
                          3146	#913: tFblResult FblGetBlockNrFromAddress(tFblAddress blockAddress, tFblLength blockLength, vuint8* pLogicalBlock)
                          3147	#914: {
                          3148	#915:    tFblResult result;
                          3149	#916:    vuint8 tempCount;
                          3150	#918:    /* Initialize variables */
                          3151	#919:    result = kFblFailed;
00000570 2c80             3152		se_bmaski	r0, 8
                          3153	#920:    *pLogicalBlock = 0xFFu;
00000572 9005             3154		se_stb	r0, 0(r5)
00000574 481f             3155		se_li	r31, 1
                          3156	#922:    if( blockLength > 0u)
00000576 2a04             3157		se_cmpi	r4, 0
00000578 e600             3158		se_beq	.L1754
                          3159	#923:    {
                          3160	#924:       (void)FblLookForWatchdog();
                          3161	#line924
                          3162	..lin.1e9356d..7bfc18de.0_53::
                          3163	.LDWlin53:
0000057a 78000001         3164		e_bl	FblLookForWatchdog
                          3165	#925:       tempCount = 0u;
0000057e 480e             3166		se_li	r30, 0
                          3167	#926:       /* Search logical block table for blockIndex */
                          3168	#927:       while ((result == kFblFailed) && (tempCount < FblLogicalBlockTable.noOfBlocks))
                          3169	.L1761:
00000580 70c0e000         3170		e_lis	r6, %hiadj(FblLogicalBlockTable)
00000584 1cc60000         3171		e_add16i	r6, r6, %lo(FblLogicalBlockTable)
00000588 8506             3172		se_lbz	r0, 5(r6)
0000058a 0d0e             3173		se_cmpl	r30, r0
0000058c e000             3174		se_bge	.L1754
                          3175	#928:       {
                          3176	#929:          /* Check if requested addresses lie within a logical block */
                          3177	#930:          result = FblCheckRangeContained(blockAddress,

                                   Fri Apr 10 08:32:04 2020           Page 58
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
                          3178	#line930
                          3179	..lin.1e9356d..7bfc18de.0_54::
                          3180	.LDWlin54:
0000058e 18fea018         3181		e_mulli	r7, r30, 24
00000592 0467             3182		se_add	r7, r6
00000594 c457             3183		se_lwz	r5, 16(r7)
00000596 c567             3184		se_lwz	r6, 20(r7)
00000598 01b3             3185		se_mr	r3, r27
0000059a 01c4             3186		se_mr	r4, r28
0000059c 78000001         3187		se_bl	FblCheckRangeContained
000005a0 013f             3188		se_mr	r31, r3
                          3189	#931:                                      blockLength,
                          3190	#932:                                      FblLogicalBlockTable.logicalBlock[tempCount].blockStartAddress,
                          3191	#933:                                      FblLogicalBlockTable.logicalBlock[tempCount].blockLength
                          3192	#934:                                     );
                          3193	#936:          /* Logical block found - save block number */
                          3194	#937:          if (result == kFblOk)
                          3195	#line937
                          3196	..lin.1e9356d..7bfc18de.0_55::
                          3197	.LDWlin55:
000005a2 2a03             3198		se_cmpi	r3, 0
000005a4 e200             3199		se_bne	.L1759
                          3200	#938:          {
                          3201	#939:             *pLogicalBlock = tempCount;
                          3202	#line939
                          3203	..lin.1e9356d..7bfc18de.0_56::
                          3204	.LDWlin56:
000005a6 90ed             3205		se_stb	r30, 0(r29)
                          3206	.L1759:
                          3207	#940:          }
                          3208	#942:          /* Increment loop counter */
                          3209	#943:          tempCount++;
000005a8 200e             3210		se_addi	r30, 1
000005aa 00ce             3211		se_extzb	r30
000005ac 2a13             3212		se_cmpi	r3, 1
000005ae e600             3213		se_beq	.L1761
                          3214	.L1754:
                          3215	#944:       }
                          3216	#945:    }
                          3217	#947:    return result;
                          3218	#line947
                          3219	..lin.1e9356d..7bfc18de.0_57::
                          3220	.LDWlin57:
000005b0 01f3             3221		se_mr	r3, r31
                          3222	#	    .ef
                          3223	.LDW54:
000005b2 c901             3224		se_lwz	r0, 36(sp)
000005b4 1b61080c         3225		e_lmw	r27, 12(sp)
000005b8 21f1             3226		se_addi	sp, 32
000005ba 0090             3227		se_mtlr	r0
000005bc 0004             3228		se_blr
                          3229		.global	__ghs_eofn_FblGetBlockNrFromAddress
                          3230	__ghs_eofn_FblGetBlockNrFromAddress:
                          3231		.type	FblGetBlockNrFromAddress,@function
                          3232		.size	FblGetBlockNrFromAddress,$-FblGetBlockNrFromAddress
                          3233		.align	1

                                   Fri Apr 10 08:32:04 2020           Page 59
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
                          3234	
                          3235	#function:			FblGetBlockNrFromAddress
                          3236	#stack frame size:		32
                          3237	#link area offset:		0
                          3238	#local storage area offset:	12
                          3239	#gpr save area offset:		12
                          3240	#
                          3241	#result	r31	local
                          3242	#tempCount	r30	local
                          3243	
                          3244	#blockAddress	r27	param
                          3245	#blockLength	r28	param
                          3246	#pLogicalBlock	r29	param
                          3247	
                          3248		.data
                          3249		.section ".vletext", "vax"
                          3250		.vle
                          3251		.vle
                          3252	
                          3253	#948: }
                          3254	
                          3255	#949: #endif /* FBL_DIAG_ENABLE_CORE_GETBLOCKFROMADDR */
                          3256	#951: #if defined( FBL_DIAG_ENABLE_CORE_GETBLOCKFROMID )
                          3257	#952: /***********************************************************************************************************************
                          3258	#953:  *  FblGetBlockNrFromIndex
                          3259	#954:  **********************************************************************************************************************/
                          3260	#955: /*! \brief       Get logical block number for a given block index
                          3261	#956:  *  \details     Get the number of the corresponding logical block for the given block index.
                          3262	#957:  *  \param[in]   blockIndex Index of logical block
                          3263	#958:  *  \param[out]  pLogicalBlock Logical block number
                          3264	#959:  *  \return      kFblOk if blockIndex has been found, otherwise kFblFailed
                          3265	#960:  **********************************************************************************************************************/
                          3266	#961: tFblResult FblGetBlockNrFromIndex(vuint8 blockIndex, vuint8* pLogicalBlock)
                          3267	#962: {
                          3268	#963:    tFblResult result;
                          3269	#964:    vuint8 tempCount;
                          3270	#966:    /* Initialize variables */
                          3271	#967:    result = kFblFailed;
                          3272	#968:    *pLogicalBlock = 0xFFu;
                          3273	#970:    (void)FblLookForWatchdog();
                          3274	#971:    tempCount = 0u;
                          3275	#972:    /* Search logical block table for blockIndex */
                          3276	#973:    while ((result == kFblFailed) && (tempCount < FblLogicalBlockTable.noOfBlocks))
                          3277	#974:    {
                          3278	#975:       /* Check if requested index matches a logical block index */
                          3279	#976:       if (blockIndex == FblLogicalBlockTable.logicalBlock[tempCount].blockIndex)
                          3280	#977:       {
                          3281	#978:          result = kFblOk;
                          3282	#979:          *pLogicalBlock = tempCount;
                          3283	#980:       }
                          3284	#982:       /* Increment loop counter */
                          3285	#983:       tempCount++;
                          3286	#984:    }
                          3287	#986:    return result;
                          3288	#987: }
                          3289	#988: #endif /* FBL_DIAG_ENABLE_CORE_GETBLOCKFROMID */

                                   Fri Apr 10 08:32:04 2020           Page 60
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
                          3290	#990: /***********************************************************************************************************************
                          3291	#991:  *  DIAGNOSTIC MODULE CONTROL ROUTINES
                          3292	#992:  **********************************************************************************************************************/
                          3293	#994: /***********************************************************************************************************************
                          3294	#995:  *  Initialization handling of diagnostic module
                          3295	#996:  **********************************************************************************************************************/
                          3296	#998: /***********************************************************************************************************************
                          3297	#999:  *  FblDiagInitPowerOn
                          3298	#1000:  **********************************************************************************************************************/
                          3299	#1001: /*! \brief       Initialize module variables
                          3300	#1002:  **********************************************************************************************************************/
                          3301		.align	1
                          3302		.align	1
                          3303	..gh.f.p.0.a.1.r.0.e.18:
                          3304		.type	..gh.f.p.0.a.1.r.0.e.18,@object
                          3305		.size	..gh.f.p.0.a.1.r.0.e.18,0
                          3306		.global	FblDiagInitPowerOn
                          3307	FblDiagInitPowerOn:
000005be 0080             3308		se_mflr	r0
000005c0 182106f0         3309		e_stwu	sp, -16(sp)
000005c4 d501             3310		se_stw	r0, 20(sp)
000005c6 d3f1             3311		se_stw	r31, 12(sp)
                          3312	#	    .bf
                          3313	.LDW64:
                          3314	#1003: void FblDiagInitPowerOn(void)
                          3315	#1004: {
                          3316	#1005:    vuint8 i;
                          3317	#1007:    /* Initialize diagnostic states */
                          3318	#1008:    for (i = 0u; i < (FBL_STATE_INDEX(kDiagNumberOfStates - 1u) + 1u); i++)
                          3319	#1009:    {
                          3320	#1010:       fblDiagStates[i] = (tFblStateBitmap)0x00u;
000005c8 70c0e000         3321		e_lis	r6, %hiadj(memSegment)
000005cc 2c07             3322		se_bmaski	r7, 0
                          3323	#1011:    }
                          3324	#1013:    /* Initialize diagnostic variables */
                          3325	#1014:    memSegment = -1;
000005ce 5ce60000         3326		e_sth	r7, %lo(memSegment)(r6)
000005d2 70e0e000         3327		e_lis	r7, %hiadj(diagResponseFlag)
000005d6 480f             3328		se_li	r31, 0
                          3329	#1015:    diagResponseFlag = kDiagResponseIdle;
000005d8 37e70000         3330		e_stb	r31, %lo(diagResponseFlag)(r7)
000005dc 70e0e000         3331		e_lis	r7, %hiadj(diagErrorCode)
000005e0 37e70000         3332		e_stb	r31, %lo(diagErrorCode)(r7)
                          3333	#1017:    DiagClrError();
000005e4 70e0e000         3334		e_lis	r7, %hiadj(serviceMainHandler)
000005e8 57e70000         3335		e_stw	r31, %lo(serviceMainHandler)(r7)
                          3336	#1019:    serviceMainHandler = V_NULL;
000005ec 4817             3337		se_li	r7, 1
000005ee 7000e000         3338		e_lis	r0, %hiadj(fblDiagStates)
                          3339	#1021:    /* Initialize diagnostic session */
                          3340	#1022:    SetDiagDefaultSession();   /* PRQA S 3109 */ /* MD_FblDiag_3109 */
000005f2 1c000000         3341		e_add16i	r0, r0, %lo(fblDiagStates)
000005f6 d070             3342		se_stw	r7, 0(r0)
                          3343	#1024:    /* Stop tester present timer */
                          3344	#1025:    StopTesterTimeout();
000005f8 70e0e000         3345		e_lis	r7, %hiadj(testerPresentTimeout)

                                   Fri Apr 10 08:32:04 2020           Page 61
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
000005fc 5fe70000         3346		e_sth	r31, %lo(testerPresentTimeout)(r7)
                          3347	#1027:    /* Clear timer for response pending transmission */
                          3348	#1028:    ClrP2Timer();
00000600 70e0e000         3349		e_lis	r7, %hiadj(P2Timer)
00000604 5fe70000         3350		e_sth	r31, %lo(P2Timer)(r7)
                          3351	#1030:    /* Make sure to turn off the programming voltage */
                          3352	#1031:    ApplFblResetVfp();
00000608 78000001         3353		e_bl	ApplFblResetVfp
                          3354	#1033:    StopEcuResetTimeout();
0000060c 70e0e000         3355		e_lis	r7, %hiadj(ecuResetTimeout)
00000610 5fe70000         3356		e_sth	r31, %lo(ecuResetTimeout)(r7)
                          3357	#1035: #if defined( FBL_DEF_ENABLE_NON_KB_MAIN )
                          3358	#1036: # if defined( FBL_ENABLE_SLEEPMODE )
                          3359	#1037:    /* Sleep Timer not running during startup */
                          3360	#1038:    FblSleepCounterClear();
00000614 70e0e000         3361		e_lis	r7, %hiadj(sleepCounter)
00000618 57e70000         3362		e_stw	r31, %lo(sleepCounter)(r7)
                          3363	#1039: # endif
                          3364	#1040: #endif /* FBL_DEF_ENABLE_NON_KB_MAIN */
                          3365	#1042: #if defined( FBL_DIAG_ENABLE_OEM_SEGMENTNRGET )
                          3366	#1043: #else
                          3367	#1044:    /* FblMemSegmentNrGet caching - initialize cache with a valid entry */
                          3368	#1045:    cachedSegment = 0;
0000061c 70e0e000         3369		e_lis	r7, %hiadj(cachedSegment)
00000620 5fe70000         3370		e_sth	r31, %lo(cachedSegment)(r7)
                          3371	#1046:    cachedBlock.begin = FlashBlock[0].begin;
00000624 70e0e000         3372		e_lis	r7, %hiadj(FlashBlock)
00000628 1ce70000         3373		e_add16i	r7, r7, %lo(FlashBlock)
0000062c c007             3374		se_lwz	r0, 0(r7)
0000062e 70c0e000         3375		e_lis	r6, %hiadj(cachedBlock)
00000632 1cc60000         3376		e_add16i	r6, r6, %lo(cachedBlock)
00000636 d006             3377		se_stw	r0, 0(r6)
                          3378	#1047:    cachedBlock.end = FlashBlock[0].end;
00000638 c107             3379		se_lwz	r0, 4(r7)
0000063a d106             3380		se_stw	r0, 4(r6)
                          3381	#1048: #endif /* FBL_DIAG_ENABLE_OEM_SEGMENTNRGET */
                          3382	#1050: #if defined( FBL_DIAG_ENABLE_TASK_LOCKS )
                          3383	#1051:    diagTaskState = 0u;
                          3384	#1052: #endif /* FBL_DIAG_ENABLE_TASK_LOCKS */
                          3385	#1054: #if defined( FBL_DIAG_ENABLE_OEM_INITPOWERON )
                          3386	#1055:    /* OEM-specific initializations */
                          3387	#1056:    FblDiagOemInitPowerOn();
0000063c 78000001         3388		e_bl	FblDiagOemInitPowerOn
                          3389	#1057: #endif /* FBL_DIAG_ENABLE_OEM_INITPOWERON */
                          3390	#1058: }
                          3391	#	    .ef
                          3392	.LDW74:
00000640 c501             3393		se_lwz	r0, 20(sp)
00000642 c3f1             3394		se_lwz	r31, 12(sp)
00000644 20f1             3395		se_addi	sp, 16
00000646 0090             3396		se_mtlr	r0
00000648 0004             3397		se_blr
                          3398		.global	__ghs_eofn_FblDiagInitPowerOn
                          3399	__ghs_eofn_FblDiagInitPowerOn:
                          3400		.type	FblDiagInitPowerOn,@function
                          3401		.size	FblDiagInitPowerOn,$-FblDiagInitPowerOn

                                   Fri Apr 10 08:32:04 2020           Page 62
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
                          3402		.align	1
                          3403	
                          3404	#function:			FblDiagInitPowerOn
                          3405	#stack frame size:		16
                          3406	#link area offset:		0
                          3407	#local storage area offset:	12
                          3408	#gpr save area offset:		12
                          3409	#
                          3410	
                          3411		.data
                          3412		.section ".vletext", "vax"
                          3413		.vle
                          3414		.vle
                          3415	
                          3416	
                          3417	#1060: /***********************************************************************************************************************
                          3418	#1061:  *  FblDiagInit
                          3419	#1062:  **********************************************************************************************************************/
                          3420	#1063: /*! \brief       Initialize diagnostic module
                          3421	#1064:  *  \details     Sets the diagnostic module to default session and initializes depending modules. The diagnostic
                          3422	#1065:  *               module is working from here, but NV-memory dependent features are not available in all configurations.
                          3423	#1066:  **********************************************************************************************************************/
                          3424		.align	1
                          3425		.align	1
                          3426	..gh.f.p.0.a.1.r.0.e.19:
                          3427		.type	..gh.f.p.0.a.1.r.0.e.19,@object
                          3428		.size	..gh.f.p.0.a.1.r.0.e.19,0
                          3429		.global	FblDiagInit
                          3430	FblDiagInit:
0000064a 0080             3431		se_mflr	r0
0000064c d101             3432		se_stw	r0, 4(sp)
0000064e 182106f8         3433		e_stwu	sp, -8(sp)
                          3434	#	    .bf
                          3435	.LDW84:
                          3436	#1067: void FblDiagInit(void)
                          3437	#1068: {
                          3438	#1070:    /* Get aligned diag buffer pointer from memory library */
                          3439	#1071:    DiagBuffer = FblMemInitPowerOn();
00000652 78000001         3440		e_bl	FblMemInitPowerOn
00000656 70e0e000         3441		e_lis	r7, %hiadj(DiagBuffer)
0000065a 54670000         3442		e_stw	r3, %lo(DiagBuffer)(r7)
                          3443	#1073: #if defined( FBL_ENABLE_SEC_ACCESS_DELAY )
                          3444	#1074: # if defined( FBL_DIAG_ENABLE_CORE_READ_SECACCESSDELAY_FLAG )
                          3445	#1075: #  if defined( FBL_DEF_ENABLE_NON_KB_MAIN )
                          3446	#1076:    /* Pre-init security access delay status - no NV-memory available here */
                          3447	#1077:    SetSecurityAccessDelay();
                          3448	#1078: #  else
                          3449	#1079:    /* Initialize security access delay timer. NV-memory driver has to be initialized here */
                          3450	#1080:    if (ApplFblGetSecAccessDelayFlag())
                          3451	#1081:    {
                          3452	#1082:       SetSecurityAccessDelay();
                          3453	#1083:    }
                          3454	#1084:    else
                          3455	#1085:    {
                          3456	#1086:       ClrSecurityAccessDelay();
                          3457	#1087:    }

                                   Fri Apr 10 08:32:04 2020           Page 63
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
                          3458	#1088: #  endif /* FBL_DEF_ENABLE_NON_KB_MAIN */
                          3459	#1089: # endif /* FBL_DIAG_ENABLE_CORE_READ_SECACCESSDELAY_FLAG */
                          3460	#1090: #endif
                          3461	#1092: #if defined( FBL_ENABLE_DEBUG_STATUS )
                          3462	#1093:    /* Initialize error status */
                          3463	#1094:    ApplFblInitErrStatus();
0000065e 78000001         3464		e_bl	ApplFblInitErrStatus
                          3465	#1095: #endif
                          3466	#1097: #if defined ( FBL_DIAG_ENABLE_CORE_SEGMENTHANDLING )
                          3467	#1098:    /* Initialize segment counter */
                          3468	#1099:    FblDiagSegmentInit();
00000662 4800             3469		se_li	r0, 0
00000664 70e0e000         3470		e_lis	r7, %hiadj(segmentCount)
00000668 34070000         3471		e_stb	r0, %lo(segmentCount)(r7)
                          3472	#1100: #endif
                          3473	#1102:    /* Initialize security module */
                          3474	#1103:    (void)ApplFblSecurityInit();
0000066c 78000001         3475		e_bl	ApplFblSecurityInit
                          3476	#1105:    /* Init ComWrapper */
                          3477	#1106:    FblCwSetTxInit();
00000670 78000001         3478		e_bl	FblCwSetTxInit
                          3479	#1108: #if defined( FBL_DIAG_ENABLE_OEM_INIT )
                          3480	#1109:    /* OEM-specific initializations */
                          3481	#1110:    FblDiagOemInit();
                          3482	#1111: #endif /* FBL_DIAG_ENABLE_OEM_INIT */
                          3483	#1112: }
                          3484	#	    .ef
                          3485	.LDW94:
00000674 c301             3486		se_lwz	r0, 12(sp)
00000676 2071             3487		se_addi	sp, 8
00000678 0090             3488		se_mtlr	r0
0000067a 0004             3489		se_blr
                          3490		.global	__ghs_eofn_FblDiagInit
                          3491	__ghs_eofn_FblDiagInit:
                          3492		.type	FblDiagInit,@function
                          3493		.size	FblDiagInit,$-FblDiagInit
                          3494		.align	1
                          3495	
                          3496	#function:			FblDiagInit
                          3497	#stack frame size:		8
                          3498	#link area offset:		0
                          3499	#local storage area offset:	8
                          3500	#
                          3501	
                          3502		.data
                          3503		.section ".vletext", "vax"
                          3504		.vle
                          3505		.vle
                          3506	
                          3507	
                          3508	#1114: #if defined( FBL_DEF_ENABLE_NON_KB_MAIN )
                          3509	#1115: /***********************************************************************************************************************
                          3510	#1116:  *  FblDiagPostInit
                          3511	#1117:  **********************************************************************************************************************/
                          3512	#1118: /*! \brief       Initialize diagnostic module
                          3513	#1119:  *  \details     Finishes the initialization of the diagnostic module. NV-memory dependent initialization can

                                   Fri Apr 10 08:32:04 2020           Page 64
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
                          3514	#1120:  *               be done here.
                          3515	#1121:  **********************************************************************************************************************/
                          3516	#1122: void FblDiagPostInit(void)
                          3517	#1123: {
                          3518	#1124: # if defined( FBL_ENABLE_RESPONSE_AFTER_RESET )
                          3519	#1125: vuint8 resetCauseRead;
                          3520	#1126: vuint8 resetCauseWrite;
                          3521	#1127: # endif
                          3522	#1129: # if defined( FBL_ENABLE_SEC_ACCESS_DELAY )
                          3523	#1130: #  if defined( FBL_DIAG_ENABLE_CORE_READ_SECACCESSDELAY_FLAG )
                          3524	#1131:    /* Initialize security access delay timer after nv-memory access is possible. */
                          3525	#1132:    if (!ApplFblGetSecAccessDelayFlag())
                          3526	#1133:    {
                          3527	#1134:       ClrSecurityAccessDelay();
                          3528	#1135:    }
                          3529	#1136: #  endif /* FBL_DIAG_ENABLE_CORE_READ_SECACCESSDELAY_FLAG */
                          3530	#1137: # endif
                          3531	#1139: # if defined( FBL_ENABLE_RESPONSE_AFTER_RESET )
                          3532	#1140:          /* Check if reset has been caused by diagnostic service
                          3533	#1141:           * StartDiagnosticSession (Default Session) or EcuReset */
                          3534	#1142:          if (   (kFblOk == ApplFblReadResetResponseFlag(&resetCauseRead))
                          3535	#1143:              && (resetCauseRead != RESET_RESPONSE_NOT_REQUIRED))
                          3536	#1144:          {
                          3537	#1145:             /* FBL started from reset
                          3538	#1146:              * Clear flag before sending response to be ready for the next request */
                          3539	#1147:             resetCauseWrite = RESET_RESPONSE_NOT_REQUIRED;
                          3540	#1149:             (void)ApplFblWriteResetResponseFlag(&resetCauseWrite);   /* PRQA S 3425 */ /* MD_FblDiag_3425 */
                          3541	#1151:             if (FblMainGetStartFromAppl())
                          3542	#1152:             {
                          3543	#1153:                /* Both reprogramming flag and reset response flag are set.
                          3544	#1154:                 * Clear reset response flag but prioritize the reprogramming flag. */
                          3545	#1155:                assertFblInternal(0u, kFblOemAssertInvalidError);  /* PRQA S 2214 */ /* MD_FblDiag_2214 */
                          3546	#1156:             }
                          3547	#1157:             else
                          3548	#1158:             {
                          3549	#1159:                /* Send response for StartDiagnosticSession or EcuReset request */
                          3550	#1160:                FblDiagInitStartFromReset(resetCauseRead);
                          3551	#1161:             }
                          3552	#1162:          }
                          3553	#1163: # endif /* FBL_ENABLE_RESPONSE_AFTER_RESET */
                          3554	#1165:          /* Send programming session request response */
                          3555	#1166:          if (FblMainGetStartFromAppl())
                          3556	#1167:          {
                          3557	#1168:             /* FBL started from application */
                          3558	#1169:             FblDiagInitStartFromAppl();
                          3559	#1170:          }
                          3560	#1172: # if defined( FBL_ENABLE_SLEEPMODE )
                          3561	#1173:          /* Initialize sleep mode counter */
                          3562	#1174:          FblSleepCounterReload();
                          3563	#1175: # endif
                          3564	#1177: # if defined( FBL_DIAG_ENABLE_OEM_POSTINIT )
                          3565	#1178:    /* OEM-specific initializations */
                          3566	#1179:    FblDiagOemPostInit();
                          3567	#1180: # endif /* FBL_DIAG_ENABLE_OEM_POSTINIT */
                          3568	#1181: }
                          3569	#1182: #endif /* FBL_DEF_ENABLE_NON_KB_MAIN */

                                   Fri Apr 10 08:32:04 2020           Page 65
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
                          3570	#1184: /***********************************************************************************************************************
                          3571	#1185:  *  FblDiagDeinit
                          3572	#1186:  **********************************************************************************************************************/
                          3573	#1187: /*! \brief       Function prepares for FBL shutdown on diagnostic service request.
                          3574	#1188:  **********************************************************************************************************************/
                          3575	#1189: static void FblDiagDeinit(void)
                          3576	#1190: {
                          3577	#1191:    /* Discard pending FblLib_Mem tasks */
                          3578	#1192:    FblMemDeinit();
                          3579	#1194: #if defined( FBL_DIAG_ENABLE_OEM_DEINIT )
                          3580	#1195:    /* Shutdown OEM-specific service handling */
                          3581	#1196:    FblDiagOemDeinit();
                          3582	#1197: #endif /* FBL_DIAG_ENABLE_OEM_DEINIT */
                          3583	#1199:    if (GetDiagProgrammingSession())
                          3584	#1200:    {
                          3585	#1201:       /* ECU programming mode is active */
                          3586	#1202:       ClrDiagProgrammingSession();
                          3587	#1203:       if (GetMemDriverInitialized())
                          3588	#1204:       {
                          3589	#1205:          /* Remove memory driver from RAM-buffer */
                          3590	#1206:          FblCwSetOfflineMode();
                          3591	#1208:          (void)MemDriver_DeinitSync(V_NULL);
                          3592	#1210:          FblCwSetOnlineMode();
                          3593	#1212:          /* Reinitialize memory driver flash */
                          3594	#1213:          ClrMemDriverInitialized();
                          3595	#1214:       }
                          3596	#1216:       /* Turn off programming voltage */
                          3597	#1217:       ApplFblResetVfp();
                          3598	#1218:    }
                          3599	#1220:    ClrWaitEcuReset();   /* PRQA S 3109 */ /* MD_FblDiag_3109 */
                          3600	#1222:    /* Clear all flags for service handling */
                          3601	#1223:    FblDiagResetServiceFlags();
                          3602	#1225:    /* Request shutdown from ComWrapper */
                          3603	#1226:    FblCwShutdownRequest(kFblCwResetEcuRegularCase);
                          3604	#1227: }
                          3605	#1229: /***********************************************************************************************************************
                          3606	#1230:  *  FblDiagStateTask
                          3607	#1231:  **********************************************************************************************************************/
                          3608	#1232: /*! \brief       This function handles the surveillance of the tester present timer.
                          3609	#1233:  *  \details     When a timeout occurs the startup code of the FBL is executed.
                          3610	#1234:  **********************************************************************************************************************/
                          3611	#1235: void FblDiagStateTask( void )
                          3612	#1236: {
                          3613	#1237:    tFblResult result;
                          3614	#1239: #if defined( FBL_DIAG_ENABLE_TASK_LOCKS )
                          3615	#1240:    if (!GetDiagStateTaskRunning())
                          3616	#1241:    {
                          3617	#1242:       SetDiagStateTaskRunning();
                          3618	#1243: #endif /* FBL_DIAG_ENABLE_TASK_LOCKS */
                          3619	#1245:       /* Diagnostic service dispatcher. Will be executed when a service has to be managed */
                          3620	#1246:       if (diagResponseFlag != kDiagResponseIdle)
                          3621	#1247:       {
                          3622	#1248:          /* Prepare return value */
                          3623	#1249:          result = kFblOk;
                          3624	#1251:          /* This is the initial call after reception of a service request */
                          3625	#1252:          if (diagResponseFlag == kDiagResponseRequested)

                                   Fri Apr 10 08:32:04 2020           Page 66
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
                          3626	#1253:          {
                          3627	#1254:             /* Initialize security seed */
                          3628	#1255:             (void)ApplFblSecuritySeedInit();
                          3629	#1257:             /* Advance service processing state to repeated service
                          3630	#1258:              * This will ensure that the service handler will be
                          3631	#1259:              * called until it has been concluded, e.g. by DiagProcessingDone() */
                          3632	#1260:             diagResponseFlag = kDiagRepeatResponse;
                          3633	#1262:             /* Search for a valid configured service in the service table */
                          3634	#1263:             serviceInfo = FindServiceInfo(diagServiceCurrent);
                          3635	#1265:             /* Check if service was found in service table */
                          3636	#1266:             if (serviceInfo != (V_MEMROM1 tServiceInfoTable  V_MEMROM2 V_MEMROM3 *) V_NULL)
                          3637	#1267:             {
                          3638	#1268:                /* Service available. Check conditions */
                          3639	#1270:                /* Check if service is allowed functionally */
                          3640	#1271:                if (   GetFunctionalRequest()
                          3641	#1272:                    && ((serviceInfo->sessionSupport & kDiagFunctionalRequestAllowed) == 0u)
                          3642	#1273:                   )
                          3643	#1274:                {
                          3644	#1275:                   /* No functional request allowed for this service.
                          3645	#1276:                    * Discard service and finish processing. */
                          3646	#1277:                   DiagSetNoResponse();
                          3647	#1279:                   /* Prevent call of the main handler */
                          3648	#1280:                   result = kFblFailed;
                          3649	#1281:                }
                          3650	#1282:                else
                          3651	#1283:                {
                          3652	#1284:                   /* Check valid parameter */
                          3653	#1285:                   assertFblGen((serviceInfo->mainHandlerIdx < kSizeOfMainHandlerTable), kFblOemAssertMainHandlerIdxInvalid);  /* PRQA S 2214 */ /* MD_FblDiag_2214 */
                          3654	#1287:                   /* Handler can be processed now */
                          3655	#1288:                   serviceMainHandler = kServiceMainHandlerFctTable[serviceInfo->mainHandlerIdx];
                          3656	#1289:                   result = CheckServicePreconditions(serviceInfo);
                          3657	#1291:                   /* Check succeeded. Continue and invoke user check. */
                          3658	#1292:                   if (result == kFblOk)
                          3659	#1293:                   {
                          3660	#1294:                      /* Service is basically allowed - response pending messages can be sent now */
                          3661	#1295:                      SetRcrRpAllowed();
                          3662	#1297:                      {
                          3663	#1298:                         result = ApplFblCheckConditions(&DiagBuffer[kDiagFmtSubparam], (tCwDataLengthType)(DiagDataLength));
                          3664	#1299:                      }
                          3665	#1300:                   }
                          3666	#1301:                }
                          3667	#1302:             }
                          3668	#1303:          }
                          3669	#1305:          /* Don't call the main handler if an error has already been determined or reset is pending.
                          3670	#1306:           * Thus, it will be called in case of NoResponse, RepeatedResponse and PutPosResponse. */
                          3671	#1307:          if ((result == kFblOk) && ((diagResponseFlag & kDiagPutNegResponse) == 0) && (!GetWaitEcuReset()))
                          3672	#1308:          {
                          3673	#1309:             assertFblInternal( (serviceMainHandler != kDiagSubFctNoMainHandler) , kFblSysAssertServiceMainHandlerInvalid); /* PRQA S 2214 */ /* MD_FblDiag_2214 */
                          3674	#1311:             {
                          3675	#1312:                /* Call main handler or repeated service call */
                          3676	#1313:                result = (*serviceMainHandler)(&DiagBuffer[kDiagFmtSubparam], DiagDataLength);   /* PRQA S 3199 */ /* MD_FblDiag_3199 */
                          3677	#1314:             }
                          3678	#1315:          }
                          3679	#1317:          /* Activate post handler after diagnostic service has been processed. */
                          3680	#1318:          SetDiagHandlerCalled();
                          3681	#1319:          /* Finish service processing if service has been concluded before */

                                   Fri Apr 10 08:32:04 2020           Page 67
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
                          3682	#1320:          FblDiagResponseProcessor();
                          3683	#1322:       }
                          3684	#1324: #if defined( FBL_MEM_ENABLE_PIPELINING )
                          3685	#1325:       /* Resume stored FblLib_Mem operation */
                          3686	#1326:       FblMemResumeIndication();
                          3687	#1327: #endif /* FBL_MEM_ENABLE_PIPELINING */
                          3688	#1329:       /* Check for reset request
                          3689	#1330:        * The following preconditions have to be fulfilled:
                          3690	#1331:          * Reset message confirmed
                          3691	#1332:          * Pre-reset function (e.g. flag written to NV-memory) has finished */
                          3692	#1333:       if ((GetWaitEcuReset()) && (GetResetMsgConfirmed()) && (GetEcuResetFctFinished()))
                          3693	#1334:       {
                          3694	#1335:          FblDiagDeinit();
                          3695	#1336:       }
                          3696	#1338: #if defined( FBL_ENABLE_SEC_ACCESS_DELAY )
                          3697	#1339:       /* Check if Security access delay counter close to expire */
                          3698	#1340:       if (GetSecurityAccessDelay() == 1u)
                          3699	#1341:       {
                          3700	#1342:          /* If so, conclude the decrement and check to clear the flag in EEPROM */
                          3701	#1343:          ClrSecurityAccessDelay();
                          3702	#1345: # if defined( FBL_DIAG_ENABLE_CORE_WRITE_SECACCESSDELAY_FLAG )
                          3703	#1346:          /* Clear security access delay flag */
                          3704	#1347:          (void)ApplFblClrSecAccessDelayFlag();
                          3705	#1348: # endif /* FBL_DIAG_ENABLE_CORE_WRITE_SECACCESSDELAY_FLAG */
                          3706	#1349:       }
                          3707	#1350: #endif
                          3708	#1352: #if defined( FBL_DIAG_ENABLE_OEM_STATETASK )
                          3709	#1353:       FblDiagOemStateTask();
                          3710	#1354: #endif /* FBL_DIAG_ENABLE_OEM_STATETASK */
                          3711	#1356: #if defined( FBL_DIAG_ENABLE_TASK_LOCKS )
                          3712	#1357:       /* Allow further task executions */
                          3713	#1358:       ClrDiagStateTaskRunning();
                          3714	#1359:    }
                          3715	#1360: #endif /* FBL_DIAG_ENABLE_TASK_LOCKS */
                          3716	#1361: }  /* PRQA S 6010, 6030, 6050, 6080 */ /* MD_MSR_STPTH, MD_MSR_STCYC, MD_MSR_STCAL, MD_MSR_STMIF */
                          3717	#1363: /***********************************************************************************************************************
                          3718	#1364:  *  Diagnostic tasks
                          3719	#1365:  **********************************************************************************************************************/
                          3720	#1367: /***********************************************************************************************************************
                          3721	#1368:  *  FblDiagTimerTask
                          3722	#1369:  **********************************************************************************************************************/
                          3723	#1370: /*! \brief       This function handles the surveillance of the tester present timer.
                          3724	#1371:  *  \details     When a timeout occurs the startup code of the FBL is executed. Has to be executed from RAM
                          3725	#1372:  *               if diagnostic functionality should be maintained while flashing, e.g. if pipelined programming
                          3726	#1373:  *               is enabled.
                          3727	#1374:  **********************************************************************************************************************/
                          3728	#1375: void FblDiagTimerTask(void)
                          3729	#1376: {
                          3730	#1377: #if defined( FBL_DIAG_ENABLE_TASK_LOCKS )
                          3731	#1378:    if (!GetDiagTimerTaskRunning())
                          3732	#1379:    {
                          3733	#1380:       SetDiagTimerTaskRunning();
                          3734	#1381: #endif /* FBL_DIAG_ENABLE_TASK_LOCKS */
                          3735	#1382:       /* Tester present timing */
                          3736	#1383:       if (TimeoutTesterValue() != 0u)
                          3737	#1384:       {

                                   Fri Apr 10 08:32:04 2020           Page 68
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
                          3738	#1385:          DecTimeoutTesterValue();
                          3739	#1386:          if (TimeoutTesterValue() == 0u)
                          3740	#1387:          {
                          3741	#1388: #if defined( FBL_DIAG_ENABLE_OEM_SESSION_TIMEOUT )
                          3742	#1389:             FblDiagSessionTimeout();
                          3743	#1390: #else
                          3744	#1391:             /* Tester present timer expired, exit bootloader via reset */
                          3745	#1392:             FblDiagEcuReset();
                          3746	#1393: #endif
                          3747	#1394:          }
                          3748	#1395:       }
                          3749	#1397:       /* ECU reset is pending */
                          3750	#1398:       if (TimeoutEcuResetValue() != 0u)
                          3751	#1399:       {
                          3752	#1400:          DecTimeoutEcuResetValue();
                          3753	#1401:          if (TimeoutEcuResetValue() == 0u)
                          3754	#1402:          {
                          3755	#1403:             /* ECU reset timer expired
                          3756	#1404:              * Exit bootloader via Reset, but force no response!! */
                          3757	#1405:             FblDiagEcuReset();
                          3758	#1406:          }
                          3759	#1407:       }
                          3760	#1410: #if defined( FBL_DEF_ENABLE_NON_KB_MAIN  )
                          3761	#1411: # if defined( FBL_ENABLE_SLEEPMODE )
                          3762	#1412:             /* Sleep mode timer */
                          3763	#1413:             if (FblGetSleepCounter() != 0u)
                          3764	#1414:             {
                          3765	#1415:                FblDecSleepCounter();
                          3766	#1416:                if (FblGetSleepCounter() == 0u)
                          3767	#1417:                {
                          3768	#1418:                   ApplFblBusSleep();
                          3769	#1419:                   FblSleepCounterReload();
                          3770	#1420:                }
                          3771	#1421:             }
                          3772	#1422: # endif /* FBL_ENABLE_SLEEPMODE */
                          3773	#1423: #endif /* FBL_DEF_ENABLE_NON_KB_MAIN */
                          3774	#1425: #if defined( FBL_ENABLE_SEC_ACCESS_DELAY )
                          3775	#1426:       /* Security access delay timing */
                          3776	#1427:       if (GetSecurityAccessDelay() > 1u)
                          3777	#1428:       {
                          3778	#1429:          DecSecurityAccessDelay();
                          3779	#1430:       }
                          3780	#1431: #endif
                          3781	#1433: #if defined( FBL_DIAG_ENABLE_OEM_TIMERTASK )
                          3782	#1434:       FblDiagOemTimerTask();
                          3783	#1435: #endif /* FBL_DIAG_ENABLE_OEM_TIMERTASK */
                          3784	#1437: #if defined( FBL_DIAG_ENABLE_TASK_LOCKS )
                          3785	#1438:       /* Allow further task executions */
                          3786	#1439:       ClrDiagTimerTaskRunning();
                          3787	#1440:    }
                          3788	#1441: #endif /* FBL_DIAG_ENABLE_TASK_LOCKS */
                          3789	#1442: }
                          3790	#1444: /***********************************************************************************************************************
                          3791	#1445:  *  Diagnostic kernel handling functions
                          3792	#1446:  **********************************************************************************************************************/
                          3793	#1448: /***********************************************************************************************************************

                                   Fri Apr 10 08:32:04 2020           Page 69
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
                          3794	#1449:  *  CheckSubparameter
                          3795	#1450:  **********************************************************************************************************************/
                          3796	#1451: /*! \brief       This function checks if all sub-parameters matches the values in DiagBuffer
                          3797	#1452:  *  \pre         All service table entries are initialized properly.
                          3798	#1453:  *  \param[in]   subFctParamIdTable Pointer to sub-parameter values
                          3799	#1454:  *  \param[in]   paramId Parameter identifier to be checked.
                          3800	#1455:  *  \return      kSubServiceValid: sub-function known and valid or Bit coded failures.
                          3801	#1456:  *               kSubServiceParameterNotFound: No parameter found for this sub-service.
                          3802	#1457:  *               kSubServiceFunctionNotFound:   No function found for this sub-service (first byte).
                          3803	#1458:  **********************************************************************************************************************/
                          3804	#1459: static vuint16 CheckSubparameter(V_MEMROM1 vuint8 V_MEMROM2 V_MEMROM3 * subFctParamIdTable, vsintx paramId)
                          3805	#1460: {
                          3806	#1461:    vuint16 result;
                          3807	#1463:    result = kSubServiceValid;
                          3808	#1465:    while (paramId > 0)
                          3809	#1466:    {
                          3810	#1467:       /* Decrement length indicator to become an index */
                          3811	#1468:       paramId--;
                          3812	#1470:       /* Typecasts are safe because while loop is only executed for positive values of paramId */
                          3813	#1471:       if (DiagBuffer[kDiagFmtSubparam + (vuintx)paramId] != subFctParamIdTable[(vuintx)paramId])
                          3814	#1472:       {
                          3815	#1473:          if ((paramId == 0) && (GetServiceHasSubfunction()))
                          3816	#1474:          {
                          3817	#1475:             /* Assuming the sub-function is always the first byte */
                          3818	#1476:             result |= kSubServiceFunctionNotFound;
                          3819	#1477:          }
                          3820	#1478:          else
                          3821	#1479:          {
                          3822	#1480:             result |= kSubServiceParameterNotFound;
                          3823	#1481:          }
                          3824	#1482:       }
                          3825	#1483:    }
                          3826	#1484:    return result;
                          3827	#1485: }
                          3828	#1487: /***********************************************************************************************************************
                          3829	#1488:  *  CheckSubServiceTable
                          3830	#1489:  **********************************************************************************************************************/
                          3831	#1490: /*! \brief       This routine checks if the subfunction is supported.
                          3832	#1491:  *  \details     Once all subfunction parameters have been checked, it's been checked if this subfunction
                          3833	#1492:  *               is allowed in active session and length is correct.
                          3834	#1493:  *               If a valid service-instance handler was found, it will be used instead of the main handler.
                          3835	#1494:  *  \pre         Service available and valid configuration in the serviceInfoTable.
                          3836	#1495:  *  \param[in]   subFctInfo Pointer to subfunction descriptor
                          3837	#1496:  *  \param[in]   infoTableLen
                          3838	#1497:  *  \param[in]   paramIdTableLen
                          3839	#1498:  *  \return      kSubServiceValid: subfunction known and valid
                          3840	#1499:  **********************************************************************************************************************/
                          3841	#1500: static vuint16 CheckSubServiceTable(V_MEMROM1 tSubFctInfoTable V_MEMROM2 V_MEMROM3 * subFctInfo, vsintx infoTableLen, vsintx paramIdTableLen)
                          3842	#1501: {
                          3843	#1502:    vuint16 result;
                          3844	#1503:    vuint16 resultSubParam;
                          3845	#1504:    vuint16 subParState;
                          3846	#1506:    /* Initialize return value */
                          3847	#1507:    result = (kSubServiceParameterNotFound | kSubServiceFunctionNotFound | kSubServiceTableMismatch);
                          3848	#1509:    subParTabIdx = 0u;
                          3849	#1510:    subParState = 0u;

                                   Fri Apr 10 08:32:04 2020           Page 70
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
                          3850	#1512:    /* Walk through the list of all listed sub-functions */
                          3851	#1513:    while (infoTableLen > 0)
                          3852	#1514:    {
                          3853	#1515:       /* Decrement table length to become an index into the table */
                          3854	#1516:       infoTableLen--;
                          3855	#1518:       /* This is tricky: The subParamMask keeps the flag 'ParameterNotFound' or 'SubfunctionNotFound' to 0 if this once was found */
                          3856	#1519:       resultSubParam = CheckSubparameter(subFctInfo[infoTableLen].subFctParamIdTable, paramIdTableLen);
                          3857	#1520:       result = ((resultSubParam & result) | kSubServiceTableMismatch);
                          3858	#1522:       /* Perform sub-service checks */
                          3859	#1523:       if (resultSubParam == kSubServiceValid)
                          3860	#1524:       {
                          3861	#1525:          /* Parameter-ID matches. Sub-function condition checks can be done now. */
                          3862	#1526:          result = kSubServiceValid;
                          3863	#1527:          /* Overwrite Service session info with SubService session info
                          3864	#1528:           * Mainly for later security access check on sub-service level */
                          3865	#1529:          currentServiceSessionSupport = subFctInfo[infoTableLen].sessionSupport;
                          3866	#1531:          /* Sub-function supported in active session ? */
                          3867	#1532:          if ((subFctInfo[infoTableLen].sessionSupport & GetCurrentSession()) == 0u)
                          3868	#1533:          {
                          3869	#1534:             /* Set error bit that subFunction/-parameter not allowed in current session */
                          3870	#1535:             result |= kSubServiceSessionFailure;
                          3871	#1536:          }
                          3872	#1537:          if ((subFctInfo[infoTableLen].sessionSupport & kDiagLengthSpecialCheck) == 0u)
                          3873	#1538:          {
                          3874	#1539:             /* Check for correct data length of this sub function */
                          3875	#1540:             if (subFctInfo[infoTableLen].serviceLen != DiagDataLength)
                          3876	#1541:             {
                          3877	#1542:                /* Set the error bit that length doesn't match */
                          3878	#1543:                result |= kSubServiceLenFailure;
                          3879	#1544:             }
                          3880	#1545:          }
                          3881	#1546:          else
                          3882	#1547:          {
                          3883	#1548:             /* Dynamic length check needed for this sub-service */
                          3884	#1549:             if (FblDiagCheckSpecialLength(&DiagBuffer[kDiagFmtpbDiagData], DiagDataLength, serviceInfo) != kFblOk)
                          3885	#1550:             {
                          3886	#1551:                /* Set the error bit that length doesn't match */
                          3887	#1552:                result |= kSubServiceLenFailure;
                          3888	#1553:             }
                          3889	#1554:          }
                          3890	#1555:          /* Check if sub-service is allowed functionally */
                          3891	#1556:          if (   GetFunctionalRequest()
                          3892	#1557:              && ((subFctInfo[infoTableLen].sessionSupport & kDiagFunctionalRequestAllowed) == 0u)
                          3893	#1558:              && (GetFunctionalRequest())
                          3894	#1559:             )
                          3895	#1560:          {
                          3896	#1561:             /* Set the error bit to indicate security access denied */
                          3897	#1562:             result |= kSubServiceNoFuncSupport;
                          3898	#1563:          }
                          3899	#1565:          /* Check if sub-service is allowed functionally */
                          3900	#1566:          if (   ((subFctInfo[infoTableLen].sessionSupport & kDiagSecuredService) != 0u)
                          3901	#1567:              && (!GetSecurityUnlock())
                          3902	#1568:             )
                          3903	#1569:          {
                          3904	#1570:             /* Set the error bit to indicate security access denied */
                          3905	#1571:             result |= kSubServiceSecAccFailure;

                                   Fri Apr 10 08:32:04 2020           Page 71
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
                          3906	#1572:          }
                          3907	#1574:          /* All conditions are met. Overwrite mainHandler if a sub-function
                          3908	#1575:           * handler was given. Otherwise, use default main handler. */
                          3909	#1576:          if (   (result == kSubServiceValid)
                          3910	#1577:              && (subFctInfo[infoTableLen].mainInstanceHandlerIdx!=kServiceMainHandlerNoHandler)
                          3911	#1578:             )
                          3912	#1579:          {
                          3913	#1580:             /* Get index from sub-function table
                          3914	#1581:              * and set-up mainHandler. */
                          3915	#1582:             serviceMainHandler = kServiceMainHandlerFctTable[subFctInfo[infoTableLen].mainInstanceHandlerIdx];
                          3916	#1583:          }
                          3917	#1585:          /* !!Stop the loop by clearing the loop counter!! */
                          3918	#1586:          infoTableLen = 0;
                          3919	#1587:       }
                          3920	#1588:       else
                          3921	#1589:       {
                          3922	#1590:          if (resultSubParam == kSubServiceFunctionNotFound)
                          3923	#1591:          {
                          3924	#1592:             /* The routine parameter is supported basically*/
                          3925	#1593:             subParState |= kSubServiceParameterFound;
                          3926	#1595:             /* Store index of sub-parameter table with mismatching sub-function.
                          3927	#1596:              * This is needed for RoutineControl service to do security level-
                          3928	#1597:              * and session checks. */
                          3929	#1598:             subParTabIdx = (vuint8)infoTableLen;
                          3930	#1599:          }
                          3931	#1601:          result |= subParState;
                          3932	#1602:       }
                          3933	#1603:    }
                          3934	#1605:    /* Return calculated status */
                          3935	#1606:    return result;
                          3936	#1607: }  /* PRQA S 6030 */ /* MD_MSR_STCYC */
                          3937	#1609: /***********************************************************************************************************************
                          3938	#1610:  *  CheckServiceTable
                          3939	#1611:  **********************************************************************************************************************/
                          3940	#1612: /*! \brief       This routine checks if the subfunction is supported.
                          3941	#1613:  *  \details     Once all subfunction parameters have been checked, it's been checked if this subfunction
                          3942	#1614:  *               is allowed in active session and length is correct.
                          3943	#1615:  *               If a valid service-instance handler was found, it will be used instead of the main handler.
                          3944	#1616:  *  \pre         Service available and valid configuration in the serviceInfoTable.
                          3945	#1617:  *  \param[in]   pServiceInfo Pointer to service info table
                          3946	#1618:  *  \return      kSubServiceValid: subfunction known and valid
                          3947	#1619:  **********************************************************************************************************************/
                          3948	#1620: static vuint16 CheckServiceTable(V_MEMROM1 tServiceInfoTable V_MEMROM2 V_MEMROM3 * pServiceInfo)
                          3949	#1621: {
                          3950	#1622:    vuint16 serviceCheckResult;
                          3951	#1624:    /* Initialize variables */
                          3952	#1625:    serviceCheckResult = kCheckValid;
                          3953	#1627:    /* Initialize sessionSupport variable. Maybe overwritten for subservice
                          3954	#1628:     * This may indicate further info like securedService for subfunctions */
                          3955	#1629:    currentServiceSessionSupport = pServiceInfo->sessionSupport;
                          3956	#1631:    /* Check if service is supported in active session */
                          3957	#1632:    if ((currentServiceSessionSupport & GetCurrentSession()) == 0u)
                          3958	#1633:    {
                          3959	#1634:       serviceCheckResult |= kServiceSessionFailure;
                          3960	#1635:    }
                          3961	#1637:    /* Minimum length check - done on service level */

                                   Fri Apr 10 08:32:04 2020           Page 72
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
                          3962	#1638:    if (DiagDataLength < pServiceInfo->serviceLen)
                          3963	#1639:    {
                          3964	#1640:       serviceCheckResult |= kServiceMinLenFailure;
                          3965	#1641:    }
                          3966	#1643:    /* Security Access on service level */
                          3967	#1644:    if (((currentServiceSessionSupport & kDiagSecuredService) != 0u) && (!GetSecurityUnlock()))
                          3968	#1645:    {
                          3969	#1646:       serviceCheckResult |= kServiceSecAccFailure;
                          3970	#1647:    }
                          3971	#1649:    /* Check length on service level */
                          3972	#1650:    if ((pServiceInfo->sessionSupport & kDiagLengthSpecialCheck) != 0u)
                          3973	#1651:    {
                          3974	#1652:       /* Service requires dynamic length check */
                          3975	#1653:       if (FblDiagCheckSpecialLength(&DiagBuffer[kDiagFmtpbDiagData], DiagDataLength, pServiceInfo) != kFblOk)
                          3976	#1654:       {
                          3977	#1655:          serviceCheckResult |= kServiceLenFailure;
                          3978	#1656:       }
                          3979	#1657:    }
                          3980	#1658:    else
                          3981	#1659:    {
                          3982	#1660:       /* Constant length check */
                          3983	#1661:       if (DiagDataLength != pServiceInfo->serviceLen)
                          3984	#1662:       {
                          3985	#1663:          serviceCheckResult |= kServiceLenFailure;
                          3986	#1664:       }
                          3987	#1665:    }
                          3988	#1667:    return serviceCheckResult;
                          3989	#1668: }
                          3990	#1670: /***********************************************************************************************************************
                          3991	#1671:  *  CheckServicePreconditions
                          3992	#1672:  **********************************************************************************************************************/
                          3993	#1673: /*! \brief       The function checks the pre-conditions configured in the service descriptor.
                          3994	#1674:  *  \details     If not fulfilled, a neg. response will be issued and the function returns kFblFailed.
                          3995	#1675:  *               If all conditions are met, the function returns kFblOk.
                          3996	#1676:  *  \pre         Service available and valid configuration in the serviceInfoTable.
                          3997	#1677:  *  \param[in]   pServiceInfo Pointer to service descriptor
                          3998	#1678:  *  \return      kFblOk: Preconditions fulfilled, kFblFailed: Preconditions not fulfilled, neg. response issued.
                          3999	#1679:  *               If all conditions are met, the function returns kFblOk.
                          4000	#1680:  **********************************************************************************************************************/
                          4001	#1681: static tFblResult CheckServicePreconditions(V_MEMROM1 tServiceInfoTable V_MEMROM2 V_MEMROM3* pServiceInfo)
                          4002	#1682: {
                          4003	#1683:    tFblResult result;
                          4004	#1684:    vuint16 serviceCheckResult;
                          4005	#1686:    /* Initialize variables */
                          4006	#1687:    result = kFblOk;
                          4007	#1689:    /* Do service level checks */
                          4008	#1690:    serviceCheckResult = CheckServiceTable(pServiceInfo);
                          4009	#1692:    /* Process suppress positive response bit */
                          4010	#1693:    if ((pServiceInfo->sessionSupport & kDiagServiceIsSubfunction ) == kDiagServiceIsSubfunction)
                          4011	#1694:    {
                          4012	#1695:       SetServiceHasSubfunction();
                          4013	#1696:       /* Sub-function may include suppress positive response bit */
                          4014	#1697:       ChkSuppressPosRspMsgIndication(&DiagBuffer[kDiagFmtSubparam]);
                          4015	#1698:    }
                          4016	#1699:    else
                          4017	#1700:    {

                                   Fri Apr 10 08:32:04 2020           Page 73
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
                          4018	#1701:       ClrServiceHasSubfunction();
                          4019	#1702:    }
                          4020	#1704:    /* Process sub-function table */
                          4021	#1705:    if (pServiceInfo->subFctParamIdTableLen != 0)
                          4022	#1706:    {
                          4023	#1707:       /* Remove error bits which are possibly set by service check */
                          4024	#1708:       serviceCheckResult &= FblInvert16Bit(kCheckLenFailure);
                          4025	#1709:       if (serviceCheckResult == kServiceFailure)
                          4026	#1710:       {
                          4027	#1711:          serviceCheckResult = 0u;
                          4028	#1712:       }
                          4029	#1713:       /* Check sub-service table */
                          4030	#1714:       serviceCheckResult |= CheckSubServiceTable(pServiceInfo->subFctInfo,
                          4031	#1715:                                                  pServiceInfo->subFunctionInfoLen,
                          4032	#1716:                                                  pServiceInfo->subFctParamIdTableLen);
                          4033	#1717:    }
                          4034	#1719:    if (serviceCheckResult != kCheckValid)
                          4035	#1720:    {
                          4036	#1721:       /* Set return value */
                          4037	#1722:       result = kFblFailed;
                          4038	#1724:       /* Evaluate errors and set OEM-specific NRCs */
                          4039	#1725:       if (pServiceInfo->serviceId == kDiagSidRoutineControl)
                          4040	#1726:       {
                          4041	#1727:          /* Special NRC processing for RoutineControl services */
                          4042	#1728:          FblDiagProcessRcNrc(pServiceInfo, serviceCheckResult);
                          4043	#1729:       }
                          4044	#1730:       else if (GetServiceHasSubfunction())
                          4045	#1731:       {
                          4046	#1732:          /* NRC processing for service with sub-function */
                          4047	#1733:          FblDiagProcessSubfunctionNrc(pServiceInfo, serviceCheckResult);
                          4048	#1734:       }
                          4049	#1735:       else if (pServiceInfo->subFctParamIdTableLen != 0)
                          4050	#1736:       {
                          4051	#1737:          /* NRC processing for service with sub-parameter */
                          4052	#1738:          FblDiagProcessSubparamNrc(pServiceInfo, serviceCheckResult);
                          4053	#1739:       }
                          4054	#1740:       else
                          4055	#1741:       {
                          4056	#1742:          /* NRC processing for standard services */
                          4057	#1743:          FblDiagProcessServiceNrc(pServiceInfo, serviceCheckResult);
                          4058	#1744:       }
                          4059	#1745:    }
                          4060	#1747:    return result;
                          4061	#1748: }
                          4062	#1750: /***********************************************************************************************************************
                          4063	#1751:  *  FindServiceInfo
                          4064	#1752:  **********************************************************************************************************************/
                          4065	#1753: /*! \brief       This function searches for the info table that corresponds to the service ID given in the parameter.
                          4066	#1754:  *  \details     Returns pointer to the structure of the service descriptor
                          4067	#1755:  *               for the given service ID. Otherwise returns 0.
                          4068	#1756:  *  \param[in]   serviceId UDS service ID of requested service
                          4069	#1757:  *  \return      Pointer to the service info table
                          4070	#1758:  **********************************************************************************************************************/
                          4071	#1759: static V_MEMROM1 tServiceInfoTable  V_MEMROM2 V_MEMROM3 * FindServiceInfo(vuint8 serviceId)
                          4072	#1760: {
                          4073	#1761:    V_MEMROM1 tServiceInfoTable V_MEMROM2 V_MEMROM3 * serviceInfoTable;

                                   Fri Apr 10 08:32:04 2020           Page 74
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
                          4074	#1762:    vsintx i;
                          4075	#1764:    /* Initialize variables */
                          4076	#1765:    serviceInfoTable = (V_MEMROM1 tServiceInfoTable  V_MEMROM2 V_MEMROM3 *) V_NULL;
                          4077	#1767:    /* Search for service information */
                          4078	#1768:    for (i = (vsintx)(kSizeOfServiceTable - 1); i >= 0; i--)
                          4079	#1769:    {
                          4080	#1770:       if (serviceId == kServiceInfoTable[i].serviceId)
                          4081	#1771:       {
                          4082	#1772:          /* Service found */
                          4083	#1773:          serviceInfoTable = &kServiceInfoTable[i];
                          4084	#1774:          break;
                          4085	#1775:       }
                          4086	#1776:    }
                          4087	#1778:    return serviceInfoTable;
                          4088	#1779: }
                          4089	#1781: /***********************************************************************************************************************
                          4090	#1782:  *  Callback functions from fbl_main
                          4091	#1783:  **********************************************************************************************************************/
                          4092	#1785: /***********************************************************************************************************************
                          4093	#1786:  *  FblDiagInitStartFromAppl
                          4094	#1787:  **********************************************************************************************************************/
                          4095	#1788: /*! \brief       Starts programming session if the Bootloader is called from the application.
                          4096	#1789:  *  \details     This function prepares a programming session request and starts the diagnostic processing
                          4097	#1790:  *               of this request after the real request has been received by the application software.
                          4098	#1791:  **********************************************************************************************************************/
                          4099	#1792: void FblDiagInitStartFromAppl(void)
                          4100	#1793: {
                          4101	#1794:    FblCwSetRxBlock();
                          4102	#1796:    if (FblDiagRxGetPhysBuffer(kDiagRqlSpsFromAppl + 1u) == DiagBuffer)
                          4103	#1797:    {
                          4104	#1798:       /* Diagnostic session control is processed */
                          4105	#1799:       DiagBuffer[kDiagFmtServiceId] = kDiagSidDiagnosticSessionControl;
                          4106	#1801: #if defined( FBL_DIAG_ENABLE_OEM_SPS_REQUEST )
                          4107	#1802:       /* Use OEM function to prepare programming session request */
                          4108	#1803:       FblDiagOemPrepareSpsRequest(DiagBuffer, &DiagDataLength);
                          4109	#1804: #else
                          4110	#1805:       /* Prepare DiagBuffer for DiagnosticSessionControl service */
                          4111	#1806:       DiagBuffer[kDiagFmtSubparam] = kDiagSubProgrammingSession;
                          4112	#1807:       DiagDataLength = kDiagRqlDiagnosticSessionControl;
                          4113	#1808: #endif /* FBL_DIAG_ENABLE_OEM_SPS_REQUEST */
                          4114	#1810: #if defined( FBL_DIAG_ENABLE_SPS_EXTENDED_SESSION )
                          4115	#1811:       /* Set diagnostic session (extended session) */
                          4116	#1812:       SetDiagExtendedSession();  /* PRQA S 3109 */ /* MD_FblDiag_3109 */
                          4117	#1813: #endif /* FBL_DIAG_ENABLE_SPS_EXTENDED_SESSION */
                          4118	#1815:       /* Activate tester present timer */
                          4119	#1816:       ResetTesterTimeout();
                          4120	#1818:       /* Prepare response message address */
                          4121	#1819:       if (FblCwPrepareResponseAddress() == kFblOk)
                          4122	#1820:       {
                          4123	#1821:          /* Indicate prepared buffer */
                          4124	#1822:          FblDiagRxStartIndication();
                          4125	#1823:          FblDiagRxIndication(DiagBuffer, DiagDataLength + 1u);
                          4126	#1825:          /* Dispatch prepared buffer */
                          4127	#1826:          FblDiagStateTask();
                          4128	#1828:          /* Preconditions already checked by application */
                          4129	#1829:          SetPreconditionsChecked();

                                   Fri Apr 10 08:32:04 2020           Page 75
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
                          4130	#1830:       }
                          4131	#1831:       else
                          4132	#1832:       {  /* PRQA S 3201 */ /* MD_FblDiag_3201 */
                          4133	#1833:          /* No address information found - cancel response */
                          4134	#1834:          FblDiagConfirmation();
                          4135	#1835:          FblCwResetRxBlock();
                          4136	#1836:       }
                          4137	#1837:    }
                          4138	#1838:    else
                          4139	#1839:    {
                          4140	#1840:       FblCwResetRxBlock();
                          4141	#1841:    }
                          4142	#1842: } /* PRQA S 6050 */ /* MD_MSR_STCAL */
                          4143	#1844: #if defined( FBL_ENABLE_RESPONSE_AFTER_RESET )
                          4144	#1845: /***********************************************************************************************************************
                          4145	#1846:  *  FblDiagInitStartFromReset
                          4146	#1847:  **********************************************************************************************************************/
                          4147	#1848: /*! \brief       Process a reset request or default session request received before reset.
                          4148	#1849:  *  \details     This function is called from FblInit() when the FBL is started from reset and the application is not
                          4149	#1850:  *               valid or the application starts the FBL with a reprogramming request.
                          4150	#1851:  *  \param[in]   resetRequestType RESET_RESPONSE_SDS_REQUIRED - Response for default session request
                          4151	#1852:  *                                RESET_RESPONSE_ECURESET_REQUIRED - Response for ECU reset request
                          4152	#1853:  *               No response otherwise
                          4153	#1854:  **********************************************************************************************************************/
                          4154	#1855: void FblDiagInitStartFromReset(vuint8 resetRequestType)
                          4155	#1856: {
                          4156	#1857:    FblCwSetRxBlock();
                          4157	#1859:    if (FblDiagRxGetPhysBuffer(kDiagRqlDiagnosticSessionControl + 1u) == DiagBuffer)
                          4158	#1860:    {
                          4159	#1861:       /* Set diagnostic session (default session) */
                          4160	#1862:       SetDiagDefaultSession();   /* PRQA S 3109 */ /* MD_FblDiag_3109 */
                          4161	#1864:       switch (resetRequestType)
                          4162	#1865:       {
                          4163	#1866:          case RESET_RESPONSE_SDS_REQUIRED:
                          4164	#1867:          {
                          4165	#1868:             /* Session control is processed */
                          4166	#1869:             diagServiceCurrent = kDiagSidDiagnosticSessionControl;
                          4167	#1870: # if defined( FBL_DIAG_ENABLE_OEM_SDS_RESPONSE )
                          4168	#1871:             /* Use OEM function to prepare default session request response */
                          4169	#1872:             FblDiagOemPrepareSdsResponse(DiagBuffer, &DiagDataLength);
                          4170	#1873: # else
                          4171	#1874:             /* Prepare DiagBuffer for DiagnosticSessionControl service */
                          4172	#1875:             DiagBuffer[kDiagFmtSubparam] = kDiagSubDefaultSession;
                          4173	#1876:             DiagDataLength = kDiagRqlDiagnosticSessionControl;
                          4174	#1878:             /* Diagnostic session timing */
                          4175	#1879:             DiagBuffer[kDiagFmtSubparam + 1u] = (vuint8)(kDiagSessionTimingP2 >> 8u);
                          4176	#1880:             DiagBuffer[kDiagFmtSubparam + 2u] = (vuint8)(kDiagSessionTimingP2);
                          4177	#1881:             DiagBuffer[kDiagFmtSubparam + 3u] = (vuint8)(kDiagSessionTimingP2Star >> 8u);
                          4178	#1882:             DiagBuffer[kDiagFmtSubparam + 4u] = (vuint8)(kDiagSessionTimingP2Star);
                          4179	#1883: # endif /* FBL_DIAG_ENABLE_OEM_SDS_RESPONSE */
                          4180	#1885:             /* Prepare response message address */
                          4181	#1886:             if (FblCwPrepareResponseAddress() == kFblOk)
                          4182	#1887:             {
                          4183	#1888:                DiagProcessingDone(kDiagRslDiagnosticSessionControl);
                          4184	#1889:                FblDiagResponseProcessor();
                          4185	#1890:             }

                                   Fri Apr 10 08:32:04 2020           Page 76
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
                          4186	#1891:             else
                          4187	#1892:             {  /* PRQA S 3201 */ /* MD_FblDiag_3201 */
                          4188	#1893:                /* No address information found - cancel response */
                          4189	#1894:                FblDiagConfirmation();
                          4190	#1895:                FblCwResetRxBlock();
                          4191	#1896:             }
                          4192	#1898:             break;
                          4193	#1899:          }
                          4194	#1900:          case RESET_RESPONSE_ECURESET_REQUIRED:
                          4195	#1901:          {
                          4196	#1902:             /* Reset request is processed */
                          4197	#1903:             diagServiceCurrent = kDiagSidEcuReset;
                          4198	#1904: # if defined( FBL_DIAG_ENABLE_OEM_RR_RESPONSE )
                          4199	#1905:             /* Use OEM function to prepare default session request response */
                          4200	#1906:             FblDiagOemPrepareRrResponse(DiagBuffer, &DiagDataLength);
                          4201	#1907: # else
                          4202	#1908:             /* Prepare DiagBuffer for EcuReset service */
                          4203	#1909:             DiagBuffer[kDiagFmtSubparam] = kFblDiagSubReset;
                          4204	#1910:             DiagDataLength = kDiagRqlEcuReset;
                          4205	#1911: # endif /* FBL_DIAG_ENABLE_OEM_RR_RESPONSE */
                          4206	#1912:             /* Prepare response message address */
                          4207	#1913:             if (FblCwPrepareResponseAddress() == kFblOk)
                          4208	#1914:             {
                          4209	#1915:                DiagProcessingDone(kDiagRslEcuReset);
                          4210	#1916:                FblDiagResponseProcessor();
                          4211	#1917:             }
                          4212	#1918:             else
                          4213	#1919:             {  /* PRQA S 3201 */ /* MD_FblDiag_3201 */
                          4214	#1920:                /* No address information found - cancel response */
                          4215	#1921:                FblDiagConfirmation();
                          4216	#1922:                FblCwResetRxBlock();
                          4217	#1923:             }
                          4218	#1925:             break;
                          4219	#1926:          }
                          4220	#1927:          default:
                          4221	#1928:          {
                          4222	#1929:             /* No response or parameter not supported */
                          4223	#1930:             FblDiagConfirmation();
                          4224	#1931:             FblCwResetRxBlock();
                          4225	#1932:             break;
                          4226	#1933:          }
                          4227	#1934:       }
                          4228	#1935:    }
                          4229	#1936: }
                          4230	#1937: #endif /* FBL_ENABLE_RESPONSE_AFTER_RESET */
                          4231	#1939: /* Start section to execute code from RAM */
                          4232	#1940: #define FBLDIAG_RAMCODE_START_SEC_CODE
                          4233	#1941: #include "MemMap.h"  /* PRQA S 5087 */ /* MD_MSR_19.1 */
                          4234	#1942: /***********************************************************************************************************************
                          4235	#1943:  *  Callback functions from Communication Wrapper
                          4236	#1944:  **********************************************************************************************************************/
                          4237	#1946: /***********************************************************************************************************************
                          4238	#1947:  *  FblDiagRxStartIndication
                          4239	#1948:  **********************************************************************************************************************/
                          4240	#1949: /*! \brief       Data reception call-back function to start diagnostic service processing.
                          4241	#1950:  *  \details     Indicates start of a frame to diagnostic module. Tester present timeout is stopped and

                                   Fri Apr 10 08:32:04 2020           Page 77
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
                          4242	#1951:  *               the diagnostic layer is locked until the service is processed.
                          4243	#1952:  *  \pre         TP reception successful
                          4244	#1953:  **********************************************************************************************************************/
                          4245	#1954: void FblDiagRxStartIndication(void)
                          4246	#1955: {
                          4247	#1956:    /* Halts the S3 timer while receiving a diagnostic message */
                          4248	#1957:    StopTesterTimeout();
                          4249	#1959:    /* Indicate an ongoing service processing */
                          4250	#1960:    SetServiceInProgress();
                          4251	#1962:    DiagClrError();
                          4252	#1964:    /* Reset handler */
                          4253	#1965:    serviceMainHandler = FblDiagDefaultMainHandler;
                          4254	#1966:    serviceInfo = (V_MEMROM1 tServiceInfoTable  V_MEMROM2 V_MEMROM3 *) V_NULL;
                          4255	#1967: }
                          4256	#1969: /***********************************************************************************************************************
                          4257	#1970:  *  FblDiagRxIndication
                          4258	#1971:  **********************************************************************************************************************/
                          4259	#1972: /*! \brief       Data reception call-back function to start diagnostic service processing.
                          4260	#1973:  *  \details     Valid TesterPresent requests will simply start the S3 timer and will not be processed.
                          4261	#1974:  *  \pre         TP reception successful
                          4262	#1975:  *  \param[in]   pbDiagBuffer Pointer to diagnostic buffer
                          4263	#1976:  *  \param[in]   rxDataLength number of bytes to be received
                          4264	#1977:  **********************************************************************************************************************/
                          4265	#1978: void FblDiagRxIndication(vuint8* pbDiagBuffer, tCwDataLengthType rxDataLength)
                          4266	#1979: {
                          4267	#1980:    /* Initialize diagBuffer and data length */
                          4268	#1981:    DiagBuffer = pbDiagBuffer;
                          4269	#1982:    DiagDataLength = rxDataLength - 1u;
                          4270	#1984:    /* Reset P2 timer (initial timing) */
                          4271	#1985: #if defined( FBL_DIAG_ENABLE_DYNAMIC_P2_HANDLING )
                          4272	#1986:    SetP2Timer(fblDiagTimeP2Max);
                          4273	#1987: #else
                          4274	#1988:    SetP2Timer(kFblDiagTimeP2);
                          4275	#1989: #endif /* FBL_DIAG_ENABLE_DYNAMIC_P2_HANDLING */
                          4276	#1991:    /* Handle functional TesterPresent request here */
                          4277	#1992:    if (    (kDiagSidTesterPresent == DiagBuffer[kDiagFmtServiceId])
                          4278	#1993:         && (kDiagSuppressPosRspMsgIndicationBit == DiagBuffer[kDiagFmtSubparam])
                          4279	#1994:         && (kDiagRqlTesterPresent == DiagDataLength)
                          4280	#1995:         && GetFunctionalRequest()
                          4281	#1996:       )
                          4282	#1997:    {
                          4283	#1998:       /* service processing is not in progress, release the diagBuffer */
                          4284	#1999:       FblDiagConfirmation();
                          4285	#2000:       FblCwResetRxBlock();
                          4286	#2001:    }
                          4287	#2002:    else
                          4288	#2003:    {
                          4289	#2004:       /* Set diagnostic service indication to start service processing */
                          4290	#2005:       diagResponseFlag = kDiagResponseRequested;
                          4291	#2006:       diagServiceCurrent = DiagBuffer[kDiagFmtServiceId];
                          4292	#2008: #if defined( FBL_MEM_ENABLE_PIPELINING )
                          4293	#2009:       if (FblMemTaskIsPending())
                          4294	#2010:       {
                          4295	#2011:          FblMemRxNotification();
                          4296	#2012:       }
                          4297	#2013: #endif

                                   Fri Apr 10 08:32:04 2020           Page 78
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
                          4298	#2014:    }
                          4299	#2016: #if defined( FBL_ENABLE_SLEEPMODE )
                          4300	#2017:    /* Request received - reload sleep counter */
                          4301	#2018:    FblSleepCounterReload();
                          4302	#2019: #endif
                          4303	#2020: }
                          4304	#2022: /***********************************************************************************************************************
                          4305	#2023:  *  FblDiagRxGetPhysBuffer
                          4306	#2024:  **********************************************************************************************************************/
                          4307	#2025: /*! \brief       Diagnostic buffer management function for physical requests.
                          4308	#2026:  *  \param[in]   rxDataLength Number of bytes to be received
                          4309	#2027:  *  \return      Pointer to diagnostic buffer
                          4310	#2028:  **********************************************************************************************************************/
                          4311		.align	1
                          4312		.align	1
                          4313	..gh.f.p.3.a.1.r.0.e.20:
                          4314		.type	..gh.f.p.3.a.1.r.0.e.20,@object
                          4315		.size	..gh.f.p.3.a.1.r.0.e.20,0
                          4316		.global	FblDiagRxGetPhysBuffer
                          4317	FblDiagRxGetPhysBuffer:
                          4318	#	    .bf
                          4319	.LDW05:
                          4320	#2029: vuint8* FblDiagRxGetPhysBuffer(tCwDataLengthType rxDataLength)
                          4321	#2030: {
                          4322	#2031:    vuint8* result;
                          4323	#2033:    /* Initialize variables */
                          4324	#2034:    result = (vuint8*)V_NULL;
0000067c 2403             4325		se_subi	r3, 1
                          4326	#2036:    /* Check request length and if buffer is free */
                          4327	#2037:    if ((rxDataLength > 0u )
0000067e 4807             4328		se_li	r7, 0
00000680 7023afff         4329		e_cmpl16i	r3, 4095
00000684 e000             4330		se_bge	.L2690
00000686 70c0e000         4331		e_lis	r6, %hiadj(fblDiagStates)
0000068a 1cc60000         4332		e_add16i	r6, r6, %lo(fblDiagStates)
0000068e c006             4333		se_lwz	r0, 0(r6)
00000690 67b0             4334		se_btsti	r0, 27
00000692 e200             4335		se_bne	.L2690
                          4336	#2038:         && (FBL_DIAG_BUFFER_LENGTH >= rxDataLength)
                          4337	#2039:         && (!GetDiagBufferLocked())
                          4338	#2040:       )
                          4339	#2041:    {
                          4340	#2042:       /* Initialize state variables */
                          4341	#2043:       ClrFunctionalRequest();
                          4342	#line2043
                          4343	..lin.1e9356d..4ce922d6.0_58::
                          4344	.LDWlin58:
00000694 61c0             4345		se_bclri	r0, 28
                          4346	#2045:       /* Lock buffer  */
                          4347	#2046:       SetDiagBufferLocked();
00000696 65b0             4348		se_bseti	r0, 27
00000698 70e0e000         4349		e_lis	r7, %hiadj(DiagBuffer)
0000069c 50e70000         4350		e_lwz	r7, %lo(DiagBuffer)(r7)
000006a0 d006             4351		se_stw	r0, 0(r6)
                          4352	#2048:       /* Return diagnostic buffer */
                          4353	#2049:       result = DiagBuffer;

                                   Fri Apr 10 08:32:04 2020           Page 79
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
                          4354	.L2690:
                          4355	#2050:    }
                          4356	#2052:    return result;
000006a2 0173             4357		se_mr	r3, r7
                          4358	#	    .ef
                          4359	.LDW15:
000006a4 0004             4360		se_blr
                          4361		.global	__ghs_eofn_FblDiagRxGetPhysBuffer
                          4362	__ghs_eofn_FblDiagRxGetPhysBuffer:
                          4363		.type	FblDiagRxGetPhysBuffer,@function
                          4364		.size	FblDiagRxGetPhysBuffer,$-FblDiagRxGetPhysBuffer
                          4365		.align	1
                          4366	
                          4367	#function:			FblDiagRxGetPhysBuffer
                          4368	#stack frame size:		0
                          4369	#
                          4370	#result	r7	local
                          4371	
                          4372	#rxDataLength	r3	param
                          4373	
                          4374		.data
                          4375		.section ".vletext", "vax"
                          4376		.vle
                          4377		.vle
                          4378	
                          4379	#2053: }
                          4380	
                          4381		.align	1
                          4382		.align	1
                          4383	..gh.f.p.0.a.1.r.0.e.21:
                          4384		.type	..gh.f.p.0.a.1.r.0.e.21,@object
                          4385		.size	..gh.f.p.0.a.1.r.0.e.21,0
                          4386		.global	FblDiagRxStartIndication
                          4387	FblDiagRxStartIndication:
                          4388	#	    .bf
                          4389	.LDW25:
                          4390	#1954: void FblDiagRxStartIndication(void)
                          4391	#1955: {
                          4392	#1956:    /* Halts the S3 timer while receiving a diagnostic message */
                          4393	#1957:    StopTesterTimeout();
000006a6 4800             4394		se_li	r0, 0
000006a8 70e0e000         4395		e_lis	r7, %hiadj(testerPresentTimeout)
000006ac 5c070000         4396		e_sth	r0, %lo(testerPresentTimeout)(r7)
000006b0 70c0e000         4397		e_lis	r6, %hiadj(fblDiagStates)
000006b4 50e60000         4398		e_lwz	r7, %lo(fblDiagStates)(r6)
                          4399	#1959:    /* Indicate an ongoing service processing */
                          4400	#1960:    SetServiceInProgress();
000006b8 6597             4401		se_bseti	r7, 25
000006ba 54e60000         4402		e_stw	r7, %lo(fblDiagStates)(r6)
                          4403	#1962:    DiagClrError();
000006be 70e0e000         4404		e_lis	r7, %hiadj(diagErrorCode)
000006c2 34070000         4405		e_stb	r0, %lo(diagErrorCode)(r7)
                          4406	#1964:    /* Reset handler */
                          4407	#1965:    serviceMainHandler = FblDiagDefaultMainHandler;
000006c6 70e0e000         4408		e_lis	r7, %hiadj(FblDiagDefaultMainHandler)
000006ca 1ce70000         4409		e_add16i	r7, r7, %lo(FblDiagDefaultMainHandler)

                                   Fri Apr 10 08:32:04 2020           Page 80
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
000006ce 70c0e000         4410		e_lis	r6, %hiadj(serviceMainHandler)
000006d2 54e60000         4411		e_stw	r7, %lo(serviceMainHandler)(r6)
                          4412	#1966:    serviceInfo = (V_MEMROM1 tServiceInfoTable  V_MEMROM2 V_MEMROM3 *) V_NULL;
000006d6 70e0e000         4413		e_lis	r7, %hiadj(serviceInfo)
000006da 54070000         4414		e_stw	r0, %lo(serviceInfo)(r7)
                          4415	#1967: }
                          4416	#	    .ef
                          4417	.LDW35:
000006de 0004             4418		se_blr
                          4419		.global	__ghs_eofn_FblDiagRxStartIndication
                          4420	__ghs_eofn_FblDiagRxStartIndication:
                          4421		.type	FblDiagRxStartIndication,@function
                          4422		.size	FblDiagRxStartIndication,$-FblDiagRxStartIndication
                          4423		.align	1
                          4424	
                          4425	#function:			FblDiagRxStartIndication
                          4426	#stack frame size:		0
                          4427	#
                          4428	
                          4429		.data
                          4430		.section ".vletext", "vax"
                          4431		.vle
                          4432		.vle
                          4433	
                          4434	
                          4435	#1969: /***********************************************************************************************************************
                          4436	#1970:  *  FblDiagRxIndication
                          4437	#1971:  **********************************************************************************************************************/
                          4438	#1972: /*! \brief       Data reception call-back function to start diagnostic service processing.
                          4439	#1973:  *  \details     Valid TesterPresent requests will simply start the S3 timer and will not be processed.
                          4440	#1974:  *  \pre         TP reception successful
                          4441	#1975:  *  \param[in]   pbDiagBuffer Pointer to diagnostic buffer
                          4442	#1976:  *  \param[in]   rxDataLength number of bytes to be received
                          4443	#1977:  **********************************************************************************************************************/
                          4444		.align	1
                          4445		.align	1
                          4446	..gh.f.p.4.a.1.r.0.e.22:
                          4447		.type	..gh.f.p.4.a.1.r.0.e.22,@object
                          4448		.size	..gh.f.p.4.a.1.r.0.e.22,0
                          4449		.global	FblDiagRxIndication
                          4450	FblDiagRxIndication:
000006e0 0080             4451		se_mflr	r0
000006e2 d101             4452		se_stw	r0, 4(sp)
000006e4 182106f8         4453		e_stwu	sp, -8(sp)
                          4454	#	    .bf
                          4455	.LDW45:
                          4456	#1978: void FblDiagRxIndication(vuint8* pbDiagBuffer, tCwDataLengthType rxDataLength)
                          4457	#1979: {
                          4458	#1980:    /* Initialize diagBuffer and data length */
                          4459	#1981:    DiagBuffer = pbDiagBuffer;
000006e8 70e0e000         4460		e_lis	r7, %hiadj(DiagBuffer)
000006ec 2404             4461		se_subi	r4, 1
                          4462	#1982:    DiagDataLength = rxDataLength - 1u;
000006ee 54670000         4463		e_stw	r3, %lo(DiagBuffer)(r7)
000006f2 00e4             4464		se_extzh	r4
000006f4 70e0e000         4465		e_lis	r7, %hiadj(DiagDataLength)

                                   Fri Apr 10 08:32:04 2020           Page 81
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
000006f8 5c870000         4466		e_sth	r4, %lo(DiagDataLength)(r7)
                          4467	#1984:    /* Reset P2 timer (initial timing) */
                          4468	#1985: #if defined( FBL_DIAG_ENABLE_DYNAMIC_P2_HANDLING )
                          4469	#1986:    SetP2Timer(fblDiagTimeP2Max);
                          4470	#1987: #else
                          4471	#1988:    SetP2Timer(kFblDiagTimeP2);
000006fc 4b20             4472		se_li	r0, 50
000006fe 70e0e000         4473		e_lis	r7, %hiadj(P2Timer)
00000702 5c070000         4474		e_sth	r0, %lo(P2Timer)(r7)
                          4475	#1989: #endif /* FBL_DIAG_ENABLE_DYNAMIC_P2_HANDLING */
                          4476	#1991:    /* Handle functional TesterPresent request here */
                          4477	#1992:    if (    (kDiagSidTesterPresent == DiagBuffer[kDiagFmtServiceId])
00000706 8003             4478		se_lbz	r0, 0(r3)
00000708 1800a83e         4479		e_cmpi	r0, 62
0000070c e200             4480		se_bne	.L2816
0000070e 8103             4481		se_lbz	r0, 1(r3)
00000710 1800a880         4482		e_cmpi	r0, 128
00000714 e200             4483		se_bne	.L2816
00000716 2a14             4484		se_cmpi	r4, 1
00000718 e200             4485		se_bne	.L2816
0000071a 70e0e000         4486		e_lis	r7, %hiadj(fblDiagStates)
0000071e 50e70000         4487		e_lwz	r7, %lo(fblDiagStates)(r7)
00000722 67c7             4488		se_btsti	r7, 28
00000724 e600             4489		se_beq	.L2816
                          4490	#1993:         && (kDiagSuppressPosRspMsgIndicationBit == DiagBuffer[kDiagFmtSubparam])
                          4491	#1994:         && (kDiagRqlTesterPresent == DiagDataLength)
                          4492	#1995:         && GetFunctionalRequest()
                          4493	#1996:       )
                          4494	#1997:    {
                          4495	#1998:       /* service processing is not in progress, release the diagBuffer */
                          4496	#1999:       FblDiagConfirmation();
                          4497	#line1999
                          4498	..lin.1e9356d..70f5447a.0_59::
                          4499	.LDWlin59:
00000726 78000001         4500		se_bl	FblDiagConfirmation
                          4501	#2000:       FblCwResetRxBlock();
                          4502	#line2000
                          4503	..lin.1e9356d..70f5447a.0_60::
                          4504	.LDWlin60:
0000072a 78000001         4505		e_bl	FblCwResetRxBlock
0000072e e800             4506		se_b	.L2821
                          4507	.L2816:
                          4508	#2001:    }
                          4509	#2002:    else
                          4510	#2003:    {
                          4511	#2004:       /* Set diagnostic service indication to start service processing */
                          4512	#2005:       diagResponseFlag = kDiagResponseRequested;
                          4513	#line2005
                          4514	..lin.1e9356d..70f5447a.0_61::
                          4515	.LDWlin61:
00000730 4810             4516		se_li	r0, 1
00000732 70e0e000         4517		e_lis	r7, %hiadj(diagResponseFlag)
00000736 34070000         4518		e_stb	r0, %lo(diagResponseFlag)(r7)
                          4519	#2006:       diagServiceCurrent = DiagBuffer[kDiagFmtServiceId];
0000073a 8003             4520		se_lbz	r0, 0(r3)
0000073c 70e0e000         4521		e_lis	r7, %hiadj(diagServiceCurrent)

                                   Fri Apr 10 08:32:04 2020           Page 82
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
00000740 34070000         4522		e_stb	r0, %lo(diagServiceCurrent)(r7)
                          4523	.L2821:
                          4524	#2008: #if defined( FBL_MEM_ENABLE_PIPELINING )
                          4525	#2009:       if (FblMemTaskIsPending())
                          4526	#2010:       {
                          4527	#2011:          FblMemRxNotification();
                          4528	#2012:       }
                          4529	#2013: #endif
                          4530	#2014:    }
                          4531	#2016: #if defined( FBL_ENABLE_SLEEPMODE )
                          4532	#2017:    /* Request received - reload sleep counter */
                          4533	#2018:    FblSleepCounterReload();
00000744 701223e0         4534		e_li	r0, 300000
00000748 70e0e000         4535		e_lis	r7, %hiadj(sleepCounter)
0000074c 54070000         4536		e_stw	r0, %lo(sleepCounter)(r7)
                          4537	#2019: #endif
                          4538	#2020: }
                          4539	#	    .ef
                          4540	.LDW55:
00000750 c301             4541		se_lwz	r0, 12(sp)
00000752 2071             4542		se_addi	sp, 8
00000754 0090             4543		se_mtlr	r0
00000756 0004             4544		se_blr
                          4545		.global	__ghs_eofn_FblDiagRxIndication
                          4546	__ghs_eofn_FblDiagRxIndication:
                          4547		.type	FblDiagRxIndication,@function
                          4548		.size	FblDiagRxIndication,$-FblDiagRxIndication
                          4549		.align	1
                          4550	
                          4551	#function:			FblDiagRxIndication
                          4552	#stack frame size:		8
                          4553	#link area offset:		0
                          4554	#local storage area offset:	8
                          4555	#
                          4556	
                          4557	#pbDiagBuffer	r3	param
                          4558	#rxDataLength	r4	param
                          4559	
                          4560		.data
                          4561		.section ".vletext", "vax"
                          4562		.vle
                          4563		.vle
                          4564	
                          4565	
                          4566		.align	1
                          4567		.align	1
                          4568	..gh.f.p.3.a.1.r.0.e.23:
                          4569		.type	..gh.f.p.3.a.1.r.0.e.23,@object
                          4570		.size	..gh.f.p.3.a.1.r.0.e.23,0
                          4571		.global	FindServiceInfo..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_diag_core.
                          4572	FindServiceInfo..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_diag_core.:
                          4573	FindServiceInfo:
                          4574	#	    .bf
                          4575	.LDW65:
00000758 70e0e000         4576		e_lis	r7, %hiadj(kSizeOfServiceTable)
0000075c 50e70000         4577		e_lwz	r7, %lo(kSizeOfServiceTable)(r7)

                                   Fri Apr 10 08:32:04 2020           Page 83
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
                          4578	#1759: static V_MEMROM1 tServiceInfoTable  V_MEMROM2 V_MEMROM3 * FindServiceInfo(vuint8 serviceId)
                          4579	#1760: {
                          4580	#1761:    V_MEMROM1 tServiceInfoTable V_MEMROM2 V_MEMROM3 * serviceInfoTable;
                          4581	#1762:    vsintx i;
                          4582	#1764:    /* Initialize variables */
                          4583	#1765:    serviceInfoTable = (V_MEMROM1 tServiceInfoTable  V_MEMROM2 V_MEMROM3 *) V_NULL;
00000760 4800             4584		se_li	r0, 0
                          4585	#1767:    /* Search for service information */
                          4586	#1768:    for (i = (vsintx)(kSizeOfServiceTable - 1); i >= 0; i--)
00000762 e800             4587		se_b	.L2925
                          4588	.L2926:
                          4589	#1769:    {
                          4590	#1770:       if (serviceId == kServiceInfoTable[i].serviceId)
                          4591	#line1770
                          4592	..lin.1e9356d..e1c71543.0_62::
                          4593	.LDWlin62:
00000764 18c7a014         4594		e_mulli	r6, r7, 20
00000768 1cc60000         4595		e_add16i	r6, r6, %lo(kServiceInfoTable)
0000076c 70069000         4596		e_add2is	r6, %hiadj(kServiceInfoTable)
00000770 8056             4597		se_lbz	r5, 0(r6)
00000772 0d53             4598		se_cmpl	r3, r5
00000774 e200             4599		se_bne	.L2925
                          4600	#1771:       {
                          4601	#1772:          /* Service found */
                          4602	#1773:          serviceInfoTable = &kServiceInfoTable[i];
                          4603	#line1773
                          4604	..lin.1e9356d..e1c71543.0_63::
                          4605	.LDWlin63:
00000776 0160             4606		se_mr	r0, r6
                          4607	#1774:          break;
00000778 e800             4608		se_b	.L2930
                          4609	.L2925:
                          4610	#line1768
                          4611	..lin.1e9356d..e1c71543.0_64::
                          4612	.LDWlin64:
0000077a 2407             4613		se_subi	r7, 1
0000077c 2a07             4614		se_cmpi	r7, 0
0000077e e000             4615		se_bge	.L2926
                          4616	.L2930:
                          4617	#1775:       }
                          4618	#1776:    }
                          4619	#1778:    return serviceInfoTable;
                          4620	#line1778
                          4621	..lin.1e9356d..e1c71543.0_65::
                          4622	.LDWlin65:
00000780 0103             4623		se_mr	r3, r0
                          4624	#	    .ef
                          4625	.LDW75:
00000782 0004             4626		se_blr
                          4627	__ghs_eofn_FindServiceInfo:
                          4628		.type	FindServiceInfo,@function
                          4629		.size	FindServiceInfo,$-FindServiceInfo
                          4630		.type	FindServiceInfo..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_diag_core.,@function
                          4631		.size	FindServiceInfo..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_diag_core.,$-FindServiceInfo..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_diag_core.
                          4632		.align	1
                          4633	

                                   Fri Apr 10 08:32:04 2020           Page 84
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
                          4634	#function:			FindServiceInfo
                          4635	#stack frame size:		0
                          4636	#
                          4637	#serviceInfoTable	r0	local
                          4638	#i	r7	local
                          4639	
                          4640	#serviceId	r3	param
                          4641	
                          4642		.data
                          4643		.section ".vletext", "vax"
                          4644		.vle
                          4645		.vle
                          4646	
                          4647	#1779: }
                          4648	
                          4649		.align	1
                          4650		.align	1
                          4651	..gh.f.p.3.a.1.r.0.e.24:
                          4652		.type	..gh.f.p.3.a.1.r.0.e.24,@object
                          4653		.size	..gh.f.p.3.a.1.r.0.e.24,0
                          4654		.global	CheckServiceTable..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_diag_core.
                          4655	CheckServiceTable..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_diag_core.:
                          4656	CheckServiceTable:
00000784 182106f0         4657		e_stwu	sp, -16(sp)
00000788 0080             4658		se_mflr	r0
0000078a d3f1             4659		se_stw	r31, 12(sp)
0000078c d501             4660		se_stw	r0, 20(sp)
0000078e 0135             4661		se_mr	r5, r3
                          4662	#	    .bf
                          4663	.LDW85:
                          4664	#1620: static vuint16 CheckServiceTable(V_MEMROM1 tServiceInfoTable V_MEMROM2 V_MEMROM3 * pServiceInfo)
                          4665	#1621: {
                          4666	#1622:    vuint16 serviceCheckResult;
                          4667	#1624:    /* Initialize variables */
                          4668	#1625:    serviceCheckResult = kCheckValid;
00000790 8103             4669		se_lbz	r0, 1(r3)
                          4670	#1627:    /* Initialize sessionSupport variable. Maybe overwritten for subservice
                          4671	#1628:     * This may indicate further info like securedService for subfunctions */
                          4672	#1629:    currentServiceSessionSupport = pServiceInfo->sessionSupport;
00000792 70e0e000         4673		e_lis	r7, %hiadj(currentServiceSessionSupport)
00000796 1ce70000         4674		e_add16i	r7, r7, %lo(currentServiceSessionSupport)
0000079a 70c0e000         4675		e_lis	r6, %hiadj(fblDiagStates)
0000079e 1cc60000         4676		e_add16i	r6, r6, %lo(fblDiagStates)
                          4677	#1631:    /* Check if service is supported in active session */
                          4678	#1632:    if ((currentServiceSessionSupport & GetCurrentSession()) == 0u)
000007a2 9007             4679		se_stb	r0, 0(r7)
000007a4 c076             4680		se_lwz	r7, 0(r6)
000007a6 480f             4681		se_li	r31, 0
000007a8 2e77             4682		se_andi	r7, 7
000007aa 4707             4683		se_and.	r7, r0
000007ac 70e80002         4684		e_li	r7, 16386
000007b0 7fe7f89e         4685		iseleq	r31, r7, r31
000007b4 70e0e000         4686		e_lis	r7, %hiadj(DiagDataLength)
000007b8 58870000         4687		e_lhz	r4, %lo(DiagDataLength)(r7)
000007bc a173             4688		se_lhz	r7, 2(r3)
                          4689	#1633:    {

                                   Fri Apr 10 08:32:04 2020           Page 85
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
                          4690	#1634:       serviceCheckResult |= kServiceSessionFailure;
                          4691	#1635:    }
                          4692	#1637:    /* Minimum length check - done on service level */
                          4693	#1638:    if (DiagDataLength < pServiceInfo->serviceLen)
000007be 00ef             4694		se_extzh	r31
000007c0 0d74             4695		se_cmpl	r4, r7
000007c2 e000             4696		se_bge	.L3036
                          4697	#1639:    {
                          4698	#1640:       serviceCheckResult |= kServiceMinLenFailure;
                          4699	#line1640
                          4700	..lin.1e9356d..f5a7b99c.0_66::
                          4701	.LDWlin66:
000007c4 73e8c100         4702		e_or2i	r31, 16640
                          4703	.L3036:
                          4704	#1641:    }
                          4705	#1643:    /* Security Access on service level */
                          4706	#1644:    if (((currentServiceSessionSupport & kDiagSecuredService) != 0u) && (!GetSecurityUnlock()))
000007c8 67a0             4707		se_btsti	r0, 26
000007ca e600             4708		se_beq	.L3038
000007cc c066             4709		se_lwz	r6, 0(r6)
000007ce 66c6             4710		se_btsti	r6, 12
000007d0 e200             4711		se_bne	.L3038
                          4712	#1645:    {
                          4713	#1646:       serviceCheckResult |= kServiceSecAccFailure;
                          4714	#line1646
                          4715	..lin.1e9356d..f5a7b99c.0_67::
                          4716	.LDWlin67:
000007d2 73e8c020         4717		e_or2i	r31, 16416
                          4718	.L3038:
                          4719	#1647:    }
                          4720	#1649:    /* Check length on service level */
                          4721	#1650:    if ((pServiceInfo->sessionSupport & kDiagLengthSpecialCheck) != 0u)
000007d6 67b0             4722		se_btsti	r0, 27
000007d8 e600             4723		se_beq	.L3041
                          4724	#line1651
                          4725	..lin.1e9356d..f5a7b99c.0_68::
                          4726	.LDWlin68:
000007da 7060e000         4727		e_lis	r3, %hiadj(DiagBuffer)
000007de 50630000         4728		e_lwz	r3, %lo(DiagBuffer)(r3)
                          4729	#1651:    {
                          4730	#1652:       /* Service requires dynamic length check */
                          4731	#1653:       if (FblDiagCheckSpecialLength(&DiagBuffer[kDiagFmtpbDiagData], DiagDataLength, pServiceInfo) != kFblOk)
000007e2 2003             4732		se_addi	r3, 1
000007e4 78000001         4733		e_bl	FblDiagCheckSpecialLength
000007e8 2a03             4734		se_cmpi	r3, 0
000007ea e800             4735		se_b	.L3216
                          4736	.L3041:
                          4737	#1654:       {
                          4738	#1655:          serviceCheckResult |= kServiceLenFailure;
                          4739	#1656:       }
                          4740	#1657:    }
                          4741	#1658:    else
                          4742	#1659:    {
                          4743	#1660:       /* Constant length check */
                          4744	#1661:       if (DiagDataLength != pServiceInfo->serviceLen)
                          4745	#line1661

                                   Fri Apr 10 08:32:04 2020           Page 86
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
                          4746	..lin.1e9356d..f5a7b99c.0_69::
                          4747	.LDWlin69:
000007ec 0d74             4748		se_cmpl	r4, r7
                          4749	.L3216:
000007ee e600             4750		se_beq	.L3045
                          4751	#1662:       {
                          4752	#1663:          serviceCheckResult |= kServiceLenFailure;
                          4753	#line1663
                          4754	..lin.1e9356d..f5a7b99c.0_70::
                          4755	.LDWlin70:
000007f0 73e8c001         4756		e_or2i	r31, 16385
                          4757	.L3045:
                          4758	#1664:       }
                          4759	#1665:    }
                          4760	#1667:    return serviceCheckResult;
000007f4 01f3             4761		se_mr	r3, r31
                          4762	#	    .ef
                          4763	.LDW95:
000007f6 c501             4764		se_lwz	r0, 20(sp)
000007f8 c3f1             4765		se_lwz	r31, 12(sp)
000007fa 20f1             4766		se_addi	sp, 16
000007fc 0090             4767		se_mtlr	r0
000007fe 0004             4768		se_blr
                          4769	__ghs_eofn_CheckServiceTable:
                          4770		.type	CheckServiceTable,@function
                          4771		.size	CheckServiceTable,$-CheckServiceTable
                          4772		.type	CheckServiceTable..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_diag_core.,@function
                          4773		.size	CheckServiceTable..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_diag_core.,$-CheckServiceTable..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_diag_core.
                          4774		.align	1
                          4775	
                          4776	#function:			CheckServiceTable
                          4777	#stack frame size:		16
                          4778	#link area offset:		0
                          4779	#local storage area offset:	12
                          4780	#gpr save area offset:		12
                          4781	#
                          4782	#serviceCheckResult	r31	local
                          4783	
                          4784	#pServiceInfo	r5	param
                          4785	
                          4786		.data
                          4787		.section ".vletext", "vax"
                          4788		.vle
                          4789		.vle
                          4790	
                          4791	#1668: }
                          4792	
                          4793		.align	1
                          4794		.align	1
                          4795	..gh.f.p.4.a.1.r.0.e.25:
                          4796		.type	..gh.f.p.4.a.1.r.0.e.25,@object
                          4797		.size	..gh.f.p.4.a.1.r.0.e.25,0
                          4798		.global	CheckSubparameter..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_diag_core.
                          4799	CheckSubparameter..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_diag_core.:
                          4800	CheckSubparameter:
                          4801	#	    .bf

                                   Fri Apr 10 08:32:04 2020           Page 87
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
                          4802	.LDW06:
                          4803	#1459: static vuint16 CheckSubparameter(V_MEMROM1 vuint8 V_MEMROM2 V_MEMROM3 * subFctParamIdTable, vsintx paramId)
                          4804	#1460: {
                          4805	#1461:    vuint16 result;
                          4806	#1463:    result = kSubServiceValid;
00000800 4800             4807		se_li	r0, 0
                          4808	#1465:    while (paramId > 0)
00000802 e800             4809		se_b	.L3219
                          4810	.L3221:
                          4811	#line1466
                          4812	..lin.1e9356d..68ec7d2e.0_71::
                          4813	.LDWlin71:
00000804 70e0e000         4814		e_lis	r7, %hiadj(DiagBuffer)
00000808 50e70000         4815		e_lwz	r7, %lo(DiagBuffer)(r7)
                          4816	#1466:    {
                          4817	#1467:       /* Decrement length indicator to become an index */
                          4818	#1468:       paramId--;
0000080c 2404             4819		se_subi	r4, 1
                          4820	#1470:       /* Typecasts are safe because while loop is only executed for positive values of paramId */
                          4821	#1471:       if (DiagBuffer[kDiagFmtSubparam + (vuintx)paramId] != subFctParamIdTable[(vuintx)paramId])
0000080e 0447             4822		se_add	r7, r4
00000810 8167             4823		se_lbz	r6, 1(r7)
00000812 7ce320ae         4824		lbzx	r7, r3, r4
00000816 0d76             4825		se_cmpl	r6, r7
00000818 e600             4826		se_beq	.L3219
                          4827	#1472:       {
                          4828	#1473:          if ((paramId == 0) && (GetServiceHasSubfunction()))
                          4829	#line1473
                          4830	..lin.1e9356d..68ec7d2e.0_72::
                          4831	.LDWlin72:
0000081a 2a04             4832		se_cmpi	r4, 0
0000081c e200             4833		se_bne	.L3224
0000081e 70e0e000         4834		e_lis	r7, %hiadj(fblDiagStates)
00000822 50e70000         4835		e_lwz	r7, %lo(fblDiagStates)(r7)
00000826 6757             4836		se_btsti	r7, 21
00000828 e600             4837		se_beq	.L3224
                          4838	#1474:          {
                          4839	#1475:             /* Assuming the sub-function is always the first byte */
                          4840	#1476:             result |= kSubServiceFunctionNotFound;
                          4841	#line1476
                          4842	..lin.1e9356d..68ec7d2e.0_73::
                          4843	.LDWlin73:
0000082a 7010c008         4844		e_or2i	r0, 32776
0000082e e800             4845		se_b	.L3219
                          4846	.L3224:
                          4847	#1477:          }
                          4848	#1478:          else
                          4849	#1479:          {
                          4850	#1480:             result |= kSubServiceParameterNotFound;
                          4851	#line1480
                          4852	..lin.1e9356d..68ec7d2e.0_74::
                          4853	.LDWlin74:
00000830 7010c004         4854		e_or2i	r0, 32772
                          4855	.L3219:
00000834 2a04             4856		se_cmpi	r4, 0
00000836 e500             4857		se_bgt	.L3221

                                   Fri Apr 10 08:32:04 2020           Page 88
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
                          4858	#1481:          }
                          4859	#1482:       }
                          4860	#1483:    }
                          4861	#1484:    return result;
                          4862	#line1484
                          4863	..lin.1e9356d..68ec7d2e.0_75::
                          4864	.LDWlin75:
00000838 0103             4865		se_mr	r3, r0
                          4866	#	    .ef
                          4867	.LDW16:
0000083a 0004             4868		se_blr
                          4869	__ghs_eofn_CheckSubparameter:
                          4870		.type	CheckSubparameter,@function
                          4871		.size	CheckSubparameter,$-CheckSubparameter
                          4872		.type	CheckSubparameter..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_diag_core.,@function
                          4873		.size	CheckSubparameter..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_diag_core.,$-CheckSubparameter..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_diag_core.
                          4874		.align	1
                          4875	
                          4876	#function:			CheckSubparameter
                          4877	#stack frame size:		0
                          4878	#
                          4879	#result	r0	local
                          4880	
                          4881	#subFctParamIdTable	r3	param
                          4882	#paramId	r4	param
                          4883	
                          4884		.data
                          4885		.section ".vletext", "vax"
                          4886		.vle
                          4887		.vle
                          4888	
                          4889	#1485: }
                          4890	
                          4891	#1487: /***********************************************************************************************************************
                          4892	#1488:  *  CheckSubServiceTable
                          4893	#1489:  **********************************************************************************************************************/
                          4894	#1490: /*! \brief       This routine checks if the subfunction is supported.
                          4895	#1491:  *  \details     Once all subfunction parameters have been checked, it's been checked if this subfunction
                          4896	#1492:  *               is allowed in active session and length is correct.
                          4897	#1493:  *               If a valid service-instance handler was found, it will be used instead of the main handler.
                          4898	#1494:  *  \pre         Service available and valid configuration in the serviceInfoTable.
                          4899	#1495:  *  \param[in]   subFctInfo Pointer to subfunction descriptor
                          4900	#1496:  *  \param[in]   infoTableLen
                          4901	#1497:  *  \param[in]   paramIdTableLen
                          4902	#1498:  *  \return      kSubServiceValid: subfunction known and valid
                          4903	#1499:  **********************************************************************************************************************/
                          4904		.align	1
                          4905		.align	1
                          4906	..gh.f.p.5.a.1.r.0.e.26:
                          4907		.type	..gh.f.p.5.a.1.r.0.e.26,@object
                          4908		.size	..gh.f.p.5.a.1.r.0.e.26,0
                          4909		.global	CheckSubServiceTable..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_diag_core.
                          4910	CheckSubServiceTable..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_diag_core.:
                          4911	CheckSubServiceTable:
0000083c 182106e0         4912		e_stwu	sp, -32(sp)
00000840 0080             4913		se_mflr	r0

                                   Fri Apr 10 08:32:04 2020           Page 89
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
00000842 1b410908         4914		e_stmw	r26, 8(sp)
00000846 d901             4915		se_stw	r0, 36(sp)
00000848 013c             4916		se_mr	r28, r3
0000084a 014d             4917		se_mr	r29, r4
                          4918	#	    .bf
                          4919	.LDW26:
                          4920	#1500: static vuint16 CheckSubServiceTable(V_MEMROM1 tSubFctInfoTable V_MEMROM2 V_MEMROM3 * subFctInfo, vsintx infoTableLen, vsintx paramIdTableLen)
                          4921	#1501: {
                          4922	#1502:    vuint16 result;
                          4923	#1503:    vuint16 resultSubParam;
                          4924	#1504:    vuint16 subParState;
                          4925	#1506:    /* Initialize return value */
                          4926	#1507:    result = (kSubServiceParameterNotFound | kSubServiceFunctionNotFound | kSubServiceTableMismatch);
0000084c 7360e000         4927		e_lis	r27, %hiadj(subParTabIdx)
                          4928	#1509:    subParTabIdx = 0u;
00000850 480f             4929		se_li	r31, 0
00000852 1f7b0000         4930		e_add16i	r27, r27, %lo(subParTabIdx)
00000856 90fb             4931		se_stb	r31, 0(r27)
00000858 7350001c         4932		e_li	r26, 32796
                          4933	#1510:    subParState = 0u;
                          4934	#1512:    /* Walk through the list of all listed sub-functions */
                          4935	#1513:    while (infoTableLen > 0)
0000085c e800             4936		se_b	.L3344
                          4937	.L3346:
                          4938	#1514:    {
                          4939	#1515:       /* Decrement table length to become an index into the table */
                          4940	#1516:       infoTableLen--;
                          4941	#line1516
                          4942	..lin.1e9356d..bef2aa46.0_76::
                          4943	.LDWlin76:
0000085e 240d             4944		se_subi	r29, 1
                          4945	#1518:       /* This is tricky: The subParamMask keeps the flag 'ParameterNotFound' or 'SubfunctionNotFound' to 0 if this once was found */
                          4946	#1519:       resultSubParam = CheckSubparameter(subFctInfo[infoTableLen].subFctParamIdTable, paramIdTableLen);
00000860 1bdda00c         4947		e_mulli	r30, r29, 12
00000864 7c7ee06e         4948		lwzux	r3, r30, r28
00000868 0154             4949		se_mr	r4, r5
0000086a e900             4950		se_bl	CheckSubparameter
                          4951	#1520:       result = ((resultSubParam & result) | kSubServiceTableMismatch);
                          4952	#line1520
                          4953	..lin.1e9356d..bef2aa46.0_77::
                          4954	.LDWlin77:
0000086c 463a             4955		se_and	r26, r3
0000086e 70100010         4956		e_li	r0, 32784
00000872 440a             4957		se_or	r26, r0
                          4958	#1522:       /* Perform sub-service checks */
                          4959	#1523:       if (resultSubParam == kSubServiceValid)
00000874 2a03             4960		se_cmpi	r3, 0
00000876 e200             4961		se_bne	.L3347
                          4962	#1524:       {
                          4963	#1525:          /* Parameter-ID matches. Sub-function condition checks can be done now. */
                          4964	#1526:          result = kSubServiceValid;
                          4965	#1527:          /* Overwrite Service session info with SubService session info
                          4966	#1528:           * Mainly for later security access check on sub-service level */
                          4967	#1529:          currentServiceSessionSupport = subFctInfo[infoTableLen].sessionSupport;
                          4968	#line1529
                          4969	..lin.1e9356d..bef2aa46.0_78::

                                   Fri Apr 10 08:32:04 2020           Page 90
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
                          4970	.LDWlin78:
00000878 847e             4971		se_lbz	r7, 4(r30)
0000087a 73e0e000         4972		e_lis	r31, %hiadj(fblDiagStates)
0000087e 1fff0000         4973		e_add16i	r31, r31, %lo(fblDiagStates)
                          4974	#1531:          /* Sub-function supported in active session ? */
                          4975	#1532:          if ((subFctInfo[infoTableLen].sessionSupport & GetCurrentSession()) == 0u)
00000882 c00f             4976		se_lwz	r0, 0(r31)
00000884 70c0e000         4977		e_lis	r6, %hiadj(currentServiceSessionSupport)
00000888 34e60000         4978		e_stb	r7, %lo(currentServiceSessionSupport)(r6)
0000088c 846e             4979		se_lbz	r6, 4(r30)
0000088e 2e70             4980		se_andi	r0, 7
00000890 4760             4981		se_and.	r0, r6
00000892 7000e000         4982		e_lis	r0, %hiadj(DiagDataLength)
00000896 70d00002         4983		e_li	r6, 32770
0000089a 1c000000         4984		e_add16i	r0, r0, %lo(DiagDataLength)
                          4985	#1533:          {
                          4986	#1534:             /* Set error bit that subFunction/-parameter not allowed in current session */
                          4987	#1535:             result |= kSubServiceSessionFailure;
                          4988	#1536:          }
                          4989	#1537:          if ((subFctInfo[infoTableLen].sessionSupport & kDiagLengthSpecialCheck) == 0u)
0000089e 7f46189e         4990		iseleq	r26, r6, r3
000008a2 a040             4991		se_lhz	r4, 0(r0)
000008a4 00ea             4992		se_extzh	r26
000008a6 67b7             4993		se_btsti	r7, 27
000008a8 e200             4994		se_bne	.L3351
                          4995	#1538:          {
                          4996	#1539:             /* Check for correct data length of this sub function */
                          4997	#1540:             if (subFctInfo[infoTableLen].serviceLen != DiagDataLength)
                          4998	#line1540
                          4999	..lin.1e9356d..bef2aa46.0_79::
                          5000	.LDWlin79:
000008aa a30e             5001		se_lhz	r0, 6(r30)
000008ac 0d40             5002		se_cmpl	r0, r4
000008ae e800             5003		se_b	.L3764
                          5004	.L3351:
000008b0 7060e000         5005		e_lis	r3, %hiadj(DiagBuffer)
000008b4 50630000         5006		e_lwz	r3, %lo(DiagBuffer)(r3)
                          5007	#1541:             {
                          5008	#1542:                /* Set the error bit that length doesn't match */
                          5009	#1543:                result |= kSubServiceLenFailure;
                          5010	#1544:             }
                          5011	#1545:          }
                          5012	#1546:          else
                          5013	#1547:          {
                          5014	#1548:             /* Dynamic length check needed for this sub-service */
                          5015	#1549:             if (FblDiagCheckSpecialLength(&DiagBuffer[kDiagFmtpbDiagData], DiagDataLength, serviceInfo) != kFblOk)
                          5016	#line1549
                          5017	..lin.1e9356d..bef2aa46.0_80::
                          5018	.LDWlin80:
000008b8 70a0e000         5019		e_lis	r5, %hiadj(serviceInfo)
000008bc 50a50000         5020		e_lwz	r5, %lo(serviceInfo)(r5)
000008c0 2003             5021		se_addi	r3, 1
000008c2 78000001         5022		e_bl	FblDiagCheckSpecialLength
000008c6 2a03             5023		se_cmpi	r3, 0
                          5024	.L3764:
000008c8 e600             5025		se_beq	.L3355

                                   Fri Apr 10 08:32:04 2020           Page 91
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
                          5026	#1550:             {
                          5027	#1551:                /* Set the error bit that length doesn't match */
                          5028	#1552:                result |= kSubServiceLenFailure;
                          5029	#line1552
                          5030	..lin.1e9356d..bef2aa46.0_81::
                          5031	.LDWlin81:
000008ca 7350c001         5032		e_or2i	r26, 32769
                          5033	.L3355:
                          5034	#1553:             }
                          5035	#1554:          }
                          5036	#1555:          /* Check if sub-service is allowed functionally */
                          5037	#1556:          if (   GetFunctionalRequest()
000008ce c00f             5038		se_lwz	r0, 0(r31)
000008d0 67c0             5039		se_btsti	r0, 28
000008d2 e600             5040		se_beq	.L3358
000008d4 847e             5041		se_lbz	r7, 4(r30)
000008d6 6787             5042		se_btsti	r7, 24
000008d8 e200             5043		se_bne	.L3358
                          5044	#1557:              && ((subFctInfo[infoTableLen].sessionSupport & kDiagFunctionalRequestAllowed) == 0u)
                          5045	#1558:              && (GetFunctionalRequest())
                          5046	#1559:             )
                          5047	#1560:          {
                          5048	#1561:             /* Set the error bit to indicate security access denied */
                          5049	#1562:             result |= kSubServiceNoFuncSupport;
                          5050	#line1562
                          5051	..lin.1e9356d..bef2aa46.0_82::
                          5052	.LDWlin82:
000008da 7350c040         5053		e_or2i	r26, 32832
                          5054	.L3358:
                          5055	#1563:          }
                          5056	#1565:          /* Check if sub-service is allowed functionally */
                          5057	#1566:          if (   ((subFctInfo[infoTableLen].sessionSupport & kDiagSecuredService) != 0u)
000008de 847e             5058		se_lbz	r7, 4(r30)
000008e0 67a7             5059		se_btsti	r7, 26
000008e2 e600             5060		se_beq	.L3362
000008e4 66c0             5061		se_btsti	r0, 12
000008e6 e200             5062		se_bne	.L3362
                          5063	#1567:              && (!GetSecurityUnlock())
                          5064	#1568:             )
                          5065	#1569:          {
                          5066	#1570:             /* Set the error bit to indicate security access denied */
                          5067	#1571:             result |= kSubServiceSecAccFailure;
                          5068	#line1571
                          5069	..lin.1e9356d..bef2aa46.0_83::
                          5070	.LDWlin83:
000008e8 7350c020         5071		e_or2i	r26, 32800
                          5072	.L3362:
                          5073	#1572:          }
                          5074	#1574:          /* All conditions are met. Overwrite mainHandler if a sub-function
                          5075	#1575:           * handler was given. Otherwise, use default main handler. */
                          5076	#1576:          if (   (result == kSubServiceValid)
000008ec 2a0a             5077		se_cmpi	r26, 0
000008ee e200             5078		se_bne	.L3345
000008f0 c27e             5079		se_lwz	r7, 8(r30)
000008f2 1807acff         5080		e_cmpi	r7, -1
000008f6 e600             5081		se_beq	.L3345

                                   Fri Apr 10 08:32:04 2020           Page 92
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
                          5082	#1577:              && (subFctInfo[infoTableLen].mainInstanceHandlerIdx!=kServiceMainHandlerNoHandler)
                          5083	#1578:             )
                          5084	#1579:          {
                          5085	#1580:             /* Get index from sub-function table
                          5086	#1581:              * and set-up mainHandler. */
                          5087	#1582:             serviceMainHandler = kServiceMainHandlerFctTable[subFctInfo[infoTableLen].mainInstanceHandlerIdx];
                          5088	#line1582
                          5089	..lin.1e9356d..bef2aa46.0_84::
                          5090	.LDWlin84:
000008f8 6c27             5091		se_slwi	r7, 2
000008fa 1c070000         5092		e_add16i	r0, r7, %lo(kServiceMainHandlerFctTable)
000008fe 70009000         5093		e_add2is	r0, %hiadj(kServiceMainHandlerFctTable)
00000902 c000             5094		se_lwz	r0, 0(r0)
00000904 70e0e000         5095		e_lis	r7, %hiadj(serviceMainHandler)
00000908 54070000         5096		e_stw	r0, %lo(serviceMainHandler)(r7)
0000090c e800             5097		se_b	.L3345
                          5098	.L3347:
                          5099	#1583:          }
                          5100	#1585:          /* !!Stop the loop by clearing the loop counter!! */
                          5101	#1586:          infoTableLen = 0;
                          5102	#1587:       }
                          5103	#1588:       else
                          5104	#1589:       {
                          5105	#1590:          if (resultSubParam == kSubServiceFunctionNotFound)
                          5106	#line1590
                          5107	..lin.1e9356d..bef2aa46.0_85::
                          5108	.LDWlin85:
0000090e 7203a808         5109		e_cmpl16i	r3, 32776
00000912 e200             5110		se_bne	.L3369
                          5111	#1591:          {
                          5112	#1592:             /* The routine parameter is supported basically*/
                          5113	#1593:             subParState |= kSubServiceParameterFound;
                          5114	#line1593
                          5115	..lin.1e9356d..bef2aa46.0_86::
                          5116	.LDWlin86:
00000914 90db             5117		se_stb	r29, 0(r27)
                          5118	#1595:             /* Store index of sub-parameter table with mismatching sub-function.
                          5119	#1596:              * This is needed for RoutineControl service to do security level-
                          5120	#1597:              * and session checks. */
                          5121	#1598:             subParTabIdx = (vuint8)infoTableLen;
00000916 633f             5122		se_bgeni	r31, 19
                          5123	.L3369:
                          5124	#1599:          }
                          5125	#1601:          result |= subParState;
00000918 44fa             5126		se_or	r26, r31
                          5127	.L3344:
0000091a 2a0d             5128		se_cmpi	r29, 0
0000091c e500             5129		se_bgt	.L3346
                          5130	.L3345:
                          5131	#1602:       }
                          5132	#1603:    }
                          5133	#1605:    /* Return calculated status */
                          5134	#1606:    return result;
                          5135	#line1606
                          5136	..lin.1e9356d..bef2aa46.0_87::
                          5137	.LDWlin87:

                                   Fri Apr 10 08:32:04 2020           Page 93
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
0000091e 01a3             5138		se_mr	r3, r26
                          5139	#	    .ef
                          5140	.LDW36:
00000920 c901             5141		se_lwz	r0, 36(sp)
00000922 1b410808         5142		e_lmw	r26, 8(sp)
00000926 21f1             5143		se_addi	sp, 32
00000928 0090             5144		se_mtlr	r0
0000092a 0004             5145		se_blr
                          5146	__ghs_eofn_CheckSubServiceTable:
                          5147		.type	CheckSubServiceTable,@function
                          5148		.size	CheckSubServiceTable,$-CheckSubServiceTable
                          5149		.type	CheckSubServiceTable..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_diag_core.,@function
                          5150		.size	CheckSubServiceTable..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_diag_core.,$-CheckSubServiceTable..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_diag_core.
                          5151		.align	1
                          5152	
                          5153	#function:			CheckSubServiceTable
                          5154	#stack frame size:		32
                          5155	#link area offset:		0
                          5156	#local storage area offset:	8
                          5157	#gpr save area offset:		8
                          5158	#
                          5159	#result	r26	local
                          5160	#resultSubParam	r3	local
                          5161	#subParState	r31	local
                          5162	
                          5163	#subFctInfo	r28	param
                          5164	#infoTableLen	r29	param
                          5165	#paramIdTableLen	r5	param
                          5166	
                          5167		.data
                          5168		.section ".vletext", "vax"
                          5169		.vle
                          5170		.vle
                          5171	
                          5172	#1607: }  /* PRQA S 6030 */ /* MD_MSR_STCYC */
                          5173	
                          5174	#1609: /***********************************************************************************************************************
                          5175	#1610:  *  CheckServiceTable
                          5176	#1611:  **********************************************************************************************************************/
                          5177	#1612: /*! \brief       This routine checks if the subfunction is supported.
                          5178	#1613:  *  \details     Once all subfunction parameters have been checked, it's been checked if this subfunction
                          5179	#1614:  *               is allowed in active session and length is correct.
                          5180	#1615:  *               If a valid service-instance handler was found, it will be used instead of the main handler.
                          5181	#1616:  *  \pre         Service available and valid configuration in the serviceInfoTable.
                          5182	#1617:  *  \param[in]   pServiceInfo Pointer to service info table
                          5183	#1618:  *  \return      kSubServiceValid: subfunction known and valid
                          5184	#1619:  **********************************************************************************************************************/
                          5185	#1620: static vuint16 CheckServiceTable(V_MEMROM1 tServiceInfoTable V_MEMROM2 V_MEMROM3 * pServiceInfo)
                          5186	#1621: {
                          5187	#1622:    vuint16 serviceCheckResult;
                          5188	#1624:    /* Initialize variables */
                          5189	#1625:    serviceCheckResult = kCheckValid;
                          5190	#1627:    /* Initialize sessionSupport variable. Maybe overwritten for subservice
                          5191	#1628:     * This may indicate further info like securedService for subfunctions */
                          5192	#1629:    currentServiceSessionSupport = pServiceInfo->sessionSupport;
                          5193	#1631:    /* Check if service is supported in active session */

                                   Fri Apr 10 08:32:04 2020           Page 94
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
                          5194	#1632:    if ((currentServiceSessionSupport & GetCurrentSession()) == 0u)
                          5195	#1633:    {
                          5196	#1634:       serviceCheckResult |= kServiceSessionFailure;
                          5197	#1635:    }
                          5198	#1637:    /* Minimum length check - done on service level */
                          5199	#1638:    if (DiagDataLength < pServiceInfo->serviceLen)
                          5200	#1639:    {
                          5201	#1640:       serviceCheckResult |= kServiceMinLenFailure;
                          5202	#1641:    }
                          5203	#1643:    /* Security Access on service level */
                          5204	#1644:    if (((currentServiceSessionSupport & kDiagSecuredService) != 0u) && (!GetSecurityUnlock()))
                          5205	#1645:    {
                          5206	#1646:       serviceCheckResult |= kServiceSecAccFailure;
                          5207	#1647:    }
                          5208	#1649:    /* Check length on service level */
                          5209	#1650:    if ((pServiceInfo->sessionSupport & kDiagLengthSpecialCheck) != 0u)
                          5210	#1651:    {
                          5211	#1652:       /* Service requires dynamic length check */
                          5212	#1653:       if (FblDiagCheckSpecialLength(&DiagBuffer[kDiagFmtpbDiagData], DiagDataLength, pServiceInfo) != kFblOk)
                          5213	#1654:       {
                          5214	#1655:          serviceCheckResult |= kServiceLenFailure;
                          5215	#1656:       }
                          5216	#1657:    }
                          5217	#1658:    else
                          5218	#1659:    {
                          5219	#1660:       /* Constant length check */
                          5220	#1661:       if (DiagDataLength != pServiceInfo->serviceLen)
                          5221	#1662:       {
                          5222	#1663:          serviceCheckResult |= kServiceLenFailure;
                          5223	#1664:       }
                          5224	#1665:    }
                          5225	#1667:    return serviceCheckResult;
                          5226	#1668: }
                          5227	#1670: /***********************************************************************************************************************
                          5228	#1671:  *  CheckServicePreconditions
                          5229	#1672:  **********************************************************************************************************************/
                          5230	#1673: /*! \brief       The function checks the pre-conditions configured in the service descriptor.
                          5231	#1674:  *  \details     If not fulfilled, a neg. response will be issued and the function returns kFblFailed.
                          5232	#1675:  *               If all conditions are met, the function returns kFblOk.
                          5233	#1676:  *  \pre         Service available and valid configuration in the serviceInfoTable.
                          5234	#1677:  *  \param[in]   pServiceInfo Pointer to service descriptor
                          5235	#1678:  *  \return      kFblOk: Preconditions fulfilled, kFblFailed: Preconditions not fulfilled, neg. response issued.
                          5236	#1679:  *               If all conditions are met, the function returns kFblOk.
                          5237	#1680:  **********************************************************************************************************************/
                          5238		.align	1
                          5239		.align	1
                          5240	..gh.f.p.3.a.1.r.0.e.27:
                          5241		.type	..gh.f.p.3.a.1.r.0.e.27,@object
                          5242		.size	..gh.f.p.3.a.1.r.0.e.27,0
                          5243		.global	CheckServicePreconditions..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_diag_core.
                          5244	CheckServicePreconditions..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_diag_core.:
                          5245	CheckServicePreconditions:
0000092c 182106e8         5246		e_stwu	sp, -24(sp)
00000930 1b810908         5247		e_stmw	r28, 8(sp)
00000934 0080             5248		se_mflr	r0
00000936 d701             5249		se_stw	r0, 28(sp)

                                   Fri Apr 10 08:32:04 2020           Page 95
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
                          5250	#	    .bf
                          5251	.LDW46:
                          5252	#1681: static tFblResult CheckServicePreconditions(V_MEMROM1 tServiceInfoTable V_MEMROM2 V_MEMROM3* pServiceInfo)
                          5253	#1682: {
                          5254	#1683:    tFblResult result;
                          5255	#1684:    vuint16 serviceCheckResult;
                          5256	#1686:    /* Initialize variables */
                          5257	#1687:    result = kFblOk;
00000938 013d             5258		se_mr	r29, r3
                          5259	#1689:    /* Do service level checks */
                          5260	#1690:    serviceCheckResult = CheckServiceTable(pServiceInfo);
0000093a 480f             5261		se_li	r31, 0
0000093c 78000001         5262		se_bl	CheckServiceTable
00000940 817d             5263		se_lbz	r7, 1(r29)
                          5264	#1692:    /* Process suppress positive response bit */
                          5265	#1693:    if ((pServiceInfo->sessionSupport & kDiagServiceIsSubfunction ) == kDiagServiceIsSubfunction)
                          5266	#line1693
                          5267	..lin.1e9356d..24cb85d5.0_88::
                          5268	.LDWlin88:
00000942 7380e000         5269		e_lis	r28, %hiadj(fblDiagStates)
00000946 1f9c0000         5270		e_add16i	r28, r28, %lo(fblDiagStates)
0000094a c00c             5271		se_lwz	r0, 0(r28)
0000094c 013e             5272		se_mr	r30, r3
0000094e 6797             5273		se_btsti	r7, 25
00000950 e600             5274		se_beq	.L3767
                          5275	#1694:    {
                          5276	#1695:       SetServiceHasSubfunction();
00000952 7060e000         5277		e_lis	r3, %hiadj(DiagBuffer)
00000956 50630000         5278		e_lwz	r3, %lo(DiagBuffer)(r3)
                          5279	#line1697
                          5280	..lin.1e9356d..24cb85d5.0_89::
                          5281	.LDWlin89:
0000095a 6550             5282		se_bseti	r0, 21
0000095c d00c             5283		se_stw	r0, 0(r28)
                          5284	#1696:       /* Sub-function may include suppress positive response bit */
                          5285	#1697:       ChkSuppressPosRspMsgIndication(&DiagBuffer[kDiagFmtSubparam]);
0000095e 2003             5286		se_addi	r3, 1
00000960 78000001         5287		se_bl	ChkSuppressPosRspMsgIndication
00000964 e800             5288		se_b	.L3769
                          5289	.L3767:
                          5290	#1698:    }
                          5291	#1699:    else
                          5292	#1700:    {
                          5293	#1701:       ClrServiceHasSubfunction();
00000966 6150             5294		se_bclri	r0, 21
00000968 d00c             5295		se_stw	r0, 0(r28)
                          5296	.L3769:
                          5297	#1702:    }
                          5298	#1704:    /* Process sub-function table */
                          5299	#1705:    if (pServiceInfo->subFctParamIdTableLen != 0)
                          5300	#line1705
                          5301	..lin.1e9356d..24cb85d5.0_90::
                          5302	.LDWlin90:
0000096a c25d             5303		se_lwz	r5, 8(r29)
0000096c 2a05             5304		se_cmpi	r5, 0
0000096e e600             5305		se_beq	.L3770

                                   Fri Apr 10 08:32:04 2020           Page 96
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
                          5306	#1706:    {
                          5307	#1707:       /* Remove error bits which are possibly set by service check */
                          5308	#1708:       serviceCheckResult &= FblInvert16Bit(kCheckLenFailure);
                          5309	#line1708
                          5310	..lin.1e9356d..24cb85d5.0_91::
                          5311	.LDWlin91:
00000970 c33d             5312		se_lwz	r3, 12(r29)
                          5313	#1709:       if (serviceCheckResult == kServiceFailure)
00000972 c14d             5314		se_lwz	r4, 4(r29)
00000974 61fe             5315		se_bclri	r30, 31
00000976 181ea940         5316		e_cmpi	r30, 16384
                          5317	#1710:       {
                          5318	#1711:          serviceCheckResult = 0u;
                          5319	#1712:       }
                          5320	#1713:       /* Check sub-service table */
                          5321	#1714:       serviceCheckResult |= CheckSubServiceTable(pServiceInfo->subFctInfo,
0000097a 7fc0f09e         5322		iseleq	r30, r0, r30
0000097e 00ee             5323		se_extzh	r30
00000980 78000001         5324		se_bl	CheckSubServiceTable
00000984 443e             5325		se_or	r30, r3
                          5326	.L3770:
                          5327	#1715:                                                  pServiceInfo->subFunctionInfoLen,
                          5328	#1716:                                                  pServiceInfo->subFctParamIdTableLen);
                          5329	#1717:    }
                          5330	#1719:    if (serviceCheckResult != kCheckValid)
                          5331	#line1719
                          5332	..lin.1e9356d..24cb85d5.0_92::
                          5333	.LDWlin92:
00000986 2a0e             5334		se_cmpi	r30, 0
00000988 e600             5335		se_beq	.L3774
                          5336	#1720:    {
                          5337	#1721:       /* Set return value */
                          5338	#1722:       result = kFblFailed;
                          5339	#line1722
                          5340	..lin.1e9356d..24cb85d5.0_93::
                          5341	.LDWlin93:
0000098a 800d             5342		se_lbz	r0, 0(r29)
                          5343	#1724:       /* Evaluate errors and set OEM-specific NRCs */
                          5344	#1725:       if (pServiceInfo->serviceId == kDiagSidRoutineControl)
0000098c 01e4             5345		se_mr	r4, r30
0000098e 01d3             5346		se_mr	r3, r29
00000990 481f             5347		se_li	r31, 1
00000992 1800a831         5348		e_cmpi	r0, 49
00000996 e200             5349		se_bne	.L3776
                          5350	#1726:       {
                          5351	#1727:          /* Special NRC processing for RoutineControl services */
                          5352	#1728:          FblDiagProcessRcNrc(pServiceInfo, serviceCheckResult);
                          5353	#line1728
                          5354	..lin.1e9356d..24cb85d5.0_94::
                          5355	.LDWlin94:
00000998 78000001         5356		e_bl	FblDiagProcessRcNrc
0000099c e800             5357		se_b	.L3774
                          5358	.L3776:
                          5359	#1729:       }
                          5360	#1730:       else if (GetServiceHasSubfunction())
                          5361	#line1730

                                   Fri Apr 10 08:32:04 2020           Page 97
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
                          5362	..lin.1e9356d..24cb85d5.0_95::
                          5363	.LDWlin95:
0000099e c00c             5364		se_lwz	r0, 0(r28)
000009a0 6750             5365		se_btsti	r0, 21
000009a2 e600             5366		se_beq	.L3779
                          5367	#1731:       {
                          5368	#1732:          /* NRC processing for service with sub-function */
                          5369	#1733:          FblDiagProcessSubfunctionNrc(pServiceInfo, serviceCheckResult);
                          5370	#line1733
                          5371	..lin.1e9356d..24cb85d5.0_96::
                          5372	.LDWlin96:
000009a4 78000001         5373		e_bl	FblDiagProcessSubfunctionNrc
000009a8 e800             5374		se_b	.L3774
                          5375	.L3779:
                          5376	#1734:       }
                          5377	#1735:       else if (pServiceInfo->subFctParamIdTableLen != 0)
                          5378	#line1735
                          5379	..lin.1e9356d..24cb85d5.0_97::
                          5380	.LDWlin97:
000009aa c203             5381		se_lwz	r0, 8(r3)
000009ac 2a00             5382		se_cmpi	r0, 0
000009ae e600             5383		se_beq	.L3782
                          5384	#1736:       {
                          5385	#1737:          /* NRC processing for service with sub-parameter */
                          5386	#1738:          FblDiagProcessSubparamNrc(pServiceInfo, serviceCheckResult);
                          5387	#line1738
                          5388	..lin.1e9356d..24cb85d5.0_98::
                          5389	.LDWlin98:
000009b0 78000001         5390		e_bl	FblDiagProcessSubparamNrc
000009b4 e800             5391		se_b	.L3774
                          5392	.L3782:
                          5393	#1739:       }
                          5394	#1740:       else
                          5395	#1741:       {
                          5396	#1742:          /* NRC processing for standard services */
                          5397	#1743:          FblDiagProcessServiceNrc(pServiceInfo, serviceCheckResult);
                          5398	#line1743
                          5399	..lin.1e9356d..24cb85d5.0_99::
                          5400	.LDWlin99:
000009b6 78000001         5401		e_bl	FblDiagProcessServiceNrc
                          5402	.L3774:
                          5403	#1744:       }
                          5404	#1745:    }
                          5405	#1747:    return result;
000009ba 01f3             5406		se_mr	r3, r31
                          5407	#	    .ef
                          5408	.LDW56:
000009bc c701             5409		se_lwz	r0, 28(sp)
000009be 1b810808         5410		e_lmw	r28, 8(sp)
000009c2 2171             5411		se_addi	sp, 24
000009c4 0090             5412		se_mtlr	r0
000009c6 0004             5413		se_blr
                          5414	__ghs_eofn_CheckServicePreconditions:
                          5415		.type	CheckServicePreconditions,@function
                          5416		.size	CheckServicePreconditions,$-CheckServicePreconditions
                          5417		.type	CheckServicePreconditions..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_diag_core.,@function

                                   Fri Apr 10 08:32:04 2020           Page 98
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
                          5418		.size	CheckServicePreconditions..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_diag_core.,$-CheckServicePreconditions..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_diag_core.
                          5419		.align	1
                          5420	
                          5421	#function:			CheckServicePreconditions
                          5422	#stack frame size:		24
                          5423	#link area offset:		0
                          5424	#local storage area offset:	8
                          5425	#gpr save area offset:		8
                          5426	#
                          5427	#result	r31	local
                          5428	#serviceCheckResult	r30	local
                          5429	
                          5430	#pServiceInfo	r29	param
                          5431	
                          5432		.data
                          5433		.section ".vletext", "vax"
                          5434		.vle
                          5435		.vle
                          5436	
                          5437	#1748: }
                          5438	
                          5439		.align	1
                          5440		.align	1
                          5441	..gh.f.p.0.a.1.r.0.e.28:
                          5442		.type	..gh.f.p.0.a.1.r.0.e.28,@object
                          5443		.size	..gh.f.p.0.a.1.r.0.e.28,0
                          5444		.global	FblDiagStateTask
                          5445	FblDiagStateTask:
000009c8 182106e0         5446		e_stwu	sp, -32(sp)
000009cc 1b61090c         5447		e_stmw	r27, 12(sp)
000009d0 0080             5448		se_mflr	r0
000009d2 d901             5449		se_stw	r0, 36(sp)
                          5450	#	    .bf
                          5451	.LDW66:
                          5452	#1235: void FblDiagStateTask( void )
                          5453	#1236: {
                          5454	#1237:    tFblResult result;
                          5455	#1239: #if defined( FBL_DIAG_ENABLE_TASK_LOCKS )
                          5456	#1240:    if (!GetDiagStateTaskRunning())
                          5457	#1241:    {
                          5458	#1242:       SetDiagStateTaskRunning();
                          5459	#1243: #endif /* FBL_DIAG_ENABLE_TASK_LOCKS */
                          5460	#1245:       /* Diagnostic service dispatcher. Will be executed when a service has to be managed */
                          5461	#1246:       if (diagResponseFlag != kDiagResponseIdle)
000009d4 73a0e000         5462		e_lis	r29, %hiadj(diagResponseFlag)
000009d8 1fbd0000         5463		e_add16i	r29, r29, %lo(diagResponseFlag)
000009dc 800d             5464		se_lbz	r0, 0(r29)
000009de 73e0e000         5465		e_lis	r31, %hiadj(fblDiagStates)
000009e2 1fff0000         5466		e_add16i	r31, r31, %lo(fblDiagStates)
000009e6 2a00             5467		se_cmpi	r0, 0
000009e8 e600             5468		se_beq	.L3999
                          5469	#1247:       {
                          5470	#1248:          /* Prepare return value */
                          5471	#1249:          result = kFblOk;
                          5472	#1251:          /* This is the initial call after reception of a service request */
                          5473	#1252:          if (diagResponseFlag == kDiagResponseRequested)

                                   Fri Apr 10 08:32:04 2020           Page 99
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
                          5474	#line1252
                          5475	..lin.1e9356d..f91d0142.0_100::
                          5476	.LDWlin100:
000009ea 73c0e000         5477		e_lis	r30, %hiadj(serviceMainHandler)
000009ee 7360e000         5478		e_lis	r27, %hiadj(DiagBuffer)
000009f2 1fde0000         5479		e_add16i	r30, r30, %lo(serviceMainHandler)
000009f6 7380e000         5480		e_lis	r28, %hiadj(DiagDataLength)
000009fa 1f7b0000         5481		e_add16i	r27, r27, %lo(DiagBuffer)
000009fe 1f9c0000         5482		e_add16i	r28, r28, %lo(DiagDataLength)
00000a02 2a10             5483		se_cmpi	r0, 1
00000a04 e200             5484		se_bne	.L4016
                          5485	#1253:          {
                          5486	#1254:             /* Initialize security seed */
                          5487	#1255:             (void)ApplFblSecuritySeedInit();
                          5488	#line1255
                          5489	..lin.1e9356d..f91d0142.0_101::
                          5490	.LDWlin101:
00000a06 78000001         5491		e_bl	ApplFblSecuritySeedInit
                          5492	#1257:             /* Advance service processing state to repeated service
                          5493	#1258:              * This will ensure that the service handler will be
                          5494	#1259:              * called until it has been concluded, e.g. by DiagProcessingDone() */
                          5495	#1260:             diagResponseFlag = kDiagRepeatResponse;
00000a0a 70e0e000         5496		e_lis	r7, %hiadj(diagServiceCurrent)
00000a0e 30670000         5497		e_lbz	r3, %lo(diagServiceCurrent)(r7)
                          5498	#1262:             /* Search for a valid configured service in the service table */
                          5499	#1263:             serviceInfo = FindServiceInfo(diagServiceCurrent);
00000a12 6380             5500		se_bgeni	r0, 24
00000a14 900d             5501		se_stb	r0, 0(r29)
00000a16 78000001         5502		se_bl	FindServiceInfo
00000a1a 70e0e000         5503		e_lis	r7, %hiadj(serviceInfo)
00000a1e 54670000         5504		e_stw	r3, %lo(serviceInfo)(r7)
                          5505	#1265:             /* Check if service was found in service table */
                          5506	#1266:             if (serviceInfo != (V_MEMROM1 tServiceInfoTable  V_MEMROM2 V_MEMROM3 *) V_NULL)
                          5507	#line1266
                          5508	..lin.1e9356d..f91d0142.0_102::
                          5509	.LDWlin102:
00000a22 2a03             5510		se_cmpi	r3, 0
00000a24 e600             5511		se_beq	.L4016
                          5512	#1267:             {
                          5513	#1268:                /* Service available. Check conditions */
                          5514	#1270:                /* Check if service is allowed functionally */
                          5515	#1271:                if (   GetFunctionalRequest()
                          5516	#line1271
                          5517	..lin.1e9356d..f91d0142.0_103::
                          5518	.LDWlin103:
00000a26 c00f             5519		se_lwz	r0, 0(r31)
00000a28 67c0             5520		se_btsti	r0, 28
00000a2a e600             5521		se_beq	.L4005
00000a2c 8103             5522		se_lbz	r0, 1(r3)
00000a2e 6780             5523		se_btsti	r0, 24
00000a30 e200             5524		se_bne	.L4005
                          5525	#1272:                    && ((serviceInfo->sessionSupport & kDiagFunctionalRequestAllowed) == 0u)
                          5526	#1273:                   )
                          5527	#1274:                {
                          5528	#1275:                   /* No functional request allowed for this service.
                          5529	#1276:                    * Discard service and finish processing. */

                                   Fri Apr 10 08:32:04 2020           Page 100
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
                          5530	#1277:                   DiagSetNoResponse();
                          5531	#line1277
                          5532	..lin.1e9356d..f91d0142.0_104::
                          5533	.LDWlin104:
00000a32 70000082         5534		e_li	r0, 130
00000a36 900d             5535		se_stb	r0, 0(r29)
                          5536	#1279:                   /* Prevent call of the main handler */
                          5537	#1280:                   result = kFblFailed;
00000a38 e800             5538		se_b	.L4013
                          5539	.L4005:
                          5540	#1281:                }
                          5541	#1282:                else
                          5542	#1283:                {
                          5543	#1284:                   /* Check valid parameter */
                          5544	#1285:                   assertFblGen((serviceInfo->mainHandlerIdx < kSizeOfMainHandlerTable), kFblOemAssertMainHandlerIdxInvalid);  /* PRQA S 2214 */ /* MD_FblDiag_2214 */
                          5545	#line1285
                          5546	..lin.1e9356d..f91d0142.0_105::
                          5547	.LDWlin105:
00000a3a 70e0e000         5548		e_lis	r7, %hiadj(kSizeOfMainHandlerTable)
00000a3e 50e70000         5549		e_lwz	r7, %lo(kSizeOfMainHandlerTable)(r7)
00000a42 c403             5550		se_lwz	r0, 16(r3)
00000a44 0d70             5551		se_cmpl	r0, r7
00000a46 e400             5552		se_blt	.L4009
00000a48 6383             5553		se_bgeni	r3, 24
00000a4a 78000001         5554		e_bl	ApplFblFatalError
                          5555	.L4009:
                          5556	#line1288
                          5557	..lin.1e9356d..f91d0142.0_106::
                          5558	.LDWlin106:
00000a4e 7060e000         5559		e_lis	r3, %hiadj(serviceInfo)
00000a52 50630000         5560		e_lwz	r3, %lo(serviceInfo)(r3)
                          5561	#1287:                   /* Handler can be processed now */
                          5562	#1288:                   serviceMainHandler = kServiceMainHandlerFctTable[serviceInfo->mainHandlerIdx];
00000a56 c473             5563		se_lwz	r7, 16(r3)
00000a58 6c27             5564		se_slwi	r7, 2
00000a5a 1c070000         5565		e_add16i	r0, r7, %lo(kServiceMainHandlerFctTable)
00000a5e 70009000         5566		e_add2is	r0, %hiadj(kServiceMainHandlerFctTable)
00000a62 c000             5567		se_lwz	r0, 0(r0)
00000a64 d00e             5568		se_stw	r0, 0(r30)
                          5569	#1289:                   result = CheckServicePreconditions(serviceInfo);
00000a66 78000001         5570		se_bl	CheckServicePreconditions
                          5571	#1291:                   /* Check succeeded. Continue and invoke user check. */
                          5572	#1292:                   if (result == kFblOk)
                          5573	#line1292
                          5574	..lin.1e9356d..f91d0142.0_107::
                          5575	.LDWlin107:
00000a6a 2a03             5576		se_cmpi	r3, 0
00000a6c e200             5577		se_bne	.L4013
                          5578	#1293:                   {
                          5579	#1294:                      /* Service is basically allowed - response pending messages can be sent now */
                          5580	#1295:                      SetRcrRpAllowed();
                          5581	#line1295
                          5582	..lin.1e9356d..f91d0142.0_108::
                          5583	.LDWlin108:
00000a6e c00f             5584		se_lwz	r0, 0(r31)
00000a70 c03b             5585		se_lwz	r3, 0(r27)

                                   Fri Apr 10 08:32:04 2020           Page 101
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
00000a72 a04c             5586		se_lhz	r4, 0(r28)
                          5587	#1297:                      {
                          5588	#1298:                         result = ApplFblCheckConditions(&DiagBuffer[kDiagFmtSubparam], (tCwDataLengthType)(DiagDataLength));
00000a74 6580             5589		se_bseti	r0, 24
00000a76 d00f             5590		se_stw	r0, 0(r31)
00000a78 2003             5591		se_addi	r3, 1
00000a7a 78000001         5592		e_bl	ApplFblCheckConditions
                          5593	#1299:                      }
                          5594	#1300:                   }
                          5595	#1301:                }
                          5596	#1302:             }
                          5597	#1303:          }
                          5598	#1305:          /* Don't call the main handler if an error has already been determined or reset is pending.
                          5599	#1306:           * Thus, it will be called in case of NoResponse, RepeatedResponse and PutPosResponse. */
                          5600	#1307:          if ((result == kFblOk) && ((diagResponseFlag & kDiagPutNegResponse) == 0) && (!GetWaitEcuReset()))
00000a7e 2a03             5601		se_cmpi	r3, 0
00000a80 e200             5602		se_bne	.L4013
                          5603	.L4016:
00000a82 800d             5604		se_lbz	r0, 0(r29)
00000a84 67c0             5605		se_btsti	r0, 28
00000a86 e200             5606		se_bne	.L4013
00000a88 c00f             5607		se_lwz	r0, 0(r31)
00000a8a 6720             5608		se_btsti	r0, 18
00000a8c e200             5609		se_bne	.L4013
                          5610	#1308:          {
                          5611	#1309:             assertFblInternal( (serviceMainHandler != kDiagSubFctNoMainHandler) , kFblSysAssertServiceMainHandlerInvalid); /* PRQA S 2214 */ /* MD_FblDiag_2214 */
                          5612	#line1309
                          5613	..lin.1e9356d..f91d0142.0_109::
                          5614	.LDWlin109:
00000a8e c00e             5615		se_lwz	r0, 0(r30)
00000a90 2a00             5616		se_cmpi	r0, 0
00000a92 e200             5617		se_bne	.L4017
00000a94 4a13             5618		se_li	r3, 33
00000a96 78000001         5619		e_bl	ApplFblFatalError
                          5620	.L4017:
                          5621	#1311:             {
                          5622	#1312:                /* Call main handler or repeated service call */
                          5623	#1313:                result = (*serviceMainHandler)(&DiagBuffer[kDiagFmtSubparam], DiagDataLength);   /* PRQA S 3199 */ /* MD_FblDiag_3199 */
                          5624	#line1313
                          5625	..lin.1e9356d..f91d0142.0_110::
                          5626	.LDWlin110:
00000a9a c03b             5627		se_lwz	r3, 0(r27)
00000a9c c00e             5628		se_lwz	r0, 0(r30)
00000a9e a04c             5629		se_lhz	r4, 0(r28)
00000aa0 2003             5630		se_addi	r3, 1
00000aa2 00b0             5631		se_mtctr	r0
00000aa4 0007             5632		se_bctrl
                          5633	.L4013:
                          5634	#1314:             }
                          5635	#1315:          }
                          5636	#1317:          /* Activate post handler after diagnostic service has been processed. */
                          5637	#1318:          SetDiagHandlerCalled();
00000aa6 c00f             5638		se_lwz	r0, 0(r31)
00000aa8 65a0             5639		se_bseti	r0, 26
00000aaa d00f             5640		se_stw	r0, 0(r31)
                          5641	#1319:          /* Finish service processing if service has been concluded before */

                                   Fri Apr 10 08:32:04 2020           Page 102
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
                          5642	#1320:          FblDiagResponseProcessor();
00000aac 78000001         5643		se_bl	FblDiagResponseProcessor
                          5644	.L3999:
                          5645	#1322:       }
                          5646	#1324: #if defined( FBL_MEM_ENABLE_PIPELINING )
                          5647	#1325:       /* Resume stored FblLib_Mem operation */
                          5648	#1326:       FblMemResumeIndication();
                          5649	#1327: #endif /* FBL_MEM_ENABLE_PIPELINING */
                          5650	#1329:       /* Check for reset request
                          5651	#1330:        * The following preconditions have to be fulfilled:
                          5652	#1331:          * Reset message confirmed
                          5653	#1332:          * Pre-reset function (e.g. flag written to NV-memory) has finished */
                          5654	#1333:       if ((GetWaitEcuReset()) && (GetResetMsgConfirmed()) && (GetEcuResetFctFinished()))
                          5655	#line1333
                          5656	..lin.1e9356d..f91d0142.0_111::
                          5657	.LDWlin111:
00000ab0 c00f             5658		se_lwz	r0, 0(r31)
00000ab2 6720             5659		se_btsti	r0, 18
00000ab4 e600             5660		se_beq	.L4019
00000ab6 6700             5661		se_btsti	r0, 16
00000ab8 e600             5662		se_beq	.L4019
00000aba 6710             5663		se_btsti	r0, 17
00000abc e600             5664		se_beq	.L4019
                          5665	#1334:       {
                          5666	#1335:          FblDiagDeinit();
                          5667	#line1335
                          5668	..lin.1e9356d..f91d0142.0_112::
                          5669	.LDWlin112:
00000abe 78000001         5670		se_bl	FblDiagDeinit
                          5671	.L4019:
                          5672	#1336:       }
                          5673	#1338: #if defined( FBL_ENABLE_SEC_ACCESS_DELAY )
                          5674	#1339:       /* Check if Security access delay counter close to expire */
                          5675	#1340:       if (GetSecurityAccessDelay() == 1u)
                          5676	#line1340
                          5677	..lin.1e9356d..f91d0142.0_113::
                          5678	.LDWlin113:
00000ac2 7000e000         5679		e_lis	r0, %hiadj(secSecurityAccessDelay)
00000ac6 1c000000         5680		e_add16i	r0, r0, %lo(secSecurityAccessDelay)
00000aca c070             5681		se_lwz	r7, 0(r0)
00000acc 2a17             5682		se_cmpi	r7, 1
00000ace e200             5683		se_bne	.L3997
                          5684	#1341:       {
                          5685	#1342:          /* If so, conclude the decrement and check to clear the flag in EEPROM */
                          5686	#1343:          ClrSecurityAccessDelay();
                          5687	#line1343
                          5688	..lin.1e9356d..f91d0142.0_114::
                          5689	.LDWlin114:
00000ad0 4807             5690		se_li	r7, 0
00000ad2 d070             5691		se_stw	r7, 0(r0)
                          5692	#1345: # if defined( FBL_DIAG_ENABLE_CORE_WRITE_SECACCESSDELAY_FLAG )
                          5693	#1346:          /* Clear security access delay flag */
                          5694	#1347:          (void)ApplFblClrSecAccessDelayFlag();
00000ad4 78000001         5695		e_bl	FblDiagSecAccessDelayExpired
                          5696	.L3997:
                          5697	#1348: # endif /* FBL_DIAG_ENABLE_CORE_WRITE_SECACCESSDELAY_FLAG */

                                   Fri Apr 10 08:32:04 2020           Page 103
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
                          5698	#1349:       }
                          5699	#1350: #endif
                          5700	#1352: #if defined( FBL_DIAG_ENABLE_OEM_STATETASK )
                          5701	#1353:       FblDiagOemStateTask();
                          5702	#1354: #endif /* FBL_DIAG_ENABLE_OEM_STATETASK */
                          5703	#1356: #if defined( FBL_DIAG_ENABLE_TASK_LOCKS )
                          5704	#1357:       /* Allow further task executions */
                          5705	#1358:       ClrDiagStateTaskRunning();
                          5706	#1359:    }
                          5707	#1360: #endif /* FBL_DIAG_ENABLE_TASK_LOCKS */
                          5708	#1361: }  /* PRQA S 6010, 6030, 6050, 6080 */ /* MD_MSR_STPTH, MD_MSR_STCYC, MD_MSR_STCAL, MD_MSR_STMIF */
                          5709	#	    .ef
                          5710	.LDW76:
00000ad8 c901             5711		se_lwz	r0, 36(sp)
00000ada 1b61080c         5712		e_lmw	r27, 12(sp)
00000ade 21f1             5713		se_addi	sp, 32
00000ae0 0090             5714		se_mtlr	r0
00000ae2 0004             5715		se_blr
                          5716		.global	__ghs_eofn_FblDiagStateTask
                          5717	__ghs_eofn_FblDiagStateTask:
                          5718		.type	FblDiagStateTask,@function
                          5719		.size	FblDiagStateTask,$-FblDiagStateTask
                          5720		.align	1
                          5721	
                          5722	#function:			FblDiagStateTask
                          5723	#stack frame size:		32
                          5724	#link area offset:		0
                          5725	#local storage area offset:	12
                          5726	#gpr save area offset:		12
                          5727	#
                          5728	#result	r3	local
                          5729	
                          5730		.data
                          5731		.section ".vletext", "vax"
                          5732		.vle
                          5733		.vle
                          5734	
                          5735	
                          5736	#1363: /***********************************************************************************************************************
                          5737	#1364:  *  Diagnostic tasks
                          5738	#1365:  **********************************************************************************************************************/
                          5739	#1367: /***********************************************************************************************************************
                          5740	#1368:  *  FblDiagTimerTask
                          5741	#1369:  **********************************************************************************************************************/
                          5742	#1370: /*! \brief       This function handles the surveillance of the tester present timer.
                          5743	#1371:  *  \details     When a timeout occurs the startup code of the FBL is executed. Has to be executed from RAM
                          5744	#1372:  *               if diagnostic functionality should be maintained while flashing, e.g. if pipelined programming
                          5745	#1373:  *               is enabled.
                          5746	#1374:  **********************************************************************************************************************/
                          5747	#1375: void FblDiagTimerTask(void)
                          5748	#1376: {
                          5749	#1377: #if defined( FBL_DIAG_ENABLE_TASK_LOCKS )
                          5750	#1378:    if (!GetDiagTimerTaskRunning())
                          5751	#1379:    {
                          5752	#1380:       SetDiagTimerTaskRunning();
                          5753	#1381: #endif /* FBL_DIAG_ENABLE_TASK_LOCKS */

                                   Fri Apr 10 08:32:04 2020           Page 104
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
                          5754	#1382:       /* Tester present timing */
                          5755	#1383:       if (TimeoutTesterValue() != 0u)
                          5756	#1384:       {
                          5757	#1385:          DecTimeoutTesterValue();
                          5758	#1386:          if (TimeoutTesterValue() == 0u)
                          5759	#1387:          {
                          5760	#1388: #if defined( FBL_DIAG_ENABLE_OEM_SESSION_TIMEOUT )
                          5761	#1389:             FblDiagSessionTimeout();
                          5762	#1390: #else
                          5763	#1391:             /* Tester present timer expired, exit bootloader via reset */
                          5764	#1392:             FblDiagEcuReset();
                          5765	#1393: #endif
                          5766	#1394:          }
                          5767	#1395:       }
                          5768	#1397:       /* ECU reset is pending */
                          5769	#1398:       if (TimeoutEcuResetValue() != 0u)
                          5770	#1399:       {
                          5771	#1400:          DecTimeoutEcuResetValue();
                          5772	#1401:          if (TimeoutEcuResetValue() == 0u)
                          5773	#1402:          {
                          5774	#1403:             /* ECU reset timer expired
                          5775	#1404:              * Exit bootloader via Reset, but force no response!! */
                          5776	#1405:             FblDiagEcuReset();
                          5777	#1406:          }
                          5778	#1407:       }
                          5779	#1410: #if defined( FBL_DEF_ENABLE_NON_KB_MAIN  )
                          5780	#1411: # if defined( FBL_ENABLE_SLEEPMODE )
                          5781	#1412:             /* Sleep mode timer */
                          5782	#1413:             if (FblGetSleepCounter() != 0u)
                          5783	#1414:             {
                          5784	#1415:                FblDecSleepCounter();
                          5785	#1416:                if (FblGetSleepCounter() == 0u)
                          5786	#1417:                {
                          5787	#1418:                   ApplFblBusSleep();
                          5788	#1419:                   FblSleepCounterReload();
                          5789	#1420:                }
                          5790	#1421:             }
                          5791	#1422: # endif /* FBL_ENABLE_SLEEPMODE */
                          5792	#1423: #endif /* FBL_DEF_ENABLE_NON_KB_MAIN */
                          5793	#1425: #if defined( FBL_ENABLE_SEC_ACCESS_DELAY )
                          5794	#1426:       /* Security access delay timing */
                          5795	#1427:       if (GetSecurityAccessDelay() > 1u)
                          5796	#1428:       {
                          5797	#1429:          DecSecurityAccessDelay();
                          5798	#1430:       }
                          5799	#1431: #endif
                          5800	#1433: #if defined( FBL_DIAG_ENABLE_OEM_TIMERTASK )
                          5801	#1434:       FblDiagOemTimerTask();
                          5802	#1435: #endif /* FBL_DIAG_ENABLE_OEM_TIMERTASK */
                          5803	#1437: #if defined( FBL_DIAG_ENABLE_TASK_LOCKS )
                          5804	#1438:       /* Allow further task executions */
                          5805	#1439:       ClrDiagTimerTaskRunning();
                          5806	#1440:    }
                          5807	#1441: #endif /* FBL_DIAG_ENABLE_TASK_LOCKS */
                          5808	#1442: }
                          5809	#1444: /***********************************************************************************************************************

                                   Fri Apr 10 08:32:04 2020           Page 105
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
                          5810	#1445:  *  Diagnostic kernel handling functions
                          5811	#1446:  **********************************************************************************************************************/
                          5812	#1448: /***********************************************************************************************************************
                          5813	#1449:  *  CheckSubparameter
                          5814	#1450:  **********************************************************************************************************************/
                          5815	#1451: /*! \brief       This function checks if all sub-parameters matches the values in DiagBuffer
                          5816	#1452:  *  \pre         All service table entries are initialized properly.
                          5817	#1453:  *  \param[in]   subFctParamIdTable Pointer to sub-parameter values
                          5818	#1454:  *  \param[in]   paramId Parameter identifier to be checked.
                          5819	#1455:  *  \return      kSubServiceValid: sub-function known and valid or Bit coded failures.
                          5820	#1456:  *               kSubServiceParameterNotFound: No parameter found for this sub-service.
                          5821	#1457:  *               kSubServiceFunctionNotFound:   No function found for this sub-service (first byte).
                          5822	#1458:  **********************************************************************************************************************/
                          5823	#1459: static vuint16 CheckSubparameter(V_MEMROM1 vuint8 V_MEMROM2 V_MEMROM3 * subFctParamIdTable, vsintx paramId)
                          5824	#1460: {
                          5825	#1461:    vuint16 result;
                          5826	#1463:    result = kSubServiceValid;
                          5827	#1465:    while (paramId > 0)
                          5828	#1466:    {
                          5829	#1467:       /* Decrement length indicator to become an index */
                          5830	#1468:       paramId--;
                          5831	#1470:       /* Typecasts are safe because while loop is only executed for positive values of paramId */
                          5832	#1471:       if (DiagBuffer[kDiagFmtSubparam + (vuintx)paramId] != subFctParamIdTable[(vuintx)paramId])
                          5833	#1472:       {
                          5834	#1473:          if ((paramId == 0) && (GetServiceHasSubfunction()))
                          5835	#1474:          {
                          5836	#1475:             /* Assuming the sub-function is always the first byte */
                          5837	#1476:             result |= kSubServiceFunctionNotFound;
                          5838	#1477:          }
                          5839	#1478:          else
                          5840	#1479:          {
                          5841	#1480:             result |= kSubServiceParameterNotFound;
                          5842	#1481:          }
                          5843	#1482:       }
                          5844	#1483:    }
                          5845	#1484:    return result;
                          5846	#1485: }
                          5847	#1487: /***********************************************************************************************************************
                          5848	#1488:  *  CheckSubServiceTable
                          5849	#1489:  **********************************************************************************************************************/
                          5850	#1490: /*! \brief       This routine checks if the subfunction is supported.
                          5851	#1491:  *  \details     Once all subfunction parameters have been checked, it's been checked if this subfunction
                          5852	#1492:  *               is allowed in active session and length is correct.
                          5853	#1493:  *               If a valid service-instance handler was found, it will be used instead of the main handler.
                          5854	#1494:  *  \pre         Service available and valid configuration in the serviceInfoTable.
                          5855	#1495:  *  \param[in]   subFctInfo Pointer to subfunction descriptor
                          5856	#1496:  *  \param[in]   infoTableLen
                          5857	#1497:  *  \param[in]   paramIdTableLen
                          5858	#1498:  *  \return      kSubServiceValid: subfunction known and valid
                          5859	#1499:  **********************************************************************************************************************/
                          5860	#1500: static vuint16 CheckSubServiceTable(V_MEMROM1 tSubFctInfoTable V_MEMROM2 V_MEMROM3 * subFctInfo, vsintx infoTableLen, vsintx paramIdTableLen)
                          5861	#1501: {
                          5862	#1502:    vuint16 result;
                          5863	#1503:    vuint16 resultSubParam;
                          5864	#1504:    vuint16 subParState;
                          5865	#1506:    /* Initialize return value */

                                   Fri Apr 10 08:32:04 2020           Page 106
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
                          5866	#1507:    result = (kSubServiceParameterNotFound | kSubServiceFunctionNotFound | kSubServiceTableMismatch);
                          5867	#1509:    subParTabIdx = 0u;
                          5868	#1510:    subParState = 0u;
                          5869	#1512:    /* Walk through the list of all listed sub-functions */
                          5870	#1513:    while (infoTableLen > 0)
                          5871	#1514:    {
                          5872	#1515:       /* Decrement table length to become an index into the table */
                          5873	#1516:       infoTableLen--;
                          5874	#1518:       /* This is tricky: The subParamMask keeps the flag 'ParameterNotFound' or 'SubfunctionNotFound' to 0 if this once was found */
                          5875	#1519:       resultSubParam = CheckSubparameter(subFctInfo[infoTableLen].subFctParamIdTable, paramIdTableLen);
                          5876	#1520:       result = ((resultSubParam & result) | kSubServiceTableMismatch);
                          5877	#1522:       /* Perform sub-service checks */
                          5878	#1523:       if (resultSubParam == kSubServiceValid)
                          5879	#1524:       {
                          5880	#1525:          /* Parameter-ID matches. Sub-function condition checks can be done now. */
                          5881	#1526:          result = kSubServiceValid;
                          5882	#1527:          /* Overwrite Service session info with SubService session info
                          5883	#1528:           * Mainly for later security access check on sub-service level */
                          5884	#1529:          currentServiceSessionSupport = subFctInfo[infoTableLen].sessionSupport;
                          5885	#1531:          /* Sub-function supported in active session ? */
                          5886	#1532:          if ((subFctInfo[infoTableLen].sessionSupport & GetCurrentSession()) == 0u)
                          5887	#1533:          {
                          5888	#1534:             /* Set error bit that subFunction/-parameter not allowed in current session */
                          5889	#1535:             result |= kSubServiceSessionFailure;
                          5890	#1536:          }
                          5891	#1537:          if ((subFctInfo[infoTableLen].sessionSupport & kDiagLengthSpecialCheck) == 0u)
                          5892	#1538:          {
                          5893	#1539:             /* Check for correct data length of this sub function */
                          5894	#1540:             if (subFctInfo[infoTableLen].serviceLen != DiagDataLength)
                          5895	#1541:             {
                          5896	#1542:                /* Set the error bit that length doesn't match */
                          5897	#1543:                result |= kSubServiceLenFailure;
                          5898	#1544:             }
                          5899	#1545:          }
                          5900	#1546:          else
                          5901	#1547:          {
                          5902	#1548:             /* Dynamic length check needed for this sub-service */
                          5903	#1549:             if (FblDiagCheckSpecialLength(&DiagBuffer[kDiagFmtpbDiagData], DiagDataLength, serviceInfo) != kFblOk)
                          5904	#1550:             {
                          5905	#1551:                /* Set the error bit that length doesn't match */
                          5906	#1552:                result |= kSubServiceLenFailure;
                          5907	#1553:             }
                          5908	#1554:          }
                          5909	#1555:          /* Check if sub-service is allowed functionally */
                          5910	#1556:          if (   GetFunctionalRequest()
                          5911	#1557:              && ((subFctInfo[infoTableLen].sessionSupport & kDiagFunctionalRequestAllowed) == 0u)
                          5912	#1558:              && (GetFunctionalRequest())
                          5913	#1559:             )
                          5914	#1560:          {
                          5915	#1561:             /* Set the error bit to indicate security access denied */
                          5916	#1562:             result |= kSubServiceNoFuncSupport;
                          5917	#1563:          }
                          5918	#1565:          /* Check if sub-service is allowed functionally */
                          5919	#1566:          if (   ((subFctInfo[infoTableLen].sessionSupport & kDiagSecuredService) != 0u)
                          5920	#1567:              && (!GetSecurityUnlock())
                          5921	#1568:             )

                                   Fri Apr 10 08:32:04 2020           Page 107
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
                          5922	#1569:          {
                          5923	#1570:             /* Set the error bit to indicate security access denied */
                          5924	#1571:             result |= kSubServiceSecAccFailure;
                          5925	#1572:          }
                          5926	#1574:          /* All conditions are met. Overwrite mainHandler if a sub-function
                          5927	#1575:           * handler was given. Otherwise, use default main handler. */
                          5928	#1576:          if (   (result == kSubServiceValid)
                          5929	#1577:              && (subFctInfo[infoTableLen].mainInstanceHandlerIdx!=kServiceMainHandlerNoHandler)
                          5930	#1578:             )
                          5931	#1579:          {
                          5932	#1580:             /* Get index from sub-function table
                          5933	#1581:              * and set-up mainHandler. */
                          5934	#1582:             serviceMainHandler = kServiceMainHandlerFctTable[subFctInfo[infoTableLen].mainInstanceHandlerIdx];
                          5935	#1583:          }
                          5936	#1585:          /* !!Stop the loop by clearing the loop counter!! */
                          5937	#1586:          infoTableLen = 0;
                          5938	#1587:       }
                          5939	#1588:       else
                          5940	#1589:       {
                          5941	#1590:          if (resultSubParam == kSubServiceFunctionNotFound)
                          5942	#1591:          {
                          5943	#1592:             /* The routine parameter is supported basically*/
                          5944	#1593:             subParState |= kSubServiceParameterFound;
                          5945	#1595:             /* Store index of sub-parameter table with mismatching sub-function.
                          5946	#1596:              * This is needed for RoutineControl service to do security level-
                          5947	#1597:              * and session checks. */
                          5948	#1598:             subParTabIdx = (vuint8)infoTableLen;
                          5949	#1599:          }
                          5950	#1601:          result |= subParState;
                          5951	#1602:       }
                          5952	#1603:    }
                          5953	#1605:    /* Return calculated status */
                          5954	#1606:    return result;
                          5955	#1607: }  /* PRQA S 6030 */ /* MD_MSR_STCYC */
                          5956	#1609: /***********************************************************************************************************************
                          5957	#1610:  *  CheckServiceTable
                          5958	#1611:  **********************************************************************************************************************/
                          5959	#1612: /*! \brief       This routine checks if the subfunction is supported.
                          5960	#1613:  *  \details     Once all subfunction parameters have been checked, it's been checked if this subfunction
                          5961	#1614:  *               is allowed in active session and length is correct.
                          5962	#1615:  *               If a valid service-instance handler was found, it will be used instead of the main handler.
                          5963	#1616:  *  \pre         Service available and valid configuration in the serviceInfoTable.
                          5964	#1617:  *  \param[in]   pServiceInfo Pointer to service info table
                          5965	#1618:  *  \return      kSubServiceValid: subfunction known and valid
                          5966	#1619:  **********************************************************************************************************************/
                          5967	#1620: static vuint16 CheckServiceTable(V_MEMROM1 tServiceInfoTable V_MEMROM2 V_MEMROM3 * pServiceInfo)
                          5968	#1621: {
                          5969	#1622:    vuint16 serviceCheckResult;
                          5970	#1624:    /* Initialize variables */
                          5971	#1625:    serviceCheckResult = kCheckValid;
                          5972	#1627:    /* Initialize sessionSupport variable. Maybe overwritten for subservice
                          5973	#1628:     * This may indicate further info like securedService for subfunctions */
                          5974	#1629:    currentServiceSessionSupport = pServiceInfo->sessionSupport;
                          5975	#1631:    /* Check if service is supported in active session */
                          5976	#1632:    if ((currentServiceSessionSupport & GetCurrentSession()) == 0u)
                          5977	#1633:    {

                                   Fri Apr 10 08:32:04 2020           Page 108
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
                          5978	#1634:       serviceCheckResult |= kServiceSessionFailure;
                          5979	#1635:    }
                          5980	#1637:    /* Minimum length check - done on service level */
                          5981	#1638:    if (DiagDataLength < pServiceInfo->serviceLen)
                          5982	#1639:    {
                          5983	#1640:       serviceCheckResult |= kServiceMinLenFailure;
                          5984	#1641:    }
                          5985	#1643:    /* Security Access on service level */
                          5986	#1644:    if (((currentServiceSessionSupport & kDiagSecuredService) != 0u) && (!GetSecurityUnlock()))
                          5987	#1645:    {
                          5988	#1646:       serviceCheckResult |= kServiceSecAccFailure;
                          5989	#1647:    }
                          5990	#1649:    /* Check length on service level */
                          5991	#1650:    if ((pServiceInfo->sessionSupport & kDiagLengthSpecialCheck) != 0u)
                          5992	#1651:    {
                          5993	#1652:       /* Service requires dynamic length check */
                          5994	#1653:       if (FblDiagCheckSpecialLength(&DiagBuffer[kDiagFmtpbDiagData], DiagDataLength, pServiceInfo) != kFblOk)
                          5995	#1654:       {
                          5996	#1655:          serviceCheckResult |= kServiceLenFailure;
                          5997	#1656:       }
                          5998	#1657:    }
                          5999	#1658:    else
                          6000	#1659:    {
                          6001	#1660:       /* Constant length check */
                          6002	#1661:       if (DiagDataLength != pServiceInfo->serviceLen)
                          6003	#1662:       {
                          6004	#1663:          serviceCheckResult |= kServiceLenFailure;
                          6005	#1664:       }
                          6006	#1665:    }
                          6007	#1667:    return serviceCheckResult;
                          6008	#1668: }
                          6009	#1670: /***********************************************************************************************************************
                          6010	#1671:  *  CheckServicePreconditions
                          6011	#1672:  **********************************************************************************************************************/
                          6012	#1673: /*! \brief       The function checks the pre-conditions configured in the service descriptor.
                          6013	#1674:  *  \details     If not fulfilled, a neg. response will be issued and the function returns kFblFailed.
                          6014	#1675:  *               If all conditions are met, the function returns kFblOk.
                          6015	#1676:  *  \pre         Service available and valid configuration in the serviceInfoTable.
                          6016	#1677:  *  \param[in]   pServiceInfo Pointer to service descriptor
                          6017	#1678:  *  \return      kFblOk: Preconditions fulfilled, kFblFailed: Preconditions not fulfilled, neg. response issued.
                          6018	#1679:  *               If all conditions are met, the function returns kFblOk.
                          6019	#1680:  **********************************************************************************************************************/
                          6020	#1681: static tFblResult CheckServicePreconditions(V_MEMROM1 tServiceInfoTable V_MEMROM2 V_MEMROM3* pServiceInfo)
                          6021	#1682: {
                          6022	#1683:    tFblResult result;
                          6023	#1684:    vuint16 serviceCheckResult;
                          6024	#1686:    /* Initialize variables */
                          6025	#1687:    result = kFblOk;
                          6026	#1689:    /* Do service level checks */
                          6027	#1690:    serviceCheckResult = CheckServiceTable(pServiceInfo);
                          6028	#1692:    /* Process suppress positive response bit */
                          6029	#1693:    if ((pServiceInfo->sessionSupport & kDiagServiceIsSubfunction ) == kDiagServiceIsSubfunction)
                          6030	#1694:    {
                          6031	#1695:       SetServiceHasSubfunction();
                          6032	#1696:       /* Sub-function may include suppress positive response bit */
                          6033	#1697:       ChkSuppressPosRspMsgIndication(&DiagBuffer[kDiagFmtSubparam]);

                                   Fri Apr 10 08:32:04 2020           Page 109
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
                          6034	#1698:    }
                          6035	#1699:    else
                          6036	#1700:    {
                          6037	#1701:       ClrServiceHasSubfunction();
                          6038	#1702:    }
                          6039	#1704:    /* Process sub-function table */
                          6040	#1705:    if (pServiceInfo->subFctParamIdTableLen != 0)
                          6041	#1706:    {
                          6042	#1707:       /* Remove error bits which are possibly set by service check */
                          6043	#1708:       serviceCheckResult &= FblInvert16Bit(kCheckLenFailure);
                          6044	#1709:       if (serviceCheckResult == kServiceFailure)
                          6045	#1710:       {
                          6046	#1711:          serviceCheckResult = 0u;
                          6047	#1712:       }
                          6048	#1713:       /* Check sub-service table */
                          6049	#1714:       serviceCheckResult |= CheckSubServiceTable(pServiceInfo->subFctInfo,
                          6050	#1715:                                                  pServiceInfo->subFunctionInfoLen,
                          6051	#1716:                                                  pServiceInfo->subFctParamIdTableLen);
                          6052	#1717:    }
                          6053	#1719:    if (serviceCheckResult != kCheckValid)
                          6054	#1720:    {
                          6055	#1721:       /* Set return value */
                          6056	#1722:       result = kFblFailed;
                          6057	#1724:       /* Evaluate errors and set OEM-specific NRCs */
                          6058	#1725:       if (pServiceInfo->serviceId == kDiagSidRoutineControl)
                          6059	#1726:       {
                          6060	#1727:          /* Special NRC processing for RoutineControl services */
                          6061	#1728:          FblDiagProcessRcNrc(pServiceInfo, serviceCheckResult);
                          6062	#1729:       }
                          6063	#1730:       else if (GetServiceHasSubfunction())
                          6064	#1731:       {
                          6065	#1732:          /* NRC processing for service with sub-function */
                          6066	#1733:          FblDiagProcessSubfunctionNrc(pServiceInfo, serviceCheckResult);
                          6067	#1734:       }
                          6068	#1735:       else if (pServiceInfo->subFctParamIdTableLen != 0)
                          6069	#1736:       {
                          6070	#1737:          /* NRC processing for service with sub-parameter */
                          6071	#1738:          FblDiagProcessSubparamNrc(pServiceInfo, serviceCheckResult);
                          6072	#1739:       }
                          6073	#1740:       else
                          6074	#1741:       {
                          6075	#1742:          /* NRC processing for standard services */
                          6076	#1743:          FblDiagProcessServiceNrc(pServiceInfo, serviceCheckResult);
                          6077	#1744:       }
                          6078	#1745:    }
                          6079	#1747:    return result;
                          6080	#1748: }
                          6081	#1750: /***********************************************************************************************************************
                          6082	#1751:  *  FindServiceInfo
                          6083	#1752:  **********************************************************************************************************************/
                          6084	#1753: /*! \brief       This function searches for the info table that corresponds to the service ID given in the parameter.
                          6085	#1754:  *  \details     Returns pointer to the structure of the service descriptor
                          6086	#1755:  *               for the given service ID. Otherwise returns 0.
                          6087	#1756:  *  \param[in]   serviceId UDS service ID of requested service
                          6088	#1757:  *  \return      Pointer to the service info table
                          6089	#1758:  **********************************************************************************************************************/

                                   Fri Apr 10 08:32:04 2020           Page 110
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
                          6090	#1759: static V_MEMROM1 tServiceInfoTable  V_MEMROM2 V_MEMROM3 * FindServiceInfo(vuint8 serviceId)
                          6091	#1760: {
                          6092	#1761:    V_MEMROM1 tServiceInfoTable V_MEMROM2 V_MEMROM3 * serviceInfoTable;
                          6093	#1762:    vsintx i;
                          6094	#1764:    /* Initialize variables */
                          6095	#1765:    serviceInfoTable = (V_MEMROM1 tServiceInfoTable  V_MEMROM2 V_MEMROM3 *) V_NULL;
                          6096	#1767:    /* Search for service information */
                          6097	#1768:    for (i = (vsintx)(kSizeOfServiceTable - 1); i >= 0; i--)
                          6098	#1769:    {
                          6099	#1770:       if (serviceId == kServiceInfoTable[i].serviceId)
                          6100	#1771:       {
                          6101	#1772:          /* Service found */
                          6102	#1773:          serviceInfoTable = &kServiceInfoTable[i];
                          6103	#1774:          break;
                          6104	#1775:       }
                          6105	#1776:    }
                          6106	#1778:    return serviceInfoTable;
                          6107	#1779: }
                          6108	#1781: /***********************************************************************************************************************
                          6109	#1782:  *  Callback functions from fbl_main
                          6110	#1783:  **********************************************************************************************************************/
                          6111	#1785: /***********************************************************************************************************************
                          6112	#1786:  *  FblDiagInitStartFromAppl
                          6113	#1787:  **********************************************************************************************************************/
                          6114	#1788: /*! \brief       Starts programming session if the Bootloader is called from the application.
                          6115	#1789:  *  \details     This function prepares a programming session request and starts the diagnostic processing
                          6116	#1790:  *               of this request after the real request has been received by the application software.
                          6117	#1791:  **********************************************************************************************************************/
                          6118		.align	1
                          6119		.align	1
                          6120	..gh.f.p.0.a.1.r.0.e.29:
                          6121		.type	..gh.f.p.0.a.1.r.0.e.29,@object
                          6122		.size	..gh.f.p.0.a.1.r.0.e.29,0
                          6123		.global	FblDiagInitStartFromAppl
                          6124	FblDiagInitStartFromAppl:
00000ae4 182106f0         6125		e_stwu	sp, -16(sp)
00000ae8 0080             6126		se_mflr	r0
00000aea d3f1             6127		se_stw	r31, 12(sp)
00000aec d501             6128		se_stw	r0, 20(sp)
                          6129	#	    .bf
                          6130	.LDW86:
                          6131	#1792: void FblDiagInitStartFromAppl(void)
                          6132	#1793: {
                          6133	#1794:    FblCwSetRxBlock();
00000aee 78000001         6134		e_bl	FblCwSetRxBlock
                          6135	#1796:    if (FblDiagRxGetPhysBuffer(kDiagRqlSpsFromAppl + 1u) == DiagBuffer)
00000af2 4823             6136		se_li	r3, 2
00000af4 78000001         6137		se_bl	FblDiagRxGetPhysBuffer
00000af8 70a0e000         6138		e_lis	r5, %hiadj(DiagBuffer)
00000afc 1ca50000         6139		e_add16i	r5, r5, %lo(DiagBuffer)
00000b00 c005             6140		se_lwz	r0, 0(r5)
00000b02 0d03             6141		se_cmpl	r3, r0
00000b04 e200             6142		se_bne	.L4361
                          6143	#1797:    {
                          6144	#1798:       /* Diagnostic session control is processed */
                          6145	#1799:       DiagBuffer[kDiagFmtServiceId] = kDiagSidDiagnosticSessionControl;

                                   Fri Apr 10 08:32:04 2020           Page 111
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
                          6146	#line1799
                          6147	..lin.1e9356d..e9652311.0_115::
                          6148	.LDWlin115:
00000b06 4907             6149		se_li	r7, 16
00000b08 9070             6150		se_stb	r7, 0(r0)
                          6151	#1801: #if defined( FBL_DIAG_ENABLE_OEM_SPS_REQUEST )
                          6152	#1802:       /* Use OEM function to prepare programming session request */
                          6153	#1803:       FblDiagOemPrepareSpsRequest(DiagBuffer, &DiagDataLength);
                          6154	#1804: #else
                          6155	#1805:       /* Prepare DiagBuffer for DiagnosticSessionControl service */
                          6156	#1806:       DiagBuffer[kDiagFmtSubparam] = kDiagSubProgrammingSession;
00000b0a c075             6157		se_lwz	r7, 0(r5)
00000b0c 7080e000         6158		e_lis	r4, %hiadj(DiagDataLength)
00000b10 4820             6159		se_li	r0, 2
                          6160	#1807:       DiagDataLength = kDiagRqlDiagnosticSessionControl;
00000b12 1c840000         6161		e_add16i	r4, r4, %lo(DiagDataLength)
00000b16 73e0e000         6162		e_lis	r31, %hiadj(fblDiagStates)
00000b1a 9107             6163		se_stb	r0, 1(r7)
00000b1c 4810             6164		se_li	r0, 1
                          6165	#1808: #endif /* FBL_DIAG_ENABLE_OEM_SPS_REQUEST */
                          6166	#1810: #if defined( FBL_DIAG_ENABLE_SPS_EXTENDED_SESSION )
                          6167	#1811:       /* Set diagnostic session (extended session) */
                          6168	#1812:       SetDiagExtendedSession();  /* PRQA S 3109 */ /* MD_FblDiag_3109 */
00000b1e b004             6169		se_sth	r0, 0(r4)
00000b20 1fff0000         6170		e_add16i	r31, r31, %lo(fblDiagStates)
00000b24 c00f             6171		se_lwz	r0, 0(r31)
00000b26 70e0e000         6172		e_lis	r7, %hiadj(testerPresentTimeout)
00000b2a 1800c4f8         6173		e_andi	r0, r0, -8
00000b2e 65e0             6174		se_bseti	r0, 30
                          6175	#1813: #endif /* FBL_DIAG_ENABLE_SPS_EXTENDED_SESSION */
                          6176	#1815:       /* Activate tester present timer */
                          6177	#1816:       ResetTesterTimeout();
00000b30 d00f             6178		se_stw	r0, 0(r31)
00000b32 70020388         6179		e_li	r0, 5000
00000b36 5c070000         6180		e_sth	r0, %lo(testerPresentTimeout)(r7)
                          6181	#1818:       /* Prepare response message address */
                          6182	#1819:       if (FblCwPrepareResponseAddress() == kFblOk)
                          6183	#1820:       {
                          6184	#1821:          /* Indicate prepared buffer */
                          6185	#1822:          FblDiagRxStartIndication();
00000b3a 78000001         6186		se_bl	FblDiagRxStartIndication
                          6187	#1823:          FblDiagRxIndication(DiagBuffer, DiagDataLength + 1u);
                          6188	#line1823
                          6189	..lin.1e9356d..e9652311.0_116::
                          6190	.LDWlin116:
00000b3e a044             6191		se_lhz	r4, 0(r4)
00000b40 c035             6192		se_lwz	r3, 0(r5)
00000b42 2004             6193		se_addi	r4, 1
00000b44 00e4             6194		se_extzh	r4
00000b46 78000001         6195		se_bl	FblDiagRxIndication
                          6196	#1825:          /* Dispatch prepared buffer */
                          6197	#1826:          FblDiagStateTask();
                          6198	#line1826
                          6199	..lin.1e9356d..e9652311.0_117::
                          6200	.LDWlin117:
00000b4a 78000001         6201		se_bl	FblDiagStateTask

                                   Fri Apr 10 08:32:04 2020           Page 112
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
                          6202	#1828:          /* Preconditions already checked by application */
                          6203	#1829:          SetPreconditionsChecked();
                          6204	#line1829
                          6205	..lin.1e9356d..e9652311.0_118::
                          6206	.LDWlin118:
00000b4e c00f             6207		se_lwz	r0, 0(r31)
00000b50 64f0             6208		se_bseti	r0, 15
00000b52 d00f             6209		se_stw	r0, 0(r31)
00000b54 e800             6210		se_b	.L4359
                          6211	.L4361:
                          6212	#1830:       }
                          6213	#1831:       else
                          6214	#1832:       {  /* PRQA S 3201 */ /* MD_FblDiag_3201 */
                          6215	#1833:          /* No address information found - cancel response */
                          6216	#1834:          FblDiagConfirmation();
                          6217	#1835:          FblCwResetRxBlock();
                          6218	#1836:       }
                          6219	#1837:    }
                          6220	#1838:    else
                          6221	#1839:    {
                          6222	#1840:       FblCwResetRxBlock();
                          6223	#line1840
                          6224	..lin.1e9356d..e9652311.0_119::
                          6225	.LDWlin119:
00000b56 78000001         6226		e_bl	FblCwResetRxBlock
                          6227	.L4359:
                          6228	#1841:    }
                          6229	#1842: } /* PRQA S 6050 */ /* MD_MSR_STCAL */
                          6230	#	    .ef
                          6231	.LDW96:
00000b5a c501             6232		se_lwz	r0, 20(sp)
00000b5c c3f1             6233		se_lwz	r31, 12(sp)
00000b5e 20f1             6234		se_addi	sp, 16
00000b60 0090             6235		se_mtlr	r0
00000b62 0004             6236		se_blr
                          6237		.global	__ghs_eofn_FblDiagInitStartFromAppl
                          6238	__ghs_eofn_FblDiagInitStartFromAppl:
                          6239		.type	FblDiagInitStartFromAppl,@function
                          6240		.size	FblDiagInitStartFromAppl,$-FblDiagInitStartFromAppl
                          6241		.align	1
                          6242	
                          6243	#function:			FblDiagInitStartFromAppl
                          6244	#stack frame size:		16
                          6245	#link area offset:		0
                          6246	#local storage area offset:	12
                          6247	#gpr save area offset:		12
                          6248	#
                          6249	
                          6250		.data
                          6251		.section ".vletext", "vax"
                          6252		.vle
                          6253		.vle
                          6254	
                          6255	
                          6256		.align	1
                          6257		.align	1

                                   Fri Apr 10 08:32:04 2020           Page 113
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
                          6258	..gh.f.p.0.a.1.r.0.e.30:
                          6259		.type	..gh.f.p.0.a.1.r.0.e.30,@object
                          6260		.size	..gh.f.p.0.a.1.r.0.e.30,0
                          6261		.global	FblDiagPostInit
                          6262	FblDiagPostInit:
00000b64 0080             6263		se_mflr	r0
00000b66 d101             6264		se_stw	r0, 4(sp)
00000b68 182106f8         6265		e_stwu	sp, -8(sp)
                          6266	#	    .bf
                          6267	.LDW07:
00000b6c 70e0e000         6268		e_lis	r7, %hiadj(fblMainStates)
00000b70 50e70000         6269		e_lwz	r7, %lo(fblMainStates)(r7)
                          6270	#1122: void FblDiagPostInit(void)
                          6271	#1123: {
                          6272	#1124: # if defined( FBL_ENABLE_RESPONSE_AFTER_RESET )
                          6273	#1125: vuint8 resetCauseRead;
                          6274	#1126: vuint8 resetCauseWrite;
                          6275	#1127: # endif
                          6276	#1129: # if defined( FBL_ENABLE_SEC_ACCESS_DELAY )
                          6277	#1130: #  if defined( FBL_DIAG_ENABLE_CORE_READ_SECACCESSDELAY_FLAG )
                          6278	#1131:    /* Initialize security access delay timer after nv-memory access is possible. */
                          6279	#1132:    if (!ApplFblGetSecAccessDelayFlag())
                          6280	#1133:    {
                          6281	#1134:       ClrSecurityAccessDelay();
                          6282	#1135:    }
                          6283	#1136: #  endif /* FBL_DIAG_ENABLE_CORE_READ_SECACCESSDELAY_FLAG */
                          6284	#1137: # endif
                          6285	#1139: # if defined( FBL_ENABLE_RESPONSE_AFTER_RESET )
                          6286	#1140:          /* Check if reset has been caused by diagnostic service
                          6287	#1141:           * StartDiagnosticSession (Default Session) or EcuReset */
                          6288	#1142:          if (   (kFblOk == ApplFblReadResetResponseFlag(&resetCauseRead))
                          6289	#1143:              && (resetCauseRead != RESET_RESPONSE_NOT_REQUIRED))
                          6290	#1144:          {
                          6291	#1145:             /* FBL started from reset
                          6292	#1146:              * Clear flag before sending response to be ready for the next request */
                          6293	#1147:             resetCauseWrite = RESET_RESPONSE_NOT_REQUIRED;
                          6294	#1149:             (void)ApplFblWriteResetResponseFlag(&resetCauseWrite);   /* PRQA S 3425 */ /* MD_FblDiag_3425 */
                          6295	#1151:             if (FblMainGetStartFromAppl())
                          6296	#1152:             {
                          6297	#1153:                /* Both reprogramming flag and reset response flag are set.
                          6298	#1154:                 * Clear reset response flag but prioritize the reprogramming flag. */
                          6299	#1155:                assertFblInternal(0u, kFblOemAssertInvalidError);  /* PRQA S 2214 */ /* MD_FblDiag_2214 */
                          6300	#1156:             }
                          6301	#1157:             else
                          6302	#1158:             {
                          6303	#1159:                /* Send response for StartDiagnosticSession or EcuReset request */
                          6304	#1160:                FblDiagInitStartFromReset(resetCauseRead);
                          6305	#1161:             }
                          6306	#1162:          }
                          6307	#1163: # endif /* FBL_ENABLE_RESPONSE_AFTER_RESET */
                          6308	#1165:          /* Send programming session request response */
                          6309	#1166:          if (FblMainGetStartFromAppl())
00000b74 67e7             6310		se_btsti	r7, 30
00000b76 e600             6311		se_beq	.L4422
                          6312	#1167:          {
                          6313	#1168:             /* FBL started from application */

                                   Fri Apr 10 08:32:04 2020           Page 114
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
                          6314	#1169:             FblDiagInitStartFromAppl();
                          6315	#line1169
                          6316	..lin.1e9356d..ccca03e8.0_120::
                          6317	.LDWlin120:
00000b78 e900             6318		se_bl	FblDiagInitStartFromAppl
                          6319	.L4422:
                          6320	#1170:          }
                          6321	#1172: # if defined( FBL_ENABLE_SLEEPMODE )
                          6322	#1173:          /* Initialize sleep mode counter */
                          6323	#1174:          FblSleepCounterReload();
                          6324	#line1174
                          6325	..lin.1e9356d..ccca03e8.0_121::
                          6326	.LDWlin121:
00000b7a 701223e0         6327		e_li	r0, 300000
00000b7e 70e0e000         6328		e_lis	r7, %hiadj(sleepCounter)
00000b82 54070000         6329		e_stw	r0, %lo(sleepCounter)(r7)
                          6330	#1175: # endif
                          6331	#1177: # if defined( FBL_DIAG_ENABLE_OEM_POSTINIT )
                          6332	#1178:    /* OEM-specific initializations */
                          6333	#1179:    FblDiagOemPostInit();
00000b86 78000001         6334		e_bl	FblDiagOemPostInit
                          6335	#1180: # endif /* FBL_DIAG_ENABLE_OEM_POSTINIT */
                          6336	#1181: }
                          6337	#	    .ef
                          6338	.LDW17:
00000b8a c301             6339		se_lwz	r0, 12(sp)
00000b8c 2071             6340		se_addi	sp, 8
00000b8e 0090             6341		se_mtlr	r0
00000b90 0004             6342		se_blr
                          6343		.global	__ghs_eofn_FblDiagPostInit
                          6344	__ghs_eofn_FblDiagPostInit:
                          6345		.type	FblDiagPostInit,@function
                          6346		.size	FblDiagPostInit,$-FblDiagPostInit
                          6347		.align	1
                          6348	
                          6349	#function:			FblDiagPostInit
                          6350	#stack frame size:		8
                          6351	#link area offset:		0
                          6352	#local storage area offset:	8
                          6353	#
                          6354	
                          6355		.data
                          6356		.section ".vletext", "vax"
                          6357		.vle
                          6358		.vle
                          6359	
                          6360	
                          6361	#1182: #endif /* FBL_DEF_ENABLE_NON_KB_MAIN */
                          6362	#1184: /***********************************************************************************************************************
                          6363	#1185:  *  FblDiagDeinit
                          6364	#1186:  **********************************************************************************************************************/
                          6365	#1187: /*! \brief       Function prepares for FBL shutdown on diagnostic service request.
                          6366	#1188:  **********************************************************************************************************************/
                          6367	#1189: static void FblDiagDeinit(void)
                          6368	#1190: {
                          6369	#1191:    /* Discard pending FblLib_Mem tasks */

                                   Fri Apr 10 08:32:04 2020           Page 115
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
                          6370	#1192:    FblMemDeinit();
                          6371	#1194: #if defined( FBL_DIAG_ENABLE_OEM_DEINIT )
                          6372	#1195:    /* Shutdown OEM-specific service handling */
                          6373	#1196:    FblDiagOemDeinit();
                          6374	#1197: #endif /* FBL_DIAG_ENABLE_OEM_DEINIT */
                          6375	#1199:    if (GetDiagProgrammingSession())
                          6376	#1200:    {
                          6377	#1201:       /* ECU programming mode is active */
                          6378	#1202:       ClrDiagProgrammingSession();
                          6379	#1203:       if (GetMemDriverInitialized())
                          6380	#1204:       {
                          6381	#1205:          /* Remove memory driver from RAM-buffer */
                          6382	#1206:          FblCwSetOfflineMode();
                          6383	#1208:          (void)MemDriver_DeinitSync(V_NULL);
                          6384	#1210:          FblCwSetOnlineMode();
                          6385	#1212:          /* Reinitialize memory driver flash */
                          6386	#1213:          ClrMemDriverInitialized();
                          6387	#1214:       }
                          6388	#1216:       /* Turn off programming voltage */
                          6389	#1217:       ApplFblResetVfp();
                          6390	#1218:    }
                          6391	#1220:    ClrWaitEcuReset();   /* PRQA S 3109 */ /* MD_FblDiag_3109 */
                          6392	#1222:    /* Clear all flags for service handling */
                          6393	#1223:    FblDiagResetServiceFlags();
                          6394	#1225:    /* Request shutdown from ComWrapper */
                          6395	#1226:    FblCwShutdownRequest(kFblCwResetEcuRegularCase);
                          6396	#1227: }
                          6397	#1229: /***********************************************************************************************************************
                          6398	#1230:  *  FblDiagStateTask
                          6399	#1231:  **********************************************************************************************************************/
                          6400	#1232: /*! \brief       This function handles the surveillance of the tester present timer.
                          6401	#1233:  *  \details     When a timeout occurs the startup code of the FBL is executed.
                          6402	#1234:  **********************************************************************************************************************/
                          6403	#1235: void FblDiagStateTask( void )
                          6404	#1236: {
                          6405	#1237:    tFblResult result;
                          6406	#1239: #if defined( FBL_DIAG_ENABLE_TASK_LOCKS )
                          6407	#1240:    if (!GetDiagStateTaskRunning())
                          6408	#1241:    {
                          6409	#1242:       SetDiagStateTaskRunning();
                          6410	#1243: #endif /* FBL_DIAG_ENABLE_TASK_LOCKS */
                          6411	#1245:       /* Diagnostic service dispatcher. Will be executed when a service has to be managed */
                          6412	#1246:       if (diagResponseFlag != kDiagResponseIdle)
                          6413	#1247:       {
                          6414	#1248:          /* Prepare return value */
                          6415	#1249:          result = kFblOk;
                          6416	#1251:          /* This is the initial call after reception of a service request */
                          6417	#1252:          if (diagResponseFlag == kDiagResponseRequested)
                          6418	#1253:          {
                          6419	#1254:             /* Initialize security seed */
                          6420	#1255:             (void)ApplFblSecuritySeedInit();
                          6421	#1257:             /* Advance service processing state to repeated service
                          6422	#1258:              * This will ensure that the service handler will be
                          6423	#1259:              * called until it has been concluded, e.g. by DiagProcessingDone() */
                          6424	#1260:             diagResponseFlag = kDiagRepeatResponse;
                          6425	#1262:             /* Search for a valid configured service in the service table */

                                   Fri Apr 10 08:32:04 2020           Page 116
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
                          6426	#1263:             serviceInfo = FindServiceInfo(diagServiceCurrent);
                          6427	#1265:             /* Check if service was found in service table */
                          6428	#1266:             if (serviceInfo != (V_MEMROM1 tServiceInfoTable  V_MEMROM2 V_MEMROM3 *) V_NULL)
                          6429	#1267:             {
                          6430	#1268:                /* Service available. Check conditions */
                          6431	#1270:                /* Check if service is allowed functionally */
                          6432	#1271:                if (   GetFunctionalRequest()
                          6433	#1272:                    && ((serviceInfo->sessionSupport & kDiagFunctionalRequestAllowed) == 0u)
                          6434	#1273:                   )
                          6435	#1274:                {
                          6436	#1275:                   /* No functional request allowed for this service.
                          6437	#1276:                    * Discard service and finish processing. */
                          6438	#1277:                   DiagSetNoResponse();
                          6439	#1279:                   /* Prevent call of the main handler */
                          6440	#1280:                   result = kFblFailed;
                          6441	#1281:                }
                          6442	#1282:                else
                          6443	#1283:                {
                          6444	#1284:                   /* Check valid parameter */
                          6445	#1285:                   assertFblGen((serviceInfo->mainHandlerIdx < kSizeOfMainHandlerTable), kFblOemAssertMainHandlerIdxInvalid);  /* PRQA S 2214 */ /* MD_FblDiag_2214 */
                          6446	#1287:                   /* Handler can be processed now */
                          6447	#1288:                   serviceMainHandler = kServiceMainHandlerFctTable[serviceInfo->mainHandlerIdx];
                          6448	#1289:                   result = CheckServicePreconditions(serviceInfo);
                          6449	#1291:                   /* Check succeeded. Continue and invoke user check. */
                          6450	#1292:                   if (result == kFblOk)
                          6451	#1293:                   {
                          6452	#1294:                      /* Service is basically allowed - response pending messages can be sent now */
                          6453	#1295:                      SetRcrRpAllowed();
                          6454	#1297:                      {
                          6455	#1298:                         result = ApplFblCheckConditions(&DiagBuffer[kDiagFmtSubparam], (tCwDataLengthType)(DiagDataLength));
                          6456	#1299:                      }
                          6457	#1300:                   }
                          6458	#1301:                }
                          6459	#1302:             }
                          6460	#1303:          }
                          6461	#1305:          /* Don't call the main handler if an error has already been determined or reset is pending.
                          6462	#1306:           * Thus, it will be called in case of NoResponse, RepeatedResponse and PutPosResponse. */
                          6463	#1307:          if ((result == kFblOk) && ((diagResponseFlag & kDiagPutNegResponse) == 0) && (!GetWaitEcuReset()))
                          6464	#1308:          {
                          6465	#1309:             assertFblInternal( (serviceMainHandler != kDiagSubFctNoMainHandler) , kFblSysAssertServiceMainHandlerInvalid); /* PRQA S 2214 */ /* MD_FblDiag_2214 */
                          6466	#1311:             {
                          6467	#1312:                /* Call main handler or repeated service call */
                          6468	#1313:                result = (*serviceMainHandler)(&DiagBuffer[kDiagFmtSubparam], DiagDataLength);   /* PRQA S 3199 */ /* MD_FblDiag_3199 */
                          6469	#1314:             }
                          6470	#1315:          }
                          6471	#1317:          /* Activate post handler after diagnostic service has been processed. */
                          6472	#1318:          SetDiagHandlerCalled();
                          6473	#1319:          /* Finish service processing if service has been concluded before */
                          6474	#1320:          FblDiagResponseProcessor();
                          6475	#1322:       }
                          6476	#1324: #if defined( FBL_MEM_ENABLE_PIPELINING )
                          6477	#1325:       /* Resume stored FblLib_Mem operation */
                          6478	#1326:       FblMemResumeIndication();
                          6479	#1327: #endif /* FBL_MEM_ENABLE_PIPELINING */
                          6480	#1329:       /* Check for reset request
                          6481	#1330:        * The following preconditions have to be fulfilled:

                                   Fri Apr 10 08:32:04 2020           Page 117
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
                          6482	#1331:          * Reset message confirmed
                          6483	#1332:          * Pre-reset function (e.g. flag written to NV-memory) has finished */
                          6484	#1333:       if ((GetWaitEcuReset()) && (GetResetMsgConfirmed()) && (GetEcuResetFctFinished()))
                          6485	#1334:       {
                          6486	#1335:          FblDiagDeinit();
                          6487	#1336:       }
                          6488	#1338: #if defined( FBL_ENABLE_SEC_ACCESS_DELAY )
                          6489	#1339:       /* Check if Security access delay counter close to expire */
                          6490	#1340:       if (GetSecurityAccessDelay() == 1u)
                          6491	#1341:       {
                          6492	#1342:          /* If so, conclude the decrement and check to clear the flag in EEPROM */
                          6493	#1343:          ClrSecurityAccessDelay();
                          6494	#1345: # if defined( FBL_DIAG_ENABLE_CORE_WRITE_SECACCESSDELAY_FLAG )
                          6495	#1346:          /* Clear security access delay flag */
                          6496	#1347:          (void)ApplFblClrSecAccessDelayFlag();
                          6497	#1348: # endif /* FBL_DIAG_ENABLE_CORE_WRITE_SECACCESSDELAY_FLAG */
                          6498	#1349:       }
                          6499	#1350: #endif
                          6500	#1352: #if defined( FBL_DIAG_ENABLE_OEM_STATETASK )
                          6501	#1353:       FblDiagOemStateTask();
                          6502	#1354: #endif /* FBL_DIAG_ENABLE_OEM_STATETASK */
                          6503	#1356: #if defined( FBL_DIAG_ENABLE_TASK_LOCKS )
                          6504	#1357:       /* Allow further task executions */
                          6505	#1358:       ClrDiagStateTaskRunning();
                          6506	#1359:    }
                          6507	#1360: #endif /* FBL_DIAG_ENABLE_TASK_LOCKS */
                          6508	#1361: }  /* PRQA S 6010, 6030, 6050, 6080 */ /* MD_MSR_STPTH, MD_MSR_STCYC, MD_MSR_STCAL, MD_MSR_STMIF */
                          6509	#1363: /***********************************************************************************************************************
                          6510	#1364:  *  Diagnostic tasks
                          6511	#1365:  **********************************************************************************************************************/
                          6512	#1367: /***********************************************************************************************************************
                          6513	#1368:  *  FblDiagTimerTask
                          6514	#1369:  **********************************************************************************************************************/
                          6515	#1370: /*! \brief       This function handles the surveillance of the tester present timer.
                          6516	#1371:  *  \details     When a timeout occurs the startup code of the FBL is executed. Has to be executed from RAM
                          6517	#1372:  *               if diagnostic functionality should be maintained while flashing, e.g. if pipelined programming
                          6518	#1373:  *               is enabled.
                          6519	#1374:  **********************************************************************************************************************/
                          6520		.align	1
                          6521		.align	1
                          6522	..gh.f.p.0.a.1.r.0.e.31:
                          6523		.type	..gh.f.p.0.a.1.r.0.e.31,@object
                          6524		.size	..gh.f.p.0.a.1.r.0.e.31,0
                          6525		.global	FblDiagTimerTask
                          6526	FblDiagTimerTask:
00000b92 182106f0         6527		e_stwu	sp, -16(sp)
00000b96 0080             6528		se_mflr	r0
00000b98 d3f1             6529		se_stw	r31, 12(sp)
00000b9a d501             6530		se_stw	r0, 20(sp)
                          6531	#	    .bf
                          6532	.LDW27:
                          6533	#1375: void FblDiagTimerTask(void)
                          6534	#1376: {
                          6535	#1377: #if defined( FBL_DIAG_ENABLE_TASK_LOCKS )
                          6536	#1378:    if (!GetDiagTimerTaskRunning())
                          6537	#1379:    {

                                   Fri Apr 10 08:32:04 2020           Page 118
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
                          6538	#1380:       SetDiagTimerTaskRunning();
                          6539	#1381: #endif /* FBL_DIAG_ENABLE_TASK_LOCKS */
                          6540	#1382:       /* Tester present timing */
                          6541	#1383:       if (TimeoutTesterValue() != 0u)
00000b9c 70e0e000         6542		e_lis	r7, %hiadj(testerPresentTimeout)
00000ba0 1ce70000         6543		e_add16i	r7, r7, %lo(testerPresentTimeout)
00000ba4 a007             6544		se_lhz	r0, 0(r7)
00000ba6 2a00             6545		se_cmpi	r0, 0
00000ba8 e600             6546		se_beq	.L4486
                          6547	#1384:       {
                          6548	#1385:          DecTimeoutTesterValue();
                          6549	#line1385
                          6550	..lin.1e9356d..c06e02c2.0_122::
                          6551	.LDWlin122:
00000baa 2400             6552		se_subi	r0, 1
00000bac 00e0             6553		se_extzh	r0
00000bae b007             6554		se_sth	r0, 0(r7)
                          6555	#1386:          if (TimeoutTesterValue() == 0u)
00000bb0 2a00             6556		se_cmpi	r0, 0
00000bb2 e200             6557		se_bne	.L4486
                          6558	#1387:          {
                          6559	#1388: #if defined( FBL_DIAG_ENABLE_OEM_SESSION_TIMEOUT )
                          6560	#1389:             FblDiagSessionTimeout();
                          6561	#1390: #else
                          6562	#1391:             /* Tester present timer expired, exit bootloader via reset */
                          6563	#1392:             FblDiagEcuReset();
                          6564	#line1392
                          6565	..lin.1e9356d..c06e02c2.0_123::
                          6566	.LDWlin123:
00000bb4 78000001         6567		se_bl	FblDiagEcuReset
                          6568	.L4486:
                          6569	#1393: #endif
                          6570	#1394:          }
                          6571	#1395:       }
                          6572	#1397:       /* ECU reset is pending */
                          6573	#1398:       if (TimeoutEcuResetValue() != 0u)
                          6574	#line1398
                          6575	..lin.1e9356d..c06e02c2.0_124::
                          6576	.LDWlin124:
00000bb8 70e0e000         6577		e_lis	r7, %hiadj(ecuResetTimeout)
00000bbc 1ce70000         6578		e_add16i	r7, r7, %lo(ecuResetTimeout)
00000bc0 a007             6579		se_lhz	r0, 0(r7)
00000bc2 2a00             6580		se_cmpi	r0, 0
00000bc4 e600             6581		se_beq	.L4490
                          6582	#1399:       {
                          6583	#1400:          DecTimeoutEcuResetValue();
                          6584	#line1400
                          6585	..lin.1e9356d..c06e02c2.0_125::
                          6586	.LDWlin125:
00000bc6 2400             6587		se_subi	r0, 1
00000bc8 00e0             6588		se_extzh	r0
00000bca b007             6589		se_sth	r0, 0(r7)
                          6590	#1401:          if (TimeoutEcuResetValue() == 0u)
00000bcc 2a00             6591		se_cmpi	r0, 0
00000bce e200             6592		se_bne	.L4490
                          6593	#1402:          {

                                   Fri Apr 10 08:32:04 2020           Page 119
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
                          6594	#1403:             /* ECU reset timer expired
                          6595	#1404:              * Exit bootloader via Reset, but force no response!! */
                          6596	#1405:             FblDiagEcuReset();
                          6597	#line1405
                          6598	..lin.1e9356d..c06e02c2.0_126::
                          6599	.LDWlin126:
00000bd0 78000001         6600		se_bl	FblDiagEcuReset
                          6601	.L4490:
                          6602	#1406:          }
                          6603	#1407:       }
                          6604	#1410: #if defined( FBL_DEF_ENABLE_NON_KB_MAIN  )
                          6605	#1411: # if defined( FBL_ENABLE_SLEEPMODE )
                          6606	#1412:             /* Sleep mode timer */
                          6607	#1413:             if (FblGetSleepCounter() != 0u)
                          6608	#line1413
                          6609	..lin.1e9356d..c06e02c2.0_127::
                          6610	.LDWlin127:
00000bd4 73e0e000         6611		e_lis	r31, %hiadj(sleepCounter)
00000bd8 1fff0000         6612		e_add16i	r31, r31, %lo(sleepCounter)
00000bdc c00f             6613		se_lwz	r0, 0(r31)
00000bde 2a00             6614		se_cmpi	r0, 0
00000be0 e600             6615		se_beq	.L4494
                          6616	#1414:             {
                          6617	#1415:                FblDecSleepCounter();
                          6618	#line1415
                          6619	..lin.1e9356d..c06e02c2.0_128::
                          6620	.LDWlin128:
00000be2 2600             6621		se_subi.	r0, 1
00000be4 d00f             6622		se_stw	r0, 0(r31)
                          6623	#1416:                if (FblGetSleepCounter() == 0u)
00000be6 e200             6624		se_bne	.L4494
                          6625	#1417:                {
                          6626	#1418:                   ApplFblBusSleep();
                          6627	#line1418
                          6628	..lin.1e9356d..c06e02c2.0_129::
                          6629	.LDWlin129:
00000be8 78000001         6630		e_bl	ApplFblBusSleep
                          6631	#1419:                   FblSleepCounterReload();
00000bec 701223e0         6632		e_li	r0, 300000
00000bf0 d00f             6633		se_stw	r0, 0(r31)
                          6634	.L4494:
                          6635	#1420:                }
                          6636	#1421:             }
                          6637	#1422: # endif /* FBL_ENABLE_SLEEPMODE */
                          6638	#1423: #endif /* FBL_DEF_ENABLE_NON_KB_MAIN */
                          6639	#1425: #if defined( FBL_ENABLE_SEC_ACCESS_DELAY )
                          6640	#1426:       /* Security access delay timing */
                          6641	#1427:       if (GetSecurityAccessDelay() > 1u)
00000bf2 70e0e000         6642		e_lis	r7, %hiadj(secSecurityAccessDelay)
00000bf6 1ce70000         6643		e_add16i	r7, r7, %lo(secSecurityAccessDelay)
00000bfa c007             6644		se_lwz	r0, 0(r7)
00000bfc 2200             6645		se_cmpli	r0, 1
00000bfe e100             6646		se_ble	.L4484
                          6647	#1428:       {
                          6648	#1429:          DecSecurityAccessDelay();
                          6649	#line1429

                                   Fri Apr 10 08:32:04 2020           Page 120
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
                          6650	..lin.1e9356d..c06e02c2.0_130::
                          6651	.LDWlin130:
00000c00 2400             6652		se_subi	r0, 1
00000c02 d007             6653		se_stw	r0, 0(r7)
                          6654	.L4484:
                          6655	#1430:       }
                          6656	#1431: #endif
                          6657	#1433: #if defined( FBL_DIAG_ENABLE_OEM_TIMERTASK )
                          6658	#1434:       FblDiagOemTimerTask();
                          6659	#1435: #endif /* FBL_DIAG_ENABLE_OEM_TIMERTASK */
                          6660	#1437: #if defined( FBL_DIAG_ENABLE_TASK_LOCKS )
                          6661	#1438:       /* Allow further task executions */
                          6662	#1439:       ClrDiagTimerTaskRunning();
                          6663	#1440:    }
                          6664	#1441: #endif /* FBL_DIAG_ENABLE_TASK_LOCKS */
                          6665	#1442: }
                          6666	#	    .ef
                          6667	.LDW37:
00000c04 c501             6668		se_lwz	r0, 20(sp)
00000c06 c3f1             6669		se_lwz	r31, 12(sp)
00000c08 20f1             6670		se_addi	sp, 16
00000c0a 0090             6671		se_mtlr	r0
00000c0c 0004             6672		se_blr
                          6673		.global	__ghs_eofn_FblDiagTimerTask
                          6674	__ghs_eofn_FblDiagTimerTask:
                          6675		.type	FblDiagTimerTask,@function
                          6676		.size	FblDiagTimerTask,$-FblDiagTimerTask
                          6677		.align	1
                          6678	
                          6679	#function:			FblDiagTimerTask
                          6680	#stack frame size:		16
                          6681	#link area offset:		0
                          6682	#local storage area offset:	12
                          6683	#gpr save area offset:		12
                          6684	#
                          6685	
                          6686		.data
                          6687		.section ".vletext", "vax"
                          6688		.vle
                          6689		.vle
                          6690	
                          6691	
                          6692	#1444: /***********************************************************************************************************************
                          6693	#1445:  *  Diagnostic kernel handling functions
                          6694	#1446:  **********************************************************************************************************************/
                          6695	#1448: /***********************************************************************************************************************
                          6696	#1449:  *  CheckSubparameter
                          6697	#1450:  **********************************************************************************************************************/
                          6698	#1451: /*! \brief       This function checks if all sub-parameters matches the values in DiagBuffer
                          6699	#1452:  *  \pre         All service table entries are initialized properly.
                          6700	#1453:  *  \param[in]   subFctParamIdTable Pointer to sub-parameter values
                          6701	#1454:  *  \param[in]   paramId Parameter identifier to be checked.
                          6702	#1455:  *  \return      kSubServiceValid: sub-function known and valid or Bit coded failures.
                          6703	#1456:  *               kSubServiceParameterNotFound: No parameter found for this sub-service.
                          6704	#1457:  *               kSubServiceFunctionNotFound:   No function found for this sub-service (first byte).
                          6705	#1458:  **********************************************************************************************************************/

                                   Fri Apr 10 08:32:04 2020           Page 121
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
                          6706	#1459: static vuint16 CheckSubparameter(V_MEMROM1 vuint8 V_MEMROM2 V_MEMROM3 * subFctParamIdTable, vsintx paramId)
                          6707	#1460: {
                          6708	#1461:    vuint16 result;
                          6709	#1463:    result = kSubServiceValid;
                          6710	#1465:    while (paramId > 0)
                          6711	#1466:    {
                          6712	#1467:       /* Decrement length indicator to become an index */
                          6713	#1468:       paramId--;
                          6714	#1470:       /* Typecasts are safe because while loop is only executed for positive values of paramId */
                          6715	#1471:       if (DiagBuffer[kDiagFmtSubparam + (vuintx)paramId] != subFctParamIdTable[(vuintx)paramId])
                          6716	#1472:       {
                          6717	#1473:          if ((paramId == 0) && (GetServiceHasSubfunction()))
                          6718	#1474:          {
                          6719	#1475:             /* Assuming the sub-function is always the first byte */
                          6720	#1476:             result |= kSubServiceFunctionNotFound;
                          6721	#1477:          }
                          6722	#1478:          else
                          6723	#1479:          {
                          6724	#1480:             result |= kSubServiceParameterNotFound;
                          6725	#1481:          }
                          6726	#1482:       }
                          6727	#1483:    }
                          6728	#1484:    return result;
                          6729	#1485: }
                          6730	#1487: /***********************************************************************************************************************
                          6731	#1488:  *  CheckSubServiceTable
                          6732	#1489:  **********************************************************************************************************************/
                          6733	#1490: /*! \brief       This routine checks if the subfunction is supported.
                          6734	#1491:  *  \details     Once all subfunction parameters have been checked, it's been checked if this subfunction
                          6735	#1492:  *               is allowed in active session and length is correct.
                          6736	#1493:  *               If a valid service-instance handler was found, it will be used instead of the main handler.
                          6737	#1494:  *  \pre         Service available and valid configuration in the serviceInfoTable.
                          6738	#1495:  *  \param[in]   subFctInfo Pointer to subfunction descriptor
                          6739	#1496:  *  \param[in]   infoTableLen
                          6740	#1497:  *  \param[in]   paramIdTableLen
                          6741	#1498:  *  \return      kSubServiceValid: subfunction known and valid
                          6742	#1499:  **********************************************************************************************************************/
                          6743	#1500: static vuint16 CheckSubServiceTable(V_MEMROM1 tSubFctInfoTable V_MEMROM2 V_MEMROM3 * subFctInfo, vsintx infoTableLen, vsintx paramIdTableLen)
                          6744	#1501: {
                          6745	#1502:    vuint16 result;
                          6746	#1503:    vuint16 resultSubParam;
                          6747	#1504:    vuint16 subParState;
                          6748	#1506:    /* Initialize return value */
                          6749	#1507:    result = (kSubServiceParameterNotFound | kSubServiceFunctionNotFound | kSubServiceTableMismatch);
                          6750	#1509:    subParTabIdx = 0u;
                          6751	#1510:    subParState = 0u;
                          6752	#1512:    /* Walk through the list of all listed sub-functions */
                          6753	#1513:    while (infoTableLen > 0)
                          6754	#1514:    {
                          6755	#1515:       /* Decrement table length to become an index into the table */
                          6756	#1516:       infoTableLen--;
                          6757	#1518:       /* This is tricky: The subParamMask keeps the flag 'ParameterNotFound' or 'SubfunctionNotFound' to 0 if this once was found */
                          6758	#1519:       resultSubParam = CheckSubparameter(subFctInfo[infoTableLen].subFctParamIdTable, paramIdTableLen);
                          6759	#1520:       result = ((resultSubParam & result) | kSubServiceTableMismatch);
                          6760	#1522:       /* Perform sub-service checks */
                          6761	#1523:       if (resultSubParam == kSubServiceValid)

                                   Fri Apr 10 08:32:04 2020           Page 122
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
                          6762	#1524:       {
                          6763	#1525:          /* Parameter-ID matches. Sub-function condition checks can be done now. */
                          6764	#1526:          result = kSubServiceValid;
                          6765	#1527:          /* Overwrite Service session info with SubService session info
                          6766	#1528:           * Mainly for later security access check on sub-service level */
                          6767	#1529:          currentServiceSessionSupport = subFctInfo[infoTableLen].sessionSupport;
                          6768	#1531:          /* Sub-function supported in active session ? */
                          6769	#1532:          if ((subFctInfo[infoTableLen].sessionSupport & GetCurrentSession()) == 0u)
                          6770	#1533:          {
                          6771	#1534:             /* Set error bit that subFunction/-parameter not allowed in current session */
                          6772	#1535:             result |= kSubServiceSessionFailure;
                          6773	#1536:          }
                          6774	#1537:          if ((subFctInfo[infoTableLen].sessionSupport & kDiagLengthSpecialCheck) == 0u)
                          6775	#1538:          {
                          6776	#1539:             /* Check for correct data length of this sub function */
                          6777	#1540:             if (subFctInfo[infoTableLen].serviceLen != DiagDataLength)
                          6778	#1541:             {
                          6779	#1542:                /* Set the error bit that length doesn't match */
                          6780	#1543:                result |= kSubServiceLenFailure;
                          6781	#1544:             }
                          6782	#1545:          }
                          6783	#1546:          else
                          6784	#1547:          {
                          6785	#1548:             /* Dynamic length check needed for this sub-service */
                          6786	#1549:             if (FblDiagCheckSpecialLength(&DiagBuffer[kDiagFmtpbDiagData], DiagDataLength, serviceInfo) != kFblOk)
                          6787	#1550:             {
                          6788	#1551:                /* Set the error bit that length doesn't match */
                          6789	#1552:                result |= kSubServiceLenFailure;
                          6790	#1553:             }
                          6791	#1554:          }
                          6792	#1555:          /* Check if sub-service is allowed functionally */
                          6793	#1556:          if (   GetFunctionalRequest()
                          6794	#1557:              && ((subFctInfo[infoTableLen].sessionSupport & kDiagFunctionalRequestAllowed) == 0u)
                          6795	#1558:              && (GetFunctionalRequest())
                          6796	#1559:             )
                          6797	#1560:          {
                          6798	#1561:             /* Set the error bit to indicate security access denied */
                          6799	#1562:             result |= kSubServiceNoFuncSupport;
                          6800	#1563:          }
                          6801	#1565:          /* Check if sub-service is allowed functionally */
                          6802	#1566:          if (   ((subFctInfo[infoTableLen].sessionSupport & kDiagSecuredService) != 0u)
                          6803	#1567:              && (!GetSecurityUnlock())
                          6804	#1568:             )
                          6805	#1569:          {
                          6806	#1570:             /* Set the error bit to indicate security access denied */
                          6807	#1571:             result |= kSubServiceSecAccFailure;
                          6808	#1572:          }
                          6809	#1574:          /* All conditions are met. Overwrite mainHandler if a sub-function
                          6810	#1575:           * handler was given. Otherwise, use default main handler. */
                          6811	#1576:          if (   (result == kSubServiceValid)
                          6812	#1577:              && (subFctInfo[infoTableLen].mainInstanceHandlerIdx!=kServiceMainHandlerNoHandler)
                          6813	#1578:             )
                          6814	#1579:          {
                          6815	#1580:             /* Get index from sub-function table
                          6816	#1581:              * and set-up mainHandler. */
                          6817	#1582:             serviceMainHandler = kServiceMainHandlerFctTable[subFctInfo[infoTableLen].mainInstanceHandlerIdx];

                                   Fri Apr 10 08:32:04 2020           Page 123
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
                          6818	#1583:          }
                          6819	#1585:          /* !!Stop the loop by clearing the loop counter!! */
                          6820	#1586:          infoTableLen = 0;
                          6821	#1587:       }
                          6822	#1588:       else
                          6823	#1589:       {
                          6824	#1590:          if (resultSubParam == kSubServiceFunctionNotFound)
                          6825	#1591:          {
                          6826	#1592:             /* The routine parameter is supported basically*/
                          6827	#1593:             subParState |= kSubServiceParameterFound;
                          6828	#1595:             /* Store index of sub-parameter table with mismatching sub-function.
                          6829	#1596:              * This is needed for RoutineControl service to do security level-
                          6830	#1597:              * and session checks. */
                          6831	#1598:             subParTabIdx = (vuint8)infoTableLen;
                          6832	#1599:          }
                          6833	#1601:          result |= subParState;
                          6834	#1602:       }
                          6835	#1603:    }
                          6836	#1605:    /* Return calculated status */
                          6837	#1606:    return result;
                          6838	#1607: }  /* PRQA S 6030 */ /* MD_MSR_STCYC */
                          6839	#1609: /***********************************************************************************************************************
                          6840	#1610:  *  CheckServiceTable
                          6841	#1611:  **********************************************************************************************************************/
                          6842	#1612: /*! \brief       This routine checks if the subfunction is supported.
                          6843	#1613:  *  \details     Once all subfunction parameters have been checked, it's been checked if this subfunction
                          6844	#1614:  *               is allowed in active session and length is correct.
                          6845	#1615:  *               If a valid service-instance handler was found, it will be used instead of the main handler.
                          6846	#1616:  *  \pre         Service available and valid configuration in the serviceInfoTable.
                          6847	#1617:  *  \param[in]   pServiceInfo Pointer to service info table
                          6848	#1618:  *  \return      kSubServiceValid: subfunction known and valid
                          6849	#1619:  **********************************************************************************************************************/
                          6850	#1620: static vuint16 CheckServiceTable(V_MEMROM1 tServiceInfoTable V_MEMROM2 V_MEMROM3 * pServiceInfo)
                          6851	#1621: {
                          6852	#1622:    vuint16 serviceCheckResult;
                          6853	#1624:    /* Initialize variables */
                          6854	#1625:    serviceCheckResult = kCheckValid;
                          6855	#1627:    /* Initialize sessionSupport variable. Maybe overwritten for subservice
                          6856	#1628:     * This may indicate further info like securedService for subfunctions */
                          6857	#1629:    currentServiceSessionSupport = pServiceInfo->sessionSupport;
                          6858	#1631:    /* Check if service is supported in active session */
                          6859	#1632:    if ((currentServiceSessionSupport & GetCurrentSession()) == 0u)
                          6860	#1633:    {
                          6861	#1634:       serviceCheckResult |= kServiceSessionFailure;
                          6862	#1635:    }
                          6863	#1637:    /* Minimum length check - done on service level */
                          6864	#1638:    if (DiagDataLength < pServiceInfo->serviceLen)
                          6865	#1639:    {
                          6866	#1640:       serviceCheckResult |= kServiceMinLenFailure;
                          6867	#1641:    }
                          6868	#1643:    /* Security Access on service level */
                          6869	#1644:    if (((currentServiceSessionSupport & kDiagSecuredService) != 0u) && (!GetSecurityUnlock()))
                          6870	#1645:    {
                          6871	#1646:       serviceCheckResult |= kServiceSecAccFailure;
                          6872	#1647:    }
                          6873	#1649:    /* Check length on service level */

                                   Fri Apr 10 08:32:04 2020           Page 124
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
                          6874	#1650:    if ((pServiceInfo->sessionSupport & kDiagLengthSpecialCheck) != 0u)
                          6875	#1651:    {
                          6876	#1652:       /* Service requires dynamic length check */
                          6877	#1653:       if (FblDiagCheckSpecialLength(&DiagBuffer[kDiagFmtpbDiagData], DiagDataLength, pServiceInfo) != kFblOk)
                          6878	#1654:       {
                          6879	#1655:          serviceCheckResult |= kServiceLenFailure;
                          6880	#1656:       }
                          6881	#1657:    }
                          6882	#1658:    else
                          6883	#1659:    {
                          6884	#1660:       /* Constant length check */
                          6885	#1661:       if (DiagDataLength != pServiceInfo->serviceLen)
                          6886	#1662:       {
                          6887	#1663:          serviceCheckResult |= kServiceLenFailure;
                          6888	#1664:       }
                          6889	#1665:    }
                          6890	#1667:    return serviceCheckResult;
                          6891	#1668: }
                          6892	#1670: /***********************************************************************************************************************
                          6893	#1671:  *  CheckServicePreconditions
                          6894	#1672:  **********************************************************************************************************************/
                          6895	#1673: /*! \brief       The function checks the pre-conditions configured in the service descriptor.
                          6896	#1674:  *  \details     If not fulfilled, a neg. response will be issued and the function returns kFblFailed.
                          6897	#1675:  *               If all conditions are met, the function returns kFblOk.
                          6898	#1676:  *  \pre         Service available and valid configuration in the serviceInfoTable.
                          6899	#1677:  *  \param[in]   pServiceInfo Pointer to service descriptor
                          6900	#1678:  *  \return      kFblOk: Preconditions fulfilled, kFblFailed: Preconditions not fulfilled, neg. response issued.
                          6901	#1679:  *               If all conditions are met, the function returns kFblOk.
                          6902	#1680:  **********************************************************************************************************************/
                          6903	#1681: static tFblResult CheckServicePreconditions(V_MEMROM1 tServiceInfoTable V_MEMROM2 V_MEMROM3* pServiceInfo)
                          6904	#1682: {
                          6905	#1683:    tFblResult result;
                          6906	#1684:    vuint16 serviceCheckResult;
                          6907	#1686:    /* Initialize variables */
                          6908	#1687:    result = kFblOk;
                          6909	#1689:    /* Do service level checks */
                          6910	#1690:    serviceCheckResult = CheckServiceTable(pServiceInfo);
                          6911	#1692:    /* Process suppress positive response bit */
                          6912	#1693:    if ((pServiceInfo->sessionSupport & kDiagServiceIsSubfunction ) == kDiagServiceIsSubfunction)
                          6913	#1694:    {
                          6914	#1695:       SetServiceHasSubfunction();
                          6915	#1696:       /* Sub-function may include suppress positive response bit */
                          6916	#1697:       ChkSuppressPosRspMsgIndication(&DiagBuffer[kDiagFmtSubparam]);
                          6917	#1698:    }
                          6918	#1699:    else
                          6919	#1700:    {
                          6920	#1701:       ClrServiceHasSubfunction();
                          6921	#1702:    }
                          6922	#1704:    /* Process sub-function table */
                          6923	#1705:    if (pServiceInfo->subFctParamIdTableLen != 0)
                          6924	#1706:    {
                          6925	#1707:       /* Remove error bits which are possibly set by service check */
                          6926	#1708:       serviceCheckResult &= FblInvert16Bit(kCheckLenFailure);
                          6927	#1709:       if (serviceCheckResult == kServiceFailure)
                          6928	#1710:       {
                          6929	#1711:          serviceCheckResult = 0u;

                                   Fri Apr 10 08:32:04 2020           Page 125
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
                          6930	#1712:       }
                          6931	#1713:       /* Check sub-service table */
                          6932	#1714:       serviceCheckResult |= CheckSubServiceTable(pServiceInfo->subFctInfo,
                          6933	#1715:                                                  pServiceInfo->subFunctionInfoLen,
                          6934	#1716:                                                  pServiceInfo->subFctParamIdTableLen);
                          6935	#1717:    }
                          6936	#1719:    if (serviceCheckResult != kCheckValid)
                          6937	#1720:    {
                          6938	#1721:       /* Set return value */
                          6939	#1722:       result = kFblFailed;
                          6940	#1724:       /* Evaluate errors and set OEM-specific NRCs */
                          6941	#1725:       if (pServiceInfo->serviceId == kDiagSidRoutineControl)
                          6942	#1726:       {
                          6943	#1727:          /* Special NRC processing for RoutineControl services */
                          6944	#1728:          FblDiagProcessRcNrc(pServiceInfo, serviceCheckResult);
                          6945	#1729:       }
                          6946	#1730:       else if (GetServiceHasSubfunction())
                          6947	#1731:       {
                          6948	#1732:          /* NRC processing for service with sub-function */
                          6949	#1733:          FblDiagProcessSubfunctionNrc(pServiceInfo, serviceCheckResult);
                          6950	#1734:       }
                          6951	#1735:       else if (pServiceInfo->subFctParamIdTableLen != 0)
                          6952	#1736:       {
                          6953	#1737:          /* NRC processing for service with sub-parameter */
                          6954	#1738:          FblDiagProcessSubparamNrc(pServiceInfo, serviceCheckResult);
                          6955	#1739:       }
                          6956	#1740:       else
                          6957	#1741:       {
                          6958	#1742:          /* NRC processing for standard services */
                          6959	#1743:          FblDiagProcessServiceNrc(pServiceInfo, serviceCheckResult);
                          6960	#1744:       }
                          6961	#1745:    }
                          6962	#1747:    return result;
                          6963	#1748: }
                          6964	#1750: /***********************************************************************************************************************
                          6965	#1751:  *  FindServiceInfo
                          6966	#1752:  **********************************************************************************************************************/
                          6967	#1753: /*! \brief       This function searches for the info table that corresponds to the service ID given in the parameter.
                          6968	#1754:  *  \details     Returns pointer to the structure of the service descriptor
                          6969	#1755:  *               for the given service ID. Otherwise returns 0.
                          6970	#1756:  *  \param[in]   serviceId UDS service ID of requested service
                          6971	#1757:  *  \return      Pointer to the service info table
                          6972	#1758:  **********************************************************************************************************************/
                          6973	#1759: static V_MEMROM1 tServiceInfoTable  V_MEMROM2 V_MEMROM3 * FindServiceInfo(vuint8 serviceId)
                          6974	#1760: {
                          6975	#1761:    V_MEMROM1 tServiceInfoTable V_MEMROM2 V_MEMROM3 * serviceInfoTable;
                          6976	#1762:    vsintx i;
                          6977	#1764:    /* Initialize variables */
                          6978	#1765:    serviceInfoTable = (V_MEMROM1 tServiceInfoTable  V_MEMROM2 V_MEMROM3 *) V_NULL;
                          6979	#1767:    /* Search for service information */
                          6980	#1768:    for (i = (vsintx)(kSizeOfServiceTable - 1); i >= 0; i--)
                          6981	#1769:    {
                          6982	#1770:       if (serviceId == kServiceInfoTable[i].serviceId)
                          6983	#1771:       {
                          6984	#1772:          /* Service found */
                          6985	#1773:          serviceInfoTable = &kServiceInfoTable[i];

                                   Fri Apr 10 08:32:04 2020           Page 126
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
                          6986	#1774:          break;
                          6987	#1775:       }
                          6988	#1776:    }
                          6989	#1778:    return serviceInfoTable;
                          6990	#1779: }
                          6991	#1781: /***********************************************************************************************************************
                          6992	#1782:  *  Callback functions from fbl_main
                          6993	#1783:  **********************************************************************************************************************/
                          6994	#1785: /***********************************************************************************************************************
                          6995	#1786:  *  FblDiagInitStartFromAppl
                          6996	#1787:  **********************************************************************************************************************/
                          6997	#1788: /*! \brief       Starts programming session if the Bootloader is called from the application.
                          6998	#1789:  *  \details     This function prepares a programming session request and starts the diagnostic processing
                          6999	#1790:  *               of this request after the real request has been received by the application software.
                          7000	#1791:  **********************************************************************************************************************/
                          7001	#1792: void FblDiagInitStartFromAppl(void)
                          7002	#1793: {
                          7003	#1794:    FblCwSetRxBlock();
                          7004	#1796:    if (FblDiagRxGetPhysBuffer(kDiagRqlSpsFromAppl + 1u) == DiagBuffer)
                          7005	#1797:    {
                          7006	#1798:       /* Diagnostic session control is processed */
                          7007	#1799:       DiagBuffer[kDiagFmtServiceId] = kDiagSidDiagnosticSessionControl;
                          7008	#1801: #if defined( FBL_DIAG_ENABLE_OEM_SPS_REQUEST )
                          7009	#1802:       /* Use OEM function to prepare programming session request */
                          7010	#1803:       FblDiagOemPrepareSpsRequest(DiagBuffer, &DiagDataLength);
                          7011	#1804: #else
                          7012	#1805:       /* Prepare DiagBuffer for DiagnosticSessionControl service */
                          7013	#1806:       DiagBuffer[kDiagFmtSubparam] = kDiagSubProgrammingSession;
                          7014	#1807:       DiagDataLength = kDiagRqlDiagnosticSessionControl;
                          7015	#1808: #endif /* FBL_DIAG_ENABLE_OEM_SPS_REQUEST */
                          7016	#1810: #if defined( FBL_DIAG_ENABLE_SPS_EXTENDED_SESSION )
                          7017	#1811:       /* Set diagnostic session (extended session) */
                          7018	#1812:       SetDiagExtendedSession();  /* PRQA S 3109 */ /* MD_FblDiag_3109 */
                          7019	#1813: #endif /* FBL_DIAG_ENABLE_SPS_EXTENDED_SESSION */
                          7020	#1815:       /* Activate tester present timer */
                          7021	#1816:       ResetTesterTimeout();
                          7022	#1818:       /* Prepare response message address */
                          7023	#1819:       if (FblCwPrepareResponseAddress() == kFblOk)
                          7024	#1820:       {
                          7025	#1821:          /* Indicate prepared buffer */
                          7026	#1822:          FblDiagRxStartIndication();
                          7027	#1823:          FblDiagRxIndication(DiagBuffer, DiagDataLength + 1u);
                          7028	#1825:          /* Dispatch prepared buffer */
                          7029	#1826:          FblDiagStateTask();
                          7030	#1828:          /* Preconditions already checked by application */
                          7031	#1829:          SetPreconditionsChecked();
                          7032	#1830:       }
                          7033	#1831:       else
                          7034	#1832:       {  /* PRQA S 3201 */ /* MD_FblDiag_3201 */
                          7035	#1833:          /* No address information found - cancel response */
                          7036	#1834:          FblDiagConfirmation();
                          7037	#1835:          FblCwResetRxBlock();
                          7038	#1836:       }
                          7039	#1837:    }
                          7040	#1838:    else
                          7041	#1839:    {

                                   Fri Apr 10 08:32:04 2020           Page 127
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
                          7042	#1840:       FblCwResetRxBlock();
                          7043	#1841:    }
                          7044	#1842: } /* PRQA S 6050 */ /* MD_MSR_STCAL */
                          7045	#1844: #if defined( FBL_ENABLE_RESPONSE_AFTER_RESET )
                          7046	#1845: /***********************************************************************************************************************
                          7047	#1846:  *  FblDiagInitStartFromReset
                          7048	#1847:  **********************************************************************************************************************/
                          7049	#1848: /*! \brief       Process a reset request or default session request received before reset.
                          7050	#1849:  *  \details     This function is called from FblInit() when the FBL is started from reset and the application is not
                          7051	#1850:  *               valid or the application starts the FBL with a reprogramming request.
                          7052	#1851:  *  \param[in]   resetRequestType RESET_RESPONSE_SDS_REQUIRED - Response for default session request
                          7053	#1852:  *                                RESET_RESPONSE_ECURESET_REQUIRED - Response for ECU reset request
                          7054	#1853:  *               No response otherwise
                          7055	#1854:  **********************************************************************************************************************/
                          7056	#1855: void FblDiagInitStartFromReset(vuint8 resetRequestType)
                          7057	#1856: {
                          7058	#1857:    FblCwSetRxBlock();
                          7059	#1859:    if (FblDiagRxGetPhysBuffer(kDiagRqlDiagnosticSessionControl + 1u) == DiagBuffer)
                          7060	#1860:    {
                          7061	#1861:       /* Set diagnostic session (default session) */
                          7062	#1862:       SetDiagDefaultSession();   /* PRQA S 3109 */ /* MD_FblDiag_3109 */
                          7063	#1864:       switch (resetRequestType)
                          7064	#1865:       {
                          7065	#1866:          case RESET_RESPONSE_SDS_REQUIRED:
                          7066	#1867:          {
                          7067	#1868:             /* Session control is processed */
                          7068	#1869:             diagServiceCurrent = kDiagSidDiagnosticSessionControl;
                          7069	#1870: # if defined( FBL_DIAG_ENABLE_OEM_SDS_RESPONSE )
                          7070	#1871:             /* Use OEM function to prepare default session request response */
                          7071	#1872:             FblDiagOemPrepareSdsResponse(DiagBuffer, &DiagDataLength);
                          7072	#1873: # else
                          7073	#1874:             /* Prepare DiagBuffer for DiagnosticSessionControl service */
                          7074	#1875:             DiagBuffer[kDiagFmtSubparam] = kDiagSubDefaultSession;
                          7075	#1876:             DiagDataLength = kDiagRqlDiagnosticSessionControl;
                          7076	#1878:             /* Diagnostic session timing */
                          7077	#1879:             DiagBuffer[kDiagFmtSubparam + 1u] = (vuint8)(kDiagSessionTimingP2 >> 8u);
                          7078	#1880:             DiagBuffer[kDiagFmtSubparam + 2u] = (vuint8)(kDiagSessionTimingP2);
                          7079	#1881:             DiagBuffer[kDiagFmtSubparam + 3u] = (vuint8)(kDiagSessionTimingP2Star >> 8u);
                          7080	#1882:             DiagBuffer[kDiagFmtSubparam + 4u] = (vuint8)(kDiagSessionTimingP2Star);
                          7081	#1883: # endif /* FBL_DIAG_ENABLE_OEM_SDS_RESPONSE */
                          7082	#1885:             /* Prepare response message address */
                          7083	#1886:             if (FblCwPrepareResponseAddress() == kFblOk)
                          7084	#1887:             {
                          7085	#1888:                DiagProcessingDone(kDiagRslDiagnosticSessionControl);
                          7086	#1889:                FblDiagResponseProcessor();
                          7087	#1890:             }
                          7088	#1891:             else
                          7089	#1892:             {  /* PRQA S 3201 */ /* MD_FblDiag_3201 */
                          7090	#1893:                /* No address information found - cancel response */
                          7091	#1894:                FblDiagConfirmation();
                          7092	#1895:                FblCwResetRxBlock();
                          7093	#1896:             }
                          7094	#1898:             break;
                          7095	#1899:          }
                          7096	#1900:          case RESET_RESPONSE_ECURESET_REQUIRED:
                          7097	#1901:          {

                                   Fri Apr 10 08:32:04 2020           Page 128
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
                          7098	#1902:             /* Reset request is processed */
                          7099	#1903:             diagServiceCurrent = kDiagSidEcuReset;
                          7100	#1904: # if defined( FBL_DIAG_ENABLE_OEM_RR_RESPONSE )
                          7101	#1905:             /* Use OEM function to prepare default session request response */
                          7102	#1906:             FblDiagOemPrepareRrResponse(DiagBuffer, &DiagDataLength);
                          7103	#1907: # else
                          7104	#1908:             /* Prepare DiagBuffer for EcuReset service */
                          7105	#1909:             DiagBuffer[kDiagFmtSubparam] = kFblDiagSubReset;
                          7106	#1910:             DiagDataLength = kDiagRqlEcuReset;
                          7107	#1911: # endif /* FBL_DIAG_ENABLE_OEM_RR_RESPONSE */
                          7108	#1912:             /* Prepare response message address */
                          7109	#1913:             if (FblCwPrepareResponseAddress() == kFblOk)
                          7110	#1914:             {
                          7111	#1915:                DiagProcessingDone(kDiagRslEcuReset);
                          7112	#1916:                FblDiagResponseProcessor();
                          7113	#1917:             }
                          7114	#1918:             else
                          7115	#1919:             {  /* PRQA S 3201 */ /* MD_FblDiag_3201 */
                          7116	#1920:                /* No address information found - cancel response */
                          7117	#1921:                FblDiagConfirmation();
                          7118	#1922:                FblCwResetRxBlock();
                          7119	#1923:             }
                          7120	#1925:             break;
                          7121	#1926:          }
                          7122	#1927:          default:
                          7123	#1928:          {
                          7124	#1929:             /* No response or parameter not supported */
                          7125	#1930:             FblDiagConfirmation();
                          7126	#1931:             FblCwResetRxBlock();
                          7127	#1932:             break;
                          7128	#1933:          }
                          7129	#1934:       }
                          7130	#1935:    }
                          7131	#1936: }
                          7132	#1937: #endif /* FBL_ENABLE_RESPONSE_AFTER_RESET */
                          7133	#1939: /* Start section to execute code from RAM */
                          7134	#1940: #define FBLDIAG_RAMCODE_START_SEC_CODE
                          7135	#1941: #include "MemMap.h"  /* PRQA S 5087 */ /* MD_MSR_19.1 */
                          7136	#1942: /***********************************************************************************************************************
                          7137	#1943:  *  Callback functions from Communication Wrapper
                          7138	#1944:  **********************************************************************************************************************/
                          7139	#1946: /***********************************************************************************************************************
                          7140	#1947:  *  FblDiagRxStartIndication
                          7141	#1948:  **********************************************************************************************************************/
                          7142	#1949: /*! \brief       Data reception call-back function to start diagnostic service processing.
                          7143	#1950:  *  \details     Indicates start of a frame to diagnostic module. Tester present timeout is stopped and
                          7144	#1951:  *               the diagnostic layer is locked until the service is processed.
                          7145	#1952:  *  \pre         TP reception successful
                          7146	#1953:  **********************************************************************************************************************/
                          7147	#1954: void FblDiagRxStartIndication(void)
                          7148	#1955: {
                          7149	#1956:    /* Halts the S3 timer while receiving a diagnostic message */
                          7150	#1957:    StopTesterTimeout();
                          7151	#1959:    /* Indicate an ongoing service processing */
                          7152	#1960:    SetServiceInProgress();
                          7153	#1962:    DiagClrError();

                                   Fri Apr 10 08:32:04 2020           Page 129
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
                          7154	#1964:    /* Reset handler */
                          7155	#1965:    serviceMainHandler = FblDiagDefaultMainHandler;
                          7156	#1966:    serviceInfo = (V_MEMROM1 tServiceInfoTable  V_MEMROM2 V_MEMROM3 *) V_NULL;
                          7157	#1967: }
                          7158	#1969: /***********************************************************************************************************************
                          7159	#1970:  *  FblDiagRxIndication
                          7160	#1971:  **********************************************************************************************************************/
                          7161	#1972: /*! \brief       Data reception call-back function to start diagnostic service processing.
                          7162	#1973:  *  \details     Valid TesterPresent requests will simply start the S3 timer and will not be processed.
                          7163	#1974:  *  \pre         TP reception successful
                          7164	#1975:  *  \param[in]   pbDiagBuffer Pointer to diagnostic buffer
                          7165	#1976:  *  \param[in]   rxDataLength number of bytes to be received
                          7166	#1977:  **********************************************************************************************************************/
                          7167	#1978: void FblDiagRxIndication(vuint8* pbDiagBuffer, tCwDataLengthType rxDataLength)
                          7168	#1979: {
                          7169	#1980:    /* Initialize diagBuffer and data length */
                          7170	#1981:    DiagBuffer = pbDiagBuffer;
                          7171	#1982:    DiagDataLength = rxDataLength - 1u;
                          7172	#1984:    /* Reset P2 timer (initial timing) */
                          7173	#1985: #if defined( FBL_DIAG_ENABLE_DYNAMIC_P2_HANDLING )
                          7174	#1986:    SetP2Timer(fblDiagTimeP2Max);
                          7175	#1987: #else
                          7176	#1988:    SetP2Timer(kFblDiagTimeP2);
                          7177	#1989: #endif /* FBL_DIAG_ENABLE_DYNAMIC_P2_HANDLING */
                          7178	#1991:    /* Handle functional TesterPresent request here */
                          7179	#1992:    if (    (kDiagSidTesterPresent == DiagBuffer[kDiagFmtServiceId])
                          7180	#1993:         && (kDiagSuppressPosRspMsgIndicationBit == DiagBuffer[kDiagFmtSubparam])
                          7181	#1994:         && (kDiagRqlTesterPresent == DiagDataLength)
                          7182	#1995:         && GetFunctionalRequest()
                          7183	#1996:       )
                          7184	#1997:    {
                          7185	#1998:       /* service processing is not in progress, release the diagBuffer */
                          7186	#1999:       FblDiagConfirmation();
                          7187	#2000:       FblCwResetRxBlock();
                          7188	#2001:    }
                          7189	#2002:    else
                          7190	#2003:    {
                          7191	#2004:       /* Set diagnostic service indication to start service processing */
                          7192	#2005:       diagResponseFlag = kDiagResponseRequested;
                          7193	#2006:       diagServiceCurrent = DiagBuffer[kDiagFmtServiceId];
                          7194	#2008: #if defined( FBL_MEM_ENABLE_PIPELINING )
                          7195	#2009:       if (FblMemTaskIsPending())
                          7196	#2010:       {
                          7197	#2011:          FblMemRxNotification();
                          7198	#2012:       }
                          7199	#2013: #endif
                          7200	#2014:    }
                          7201	#2016: #if defined( FBL_ENABLE_SLEEPMODE )
                          7202	#2017:    /* Request received - reload sleep counter */
                          7203	#2018:    FblSleepCounterReload();
                          7204	#2019: #endif
                          7205	#2020: }
                          7206	#2022: /***********************************************************************************************************************
                          7207	#2023:  *  FblDiagRxGetPhysBuffer
                          7208	#2024:  **********************************************************************************************************************/
                          7209	#2025: /*! \brief       Diagnostic buffer management function for physical requests.

                                   Fri Apr 10 08:32:04 2020           Page 130
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
                          7210	#2026:  *  \param[in]   rxDataLength Number of bytes to be received
                          7211	#2027:  *  \return      Pointer to diagnostic buffer
                          7212	#2028:  **********************************************************************************************************************/
                          7213	#2029: vuint8* FblDiagRxGetPhysBuffer(tCwDataLengthType rxDataLength)
                          7214	#2030: {
                          7215	#2031:    vuint8* result;
                          7216	#2033:    /* Initialize variables */
                          7217	#2034:    result = (vuint8*)V_NULL;
                          7218	#2036:    /* Check request length and if buffer is free */
                          7219	#2037:    if ((rxDataLength > 0u )
                          7220	#2038:         && (FBL_DIAG_BUFFER_LENGTH >= rxDataLength)
                          7221	#2039:         && (!GetDiagBufferLocked())
                          7222	#2040:       )
                          7223	#2041:    {
                          7224	#2042:       /* Initialize state variables */
                          7225	#2043:       ClrFunctionalRequest();
                          7226	#2045:       /* Lock buffer  */
                          7227	#2046:       SetDiagBufferLocked();
                          7228	#2048:       /* Return diagnostic buffer */
                          7229	#2049:       result = DiagBuffer;
                          7230	#2050:    }
                          7231	#2052:    return result;
                          7232	#2053: }
                          7233	#2055: /***********************************************************************************************************************
                          7234	#2056:  *  FblDiagRxGetFuncBuffer
                          7235	#2057:  **********************************************************************************************************************/
                          7236	#2058: /*! \brief       Diagnostic buffer management function for functional requests.
                          7237	#2059:  *  \param[in]   rxDataLength Number of bytes to be received
                          7238	#2060:  *  \return      Pointer to diagnostic buffer
                          7239	#2061:  **********************************************************************************************************************/
                          7240		.align	1
                          7241		.align	1
                          7242	..gh.f.p.3.a.1.r.0.e.32:
                          7243		.type	..gh.f.p.3.a.1.r.0.e.32,@object
                          7244		.size	..gh.f.p.3.a.1.r.0.e.32,0
                          7245		.global	FblDiagRxGetFuncBuffer
                          7246	FblDiagRxGetFuncBuffer:
00000c0e 0080             7247		se_mflr	r0
00000c10 d101             7248		se_stw	r0, 4(sp)
00000c12 182106f8         7249		e_stwu	sp, -8(sp)
                          7250	#	    .bf
                          7251	.LDW47:
                          7252	#2062: vuint8* FblDiagRxGetFuncBuffer(tCwDataLengthType rxDataLength)
                          7253	#2063: {
                          7254	#2064:    /* Process functional request like physical request */
                          7255	#2065:    vuint8* funcBuffer = FblDiagRxGetPhysBuffer(rxDataLength);
00000c16 78000001         7256		se_bl	FblDiagRxGetPhysBuffer
                          7257	#2067:    /* Set functional request indication */
                          7258	#2068:    if (V_NULL != funcBuffer)
                          7259	#line2068
                          7260	..lin.1e9356d..185942de.0_131::
                          7261	.LDWlin131:
00000c1a 2a03             7262		se_cmpi	r3, 0
00000c1c e600             7263		se_beq	.L4657
                          7264	#line2069
                          7265	..lin.1e9356d..185942de.0_132::

                                   Fri Apr 10 08:32:04 2020           Page 131
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
                          7266	.LDWlin132:
00000c1e 70c0e000         7267		e_lis	r6, %hiadj(fblDiagStates)
00000c22 50e60000         7268		e_lwz	r7, %lo(fblDiagStates)(r6)
                          7269	#2069:    {
                          7270	#2070:       SetFunctionalRequest();
00000c26 65c7             7271		se_bseti	r7, 28
00000c28 54e60000         7272		e_stw	r7, %lo(fblDiagStates)(r6)
                          7273	#2071:    }
                          7274	#2073:    return funcBuffer;
                          7275	.L4657:
                          7276	#	    .ef
                          7277	.LDW57:
00000c2c c301             7278		se_lwz	r0, 12(sp)
00000c2e 2071             7279		se_addi	sp, 8
00000c30 0090             7280		se_mtlr	r0
00000c32 0004             7281		se_blr
                          7282		.global	__ghs_eofn_FblDiagRxGetFuncBuffer
                          7283	__ghs_eofn_FblDiagRxGetFuncBuffer:
                          7284		.type	FblDiagRxGetFuncBuffer,@function
                          7285		.size	FblDiagRxGetFuncBuffer,$-FblDiagRxGetFuncBuffer
                          7286		.align	1
                          7287	
                          7288	#function:			FblDiagRxGetFuncBuffer
                          7289	#stack frame size:		8
                          7290	#link area offset:		0
                          7291	#local storage area offset:	8
                          7292	#
                          7293	#funcBuffer	r3	local
                          7294	
                          7295	#rxDataLength	none	param
                          7296	
                          7297		.data
                          7298		.section ".vletext", "vax"
                          7299		.vle
                          7300		.vle
                          7301	
                          7302	#2074: }
                          7303	
                          7304	#2076: /***********************************************************************************************************************
                          7305	#2077:  *  FblDiagRxErrorIndication
                          7306	#2078:  **********************************************************************************************************************/
                          7307	#2079: /*! \brief       Indicates that an error has occurred during reception.
                          7308	#2080:  *  \details     According to ISO-14229, now the S3 timer must be restarted.
                          7309	#2081:  *  \pre         TP must been initialized
                          7310	#2082:  **********************************************************************************************************************/
                          7311		.align	1
                          7312		.align	1
                          7313	..gh.f.p.0.a.1.r.0.e.33:
                          7314		.type	..gh.f.p.0.a.1.r.0.e.33,@object
                          7315		.size	..gh.f.p.0.a.1.r.0.e.33,0
                          7316		.global	FblDiagRxErrorIndication
                          7317	FblDiagRxErrorIndication:
                          7318	#	    .bf
                          7319	.LDW67:
                          7320	#2083: void FblDiagRxErrorIndication(void)
                          7321	#2084: {

                                   Fri Apr 10 08:32:04 2020           Page 132
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
                          7322	#2085:    /* Clear all other flags for service management */
                          7323	#2086:    FblDiagConfirmation();
00000c34 78000000         7324		se_b	FblDiagConfirmation
                          7325	#2087: }
                          7326	#	    .ef
                          7327	.LDW77:
                          7328	..lin.1e9356d..2112c1a4.0_133::
                          7329	.LDWlin133:
                          7330		.global	__ghs_eofn_FblDiagRxErrorIndication
                          7331	__ghs_eofn_FblDiagRxErrorIndication:
                          7332		.type	FblDiagRxErrorIndication,@function
                          7333		.size	FblDiagRxErrorIndication,$-FblDiagRxErrorIndication
                          7334		.align	1
                          7335	
                          7336	#function:			FblDiagRxErrorIndication
                          7337	#stack frame size:		0
                          7338	#
                          7339	
                          7340		.data
                          7341		.section ".vletext", "vax"
                          7342		.vle
                          7343		.vle
                          7344	
                          7345	
                          7346	#2089: /***********************************************************************************************************************
                          7347	#2090:  *  FblDiagTxErrorIndication
                          7348	#2091:  **********************************************************************************************************************/
                          7349	#2092: /*! \brief       Indicates that an error has occurred during transmission.
                          7350	#2093:  *  \details     According to ISO-14229, now the S3 timer must be restarted.
                          7351	#2094:  *  \pre         TP must been initialized
                          7352	#2095:  *  \param[in]   cwMsgType Message type of indication, if it is a RCR-RP or normal message.
                          7353	#2096:  *               The parameter type is defined in the CW-layer.
                          7354	#2097:  **********************************************************************************************************************/
                          7355		.align	1
                          7356		.align	1
                          7357	..gh.f.p.3.a.1.r.0.e.34:
                          7358		.type	..gh.f.p.3.a.1.r.0.e.34,@object
                          7359		.size	..gh.f.p.3.a.1.r.0.e.34,0
                          7360		.global	FblDiagTxErrorIndication
                          7361	FblDiagTxErrorIndication:
                          7362	#	    .bf
                          7363	.LDW87:
                          7364	#2098: void FblDiagTxErrorIndication(vuint8 cwMsgType)
                          7365	#2099: {
                          7366	#2100:    /* Do not reset states for RCR-RP confirmation */
                          7367	#2101:    if (cwMsgType != kFblCwMsgTypeRcrRp)
00000c38 2a33             7368		se_cmpi	r3, 3
00000c3a e600             7369		se_beq	.L4768
                          7370	#2102:    {
                          7371	#2103:       /* Clear all other flags for service management */
                          7372	#2104:       FblDiagConfirmation();
                          7373	#line2104
                          7374	..lin.1e9356d..46c685a6.0_134::
                          7375	.LDWlin134:
00000c3c 78000000         7376		se_b	FblDiagConfirmation
                          7377	.L4768:

                                   Fri Apr 10 08:32:04 2020           Page 133
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
                          7378	#2105:    }
                          7379	#2106: }
                          7380	#	    .ef
                          7381	.LDW97:
                          7382	#line2106
                          7383	..lin.1e9356d..46c685a6.0_135::
                          7384	.LDWlin135:
00000c40 0004             7385		se_blr
                          7386		.global	__ghs_eofn_FblDiagTxErrorIndication
                          7387	__ghs_eofn_FblDiagTxErrorIndication:
                          7388		.type	FblDiagTxErrorIndication,@function
                          7389		.size	FblDiagTxErrorIndication,$-FblDiagTxErrorIndication
                          7390		.align	1
                          7391	
                          7392	#function:			FblDiagTxErrorIndication
                          7393	#stack frame size:		0
                          7394	#
                          7395	
                          7396	#cwMsgType	r3	param
                          7397	
                          7398		.data
                          7399		.section ".vletext", "vax"
                          7400		.vle
                          7401		.vle
                          7402	
                          7403	
                          7404	#2108: /***********************************************************************************************************************
                          7405	#2109:  *  FblDiagTxConfirmation
                          7406	#2110:  **********************************************************************************************************************/
                          7407	#2111: /*! \brief       TP transmission call-back function.
                          7408	#2112:  *  \pre         TP transmission successful
                          7409	#2113:  *  \param[in]   cwMsgType Message type of indication, if it is a RCR-RP or normal message.
                          7410	#2114:  *               The parameter type is defined in the CW-layer.
                          7411	#2115:  **********************************************************************************************************************/
                          7412		.align	1
                          7413		.align	1
                          7414	..gh.f.p.3.a.1.r.0.e.35:
                          7415		.type	..gh.f.p.3.a.1.r.0.e.35,@object
                          7416		.size	..gh.f.p.3.a.1.r.0.e.35,0
                          7417		.global	FblDiagTxConfirmation
                          7418	FblDiagTxConfirmation:
00000c42 0080             7419		se_mflr	r0
00000c44 d101             7420		se_stw	r0, 4(sp)
00000c46 182106f8         7421		e_stwu	sp, -8(sp)
                          7422	#	    .bf
                          7423	.LDW08:
                          7424	#2116: void FblDiagTxConfirmation(vuint8 cwMsgType)
                          7425	#2117: {
                          7426	#2118:    /* Do not reset states for RCR-RP confirmation */
                          7427	#2119:    if (cwMsgType != kFblCwMsgTypeRcrRp)
00000c4a 2a33             7428		se_cmpi	r3, 3
00000c4c e600             7429		se_beq	.L4831
                          7430	#2120:    {
                          7431	#2121:       /* Clear all other flags for service management */
                          7432	#2122:       FblDiagConfirmation();
                          7433	#line2122

                                   Fri Apr 10 08:32:04 2020           Page 134
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
                          7434	..lin.1e9356d..b9bc7883.0_136::
                          7435	.LDWlin136:
00000c4e 78000001         7436		se_bl	FblDiagConfirmation
                          7437	.L4831:
                          7438	#2123:    }
                          7439	#2125:    /* Diag wants to reset FBL after sending an RCR-RP */
                          7440	#2126:    if (GetWaitEcuReset())
                          7441	#line2126
                          7442	..lin.1e9356d..b9bc7883.0_137::
                          7443	.LDWlin137:
00000c52 70e0e000         7444		e_lis	r7, %hiadj(fblDiagStates)
00000c56 1ce70000         7445		e_add16i	r7, r7, %lo(fblDiagStates)
00000c5a c007             7446		se_lwz	r0, 0(r7)
00000c5c 6720             7447		se_btsti	r0, 18
00000c5e e600             7448		se_beq	.L4829
                          7449	#2127:    {
                          7450	#2128:       SetResetMsgConfirmed();
                          7451	#line2128
                          7452	..lin.1e9356d..b9bc7883.0_138::
                          7453	.LDWlin138:
00000c60 6500             7454		se_bseti	r0, 16
00000c62 d007             7455		se_stw	r0, 0(r7)
                          7456	.L4829:
                          7457	#2129:    }
                          7458	#2130: }
                          7459	#	    .ef
                          7460	.LDW18:
00000c64 c301             7461		se_lwz	r0, 12(sp)
00000c66 2071             7462		se_addi	sp, 8
00000c68 0090             7463		se_mtlr	r0
00000c6a 0004             7464		se_blr
                          7465		.global	__ghs_eofn_FblDiagTxConfirmation
                          7466	__ghs_eofn_FblDiagTxConfirmation:
                          7467		.type	FblDiagTxConfirmation,@function
                          7468		.size	FblDiagTxConfirmation,$-FblDiagTxConfirmation
                          7469		.align	1
                          7470	
                          7471	#function:			FblDiagTxConfirmation
                          7472	#stack frame size:		8
                          7473	#link area offset:		0
                          7474	#local storage area offset:	8
                          7475	#
                          7476	
                          7477	#cwMsgType	r3	param
                          7478	
                          7479		.data
                          7480		.section ".vletext", "vax"
                          7481		.vle
                          7482		.vle
                          7483	
                          7484	
                          7485	#2131: /* End section to execute code from RAM */
                          7486	#2132: # define FBLDIAG_RAMCODE_STOP_SEC_CODE
                          7487	#2133: # include "MemMap.h" /* PRQA S 5087 */ /* MD_MSR_19.1 */
                          7488	#2134: /***********************************************************************************************************************
                          7489	#2135:  *  Callback functions from FblLib_Mem

                                   Fri Apr 10 08:32:04 2020           Page 135
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
                          7490	#2136:  **********************************************************************************************************************/
                          7491	#2138: #if defined( FBL_DIAG_ENABLE_CORE_PREWRITE )
                          7492	#2139:  /***********************************************************************************************************************
                          7493	#2140:  *  FblDiagMemPreWrite
                          7494	#2141:  **********************************************************************************************************************/
                          7495	#2142: /*! \brief       Function performs actions before FblLibMem calls the memdriver write function.
                          7496	#2143:  *  \return      kFblOk if PreWrite operations are successful, kFblFailed if PreWrite operations failed
                          7497	#2144:  **********************************************************************************************************************/
                          7498		.align	1
                          7499		.align	1
                          7500	..gh.f.p.0.a.1.r.0.e.36:
                          7501		.type	..gh.f.p.0.a.1.r.0.e.36,@object
                          7502		.size	..gh.f.p.0.a.1.r.0.e.36,0
                          7503		.global	FblDiagMemPreWrite
                          7504	FblDiagMemPreWrite:
                          7505	#	    .bf
                          7506	.LDW28:
                          7507	#2145: tFblResult FblDiagMemPreWrite(void)
                          7508	#2146: {
                          7509	#2147:    FblCwSetOfflineMode();
                          7510	#2149:    return kFblOk;
00000c6c 4803             7511		se_li	r3, 0
                          7512	#	    .ef
                          7513	.LDW38:
00000c6e 0004             7514		se_blr
                          7515		.global	__ghs_eofn_FblDiagMemPreWrite
                          7516	__ghs_eofn_FblDiagMemPreWrite:
                          7517		.type	FblDiagMemPreWrite,@function
                          7518		.size	FblDiagMemPreWrite,$-FblDiagMemPreWrite
                          7519		.align	1
                          7520	
                          7521	#function:			FblDiagMemPreWrite
                          7522	#stack frame size:		0
                          7523	#
                          7524	
                          7525		.data
                          7526		.section ".vletext", "vax"
                          7527		.vle
                          7528		.vle
                          7529	
                          7530	#2150: }
                          7531	
                          7532	#2151: #endif /* FBL_DIAG_ENABLE_CORE_PREWRITE  */
                          7533	#2153: #if defined( FBL_DIAG_ENABLE_CORE_POSTWRITE )
                          7534	#2154: /***********************************************************************************************************************
                          7535	#2155:  *  FblDiagMemPostWrite
                          7536	#2156:  **********************************************************************************************************************/
                          7537	#2157: /*! \brief       Checks if message is the platform message or not
                          7538	#2158:  *  \return      kFblOk if post-write operations are successful, kFblFailed if post-write operations failed
                          7539	#2159:  **********************************************************************************************************************/
                          7540		.align	1
                          7541		.align	1
                          7542	..gh.f.p.0.a.1.r.0.e.37:
                          7543		.type	..gh.f.p.0.a.1.r.0.e.37,@object
                          7544		.size	..gh.f.p.0.a.1.r.0.e.37,0
                          7545		.global	FblDiagMemPostWrite

                                   Fri Apr 10 08:32:04 2020           Page 136
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
                          7546	FblDiagMemPostWrite:
                          7547	#	    .bf
                          7548	.LDW48:
                          7549	#2160: tFblResult FblDiagMemPostWrite(void)
                          7550	#2161: {
                          7551	#2162:    FblCwSetOnlineMode();
                          7552	#2164:    return kFblOk;
00000c70 4803             7553		se_li	r3, 0
                          7554	#	    .ef
                          7555	.LDW58:
00000c72 0004             7556		se_blr
                          7557		.global	__ghs_eofn_FblDiagMemPostWrite
                          7558	__ghs_eofn_FblDiagMemPostWrite:
                          7559		.type	FblDiagMemPostWrite,@function
                          7560		.size	FblDiagMemPostWrite,$-FblDiagMemPostWrite
                          7561		.align	1
                          7562	
                          7563	#function:			FblDiagMemPostWrite
                          7564	#stack frame size:		0
                          7565	#
                          7566	
                          7567		.data
                          7568		.section ".vletext", "vax"
                          7569		.vle
                          7570		.vle
                          7571	
                          7572	#2165: }
                          7573		.align	1
                          7574	#FblLogicalBlockTable	FblLogicalBlockTable	import
                          7575	#P2Timer	P2Timer	import
                          7576	#FlashBlock	FlashBlock	import
                          7577	#kNrOfFlashBlock	kNrOfFlashBlock	import
                          7578	#memDrvLst	memDrvLst	import
                          7579	#fblMainStates	fblMainStates	import
                          7580	#kServiceMainHandlerFctTable	kServiceMainHandlerFctTable	import
                          7581	#kServiceInfoTable	kServiceInfoTable	import
                          7582	#kSizeOfServiceTable	kSizeOfServiceTable	import
                          7583	#kSizeOfMainHandlerTable	kSizeOfMainHandlerTable	import
                          7584	#diagPostParam	diagPostParam	static
                          7585	#rcrrpBuffer	rcrrpBuffer	static
                          7586	#diagResLen	diagResLen	static
                          7587	#serviceMainHandler	serviceMainHandler	static
                          7588	#currentServiceSessionSupport	currentServiceSessionSupport	static
                          7589	#cachedSegment	cachedSegment	static
                          7590	#cachedBlock	cachedBlock	static
                          7591	#nextValidSegment	nextValidSegment	static
                          7592	
                          7593		.data
                          7594		.section ".bss","awb"
                          7595		.align	2
                          7596		.global	errStatDescriptor
0000001c                  7597	errStatDescriptor:	.space	24
                          7598		.type	errStatDescriptor,@object
                          7599		.size	errStatDescriptor,24
                          7600		.align	2
                          7601		.global	DiagBuffer

                                   Fri Apr 10 08:32:04 2020           Page 137
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
00000034                  7602	DiagBuffer:	.space	4
                          7603		.type	DiagBuffer,@object
                          7604		.size	DiagBuffer,4
                          7605		.align	2
                          7606		.global	fblDiagStates
00000038                  7607	fblDiagStates:	.space	4
                          7608		.type	fblDiagStates,@object
                          7609		.size	fblDiagStates,4
                          7610		.align	2
                          7611		.global	serviceInfo
0000003c                  7612	serviceInfo:	.space	4
                          7613		.type	serviceInfo,@object
                          7614		.size	serviceInfo,4
                          7615		.align	2
                          7616		.global	sleepCounter
00000040                  7617	sleepCounter:	.space	4
                          7618		.type	sleepCounter,@object
                          7619		.size	sleepCounter,4
                          7620		.align	2
                          7621		.global	secSecurityAccessDelay
00000044                  7622	secSecurityAccessDelay:	.space	4
                          7623		.type	secSecurityAccessDelay,@object
                          7624		.size	secSecurityAccessDelay,4
                          7625		.align	1
                          7626		.global	memSegment
00000048                  7627	memSegment:	.space	2
                          7628		.type	memSegment,@object
                          7629		.size	memSegment,2
                          7630		.align	1
                          7631		.global	DiagDataLength
0000004a                  7632	DiagDataLength:	.space	2
                          7633		.type	DiagDataLength,@object
                          7634		.size	DiagDataLength,2
                          7635		.align	1
                          7636		.global	testerPresentTimeout
0000004c                  7637	testerPresentTimeout:	.space	2
                          7638		.type	testerPresentTimeout,@object
                          7639		.size	testerPresentTimeout,2
                          7640		.align	1
                          7641		.global	errStatErrorCode
0000004e                  7642	errStatErrorCode:	.space	2
                          7643		.type	errStatErrorCode,@object
                          7644		.size	errStatErrorCode,2
                          7645		.align	1
                          7646		.global	errStatFblStates
00000050                  7647	errStatFblStates:	.space	2
                          7648		.type	errStatFblStates,@object
                          7649		.size	errStatFblStates,2
                          7650		.align	1
                          7651		.global	errStatFlashDrvErrorCode
00000052                  7652	errStatFlashDrvErrorCode:	.space	2
                          7653		.type	errStatFlashDrvErrorCode,@object
                          7654		.size	errStatFlashDrvErrorCode,2
                          7655		.align	1
                          7656		.global	ecuResetTimeout
00000054                  7657	ecuResetTimeout:	.space	2

                                   Fri Apr 10 08:32:04 2020           Page 138
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
                          7658		.type	ecuResetTimeout,@object
                          7659		.size	ecuResetTimeout,2
                          7660		.global	diagServiceCurrent
00000056                  7661	diagServiceCurrent:	.space	1
                          7662		.type	diagServiceCurrent,@object
                          7663		.size	diagServiceCurrent,1
                          7664		.global	subParTabIdx
00000057                  7665	subParTabIdx:	.space	1
                          7666		.type	subParTabIdx,@object
                          7667		.size	subParTabIdx,1
                          7668		.global	errStatLastServiceId
00000058                  7669	errStatLastServiceId:	.space	1
                          7670		.type	errStatLastServiceId,@object
                          7671		.size	errStatLastServiceId,1
                          7672		.global	errStatFlashDrvVersion
00000059                  7673	errStatFlashDrvVersion:	.space	3
                          7674		.type	errStatFlashDrvVersion,@object
                          7675		.size	errStatFlashDrvVersion,3
                          7676		.global	diagResponseFlag
0000005c                  7677	diagResponseFlag:	.space	1
                          7678		.type	diagResponseFlag,@object
                          7679		.size	diagResponseFlag,1
                          7680		.global	diagErrorCode
0000005d                  7681	diagErrorCode:	.space	1
                          7682		.type	diagErrorCode,@object
                          7683		.size	diagErrorCode,1
                          7684		.global	segmentCount
0000005e                  7685	segmentCount:	.space	1
                          7686		.type	segmentCount,@object
                          7687		.size	segmentCount,1
                          7688		.data
                          7689		.note ".PPC.EMB.apuinfo",""
00000000 00000008         7690		.long	0x00000008
00000004 00000004         7691		.long	4
00000008 00000002         7692		.long	0x00000002
                          7693		# "APUinfo\000"
0000000c 41505569         7694		.byte	65,80,85,105
00000010 6e666f00         7695		.byte	110,102,111,0
00000014 01040001         7696		.long	0x01040001
                          7697		.ghsnote version,20
                          7698		.ghsnote tools,3
                          7699		.ghsnote options,644
                          7700		.section ".vletext", "vax"
                          7701		.vle
                          7702		.vle
                          7703		.align	1
                          7704	..eof.C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_diag_core...43.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl..5E8FB074..0::
                          7705		.section	.debug_info
                          7706	.Ldw_begin:
00000000 00002127         7707		.long	.Ldw_end-.Ldw_begin-4
00000004 0002             7708		.byte	0,2
00000006 00000000         7709		.long	.Ldw_abbr_begin
0000000a 04               7710		.byte	4
                          7711		.section	.debug_abbrev
                          7712	.Ldw_abbr_begin:
                          7713		.section	.debug_info

                                   Fri Apr 10 08:32:04 2020           Page 139
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
0000000b 01               7714		.byte	1
0000000c 00000000         7715		.long	..bof.C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_diag_core...43.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl..5E8FB074..0
00000010 00000000         7716		.long	..eof.C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_diag_core...43.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl..5E8FB074..0
00000014 2e2e2f2e2e2f2e2e 7717		.strz	"../../../BSW/Fbl/fbl_diag_core.c"
0000001c 2f4253572f46626c
00000024 2f66626c5f646961
0000002c 675f636f72652e63
00000034 00              
00000035 433a5c566563746f 7718		.strz	"C:\\Vector\\CBD1800772_D00_Mpc57xx\\Demo\\DemoFbl\\Appl"
0000003d 725c434244313830
00000045 303737325f443030
0000004d 5f4d706335377878
00000055 5c44656d6f5c4465
0000005d 6d6f46626c5c4170
00000065 706c00          
00000068 4748532043203230 7719		.strz	"GHS C 2017.5.4 [dual]"
00000070 31372e352e34205b
00000078 6475616c5d00    
0000007e 0001             7720		.byte	0,1
00000080 00000000         7721		.long	.Ldw_line_begin
00000084 00000000         7722		.long	.Ldw_macinfo_begin
00000088 00               7723		.byte	0
                          7724	
                          7725		.section	.debug_abbrev
00000000 01               7726		.byte	1
00000001 11               7727		.byte	17
00000002 01               7728		.byte	1
00000003 1101             7729		.byte	17,1
00000005 1201             7730		.byte	18,1
00000007 0308             7731		.byte	3,8
00000009 1b08             7732		.byte	27,8
0000000b 2508             7733		.byte	37,8
0000000d 1305             7734		.byte	19,5
0000000f 1006             7735		.byte	16,6
00000011 4306             7736		.byte	67,6
00000013 420b             7737		.byte	66,11
00000015 0000             7738		.byte	0,0
                          7739	
                          7740		.section	.debug_line
                          7741	.Ldw_line_begin:
00000000 00001101         7742		.long	.Ldw_line_end-.Ldw_line_begin-4
00000004 0002             7743		.byte	0,2
00000006 0000061a         7744		.long	.Ldw_lpro_end-.Ldw_lpro_begin
                          7745	.Ldw_lpro_begin:
0000000a 01               7746		.byte	1
0000000b 00               7747		.byte	0
0000000c 00               7748		.byte	0
0000000d 04               7749		.byte	4
0000000e 0a               7750		.byte	10
0000000f 000101           7751		.byte	0,1,1
00000012 010100           7752		.byte	1,1,0
00000015 000001           7753		.byte	0,0,1
00000018 00               7754		.byte	0
00000019 2e2e2f2e2e2f2e2e 7755		.strz	"../../../BSW/Fbl/fbl_diag_core.c"
00000021 2f4253572f46626c
00000029 2f66626c5f646961
00000031 675f636f72652e63
00000039 00              
0000003a 000000           7756		.byte	0,0,0
0000003d 696e636c7564655c 7757		.strz	"include\\fbl_inc.h"
00000045 66626c5f696e632e
0000004d 6800            
0000004f 000000           7758		.byte	0,0,0
00000052 2e2e2f2e2e2f2e2e 7759		.strz	"../../../bsw/fbl/v_ver.h"
0000005a 2f6273772f66626c
00000062 2f765f7665722e68
0000006a 00              
0000006b 000000           7760		.byte	0,0,0
0000006e 67656e646174615c 7761		.strz	"gendata\\v_cfg.h"
00000076 765f6366672e6800
0000007e 000000           7762		.byte	0,0,0
00000081 67656e646174615c 7763		.strz	"gendata\\v_inc.h"
00000089 765f696e632e6800
00000091 000000           7764		.byte	0,0,0
00000094 67656e646174615c 7765		.strz	"gendata\\v_par.h"
0000009c 765f7061722e6800
000000a4 000000           7766		.byte	0,0,0
000000a7 2e2e2f2e2e2f2e2e 7767		.strz	"../../../bsw/_common/v_def.h"
000000af 2f6273772f5f636f
000000b7 6d6d6f6e2f765f64
000000bf 65662e6800      
000000c4 000000           7768		.byte	0,0,0
000000c7 2e2e2f2e2e2f2e2e 7769		.strz	"../../../bsw/secmod/SecM.h"
000000cf 2f6273772f736563
000000d7 6d6f642f5365634d
000000df 2e6800          

                                   Fri Apr 10 08:32:04 2020           Page 140
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
000000e2 000000           7770		.byte	0,0,0
000000e5 2e2e2f2e2e2f2e2e 7771		.strz	"../../../bsw/secmod/Sec.h"
000000ed 2f6273772f736563
000000f5 6d6f642f5365632e
000000fd 6800            
000000ff 000000           7772		.byte	0,0,0
00000102 2e2e2f2e2e2f2e2e 7773		.strz	"../../../bsw/secmod/Sec_Inc.h"
0000010a 2f6273772f736563
00000112 6d6f642f5365635f
0000011a 496e632e6800    
00000120 000000           7774		.byte	0,0,0
00000123 67656e646174615c 7775		.strz	"gendata\\SecM_cfg.h"
0000012b 5365634d5f636667
00000133 2e6800          
00000136 000000           7776		.byte	0,0,0
00000139 2e2e2f2e2e2f2e2e 7777		.strz	"../../../bsw/secmod/Sec_Types.h"
00000141 2f6273772f736563
00000149 6d6f642f5365635f
00000151 54797065732e6800
00000159 000000           7778		.byte	0,0,0
0000015c 67656e646174615c 7779		.strz	"gendata\\SecMPar.h"
00000164 5365634d5061722e
0000016c 6800            
0000016e 000000           7780		.byte	0,0,0
00000171 2e2e2f2e2e2f2e2e 7781		.strz	"../../../bsw/secmod/SecM_inc.h"
00000179 2f6273772f736563
00000181 6d6f642f5365634d
00000189 5f696e632e6800  
00000190 000000           7782		.byte	0,0,0
00000193 2e2e2f2e2e2f2e2e 7783		.strz	"../../../bsw/secmod/Sec_Crc.h"
0000019b 2f6273772f736563
000001a3 6d6f642f5365635f
000001ab 4372632e6800    
000001b1 000000           7784		.byte	0,0,0
000001b4 2e2e2f2e2e2f2e2e 7785		.strz	"../../../bsw/secmod/Sec_SeedKey.h"
000001bc 2f6273772f736563
000001c4 6d6f642f5365635f
000001cc 536565644b65792e
000001d4 6800            
000001d6 000000           7786		.byte	0,0,0
000001d9 696e636c7564655c 7787		.strz	"include\\Sec_SeedKey_Cfg.h"
000001e1 5365635f53656564
000001e9 4b65795f4366672e
000001f1 6800            
000001f3 000000           7788		.byte	0,0,0
000001f6 2e2e2f2e2e2f2e2e 7789		.strz	"../../../bsw/secmod/Sec_Verification.h"
000001fe 2f6273772f736563
00000206 6d6f642f5365635f
0000020e 5665726966696361
00000216 74696f6e2e6800  
0000021d 000000           7790		.byte	0,0,0
00000220 2e2e2f2e2e2f2e2e 7791		.strz	"../../../bsw/fbl/fbl_def.h"
00000228 2f6273772f66626c
00000230 2f66626c5f646566
00000238 2e6800          
0000023b 000000           7792		.byte	0,0,0
0000023e 67656e646174615c 7793		.strz	"gendata\\fbl_cfg.h"
00000246 66626c5f6366672e
0000024e 6800            
00000250 000000           7794		.byte	0,0,0
00000253 2e2e2f2e2e2f2e2e 7795		.strz	"../../../bsw/fbl/fbl_assert.h"
0000025b 2f6273772f66626c
00000263 2f66626c5f617373
0000026b 6572742e6800    
00000271 000000           7796		.byte	0,0,0
00000274 2e2e2f2e2e2f2e2e 7797		.strz	"../../../bsw/fbl/fbl_assert_oem.h"
0000027c 2f6273772f66626c
00000284 2f66626c5f617373
0000028c 6572745f6f656d2e
00000294 6800            
00000296 000000           7798		.byte	0,0,0
00000299 67656e646174615c 7799		.strz	"gendata\\fbl_mtab.h"
000002a1 66626c5f6d746162
000002a9 2e6800          
000002ac 000000           7800		.byte	0,0,0
000002af 696e636c7564655c 7801		.strz	"include\\MemMap.h"
000002b7 4d656d4d61702e68
000002bf 00              
000002c0 000000           7802		.byte	0,0,0
000002c3 2e2e2f2e2e2f2e2e 7803		.strz	"../../../bsw/flash/flashdrv.h"
000002cb 2f6273772f666c61
000002d3 73682f666c617368
000002db 6472762e6800    
000002e1 000000           7804		.byte	0,0,0
000002e4 2e2e2f2e2e2f2e2e 7805		.strz	"../../../bsw/flash_xd1/flashdrv_xd1.h"
000002ec 2f6273772f666c61
000002f4 73685f7864312f66
000002fc 6c6173686472765f
00000304 7864312e6800    
0000030a 000000           7806		.byte	0,0,0
0000030d 2e2e2f2e2e2f2e2e 7807		.strz	"../../../bsw/fbl/fbl_wd.h"
00000315 2f6273772f66626c
0000031d 2f66626c5f77642e
00000325 6800            
00000327 000000           7808		.byte	0,0,0
0000032a 2e2e2f2e2e2f2e2e 7809		.strz	"../../../bsw/fbl/iotypes.h"
00000332 2f6273772f66626c
0000033a 2f696f7479706573
00000342 2e6800          
00000345 000000           7810		.byte	0,0,0
00000348 2e2e2f2e2e2f2e2e 7811		.strz	"../../../bsw/fbl/fbl_mio.h"
00000350 2f6273772f66626c
00000358 2f66626c5f6d696f
00000360 2e6800          
00000363 000000           7812		.byte	0,0,0
00000366 2e2e2f2e2e2f2e2e 7813		.strz	"../../../bsw/fbl/fbl_flio.h"
0000036e 2f6273772f66626c
00000376 2f66626c5f666c69
0000037e 6f2e6800        
00000382 000000           7814		.byte	0,0,0
00000385 2e2e2f2e2e2f2e2e 7815		.strz	"../../../bsw/fbl/fbl_flio_xd1.h"
0000038d 2f6273772f66626c
00000395 2f66626c5f666c69
0000039d 6f5f7864312e6800
000003a5 000000           7816		.byte	0,0,0
000003a8 2e2e2f2e2e2f2e2e 7817		.strz	"../../../bsw/eep/EepInc.h"
000003b0 2f6273772f656570
000003b8 2f456570496e632e
000003c0 6800            
000003c2 000000           7818		.byte	0,0,0
000003c5 2e2e2f2e2e2f2e2e 7819		.strz	"../../../bsw/eep/EepIO.h"
000003cd 2f6273772f656570
000003d5 2f456570494f2e68
000003dd 00              
000003de 000000           7820		.byte	0,0,0
000003e1 2e2e2f2e2e2f2e2e 7821		.strz	"../../../bsw/fbl/applvect.h"
000003e9 2f6273772f66626c
000003f1 2f6170706c766563
000003f9 742e6800        
000003fd 000000           7822		.byte	0,0,0
00000400 2e2e2f2e2e2f2e2e 7823		.strz	"../../../bsw/fbl/fbl_cw.h"
00000408 2f6273772f66626c
00000410 2f66626c5f63772e
00000418 6800            
0000041a 000000           7824		.byte	0,0,0
0000041d 67656e646174615c 7825		.strz	"gendata\\fbl_cw_cfg.h"
00000425 66626c5f63775f63
0000042d 66672e6800      

                                   Fri Apr 10 08:32:04 2020           Page 141
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
00000432 000000           7826		.byte	0,0,0
00000435 2e2e2f2e2e2f2e2e 7827		.strz	"../../../bsw/fbl/fbl_hw.h"
0000043d 2f6273772f66626c
00000445 2f66626c5f68772e
0000044d 6800            
0000044f 000000           7828		.byte	0,0,0
00000452 2e2e2f2e2e2f2e2e 7829		.strz	"../../../bsw/fbl/fbl_sfr.h"
0000045a 2f6273772f66626c
00000462 2f66626c5f736672
0000046a 2e6800          
0000046d 000000           7830		.byte	0,0,0
00000470 67656e646174615c 7831		.strz	"gendata\\ftp_cfg.h"
00000478 6674705f6366672e
00000480 6800            
00000482 000000           7832		.byte	0,0,0
00000485 2e2e2f2e2e2f2e2e 7833		.strz	"../../../bsw/fbl/fbl_tp.h"
0000048d 2f6273772f66626c
00000495 2f66626c5f74702e
0000049d 6800            
0000049f 000000           7834		.byte	0,0,0
000004a2 696e636c7564655c 7835		.strz	"include\\WrapNv_inc.h"
000004aa 577261704e765f69
000004b2 6e632e6800      
000004b7 000000           7836		.byte	0,0,0
000004ba 2e2e2f2e2e2f2e2e 7837		.strz	"../../../bsw/wrapnv/WrapNv.h"
000004c2 2f6273772f777261
000004ca 706e762f57726170
000004d2 4e762e6800      
000004d7 000000           7838		.byte	0,0,0
000004da 67656e646174615c 7839		.strz	"gendata\\WrapNv_cfg.h"
000004e2 577261704e765f63
000004ea 66672e6800      
000004ef 000000           7840		.byte	0,0,0
000004f2 67656e646174615c 7841		.strz	"gendata\\fbl_apfb.h"
000004fa 66626c5f61706662
00000502 2e6800          
00000505 000000           7842		.byte	0,0,0
00000508 2e2e2f2e2e2f2e2e 7843		.strz	"../../../bsw/fbl/fbl_diag.h"
00000510 2f6273772f66626c
00000518 2f66626c5f646961
00000520 672e6800        
00000524 000000           7844		.byte	0,0,0
00000527 2e2e2f2e2e2f2e2e 7845		.strz	"../../../bsw/fbl/fbl_diag_oem.h"
0000052f 2f6273772f66626c
00000537 2f66626c5f646961
0000053f 675f6f656d2e6800
00000547 000000           7846		.byte	0,0,0
0000054a 2e2e2f2e2e2f2e2e 7847		.strz	"../../../bsw/fbl/fbl_mem.h"
00000552 2f6273772f66626c
0000055a 2f66626c5f6d656d
00000562 2e6800          
00000565 000000           7848		.byte	0,0,0
00000568 2e2e2f2e2e2f2e2e 7849		.strz	"../../../bsw/fbl/fbl_mem_oem.h"
00000570 2f6273772f66626c
00000578 2f66626c5f6d656d
00000580 5f6f656d2e6800  
00000587 000000           7850		.byte	0,0,0
0000058a 696e636c7564655c 7851		.strz	"include\\fbl_ap.h"
00000592 66626c5f61702e68
0000059a 00              
0000059b 000000           7852		.byte	0,0,0
0000059e 696e636c7564655c 7853		.strz	"include\\fbl_apwd.h"
000005a6 66626c5f61707764
000005ae 2e6800          
000005b1 000000           7854		.byte	0,0,0
000005b4 696e636c7564655c 7855		.strz	"include\\fbl_apdi.h"
000005bc 66626c5f61706469
000005c4 2e6800          
000005c7 000000           7856		.byte	0,0,0
000005ca 696e636c7564655c 7857		.strz	"include\\fbl_apnv.h"
000005d2 66626c5f61706e76
000005da 2e6800          
000005dd 000000           7858		.byte	0,0,0
000005e0 2e2e2f2e2e2f2e2e 7859		.strz	"../../../bsw/fbl/fbl_main.h"
000005e8 2f6273772f66626c
000005f0 2f66626c5f6d6169
000005f8 6e2e6800        
000005fc 000000           7860		.byte	0,0,0
000005ff 2e2e2f2e2e2f2e2e 7861		.strz	"../../../BSW/Fbl/fbl_diag_core.h"
00000607 2f4253572f46626c
0000060f 2f66626c5f646961
00000617 675f636f72652e68
0000061f 00              
00000620 000000           7862		.byte	0,0,0
00000623 00               7863		.byte	0
                          7864	.Ldw_lpro_end:
                          7865		.section	.debug_macinfo
                          7866	.Ldw_macinfo_begin:
                          7867		.section	.debug_frame
                          7868	.LDW_5cc4c70:
00000000 0000008c         7869		.long	.LDW_unq_2-.LDW_unq_1
                          7870	.LDW_unq_1:
00000004 ffffffff         7871		.byte	255,255,255,255
00000008 01               7872		.byte	1
00000009 00               7873		.byte	0
0000000a 01               7874		.byte	1
0000000b 01               7875		.byte	1
0000000c 6c               7876		.byte	108
0000000d 0c               7877		.byte	12
0000000e 01               7878		.byte	1
0000000f 00               7879		.byte	0
00000010 07               7880		.byte	7
00000011 00               7881		.byte	0

                                   Fri Apr 10 08:32:04 2020           Page 142
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
00000012 07               7882		.byte	7
00000013 01               7883		.byte	1
00000014 07               7884		.byte	7
00000015 02               7885		.byte	2
00000016 07               7886		.byte	7
00000017 03               7887		.byte	3
00000018 07               7888		.byte	7
00000019 04               7889		.byte	4
0000001a 07               7890		.byte	7
0000001b 05               7891		.byte	5
0000001c 07               7892		.byte	7
0000001d 06               7893		.byte	6
0000001e 07               7894		.byte	7
0000001f 07               7895		.byte	7
00000020 07               7896		.byte	7
00000021 08               7897		.byte	8
00000022 07               7898		.byte	7
00000023 09               7899		.byte	9
00000024 07               7900		.byte	7
00000025 0a               7901		.byte	10
00000026 07               7902		.byte	7
00000027 0b               7903		.byte	11
00000028 07               7904		.byte	7
00000029 0c               7905		.byte	12
0000002a 07               7906		.byte	7
0000002b 0d               7907		.byte	13
0000002c 07               7908		.byte	7
0000002d 0e               7909		.byte	14
0000002e 07               7910		.byte	7
0000002f 0f               7911		.byte	15
00000030 07               7912		.byte	7
00000031 10               7913		.byte	16
00000032 07               7914		.byte	7
00000033 11               7915		.byte	17
00000034 07               7916		.byte	7
00000035 12               7917		.byte	18
00000036 07               7918		.byte	7
00000037 13               7919		.byte	19
00000038 07               7920		.byte	7
00000039 14               7921		.byte	20
0000003a 07               7922		.byte	7
0000003b 15               7923		.byte	21
0000003c 07               7924		.byte	7
0000003d 16               7925		.byte	22
0000003e 07               7926		.byte	7
0000003f 17               7927		.byte	23
00000040 07               7928		.byte	7
00000041 18               7929		.byte	24
00000042 07               7930		.byte	7
00000043 19               7931		.byte	25
00000044 07               7932		.byte	7
00000045 1a               7933		.byte	26
00000046 07               7934		.byte	7
00000047 1b               7935		.byte	27
00000048 07               7936		.byte	7
00000049 1c               7937		.byte	28

                                   Fri Apr 10 08:32:04 2020           Page 143
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
0000004a 07               7938		.byte	7
0000004b 1d               7939		.byte	29
0000004c 07               7940		.byte	7
0000004d 1e               7941		.byte	30
0000004e 07               7942		.byte	7
0000004f 1f               7943		.byte	31
00000050 07               7944		.byte	7
00000051 20               7945		.byte	32
00000052 07               7946		.byte	7
00000053 21               7947		.byte	33
00000054 07               7948		.byte	7
00000055 22               7949		.byte	34
00000056 07               7950		.byte	7
00000057 23               7951		.byte	35
00000058 07               7952		.byte	7
00000059 24               7953		.byte	36
0000005a 07               7954		.byte	7
0000005b 25               7955		.byte	37
0000005c 07               7956		.byte	7
0000005d 26               7957		.byte	38
0000005e 07               7958		.byte	7
0000005f 27               7959		.byte	39
00000060 07               7960		.byte	7
00000061 28               7961		.byte	40
00000062 07               7962		.byte	7
00000063 29               7963		.byte	41
00000064 07               7964		.byte	7
00000065 2a               7965		.byte	42
00000066 07               7966		.byte	7
00000067 2b               7967		.byte	43
00000068 07               7968		.byte	7
00000069 2c               7969		.byte	44
0000006a 07               7970		.byte	7
0000006b 2d               7971		.byte	45
0000006c 07               7972		.byte	7
0000006d 2e               7973		.byte	46
0000006e 07               7974		.byte	7
0000006f 2f               7975		.byte	47
00000070 07               7976		.byte	7
00000071 30               7977		.byte	48
00000072 07               7978		.byte	7
00000073 31               7979		.byte	49
00000074 07               7980		.byte	7
00000075 32               7981		.byte	50
00000076 07               7982		.byte	7
00000077 33               7983		.byte	51
00000078 07               7984		.byte	7
00000079 34               7985		.byte	52
0000007a 07               7986		.byte	7
0000007b 35               7987		.byte	53
0000007c 07               7988		.byte	7
0000007d 36               7989		.byte	54
0000007e 07               7990		.byte	7
0000007f 37               7991		.byte	55
00000080 07               7992		.byte	7
00000081 38               7993		.byte	56

                                   Fri Apr 10 08:32:04 2020           Page 144
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
00000082 07               7994		.byte	7
00000083 39               7995		.byte	57
00000084 07               7996		.byte	7
00000085 3a               7997		.byte	58
00000086 07               7998		.byte	7
00000087 3b               7999		.byte	59
00000088 07               8000		.byte	7
00000089 3c               8001		.byte	60
0000008a 07               8002		.byte	7
0000008b 3d               8003		.byte	61
0000008c 07               8004		.byte	7
0000008d 3e               8005		.byte	62
0000008e 07               8006		.byte	7
0000008f 3f               8007		.byte	63
                          8008	.LDW_unq_2:
                          8009		.section	.debug_info
                          8010	.LDW_4a0cae0:
00000089 27               8011		.byte	39
0000008a 756e7369676e6564 8012		.strz	"unsigned long"
00000092 206c6f6e6700    
00000098 07               8013		.byte	7
00000099 04               8014		.byte	4
                          8015	
                          8016		.section	.debug_abbrev
00000017 27               8017		.byte	39
00000018 24               8018		.byte	36
00000019 00               8019		.byte	0
0000001a 0308             8020		.byte	3,8
0000001c 3e0b             8021		.byte	62,11
0000001e 0b0b             8022		.byte	11,11
00000020 0000             8023		.byte	0,0
                          8024	
                          8025		.section	.debug_info
                          8026	.LDW_4a0c840:
0000009a 27               8027		.byte	39
0000009b 756e7369676e6564 8028		.strz	"unsigned char"
000000a3 206368617200    
000000a9 08               8029		.byte	8
000000aa 01               8030		.byte	1
                          8031	
                          8032	.LDW_4a0c648:
000000ab 31               8033		.byte	49
000000ac 00000000         8034		.long	.LDW_4a4b818
                          8035	
                          8036		.section	.debug_abbrev
00000022 31               8037		.byte	49
00000023 0f               8038		.byte	15
00000024 00               8039		.byte	0
00000025 4910             8040		.byte	73,16
00000027 0000             8041		.byte	0,0
                          8042	
                          8043		.section	.debug_info
                          8044	.LDW_4a0c920:
000000b0 46               8045		.byte	70
000000b1 00000000         8046		.long	.LDW_5cc9ed0
000000b5 01               8047		.byte	1
                          8048	
                          8049		.section	.debug_abbrev

                                   Fri Apr 10 08:32:04 2020           Page 145
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
00000029 46               8050		.byte	70
0000002a 15               8051		.byte	21
0000002b 01               8052		.byte	1
0000002c 4910             8053		.byte	73,16
0000002e 270c             8054		.byte	39,12
00000030 0000             8055		.byte	0,0
                          8056	
                          8057		.section	.debug_info
                          8058	.LDW_4a033e0:
000000b6 14               8059		.byte	20
000000b7 00000000         8060		.long	.LDW_5cc9f80
000000bb 00               8061		.byte	0
                          8062	
                          8063		.section	.debug_abbrev
00000032 14               8064		.byte	20
00000033 05               8065		.byte	5
00000034 00               8066		.byte	0
00000035 4910             8067		.byte	73,16
00000037 4b0c             8068		.byte	75,12
00000039 0000             8069		.byte	0,0
                          8070	
                          8071		.section	.debug_info
                          8072	.LDW_4a03410:
000000bc 14               8073		.byte	20
000000bd 00000000         8074		.long	.LDW_4a0c648
000000c1 00               8075		.byte	0
                          8076	
                          8077	.LDW_4a03650:
000000c2 14               8078		.byte	20
000000c3 00000000         8079		.long	.LDW_5cc9ed0
000000c7 00               8080		.byte	0
                          8081	
000000c8 00               8082		.byte	0
                          8083	
                          8084	.LDW_4a0c7d0:
000000c9 27               8085		.byte	39
000000ca 73686f727400     8086		.strz	"short"
000000d0 05               8087		.byte	5
000000d1 02               8088		.byte	2
                          8089	
                          8090	.LDW_4a0c5d8:
000000d2 47               8091		.byte	71
000000d3 01               8092		.byte	1
                          8093	
                          8094		.section	.debug_abbrev
0000003b 47               8095		.byte	71
0000003c 15               8096		.byte	21
0000003d 01               8097		.byte	1
0000003e 270c             8098		.byte	39,12
00000040 0000             8099		.byte	0,0
                          8100	
                          8101		.section	.debug_info
000000d4 00               8102		.byte	0
                          8103	
                          8104	.LDW_4a0c4f8:
000000d5 47               8105		.byte	71

                                   Fri Apr 10 08:32:04 2020           Page 146
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
000000d6 01               8106		.byte	1
                          8107	
                          8108	.LDW_4a03440:
000000d7 14               8109		.byte	20
000000d8 00000000         8110		.long	.LDW_4a4b818
000000dc 00               8111		.byte	0
                          8112	
000000dd 00               8113		.byte	0
                          8114	
                          8115	.LDW_4a0c8b0:
000000de 46               8116		.byte	70
000000df 00000000         8117		.long	.LDW_4a4b818
000000e3 01               8118		.byte	1
                          8119	
000000e4 00               8120		.byte	0
                          8121	
                          8122	.LDW_4a0c418:
000000e5 47               8123		.byte	71
000000e6 01               8124		.byte	1
                          8125	
                          8126	.LDW_4a03110:
000000e7 14               8127		.byte	20
000000e8 00000000         8128		.long	.LDW_4a4b818
000000ec 00               8129		.byte	0
                          8130	
000000ed 00               8131		.byte	0
                          8132	
                          8133	.LDW_4a0c8e8:
000000ee 46               8134		.byte	70
000000ef 00000000         8135		.long	.LDW_4a4d798
000000f3 01               8136		.byte	1
                          8137	
                          8138	.LDW_4a034d0:
000000f4 14               8139		.byte	20
000000f5 00000000         8140		.long	.LDW_5cc9f80
000000f9 00               8141		.byte	0
                          8142	
000000fa 00               8143		.byte	0
                          8144	
                          8145	.LDW_4a0c568:
000000fb 46               8146		.byte	70
000000fc 00000000         8147		.long	.LDW_4a0c648
00000100 01               8148		.byte	1
                          8149	
00000101 00               8150		.byte	0
                          8151	
                          8152	.LDW_4a0caa8:
00000102 46               8153		.byte	70
00000103 00000000         8154		.long	.LDW_4a4a380
00000107 01               8155		.byte	1
                          8156	
                          8157	.LDW_4a03680:
00000108 14               8158		.byte	20
00000109 00000000         8159		.long	.LDW_5cc9f80
0000010d 00               8160		.byte	0
                          8161	

                                   Fri Apr 10 08:32:04 2020           Page 147
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
                          8162	.LDW_4a03590:
0000010e 14               8163		.byte	20
0000010f 00000000         8164		.long	.LDW_5cc9f80
00000113 00               8165		.byte	0
                          8166	
                          8167	.LDW_4a03140:
00000114 14               8168		.byte	20
00000115 00000000         8169		.long	.LDW_5cc9ed0
00000119 00               8170		.byte	0
                          8171	
0000011a 00               8172		.byte	0
                          8173	
                          8174	.LDW_4a0c5a0:
0000011b 46               8175		.byte	70
0000011c 00000000         8176		.long	.LDW_4a4a380
00000120 01               8177		.byte	1
                          8178	
                          8179	.LDW_4a031a0:
00000121 14               8180		.byte	20
00000122 00000000         8181		.long	.LDW_5cc9f80
00000126 00               8182		.byte	0
                          8183	
                          8184	.LDW_4a031d0:
00000127 14               8185		.byte	20
00000128 00000000         8186		.long	.LDW_5cc9ed0
0000012c 00               8187		.byte	0
                          8188	
                          8189	.LDW_4a03200:
0000012d 14               8190		.byte	20
0000012e 00000000         8191		.long	.LDW_5cc9f80
00000132 00               8192		.byte	0
                          8193	
                          8194	.LDW_4a03230:
00000133 14               8195		.byte	20
00000134 00000000         8196		.long	.LDW_5cc9ed0
00000138 00               8197		.byte	0
                          8198	
00000139 00               8199		.byte	0
                          8200	
                          8201	.LDW_4a0c680:
0000013a 27               8202		.byte	39
0000013b 756e7369676e6564 8203		.strz	"unsigned short"
00000143 2073686f727400  
0000014a 07               8204		.byte	7
0000014b 02               8205		.byte	2
                          8206	
                          8207	.LDW_4a0c610:
0000014c 47               8208		.byte	71
0000014d 01               8209		.byte	1
                          8210	
                          8211	.LDW_4a03290:
0000014e 14               8212		.byte	20
0000014f 00000000         8213		.long	.LDW_4a4a2d0
00000153 00               8214		.byte	0
                          8215	
00000154 00               8216		.byte	0
                          8217	

                                   Fri Apr 10 08:32:04 2020           Page 148
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
                          8218	.LDW_4a0c450:
00000155 47               8219		.byte	71
00000156 01               8220		.byte	1
                          8221	
00000157 00               8222		.byte	0
                          8223	
                          8224	.LDW_4a0c958:
00000158 47               8225		.byte	71
00000159 01               8226		.byte	1
                          8227	
0000015a 00               8228		.byte	0
                          8229	
                          8230	.LDW_4a0c3e0:
0000015b 47               8231		.byte	71
0000015c 01               8232		.byte	1
                          8233	
0000015d 00               8234		.byte	0
                          8235	
                          8236	.LDW_4a0c760:
0000015e 47               8237		.byte	71
0000015f 01               8238		.byte	1
                          8239	
00000160 00               8240		.byte	0
                          8241	
                          8242	.LDW_4a0c6f0:
00000161 47               8243		.byte	71
00000162 01               8244		.byte	1
                          8245	
                          8246	.LDW_4a03740:
00000163 14               8247		.byte	20
00000164 00000000         8248		.long	.LDW_4a0c648
00000168 00               8249		.byte	0
                          8250	
00000169 00               8251		.byte	0
                          8252	
                          8253	.LDW_4a0c9c8:
0000016a 46               8254		.byte	70
0000016b 00000000         8255		.long	.LDW_4a4b818
0000016f 01               8256		.byte	1
                          8257	
00000170 00               8258		.byte	0
                          8259	
                          8260	.LDW_4a0ca00:
00000171 46               8261		.byte	70
00000172 00000000         8262		.long	.LDW_4a4a380
00000176 01               8263		.byte	1
                          8264	
                          8265	.LDW_4a03830:
00000177 14               8266		.byte	20
00000178 00000000         8267		.long	.LDW_5cc9f80
0000017c 00               8268		.byte	0
                          8269	
                          8270	.LDW_4a03710:
0000017d 14               8271		.byte	20
0000017e 00000000         8272		.long	.LDW_5cc9ed0
00000182 00               8273		.byte	0

                                   Fri Apr 10 08:32:04 2020           Page 149
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
                          8274	
                          8275	.LDW_5bdd628:
00000183 14               8276		.byte	20
00000184 00000000         8277		.long	.LDW_4a0c648
00000188 00               8278		.byte	0
                          8279	
00000189 00               8280		.byte	0
                          8281	
                          8282	.LDW_4a0c6b8:
0000018a 47               8283		.byte	71
0000018b 01               8284		.byte	1
                          8285	
0000018c 00               8286		.byte	0
                          8287	
                          8288	.LDW_4a0c728:
0000018d 47               8289		.byte	71
0000018e 01               8290		.byte	1
                          8291	
0000018f 00               8292		.byte	0
                          8293	
                          8294	.LDW_4a0c798:
00000190 47               8295		.byte	71
00000191 01               8296		.byte	1
                          8297	
00000192 00               8298		.byte	0
                          8299	
                          8300	.LDW_4a0ca38:
00000193 47               8301		.byte	71
00000194 01               8302		.byte	1
                          8303	
00000195 00               8304		.byte	0
                          8305	
                          8306	.LDW_4a0ca70:
00000196 47               8307		.byte	71
00000197 01               8308		.byte	1
                          8309	
00000198 00               8310		.byte	0
                          8311	
                          8312	.LDW_4a0c808:
00000199 47               8313		.byte	71
0000019a 01               8314		.byte	1
                          8315	
0000019b 00               8316		.byte	0
                          8317	
                          8318	.LDW_5d447f8:
0000019c 2b               8319		.byte	43
0000019d 00000000         8320		.long	.LDW_4a4b818
                          8321	
                          8322		.section	.debug_abbrev
00000042 2b               8323		.byte	43
00000043 26               8324		.byte	38
00000044 00               8325		.byte	0
00000045 4910             8326		.byte	73,16
00000047 0000             8327		.byte	0,0
                          8328	
                          8329		.section	.debug_info

                                   Fri Apr 10 08:32:04 2020           Page 150
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
                          8330	.LDW_4a0c4c0:
000001a1 31               8331		.byte	49
000001a2 00000000         8332		.long	.LDW_5d447f8
                          8333	
                          8334	.LDW_5d663b8:
000001a6 27               8335		.byte	39
000001a7 6c6f6e6700       8336		.strz	"long"
000001ac 05               8337		.byte	5
000001ad 04               8338		.byte	4
                          8339	
                          8340	.LDW_4a0c488:
000001ae 46               8341		.byte	70
000001af 00000000         8342		.long	.LDW_4a49eb0
000001b3 01               8343		.byte	1
                          8344	
                          8345	.LDW_5bdd4d8:
000001b4 14               8346		.byte	20
000001b5 00000000         8347		.long	.LDW_4a0c4c0
000001b9 00               8348		.byte	0
                          8349	
                          8350	.LDW_5bdd6e8:
000001ba 14               8351		.byte	20
000001bb 00000000         8352		.long	.LDW_5d44850
000001bf 00               8353		.byte	0
                          8354	
000001c0 00               8355		.byte	0
                          8356	
                          8357	.LDW_5d44380:
000001c1 2b               8358		.byte	43
000001c2 00000000         8359		.long	.LDW_5d44958
                          8360	
                          8361	.LDW_5d667a8:
000001c6 31               8362		.byte	49
000001c7 00000000         8363		.long	.LDW_5d44380
                          8364	
                          8365	.LDW_5d663f0:
000001cb 46               8366		.byte	70
000001cc 00000000         8367		.long	.LDW_4a49eb0
000001d0 01               8368		.byte	1
                          8369	
                          8370	.LDW_5bdd4a8:
000001d1 14               8371		.byte	20
000001d2 00000000         8372		.long	.LDW_5d667a8
000001d6 00               8373		.byte	0
                          8374	
                          8375	.LDW_5bdd2f8:
000001d7 14               8376		.byte	20
000001d8 00000000         8377		.long	.LDW_5d44850
000001dc 00               8378		.byte	0
                          8379	
                          8380	.LDW_5bdd688:
000001dd 14               8381		.byte	20
000001de 00000000         8382		.long	.LDW_5d44850
000001e2 00               8383		.byte	0
                          8384	
000001e3 00               8385		.byte	0

                                   Fri Apr 10 08:32:04 2020           Page 151
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
                          8386	
                          8387	.LDW_5d449b0:
000001e4 2b               8388		.byte	43
000001e5 00000000         8389		.long	.LDW_5d44328
                          8390	
                          8391	.LDW_5d666c8:
000001e9 31               8392		.byte	49
000001ea 00000000         8393		.long	.LDW_5d449b0
                          8394	
                          8395	.LDW_5d665b0:
000001ee 46               8396		.byte	70
000001ef 00000000         8397		.long	.LDW_4a49eb0
000001f3 01               8398		.byte	1
                          8399	
                          8400	.LDW_5bdd298:
000001f4 14               8401		.byte	20
000001f5 00000000         8402		.long	.LDW_5d666c8
000001f9 00               8403		.byte	0
                          8404	
000001fa 00               8405		.byte	0
                          8406	
                          8407	.LDW_5d66380:
000001fb 46               8408		.byte	70
000001fc 00000000         8409		.long	.LDW_4a4a380
00000200 01               8410		.byte	1
                          8411	
                          8412	.LDW_5bdd7a8:
00000201 14               8413		.byte	20
00000202 00000000         8414		.long	.LDW_5d666c8
00000206 00               8415		.byte	0
                          8416	
00000207 00               8417		.byte	0
                          8418	
                          8419	.LDW_5d66690:
00000208 46               8420		.byte	70
00000209 00000000         8421		.long	.LDW_5d666c8
0000020d 01               8422		.byte	1
                          8423	
                          8424	.LDW_5bdd328:
0000020e 14               8425		.byte	20
0000020f 00000000         8426		.long	.LDW_4a4b818
00000213 00               8427		.byte	0
                          8428	
00000214 00               8429		.byte	0
                          8430	
                          8431	.LDW_5d66230:
00000215 47               8432		.byte	71
00000216 01               8433		.byte	1
                          8434	
00000217 00               8435		.byte	0
                          8436	
                          8437	.LDW_5d66428:
00000218 47               8438		.byte	71
00000219 01               8439		.byte	1
                          8440	
0000021a 00               8441		.byte	0

                                   Fri Apr 10 08:32:04 2020           Page 152
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
                          8442	
                          8443	.LDW_5d66658:
0000021b 47               8444		.byte	71
0000021c 01               8445		.byte	1
                          8446	
                          8447	.LDW_5bdd5c8:
0000021d 14               8448		.byte	20
0000021e 00000000         8449		.long	.LDW_4a0c648
00000222 00               8450		.byte	0
                          8451	
                          8452	.LDW_5bdd658:
00000223 14               8453		.byte	20
00000224 00000000         8454		.long	.LDW_4a4a2d0
00000228 00               8455		.byte	0
                          8456	
00000229 00               8457		.byte	0
                          8458	
                          8459	.LDW_5d66118:
0000022a 46               8460		.byte	70
0000022b 00000000         8461		.long	.LDW_4a0c648
0000022f 01               8462		.byte	1
                          8463	
                          8464	.LDW_5bdd5f8:
00000230 14               8465		.byte	20
00000231 00000000         8466		.long	.LDW_4a4a2d0
00000235 00               8467		.byte	0
                          8468	
00000236 00               8469		.byte	0
                          8470	
                          8471	.LDW_5d662a0:
00000237 46               8472		.byte	70
00000238 00000000         8473		.long	.LDW_4a0c648
0000023c 01               8474		.byte	1
                          8475	
                          8476	.LDW_5bdd748:
0000023d 14               8477		.byte	20
0000023e 00000000         8478		.long	.LDW_4a4a2d0
00000242 00               8479		.byte	0
                          8480	
00000243 00               8481		.byte	0
                          8482	
                          8483	.LDW_5d661c0:
00000244 47               8484		.byte	71
00000245 01               8485		.byte	1
                          8486	
00000246 00               8487		.byte	0
                          8488	
                          8489	.LDW_5d66460:
00000247 47               8490		.byte	71
00000248 01               8491		.byte	1
                          8492	
                          8493	.LDW_5bdd268:
00000249 14               8494		.byte	20
0000024a 00000000         8495		.long	.LDW_4a4b818
0000024e 00               8496		.byte	0
                          8497	

                                   Fri Apr 10 08:32:04 2020           Page 153
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
0000024f 00               8498		.byte	0
                          8499	
                          8500	.LDW_5d66700:
00000250 47               8501		.byte	71
00000251 01               8502		.byte	1
                          8503	
                          8504	.LDW_5bdd8c8:
00000252 14               8505		.byte	20
00000253 00000000         8506		.long	.LDW_4a4b818
00000257 00               8507		.byte	0
                          8508	
00000258 00               8509		.byte	0
                          8510	
                          8511	.LDW_5d66738:
00000259 46               8512		.byte	70
0000025a 00000000         8513		.long	.LDW_4a4a380
0000025e 01               8514		.byte	1
                          8515	
0000025f 00               8516		.byte	0
                          8517	
                          8518	.LDW_5d66620:
00000260 46               8519		.byte	70
00000261 00000000         8520		.long	.LDW_4a4a380
00000265 01               8521		.byte	1
                          8522	
00000266 00               8523		.byte	0
                          8524	
                          8525	.LDW_5d66268:
00000267 27               8526		.byte	39
00000268 766f69642a00     8527		.strz	"void*"
0000026e 01               8528		.byte	1
0000026f 04               8529		.byte	4
                          8530	
                          8531	.LDW_5d66540:
00000270 27               8532		.byte	39
00000271 696e7400         8533		.strz	"int"
00000275 05               8534		.byte	5
00000276 04               8535		.byte	4
                          8536	
                          8537	.LDW_5da1468:
00000277 47               8538		.byte	71
00000278 01               8539		.byte	1
                          8540	
00000279 00               8541		.byte	0
                          8542	
                          8543	.LDW_5da13f8:
0000027a 31               8544		.byte	49
0000027b 00000000         8545		.long	.LDW_5da1468
                          8546	
                          8547	.LDW_5baeaf8:
0000027f 3c               8548		.byte	60
00000280 00               8549		.byte	0
00000281 01               8550		.byte	1
00000282 00000000         8551		.long	.LDW_4a4b818
                          8552	
                          8553		.section	.debug_abbrev

                                   Fri Apr 10 08:32:04 2020           Page 154
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
00000049 3c               8554		.byte	60
0000004a 01               8555		.byte	1
0000004b 01               8556		.byte	1
0000004c 090b             8557		.byte	9,11
0000004e 0b0f             8558		.byte	11,15
00000050 4910             8559		.byte	73,16
00000052 0000             8560		.byte	0,0
                          8561	
                          8562		.section	.debug_info
00000286 34               8563		.byte	52
00000287 00000000         8564		.long	.LDW_5d66540
0000028b 04               8565		.byte	4
0000028c 00               8566		.byte	0
0000028d 00               8567		.byte	0
                          8568	
                          8569		.section	.debug_abbrev
00000054 34               8570		.byte	52
00000055 21               8571		.byte	33
00000056 00               8572		.byte	0
00000057 4910             8573		.byte	73,16
00000059 0b0f             8574		.byte	11,15
0000005b 220d             8575		.byte	34,13
0000005d 2f0d             8576		.byte	47,13
0000005f 0000             8577		.byte	0,0
                          8578	
                          8579		.section	.debug_info
0000028e 00               8580		.byte	0
                          8581	
                          8582	.LDW_5baeb80:
0000028f 3c               8583		.byte	60
00000290 00               8584		.byte	0
00000291 30               8585		.byte	48
00000292 00000000         8586		.long	.LDW_5da3220
                          8587	
00000296 34               8588		.byte	52
00000297 00000000         8589		.long	.LDW_5d66540
0000029b 04               8590		.byte	4
0000029c 00               8591		.byte	0
0000029d 01               8592		.byte	1
                          8593	
0000029e 00               8594		.byte	0
                          8595	
                          8596	.LDW_5da3e40:
0000029f 46               8597		.byte	70
000002a0 00000000         8598		.long	.LDW_5da33d8
000002a4 01               8599		.byte	1
                          8600	
                          8601	.LDW_5da0cd8:
000002a5 14               8602		.byte	20
000002a6 00000000         8603		.long	.LDW_5d66268
000002aa 00               8604		.byte	0
                          8605	
000002ab 00               8606		.byte	0
                          8607	
                          8608	.LDW_5da3ee8:
000002ac 31               8609		.byte	49

                                   Fri Apr 10 08:32:04 2020           Page 155
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
000002ad 00000000         8610		.long	.LDW_5da3e40
                          8611	
                          8612	.LDW_5da3eb0:
000002b1 46               8613		.byte	70
000002b2 00000000         8614		.long	.LDW_5da33d8
000002b6 01               8615		.byte	1
                          8616	
                          8617	.LDW_5da0e28:
000002b7 14               8618		.byte	20
000002b8 00000000         8619		.long	.LDW_5d66268
000002bc 00               8620		.byte	0
                          8621	
000002bd 00               8622		.byte	0
                          8623	
                          8624	.LDW_5da4000:
000002be 31               8625		.byte	49
000002bf 00000000         8626		.long	.LDW_5da3eb0
                          8627	
                          8628	.LDW_5da3938:
000002c3 46               8629		.byte	70
000002c4 00000000         8630		.long	.LDW_5da33d8
000002c8 01               8631		.byte	1
                          8632	
                          8633	.LDW_5da0a68:
000002c9 14               8634		.byte	20
000002ca 00000000         8635		.long	.LDW_5da2fb8
000002ce 00               8636		.byte	0
                          8637	
                          8638	.LDW_5da0af8:
000002cf 14               8639		.byte	20
000002d0 00000000         8640		.long	.LDW_5da2bf0
000002d4 00               8641		.byte	0
                          8642	
                          8643	.LDW_5da0e58:
000002d5 14               8644		.byte	20
000002d6 00000000         8645		.long	.LDW_5da3328
000002da 00               8646		.byte	0
                          8647	
000002db 00               8648		.byte	0
                          8649	
                          8650	.LDW_5da3970:
000002dc 31               8651		.byte	49
000002dd 00000000         8652		.long	.LDW_5da3938
                          8653	
                          8654	.LDW_5da39a8:
000002e1 46               8655		.byte	70
000002e2 00000000         8656		.long	.LDW_5da33d8
000002e6 01               8657		.byte	1
                          8658	
                          8659	.LDW_5da0be8:
000002e7 14               8660		.byte	20
000002e8 00000000         8661		.long	.LDW_5da2fb8
000002ec 00               8662		.byte	0
                          8663	
                          8664	.LDW_5da0eb8:
000002ed 14               8665		.byte	20

                                   Fri Apr 10 08:32:04 2020           Page 156
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
000002ee 00000000         8666		.long	.LDW_5da2bf0
000002f2 00               8667		.byte	0
                          8668	
                          8669	.LDW_5da0ca8:
000002f3 14               8670		.byte	20
000002f4 00000000         8671		.long	.LDW_5da3328
000002f8 00               8672		.byte	0
                          8673	
000002f9 00               8674		.byte	0
                          8675	
                          8676	.LDW_5da3cf0:
000002fa 31               8677		.byte	49
000002fb 00000000         8678		.long	.LDW_5da39a8
                          8679	
                          8680	.LDW_5da39e0:
000002ff 46               8681		.byte	70
00000300 00000000         8682		.long	.LDW_5da33d8
00000304 01               8683		.byte	1
                          8684	
                          8685	.LDW_5da0a98:
00000305 14               8686		.byte	20
00000306 00000000         8687		.long	.LDW_5da2bf0
0000030a 00               8688		.byte	0
                          8689	
                          8690	.LDW_5da0b58:
0000030b 14               8691		.byte	20
0000030c 00000000         8692		.long	.LDW_5da3328
00000310 00               8693		.byte	0
                          8694	
00000311 00               8695		.byte	0
                          8696	
                          8697	.LDW_5da3a18:
00000312 31               8698		.byte	49
00000313 00000000         8699		.long	.LDW_5da39e0
                          8700	
                          8701	.LDW_5da3850:
00000317 2b               8702		.byte	43
00000318 00000000         8703		.long	.LDW_5cc9e20
                          8704	
                          8705	.LDW_5da3c10:
0000031c 46               8706		.byte	70
0000031d 00000000         8707		.long	.LDW_4a4a380
00000321 01               8708		.byte	1
                          8709	
                          8710	.LDW_5da0ee8:
00000322 14               8711		.byte	20
00000323 00000000         8712		.long	.LDW_4a0c648
00000327 00               8713		.byte	0
                          8714	
                          8715	.LDW_5da0a38:
00000328 14               8716		.byte	20
00000329 00000000         8717		.long	.LDW_4a4a2d0
0000032d 00               8718		.byte	0
                          8719	
0000032e 00               8720		.byte	0
                          8721	

                                   Fri Apr 10 08:32:04 2020           Page 157
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
                          8722	.LDW_5da3c48:
0000032f 31               8723		.byte	49
00000330 00000000         8724		.long	.LDW_5da3c10
                          8725	
                          8726	.LDW_5da5b08:
00000334 2b               8727		.byte	43
00000335 00000000         8728		.long	.LDW_5da3170
                          8729	
                          8730	.LDW_5da6bc0:
00000339 2b               8731		.byte	43
0000033a 00000000         8732		.long	.LDW_5cca218
                          8733	
                          8734	.LDW_5ccb338:
0000033e 3c               8735		.byte	60
0000033f 00               8736		.byte	0
00000340 9001             8737		.byte	144,1
00000342 00000000         8738		.long	.LDW_5da6bc0
                          8739	
00000346 34               8740		.byte	52
00000347 00000000         8741		.long	.LDW_5d66540
0000034b 04               8742		.byte	4
0000034c 00               8743		.byte	0
0000034d 0b               8744		.byte	11
                          8745	
0000034e 00               8746		.byte	0
                          8747	
                          8748	.LDW_5da73a8:
0000034f 2b               8749		.byte	43
00000350 00000000         8750		.long	.LDW_5da36f0
                          8751	
                          8752	.LDW_5ccbe60:
00000354 3c               8753		.byte	60
00000355 00               8754		.byte	0
00000356 30               8755		.byte	48
00000357 00000000         8756		.long	.LDW_5da73a8
                          8757	
0000035b 34               8758		.byte	52
0000035c 00000000         8759		.long	.LDW_5d66540
00000360 04               8760		.byte	4
00000361 00               8761		.byte	0
00000362 01               8762		.byte	1
                          8763	
00000363 00               8764		.byte	0
                          8765	
                          8766	.LDW_5ccb3c0:
00000364 3c               8767		.byte	60
00000365 00               8768		.byte	0
00000366 04               8769		.byte	4
00000367 00000000         8770		.long	.LDW_5d9fff0
                          8771	
0000036b 34               8772		.byte	52
0000036c 00000000         8773		.long	.LDW_5d66540
00000370 04               8774		.byte	4
00000371 00               8775		.byte	0
00000372 00               8776		.byte	0
                          8777	

                                   Fri Apr 10 08:32:04 2020           Page 158
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
00000373 00               8778		.byte	0
                          8779	
                          8780	.LDW_5da72a0:
00000374 2b               8781		.byte	43
00000375 00000000         8782		.long	.LDW_5cca428
                          8783	
                          8784	.LDW_5ccbee8:
00000379 3d               8785		.byte	61
0000037a 00               8786		.byte	0
0000037b 00000000         8787		.long	.LDW_5da72a0
                          8788	
                          8789		.section	.debug_abbrev
00000061 3d               8790		.byte	61
00000062 01               8791		.byte	1
00000063 01               8792		.byte	1
00000064 090b             8793		.byte	9,11
00000066 4910             8794		.byte	73,16
00000068 0000             8795		.byte	0,0
                          8796	
                          8797		.section	.debug_info
0000037f 34               8798		.byte	52
00000380 00000000         8799		.long	.LDW_5d66540
00000384 04               8800		.byte	4
00000385 00               8801		.byte	0
00000386 7f               8802		.byte	127
                          8803	
00000387 00               8804		.byte	0
                          8805	
                          8806	.LDW_5ccbcc8:
00000388 3d               8807		.byte	61
00000389 00               8808		.byte	0
0000038a 00000000         8809		.long	.LDW_5d449b0
                          8810	
0000038e 34               8811		.byte	52
0000038f 00000000         8812		.long	.LDW_5d66540
00000393 04               8813		.byte	4
00000394 00               8814		.byte	0
00000395 7f               8815		.byte	127
                          8816	
00000396 00               8817		.byte	0
                          8818	
                          8819	.LDW_5ccb998:
00000397 3c               8820		.byte	60
00000398 00               8821		.byte	0
00000399 04               8822		.byte	4
0000039a 00000000         8823		.long	.LDW_5d9fff0
                          8824	
0000039e 34               8825		.byte	52
0000039f 00000000         8826		.long	.LDW_5d66540
000003a3 04               8827		.byte	4
000003a4 00               8828		.byte	0
000003a5 00               8829		.byte	0
                          8830	
000003a6 00               8831		.byte	0
                          8832	
                          8833	.LDW_5ccb448:

                                   Fri Apr 10 08:32:04 2020           Page 159
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
000003a7 3c               8834		.byte	60
000003a8 00               8835		.byte	0
000003a9 03               8836		.byte	3
000003aa 00000000         8837		.long	.LDW_4a4b818
                          8838	
000003ae 34               8839		.byte	52
000003af 00000000         8840		.long	.LDW_5d66540
000003b3 04               8841		.byte	4
000003b4 00               8842		.byte	0
000003b5 02               8843		.byte	2
                          8844	
000003b6 00               8845		.byte	0
                          8846	
                          8847	.LDW_5ccbaa8:
000003b7 3c               8848		.byte	60
000003b8 00               8849		.byte	0
000003b9 03               8850		.byte	3
000003ba 00000000         8851		.long	.LDW_4a4b818
                          8852	
000003be 34               8853		.byte	52
000003bf 00000000         8854		.long	.LDW_5d66540
000003c3 04               8855		.byte	4
000003c4 00               8856		.byte	0
000003c5 02               8857		.byte	2
                          8858	
000003c6 00               8859		.byte	0
                          8860	
                          8861	.LDW_5cce4c0:
000003c7 46               8862		.byte	70
000003c8 00000000         8863		.long	.LDW_4a4b818
000003cc 01               8864		.byte	1
                          8865	
000003cd 00               8866		.byte	0
                          8867	
                          8868	.LDW_5cce220:
000003ce 46               8869		.byte	70
000003cf 00000000         8870		.long	.LDW_5da33d8
000003d3 01               8871		.byte	1
                          8872	
                          8873	.LDW_5da8a88:
000003d4 14               8874		.byte	20
000003d5 00000000         8875		.long	.LDW_5d66268
000003d9 00               8876		.byte	0
                          8877	
000003da 00               8878		.byte	0
                          8879	
                          8880	.LDW_5dab7d0:
000003db 27               8881		.byte	39
000003dc 756e7369676e6564 8882		.strz	"unsigned int"
000003e4 20696e7400      
000003e9 07               8883		.byte	7
000003ea 04               8884		.byte	4
                          8885	
                          8886	.LDW_5daef40:
000003eb 47               8887		.byte	71
000003ec 01               8888		.byte	1
                          8889	

                                   Fri Apr 10 08:32:04 2020           Page 160
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
000003ed 00               8890		.byte	0
                          8891	
                          8892	.LDW_5daeaa8:
000003ee 47               8893		.byte	71
000003ef 01               8894		.byte	1
                          8895	
                          8896	.LDW_5dabec0:
000003f0 14               8897		.byte	20
000003f1 00000000         8898		.long	.LDW_4a0c4c0
000003f5 00               8899		.byte	0
                          8900	
                          8901	.LDW_5dabd40:
000003f6 14               8902		.byte	20
000003f7 00000000         8903		.long	.LDW_4a4a2d0
000003fb 00               8904		.byte	0
                          8905	
000003fc 00               8906		.byte	0
                          8907	
                          8908	.LDW_5daf058:
000003fd 47               8909		.byte	71
000003fe 01               8910		.byte	1
                          8911	
                          8912	.LDW_5dabe60:
000003ff 14               8913		.byte	20
00000400 00000000         8914		.long	.LDW_4a0c4c0
00000404 00               8915		.byte	0
                          8916	
00000405 00               8917		.byte	0
                          8918	
                          8919	.LDW_5daeae0:
00000406 47               8920		.byte	71
00000407 01               8921		.byte	1
                          8922	
00000408 00               8923		.byte	0
                          8924	
                          8925	.LDW_5dae9c8:
00000409 47               8926		.byte	71
0000040a 01               8927		.byte	1
                          8928	
0000040b 00               8929		.byte	0
                          8930	
                          8931	.LDW_5daeb18:
0000040c 47               8932		.byte	71
0000040d 01               8933		.byte	1
                          8934	
0000040e 00               8935		.byte	0
                          8936	
                          8937	.LDW_5daedb8:
0000040f 47               8938		.byte	71
00000410 01               8939		.byte	1
                          8940	
00000411 00               8941		.byte	0
                          8942	
                          8943	.LDW_5daedf0:
00000412 46               8944		.byte	70
00000413 00000000         8945		.long	.LDW_5da6818

                                   Fri Apr 10 08:32:04 2020           Page 161
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
00000417 01               8946		.byte	1
                          8947	
00000418 00               8948		.byte	0
                          8949	
                          8950	.LDW_5daee98:
00000419 47               8951		.byte	71
0000041a 01               8952		.byte	1
                          8953	
0000041b 00               8954		.byte	0
                          8955	
                          8956	.LDW_5daeed0:
0000041c 46               8957		.byte	70
0000041d 00000000         8958		.long	.LDW_5da6818
00000421 01               8959		.byte	1
                          8960	
00000422 00               8961		.byte	0
                          8962	
                          8963	.LDW_5daf940:
00000423 46               8964		.byte	70
00000424 00000000         8965		.long	.LDW_4a4a380
00000428 01               8966		.byte	1
                          8967	
                          8968	.LDW_5dac0a0:
00000429 14               8969		.byte	20
0000042a 00000000         8970		.long	.LDW_4a0c648
0000042e 00               8971		.byte	0
                          8972	
                          8973	.LDW_5dac130:
0000042f 14               8974		.byte	20
00000430 00000000         8975		.long	.LDW_4a4a068
00000434 00               8976		.byte	0
                          8977	
00000435 00               8978		.byte	0
                          8979	
                          8980	.LDW_5daf8d0:
00000436 47               8981		.byte	71
00000437 01               8982		.byte	1
                          8983	
00000438 00               8984		.byte	0
                          8985	
                          8986	.LDW_5dafdd8:
00000439 46               8987		.byte	70
0000043a 00000000         8988		.long	.LDW_4a4b818
0000043e 01               8989		.byte	1
                          8990	
0000043f 00               8991		.byte	0
                          8992	
                          8993	.LDW_5dafd68:
00000440 46               8994		.byte	70
00000441 00000000         8995		.long	.LDW_4a4b818
00000445 01               8996		.byte	1
                          8997	
00000446 00               8998		.byte	0
                          8999	
                          9000	.LDW_5daff98:
00000447 47               9001		.byte	71

                                   Fri Apr 10 08:32:04 2020           Page 162
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
00000448 01               9002		.byte	1
                          9003	
                          9004	.LDW_5dac1f0:
00000449 14               9005		.byte	20
0000044a 00000000         9006		.long	.LDW_4a4b818
0000044e 00               9007		.byte	0
                          9008	
0000044f 00               9009		.byte	0
                          9010	
                          9011	.LDW_5db00e8:
00000450 47               9012		.byte	71
00000451 01               9013		.byte	1
                          9014	
00000452 00               9015		.byte	0
                          9016	
                          9017	.LDW_5daf828:
00000453 47               9018		.byte	71
00000454 01               9019		.byte	1
                          9020	
00000455 00               9021		.byte	0
                          9022	
                          9023	.LDW_5daf6d8:
00000456 46               9024		.byte	70
00000457 00000000         9025		.long	.LDW_4a4a380
0000045b 01               9026		.byte	1
                          9027	
                          9028	.LDW_5db27a8:
0000045c 14               9029		.byte	20
0000045d 00000000         9030		.long	.LDW_4a0c648
00000461 00               9031		.byte	0
                          9032	
                          9033	.LDW_5db2c58:
00000462 14               9034		.byte	20
00000463 00000000         9035		.long	.LDW_4a4a2d0
00000467 00               9036		.byte	0
                          9037	
00000468 00               9038		.byte	0
                          9039	
                          9040	.LDW_5daf400:
00000469 47               9041		.byte	71
0000046a 01               9042		.byte	1
                          9043	
                          9044	.LDW_5db2c88:
0000046b 14               9045		.byte	20
0000046c 00000000         9046		.long	.LDW_5d666c8
00000470 00               9047		.byte	0
                          9048	
                          9049	.LDW_5db2cb8:
00000471 14               9050		.byte	20
00000472 00000000         9051		.long	.LDW_4a49eb0
00000476 00               9052		.byte	0
                          9053	
00000477 00               9054		.byte	0
                          9055	
                          9056	.LDW_5daf438:
00000478 47               9057		.byte	71

                                   Fri Apr 10 08:32:04 2020           Page 163
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
00000479 01               9058		.byte	1
                          9059	
                          9060	.LDW_5db2b08:
0000047a 14               9061		.byte	20
0000047b 00000000         9062		.long	.LDW_5d666c8
0000047f 00               9063		.byte	0
                          9064	
                          9065	.LDW_5db2898:
00000480 14               9066		.byte	20
00000481 00000000         9067		.long	.LDW_4a49eb0
00000485 00               9068		.byte	0
                          9069	
00000486 00               9070		.byte	0
                          9071	
                          9072	.LDW_5daf4a8:
00000487 47               9073		.byte	71
00000488 01               9074		.byte	1
                          9075	
                          9076	.LDW_5db2838:
00000489 14               9077		.byte	20
0000048a 00000000         9078		.long	.LDW_5d666c8
0000048e 00               9079		.byte	0
                          9080	
                          9081	.LDW_5db2d48:
0000048f 14               9082		.byte	20
00000490 00000000         9083		.long	.LDW_4a49eb0
00000494 00               9084		.byte	0
                          9085	
00000495 00               9086		.byte	0
                          9087	
                          9088	.LDW_5daf7f0:
00000496 47               9089		.byte	71
00000497 01               9090		.byte	1
                          9091	
                          9092	.LDW_5db27d8:
00000498 14               9093		.byte	20
00000499 00000000         9094		.long	.LDW_5d666c8
0000049d 00               9095		.byte	0
                          9096	
                          9097	.LDW_5db2808:
0000049e 14               9098		.byte	20
0000049f 00000000         9099		.long	.LDW_4a49eb0
000004a3 00               9100		.byte	0
                          9101	
000004a4 00               9102		.byte	0
                          9103	
                          9104	.LDW_5daf4e0:
000004a5 46               9105		.byte	70
000004a6 00000000         9106		.long	.LDW_4a4b818
000004aa 01               9107		.byte	1
                          9108	
                          9109	.LDW_5db28c8:
000004ab 14               9110		.byte	20
000004ac 00000000         9111		.long	.LDW_4a0c648
000004b0 00               9112		.byte	0
                          9113	

                                   Fri Apr 10 08:32:04 2020           Page 164
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
                          9114	.LDW_5db28f8:
000004b1 14               9115		.byte	20
000004b2 00000000         9116		.long	.LDW_4a4a2d0
000004b6 00               9117		.byte	0
                          9118	
                          9119	.LDW_5db2b98:
000004b7 14               9120		.byte	20
000004b8 00000000         9121		.long	.LDW_5d666c8
000004bc 00               9122		.byte	0
                          9123	
000004bd 00               9124		.byte	0
                          9125	
                          9126	.LDW_5daf7b8:
000004be 47               9127		.byte	71
000004bf 01               9128		.byte	1
                          9129	
000004c0 00               9130		.byte	0
                          9131	
                          9132	.LDW_5daf668:
000004c1 47               9133		.byte	71
000004c2 01               9134		.byte	1
                          9135	
000004c3 00               9136		.byte	0
                          9137	
                          9138	.LDW_4a4b818:
000004c4 2a               9139		.byte	42
000004c5 7675696e743800   9140		.strz	"vuint8"
000004cc 9b04             9141		.byte	155,4
000004ce 18               9142		.byte	24
000004cf 07               9143		.byte	7
000004d0 00000000         9144		.long	.LDW_4a0c840
                          9145	
                          9146		.section	.debug_abbrev
0000006a 2a               9147		.byte	42
0000006b 16               9148		.byte	22
0000006c 00               9149		.byte	0
0000006d 0308             9150		.byte	3,8
0000006f 3b0f             9151		.byte	59,15
00000071 390f             9152		.byte	57,15
00000073 3a0f             9153		.byte	58,15
00000075 4910             9154		.byte	73,16
00000077 0000             9155		.byte	0,0
                          9156	
                          9157		.section	.debug_info
                          9158	.LDW_4a49eb0:
000004d4 2a               9159		.byte	42
000004d5 7675696e74313600 9160		.strz	"vuint16"
000004dd a604             9161		.byte	166,4
000004df 18               9162		.byte	24
000004e0 07               9163		.byte	7
000004e1 00000000         9164		.long	.LDW_4a0c680
                          9165	
                          9166	.LDW_4a4d798:
000004e5 2a               9167		.byte	42
000004e6 7673696e74313600 9168		.strz	"vsint16"
000004ee ab04             9169		.byte	171,4

                                   Fri Apr 10 08:32:04 2020           Page 165
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
000004f0 18               9170		.byte	24
000004f1 07               9171		.byte	7
000004f2 00000000         9172		.long	.LDW_4a0c7d0
                          9173	
                          9174	.LDW_5cc9e20:
000004f6 2a               9175		.byte	42
000004f7 7675696e74333200 9176		.strz	"vuint32"
000004ff b204             9177		.byte	178,4
00000501 18               9178		.byte	24
00000502 07               9179		.byte	7
00000503 00000000         9180		.long	.LDW_4a0cae0
                          9181	
                          9182	.LDW_5d44850:
00000507 2a               9183		.byte	42
00000508 7673696e74333200 9184		.strz	"vsint32"
00000510 b704             9185		.byte	183,4
00000512 18               9186		.byte	24
00000513 07               9187		.byte	7
00000514 00000000         9188		.long	.LDW_5d663b8
                          9189	
                          9190	.LDW_5d9fff0:
00000518 2a               9191		.byte	42
00000519 7446626c53746174 9192		.strz	"tFblStateBitmap"
00000521 654269746d617000
00000529 8402             9193		.byte	132,2
0000052b 11               9194		.byte	17
0000052c 13               9195		.byte	19
0000052d 00000000         9196		.long	.LDW_5cc9e20
                          9197	
                          9198	.LDW_4a4a380:
00000531 2a               9199		.byte	42
00000532 7446626c52657375 9200		.strz	"tFblResult"
0000053a 6c7400          
0000053d 9f02             9201		.byte	159,2
0000053f 10               9202		.byte	16
00000540 13               9203		.byte	19
00000541 00000000         9204		.long	.LDW_4a4b818
                          9205	
                          9206	.LDW_5cc9f28:
00000545 2a               9207		.byte	42
00000546 46424c5f41444452 9208		.strz	"FBL_ADDR_TYPE"
0000054e 5f5459504500    
00000554 ae02             9209		.byte	174,2
00000556 11               9210		.byte	17
00000557 13               9211		.byte	19
00000558 00000000         9212		.long	.LDW_5cc9e20
                          9213	
                          9214	.LDW_5cc9e78:
0000055c 2a               9215		.byte	42
0000055d 46424c5f4d454d53 9216		.strz	"FBL_MEMSIZE_TYPE"
00000565 495a455f54595045
0000056d 00              
0000056e af02             9217		.byte	175,2
00000570 11               9218		.byte	17
00000571 13               9219		.byte	19
00000572 00000000         9220		.long	.LDW_5cc9e20
                          9221	
                          9222	.LDW_5cc9f80:
00000576 2a               9223		.byte	42
00000577 7446626c41646472 9224		.strz	"tFblAddress"
0000057f 65737300        
00000583 b902             9225		.byte	185,2

                                   Fri Apr 10 08:32:04 2020           Page 166
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
00000585 1d               9226		.byte	29
00000586 13               9227		.byte	19
00000587 00000000         9228		.long	.LDW_5cc9f28
                          9229	
                          9230	.LDW_5cc9ed0:
0000058b 2a               9231		.byte	42
0000058c 7446626c4c656e67 9232		.strz	"tFblLength"
00000594 746800          
00000597 ba02             9233		.byte	186,2
00000599 1d               9234		.byte	29
0000059a 13               9235		.byte	19
0000059b 00000000         9236		.long	.LDW_5cc9e78
                          9237	
                          9238	.LDW_5da0888:
0000059f 2a               9239		.byte	42
000005a0 744578706f727446 9240		.strz	"tExportFct"
000005a8 637400          
000005ab ca02             9241		.byte	202,2
000005ad 1b               9242		.byte	27
000005ae 13               9243		.byte	19
000005af 00000000         9244		.long	.LDW_5da13f8
                          9245	
                          9246	.LDW_5da0830:
000005b3 42               9247		.byte	66
000005b4 74426c6f636b4465 9248		.strz	"tBlockDescriptorTag"
000005bc 7363726970746f72
000005c4 54616700        
000005c8 48               9249		.byte	72
000005c9 10               9250		.byte	16
000005ca 17               9251		.byte	23
000005cb 18               9252		.byte	24
000005cc 01               9253		.byte	1
                          9254	
                          9255		.section	.debug_abbrev
00000079 42               9256		.byte	66
0000007a 13               9257		.byte	19
0000007b 01               9258		.byte	1
0000007c 0308             9259		.byte	3,8
0000007e 3b0f             9260		.byte	59,15
00000080 390f             9261		.byte	57,15
00000082 3a0f             9262		.byte	58,15
00000084 0b0f             9263		.byte	11,15
00000086 320b             9264		.byte	50,11
00000088 0000             9265		.byte	0,0
                          9266	
                          9267		.section	.debug_info
                          9268	.LDW_5b03b78:
000005cd 25               9269		.byte	37
000005ce 626c6f636b4e7200 9270		.strz	"blockNr"
000005d6 4a               9271		.byte	74
000005d7 0a               9272		.byte	10
000005d8 17               9273		.byte	23
000005d9 00000000         9274		.long	.LDW_4a4b818
000005dd 0223             9275		.byte	2,35
000005df 00               9276		.byte	0
000005e0 01               9277		.byte	1
                          9278	
                          9279		.section	.debug_abbrev
0000008a 25               9280		.byte	37
0000008b 0d               9281		.byte	13

                                   Fri Apr 10 08:32:04 2020           Page 167
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
0000008c 00               9282		.byte	0
0000008d 0308             9283		.byte	3,8
0000008f 3b0f             9284		.byte	59,15
00000091 390f             9285		.byte	57,15
00000093 3a0f             9286		.byte	58,15
00000095 4910             9287		.byte	73,16
00000097 380a             9288		.byte	56,10
00000099 320b             9289		.byte	50,11
0000009b 0000             9290		.byte	0,0
                          9291	
                          9292		.section	.debug_info
                          9293	.LDW_5b03bc0:
000005e1 25               9294		.byte	37
000005e2 626c6f636b547970 9295		.strz	"blockType"
000005ea 6500            
000005ec 4b               9296		.byte	75
000005ed 0b               9297		.byte	11
000005ee 17               9298		.byte	23
000005ef 00000000         9299		.long	.LDW_5cc9e20
000005f3 0223             9300		.byte	2,35
000005f5 04               9301		.byte	4
000005f6 01               9302		.byte	1
                          9303	
                          9304	.LDW_5da1a00:
000005f7 25               9305		.byte	37
000005f8 626c6f636b537461 9306		.strz	"blockStartAddress"
00000600 7274416464726573
00000608 7300            
0000060a 4c               9307		.byte	76
0000060b 0f               9308		.byte	15
0000060c 17               9309		.byte	23
0000060d 00000000         9310		.long	.LDW_5cc9f80
00000611 0223             9311		.byte	2,35
00000613 08               9312		.byte	8
00000614 01               9313		.byte	1
                          9314	
                          9315	.LDW_5da20c0:
00000615 25               9316		.byte	37
00000616 626c6f636b4c656e 9317		.strz	"blockLength"
0000061e 67746800        
00000622 4d               9318		.byte	77
00000623 0e               9319		.byte	14
00000624 17               9320		.byte	23
00000625 00000000         9321		.long	.LDW_5cc9ed0
00000629 0223             9322		.byte	2,35
0000062b 0c               9323		.byte	12
0000062c 01               9324		.byte	1
                          9325	
                          9326	.LDW_5da1970:
0000062d 25               9327		.byte	37
0000062e 6d617850726f6741 9328		.strz	"maxProgAttempts"
00000636 7474656d70747300
0000063e 4e               9329		.byte	78
0000063f 0b               9330		.byte	11
00000640 17               9331		.byte	23
00000641 00000000         9332		.long	.LDW_4a49eb0
00000645 0223             9333		.byte	2,35
00000647 10               9334		.byte	16
00000648 01               9335		.byte	1
                          9336	
                          9337	.LDW_5da2198:

                                   Fri Apr 10 08:32:04 2020           Page 168
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
00000649 25               9338		.byte	37
0000064a 7665726966794f75 9339		.strz	"verifyOutput"
00000652 7470757400      
00000657 4f               9340		.byte	79
00000658 0e               9341		.byte	14
00000659 17               9342		.byte	23
0000065a 00000000         9343		.long	.LDW_5da0888
0000065e 0223             9344		.byte	2,35
00000660 14               9345		.byte	20
00000661 01               9346		.byte	1
                          9347	
00000662 00               9348		.byte	0
                          9349	
                          9350	.LDW_5da3220:
00000663 2a               9351		.byte	42
00000664 74426c6f636b4465 9352		.strz	"tBlockDescriptor"
0000066c 7363726970746f72
00000674 00              
00000675 50               9353		.byte	80
00000676 03               9354		.byte	3
00000677 17               9355		.byte	23
00000678 00000000         9356		.long	.LDW_5da0830
                          9357	
                          9358	.LDW_5da2988:
0000067c 42               9359		.byte	66
0000067d 744c6f676963616c 9360		.strz	"tLogicalBlockTableTag"
00000685 426c6f636b546162
0000068d 6c6554616700    
00000693 53               9361		.byte	83
00000694 10               9362		.byte	16
00000695 17               9363		.byte	23
00000696 38               9364		.byte	56
00000697 01               9365		.byte	1
                          9366	
                          9367	.LDW_5da1a48:
00000698 25               9368		.byte	37
00000699 6d61676963466c61 9369		.strz	"magicFlag"
000006a1 6700            
000006a3 55               9370		.byte	85
000006a4 0b               9371		.byte	11
000006a5 17               9372		.byte	23
000006a6 00000000         9373		.long	.LDW_5cc9e20
000006aa 0223             9374		.byte	2,35
000006ac 00               9375		.byte	0
000006ad 01               9376		.byte	1
                          9377	
                          9378	.LDW_5da1f10:
000006ae 25               9379		.byte	37
000006af 61737369676e466c 9380		.strz	"assignFlags"
000006b7 61677300        
000006bb 56               9381		.byte	86
000006bc 0a               9382		.byte	10
000006bd 17               9383		.byte	23
000006be 00000000         9384		.long	.LDW_5baeaf8
000006c2 0223             9385		.byte	2,35
000006c4 04               9386		.byte	4
000006c5 01               9387		.byte	1
                          9388	
                          9389	.LDW_5da21e0:
000006c6 25               9390		.byte	37
000006c7 6e6f4f66426c6f63 9391		.strz	"noOfBlocks"
000006cf 6b7300          
000006d2 57               9392		.byte	87
000006d3 0a               9393		.byte	10

                                   Fri Apr 10 08:32:04 2020           Page 169
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
000006d4 17               9394		.byte	23
000006d5 00000000         9395		.long	.LDW_4a4b818
000006d9 0223             9396		.byte	2,35
000006db 05               9397		.byte	5
000006dc 01               9398		.byte	1
                          9399	
                          9400	.LDW_5da1b20:
000006dd 25               9401		.byte	37
000006de 6c6f676963616c42 9402		.strz	"logicalBlock"
000006e6 6c6f636b00      
000006eb 58               9403		.byte	88
000006ec 14               9404		.byte	20
000006ed 17               9405		.byte	23
000006ee 00000000         9406		.long	.LDW_5baeb80
000006f2 0223             9407		.byte	2,35
000006f4 08               9408		.byte	8
000006f5 01               9409		.byte	1
                          9410	
000006f6 00               9411		.byte	0
                          9412	
                          9413	.LDW_5da3170:
000006f7 2a               9414		.byte	42
000006f8 744c6f676963616c 9415		.strz	"tLogicalBlockTable"
00000700 426c6f636b546162
00000708 6c6500          
0000070b 59               9416		.byte	89
0000070c 03               9417		.byte	3
0000070d 17               9418		.byte	23
0000070e 00000000         9419		.long	.LDW_5da2988
                          9420	
                          9421	.LDW_5da2bf0:
00000712 2a               9422		.byte	42
00000713 494f5f53697a6554 9423		.strz	"IO_SizeType"
0000071b 79706500        
0000071f 5e               9424		.byte	94
00000720 13               9425		.byte	19
00000721 1c               9426		.byte	28
00000722 00000000         9427		.long	.LDW_5cc9e20
                          9428	
                          9429	.LDW_5da3328:
00000726 2a               9430		.byte	42
00000727 494f5f506f736974 9431		.strz	"IO_PositionType"
0000072f 696f6e5479706500
00000737 5f               9432		.byte	95
00000738 13               9433		.byte	19
00000739 1c               9434		.byte	28
0000073a 00000000         9435		.long	.LDW_5cc9e20
                          9436	
                          9437	.LDW_5da33d8:
0000073e 2a               9438		.byte	42
0000073f 494f5f4572726f72 9439		.strz	"IO_ErrorType"
00000747 5479706500      
0000074c 65               9440		.byte	101
0000074d 13               9441		.byte	19
0000074e 1c               9442		.byte	28
0000074f 00000000         9443		.long	.LDW_4a49eb0
                          9444	
                          9445	.LDW_5da2fb8:
00000753 2a               9446		.byte	42
00000754 494f5f4d656d5074 9447		.strz	"IO_MemPtrType"
0000075c 725479706500    
00000762 66               9448		.byte	102
00000763 13               9449		.byte	19

                                   Fri Apr 10 08:32:04 2020           Page 170
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
00000764 1c               9450		.byte	28
00000765 00000000         9451		.long	.LDW_4a0c648
                          9452	
                          9453	.LDW_5da29e0:
00000769 2a               9454		.byte	42
0000076a 7444727646637449 9455		.strz	"tDrvFctInit"
00000772 6e697400        
00000776 8b02             9456		.byte	139,2
00000778 23               9457		.byte	35
00000779 1d               9458		.byte	29
0000077a 00000000         9459		.long	.LDW_5da3ee8
                          9460	
                          9461	.LDW_5da2a38:
0000077e 2a               9462		.byte	42
0000077f 7444727646637444 9463		.strz	"tDrvFctDeinit"
00000787 65696e697400    
0000078d 8c02             9464		.byte	140,2
0000078f 23               9465		.byte	35
00000790 1d               9466		.byte	29
00000791 00000000         9467		.long	.LDW_5da4000
                          9468	
                          9469	.LDW_5da2c48:
00000795 2a               9470		.byte	42
00000796 7444727646637452 9471		.strz	"tDrvFctRead"
0000079e 65616400        
000007a2 8d02             9472		.byte	141,2
000007a4 23               9473		.byte	35
000007a5 1d               9474		.byte	29
000007a6 00000000         9475		.long	.LDW_5da3970
                          9476	
                          9477	.LDW_5da3640:
000007aa 2a               9478		.byte	42
000007ab 7444727646637457 9479		.strz	"tDrvFctWrite"
000007b3 7269746500      
000007b8 8e02             9480		.byte	142,2
000007ba 23               9481		.byte	35
000007bb 1d               9482		.byte	29
000007bc 00000000         9483		.long	.LDW_5da3cf0
                          9484	
                          9485	.LDW_5da3698:
000007c0 2a               9486		.byte	42
000007c1 7444727646637445 9487		.strz	"tDrvFctErase"
000007c9 7261736500      
000007ce 8f02             9488		.byte	143,2
000007d0 23               9489		.byte	35
000007d1 1d               9490		.byte	29
000007d2 00000000         9491		.long	.LDW_5da3a18
                          9492	
                          9493	.LDW_5da35e8:
000007d6 43               9494		.byte	67
000007d7 9302             9495		.byte	147,2
000007d9 01               9496		.byte	1
000007da 1d               9497		.byte	29
000007db 18               9498		.byte	24
000007dc 01               9499		.byte	1
                          9500	
                          9501		.section	.debug_abbrev
0000009d 43               9502		.byte	67
0000009e 13               9503		.byte	19
0000009f 01               9504		.byte	1
000000a0 3b0f             9505		.byte	59,15

                                   Fri Apr 10 08:32:04 2020           Page 171
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
000000a2 390f             9506		.byte	57,15
000000a4 3a0f             9507		.byte	58,15
000000a6 0b0f             9508		.byte	11,15
000000a8 320b             9509		.byte	50,11
000000aa 0000             9510		.byte	0,0
                          9511	
                          9512		.section	.debug_info
                          9513	.LDW_5da25d0:
000007dd 25               9514		.byte	37
000007de 696e697400       9515		.strz	"init"
000007e3 9402             9516		.byte	148,2
000007e5 13               9517		.byte	19
000007e6 1d               9518		.byte	29
000007e7 00000000         9519		.long	.LDW_5da29e0
000007eb 0223             9520		.byte	2,35
000007ed 00               9521		.byte	0
000007ee 01               9522		.byte	1
                          9523	
                          9524	.LDW_5da2738:
000007ef 25               9525		.byte	37
000007f0 6465696e697400   9526		.strz	"deinit"
000007f7 9502             9527		.byte	149,2
000007f9 13               9528		.byte	19
000007fa 1d               9529		.byte	29
000007fb 00000000         9530		.long	.LDW_5da2a38
000007ff 0223             9531		.byte	2,35
00000801 04               9532		.byte	4
00000802 01               9533		.byte	1
                          9534	
                          9535	.LDW_5da2348:
00000803 25               9536		.byte	37
00000804 657261736500     9537		.strz	"erase"
0000080a 9602             9538		.byte	150,2
0000080c 13               9539		.byte	19
0000080d 1d               9540		.byte	29
0000080e 00000000         9541		.long	.LDW_5da3698
00000812 0223             9542		.byte	2,35
00000814 08               9543		.byte	8
00000815 01               9544		.byte	1
                          9545	
                          9546	.LDW_5da2618:
00000816 25               9547		.byte	37
00000817 777269746500     9548		.strz	"write"
0000081d 9702             9549		.byte	151,2
0000081f 13               9550		.byte	19
00000820 1d               9551		.byte	29
00000821 00000000         9552		.long	.LDW_5da3640
00000825 0223             9553		.byte	2,35
00000827 0c               9554		.byte	12
00000828 01               9555		.byte	1
                          9556	
                          9557	.LDW_5da2660:
00000829 25               9558		.byte	37
0000082a 7265616400       9559		.strz	"read"
0000082f 9802             9560		.byte	152,2
00000831 13               9561		.byte	19

                                   Fri Apr 10 08:32:04 2020           Page 172
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
00000832 1d               9562		.byte	29
00000833 00000000         9563		.long	.LDW_5da2c48
00000837 0223             9564		.byte	2,35
00000839 10               9565		.byte	16
0000083a 01               9566		.byte	1
                          9567	
                          9568	.LDW_5da26a8:
0000083b 25               9569		.byte	37
0000083c 7365676d656e7453 9570		.strz	"segmentSize"
00000844 697a6500        
00000848 9902             9571		.byte	153,2
0000084a 13               9572		.byte	19
0000084b 1d               9573		.byte	29
0000084c 00000000         9574		.long	.LDW_4a49eb0
00000850 0223             9575		.byte	2,35
00000852 14               9576		.byte	20
00000853 01               9577		.byte	1
                          9578	
00000854 00               9579		.byte	0
                          9580	
                          9581	.LDW_5da36f0:
00000855 2a               9582		.byte	42
00000856 744d656d44727600 9583		.strz	"tMemDrv"
0000085e 9a02             9584		.byte	154,2
00000860 03               9585		.byte	3
00000861 1d               9586		.byte	29
00000862 00000000         9587		.long	.LDW_5da35e8
                          9588	
                          9589	.LDW_4a4a068:
00000866 2a               9590		.byte	42
00000867 7454704461746154 9591		.strz	"tTpDataType"
0000086f 79706500        
00000873 59               9592		.byte	89
00000874 11               9593		.byte	17
00000875 27               9594		.byte	39
00000876 00000000         9595		.long	.LDW_4a49eb0
                          9596	
                          9597	.LDW_4a4a2d0:
0000087a 2a               9598		.byte	42
0000087b 744377446174614c 9599		.strz	"tCwDataLengthType"
00000883 656e677468547970
0000088b 6500            
0000088d c001             9600		.byte	192,1
0000088f 15               9601		.byte	21
00000890 23               9602		.byte	35
00000891 00000000         9603		.long	.LDW_4a4a068
                          9604	
                          9605	.LDW_5cca060:
00000895 42               9606		.byte	66
00000896 74466c617368426c 9607		.strz	"tFlashBlockTag"
0000089e 6f636b54616700  
000008a5 38               9608		.byte	56
000008a6 10               9609		.byte	16
000008a7 2c               9610		.byte	44
000008a8 0c               9611		.byte	12
000008a9 01               9612		.byte	1
                          9613	
                          9614	.LDW_5da4770:
000008aa 25               9615		.byte	37
000008ab 626567696e00     9616		.strz	"begin"
000008b1 3a               9617		.byte	58

                                   Fri Apr 10 08:32:04 2020           Page 173
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
000008b2 0f               9618		.byte	15
000008b3 2c               9619		.byte	44
000008b4 00000000         9620		.long	.LDW_5cc9f80
000008b8 0223             9621		.byte	2,35
000008ba 00               9622		.byte	0
000008bb 01               9623		.byte	1
                          9624	
                          9625	.LDW_5da47b8:
000008bc 25               9626		.byte	37
000008bd 656e6400         9627		.strz	"end"
000008c1 3b               9628		.byte	59
000008c2 0f               9629		.byte	15
000008c3 2c               9630		.byte	44
000008c4 00000000         9631		.long	.LDW_5cc9f80
000008c8 0223             9632		.byte	2,35
000008ca 04               9633		.byte	4
000008cb 01               9634		.byte	1
                          9635	
                          9636	.LDW_5ccc0a8:
000008cc 25               9637		.byte	37
000008cd 64657669636500   9638		.strz	"device"
000008d4 3c               9639		.byte	60
000008d5 0a               9640		.byte	10
000008d6 2c               9641		.byte	44
000008d7 00000000         9642		.long	.LDW_4a4b818
000008db 0223             9643		.byte	2,35
000008dd 08               9644		.byte	8
000008de 01               9645		.byte	1
                          9646	
000008df 00               9647		.byte	0
                          9648	
                          9649	.LDW_5cca218:
000008e0 2a               9650		.byte	42
000008e1 74466c617368426c 9651		.strz	"tFlashBlock"
000008e9 6f636b00        
000008ed 3d               9652		.byte	61
000008ee 03               9653		.byte	3
000008ef 2c               9654		.byte	44
000008f0 00000000         9655		.long	.LDW_5cca060
                          9656	
                          9657	.LDW_5cca428:
000008f4 2a               9658		.byte	42
000008f5 7446626c44696167 9659		.strz	"tFblDiagMainHandler"
000008fd 4d61696e48616e64
00000905 6c657200        
00000909 a603             9660		.byte	166,3
0000090b 16               9661		.byte	22
0000090c 2d               9662		.byte	45
0000090d 00000000         9663		.long	.LDW_5da3c48
                          9664	
                          9665	.LDW_5da6818:
00000911 2a               9666		.byte	42
00000912 7446626c4d656d52 9667		.strz	"tFblMemRamData"
0000091a 616d4461746100  
00000921 c205             9668		.byte	194,5
00000923 37               9669		.byte	55
00000924 2f               9670		.byte	47
00000925 00000000         9671		.long	.LDW_4a0c648
                          9672	
                          9673	.LDW_5d44b10:

                                   Fri Apr 10 08:32:04 2020           Page 174
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
00000929 42               9674		.byte	66
0000092a 7461675375624663 9675		.strz	"tagSubFctInfoTable"
00000932 74496e666f546162
0000093a 6c6500          
0000093d e502             9676		.byte	229,2
0000093f 10               9677		.byte	16
00000940 36               9678		.byte	54
00000941 0c               9679		.byte	12
00000942 01               9680		.byte	1
                          9681	
                          9682	.LDW_5ccc408:
00000943 25               9683		.byte	37
00000944 7375624663745061 9684		.strz	"subFctParamIdTable"
0000094c 72616d4964546162
00000954 6c6500          
00000957 e802             9685		.byte	232,2
00000959 2b               9686		.byte	43
0000095a 36               9687		.byte	54
0000095b 00000000         9688		.long	.LDW_4a0c4c0
0000095f 0223             9689		.byte	2,35
00000961 00               9690		.byte	0
00000962 01               9691		.byte	1
                          9692	
                          9693	.LDW_5ccc450:
00000963 25               9694		.byte	37
00000964 73657373696f6e53 9695		.strz	"sessionSupport"
0000096c 7570706f727400  
00000973 ea02             9696		.byte	234,2
00000975 1f               9697		.byte	31
00000976 36               9698		.byte	54
00000977 00000000         9699		.long	.LDW_4a4b818
0000097b 0223             9700		.byte	2,35
0000097d 04               9701		.byte	4
0000097e 01               9702		.byte	1
                          9703	
                          9704	.LDW_5ccc9a8:
0000097f 25               9705		.byte	37
00000980 736572766963654c 9706		.strz	"serviceLen"
00000988 656e00          
0000098b ec02             9707		.byte	236,2
0000098d 1f               9708		.byte	31
0000098e 36               9709		.byte	54
0000098f 00000000         9710		.long	.LDW_4a4a2d0
00000993 0223             9711		.byte	2,35
00000995 06               9712		.byte	6
00000996 01               9713		.byte	1
                          9714	
                          9715	.LDW_5ccceb8:
00000997 25               9716		.byte	37
00000998 6d61696e496e7374 9717		.strz	"mainInstanceHandlerIdx"
000009a0 616e636548616e64
000009a8 6c657249647800  
000009af ee02             9718		.byte	238,2
000009b1 1f               9719		.byte	31
000009b2 36               9720		.byte	54
000009b3 00000000         9721		.long	.LDW_5d44850
000009b7 0223             9722		.byte	2,35
000009b9 08               9723		.byte	8
000009ba 01               9724		.byte	1
                          9725	
000009bb 00               9726		.byte	0
                          9727	
                          9728	.LDW_5d44958:
000009bc 2a               9729		.byte	42

                                   Fri Apr 10 08:32:04 2020           Page 175
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
000009bd 7453756246637449 9730		.strz	"tSubFctInfoTable"
000009c5 6e666f5461626c65
000009cd 00              
000009ce ef02             9731		.byte	239,2
000009d0 03               9732		.byte	3
000009d1 36               9733		.byte	54
000009d2 00000000         9734		.long	.LDW_5d44b10
                          9735	
                          9736	.LDW_5d44590:
000009d6 42               9737		.byte	66
000009d7 7461675365727669 9738		.strz	"tagServiceInfoTable"
000009df 6365496e666f5461
000009e7 626c6500        
000009eb f202             9739		.byte	242,2
000009ed 10               9740		.byte	16
000009ee 36               9741		.byte	54
000009ef 14               9742		.byte	20
000009f0 01               9743		.byte	1
                          9744	
                          9745	.LDW_5cccd08:
000009f1 25               9746		.byte	37
000009f2 7365727669636549 9747		.strz	"serviceId"
000009fa 6400            
000009fc f502             9748		.byte	245,2
000009fe 1f               9749		.byte	31
000009ff 36               9750		.byte	54
00000a00 00000000         9751		.long	.LDW_4a4b818
00000a04 0223             9752		.byte	2,35
00000a06 00               9753		.byte	0
00000a07 01               9754		.byte	1
                          9755	
                          9756	.LDW_5cccf00:
00000a08 25               9757		.byte	37
00000a09 73657373696f6e53 9758		.strz	"sessionSupport"
00000a11 7570706f727400  
00000a18 f702             9759		.byte	247,2
00000a1a 1f               9760		.byte	31
00000a1b 36               9761		.byte	54
00000a1c 00000000         9762		.long	.LDW_4a4b818
00000a20 0223             9763		.byte	2,35
00000a22 01               9764		.byte	1
00000a23 01               9765		.byte	1
                          9766	
                          9767	.LDW_5cccf90:
00000a24 25               9768		.byte	37
00000a25 736572766963654c 9769		.strz	"serviceLen"
00000a2d 656e00          
00000a30 fa02             9770		.byte	250,2
00000a32 1f               9771		.byte	31
00000a33 36               9772		.byte	54
00000a34 00000000         9773		.long	.LDW_4a4a2d0
00000a38 0223             9774		.byte	2,35
00000a3a 02               9775		.byte	2
00000a3b 01               9776		.byte	1
                          9777	
                          9778	.LDW_5cccf48:
00000a3c 25               9779		.byte	37
00000a3d 73756246756e6374 9780		.strz	"subFunctionInfoLen"
00000a45 696f6e496e666f4c
00000a4d 656e00          
00000a50 fc02             9781		.byte	252,2
00000a52 1f               9782		.byte	31
00000a53 36               9783		.byte	54
00000a54 00000000         9784		.long	.LDW_5d44850
00000a58 0223             9785		.byte	2,35

                                   Fri Apr 10 08:32:04 2020           Page 176
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
00000a5a 04               9786		.byte	4
00000a5b 01               9787		.byte	1
                          9788	
                          9789	.LDW_5ccc960:
00000a5c 25               9790		.byte	37
00000a5d 7375624663745061 9791		.strz	"subFctParamIdTableLen"
00000a65 72616d4964546162
00000a6d 6c654c656e00    
00000a73 fe02             9792		.byte	254,2
00000a75 1f               9793		.byte	31
00000a76 36               9794		.byte	54
00000a77 00000000         9795		.long	.LDW_5d44850
00000a7b 0223             9796		.byte	2,35
00000a7d 08               9797		.byte	8
00000a7e 01               9798		.byte	1
                          9799	
                          9800	.LDW_5ccc9f0:
00000a7f 25               9801		.byte	37
00000a80 737562466374496e 9802		.strz	"subFctInfo"
00000a88 666f00          
00000a8b 8003             9803		.byte	128,3
00000a8d 35               9804		.byte	53
00000a8e 36               9805		.byte	54
00000a8f 00000000         9806		.long	.LDW_5d667a8
00000a93 0223             9807		.byte	2,35
00000a95 0c               9808		.byte	12
00000a96 01               9809		.byte	1
                          9810	
                          9811	.LDW_5cccd98:
00000a97 25               9812		.byte	37
00000a98 6d61696e48616e64 9813		.strz	"mainHandlerIdx"
00000aa0 6c657249647800  
00000aa7 8203             9814		.byte	130,3
00000aa9 1f               9815		.byte	31
00000aaa 36               9816		.byte	54
00000aab 00000000         9817		.long	.LDW_5cc9e20
00000aaf 0223             9818		.byte	2,35
00000ab1 10               9819		.byte	16
00000ab2 01               9820		.byte	1
                          9821	
00000ab3 00               9822		.byte	0
                          9823	
                          9824	.LDW_5d44328:
00000ab4 2a               9825		.byte	42
00000ab5 7453657276696365 9826		.strz	"tServiceInfoTable"
00000abd 496e666f5461626c
00000ac5 6500            
00000ac7 8303             9827		.byte	131,3
00000ac9 03               9828		.byte	3
00000aca 36               9829		.byte	54
00000acb 00000000         9830		.long	.LDW_5d44590
                          9831	
                          9832	.LDW_5da6190:
00000acf 07               9833		.byte	7
00000ad0 46626c4c6f676963 9834		.strz	"FblLogicalBlockTable"
00000ad8 616c426c6f636b54
00000ae0 61626c6500      
00000ae5 5e               9835		.byte	94
00000ae6 3a               9836		.byte	58
00000ae7 17               9837		.byte	23
00000ae8 00000000         9838		.long	.LDW_5da5b08
00000aec 01               9839		.byte	1
00000aed 01               9840		.byte	1
                          9841	

                                   Fri Apr 10 08:32:04 2020           Page 177
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
                          9842		.section	.debug_abbrev
000000ac 07               9843		.byte	7
000000ad 34               9844		.byte	52
000000ae 00               9845		.byte	0
000000af 0308             9846		.byte	3,8
000000b1 3b0f             9847		.byte	59,15
000000b3 390f             9848		.byte	57,15
000000b5 3a0f             9849		.byte	58,15
000000b7 4910             9850		.byte	73,16
000000b9 3f0c             9851		.byte	63,12
000000bb 3c0c             9852		.byte	60,12
000000bd 0000             9853		.byte	0,0
                          9854	
                          9855		.section	.debug_info
                          9856	.LDW_5da5e78:
00000aee 07               9857		.byte	7
00000aef 503254696d657200 9858		.strz	"P2Timer"
00000af7 6a               9859		.byte	106
00000af8 10               9860		.byte	16
00000af9 1b               9861		.byte	27
00000afa 00000000         9862		.long	.LDW_4a49eb0
00000afe 01               9863		.byte	1
00000aff 01               9864		.byte	1
                          9865	
                          9866	.LDW_5da70e8:
00000b00 07               9867		.byte	7
00000b01 466c617368426c6f 9868		.strz	"FlashBlock"
00000b09 636b00          
00000b0c 42               9869		.byte	66
00000b0d 3b               9870		.byte	59
00000b0e 2c               9871		.byte	44
00000b0f 00000000         9872		.long	.LDW_5ccb338
00000b13 01               9873		.byte	1
00000b14 01               9874		.byte	1
                          9875	
                          9876	.LDW_5da6dd0:
00000b15 07               9877		.byte	7
00000b16 6b4e724f66466c61 9878		.strz	"kNrOfFlashBlock"
00000b1e 7368426c6f636b00
00000b26 43               9879		.byte	67
00000b27 36               9880		.byte	54
00000b28 2c               9881		.byte	44
00000b29 00000000         9882		.long	.LDW_5d447f8
00000b2d 01               9883		.byte	1
00000b2e 01               9884		.byte	1
                          9885	
                          9886	.LDW_5da6ab8:
00000b2f 07               9887		.byte	7
00000b30 6d656d4472764c73 9888		.strz	"memDrvLst"
00000b38 7400            
00000b3a 45               9889		.byte	69
00000b3b 37               9890		.byte	55
00000b3c 2c               9891		.byte	44
00000b3d 00000000         9892		.long	.LDW_5ccbe60
00000b41 01               9893		.byte	1
00000b42 01               9894		.byte	1
                          9895	
                          9896	.LDW_5da7248:
00000b43 07               9897		.byte	7

                                   Fri Apr 10 08:32:04 2020           Page 178
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
00000b44 66626c4d61696e53 9898		.strz	"fblMainStates"
00000b4c 746174657300    
00000b52 e301             9899		.byte	227,1
00000b54 40               9900		.byte	64
00000b55 35               9901		.byte	53
00000b56 00000000         9902		.long	.LDW_5ccb3c0
00000b5a 01               9903		.byte	1
00000b5b 01               9904		.byte	1
                          9905	
                          9906	.LDW_5da72f8:
00000b5c 07               9907		.byte	7
00000b5d 6b53657276696365 9908		.strz	"kServiceMainHandlerFctTable"
00000b65 4d61696e48616e64
00000b6d 6c65724663745461
00000b75 626c6500        
00000b79 9603             9909		.byte	150,3
00000b7b 40               9910		.byte	64
00000b7c 36               9911		.byte	54
00000b7d 00000000         9912		.long	.LDW_5ccbee8
00000b81 01               9913		.byte	1
00000b82 01               9914		.byte	1
                          9915	
                          9916	.LDW_5da6cc8:
00000b83 07               9917		.byte	7
00000b84 6b53657276696365 9918		.strz	"kServiceInfoTable"
00000b8c 496e666f5461626c
00000b94 6500            
00000b96 9703             9919		.byte	151,3
00000b98 40               9920		.byte	64
00000b99 36               9921		.byte	54
00000b9a 00000000         9922		.long	.LDW_5ccbcc8
00000b9e 01               9923		.byte	1
00000b9f 01               9924		.byte	1
                          9925	
                          9926	.LDW_5da7198:
00000ba0 07               9927		.byte	7
00000ba1 6b53697a654f6653 9928		.strz	"kSizeOfServiceTable"
00000ba9 6572766963655461
00000bb1 626c6500        
00000bb5 9803             9929		.byte	152,3
00000bb7 2d               9930		.byte	45
00000bb8 36               9931		.byte	54
00000bb9 00000000         9932		.long	.LDW_5da3850
00000bbd 01               9933		.byte	1
00000bbe 01               9934		.byte	1
                          9935	
                          9936	.LDW_5da7400:
00000bbf 07               9937		.byte	7
00000bc0 6b53697a654f664d 9938		.strz	"kSizeOfMainHandlerTable"
00000bc8 61696e48616e646c
00000bd0 65725461626c6500
00000bd8 9903             9939		.byte	153,3
00000bda 2d               9940		.byte	45
00000bdb 36               9941		.byte	54
00000bdc 00000000         9942		.long	.LDW_5da3850
00000be0 01               9943		.byte	1
00000be1 01               9944		.byte	1
                          9945	
                          9946	.LDW_5da6e80:
00000be2 06               9947		.byte	6
00000be3 4469616742756666 9948		.strz	"DiagBuffer"
00000beb 657200          
00000bee b201             9949		.byte	178,1
00000bf0 58               9950		.byte	88
00000bf1 01               9951		.byte	1
00000bf2 00000000         9952		.long	.LDW_4a0c648
00000bf6 01               9953		.byte	1

                                   Fri Apr 10 08:32:04 2020           Page 179
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
00000bf7 00               9954		.byte	0
00000bf8 0503             9955		.byte	5,3
00000bfa 00000000         9956		.long	DiagBuffer
                          9957	
                          9958		.section	.debug_abbrev
000000bf 06               9959		.byte	6
000000c0 34               9960		.byte	52
000000c1 00               9961		.byte	0
000000c2 0308             9962		.byte	3,8
000000c4 3b0f             9963		.byte	59,15
000000c6 390f             9964		.byte	57,15
000000c8 3a0f             9965		.byte	58,15
000000ca 4910             9966		.byte	73,16
000000cc 3f0c             9967		.byte	63,12
000000ce 3c0c             9968		.byte	60,12
000000d0 020a             9969		.byte	2,10
000000d2 0000             9970		.byte	0,0
                          9971	
                          9972		.section	.debug_info
                          9973	.LDW_5da6958:
00000bfe 06               9974		.byte	6
00000bff 6d656d5365676d65 9975		.strz	"memSegment"
00000c07 6e7400          
00000c0a b401             9976		.byte	180,1
00000c0c 3d               9977		.byte	61
00000c0d 01               9978		.byte	1
00000c0e 00000000         9979		.long	.LDW_4a4d798
00000c12 01               9980		.byte	1
00000c13 00               9981		.byte	0
00000c14 0503             9982		.byte	5,3
00000c16 00000000         9983		.long	memSegment
                          9984	
                          9985	.LDW_5da6ed8:
00000c1a 06               9986		.byte	6
00000c1b 4469616744617461 9987		.strz	"DiagDataLength"
00000c23 4c656e67746800  
00000c2a b601             9988		.byte	182,1
00000c2c 3d               9989		.byte	61
00000c2d 01               9990		.byte	1
00000c2e 00000000         9991		.long	.LDW_4a4a2d0
00000c32 01               9992		.byte	1
00000c33 00               9993		.byte	0
00000c34 0503             9994		.byte	5,3
00000c36 00000000         9995		.long	DiagDataLength
                          9996	
                          9997	.LDW_5da69b0:
00000c3a 06               9998		.byte	6
00000c3b 7465737465725072 9999		.strz	"testerPresentTimeout"
00000c43 6573656e7454696d
00000c4b 656f757400      
00000c50 b801             10000		.byte	184,1
00000c52 3d               10001		.byte	61
00000c53 01               10002		.byte	1
00000c54 00000000         10003		.long	.LDW_4a49eb0
00000c58 01               10004		.byte	1
00000c59 00               10005		.byte	0
00000c5a 0503             10006		.byte	5,3
00000c5c 00000000         10007		.long	testerPresentTimeout
                          10008	
                          10009	.LDW_5da6fe0:

                                   Fri Apr 10 08:32:04 2020           Page 180
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
00000c60 06               10010		.byte	6
00000c61 6469616753657276 10011		.strz	"diagServiceCurrent"
00000c69 6963654375727265
00000c71 6e7400          
00000c74 ba01             10012		.byte	186,1
00000c76 3d               10013		.byte	61
00000c77 01               10014		.byte	1
00000c78 00000000         10015		.long	.LDW_4a4b818
00000c7c 01               10016		.byte	1
00000c7d 00               10017		.byte	0
00000c7e 0503             10018		.byte	5,3
00000c80 00000000         10019		.long	diagServiceCurrent
                          10020	
                          10021	.LDW_5da6c18:
00000c84 06               10022		.byte	6
00000c85 66626c4469616753 10023		.strz	"fblDiagStates"
00000c8d 746174657300    
00000c93 bc01             10024		.byte	188,1
00000c95 3d               10025		.byte	61
00000c96 01               10026		.byte	1
00000c97 00000000         10027		.long	.LDW_5ccb998
00000c9b 01               10028		.byte	1
00000c9c 00               10029		.byte	0
00000c9d 0503             10030		.byte	5,3
00000c9f 00000000         10031		.long	fblDiagStates
                          10032	
                          10033	.LDW_5da6f30:
00000ca3 06               10034		.byte	6
00000ca4 7375625061725461 10035		.strz	"subParTabIdx"
00000cac 6249647800      
00000cb1 be01             10036		.byte	190,1
00000cb3 3d               10037		.byte	61
00000cb4 01               10038		.byte	1
00000cb5 00000000         10039		.long	.LDW_4a4b818
00000cb9 01               10040		.byte	1
00000cba 00               10041		.byte	0
00000cbb 0503             10042		.byte	5,3
00000cbd 00000000         10043		.long	subParTabIdx
                          10044	
                          10045	.LDW_5da6a08:
00000cc1 06               10046		.byte	6
00000cc2 6572725374617445 10047		.strz	"errStatErrorCode"
00000cca 72726f72436f6465
00000cd2 00              
00000cd3 c201             10048		.byte	194,1
00000cd5 3a               10049		.byte	58
00000cd6 01               10050		.byte	1
00000cd7 00000000         10051		.long	.LDW_4a49eb0
00000cdb 01               10052		.byte	1
00000cdc 00               10053		.byte	0
00000cdd 0503             10054		.byte	5,3
00000cdf 00000000         10055		.long	errStatErrorCode
                          10056	
                          10057	.LDW_5da6f88:
00000ce3 06               10058		.byte	6
00000ce4 6572725374617446 10059		.strz	"errStatFblStates"
00000cec 626c537461746573
00000cf4 00              
00000cf5 c301             10060		.byte	195,1
00000cf7 3a               10061		.byte	58
00000cf8 01               10062		.byte	1
00000cf9 00000000         10063		.long	.LDW_4a49eb0
00000cfd 01               10064		.byte	1
00000cfe 00               10065		.byte	0

                                   Fri Apr 10 08:32:04 2020           Page 181
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
00000cff 0503             10066		.byte	5,3
00000d01 00000000         10067		.long	errStatFblStates
                          10068	
                          10069	.LDW_5da71f0:
00000d05 06               10070		.byte	6
00000d06 657272537461744c 10071		.strz	"errStatLastServiceId"
00000d0e 6173745365727669
00000d16 6365496400      
00000d1b c401             10072		.byte	196,1
00000d1d 3a               10073		.byte	58
00000d1e 01               10074		.byte	1
00000d1f 00000000         10075		.long	.LDW_4a4b818
00000d23 01               10076		.byte	1
00000d24 00               10077		.byte	0
00000d25 0503             10078		.byte	5,3
00000d27 00000000         10079		.long	errStatLastServiceId
                          10080	
                          10081	.LDW_5da6a60:
00000d2b 06               10082		.byte	6
00000d2c 6572725374617446 10083		.strz	"errStatFlashDrvVersion"
00000d34 6c61736844727656
00000d3c 657273696f6e00  
00000d43 c501             10084		.byte	197,1
00000d45 3a               10085		.byte	58
00000d46 01               10086		.byte	1
00000d47 00000000         10087		.long	.LDW_5ccb448
00000d4b 01               10088		.byte	1
00000d4c 00               10089		.byte	0
00000d4d 0503             10090		.byte	5,3
00000d4f 00000000         10091		.long	errStatFlashDrvVersion
                          10092	
                          10093	.LDW_5da6b68:
00000d53 06               10094		.byte	6
00000d54 6572725374617446 10095		.strz	"errStatFlashDrvErrorCode"
00000d5c 6c61736844727645
00000d64 72726f72436f6465
00000d6c 00              
00000d6d c601             10096		.byte	198,1
00000d6f 3a               10097		.byte	58
00000d70 01               10098		.byte	1
00000d71 00000000         10099		.long	.LDW_4a49eb0
00000d75 01               10100		.byte	1
00000d76 00               10101		.byte	0
00000d77 0503             10102		.byte	5,3
00000d79 00000000         10103		.long	errStatFlashDrvErrorCode
                          10104	
                          10105	.LDW_5da6c70:
00000d7d 06               10106		.byte	6
00000d7e 6572725374617444 10107		.strz	"errStatDescriptor"
00000d86 657363726970746f
00000d8e 7200            
00000d90 c701             10108		.byte	199,1
00000d92 3a               10109		.byte	58
00000d93 01               10110		.byte	1
00000d94 00000000         10111		.long	.LDW_5da3220
00000d98 01               10112		.byte	1
00000d99 00               10113		.byte	0
00000d9a 0503             10114		.byte	5,3
00000d9c 00000000         10115		.long	errStatDescriptor
                          10116	
                          10117	.LDW_5da8148:
00000da0 06               10118		.byte	6
00000da1 64696167506f7374 10119		.strz	"diagPostParam"
00000da9 506172616d00    
00000daf cd01             10120		.byte	205,1
00000db1 40               10121		.byte	64

                                   Fri Apr 10 08:32:04 2020           Page 182
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
00000db2 01               10122		.byte	1
00000db3 00000000         10123		.long	.LDW_4a4b818
00000db7 00               10124		.byte	0
00000db8 00               10125		.byte	0
00000db9 0503             10126		.byte	5,3
00000dbb 00000000         10127		.long	diagPostParam..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_diag_core.
                          10128	
                          10129	.LDW_5da7f38:
00000dbf 06               10130		.byte	6
00000dc0 7263727270427566 10131		.strz	"rcrrpBuffer"
00000dc8 66657200        
00000dcc cf01             10132		.byte	207,1
00000dce 40               10133		.byte	64
00000dcf 01               10134		.byte	1
00000dd0 00000000         10135		.long	.LDW_5ccbaa8
00000dd4 00               10136		.byte	0
00000dd5 00               10137		.byte	0
00000dd6 0503             10138		.byte	5,3
00000dd8 00000000         10139		.long	rcrrpBuffer..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_diag_core.
                          10140	
                          10141	.LDW_5da79b8:
00000ddc 06               10142		.byte	6
00000ddd 646961675265734c 10143		.strz	"diagResLen"
00000de5 656e00          
00000de8 d201             10144		.byte	210,1
00000dea 40               10145		.byte	64
00000deb 01               10146		.byte	1
00000dec 00000000         10147		.long	.LDW_4a4a2d0
00000df0 00               10148		.byte	0
00000df1 00               10149		.byte	0
00000df2 0503             10150		.byte	5,3
00000df4 00000000         10151		.long	diagResLen..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_diag_core.
                          10152	
                          10153	.LDW_5da81a0:
00000df8 06               10154		.byte	6
00000df9 736572766963654d 10155		.strz	"serviceMainHandler"
00000e01 61696e48616e646c
00000e09 657200          
00000e0c d401             10156		.byte	212,1
00000e0e 40               10157		.byte	64
00000e0f 01               10158		.byte	1
00000e10 00000000         10159		.long	.LDW_5cca428
00000e14 00               10160		.byte	0
00000e15 00               10161		.byte	0
00000e16 0503             10162		.byte	5,3
00000e18 00000000         10163		.long	serviceMainHandler..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_diag_core.
                          10164	
                          10165	.LDW_5da7fe8:
00000e1c 06               10166		.byte	6
00000e1d 63757272656e7453 10167		.strz	"currentServiceSessionSupport"
00000e25 6572766963655365
00000e2d 7373696f6e537570
00000e35 706f727400      
00000e3a d701             10168		.byte	215,1
00000e3c 40               10169		.byte	64
00000e3d 01               10170		.byte	1
00000e3e 00000000         10171		.long	.LDW_4a4b818
00000e42 00               10172		.byte	0
00000e43 00               10173		.byte	0
00000e44 0503             10174		.byte	5,3
00000e46 00000000         10175		.long	currentServiceSessionSupport..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_diag_core.
                          10176	
                          10177	.LDW_5da7a10:

                                   Fri Apr 10 08:32:04 2020           Page 183
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
00000e4a 06               10178		.byte	6
00000e4b 6361636865645365 10179		.strz	"cachedSegment"
00000e53 676d656e7400    
00000e59 dc01             10180		.byte	220,1
00000e5b 40               10181		.byte	64
00000e5c 01               10182		.byte	1
00000e5d 00000000         10183		.long	.LDW_4a4d798
00000e61 00               10184		.byte	0
00000e62 00               10185		.byte	0
00000e63 0503             10186		.byte	5,3
00000e65 00000000         10187		.long	cachedSegment..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_diag_core.
                          10188	
                          10189	.LDW_5da7ee0:
00000e69 06               10190		.byte	6
00000e6a 636163686564426c 10191		.strz	"cachedBlock"
00000e72 6f636b00        
00000e76 dd01             10192		.byte	221,1
00000e78 40               10193		.byte	64
00000e79 01               10194		.byte	1
00000e7a 00000000         10195		.long	.LDW_5cca218
00000e7e 00               10196		.byte	0
00000e7f 00               10197		.byte	0
00000e80 0503             10198		.byte	5,3
00000e82 00000000         10199		.long	cachedBlock..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_diag_core.
                          10200	
                          10201	.LDW_5da81f8:
00000e86 06               10202		.byte	6
00000e87 6e65787456616c69 10203		.strz	"nextValidSegment"
00000e8f 645365676d656e74
00000e97 00              
00000e98 de01             10204		.byte	222,1
00000e9a 40               10205		.byte	64
00000e9b 01               10206		.byte	1
00000e9c 00000000         10207		.long	.LDW_4a4d798
00000ea0 00               10208		.byte	0
00000ea1 00               10209		.byte	0
00000ea2 0503             10210		.byte	5,3
00000ea4 00000000         10211		.long	nextValidSegment..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_diag_core.
                          10212	
                          10213	.LDW_5da8040:
00000ea8 06               10214		.byte	6
00000ea9 7365727669636549 10215		.strz	"serviceInfo"
00000eb1 6e666f00        
00000eb5 ea01             10216		.byte	234,1
00000eb7 54               10217		.byte	84
00000eb8 01               10218		.byte	1
00000eb9 00000000         10219		.long	.LDW_5d666c8
00000ebd 01               10220		.byte	1
00000ebe 00               10221		.byte	0
00000ebf 0503             10222		.byte	5,3
00000ec1 00000000         10223		.long	serviceInfo
                          10224	
                          10225	.LDW_5da83b0:
00000ec5 06               10226		.byte	6
00000ec6 6469616752657370 10227		.strz	"diagResponseFlag"
00000ece 6f6e7365466c6167
00000ed6 00              
00000ed7 ec01             10228		.byte	236,1
00000ed9 39               10229		.byte	57
00000eda 01               10230		.byte	1
00000edb 00000000         10231		.long	.LDW_4a4b818
00000edf 01               10232		.byte	1
00000ee0 00               10233		.byte	0

                                   Fri Apr 10 08:32:04 2020           Page 184
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
00000ee1 0503             10234		.byte	5,3
00000ee3 00000000         10235		.long	diagResponseFlag
                          10236	
                          10237	.LDW_5da8250:
00000ee7 06               10238		.byte	6
00000ee8 646961674572726f 10239		.strz	"diagErrorCode"
00000ef0 72436f646500    
00000ef6 ee01             10240		.byte	238,1
00000ef8 39               10241		.byte	57
00000ef9 01               10242		.byte	1
00000efa 00000000         10243		.long	.LDW_4a4b818
00000efe 01               10244		.byte	1
00000eff 00               10245		.byte	0
00000f00 0503             10246		.byte	5,3
00000f02 00000000         10247		.long	diagErrorCode
                          10248	
                          10249	.LDW_5da7a68:
00000f06 06               10250		.byte	6
00000f07 7365676d656e7443 10251		.strz	"segmentCount"
00000f0f 6f756e7400      
00000f14 f301             10252		.byte	243,1
00000f16 39               10253		.byte	57
00000f17 01               10254		.byte	1
00000f18 00000000         10255		.long	.LDW_4a4b818
00000f1c 01               10256		.byte	1
00000f1d 00               10257		.byte	0
00000f1e 0503             10258		.byte	5,3
00000f20 00000000         10259		.long	segmentCount
                          10260	
                          10261	.LDW_5da82a8:
00000f24 06               10262		.byte	6
00000f25 6563755265736574 10263		.strz	"ecuResetTimeout"
00000f2d 54696d656f757400
00000f35 f701             10264		.byte	247,1
00000f37 39               10265		.byte	57
00000f38 01               10266		.byte	1
00000f39 00000000         10267		.long	.LDW_4a49eb0
00000f3d 01               10268		.byte	1
00000f3e 00               10269		.byte	0
00000f3f 0503             10270		.byte	5,3
00000f41 00000000         10271		.long	ecuResetTimeout
                          10272	
                          10273	.LDW_5da8300:
00000f45 06               10274		.byte	6
00000f46 736c656570436f75 10275		.strz	"sleepCounter"
00000f4e 6e74657200      
00000f53 fb01             10276		.byte	251,1
00000f55 40               10277		.byte	64
00000f56 01               10278		.byte	1
00000f57 00000000         10279		.long	.LDW_5cc9e20
00000f5b 01               10280		.byte	1
00000f5c 00               10281		.byte	0
00000f5d 0503             10282		.byte	5,3
00000f5f 00000000         10283		.long	sleepCounter
                          10284	
                          10285	.LDW_5da8358:
00000f63 06               10286		.byte	6
00000f64 7365635365637572 10287		.strz	"secSecurityAccessDelay"
00000f6c 6974794163636573
00000f74 7344656c617900  
00000f7b ff01             10288		.byte	255,1
00000f7d 39               10289		.byte	57

                                   Fri Apr 10 08:32:04 2020           Page 185
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
00000f7e 01               10290		.byte	1
00000f7f 00000000         10291		.long	.LDW_5cc9e20
00000f83 01               10292		.byte	1
00000f84 00               10293		.byte	0
00000f85 0503             10294		.byte	5,3
00000f87 00000000         10295		.long	secSecurityAccessDelay
                          10296	
                          10297	.LDW_5daacc0:
00000f8b 18               10298		.byte	24
00000f8c 46626c4c6f6f6b46 10299		.strz	"FblLookForWatchdog"
00000f94 6f72576174636864
00000f9c 6f6700          
00000f9f 8e01             10300		.byte	142,1
00000fa1 13               10301		.byte	19
00000fa2 1b               10302		.byte	27
00000fa3 00000000         10303		.long	.LDW_4a4b818
00000fa7 01               10304		.byte	1
00000fa8 00               10305		.byte	0
00000fa9 01               10306		.byte	1
00000faa 01               10307		.byte	1
00000fab 00               10308		.byte	0
00000fac 01               10309		.byte	1
                          10310	
                          10311		.section	.debug_abbrev
000000d4 18               10312		.byte	24
000000d5 2e               10313		.byte	46
000000d6 01               10314		.byte	1
000000d7 0308             10315		.byte	3,8
000000d9 3b0f             10316		.byte	59,15
000000db 390f             10317		.byte	57,15
000000dd 3a0f             10318		.byte	58,15
000000df 4910             10319		.byte	73,16
000000e1 3c0c             10320		.byte	60,12
000000e3 200b             10321		.byte	32,11
000000e5 3f0c             10322		.byte	63,12
000000e7 320b             10323		.byte	50,11
000000e9 4c0b             10324		.byte	76,11
000000eb 270c             10325		.byte	39,12
000000ed 0000             10326		.byte	0,0
                          10327	
                          10328		.section	.debug_info
00000fad 00               10329		.byte	0
                          10330	
                          10331	.LDW_5daad58:
00000fae 18               10332		.byte	24
00000faf 4d656d4472697665 10333		.strz	"MemDriver_RDeinitSync"
00000fb7 725f524465696e69
00000fbf 7453796e6300    
00000fc5 a402             10334		.byte	164,2
00000fc7 19               10335		.byte	25
00000fc8 1d               10336		.byte	29
00000fc9 00000000         10337		.long	.LDW_5da33d8
00000fcd 01               10338		.byte	1
00000fce 00               10339		.byte	0
00000fcf 01               10340		.byte	1
00000fd0 01               10341		.byte	1
00000fd1 00               10342		.byte	0
00000fd2 01               10343		.byte	1
                          10344	
00000fd3 00               10345		.byte	0

                                   Fri Apr 10 08:32:04 2020           Page 186
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
                          10346	
                          10347	.LDW_5dad8f8:
00000fd4 17               10348		.byte	23
00000fd5 46626c4377536574 10349		.strz	"FblCwSetTxInit"
00000fdd 5478496e697400  
00000fe4 ca01             10350		.byte	202,1
00000fe6 06               10351		.byte	6
00000fe7 23               10352		.byte	35
00000fe8 01               10353		.byte	1
00000fe9 00               10354		.byte	0
00000fea 01               10355		.byte	1
00000feb 01               10356		.byte	1
00000fec 00               10357		.byte	0
00000fed 01               10358		.byte	1
                          10359	
                          10360		.section	.debug_abbrev
000000ef 17               10361		.byte	23
000000f0 2e               10362		.byte	46
000000f1 01               10363		.byte	1
000000f2 0308             10364		.byte	3,8
000000f4 3b0f             10365		.byte	59,15
000000f6 390f             10366		.byte	57,15
000000f8 3a0f             10367		.byte	58,15
000000fa 3c0c             10368		.byte	60,12
000000fc 200b             10369		.byte	32,11
000000fe 3f0c             10370		.byte	63,12
00000100 320b             10371		.byte	50,11
00000102 4c0b             10372		.byte	76,11
00000104 270c             10373		.byte	39,12
00000106 0000             10374		.byte	0,0
                          10375	
                          10376		.section	.debug_info
00000fee 00               10377		.byte	0
                          10378	
                          10379	.LDW_5dadac0:
00000fef 17               10380		.byte	23
00000ff0 46626c437743616e 10381		.strz	"FblCwCanTransmit"
00000ff8 5472616e736d6974
00001000 00              
00001001 d401             10382		.byte	212,1
00001003 06               10383		.byte	6
00001004 23               10384		.byte	35
00001005 01               10385		.byte	1
00001006 00               10386		.byte	0
00001007 01               10387		.byte	1
00001008 01               10388		.byte	1
00001009 00               10389		.byte	0
0000100a 01               10390		.byte	1
                          10391	
0000100b 00               10392		.byte	0
                          10393	
                          10394	.LDW_5dacab8:
0000100c 17               10395		.byte	23
0000100d 46626c4377547261 10396		.strz	"FblCwTransmitRP"
00001015 6e736d6974525000
0000101d d501             10397		.byte	213,1
0000101f 06               10398		.byte	6
00001020 23               10399		.byte	35
00001021 01               10400		.byte	1
00001022 00               10401		.byte	0

                                   Fri Apr 10 08:32:04 2020           Page 187
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
00001023 01               10402		.byte	1
00001024 01               10403		.byte	1
00001025 00               10404		.byte	0
00001026 01               10405		.byte	1
                          10406	
00001027 00               10407		.byte	0
                          10408	
                          10409	.LDW_5dad698:
00001028 17               10410		.byte	23
00001029 46626c4377446973 10411		.strz	"FblCwDiscardReception"
00001031 6361726452656365
00001039 7074696f6e00    
0000103f d601             10412		.byte	214,1
00001041 06               10413		.byte	6
00001042 23               10414		.byte	35
00001043 01               10415		.byte	1
00001044 00               10416		.byte	0
00001045 01               10417		.byte	1
00001046 01               10418		.byte	1
00001047 00               10419		.byte	0
00001048 01               10420		.byte	1
                          10421	
00001049 00               10422		.byte	0
                          10423	
                          10424	.LDW_5dad600:
0000104a 17               10425		.byte	23
0000104b 46626c4377536574 10426		.strz	"FblCwSetRxBlock"
00001053 5278426c6f636b00
0000105b d701             10427		.byte	215,1
0000105d 06               10428		.byte	6
0000105e 23               10429		.byte	35
0000105f 01               10430		.byte	1
00001060 00               10431		.byte	0
00001061 01               10432		.byte	1
00001062 01               10433		.byte	1
00001063 00               10434		.byte	0
00001064 01               10435		.byte	1
                          10436	
00001065 00               10437		.byte	0
                          10438	
                          10439	.LDW_5dada28:
00001066 17               10440		.byte	23
00001067 46626c4377526573 10441		.strz	"FblCwResetRxBlock"
0000106f 65745278426c6f63
00001077 6b00            
00001079 d801             10442		.byte	216,1
0000107b 06               10443		.byte	6
0000107c 23               10444		.byte	35
0000107d 01               10445		.byte	1
0000107e 00               10446		.byte	0
0000107f 01               10447		.byte	1
00001080 01               10448		.byte	1
00001081 00               10449		.byte	0
00001082 01               10450		.byte	1
                          10451	
00001083 00               10452		.byte	0
                          10453	
                          10454	.LDW_5dad0a8:
00001084 17               10455		.byte	23
00001085 46626c4469616753 10456		.strz	"FblDiagSecAccessDelayExpired"
0000108d 6563416363657373
00001095 44656c6179457870
0000109d 6972656400      
000010a2 e802             10457		.byte	232,2

                                   Fri Apr 10 08:32:04 2020           Page 188
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
000010a4 06               10458		.byte	6
000010a5 2e               10459		.byte	46
000010a6 01               10460		.byte	1
000010a7 00               10461		.byte	0
000010a8 01               10462		.byte	1
000010a9 01               10463		.byte	1
000010aa 00               10464		.byte	0
000010ab 01               10465		.byte	1
                          10466	
000010ac 00               10467		.byte	0
                          10468	
                          10469	.LDW_5dae018:
000010ad 18               10470		.byte	24
000010ae 46626c4d656d496e 10471		.strz	"FblMemInitPowerOn"
000010b6 6974506f7765724f
000010be 6e00            
000010c0 c206             10472		.byte	194,6
000010c2 10               10473		.byte	16
000010c3 2f               10474		.byte	47
000010c4 00000000         10475		.long	.LDW_5da6818
000010c8 01               10476		.byte	1
000010c9 00               10477		.byte	0
000010ca 01               10478		.byte	1
000010cb 01               10479		.byte	1
000010cc 00               10480		.byte	0
000010cd 01               10481		.byte	1
                          10482	
000010ce 00               10483		.byte	0
                          10484	
                          10485	.LDW_5dae3a8:
000010cf 17               10486		.byte	23
000010d0 46626c4d656d4465 10487		.strz	"FblMemDeinit"
000010d8 696e697400      
000010dd c506             10488		.byte	197,6
000010df 06               10489		.byte	6
000010e0 2f               10490		.byte	47
000010e1 01               10491		.byte	1
000010e2 00               10492		.byte	0
000010e3 01               10493		.byte	1
000010e4 01               10494		.byte	1
000010e5 00               10495		.byte	0
000010e6 01               10496		.byte	1
                          10497	
000010e7 00               10498		.byte	0
                          10499	
                          10500	.LDW_5dae608:
000010e8 18               10501		.byte	24
000010e9 46626c4d656d4765 10502		.strz	"FblMemGetActiveBuffer"
000010f1 7441637469766542
000010f9 756666657200    
000010ff c606             10503		.byte	198,6
00001101 10               10504		.byte	16
00001102 2f               10505		.byte	47
00001103 00000000         10506		.long	.LDW_5da6818
00001107 01               10507		.byte	1
00001108 00               10508		.byte	0
00001109 01               10509		.byte	1
0000110a 01               10510		.byte	1
0000110b 00               10511		.byte	0
0000110c 01               10512		.byte	1
                          10513	

                                   Fri Apr 10 08:32:04 2020           Page 189
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
0000110d 00               10514		.byte	0
                          10515	
                          10516	.LDW_5db15d0:
0000110e 18               10517		.byte	24
0000110f 4170706c46626c43 10518		.strz	"ApplFblCheckConditions"
00001117 6865636b436f6e64
0000111f 6974696f6e7300  
00001126 a202             10519		.byte	162,2
00001128 0c               10520		.byte	12
00001129 31               10521		.byte	49
0000112a 00000000         10522		.long	.LDW_4a4a380
0000112e 01               10523		.byte	1
0000112f 00               10524		.byte	0
00001130 01               10525		.byte	1
00001131 01               10526		.byte	1
00001132 00               10527		.byte	0
00001133 01               10528		.byte	1
                          10529	
00001134 00               10530		.byte	0
                          10531	
                          10532	.LDW_5db1830:
00001135 17               10533		.byte	23
00001136 4170706c46626c52 10534		.strz	"ApplFblResetVfp"
0000113e 6573657456667000
00001146 a702             10535		.byte	167,2
00001148 06               10536		.byte	6
00001149 31               10537		.byte	49
0000114a 01               10538		.byte	1
0000114b 00               10539		.byte	0
0000114c 01               10540		.byte	1
0000114d 01               10541		.byte	1
0000114e 00               10542		.byte	0
0000114f 01               10543		.byte	1
                          10544	
00001150 00               10545		.byte	0
                          10546	
                          10547	.LDW_5db1eb8:
00001151 18               10548		.byte	24
00001152 4170706c46626c53 10549		.strz	"ApplFblSecuritySeedInit"
0000115a 6563757269747953
00001162 656564496e697400
0000116a ae02             10550		.byte	174,2
0000116c 08               10551		.byte	8
0000116d 31               10552		.byte	49
0000116e 00000000         10553		.long	.LDW_4a4b818
00001172 01               10554		.byte	1
00001173 00               10555		.byte	0
00001174 01               10556		.byte	1
00001175 01               10557		.byte	1
00001176 00               10558		.byte	0
00001177 01               10559		.byte	1
                          10560	
00001178 00               10561		.byte	0
                          10562	
                          10563	.LDW_5db1cf0:
00001179 18               10564		.byte	24
0000117a 4170706c46626c53 10565		.strz	"ApplFblSecurityInit"
00001182 6563757269747949
0000118a 6e697400        
0000118e b302             10566		.byte	179,2
00001190 08               10567		.byte	8
00001191 31               10568		.byte	49
00001192 00000000         10569		.long	.LDW_4a4b818

                                   Fri Apr 10 08:32:04 2020           Page 190
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
00001196 01               10570		.byte	1
00001197 00               10571		.byte	0
00001198 01               10572		.byte	1
00001199 01               10573		.byte	1
0000119a 00               10574		.byte	0
0000119b 01               10575		.byte	1
                          10576	
0000119c 00               10577		.byte	0
                          10578	
                          10579	.LDW_5db1960:
0000119d 17               10580		.byte	23
0000119e 4170706c46626c46 10581		.strz	"ApplFblFatalError"
000011a6 6174616c4572726f
000011ae 7200            
000011b0 c402             10582		.byte	196,2
000011b2 06               10583		.byte	6
000011b3 31               10584		.byte	49
000011b4 01               10585		.byte	1
000011b5 00               10586		.byte	0
000011b6 01               10587		.byte	1
000011b7 01               10588		.byte	1
000011b8 00               10589		.byte	0
000011b9 01               10590		.byte	1
                          10591	
000011ba 00               10592		.byte	0
                          10593	
                          10594	.LDW_5db19f8:
000011bb 17               10595		.byte	23
000011bc 4170706c46626c42 10596		.strz	"ApplFblBusSleep"
000011c4 7573536c65657000
000011cc d102             10597		.byte	209,2
000011ce 06               10598		.byte	6
000011cf 31               10599		.byte	49
000011d0 01               10600		.byte	1
000011d1 00               10601		.byte	0
000011d2 01               10602		.byte	1
000011d3 01               10603		.byte	1
000011d4 00               10604		.byte	0
000011d5 01               10605		.byte	1
                          10606	
000011d6 00               10607		.byte	0
                          10608	
                          10609	.LDW_5db1078:
000011d7 17               10610		.byte	23
000011d8 4170706c46626c49 10611		.strz	"ApplFblInitErrStatus"
000011e0 6e69744572725374
000011e8 6174757300      
000011ed 9e02             10612		.byte	158,2
000011ef 06               10613		.byte	6
000011f0 33               10614		.byte	51
000011f1 01               10615		.byte	1
000011f2 00               10616		.byte	0
000011f3 01               10617		.byte	1
000011f4 01               10618		.byte	1
000011f5 00               10619		.byte	0
000011f6 01               10620		.byte	1
                          10621	
000011f7 00               10622		.byte	0
                          10623	
                          10624	.LDW_5db05c8:
000011f8 18               10625		.byte	24

                                   Fri Apr 10 08:32:04 2020           Page 191
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
000011f9 46626c4469616744 10626		.strz	"FblDiagDefaultMainHandler"
00001201 656661756c744d61
00001209 696e48616e646c65
00001211 7200            
00001213 b403             10627		.byte	180,3
00001215 0c               10628		.byte	12
00001216 36               10629		.byte	54
00001217 00000000         10630		.long	.LDW_4a4a380
0000121b 01               10631		.byte	1
0000121c 00               10632		.byte	0
0000121d 01               10633		.byte	1
0000121e 01               10634		.byte	1
0000121f 00               10635		.byte	0
00001220 01               10636		.byte	1
                          10637	
00001221 00               10638		.byte	0
                          10639	
                          10640	.LDW_5db06f8:
00001222 17               10641		.byte	23
00001223 46626c4469616750 10642		.strz	"FblDiagProcessRcNrc"
0000122b 726f636573735263
00001233 4e726300        
00001237 b603             10643		.byte	182,3
00001239 06               10644		.byte	6
0000123a 36               10645		.byte	54
0000123b 01               10646		.byte	1
0000123c 00               10647		.byte	0
0000123d 01               10648		.byte	1
0000123e 01               10649		.byte	1
0000123f 00               10650		.byte	0
00001240 01               10651		.byte	1
                          10652	
00001241 00               10653		.byte	0
                          10654	
                          10655	.LDW_5db0828:
00001242 17               10656		.byte	23
00001243 46626c4469616750 10657		.strz	"FblDiagProcessSubfunctionNrc"
0000124b 726f636573735375
00001253 6266756e6374696f
0000125b 6e4e726300      
00001260 b703             10658		.byte	183,3
00001262 06               10659		.byte	6
00001263 36               10660		.byte	54
00001264 01               10661		.byte	1
00001265 00               10662		.byte	0
00001266 01               10663		.byte	1
00001267 01               10664		.byte	1
00001268 00               10665		.byte	0
00001269 01               10666		.byte	1
                          10667	
0000126a 00               10668		.byte	0
                          10669	
                          10670	.LDW_5db0eb0:
0000126b 17               10671		.byte	23
0000126c 46626c4469616750 10672		.strz	"FblDiagProcessSubparamNrc"
00001274 726f636573735375
0000127c 62706172616d4e72
00001284 6300            
00001286 b803             10673		.byte	184,3
00001288 06               10674		.byte	6
00001289 36               10675		.byte	54
0000128a 01               10676		.byte	1
0000128b 00               10677		.byte	0
0000128c 01               10678		.byte	1
0000128d 01               10679		.byte	1
0000128e 00               10680		.byte	0
0000128f 01               10681		.byte	1

                                   Fri Apr 10 08:32:04 2020           Page 192
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
                          10682	
00001290 00               10683		.byte	0
                          10684	
                          10685	.LDW_5db08c0:
00001291 17               10686		.byte	23
00001292 46626c4469616750 10687		.strz	"FblDiagProcessServiceNrc"
0000129a 726f636573735365
000012a2 72766963654e7263
000012aa 00              
000012ab b903             10688		.byte	185,3
000012ad 06               10689		.byte	6
000012ae 36               10690		.byte	54
000012af 01               10691		.byte	1
000012b0 00               10692		.byte	0
000012b1 01               10693		.byte	1
000012b2 01               10694		.byte	1
000012b3 00               10695		.byte	0
000012b4 01               10696		.byte	1
                          10697	
000012b5 00               10698		.byte	0
                          10699	
                          10700	.LDW_5db09f0:
000012b6 18               10701		.byte	24
000012b7 46626c4469616743 10702		.strz	"FblDiagCheckSpecialLength"
000012bf 6865636b53706563
000012c7 69616c4c656e6774
000012cf 6800            
000012d1 ba03             10703		.byte	186,3
000012d3 08               10704		.byte	8
000012d4 36               10705		.byte	54
000012d5 00000000         10706		.long	.LDW_4a4b818
000012d9 01               10707		.byte	1
000012da 00               10708		.byte	0
000012db 01               10709		.byte	1
000012dc 01               10710		.byte	1
000012dd 00               10711		.byte	0
000012de 01               10712		.byte	1
                          10713	
000012df 00               10714		.byte	0
                          10715	
                          10716	.LDW_5db0a88:
000012e0 17               10717		.byte	23
000012e1 46626c446961674f 10718		.strz	"FblDiagOemInitPowerOn"
000012e9 656d496e6974506f
000012f1 7765724f6e00    
000012f7 bd03             10719		.byte	189,3
000012f9 06               10720		.byte	6
000012fa 36               10721		.byte	54
000012fb 01               10722		.byte	1
000012fc 00               10723		.byte	0
000012fd 01               10724		.byte	1
000012fe 01               10725		.byte	1
000012ff 00               10726		.byte	0
00001300 01               10727		.byte	1
                          10728	
00001301 00               10729		.byte	0
                          10730	
                          10731	.LDW_5db0fe0:
00001302 17               10732		.byte	23
00001303 46626c446961674f 10733		.strz	"FblDiagOemPostInit"
0000130b 656d506f7374496e
00001313 697400          
00001316 c303             10734		.byte	195,3
00001318 06               10735		.byte	6
00001319 36               10736		.byte	54
0000131a 01               10737		.byte	1

                                   Fri Apr 10 08:32:04 2020           Page 193
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
0000131b 00               10738		.byte	0
0000131c 01               10739		.byte	1
0000131d 01               10740		.byte	1
0000131e 00               10741		.byte	0
0000131f 01               10742		.byte	1
                          10743	
00001320 00               10744		.byte	0
                          10745	
                          10746	.LDW_4a4b870:
00001321 16               10747		.byte	22
00001322 46626c5265616450 10748		.strz	"FblReadProm"
0000132a 726f6d00        
0000132e b402             10749		.byte	180,2
00001330 0c               10750		.byte	12
00001331 01               10751		.byte	1
00001332 00000000         10752		.long	.LDW_5cc9ed0
00001336 00000000         10753		.long	FblReadProm
0000133a 00000000         10754		.long	__ghs_eofn_FblReadProm
0000133e 0151             10755		.byte	1,81
00001340 808080fc0f       10756		.byte	128,128,128,252,15
00001345 0c               10757		.byte	12
00001346 00               10758		.byte	0
00001347 30               10759		.byte	48
00001348 00               10760		.byte	0
00001349 00               10761		.byte	0
0000134a 00               10762		.byte	0
0000134b 01               10763		.byte	1
0000134c 01               10764		.byte	1
0000134d 00               10765		.byte	0
0000134e 01               10766		.byte	1
                          10767	
                          10768		.section	.debug_abbrev
00000108 16               10769		.byte	22
00000109 2e               10770		.byte	46
0000010a 01               10771		.byte	1
0000010b 0308             10772		.byte	3,8
0000010d 3b0f             10773		.byte	59,15
0000010f 390f             10774		.byte	57,15
00000111 3a0f             10775		.byte	58,15
00000113 4910             10776		.byte	73,16
00000115 1101             10777		.byte	17,1
00000117 1201             10778		.byte	18,1
00000119 400a             10779		.byte	64,10
0000011b 8341             10780		.byte	131,65
0000011d 0f               10781		.byte	15
0000011e 8741             10782		.byte	135,65
00000120 0d               10783		.byte	13
00000121 8541             10784		.byte	133,65
00000123 0f               10785		.byte	15
00000124 8641             10786		.byte	134,65
00000126 0d               10787		.byte	13
00000127 9241             10788		.byte	146,65
00000129 0f               10789		.byte	15
0000012a 3c0c             10790		.byte	60,12
0000012c 200b             10791		.byte	32,11
0000012e 3f0c             10792		.byte	63,12
00000130 320b             10793		.byte	50,11

                                   Fri Apr 10 08:32:04 2020           Page 194
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
00000132 4c0b             10794		.byte	76,11
00000134 270c             10795		.byte	39,12
00000136 0000             10796		.byte	0,0
                          10797	
                          10798		.section	.debug_frame
                          10799	.LDW_5ccd760:
00000090 00000014         10800		.long	.LDW_unq_4-.LDW_unq_3
                          10801	.LDW_unq_3:
00000094 00000000         10802		.long	.LDW_5cc4c70
00000098 00000000         10803		.long	FblReadProm
0000009c 00000102         10804		.long	__ghs_eofn_FblReadProm-FblReadProm
000000a0 01               10805		.byte	1
000000a1 00000000         10806		.long	.LDW71
000000a5 00               10807		.byte	0
000000a6 00               10808		.byte	0
000000a7 00               10809		.byte	0
                          10810	.LDW_unq_4:
                          10811		.section	.debug_line
00000624 000502           10812		.byte	0,5,2
00000627 00000000         10813		.long	FblReadProm
0000062b 06               10814		.byte	6
0000062c 03               10815		.byte	3
0000062d b402             10816		.byte	180,2
0000062f 02               10817		.byte	2
00000630 00               10818		.byte	0
00000631 01               10819		.byte	1
00000632 03               10820		.byte	3
00000633 06               10821		.byte	6
00000634 02               10822		.byte	2
00000635 12               10823		.byte	18
00000636 01               10824		.byte	1
00000637 1c               10825		.byte	28
00000638 000502           10826		.byte	0,5,2
0000063b 00000000         10827		.long	.LDWlin16
0000063f 0d               10828		.byte	13
00000640 000502           10829		.byte	0,5,2
00000643 00000000         10830		.long	.LDWlin17
00000647 0c               10831		.byte	12
00000648 000502           10832		.byte	0,5,2
0000064b 00000000         10833		.long	.LDWlin18
0000064f 0b               10834		.byte	11
00000650 03               10835		.byte	3
00000651 07               10836		.byte	7
00000652 02               10837		.byte	2
00000653 06               10838		.byte	6
00000654 01               10839		.byte	1
00000655 000502           10840		.byte	0,5,2
00000658 00000000         10841		.long	.LDWlin19
0000065c 0b               10842		.byte	11
0000065d 0c               10843		.byte	12
0000065e 000502           10844		.byte	0,5,2
00000661 00000000         10845		.long	.LDWlin20
00000665 03               10846		.byte	3
00000666 04               10847		.byte	4
00000667 02               10848		.byte	2
00000668 00               10849		.byte	0

                                   Fri Apr 10 08:32:04 2020           Page 195
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
00000669 01               10850		.byte	1
0000066a 0c               10851		.byte	12
0000066b 25               10852		.byte	37
0000066c 2c               10853		.byte	44
0000066d 13               10854		.byte	19
0000066e 02               10855		.byte	2
0000066f 00               10856		.byte	0
00000670 0b               10857		.byte	11
00000671 02               10858		.byte	2
00000672 00               10859		.byte	0
00000673 0b               10860		.byte	11
00000674 02               10861		.byte	2
00000675 00               10862		.byte	0
00000676 0d               10863		.byte	13
00000677 15               10864		.byte	21
00000678 000502           10865		.byte	0,5,2
0000067b 00000000         10866		.long	.LDWlin21
0000067f 0b               10867		.byte	11
00000680 0b               10868		.byte	11
00000681 0d               10869		.byte	13
00000682 000502           10870		.byte	0,5,2
00000685 00000000         10871		.long	.LDWlin22
00000689 0b               10872		.byte	11
0000068a 0b               10873		.byte	11
0000068b 24               10874		.byte	36
0000068c 1c               10875		.byte	28
0000068d 000502           10876		.byte	0,5,2
00000690 00000000         10877		.long	.LDWlin23
00000694 0b               10878		.byte	11
00000695 0b               10879		.byte	11
00000696 000502           10880		.byte	0,5,2
00000699 00000000         10881		.long	.LDWlin24
0000069d 0c               10882		.byte	12
0000069e 0d               10883		.byte	13
0000069f 0c               10884		.byte	12
000006a0 02               10885		.byte	2
000006a1 00               10886		.byte	0
000006a2 0b               10887		.byte	11
000006a3 0c               10888		.byte	12
000006a4 0b               10889		.byte	11
000006a5 13               10890		.byte	19
000006a6 13               10891		.byte	19
000006a7 02               10892		.byte	2
000006a8 00               10893		.byte	0
000006a9 0c               10894		.byte	12
000006aa 000502           10895		.byte	0,5,2
000006ad 00000000         10896		.long	.LDWlin25
000006b1 0b               10897		.byte	11
000006b2 0b               10898		.byte	11
000006b3 1b               10899		.byte	27
000006b4 13               10900		.byte	19
000006b5 23               10901		.byte	35
000006b6 000502           10902		.byte	0,5,2
000006b9 00000000         10903		.long	.LDWlin26
000006bd 0b               10904		.byte	11
000006be 0c               10905		.byte	12

                                   Fri Apr 10 08:32:04 2020           Page 196
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
000006bf 0c               10906		.byte	12
000006c0 13               10907		.byte	19
000006c1 02               10908		.byte	2
000006c2 00               10909		.byte	0
000006c3 0c               10910		.byte	12
000006c4 000502           10911		.byte	0,5,2
000006c7 00000000         10912		.long	.LDWlin27
000006cb 03               10913		.byte	3
000006cc 59               10914		.byte	89
000006cd 02               10915		.byte	2
000006ce 00               10916		.byte	0
000006cf 01               10917		.byte	1
000006d0 000502           10918		.byte	0,5,2
000006d3 00000000         10919		.long	.LDWlin28
000006d7 03               10920		.byte	3
000006d8 28               10921		.byte	40
000006d9 02               10922		.byte	2
000006da 00               10923		.byte	0
000006db 01               10924		.byte	1
000006dc 0b               10925		.byte	11
000006dd 0c               10926		.byte	12
000006de 0c               10927		.byte	12
000006df 02               10928		.byte	2
000006e0 00               10929		.byte	0
000006e1 0d               10930		.byte	13
000006e2 06               10931		.byte	6
000006e3 02               10932		.byte	2
000006e4 02               10933		.byte	2
000006e5 02               10934		.byte	2
000006e6 0e               10935		.byte	14
000006e7 000101           10936		.byte	0,1,1
                          10937		.section	.debug_info
                          10938	.LDW_4a4b908:
0000134f 11               10939		.byte	17
00001350 6164647265737300 10940		.strz	"address"
00001358 b402             10941		.byte	180,2
0000135a 24               10942		.byte	36
0000135b 01               10943		.byte	1
0000135c 00000000         10944		.long	.LDW_5cc9f80
00001360 00               10945		.byte	0
00001361 016f             10946		.byte	1,111
                          10947	
                          10948		.section	.debug_abbrev
00000138 11               10949		.byte	17
00000139 05               10950		.byte	5
0000013a 00               10951		.byte	0
0000013b 0308             10952		.byte	3,8
0000013d 3b0f             10953		.byte	59,15
0000013f 390f             10954		.byte	57,15
00000141 3a0f             10955		.byte	58,15
00000143 4910             10956		.byte	73,16
00000145 4b0c             10957		.byte	75,12
00000147 020a             10958		.byte	2,10
00000149 0000             10959		.byte	0,0
                          10960	
                          10961		.section	.debug_info

                                   Fri Apr 10 08:32:04 2020           Page 197
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
                          10962	.LDW_4a4b960:
00001363 11               10963		.byte	17
00001364 62756666657200   10964		.strz	"buffer"
0000136b b402             10965		.byte	180,2
0000136d 35               10966		.byte	53
0000136e 01               10967		.byte	1
0000136f 00000000         10968		.long	.LDW_4a0c648
00001373 00               10969		.byte	0
00001374 0169             10970		.byte	1,105
                          10971	
                          10972	.LDW_4a4b9b8:
00001376 11               10973		.byte	17
00001377 6c656e67746800   10974		.strz	"length"
0000137e b402             10975		.byte	180,2
00001380 48               10976		.byte	72
00001381 01               10977		.byte	1
00001382 00000000         10978		.long	.LDW_5cc9ed0
00001386 00               10979		.byte	0
00001387 016e             10980		.byte	1,110
                          10981	
                          10982	.LDW_4a033b0:
00001389 1f               10983		.byte	31
0000138a 00000000         10984		.long	.LDW61
0000138e 00000000         10985		.long	.LDW71
                          10986	
                          10987		.section	.debug_abbrev
0000014b 1f               10988		.byte	31
0000014c 0b               10989		.byte	11
0000014d 01               10990		.byte	1
0000014e 1101             10991		.byte	17,1
00000150 1201             10992		.byte	18,1
00000152 0000             10993		.byte	0,0
                          10994	
                          10995		.section	.debug_info
                          10996	.LDW_4a4d6e8:
00001392 06               10997		.byte	6
00001393 61637475616c5265 10998		.strz	"actualReadCount"
0000139b 6164436f756e7400
000013a3 b602             10999		.byte	182,2
000013a5 0f               11000		.byte	15
000013a6 01               11001		.byte	1
000013a7 00000000         11002		.long	.LDW_5cc9ed0
000013ab 00               11003		.byte	0
000013ac 00               11004		.byte	0
000013ad 0167             11005		.byte	1,103
                          11006	
                          11007	.LDW_4a4d740:
000013af 06               11008		.byte	6
000013b0 63757272656e7452 11009		.strz	"currentReadCount"
000013b8 656164436f756e74
000013c0 00              
000013c1 b702             11010		.byte	183,2
000013c3 0f               11011		.byte	15
000013c4 01               11012		.byte	1
000013c5 00000000         11013		.long	.LDW_5cc9ed0
000013c9 00               11014		.byte	0
000013ca 00               11015		.byte	0
000013cb 016a             11016		.byte	1,106
                          11017	

                                   Fri Apr 10 08:32:04 2020           Page 198
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
                          11018	.LDW_4a4d7f0:
000013cd 06               11019		.byte	6
000013ce 6e6578744d656d53 11020		.strz	"nextMemSegment"
000013d6 65676d656e7400  
000013dd b802             11021		.byte	184,2
000013df 0f               11022		.byte	15
000013e0 01               11023		.byte	1
000013e1 00000000         11024		.long	.LDW_4a4d798
000013e5 00               11025		.byte	0
000013e6 00               11026		.byte	0
000013e7 016d             11027		.byte	1,109
                          11028	
000013e9 00               11029		.byte	0
                          11030	
000013ea 00               11031		.byte	0
                          11032	
                          11033	.LDW_4a4d848:
000013eb 15               11034		.byte	21
000013ec 46626c4469616745 11035		.strz	"FblDiagEcuReset"
000013f4 6375526573657400
000013fc 9c03             11036		.byte	156,3
000013fe 06               11037		.byte	6
000013ff 01               11038		.byte	1
00001400 00000000         11039		.long	FblDiagEcuReset
00001404 00000000         11040		.long	__ghs_eofn_FblDiagEcuReset
00001408 0151             11041		.byte	1,81
0000140a 03               11042		.byte	3
0000140b 00               11043		.byte	0
0000140c 00               11044		.byte	0
0000140d 00               11045		.byte	0
0000140e 00               11046		.byte	0
0000140f 00               11047		.byte	0
00001410 00               11048		.byte	0
00001411 01               11049		.byte	1
00001412 01               11050		.byte	1
00001413 00               11051		.byte	0
00001414 01               11052		.byte	1
                          11053	
                          11054		.section	.debug_abbrev
00000154 15               11055		.byte	21
00000155 2e               11056		.byte	46
00000156 01               11057		.byte	1
00000157 0308             11058		.byte	3,8
00000159 3b0f             11059		.byte	59,15
0000015b 390f             11060		.byte	57,15
0000015d 3a0f             11061		.byte	58,15
0000015f 1101             11062		.byte	17,1
00000161 1201             11063		.byte	18,1
00000163 400a             11064		.byte	64,10
00000165 8341             11065		.byte	131,65
00000167 0f               11066		.byte	15
00000168 8741             11067		.byte	135,65
0000016a 0d               11068		.byte	13
0000016b 8541             11069		.byte	133,65
0000016d 0f               11070		.byte	15
0000016e 8641             11071		.byte	134,65
00000170 0d               11072		.byte	13
00000171 9241             11073		.byte	146,65

                                   Fri Apr 10 08:32:04 2020           Page 199
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
00000173 0f               11074		.byte	15
00000174 3c0c             11075		.byte	60,12
00000176 200b             11076		.byte	32,11
00000178 3f0c             11077		.byte	63,12
0000017a 320b             11078		.byte	50,11
0000017c 4c0b             11079		.byte	76,11
0000017e 270c             11080		.byte	39,12
00000180 0000             11081		.byte	0,0
                          11082	
                          11083		.section	.debug_frame
                          11084	.LDW_5ccd020:
000000a8 00000014         11085		.long	.LDW_unq_6-.LDW_unq_5
                          11086	.LDW_unq_5:
000000ac 00000000         11087		.long	.LDW_5cc4c70
000000b0 00000000         11088		.long	FblDiagEcuReset
000000b4 0000001a         11089		.long	__ghs_eofn_FblDiagEcuReset-FblDiagEcuReset
000000b8 01               11090		.byte	1
000000b9 00000000         11091		.long	.LDW32
000000bd 00               11092		.byte	0
000000be 00               11093		.byte	0
000000bf 00               11094		.byte	0
                          11095	.LDW_unq_6:
                          11096		.section	.debug_line
000006ea 000502           11097		.byte	0,5,2
000006ed 00000000         11098		.long	FblDiagEcuReset
000006f1 06               11099		.byte	6
000006f2 03               11100		.byte	3
000006f3 9e03             11101		.byte	158,3
000006f5 02               11102		.byte	2
000006f6 00               11103		.byte	0
000006f7 01               11104		.byte	1
000006f8 35               11105		.byte	53
000006f9 43               11106		.byte	67
000006fa 000502           11107		.byte	0,5,2
000006fd 00000000         11108		.long	__ghs_eofn_FblDiagEcuReset
00000701 0b               11109		.byte	11
00000702 000101           11110		.byte	0,1,1
                          11111		.section	.debug_info
                          11112	.LDW_4a036b0:
00001415 1f               11113		.byte	31
00001416 00000000         11114		.long	.LDW22
0000141a 00000000         11115		.long	.LDW32
                          11116	
0000141e 00               11117		.byte	0
                          11118	
0000141f 00               11119		.byte	0
                          11120	
                          11121	.LDW_4a49bf8:
00001420 15               11122		.byte	21
00001421 46626c4469616753 11123		.strz	"FblDiagSetError"
00001429 65744572726f7200
00001431 b803             11124		.byte	184,3
00001433 06               11125		.byte	6
00001434 01               11126		.byte	1
00001435 00000000         11127		.long	FblDiagSetError
00001439 00000000         11128		.long	__ghs_eofn_FblDiagSetError
0000143d 0151             11129		.byte	1,81

                                   Fri Apr 10 08:32:04 2020           Page 200
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
0000143f 03               11130		.byte	3
00001440 00               11131		.byte	0
00001441 00               11132		.byte	0
00001442 00               11133		.byte	0
00001443 00               11134		.byte	0
00001444 00               11135		.byte	0
00001445 00               11136		.byte	0
00001446 01               11137		.byte	1
00001447 01               11138		.byte	1
00001448 00               11139		.byte	0
00001449 01               11140		.byte	1
                          11141	
                          11142		.section	.debug_frame
                          11143	.LDW_5ccd0e0:
000000c0 00000014         11144		.long	.LDW_unq_8-.LDW_unq_7
                          11145	.LDW_unq_7:
000000c4 00000000         11146		.long	.LDW_5cc4c70
000000c8 00000000         11147		.long	FblDiagSetError
000000cc 0000003c         11148		.long	__ghs_eofn_FblDiagSetError-FblDiagSetError
000000d0 01               11149		.byte	1
000000d1 00000000         11150		.long	.LDW52
000000d5 00               11151		.byte	0
000000d6 00               11152		.byte	0
000000d7 00               11153		.byte	0
                          11154	.LDW_unq_8:
                          11155		.section	.debug_line
00000705 000502           11156		.byte	0,5,2
00000708 00000000         11157		.long	FblDiagSetError
0000070c 06               11158		.byte	6
0000070d 03               11159		.byte	3
0000070e b903             11160		.byte	185,3
00000710 02               11161		.byte	2
00000711 00               11162		.byte	0
00000712 01               11163		.byte	1
00000713 2d               11164		.byte	45
00000714 02               11165		.byte	2
00000715 08               11166		.byte	8
00000716 000502           11167		.byte	0,5,2
00000719 00000000         11168		.long	.LDWlin33
0000071d 03               11169		.byte	3
0000071e 0b               11170		.byte	11
0000071f 02               11171		.byte	2
00000720 00               11172		.byte	0
00000721 01               11173		.byte	1
00000722 0b               11174		.byte	11
00000723 000502           11175		.byte	0,5,2
00000726 00000000         11176		.long	.LDWlin34
0000072a 0b               11177		.byte	11
0000072b 0c               11178		.byte	12
0000072c 0c               11179		.byte	12
0000072d 4b               11180		.byte	75
0000072e 02               11181		.byte	2
0000072f 00               11182		.byte	0
00000730 0b               11183		.byte	11
00000731 02               11184		.byte	2
00000732 02               11185		.byte	2

                                   Fri Apr 10 08:32:04 2020           Page 201
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
00000733 000101           11186		.byte	0,1,1
                          11187		.section	.debug_info
                          11188	.LDW_4a4da80:
0000144a 11               11189		.byte	17
0000144b 6572726f72436f64 11190		.strz	"errorCode"
00001453 6500            
00001455 b803             11191		.byte	184,3
00001457 1e               11192		.byte	30
00001458 01               11193		.byte	1
00001459 00000000         11194		.long	.LDW_4a4b818
0000145d 00               11195		.byte	0
0000145e 0153             11196		.byte	1,83
                          11197	
                          11198	.LDW_4a03470:
00001460 1f               11199		.byte	31
00001461 00000000         11200		.long	.LDW42
00001465 00000000         11201		.long	.LDW52
                          11202	
00001469 00               11203		.byte	0
                          11204	
0000146a 00               11205		.byte	0
                          11206	
                          11207	.LDW_4a49c90:
0000146b 16               11208		.byte	22
0000146c 46626c5265616c54 11209		.strz	"FblRealTimeSupport"
00001474 696d65537570706f
0000147c 727400          
0000147f d803             11210		.byte	216,3
00001481 08               11211		.byte	8
00001482 01               11212		.byte	1
00001483 00000000         11213		.long	.LDW_4a4b818
00001487 00000000         11214		.long	FblRealTimeSupport
0000148b 00000000         11215		.long	__ghs_eofn_FblRealTimeSupport
0000148f 0151             11216		.byte	1,81
00001491 8080808008       11217		.byte	128,128,128,128,8
00001496 0c               11218		.byte	12
00001497 00               11219		.byte	0
00001498 10               11220		.byte	16
00001499 00               11221		.byte	0
0000149a 00               11222		.byte	0
0000149b 00               11223		.byte	0
0000149c 01               11224		.byte	1
0000149d 01               11225		.byte	1
0000149e 00               11226		.byte	0
0000149f 01               11227		.byte	1
                          11228	
                          11229		.section	.debug_frame
                          11230	.LDW_5ccd2e0:
000000d8 00000014         11231		.long	.LDW_unq_a-.LDW_unq_9
                          11232	.LDW_unq_9:
000000dc 00000000         11233		.long	.LDW_5cc4c70
000000e0 00000000         11234		.long	FblRealTimeSupport
000000e4 00000020         11235		.long	__ghs_eofn_FblRealTimeSupport-FblRealTimeSupport
000000e8 01               11236		.byte	1
000000e9 00000000         11237		.long	.LDW31
000000ed 00               11238		.byte	0
000000ee 00               11239		.byte	0
000000ef 00               11240		.byte	0
                          11241	.LDW_unq_a:

                                   Fri Apr 10 08:32:04 2020           Page 202
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
                          11242		.section	.debug_line
00000736 000502           11243		.byte	0,5,2
00000739 00000000         11244		.long	FblRealTimeSupport
0000073d 06               11245		.byte	6
0000073e 03               11246		.byte	3
0000073f d803             11247		.byte	216,3
00000741 02               11248		.byte	2
00000742 00               11249		.byte	0
00000743 01               11250		.byte	1
00000744 35               11251		.byte	53
00000745 1b               11252		.byte	27
00000746 000502           11253		.byte	0,5,2
00000749 00000000         11254		.long	.LDWlin3
0000074d 0b               11255		.byte	11
0000074e 06               11256		.byte	6
0000074f 02               11257		.byte	2
00000750 02               11258		.byte	2
00000751 02               11259		.byte	2
00000752 0a               11260		.byte	10
00000753 000101           11261		.byte	0,1,1
                          11262		.section	.debug_info
                          11263	.LDW_4a032c0:
000014a0 1f               11264		.byte	31
000014a1 00000000         11265		.long	.LDW21
000014a5 00000000         11266		.long	.LDW31
                          11267	
                          11268	.LDW_4a4a278:
000014a9 07               11269		.byte	7
000014aa 72657475726e436f 11270		.strz	"returnCode"
000014b2 646500          
000014b5 da03             11271		.byte	218,3
000014b7 0b               11272		.byte	11
000014b8 01               11273		.byte	1
000014b9 00000000         11274		.long	.LDW_4a4b818
000014bd 00               11275		.byte	0
000014be 00               11276		.byte	0
                          11277	
000014bf 00               11278		.byte	0
                          11279	
000014c0 00               11280		.byte	0
                          11281	
                          11282	.LDW_4a4a530:
000014c1 15               11283		.byte	21
000014c2 4469616745785243 11284		.strz	"DiagExRCRResponsePending"
000014ca 52526573706f6e73
000014d2 6550656e64696e67
000014da 00              
000014db e803             11285		.byte	232,3
000014dd 06               11286		.byte	6
000014de 01               11287		.byte	1
000014df 00000000         11288		.long	DiagExRCRResponsePending
000014e3 00000000         11289		.long	__ghs_eofn_DiagExRCRResponsePending
000014e7 0151             11290		.byte	1,81
000014e9 808080800c       11291		.byte	128,128,128,128,12
000014ee 08               11292		.byte	8
000014ef 00               11293		.byte	0
000014f0 10               11294		.byte	16
000014f1 00               11295		.byte	0
000014f2 00               11296		.byte	0
000014f3 00               11297		.byte	0

                                   Fri Apr 10 08:32:04 2020           Page 203
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
000014f4 01               11298		.byte	1
000014f5 01               11299		.byte	1
000014f6 00               11300		.byte	0
000014f7 01               11301		.byte	1
                          11302	
                          11303		.section	.debug_frame
                          11304	.LDW_5ccd5a0:
000000f0 00000014         11305		.long	.LDW_unq_c-.LDW_unq_b
                          11306	.LDW_unq_b:
000000f4 00000000         11307		.long	.LDW_5cc4c70
000000f8 00000000         11308		.long	DiagExRCRResponsePending
000000fc 00000090         11309		.long	__ghs_eofn_DiagExRCRResponsePending-DiagExRCRResponsePending
00000100 01               11310		.byte	1
00000101 00000000         11311		.long	.LDW11
00000105 00               11312		.byte	0
00000106 00               11313		.byte	0
00000107 00               11314		.byte	0
                          11315	.LDW_unq_c:
                          11316		.section	.debug_line
00000756 000502           11317		.byte	0,5,2
00000759 00000000         11318		.long	DiagExRCRResponsePending
0000075d 06               11319		.byte	6
0000075e 03               11320		.byte	3
0000075f e803             11321		.byte	232,3
00000761 02               11322		.byte	2
00000762 00               11323		.byte	0
00000763 01               11324		.byte	1
00000764 3c               11325		.byte	60
00000765 000502           11326		.byte	0,5,2
00000768 00000000         11327		.long	.LDWlin1
0000076c 0b               11328		.byte	11
0000076d 0d               11329		.byte	13
0000076e 000502           11330		.byte	0,5,2
00000771 00000000         11331		.long	.LDWlin2
00000775 0d               11332		.byte	13
00000776 0c               11333		.byte	12
00000777 35               11334		.byte	53
00000778 3b               11335		.byte	59
00000779 33               11336		.byte	51
0000077a 1b               11337		.byte	27
0000077b 1d               11338		.byte	29
0000077c 03               11339		.byte	3
0000077d 04               11340		.byte	4
0000077e 02               11341		.byte	2
0000077f 08               11342		.byte	8
00000780 01               11343		.byte	1
00000781 3c               11344		.byte	60
00000782 23               11345		.byte	35
00000783 02               11346		.byte	2
00000784 00               11347		.byte	0
00000785 0b               11348		.byte	11
00000786 02               11349		.byte	2
00000787 00               11350		.byte	0
00000788 0b               11351		.byte	11
00000789 02               11352		.byte	2
0000078a 0c               11353		.byte	12

                                   Fri Apr 10 08:32:04 2020           Page 204
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
0000078b 000101           11354		.byte	0,1,1
                          11355		.section	.debug_info
                          11356	.LDW_4a4a328:
000014f8 11               11357		.byte	17
000014f9 666f72636553656e 11358		.strz	"forceSend"
00001501 6400            
00001503 e803             11359		.byte	232,3
00001505 27               11360		.byte	39
00001506 01               11361		.byte	1
00001507 00000000         11362		.long	.LDW_4a4b818
0000150b 00               11363		.byte	0
0000150c 0153             11364		.byte	1,83
                          11365	
                          11366	.LDW_4a034a0:
0000150e 1f               11367		.byte	31
0000150f 00000000         11368		.long	.LDW01
00001513 00000000         11369		.long	.LDW11
                          11370	
00001517 00               11371		.byte	0
                          11372	
00001518 00               11373		.byte	0
                          11374	
                          11375	.LDW_4a4a5c8:
00001519 16               11376		.byte	22
0000151a 46626c4d656d5365 11377		.strz	"FblMemSegmentNrGet"
00001522 676d656e744e7247
0000152a 657400          
0000152d 9204             11378		.byte	146,4
0000152f 09               11379		.byte	9
00001530 01               11380		.byte	1
00001531 00000000         11381		.long	.LDW_4a4d798
00001535 00000000         11382		.long	FblMemSegmentNrGet
00001539 00000000         11383		.long	__ghs_eofn_FblMemSegmentNrGet
0000153d 0151             11384		.byte	1,81
0000153f 808080e00f       11385		.byte	128,128,128,224,15
00001544 08               11386		.byte	8
00001545 00               11387		.byte	0
00001546 20               11388		.byte	32
00001547 00               11389		.byte	0
00001548 00               11390		.byte	0
00001549 00               11391		.byte	0
0000154a 01               11392		.byte	1
0000154b 01               11393		.byte	1
0000154c 00               11394		.byte	0
0000154d 01               11395		.byte	1
                          11396	
                          11397		.section	.debug_frame
                          11398	.LDW_5ccd4a0:
00000108 00000014         11399		.long	.LDW_unq_e-.LDW_unq_d
                          11400	.LDW_unq_d:
0000010c 00000000         11401		.long	.LDW_5cc4c70
00000110 00000000         11402		.long	FblMemSegmentNrGet
00000114 000000c4         11403		.long	__ghs_eofn_FblMemSegmentNrGet-FblMemSegmentNrGet
00000118 01               11404		.byte	1
00000119 00000000         11405		.long	.LDW51
0000011d 00               11406		.byte	0
0000011e 00               11407		.byte	0
0000011f 00               11408		.byte	0
                          11409	.LDW_unq_e:

                                   Fri Apr 10 08:32:04 2020           Page 205
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
                          11410		.section	.debug_line
0000078e 000502           11411		.byte	0,5,2
00000791 00000000         11412		.long	FblMemSegmentNrGet
00000795 06               11413		.byte	6
00000796 03               11414		.byte	3
00000797 9204             11415		.byte	146,4
00000799 02               11416		.byte	2
0000079a 00               11417		.byte	0
0000079b 01               11418		.byte	1
0000079c 03               11419		.byte	3
0000079d 04               11420		.byte	4
0000079e 02               11421		.byte	2
0000079f 0e               11422		.byte	14
000007a0 01               11423		.byte	1
000007a1 000502           11424		.byte	0,5,2
000007a4 00000000         11425		.long	.LDWlin4
000007a8 0d               11426		.byte	13
000007a9 0c               11427		.byte	12
000007aa 000502           11428		.byte	0,5,2
000007ad 00000000         11429		.long	.LDWlin5
000007b1 0b               11430		.byte	11
000007b2 0c               11431		.byte	12
000007b3 0c               11432		.byte	12
000007b4 02               11433		.byte	2
000007b5 0a               11434		.byte	10
000007b6 000502           11435		.byte	0,5,2
000007b9 00000000         11436		.long	.LDWlin6
000007bd 0d               11437		.byte	13
000007be 000502           11438		.byte	0,5,2
000007c1 00000000         11439		.long	.LDWlin7
000007c5 0b               11440		.byte	11
000007c6 0b               11441		.byte	11
000007c7 000502           11442		.byte	0,5,2
000007ca 00000000         11443		.long	.LDWlin8
000007ce 0b               11444		.byte	11
000007cf 02               11445		.byte	2
000007d0 00               11446		.byte	0
000007d1 0d               11447		.byte	13
000007d2 000502           11448		.byte	0,5,2
000007d5 00000000         11449		.long	.LDWlin9
000007d9 0b               11450		.byte	11
000007da 0c               11451		.byte	12
000007db 02               11452		.byte	2
000007dc 00               11453		.byte	0
000007dd 03               11454		.byte	3
000007de 74               11455		.byte	116
000007df 02               11456		.byte	2
000007e0 00               11457		.byte	0
000007e1 01               11458		.byte	1
000007e2 000502           11459		.byte	0,5,2
000007e5 00000000         11460		.long	.LDWlin10
000007e9 03               11461		.byte	3
000007ea 2d               11462		.byte	45
000007eb 02               11463		.byte	2
000007ec 00               11464		.byte	0
000007ed 01               11465		.byte	1

                                   Fri Apr 10 08:32:04 2020           Page 206
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
000007ee 02               11466		.byte	2
000007ef 00               11467		.byte	0
000007f0 0b               11468		.byte	11
000007f1 0c               11469		.byte	12
000007f2 0c               11470		.byte	12
000007f3 03               11471		.byte	3
000007f4 04               11472		.byte	4
000007f5 02               11473		.byte	2
000007f6 04               11474		.byte	4
000007f7 01               11475		.byte	1
000007f8 3d               11476		.byte	61
000007f9 000502           11477		.byte	0,5,2
000007fc 00000000         11478		.long	.LDWlin11
00000800 03               11479		.byte	3
00000801 54               11480		.byte	84
00000802 02               11481		.byte	2
00000803 00               11482		.byte	0
00000804 01               11483		.byte	1
00000805 0d               11484		.byte	13
00000806 000502           11485		.byte	0,5,2
00000809 00000000         11486		.long	.LDWlin12
0000080d 0b               11487		.byte	11
0000080e 0b               11488		.byte	11
0000080f 000502           11489		.byte	0,5,2
00000812 00000000         11490		.long	.LDWlin13
00000816 0b               11491		.byte	11
00000817 0c               11492		.byte	12
00000818 1d               11493		.byte	29
00000819 2b               11494		.byte	43
0000081a 000502           11495		.byte	0,5,2
0000081d 00000000         11496		.long	.LDWlin14
00000821 0b               11497		.byte	11
00000822 0c               11498		.byte	12
00000823 0c               11499		.byte	12
00000824 15               11500		.byte	21
00000825 000502           11501		.byte	0,5,2
00000828 00000000         11502		.long	.LDWlin15
0000082c 03               11503		.byte	3
0000082d 04               11504		.byte	4
0000082e 02               11505		.byte	2
0000082f 00               11506		.byte	0
00000830 01               11507		.byte	1
00000831 0c               11508		.byte	12
00000832 0c               11509		.byte	12
00000833 3b               11510		.byte	59
00000834 02               11511		.byte	2
00000835 00               11512		.byte	0
00000836 0c               11513		.byte	12
00000837 03               11514		.byte	3
00000838 0e               11515		.byte	14
00000839 02               11516		.byte	2
0000083a 04               11517		.byte	4
0000083b 01               11518		.byte	1
0000083c 02               11519		.byte	2
0000083d 00               11520		.byte	0
0000083e 0d               11521		.byte	13

                                   Fri Apr 10 08:32:04 2020           Page 207
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
0000083f 1b               11522		.byte	27
00000840 02               11523		.byte	2
00000841 00               11524		.byte	0
00000842 0c               11525		.byte	12
00000843 02               11526		.byte	2
00000844 0c               11527		.byte	12
00000845 000101           11528		.byte	0,1,1
                          11529		.section	.debug_info
                          11530	.LDW_4a4a118:
0000154e 11               11531		.byte	17
0000154f 6164647265737300 11532		.strz	"address"
00001557 9204             11533		.byte	146,4
00001559 29               11534		.byte	41
0000155a 01               11535		.byte	1
0000155b 00000000         11536		.long	.LDW_5cc9f80
0000155f 00               11537		.byte	0
00001560 016e             11538		.byte	1,110
                          11539	
                          11540	.LDW_4a03620:
00001562 1f               11541		.byte	31
00001563 00000000         11542		.long	.LDW41
00001567 00000000         11543		.long	.LDW51
                          11544	
                          11545	.LDW_4a49e58:
0000156b 06               11546		.byte	6
0000156c 7365676d656e7400 11547		.strz	"segment"
00001574 9404             11548		.byte	148,4
00001576 0c               11549		.byte	12
00001577 01               11550		.byte	1
00001578 00000000         11551		.long	.LDW_4a4d798
0000157c 00               11552		.byte	0
0000157d 00               11553		.byte	0
0000157e 0153             11554		.byte	1,83
                          11555	
00001580 00               11556		.byte	0
                          11557	
00001581 00               11558		.byte	0
                          11559	
                          11560	.LDW_4a4a660:
00001582 16               11561		.byte	22
00001583 46626c446961674d 11562		.strz	"FblDiagMemGetActiveBuffer"
0000158b 656d476574416374
00001593 6976654275666665
0000159b 7200            
0000159d eb04             11563		.byte	235,4
0000159f 28               11564		.byte	40
000015a0 01               11565		.byte	1
000015a1 00000000         11566		.long	.LDW_4a0c648
000015a5 00000000         11567		.long	FblDiagMemGetActiveBuffer
000015a9 00000000         11568		.long	__ghs_eofn_FblDiagMemGetActiveBuffer
000015ad 0151             11569		.byte	1,81
000015af 00               11570		.byte	0
000015b0 08               11571		.byte	8
000015b1 00               11572		.byte	0
000015b2 08               11573		.byte	8
000015b3 00               11574		.byte	0
000015b4 00               11575		.byte	0
000015b5 00               11576		.byte	0
000015b6 01               11577		.byte	1

                                   Fri Apr 10 08:32:04 2020           Page 208
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
000015b7 01               11578		.byte	1
000015b8 00               11579		.byte	0
000015b9 01               11580		.byte	1
                          11581	
                          11582		.section	.debug_frame
                          11583	.LDW_5ccd2a0:
00000120 00000014         11584		.long	.LDW_unq_10-.LDW_unq_f
                          11585	.LDW_unq_f:
00000124 00000000         11586		.long	.LDW_5cc4c70
00000128 00000000         11587		.long	FblDiagMemGetActiveBuffer
0000012c 0000001e         11588		.long	__ghs_eofn_FblDiagMemGetActiveBuffer-FblDiagMemGetActiveBuffer
00000130 01               11589		.byte	1
00000131 00000000         11590		.long	.LDW72
00000135 00               11591		.byte	0
00000136 00               11592		.byte	0
00000137 00               11593		.byte	0
                          11594	.LDW_unq_10:
                          11595		.section	.debug_line
00000848 000502           11596		.byte	0,5,2
0000084b 00000000         11597		.long	FblDiagMemGetActiveBuffer
0000084f 06               11598		.byte	6
00000850 03               11599		.byte	3
00000851 eb04             11600		.byte	235,4
00000853 02               11601		.byte	2
00000854 00               11602		.byte	0
00000855 01               11603		.byte	1
00000856 2b               11604		.byte	43
00000857 3b               11605		.byte	59
00000858 06               11606		.byte	6
00000859 02               11607		.byte	2
0000085a 02               11608		.byte	2
0000085b 02               11609		.byte	2
0000085c 08               11610		.byte	8
0000085d 000101           11611		.byte	0,1,1
                          11612		.section	.debug_info
                          11613	.LDW_4a03560:
000015ba 1f               11614		.byte	31
000015bb 00000000         11615		.long	.LDW62
000015bf 00000000         11616		.long	.LDW72
                          11617	
000015c3 00               11618		.byte	0
                          11619	
000015c4 00               11620		.byte	0
                          11621	
                          11622	.LDW_4a4a6f8:
000015c5 16               11623		.byte	22
000015c6 46626c436865636b 11624		.strz	"FblCheckAddressRange"
000015ce 4164647265737352
000015d6 616e676500      
000015db fb04             11625		.byte	251,4
000015dd 0c               11626		.byte	12
000015de 01               11627		.byte	1
000015df 00000000         11628		.long	.LDW_4a4a380
000015e3 00000000         11629		.long	FblCheckAddressRange
000015e7 00000000         11630		.long	__ghs_eofn_FblCheckAddressRange
000015eb 0151             11631		.byte	1,81
000015ed 03               11632		.byte	3
000015ee 00               11633		.byte	0

                                   Fri Apr 10 08:32:04 2020           Page 209
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
000015ef 00               11634		.byte	0
000015f0 00               11635		.byte	0
000015f1 00               11636		.byte	0
000015f2 00               11637		.byte	0
000015f3 00               11638		.byte	0
000015f4 01               11639		.byte	1
000015f5 01               11640		.byte	1
000015f6 00               11641		.byte	0
000015f7 01               11642		.byte	1
                          11643	
                          11644		.section	.debug_frame
                          11645	.LDW_5ccd0a0:
00000138 00000014         11646		.long	.LDW_unq_12-.LDW_unq_11
                          11647	.LDW_unq_11:
0000013c 00000000         11648		.long	.LDW_5cc4c70
00000140 00000000         11649		.long	FblCheckAddressRange
00000144 00000014         11650		.long	__ghs_eofn_FblCheckAddressRange-FblCheckAddressRange
00000148 01               11651		.byte	1
00000149 00000000         11652		.long	.LDW92
0000014d 00               11653		.byte	0
0000014e 00               11654		.byte	0
0000014f 00               11655		.byte	0
                          11656	.LDW_unq_12:
                          11657		.section	.debug_line
00000860 000502           11658		.byte	0,5,2
00000863 00000000         11659		.long	FblCheckAddressRange
00000867 06               11660		.byte	6
00000868 03               11661		.byte	3
00000869 fe04             11662		.byte	254,4
0000086b 02               11663		.byte	2
0000086c 00               11664		.byte	0
0000086d 01               11665		.byte	1
0000086e 14               11666		.byte	20
0000086f 000502           11667		.byte	0,5,2
00000872 00000000         11668		.long	.LDWlin35
00000876 0c               11669		.byte	12
00000877 0c               11670		.byte	12
00000878 02               11671		.byte	2
00000879 00               11672		.byte	0
0000087a 0c               11673		.byte	12
0000087b 06               11674		.byte	6
0000087c 02               11675		.byte	2
0000087d 02               11676		.byte	2
0000087e 02               11677		.byte	2
0000087f 02               11678		.byte	2
00000880 000101           11679		.byte	0,1,1
                          11680		.section	.debug_info
                          11681	.LDW_4a4a0c0:
000015f8 11               11682		.byte	17
000015f9 6164647265737300 11683		.strz	"address"
00001601 fb04             11684		.byte	251,4
00001603 2e               11685		.byte	46
00001604 01               11686		.byte	1
00001605 00000000         11687		.long	.LDW_5cc9f80
00001609 00               11688		.byte	0
0000160a 0153             11689		.byte	1,83

                                   Fri Apr 10 08:32:04 2020           Page 210
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
                          11690	
                          11691	.LDW_4a49f60:
0000160c 11               11692		.byte	17
0000160d 72616e6765537461 11693		.strz	"rangeStart"
00001615 727400          
00001618 fb04             11694		.byte	251,4
0000161a 43               11695		.byte	67
0000161b 01               11696		.byte	1
0000161c 00000000         11697		.long	.LDW_5cc9f80
00001620 00               11698		.byte	0
00001621 0154             11699		.byte	1,84
                          11700	
                          11701	.LDW_4a49f08:
00001623 11               11702		.byte	17
00001624 72616e67654c656e 11703		.strz	"rangeLength"
0000162c 67746800        
00001630 fb04             11704		.byte	251,4
00001632 5a               11705		.byte	90
00001633 01               11706		.byte	1
00001634 00000000         11707		.long	.LDW_5cc9ed0
00001638 00               11708		.byte	0
00001639 0155             11709		.byte	1,85
                          11710	
                          11711	.LDW_4a03170:
0000163b 1f               11712		.byte	31
0000163c 00000000         11713		.long	.LDW82
00001640 00000000         11714		.long	.LDW92
                          11715	
                          11716	.LDW_4a49d50:
00001644 06               11717		.byte	6
00001645 726573756c7400   11718		.strz	"result"
0000164c fd04             11719		.byte	253,4
0000164e 0f               11720		.byte	15
0000164f 01               11721		.byte	1
00001650 00000000         11722		.long	.LDW_4a4a380
00001654 00               11723		.byte	0
00001655 00               11724		.byte	0
00001656 0150             11725		.byte	1,80
                          11726	
00001658 00               11727		.byte	0
                          11728	
00001659 00               11729		.byte	0
                          11730	
                          11731	.LDW_4a4a790:
0000165a 16               11732		.byte	22
0000165b 46626c436865636b 11733		.strz	"FblCheckRangeContained"
00001663 52616e6765436f6e
0000166b 7461696e656400  
00001672 9605             11734		.byte	150,5
00001674 0c               11735		.byte	12
00001675 01               11736		.byte	1
00001676 00000000         11737		.long	.LDW_4a4a380
0000167a 00000000         11738		.long	FblCheckRangeContained
0000167e 00000000         11739		.long	__ghs_eofn_FblCheckRangeContained
00001682 0151             11740		.byte	1,81
00001684 808080800e       11741		.byte	128,128,128,128,14
00001689 0c               11742		.byte	12
0000168a 00               11743		.byte	0
0000168b 18               11744		.byte	24
0000168c 00               11745		.byte	0

                                   Fri Apr 10 08:32:04 2020           Page 211
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
0000168d 00               11746		.byte	0
0000168e 00               11747		.byte	0
0000168f 01               11748		.byte	1
00001690 01               11749		.byte	1
00001691 00               11750		.byte	0
00001692 01               11751		.byte	1
                          11752	
                          11753		.section	.debug_frame
                          11754	.LDW_5ccd120:
00000150 00000014         11755		.long	.LDW_unq_14-.LDW_unq_13
                          11756	.LDW_unq_13:
00000154 00000000         11757		.long	.LDW_5cc4c70
00000158 00000000         11758		.long	FblCheckRangeContained
0000015c 0000003e         11759		.long	__ghs_eofn_FblCheckRangeContained-FblCheckRangeContained
00000160 01               11760		.byte	1
00000161 00000000         11761		.long	.LDW13
00000165 00               11762		.byte	0
00000166 00               11763		.byte	0
00000167 00               11764		.byte	0
                          11765	.LDW_unq_14:
                          11766		.section	.debug_line
00000883 000502           11767		.byte	0,5,2
00000886 00000000         11768		.long	FblCheckRangeContained
0000088a 06               11769		.byte	6
0000088b 03               11770		.byte	3
0000088c 9605             11771		.byte	150,5
0000088e 02               11772		.byte	2
0000088f 00               11773		.byte	0
00000890 01               11774		.byte	1
00000891 4d               11775		.byte	77
00000892 14               11776		.byte	20
00000893 000502           11777		.byte	0,5,2
00000896 00000000         11778		.long	.LDWlin36
0000089a 0d               11779		.byte	13
0000089b 0c               11780		.byte	12
0000089c 02               11781		.byte	2
0000089d 00               11782		.byte	0
0000089e 0c               11783		.byte	12
0000089f 06               11784		.byte	6
000008a0 02               11785		.byte	2
000008a1 02               11786		.byte	2
000008a2 02               11787		.byte	2
000008a3 0c               11788		.byte	12
000008a4 000101           11789		.byte	0,1,1
                          11790		.section	.debug_info
                          11791	.LDW_4a4a170:
00001693 11               11792		.byte	17
00001694 6164647265737300 11793		.strz	"address"
0000169c 9605             11794		.byte	150,5
0000169e 30               11795		.byte	48
0000169f 01               11796		.byte	1
000016a0 00000000         11797		.long	.LDW_5cc9f80
000016a4 00               11798		.byte	0
000016a5 016d             11799		.byte	1,109
                          11800	
                          11801	.LDW_4a4a430:

                                   Fri Apr 10 08:32:04 2020           Page 212
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
000016a7 11               11802		.byte	17
000016a8 6c656e67746800   11803		.strz	"length"
000016af 9605             11804		.byte	150,5
000016b1 44               11805		.byte	68
000016b2 01               11806		.byte	1
000016b3 00000000         11807		.long	.LDW_5cc9ed0
000016b7 00               11808		.byte	0
000016b8 016f             11809		.byte	1,111
                          11810	
                          11811	.LDW_4a4a1c8:
000016ba 11               11812		.byte	17
000016bb 72616e6765537461 11813		.strz	"rangeStart"
000016c3 727400          
000016c6 9605             11814		.byte	150,5
000016c8 58               11815		.byte	88
000016c9 01               11816		.byte	1
000016ca 00000000         11817		.long	.LDW_5cc9f80
000016ce 00               11818		.byte	0
000016cf 0157             11819		.byte	1,87
                          11820	
                          11821	.LDW_4a4a220:
000016d1 11               11822		.byte	17
000016d2 72616e67654c656e 11823		.strz	"rangeLength"
000016da 67746800        
000016de 9605             11824		.byte	150,5
000016e0 6f               11825		.byte	111
000016e1 01               11826		.byte	1
000016e2 00000000         11827		.long	.LDW_5cc9ed0
000016e6 00               11828		.byte	0
000016e7 0156             11829		.byte	1,86
                          11830	
                          11831	.LDW_4a03260:
000016e9 1f               11832		.byte	31
000016ea 00000000         11833		.long	.LDW03
000016ee 00000000         11834		.long	.LDW13
                          11835	
                          11836	.LDW_4a49fb8:
000016f2 06               11837		.byte	6
000016f3 726573756c7400   11838		.strz	"result"
000016fa 9805             11839		.byte	152,5
000016fc 0f               11840		.byte	15
000016fd 01               11841		.byte	1
000016fe 00000000         11842		.long	.LDW_4a4a380
00001702 00               11843		.byte	0
00001703 00               11844		.byte	0
00001704 016e             11845		.byte	1,110
                          11846	
00001706 00               11847		.byte	0
                          11848	
00001707 00               11849		.byte	0
                          11850	
                          11851	.LDW_4a4a828:
00001708 15               11852		.byte	21
00001709 4469616750726f63 11853		.strz	"DiagProcessingDone"
00001711 657373696e67446f
00001719 6e6500          
0000171c b305             11854		.byte	179,5
0000171e 06               11855		.byte	6
0000171f 01               11856		.byte	1
00001720 00000000         11857		.long	DiagProcessingDone

                                   Fri Apr 10 08:32:04 2020           Page 213
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
00001724 00000000         11858		.long	__ghs_eofn_DiagProcessingDone
00001728 0151             11859		.byte	1,81
0000172a 03               11860		.byte	3
0000172b 00               11861		.byte	0
0000172c 00               11862		.byte	0
0000172d 00               11863		.byte	0
0000172e 00               11864		.byte	0
0000172f 00               11865		.byte	0
00001730 00               11866		.byte	0
00001731 01               11867		.byte	1
00001732 01               11868		.byte	1
00001733 00               11869		.byte	0
00001734 01               11870		.byte	1
                          11871	
                          11872		.section	.debug_frame
                          11873	.LDW_5ccd160:
00000168 00000014         11874		.long	.LDW_unq_16-.LDW_unq_15
                          11875	.LDW_unq_15:
0000016c 00000000         11876		.long	.LDW_5cc4c70
00000170 00000000         11877		.long	DiagProcessingDone
00000174 00000018         11878		.long	__ghs_eofn_DiagProcessingDone-DiagProcessingDone
00000178 01               11879		.byte	1
00000179 00000000         11880		.long	.LDW33
0000017d 00               11881		.byte	0
0000017e 00               11882		.byte	0
0000017f 00               11883		.byte	0
                          11884	.LDW_unq_16:
                          11885		.section	.debug_line
000008a7 000502           11886		.byte	0,5,2
000008aa 00000000         11887		.long	DiagProcessingDone
000008ae 06               11888		.byte	6
000008af 03               11889		.byte	3
000008b0 b405             11890		.byte	180,5
000008b2 02               11891		.byte	2
000008b3 00               11892		.byte	0
000008b4 01               11893		.byte	1
000008b5 43               11894		.byte	67
000008b6 2b               11895		.byte	43
000008b7 02               11896		.byte	2
000008b8 02               11897		.byte	2
000008b9 000101           11898		.byte	0,1,1
                          11899		.section	.debug_info
                          11900	.LDW_4a4a488:
00001735 11               11901		.byte	17
00001736 646174614c656e67 11902		.strz	"dataLength"
0000173e 746800          
00001741 b305             11903		.byte	179,5
00001743 2c               11904		.byte	44
00001744 01               11905		.byte	1
00001745 00000000         11906		.long	.LDW_4a4a2d0
00001749 00               11907		.byte	0
0000174a 0153             11908		.byte	1,83
                          11909	
                          11910	.LDW_4a032f0:
0000174c 1f               11911		.byte	31
0000174d 00000000         11912		.long	.LDW23
00001751 00000000         11913		.long	.LDW33

                                   Fri Apr 10 08:32:04 2020           Page 214
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
                          11914	
00001755 00               11915		.byte	0
                          11916	
00001756 00               11917		.byte	0
                          11918	
                          11919	.LDW_5bae178:
00001757 15               11920		.byte	21
00001758 46626c4469616744 11921		.strz	"FblDiagDiscardReception"
00001760 6973636172645265
00001768 63657074696f6e00
00001770 bf05             11922		.byte	191,5
00001772 0d               11923		.byte	13
00001773 01               11924		.byte	1
00001774 00000000         11925		.long	FblDiagDiscardReception..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_diag_core.
00001778 00000000         11926		.long	__ghs_eofn_FblDiagDiscardReception
0000177c 0151             11927		.byte	1,81
0000177e 8080808008       11928		.byte	128,128,128,128,8
00001783 0c               11929		.byte	12
00001784 00               11930		.byte	0
00001785 10               11931		.byte	16
00001786 00               11932		.byte	0
00001787 00               11933		.byte	0
00001788 00               11934		.byte	0
00001789 00               11935		.byte	0
0000178a 01               11936		.byte	1
0000178b 00               11937		.byte	0
0000178c 01               11938		.byte	1
                          11939	
                          11940		.section	.debug_frame
                          11941	.LDW_5ccd1a0:
00000180 00000014         11942		.long	.LDW_unq_18-.LDW_unq_17
                          11943	.LDW_unq_17:
00000184 00000000         11944		.long	.LDW_5cc4c70
00000188 00000000         11945		.long	FblDiagDiscardReception..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_diag_core.
0000018c 0000002c         11946		.long	__ghs_eofn_FblDiagDiscardReception-FblDiagDiscardReception..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_diag_core.
00000190 01               11947		.byte	1
00000191 00000000         11948		.long	.LDW53
00000195 00               11949		.byte	0
00000196 00               11950		.byte	0
00000197 00               11951		.byte	0
                          11952	.LDW_unq_18:
                          11953		.section	.debug_line
000008bc 000502           11954		.byte	0,5,2
000008bf 00000000         11955		.long	FblDiagDiscardReception..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_diag_core.
000008c3 06               11956		.byte	6
000008c4 03               11957		.byte	3
000008c5 bf05             11958		.byte	191,5
000008c7 02               11959		.byte	2
000008c8 00               11960		.byte	0
000008c9 01               11961		.byte	1
000008ca 33               11962		.byte	51
000008cb 44               11963		.byte	68
000008cc 1b               11964		.byte	27
000008cd 23               11965		.byte	35
000008ce 02               11966		.byte	2
000008cf 0a               11967		.byte	10
000008d0 000101           11968		.byte	0,1,1
                          11969		.section	.debug_info

                                   Fri Apr 10 08:32:04 2020           Page 215
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
                          11970	.LDW_4a037d0:
0000178d 1f               11971		.byte	31
0000178e 00000000         11972		.long	.LDW43
00001792 00000000         11973		.long	.LDW53
                          11974	
00001796 00               11975		.byte	0
                          11976	
00001797 00               11977		.byte	0
                          11978	
                          11979	.LDW_5bae210:
00001798 15               11980		.byte	21
00001799 46626c4469616752 11981		.strz	"FblDiagResetServiceFlags"
000017a1 6573657453657276
000017a9 696365466c616773
000017b1 00              
000017b2 d005             11982		.byte	208,5
000017b4 0d               11983		.byte	13
000017b5 01               11984		.byte	1
000017b6 00000000         11985		.long	FblDiagResetServiceFlags..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_diag_core.
000017ba 00000000         11986		.long	__ghs_eofn_FblDiagResetServiceFlags
000017be 0151             11987		.byte	1,81
000017c0 03               11988		.byte	3
000017c1 00               11989		.byte	0
000017c2 00               11990		.byte	0
000017c3 00               11991		.byte	0
000017c4 00               11992		.byte	0
000017c5 00               11993		.byte	0
000017c6 00               11994		.byte	0
000017c7 00               11995		.byte	0
000017c8 01               11996		.byte	1
000017c9 00               11997		.byte	0
000017ca 01               11998		.byte	1
                          11999	
                          12000		.section	.debug_frame
                          12001	.LDW_5ccd720:
00000198 00000014         12002		.long	.LDW_unq_1a-.LDW_unq_19
                          12003	.LDW_unq_19:
0000019c 00000000         12004		.long	.LDW_5cc4c70
000001a0 00000000         12005		.long	FblDiagResetServiceFlags..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_diag_core.
000001a4 00000026         12006		.long	__ghs_eofn_FblDiagResetServiceFlags-FblDiagResetServiceFlags..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_diag_core.
000001a8 01               12007		.byte	1
000001a9 00000000         12008		.long	.LDW91
000001ad 00               12009		.byte	0
000001ae 00               12010		.byte	0
000001af 00               12011		.byte	0
                          12012	.LDW_unq_1a:
                          12013		.section	.debug_line
000008d3 000502           12014		.byte	0,5,2
000008d6 00000000         12015		.long	FblDiagResetServiceFlags..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_diag_core.
000008da 06               12016		.byte	6
000008db 03               12017		.byte	3
000008dc d205             12018		.byte	210,5
000008de 02               12019		.byte	2
000008df 00               12020		.byte	0
000008e0 01               12021		.byte	1
000008e1 35               12022		.byte	53
000008e2 03               12023		.byte	3
000008e3 09               12024		.byte	9
000008e4 02               12025		.byte	2

                                   Fri Apr 10 08:32:04 2020           Page 216
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
000008e5 12               12026		.byte	18
000008e6 01               12027		.byte	1
000008e7 2b               12028		.byte	43
000008e8 02               12029		.byte	2
000008e9 02               12030		.byte	2
000008ea 000101           12031		.byte	0,1,1
                          12032		.section	.debug_info
                          12033	.LDW_4a037a0:
000017cb 1f               12034		.byte	31
000017cc 00000000         12035		.long	.LDW81
000017d0 00000000         12036		.long	.LDW91
                          12037	
000017d4 00               12038		.byte	0
                          12039	
000017d5 00               12040		.byte	0
                          12041	
                          12042	.LDW_5bae2a8:
000017d6 15               12043		.byte	21
000017d7 46626c4469616743 12044		.strz	"FblDiagConfirmation"
000017df 6f6e6669726d6174
000017e7 696f6e00        
000017eb e805             12045		.byte	232,5
000017ed 0d               12046		.byte	13
000017ee 01               12047		.byte	1
000017ef 00000000         12048		.long	FblDiagConfirmation..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_diag_core.
000017f3 00000000         12049		.long	__ghs_eofn_FblDiagConfirmation
000017f7 0151             12050		.byte	1,81
000017f9 03               12051		.byte	3
000017fa 00               12052		.byte	0
000017fb 00               12053		.byte	0
000017fc 00               12054		.byte	0
000017fd 00               12055		.byte	0
000017fe 00               12056		.byte	0
000017ff 00               12057		.byte	0
00001800 00               12058		.byte	0
00001801 01               12059		.byte	1
00001802 00               12060		.byte	0
00001803 01               12061		.byte	1
                          12062	
                          12063		.section	.debug_frame
                          12064	.LDW_5ccd320:
000001b0 00000014         12065		.long	.LDW_unq_1c-.LDW_unq_1b
                          12066	.LDW_unq_1b:
000001b4 00000000         12067		.long	.LDW_5cc4c70
000001b8 00000000         12068		.long	FblDiagConfirmation..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_diag_core.
000001bc 0000002e         12069		.long	__ghs_eofn_FblDiagConfirmation-FblDiagConfirmation..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_diag_core.
000001c0 01               12070		.byte	1
000001c1 00000000         12071		.long	.LDW73
000001c5 00               12072		.byte	0
000001c6 00               12073		.byte	0
000001c7 00               12074		.byte	0
                          12075	.LDW_unq_1c:
                          12076		.section	.debug_line
000008ed 000502           12077		.byte	0,5,2
000008f0 00000000         12078		.long	FblDiagConfirmation..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_diag_core.
000008f4 06               12079		.byte	6
000008f5 03               12080		.byte	3
000008f6 e805             12081		.byte	232,5

                                   Fri Apr 10 08:32:04 2020           Page 217
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
000008f8 02               12082		.byte	2
000008f9 00               12083		.byte	0
000008fa 01               12084		.byte	1
000008fb 2c               12085		.byte	44
000008fc 25               12086		.byte	37
000008fd 000502           12087		.byte	0,5,2
00000900 00000000         12088		.long	.LDWlin37
00000904 0b               12089		.byte	11
00000905 0b               12090		.byte	11
00000906 3b               12091		.byte	59
00000907 02               12092		.byte	2
00000908 00               12093		.byte	0
00000909 0d               12094		.byte	13
0000090a 03               12095		.byte	3
0000090b 04               12096		.byte	4
0000090c 02               12097		.byte	2
0000090d 0a               12098		.byte	10
0000090e 01               12099		.byte	1
0000090f 000502           12100		.byte	0,5,2
00000912 00000000         12101		.long	__ghs_eofn_FblDiagConfirmation
00000916 0b               12102		.byte	11
00000917 000101           12103		.byte	0,1,1
                          12104		.section	.debug_info
                          12105	.LDW_4a03800:
00001804 1f               12106		.byte	31
00001805 00000000         12107		.long	.LDW63
00001809 00000000         12108		.long	.LDW73
                          12109	
0000180d 00               12110		.byte	0
                          12111	
0000180e 00               12112		.byte	0
                          12113	
                          12114	.LDW_5bae810:
0000180f 15               12115		.byte	21
00001810 46626c4469616752 12116		.strz	"FblDiagResponseProcessor"
00001818 6573706f6e736550
00001820 726f636573736f72
00001828 00              
00001829 8706             12117		.byte	135,6
0000182b 0d               12118		.byte	13
0000182c 01               12119		.byte	1
0000182d 00000000         12120		.long	FblDiagResponseProcessor..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_diag_core.
00001831 00000000         12121		.long	__ghs_eofn_FblDiagResponseProcessor
00001835 0151             12122		.byte	1,81
00001837 808080c00f       12123		.byte	128,128,128,192,15
0000183c 0c               12124		.byte	12
0000183d 00               12125		.byte	0
0000183e 20               12126		.byte	32
0000183f 00               12127		.byte	0
00001840 00               12128		.byte	0
00001841 00               12129		.byte	0
00001842 00               12130		.byte	0
00001843 01               12131		.byte	1
00001844 00               12132		.byte	0
00001845 01               12133		.byte	1
                          12134	
                          12135		.section	.debug_frame
                          12136	.LDW_5ccd4e0:
000001c8 00000014         12137		.long	.LDW_unq_1e-.LDW_unq_1d

                                   Fri Apr 10 08:32:04 2020           Page 218
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
                          12138	.LDW_unq_1d:
000001cc 00000000         12139		.long	.LDW_5cc4c70
000001d0 00000000         12140		.long	FblDiagResponseProcessor..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_diag_core.
000001d4 000000e8         12141		.long	__ghs_eofn_FblDiagResponseProcessor-FblDiagResponseProcessor..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_diag_core.
000001d8 01               12142		.byte	1
000001d9 00000000         12143		.long	.LDW93
000001dd 00               12144		.byte	0
000001de 00               12145		.byte	0
000001df 00               12146		.byte	0
                          12147	.LDW_unq_1e:
                          12148		.section	.debug_line
0000091a 000502           12149		.byte	0,5,2
0000091d 00000000         12150		.long	FblDiagResponseProcessor..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_diag_core.
00000921 06               12151		.byte	6
00000922 03               12152		.byte	3
00000923 8706             12153		.byte	135,6
00000925 02               12154		.byte	2
00000926 00               12155		.byte	0
00000927 01               12156		.byte	1
00000928 3c               12157		.byte	60
00000929 000502           12158		.byte	0,5,2
0000092c 00000000         12159		.long	.LDWlin39
00000930 0b               12160		.byte	11
00000931 0c               12161		.byte	12
00000932 43               12162		.byte	67
00000933 2b               12163		.byte	43
00000934 15               12164		.byte	21
00000935 000502           12165		.byte	0,5,2
00000938 00000000         12166		.long	.LDWlin40
0000093c 0b               12167		.byte	11
0000093d 03               12168		.byte	3
0000093e 04               12169		.byte	4
0000093f 02               12170		.byte	2
00000940 10               12171		.byte	16
00000941 01               12172		.byte	1
00000942 000502           12173		.byte	0,5,2
00000945 00000000         12174		.long	.LDWlin41
00000949 0b               12175		.byte	11
0000094a 0c               12176		.byte	12
0000094b 1d               12177		.byte	29
0000094c 1b               12178		.byte	27
0000094d 23               12179		.byte	35
0000094e 44               12180		.byte	68
0000094f 000502           12181		.byte	0,5,2
00000952 00000000         12182		.long	.LDWlin42
00000956 0b               12183		.byte	11
00000957 1d               12184		.byte	29
00000958 000502           12185		.byte	0,5,2
0000095b 00000000         12186		.long	.LDWlin43
0000095f 0b               12187		.byte	11
00000960 0b               12188		.byte	11
00000961 000502           12189		.byte	0,5,2
00000964 00000000         12190		.long	.LDWlin44
00000968 0b               12191		.byte	11
00000969 0c               12192		.byte	12
0000096a 1d               12193		.byte	29

                                   Fri Apr 10 08:32:04 2020           Page 219
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
0000096b 000502           12194		.byte	0,5,2
0000096e 00000000         12195		.long	.LDWlin45
00000972 0d               12196		.byte	13
00000973 000502           12197		.byte	0,5,2
00000976 00000000         12198		.long	.LDWlin46
0000097a 0b               12199		.byte	11
0000097b 0c               12200		.byte	12
0000097c 1b               12201		.byte	27
0000097d 02               12202		.byte	2
0000097e 00               12203		.byte	0
0000097f 0c               12204		.byte	12
00000980 000502           12205		.byte	0,5,2
00000983 00000000         12206		.long	.LDWlin47
00000987 0b               12207		.byte	11
00000988 0b               12208		.byte	11
00000989 000502           12209		.byte	0,5,2
0000098c 00000000         12210		.long	.LDWlin48
00000990 0b               12211		.byte	11
00000991 0c               12212		.byte	12
00000992 15               12213		.byte	21
00000993 2b               12214		.byte	43
00000994 5d               12215		.byte	93
00000995 000502           12216		.byte	0,5,2
00000998 00000000         12217		.long	.LDWlin49
0000099c 0b               12218		.byte	11
0000099d 0c               12219		.byte	12
0000099e 0c               12220		.byte	12
0000099f 25               12221		.byte	37
000009a0 13               12222		.byte	19
000009a1 02               12223		.byte	2
000009a2 00               12224		.byte	0
000009a3 0d               12225		.byte	13
000009a4 000502           12226		.byte	0,5,2
000009a7 00000000         12227		.long	.LDWlin50
000009ab 0b               12228		.byte	11
000009ac 0c               12229		.byte	12
000009ad 13               12230		.byte	19
000009ae 02               12231		.byte	2
000009af 00               12232		.byte	0
000009b0 0b               12233		.byte	11
000009b1 02               12234		.byte	2
000009b2 00               12235		.byte	0
000009b3 0b               12236		.byte	11
000009b4 02               12237		.byte	2
000009b5 0c               12238		.byte	12
000009b6 000101           12239		.byte	0,1,1
                          12240		.section	.debug_info
                          12241	.LDW_4a03770:
00001846 1f               12242		.byte	31
00001847 00000000         12243		.long	.LDW83
0000184b 00000000         12244		.long	.LDW93
                          12245	
0000184f 00               12246		.byte	0
                          12247	
00001850 00               12248		.byte	0
                          12249	

                                   Fri Apr 10 08:32:04 2020           Page 220
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
                          12250	.LDW_5bae8a8:
00001851 15               12251		.byte	21
00001852 43686b5375707072 12252		.strz	"ChkSuppressPosRspMsgIndication"
0000185a 657373506f735273
00001862 704d7367496e6469
0000186a 636174696f6e00  
00001871 dd06             12253		.byte	221,6
00001873 0d               12254		.byte	13
00001874 01               12255		.byte	1
00001875 00000000         12256		.long	ChkSuppressPosRspMsgIndication..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_diag_core.
00001879 00000000         12257		.long	__ghs_eofn_ChkSuppressPosRspMsgIndication
0000187d 0151             12258		.byte	1,81
0000187f 03               12259		.byte	3
00001880 00               12260		.byte	0
00001881 00               12261		.byte	0
00001882 00               12262		.byte	0
00001883 00               12263		.byte	0
00001884 00               12264		.byte	0
00001885 00               12265		.byte	0
00001886 00               12266		.byte	0
00001887 01               12267		.byte	1
00001888 00               12268		.byte	0
00001889 01               12269		.byte	1
                          12270	
                          12271		.section	.debug_frame
                          12272	.LDW_5ccdfa0:
000001e0 00000014         12273		.long	.LDW_unq_20-.LDW_unq_1f
                          12274	.LDW_unq_1f:
000001e4 00000000         12275		.long	.LDW_5cc4c70
000001e8 00000000         12276		.long	ChkSuppressPosRspMsgIndication..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_diag_core.
000001ec 0000002a         12277		.long	__ghs_eofn_ChkSuppressPosRspMsgIndication-ChkSuppressPosRspMsgIndication..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_diag_core.
000001f0 01               12278		.byte	1
000001f1 00000000         12279		.long	.LDW14
000001f5 00               12280		.byte	0
000001f6 00               12281		.byte	0
000001f7 00               12282		.byte	0
                          12283	.LDW_unq_20:
                          12284		.section	.debug_line
000009b9 000502           12285		.byte	0,5,2
000009bc 00000000         12286		.long	ChkSuppressPosRspMsgIndication..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_diag_core.
000009c0 06               12287		.byte	6
000009c1 03               12288		.byte	3
000009c2 de06             12289		.byte	222,6
000009c4 02               12290		.byte	2
000009c5 00               12291		.byte	0
000009c6 01               12292		.byte	1
000009c7 000502           12293		.byte	0,5,2
000009ca 00000000         12294		.long	.LDWlin51
000009ce 0b               12295		.byte	11
000009cf 0c               12296		.byte	12
000009d0 4b               12297		.byte	75
000009d1 3d               12298		.byte	61
000009d2 23               12299		.byte	35
000009d3 02               12300		.byte	2
000009d4 00               12301		.byte	0
000009d5 0b               12302		.byte	11
000009d6 02               12303		.byte	2
000009d7 02               12304		.byte	2
000009d8 000101           12305		.byte	0,1,1

                                   Fri Apr 10 08:32:04 2020           Page 221
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
                          12306		.section	.debug_info
                          12307	.LDW_4a4a3d8:
0000188a 11               12308		.byte	17
0000188b 737562706172616d 12309		.strz	"subparam"
00001893 00              
00001894 dd06             12310		.byte	221,6
00001896 35               12311		.byte	53
00001897 01               12312		.byte	1
00001898 00000000         12313		.long	.LDW_4a0c648
0000189c 00               12314		.byte	0
0000189d 0153             12315		.byte	1,83
                          12316	
                          12317	.LDW_4a03860:
0000189f 1f               12318		.byte	31
000018a0 00000000         12319		.long	.LDW04
000018a4 00000000         12320		.long	.LDW14
                          12321	
000018a8 00               12322		.byte	0
                          12323	
000018a9 00               12324		.byte	0
                          12325	
                          12326	.LDW_5bae940:
000018aa 16               12327		.byte	22
000018ab 46626c4469616753 12328		.strz	"FblDiagSegmentNext"
000018b3 65676d656e744e65
000018bb 787400          
000018be f006             12329		.byte	240,6
000018c0 08               12330		.byte	8
000018c1 01               12331		.byte	1
000018c2 00000000         12332		.long	.LDW_4a4b818
000018c6 00000000         12333		.long	FblDiagSegmentNext
000018ca 00000000         12334		.long	__ghs_eofn_FblDiagSegmentNext
000018ce 0151             12335		.byte	1,81
000018d0 03               12336		.byte	3
000018d1 00               12337		.byte	0
000018d2 00               12338		.byte	0
000018d3 00               12339		.byte	0
000018d4 00               12340		.byte	0
000018d5 00               12341		.byte	0
000018d6 00               12342		.byte	0
000018d7 01               12343		.byte	1
000018d8 01               12344		.byte	1
000018d9 00               12345		.byte	0
000018da 01               12346		.byte	1
                          12347	
                          12348		.section	.debug_frame
                          12349	.LDW_5ccda20:
000001f8 00000014         12350		.long	.LDW_unq_22-.LDW_unq_21
                          12351	.LDW_unq_21:
000001fc 00000000         12352		.long	.LDW_5cc4c70
00000200 00000000         12353		.long	FblDiagSegmentNext
00000204 0000001a         12354		.long	__ghs_eofn_FblDiagSegmentNext-FblDiagSegmentNext
00000208 01               12355		.byte	1
00000209 00000000         12356		.long	.LDW34
0000020d 00               12357		.byte	0
0000020e 00               12358		.byte	0
0000020f 00               12359		.byte	0
                          12360	.LDW_unq_22:
                          12361		.section	.debug_line

                                   Fri Apr 10 08:32:04 2020           Page 222
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
000009db 000502           12362		.byte	0,5,2
000009de 00000000         12363		.long	FblDiagSegmentNext
000009e2 06               12364		.byte	6
000009e3 03               12365		.byte	3
000009e4 f406             12366		.byte	244,6
000009e6 02               12367		.byte	2
000009e7 00               12368		.byte	0
000009e8 01               12369		.byte	1
000009e9 000502           12370		.byte	0,5,2
000009ec 00000000         12371		.long	.LDWlin52
000009f0 0b               12372		.byte	11
000009f1 0c               12373		.byte	12
000009f2 1b               12374		.byte	27
000009f3 0c               12375		.byte	12
000009f4 0c               12376		.byte	12
000009f5 25               12377		.byte	37
000009f6 02               12378		.byte	2
000009f7 00               12379		.byte	0
000009f8 0c               12380		.byte	12
000009f9 02               12381		.byte	2
000009fa 02               12382		.byte	2
000009fb 000101           12383		.byte	0,1,1
                          12384		.section	.debug_info
                          12385	.LDW_4a03890:
000018db 1f               12386		.byte	31
000018dc 00000000         12387		.long	.LDW24
000018e0 00000000         12388		.long	.LDW34
                          12389	
                          12390	.LDW_4a49da8:
000018e4 06               12391		.byte	6
000018e5 726573756c7400   12392		.strz	"result"
000018ec f206             12393		.byte	242,6
000018ee 0b               12394		.byte	11
000018ef 01               12395		.byte	1
000018f0 00000000         12396		.long	.LDW_4a4b818
000018f4 00               12397		.byte	0
000018f5 00               12398		.byte	0
000018f6 0153             12399		.byte	1,83
                          12400	
000018f8 00               12401		.byte	0
                          12402	
000018f9 00               12403		.byte	0
                          12404	
                          12405	.LDW_5bae9d8:
000018fa 16               12406		.byte	22
000018fb 46626c476574426c 12407		.strz	"FblGetBlockNrFromAddress"
00001903 6f636b4e7246726f
0000190b 6d41646472657373
00001913 00              
00001914 9107             12408		.byte	145,7
00001916 0c               12409		.byte	12
00001917 01               12410		.byte	1
00001918 00000000         12411		.long	.LDW_4a4a380
0000191c 00000000         12412		.long	FblGetBlockNrFromAddress
00001920 00000000         12413		.long	__ghs_eofn_FblGetBlockNrFromAddress
00001924 0151             12414		.byte	1,81
00001926 808080c00f       12415		.byte	128,128,128,192,15
0000192b 0c               12416		.byte	12
0000192c 00               12417		.byte	0

                                   Fri Apr 10 08:32:04 2020           Page 223
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
0000192d 20               12418		.byte	32
0000192e 00               12419		.byte	0
0000192f 00               12420		.byte	0
00001930 00               12421		.byte	0
00001931 01               12422		.byte	1
00001932 01               12423		.byte	1
00001933 00               12424		.byte	0
00001934 01               12425		.byte	1
                          12426	
                          12427		.section	.debug_frame
                          12428	.LDW_5ccd9e0:
00000210 00000014         12429		.long	.LDW_unq_24-.LDW_unq_23
                          12430	.LDW_unq_23:
00000214 00000000         12431		.long	.LDW_5cc4c70
00000218 00000000         12432		.long	FblGetBlockNrFromAddress
0000021c 00000060         12433		.long	__ghs_eofn_FblGetBlockNrFromAddress-FblGetBlockNrFromAddress
00000220 01               12434		.byte	1
00000221 00000000         12435		.long	.LDW54
00000225 00               12436		.byte	0
00000226 00               12437		.byte	0
00000227 00               12438		.byte	0
                          12439	.LDW_unq_24:
                          12440		.section	.debug_line
000009fe 000502           12441		.byte	0,5,2
00000a01 00000000         12442		.long	FblGetBlockNrFromAddress
00000a05 06               12443		.byte	6
00000a06 03               12444		.byte	3
00000a07 9107             12445		.byte	145,7
00000a09 02               12446		.byte	2
00000a0a 00               12447		.byte	0
00000a0b 01               12448		.byte	1
00000a0c 03               12449		.byte	3
00000a0d 05               12450		.byte	5
00000a0e 02               12451		.byte	2
00000a0f 12               12452		.byte	18
00000a10 01               12453		.byte	1
00000a11 13               12454		.byte	19
00000a12 1c               12455		.byte	28
00000a13 000502           12456		.byte	0,5,2
00000a16 00000000         12457		.long	.LDWlin53
00000a1a 0b               12458		.byte	11
00000a1b 0b               12459		.byte	11
00000a1c 1b               12460		.byte	27
00000a1d 14               12461		.byte	20
00000a1e 000502           12462		.byte	0,5,2
00000a21 00000000         12463		.long	.LDWlin54
00000a25 0d               12464		.byte	13
00000a26 000502           12465		.byte	0,5,2
00000a29 00000000         12466		.long	.LDWlin55
00000a2d 03               12467		.byte	3
00000a2e 07               12468		.byte	7
00000a2f 02               12469		.byte	2
00000a30 00               12470		.byte	0
00000a31 01               12471		.byte	1
00000a32 000502           12472		.byte	0,5,2
00000a35 00000000         12473		.long	.LDWlin56

                                   Fri Apr 10 08:32:04 2020           Page 224
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
00000a39 0b               12474		.byte	11
00000a3a 0b               12475		.byte	11
00000a3b 13               12476		.byte	19
00000a3c 02               12477		.byte	2
00000a3d 00               12478		.byte	0
00000a3e 0d               12479		.byte	13
00000a3f 03               12480		.byte	3
00000a40 70               12481		.byte	112
00000a41 02               12482		.byte	2
00000a42 04               12483		.byte	4
00000a43 01               12484		.byte	1
00000a44 000502           12485		.byte	0,5,2
00000a47 00000000         12486		.long	.LDWlin57
00000a4b 03               12487		.byte	3
00000a4c 11               12488		.byte	17
00000a4d 02               12489		.byte	2
00000a4e 00               12490		.byte	0
00000a4f 01               12491		.byte	1
00000a50 0b               12492		.byte	11
00000a51 02               12493		.byte	2
00000a52 00               12494		.byte	0
00000a53 0c               12495		.byte	12
00000a54 06               12496		.byte	6
00000a55 02               12497		.byte	2
00000a56 02               12498		.byte	2
00000a57 02               12499		.byte	2
00000a58 0c               12500		.byte	12
00000a59 000101           12501		.byte	0,1,1
                          12502		.section	.debug_info
                          12503	.LDW_4a49e00:
00001935 11               12504		.byte	17
00001936 626c6f636b416464 12505		.strz	"blockAddress"
0000193e 7265737300      
00001943 9107             12506		.byte	145,7
00001945 31               12507		.byte	49
00001946 01               12508		.byte	1
00001947 00000000         12509		.long	.LDW_5cc9f80
0000194b 00               12510		.byte	0
0000194c 016b             12511		.byte	1,107
                          12512	
                          12513	.LDW_4a4a010:
0000194e 11               12514		.byte	17
0000194f 626c6f636b4c656e 12515		.strz	"blockLength"
00001957 67746800        
0000195b 9107             12516		.byte	145,7
0000195d 4a               12517		.byte	74
0000195e 01               12518		.byte	1
0000195f 00000000         12519		.long	.LDW_5cc9ed0
00001963 00               12520		.byte	0
00001964 016c             12521		.byte	1,108
                          12522	
                          12523	.LDW_5d44698:
00001966 11               12524		.byte	17
00001967 704c6f676963616c 12525		.strz	"pLogicalBlock"
0000196f 426c6f636b00    
00001975 9107             12526		.byte	145,7
00001977 5f               12527		.byte	95
00001978 01               12528		.byte	1
00001979 00000000         12529		.long	.LDW_4a0c648

                                   Fri Apr 10 08:32:04 2020           Page 225
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
0000197d 00               12530		.byte	0
0000197e 016d             12531		.byte	1,109
                          12532	
                          12533	.LDW_5bdd208:
00001980 1f               12534		.byte	31
00001981 00000000         12535		.long	.LDW44
00001985 00000000         12536		.long	.LDW54
                          12537	
                          12538	.LDW_5d44900:
00001989 06               12539		.byte	6
0000198a 726573756c7400   12540		.strz	"result"
00001991 9307             12541		.byte	147,7
00001993 0f               12542		.byte	15
00001994 01               12543		.byte	1
00001995 00000000         12544		.long	.LDW_4a4a380
00001999 00               12545		.byte	0
0000199a 00               12546		.byte	0
0000199b 016f             12547		.byte	1,111
                          12548	
                          12549	.LDW_5d44748:
0000199d 06               12550		.byte	6
0000199e 74656d70436f756e 12551		.strz	"tempCount"
000019a6 7400            
000019a8 9407             12552		.byte	148,7
000019aa 0b               12553		.byte	11
000019ab 01               12554		.byte	1
000019ac 00000000         12555		.long	.LDW_4a4b818
000019b0 00               12556		.byte	0
000019b1 00               12557		.byte	0
000019b2 016e             12558		.byte	1,110
                          12559	
000019b4 00               12560		.byte	0
                          12561	
000019b5 00               12562		.byte	0
                          12563	
                          12564	.LDW_5d553c0:
000019b6 15               12565		.byte	21
000019b7 46626c4469616749 12566		.strz	"FblDiagInitPowerOn"
000019bf 6e6974506f776572
000019c7 4f6e00          
000019ca eb07             12567		.byte	235,7
000019cc 06               12568		.byte	6
000019cd 01               12569		.byte	1
000019ce 00000000         12570		.long	FblDiagInitPowerOn
000019d2 00000000         12571		.long	__ghs_eofn_FblDiagInitPowerOn
000019d6 0151             12572		.byte	1,81
000019d8 8080808008       12573		.byte	128,128,128,128,8
000019dd 0c               12574		.byte	12
000019de 00               12575		.byte	0
000019df 10               12576		.byte	16
000019e0 00               12577		.byte	0
000019e1 00               12578		.byte	0
000019e2 00               12579		.byte	0
000019e3 01               12580		.byte	1
000019e4 01               12581		.byte	1
000019e5 00               12582		.byte	0
000019e6 01               12583		.byte	1
                          12584	
                          12585		.section	.debug_frame

                                   Fri Apr 10 08:32:04 2020           Page 226
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
                          12586	.LDW_5ccd920:
00000228 00000014         12587		.long	.LDW_unq_26-.LDW_unq_25
                          12588	.LDW_unq_25:
0000022c 00000000         12589		.long	.LDW_5cc4c70
00000230 00000000         12590		.long	FblDiagInitPowerOn
00000234 0000008c         12591		.long	__ghs_eofn_FblDiagInitPowerOn-FblDiagInitPowerOn
00000238 01               12592		.byte	1
00000239 00000000         12593		.long	.LDW74
0000023d 00               12594		.byte	0
0000023e 00               12595		.byte	0
0000023f 00               12596		.byte	0
                          12597	.LDW_unq_26:
                          12598		.section	.debug_line
00000a5c 000502           12599		.byte	0,5,2
00000a5f 00000000         12600		.long	FblDiagInitPowerOn
00000a63 06               12601		.byte	6
00000a64 03               12602		.byte	3
00000a65 eb07             12603		.byte	235,7
00000a67 02               12604		.byte	2
00000a68 00               12605		.byte	0
00000a69 01               12606		.byte	1
00000a6a 03               12607		.byte	3
00000a6b 04               12608		.byte	4
00000a6c 02               12609		.byte	2
00000a6d 0a               12610		.byte	10
00000a6e 01               12611		.byte	1
00000a6f 0c               12612		.byte	12
00000a70 23               12613		.byte	35
00000a71 0d               12614		.byte	13
00000a72 33               12615		.byte	51
00000a73 3c               12616		.byte	60
00000a74 2c               12617		.byte	44
00000a75 25               12618		.byte	37
00000a76 25               12619		.byte	37
00000a77 2d               12620		.byte	45
00000a78 2d               12621		.byte	45
00000a79 1c               12622		.byte	28
00000a7a 03               12623		.byte	3
00000a7b 05               12624		.byte	5
00000a7c 02               12625		.byte	2
00000a7d 08               12626		.byte	8
00000a7e 01               12627		.byte	1
00000a7f 03               12628		.byte	3
00000a80 07               12629		.byte	7
00000a81 02               12630		.byte	2
00000a82 08               12631		.byte	8
00000a83 01               12632		.byte	1
00000a84 2b               12633		.byte	43
00000a85 5b               12634		.byte	91
00000a86 03               12635		.byte	3
00000a87 09               12636		.byte	9
00000a88 02               12637		.byte	2
00000a89 04               12638		.byte	4
00000a8a 01               12639		.byte	1
00000a8b 1c               12640		.byte	28
00000a8c 02               12641		.byte	2

                                   Fri Apr 10 08:32:04 2020           Page 227
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
00000a8d 0a               12642		.byte	10
00000a8e 000101           12643		.byte	0,1,1
                          12644		.section	.debug_info
                          12645	.LDW_5bdd388:
000019e7 1f               12646		.byte	31
000019e8 00000000         12647		.long	.LDW64
000019ec 00000000         12648		.long	.LDW74
                          12649	
                          12650	.LDW_5d446f0:
000019f0 07               12651		.byte	7
000019f1 6900             12652		.strz	"i"
000019f3 ed07             12653		.byte	237,7
000019f5 0b               12654		.byte	11
000019f6 01               12655		.byte	1
000019f7 00000000         12656		.long	.LDW_4a4b818
000019fb 00               12657		.byte	0
000019fc 00               12658		.byte	0
                          12659	
000019fd 00               12660		.byte	0
                          12661	
000019fe 00               12662		.byte	0
                          12663	
                          12664	.LDW_5d55750:
000019ff 15               12665		.byte	21
00001a00 46626c4469616749 12666		.strz	"FblDiagInit"
00001a08 6e697400        
00001a0c ab08             12667		.byte	171,8
00001a0e 06               12668		.byte	6
00001a0f 01               12669		.byte	1
00001a10 00000000         12670		.long	FblDiagInit
00001a14 00000000         12671		.long	__ghs_eofn_FblDiagInit
00001a18 0151             12672		.byte	1,81
00001a1a 00               12673		.byte	0
00001a1b 08               12674		.byte	8
00001a1c 00               12675		.byte	0
00001a1d 08               12676		.byte	8
00001a1e 00               12677		.byte	0
00001a1f 00               12678		.byte	0
00001a20 00               12679		.byte	0
00001a21 01               12680		.byte	1
00001a22 01               12681		.byte	1
00001a23 00               12682		.byte	0
00001a24 01               12683		.byte	1
                          12684	
                          12685		.section	.debug_frame
                          12686	.LDW_5ccda60:
00000240 00000014         12687		.long	.LDW_unq_28-.LDW_unq_27
                          12688	.LDW_unq_27:
00000244 00000000         12689		.long	.LDW_5cc4c70
00000248 00000000         12690		.long	FblDiagInit
0000024c 00000032         12691		.long	__ghs_eofn_FblDiagInit-FblDiagInit
00000250 01               12692		.byte	1
00000251 00000000         12693		.long	.LDW94
00000255 00               12694		.byte	0
00000256 00               12695		.byte	0
00000257 00               12696		.byte	0
                          12697	.LDW_unq_28:

                                   Fri Apr 10 08:32:04 2020           Page 228
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
                          12698		.section	.debug_line
00000a91 000502           12699		.byte	0,5,2
00000a94 00000000         12700		.long	FblDiagInit
00000a98 06               12701		.byte	6
00000a99 03               12702		.byte	3
00000a9a ab08             12703		.byte	171,8
00000a9c 02               12704		.byte	2
00000a9d 00               12705		.byte	0
00000a9e 01               12706		.byte	1
00000a9f 2d               12707		.byte	45
00000aa0 03               12708		.byte	3
00000aa1 17               12709		.byte	23
00000aa2 02               12710		.byte	2
00000aa3 0c               12711		.byte	12
00000aa4 01               12712		.byte	1
00000aa5 03               12713		.byte	3
00000aa6 05               12714		.byte	5
00000aa7 02               12715		.byte	2
00000aa8 04               12716		.byte	4
00000aa9 01               12717		.byte	1
00000aaa 03               12718		.byte	3
00000aab 04               12719		.byte	4
00000aac 02               12720		.byte	2
00000aad 0a               12721		.byte	10
00000aae 01               12722		.byte	1
00000aaf 1d               12723		.byte	29
00000ab0 03               12724		.byte	3
00000ab1 06               12725		.byte	6
00000ab2 02               12726		.byte	2
00000ab3 04               12727		.byte	4
00000ab4 01               12728		.byte	1
00000ab5 02               12729		.byte	2
00000ab6 08               12730		.byte	8
00000ab7 000101           12731		.byte	0,1,1
                          12732		.section	.debug_info
                          12733	.LDW_5bdd3e8:
00001a25 1f               12734		.byte	31
00001a26 00000000         12735		.long	.LDW84
00001a2a 00000000         12736		.long	.LDW94
                          12737	
00001a2e 00               12738		.byte	0
                          12739	
00001a2f 00               12740		.byte	0
                          12741	
                          12742	.LDW_5d55a48:
00001a30 15               12743		.byte	21
00001a31 46626c4469616750 12744		.strz	"FblDiagPostInit"
00001a39 6f7374496e697400
00001a41 e208             12745		.byte	226,8
00001a43 06               12746		.byte	6
00001a44 01               12747		.byte	1
00001a45 00000000         12748		.long	FblDiagPostInit
00001a49 00000000         12749		.long	__ghs_eofn_FblDiagPostInit
00001a4d 0151             12750		.byte	1,81
00001a4f 00               12751		.byte	0
00001a50 08               12752		.byte	8
00001a51 00               12753		.byte	0

                                   Fri Apr 10 08:32:04 2020           Page 229
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
00001a52 08               12754		.byte	8
00001a53 00               12755		.byte	0
00001a54 00               12756		.byte	0
00001a55 00               12757		.byte	0
00001a56 01               12758		.byte	1
00001a57 01               12759		.byte	1
00001a58 00               12760		.byte	0
00001a59 01               12761		.byte	1
                          12762	
                          12763		.section	.debug_frame
                          12764	.LDW_5ccd9a0:
00000258 00000014         12765		.long	.LDW_unq_2a-.LDW_unq_29
                          12766	.LDW_unq_29:
0000025c 00000000         12767		.long	.LDW_5cc4c70
00000260 00000000         12768		.long	FblDiagPostInit
00000264 0000002e         12769		.long	__ghs_eofn_FblDiagPostInit-FblDiagPostInit
00000268 01               12770		.byte	1
00000269 00000000         12771		.long	.LDW17
0000026d 00               12772		.byte	0
0000026e 00               12773		.byte	0
0000026f 00               12774		.byte	0
                          12775	.LDW_unq_2a:
                          12776		.section	.debug_line
00000aba 000502           12777		.byte	0,5,2
00000abd 00000000         12778		.long	FblDiagPostInit
00000ac1 06               12779		.byte	6
00000ac2 03               12780		.byte	3
00000ac3 e208             12781		.byte	226,8
00000ac5 02               12782		.byte	2
00000ac6 00               12783		.byte	0
00000ac7 01               12784		.byte	1
00000ac8 02               12785		.byte	2
00000ac9 08               12786		.byte	8
00000aca 03               12787		.byte	3
00000acb 2b               12788		.byte	43
00000acc 02               12789		.byte	2
00000acd 08               12790		.byte	8
00000ace 01               12791		.byte	1
00000acf 000502           12792		.byte	0,5,2
00000ad2 00000000         12793		.long	.LDWlin120
00000ad6 0b               12794		.byte	11
00000ad7 0c               12795		.byte	12
00000ad8 000502           12796		.byte	0,5,2
00000adb 00000000         12797		.long	.LDWlin121
00000adf 0b               12798		.byte	11
00000ae0 02               12799		.byte	2
00000ae1 00               12800		.byte	0
00000ae2 03               12801		.byte	3
00000ae3 04               12802		.byte	4
00000ae4 02               12803		.byte	2
00000ae5 00               12804		.byte	0
00000ae6 01               12805		.byte	1
00000ae7 03               12806		.byte	3
00000ae8 05               12807		.byte	5
00000ae9 02               12808		.byte	2
00000aea 0c               12809		.byte	12

                                   Fri Apr 10 08:32:04 2020           Page 230
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
00000aeb 01               12810		.byte	1
00000aec 1c               12811		.byte	28
00000aed 02               12812		.byte	2
00000aee 08               12813		.byte	8
00000aef 000101           12814		.byte	0,1,1
                          12815		.section	.debug_info
                          12816	.LDW_5bdd478:
00001a5a 1f               12817		.byte	31
00001a5b 00000000         12818		.long	.LDW07
00001a5f 00000000         12819		.long	.LDW17
                          12820	
00001a63 00               12821		.byte	0
                          12822	
00001a64 00               12823		.byte	0
                          12824	
                          12825	.LDW_5d55dd8:
00001a65 15               12826		.byte	21
00001a66 46626c4469616744 12827		.strz	"FblDiagDeinit"
00001a6e 65696e697400    
00001a74 a509             12828		.byte	165,9
00001a76 0d               12829		.byte	13
00001a77 01               12830		.byte	1
00001a78 00000000         12831		.long	FblDiagDeinit..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_diag_core.
00001a7c 00000000         12832		.long	__ghs_eofn_FblDiagDeinit
00001a80 0151             12833		.byte	1,81
00001a82 8080808008       12834		.byte	128,128,128,128,8
00001a87 0c               12835		.byte	12
00001a88 00               12836		.byte	0
00001a89 10               12837		.byte	16
00001a8a 00               12838		.byte	0
00001a8b 00               12839		.byte	0
00001a8c 00               12840		.byte	0
00001a8d 00               12841		.byte	0
00001a8e 01               12842		.byte	1
00001a8f 00               12843		.byte	0
00001a90 01               12844		.byte	1
                          12845	
                          12846		.section	.debug_frame
                          12847	.LDW_5ccd060:
00000270 00000014         12848		.long	.LDW_unq_2c-.LDW_unq_2b
                          12849	.LDW_unq_2b:
00000274 00000000         12850		.long	.LDW_5cc4c70
00000278 00000000         12851		.long	FblDiagDeinit..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_diag_core.
0000027c 0000005e         12852		.long	__ghs_eofn_FblDiagDeinit-FblDiagDeinit..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_diag_core.
00000280 01               12853		.byte	1
00000281 00000000         12854		.long	.LDW12
00000285 00               12855		.byte	0
00000286 00               12856		.byte	0
00000287 00               12857		.byte	0
                          12858	.LDW_unq_2c:
                          12859		.section	.debug_line
00000af2 000502           12860		.byte	0,5,2
00000af5 00000000         12861		.long	FblDiagDeinit..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_diag_core.
00000af9 06               12862		.byte	6
00000afa 03               12863		.byte	3
00000afb a509             12864		.byte	165,9
00000afd 02               12865		.byte	2

                                   Fri Apr 10 08:32:04 2020           Page 231
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
00000afe 00               12866		.byte	0
00000aff 01               12867		.byte	1
00000b00 34               12868		.byte	52
00000b01 03               12869		.byte	3
00000b02 07               12870		.byte	7
00000b03 02               12871		.byte	2
00000b04 04               12872		.byte	4
00000b05 01               12873		.byte	1
00000b06 000502           12874		.byte	0,5,2
00000b09 00000000         12875		.long	.LDWlin29
00000b0d 0b               12876		.byte	11
00000b0e 0c               12877		.byte	12
00000b0f 1b               12878		.byte	27
00000b10 000502           12879		.byte	0,5,2
00000b13 00000000         12880		.long	.LDWlin30
00000b17 0b               12881		.byte	11
00000b18 03               12882		.byte	3
00000b19 04               12883		.byte	4
00000b1a 02               12884		.byte	2
00000b1b 00               12885		.byte	0
00000b1c 01               12886		.byte	1
00000b1d 03               12887		.byte	3
00000b1e 05               12888		.byte	5
00000b1f 02               12889		.byte	2
00000b20 06               12890		.byte	6
00000b21 01               12891		.byte	1
00000b22 23               12892		.byte	35
00000b23 02               12893		.byte	2
00000b24 00               12894		.byte	0
00000b25 0d               12895		.byte	13
00000b26 1b               12896		.byte	27
00000b27 02               12897		.byte	2
00000b28 00               12898		.byte	0
00000b29 0c               12899		.byte	12
00000b2a 4d               12900		.byte	77
00000b2b 000502           12901		.byte	0,5,2
00000b2e 00000000         12902		.long	.LDWlin31
00000b32 0d               12903		.byte	13
00000b33 43               12904		.byte	67
00000b34 02               12905		.byte	2
00000b35 0a               12906		.byte	10
00000b36 000101           12907		.byte	0,1,1
                          12908		.section	.debug_info
                          12909	.LDW_5bdd778:
00001a91 1f               12910		.byte	31
00001a92 00000000         12911		.long	.LDW02
00001a96 00000000         12912		.long	.LDW12
                          12913	
00001a9a 00               12914		.byte	0
                          12915	
00001a9b 00               12916		.byte	0
                          12917	
                          12918	.LDW_5d55880:
00001a9c 15               12919		.byte	21
00001a9d 46626c4469616753 12920		.strz	"FblDiagStateTask"
00001aa5 746174655461736b
00001aad 00              
00001aae d309             12921		.byte	211,9

                                   Fri Apr 10 08:32:04 2020           Page 232
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
00001ab0 06               12922		.byte	6
00001ab1 01               12923		.byte	1
00001ab2 00000000         12924		.long	FblDiagStateTask
00001ab6 00000000         12925		.long	__ghs_eofn_FblDiagStateTask
00001aba 0151             12926		.byte	1,81
00001abc 808080c00f       12927		.byte	128,128,128,192,15
00001ac1 0c               12928		.byte	12
00001ac2 00               12929		.byte	0
00001ac3 20               12930		.byte	32
00001ac4 00               12931		.byte	0
00001ac5 00               12932		.byte	0
00001ac6 00               12933		.byte	0
00001ac7 01               12934		.byte	1
00001ac8 01               12935		.byte	1
00001ac9 00               12936		.byte	0
00001aca 01               12937		.byte	1
                          12938	
                          12939		.section	.debug_frame
                          12940	.LDW_5ccd960:
00000288 00000014         12941		.long	.LDW_unq_2e-.LDW_unq_2d
                          12942	.LDW_unq_2d:
0000028c 00000000         12943		.long	.LDW_5cc4c70
00000290 00000000         12944		.long	FblDiagStateTask
00000294 0000011c         12945		.long	__ghs_eofn_FblDiagStateTask-FblDiagStateTask
00000298 01               12946		.byte	1
00000299 00000000         12947		.long	.LDW76
0000029d 00               12948		.byte	0
0000029e 00               12949		.byte	0
0000029f 00               12950		.byte	0
                          12951	.LDW_unq_2e:
                          12952		.section	.debug_line
00000b39 000502           12953		.byte	0,5,2
00000b3c 00000000         12954		.long	FblDiagStateTask
00000b40 06               12955		.byte	6
00000b41 03               12956		.byte	3
00000b42 d309             12957		.byte	211,9
00000b44 02               12958		.byte	2
00000b45 00               12959		.byte	0
00000b46 01               12960		.byte	1
00000b47 03               12961		.byte	3
00000b48 0a               12962		.byte	10
00000b49 02               12963		.byte	2
00000b4a 0c               12964		.byte	12
00000b4b 01               12965		.byte	1
00000b4c 000502           12966		.byte	0,5,2
00000b4f 00000000         12967		.long	.LDWlin100
00000b53 0b               12968		.byte	11
00000b54 03               12969		.byte	3
00000b55 05               12970		.byte	5
00000b56 02               12971		.byte	2
00000b57 00               12972		.byte	0
00000b58 01               12973		.byte	1
00000b59 000502           12974		.byte	0,5,2
00000b5c 00000000         12975		.long	.LDWlin101
00000b60 0b               12976		.byte	11
00000b61 0c               12977		.byte	12

                                   Fri Apr 10 08:32:04 2020           Page 233
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
00000b62 03               12978		.byte	3
00000b63 05               12979		.byte	5
00000b64 02               12980		.byte	2
00000b65 04               12981		.byte	4
00000b66 01               12982		.byte	1
00000b67 2d               12983		.byte	45
00000b68 000502           12984		.byte	0,5,2
00000b6b 00000000         12985		.long	.LDWlin102
00000b6f 0d               12986		.byte	13
00000b70 000502           12987		.byte	0,5,2
00000b73 00000000         12988		.long	.LDWlin103
00000b77 0b               12989		.byte	11
00000b78 03               12990		.byte	3
00000b79 04               12991		.byte	4
00000b7a 02               12992		.byte	2
00000b7b 00               12993		.byte	0
00000b7c 01               12994		.byte	1
00000b7d 000502           12995		.byte	0,5,2
00000b80 00000000         12996		.long	.LDWlin104
00000b84 0d               12997		.byte	13
00000b85 0d               12998		.byte	13
00000b86 25               12999		.byte	37
00000b87 000502           13000		.byte	0,5,2
00000b8a 00000000         13001		.long	.LDWlin105
00000b8e 0b               13002		.byte	11
00000b8f 0c               13003		.byte	12
00000b90 0c               13004		.byte	12
00000b91 000502           13005		.byte	0,5,2
00000b94 00000000         13006		.long	.LDWlin106
00000b98 0d               13007		.byte	13
00000b99 6b               13008		.byte	107
00000b9a 000502           13009		.byte	0,5,2
00000b9d 00000000         13010		.long	.LDWlin107
00000ba1 0d               13011		.byte	13
00000ba2 000502           13012		.byte	0,5,2
00000ba5 00000000         13013		.long	.LDWlin108
00000ba9 0b               13014		.byte	11
00000baa 0c               13015		.byte	12
00000bab 25               13016		.byte	37
00000bac 34               13017		.byte	52
00000bad 02               13018		.byte	2
00000bae 00               13019		.byte	0
00000baf 0b               13020		.byte	11
00000bb0 02               13021		.byte	2
00000bb1 00               13022		.byte	0
00000bb2 0b               13023		.byte	11
00000bb3 02               13024		.byte	2
00000bb4 00               13025		.byte	0
00000bb5 0b               13026		.byte	11
00000bb6 02               13027		.byte	2
00000bb7 00               13028		.byte	0
00000bb8 03               13029		.byte	3
00000bb9 04               13030		.byte	4
00000bba 02               13031		.byte	2
00000bbb 00               13032		.byte	0
00000bbc 01               13033		.byte	1

                                   Fri Apr 10 08:32:04 2020           Page 234
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
00000bbd 000502           13034		.byte	0,5,2
00000bc0 00000000         13035		.long	.LDWlin109
00000bc4 0b               13036		.byte	11
00000bc5 0b               13037		.byte	11
00000bc6 000502           13038		.byte	0,5,2
00000bc9 00000000         13039		.long	.LDWlin110
00000bcd 03               13040		.byte	3
00000bce 04               13041		.byte	4
00000bcf 02               13042		.byte	2
00000bd0 00               13043		.byte	0
00000bd1 01               13044		.byte	1
00000bd2 3c               13045		.byte	60
00000bd3 02               13046		.byte	2
00000bd4 00               13047		.byte	0
00000bd5 0d               13048		.byte	13
00000bd6 24               13049		.byte	36
00000bd7 000502           13050		.byte	0,5,2
00000bda 00000000         13051		.long	.LDWlin111
00000bde 0c               13052		.byte	12
00000bdf 02               13053		.byte	2
00000be0 00               13054		.byte	0
00000be1 03               13055		.byte	3
00000be2 0b               13056		.byte	11
00000be3 02               13057		.byte	2
00000be4 00               13058		.byte	0
00000be5 01               13059		.byte	1
00000be6 000502           13060		.byte	0,5,2
00000be9 00000000         13061		.long	.LDWlin112
00000bed 0b               13062		.byte	11
00000bee 0b               13063		.byte	11
00000bef 000502           13064		.byte	0,5,2
00000bf2 00000000         13065		.long	.LDWlin113
00000bf6 0b               13066		.byte	11
00000bf7 02               13067		.byte	2
00000bf8 00               13068		.byte	0
00000bf9 03               13069		.byte	3
00000bfa 04               13070		.byte	4
00000bfb 02               13071		.byte	2
00000bfc 00               13072		.byte	0
00000bfd 01               13073		.byte	1
00000bfe 000502           13074		.byte	0,5,2
00000c01 00000000         13075		.long	.LDWlin114
00000c05 0b               13076		.byte	11
00000c06 0c               13077		.byte	12
00000c07 03               13078		.byte	3
00000c08 04               13079		.byte	4
00000c09 02               13080		.byte	2
00000c0a 04               13081		.byte	4
00000c0b 01               13082		.byte	1
00000c0c 1c               13083		.byte	28
00000c0d 02               13084		.byte	2
00000c0e 00               13085		.byte	0
00000c0f 03               13086		.byte	3
00000c10 0c               13087		.byte	12
00000c11 02               13088		.byte	2
00000c12 00               13089		.byte	0

                                   Fri Apr 10 08:32:04 2020           Page 235
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
00000c13 01               13090		.byte	1
00000c14 02               13091		.byte	2
00000c15 0c               13092		.byte	12
00000c16 000101           13093		.byte	0,1,1
                          13094		.section	.debug_info
                          13095	.LDW_5bdd2c8:
00001acb 1f               13096		.byte	31
00001acc 00000000         13097		.long	.LDW66
00001ad0 00000000         13098		.long	.LDW76
                          13099	
                          13100	.LDW_5d447a0:
00001ad4 06               13101		.byte	6
00001ad5 726573756c7400   13102		.strz	"result"
00001adc d509             13103		.byte	213,9
00001ade 0f               13104		.byte	15
00001adf 01               13105		.byte	1
00001ae0 00000000         13106		.long	.LDW_4a4a380
00001ae4 00               13107		.byte	0
00001ae5 00               13108		.byte	0
00001ae6 0153             13109		.byte	1,83
                          13110	
00001ae8 00               13111		.byte	0
                          13112	
00001ae9 00               13113		.byte	0
                          13114	
                          13115	.LDW_5d55918:
00001aea 15               13116		.byte	21
00001aeb 46626c4469616754 13117		.strz	"FblDiagTimerTask"
00001af3 696d65725461736b
00001afb 00              
00001afc df0a             13118		.byte	223,10
00001afe 06               13119		.byte	6
00001aff 01               13120		.byte	1
00001b00 00000000         13121		.long	FblDiagTimerTask
00001b04 00000000         13122		.long	__ghs_eofn_FblDiagTimerTask
00001b08 0151             13123		.byte	1,81
00001b0a 8080808008       13124		.byte	128,128,128,128,8
00001b0f 0c               13125		.byte	12
00001b10 00               13126		.byte	0
00001b11 10               13127		.byte	16
00001b12 00               13128		.byte	0
00001b13 00               13129		.byte	0
00001b14 00               13130		.byte	0
00001b15 01               13131		.byte	1
00001b16 01               13132		.byte	1
00001b17 00               13133		.byte	0
00001b18 01               13134		.byte	1
                          13135	
                          13136		.section	.debug_frame
                          13137	.LDW_5ccd860:
000002a0 00000014         13138		.long	.LDW_unq_30-.LDW_unq_2f
                          13139	.LDW_unq_2f:
000002a4 00000000         13140		.long	.LDW_5cc4c70
000002a8 00000000         13141		.long	FblDiagTimerTask
000002ac 0000007c         13142		.long	__ghs_eofn_FblDiagTimerTask-FblDiagTimerTask
000002b0 01               13143		.byte	1
000002b1 00000000         13144		.long	.LDW37
000002b5 00               13145		.byte	0

                                   Fri Apr 10 08:32:04 2020           Page 236
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
000002b6 00               13146		.byte	0
000002b7 00               13147		.byte	0
                          13148	.LDW_unq_30:
                          13149		.section	.debug_line
00000c19 000502           13150		.byte	0,5,2
00000c1c 00000000         13151		.long	FblDiagTimerTask
00000c20 06               13152		.byte	6
00000c21 03               13153		.byte	3
00000c22 df0a             13154		.byte	223,10
00000c24 02               13155		.byte	2
00000c25 00               13156		.byte	0
00000c26 01               13157		.byte	1
00000c27 03               13158		.byte	3
00000c28 07               13159		.byte	7
00000c29 02               13160		.byte	2
00000c2a 0a               13161		.byte	10
00000c2b 01               13162		.byte	1
00000c2c 000502           13163		.byte	0,5,2
00000c2f 00000000         13164		.long	.LDWlin122
00000c33 0b               13165		.byte	11
00000c34 0b               13166		.byte	11
00000c35 23               13167		.byte	35
00000c36 000502           13168		.byte	0,5,2
00000c39 00000000         13169		.long	.LDWlin123
00000c3d 0b               13170		.byte	11
00000c3e 03               13171		.byte	3
00000c3f 05               13172		.byte	5
00000c40 02               13173		.byte	2
00000c41 00               13174		.byte	0
00000c42 01               13175		.byte	1
00000c43 000502           13176		.byte	0,5,2
00000c46 00000000         13177		.long	.LDWlin124
00000c4a 0c               13178		.byte	12
00000c4b 02               13179		.byte	2
00000c4c 00               13180		.byte	0
00000c4d 0b               13181		.byte	11
00000c4e 02               13182		.byte	2
00000c4f 00               13183		.byte	0
00000c50 0d               13184		.byte	13
00000c51 000502           13185		.byte	0,5,2
00000c54 00000000         13186		.long	.LDWlin125
00000c58 0b               13187		.byte	11
00000c59 0b               13188		.byte	11
00000c5a 23               13189		.byte	35
00000c5b 000502           13190		.byte	0,5,2
00000c5e 00000000         13191		.long	.LDWlin126
00000c62 0b               13192		.byte	11
00000c63 0d               13193		.byte	13
00000c64 000502           13194		.byte	0,5,2
00000c67 00000000         13195		.long	.LDWlin127
00000c6b 0b               13196		.byte	11
00000c6c 02               13197		.byte	2
00000c6d 00               13198		.byte	0
00000c6e 0b               13199		.byte	11
00000c6f 02               13200		.byte	2
00000c70 00               13201		.byte	0

                                   Fri Apr 10 08:32:04 2020           Page 237
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
00000c71 03               13202		.byte	3
00000c72 06               13203		.byte	6
00000c73 02               13204		.byte	2
00000c74 00               13205		.byte	0
00000c75 01               13206		.byte	1
00000c76 000502           13207		.byte	0,5,2
00000c79 00000000         13208		.long	.LDWlin128
00000c7d 0b               13209		.byte	11
00000c7e 0b               13210		.byte	11
00000c7f 1b               13211		.byte	27
00000c80 000502           13212		.byte	0,5,2
00000c83 00000000         13213		.long	.LDWlin129
00000c87 0b               13214		.byte	11
00000c88 0b               13215		.byte	11
00000c89 1b               13216		.byte	27
00000c8a 23               13217		.byte	35
00000c8b 02               13218		.byte	2
00000c8c 00               13219		.byte	0
00000c8d 0b               13220		.byte	11
00000c8e 02               13221		.byte	2
00000c8f 00               13222		.byte	0
00000c90 03               13223		.byte	3
00000c91 06               13224		.byte	6
00000c92 02               13225		.byte	2
00000c93 00               13226		.byte	0
00000c94 01               13227		.byte	1
00000c95 000502           13228		.byte	0,5,2
00000c98 00000000         13229		.long	.LDWlin130
00000c9c 0b               13230		.byte	11
00000c9d 0b               13231		.byte	11
00000c9e 1b               13232		.byte	27
00000c9f 02               13233		.byte	2
00000ca0 00               13234		.byte	0
00000ca1 03               13235		.byte	3
00000ca2 0c               13236		.byte	12
00000ca3 02               13237		.byte	2
00000ca4 00               13238		.byte	0
00000ca5 01               13239		.byte	1
00000ca6 02               13240		.byte	2
00000ca7 0a               13241		.byte	10
00000ca8 000101           13242		.byte	0,1,1
                          13243		.section	.debug_info
                          13244	.LDW_5bdd538:
00001b19 1f               13245		.byte	31
00001b1a 00000000         13246		.long	.LDW27
00001b1e 00000000         13247		.long	.LDW37
                          13248	
00001b22 00               13249		.byte	0
                          13250	
00001b23 00               13251		.byte	0
                          13252	
                          13253	.LDW_5d55f08:
00001b24 16               13254		.byte	22
00001b25 436865636b537562 13255		.strz	"CheckSubparameter"
00001b2d 706172616d657465
00001b35 7200            
00001b37 b30b             13256		.byte	179,11
00001b39 10               13257		.byte	16

                                   Fri Apr 10 08:32:04 2020           Page 238
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
00001b3a 01               13258		.byte	1
00001b3b 00000000         13259		.long	.LDW_4a49eb0
00001b3f 00000000         13260		.long	CheckSubparameter..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_diag_core.
00001b43 00000000         13261		.long	__ghs_eofn_CheckSubparameter
00001b47 0151             13262		.byte	1,81
00001b49 03               13263		.byte	3
00001b4a 00               13264		.byte	0
00001b4b 00               13265		.byte	0
00001b4c 00               13266		.byte	0
00001b4d 00               13267		.byte	0
00001b4e 00               13268		.byte	0
00001b4f 00               13269		.byte	0
00001b50 00               13270		.byte	0
00001b51 01               13271		.byte	1
00001b52 00               13272		.byte	0
00001b53 01               13273		.byte	1
                          13274	
                          13275		.section	.debug_frame
                          13276	.LDW_5ccdb60:
000002b8 00000014         13277		.long	.LDW_unq_32-.LDW_unq_31
                          13278	.LDW_unq_31:
000002bc 00000000         13279		.long	.LDW_5cc4c70
000002c0 00000000         13280		.long	CheckSubparameter..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_diag_core.
000002c4 0000003c         13281		.long	__ghs_eofn_CheckSubparameter-CheckSubparameter..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_diag_core.
000002c8 01               13282		.byte	1
000002c9 00000000         13283		.long	.LDW16
000002cd 00               13284		.byte	0
000002ce 00               13285		.byte	0
000002cf 00               13286		.byte	0
                          13287	.LDW_unq_32:
                          13288		.section	.debug_line
00000cab 000502           13289		.byte	0,5,2
00000cae 00000000         13290		.long	CheckSubparameter..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_diag_core.
00000cb2 06               13291		.byte	6
00000cb3 03               13292		.byte	3
00000cb4 b60b             13293		.byte	182,11
00000cb6 02               13294		.byte	2
00000cb7 00               13295		.byte	0
00000cb8 01               13296		.byte	1
00000cb9 14               13297		.byte	20
00000cba 000502           13298		.byte	0,5,2
00000cbd 00000000         13299		.long	.LDWlin71
00000cc1 0b               13300		.byte	11
00000cc2 2c               13301		.byte	44
00000cc3 15               13302		.byte	21
00000cc4 000502           13303		.byte	0,5,2
00000cc7 00000000         13304		.long	.LDWlin72
00000ccb 0b               13305		.byte	11
00000ccc 0b               13306		.byte	11
00000ccd 000502           13307		.byte	0,5,2
00000cd0 00000000         13308		.long	.LDWlin73
00000cd4 0b               13309		.byte	11
00000cd5 0c               13310		.byte	12
00000cd6 000502           13311		.byte	0,5,2
00000cd9 00000000         13312		.long	.LDWlin74
00000cdd 0b               13313		.byte	11

                                   Fri Apr 10 08:32:04 2020           Page 239
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
00000cde 0c               13314		.byte	12
00000cdf 0b               13315		.byte	11
00000ce0 1b               13316		.byte	27
00000ce1 02               13317		.byte	2
00000ce2 00               13318		.byte	0
00000ce3 0b               13319		.byte	11
00000ce4 02               13320		.byte	2
00000ce5 00               13321		.byte	0
00000ce6 03               13322		.byte	3
00000ce7 6f               13323		.byte	111
00000ce8 02               13324		.byte	2
00000ce9 00               13325		.byte	0
00000cea 01               13326		.byte	1
00000ceb 000502           13327		.byte	0,5,2
00000cee 00000000         13328		.long	.LDWlin75
00000cf2 03               13329		.byte	3
00000cf3 12               13330		.byte	18
00000cf4 02               13331		.byte	2
00000cf5 00               13332		.byte	0
00000cf6 01               13333		.byte	1
00000cf7 0b               13334		.byte	11
00000cf8 06               13335		.byte	6
00000cf9 02               13336		.byte	2
00000cfa 02               13337		.byte	2
00000cfb 02               13338		.byte	2
00000cfc 02               13339		.byte	2
00000cfd 000101           13340		.byte	0,1,1
                          13341		.section	.debug_info
                          13342	.LDW_5d44488:
00001b54 11               13343		.byte	17
00001b55 7375624663745061 13344		.strz	"subFctParamIdTable"
00001b5d 72616d4964546162
00001b65 6c6500          
00001b68 b30b             13345		.byte	179,11
00001b6a 49               13346		.byte	73
00001b6b 01               13347		.byte	1
00001b6c 00000000         13348		.long	.LDW_4a0c4c0
00001b70 00               13349		.byte	0
00001b71 0153             13350		.byte	1,83
                          13351	
                          13352	.LDW_5d445e8:
00001b73 11               13353		.byte	17
00001b74 706172616d496400 13354		.strz	"paramId"
00001b7c b30b             13355		.byte	179,11
00001b7e 64               13356		.byte	100
00001b7f 01               13357		.byte	1
00001b80 00000000         13358		.long	.LDW_5d44850
00001b84 00               13359		.byte	0
00001b85 0154             13360		.byte	1,84
                          13361	
                          13362	.LDW_5bdd568:
00001b87 1f               13363		.byte	31
00001b88 00000000         13364		.long	.LDW06
00001b8c 00000000         13365		.long	.LDW16
                          13366	
                          13367	.LDW_5d448a8:
00001b90 06               13368		.byte	6
00001b91 726573756c7400   13369		.strz	"result"

                                   Fri Apr 10 08:32:04 2020           Page 240
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
00001b98 b50b             13370		.byte	181,11
00001b9a 0c               13371		.byte	12
00001b9b 01               13372		.byte	1
00001b9c 00000000         13373		.long	.LDW_4a49eb0
00001ba0 00               13374		.byte	0
00001ba1 00               13375		.byte	0
00001ba2 0150             13376		.byte	1,80
                          13377	
00001ba4 00               13378		.byte	0
                          13379	
00001ba5 00               13380		.byte	0
                          13381	
                          13382	.LDW_5d55ca8:
00001ba6 16               13383		.byte	22
00001ba7 436865636b537562 13384		.strz	"CheckSubServiceTable"
00001baf 5365727669636554
00001bb7 61626c6500      
00001bbc dc0b             13385		.byte	220,11
00001bbe 10               13386		.byte	16
00001bbf 01               13387		.byte	1
00001bc0 00000000         13388		.long	.LDW_4a49eb0
00001bc4 00000000         13389		.long	CheckSubServiceTable..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_diag_core.
00001bc8 00000000         13390		.long	__ghs_eofn_CheckSubServiceTable
00001bcc 0151             13391		.byte	1,81
00001bce 808080e00f       13392		.byte	128,128,128,224,15
00001bd3 08               13393		.byte	8
00001bd4 00               13394		.byte	0
00001bd5 20               13395		.byte	32
00001bd6 00               13396		.byte	0
00001bd7 00               13397		.byte	0
00001bd8 00               13398		.byte	0
00001bd9 00               13399		.byte	0
00001bda 01               13400		.byte	1
00001bdb 00               13401		.byte	0
00001bdc 01               13402		.byte	1
                          13403	
                          13404		.section	.debug_frame
                          13405	.LDW_5ccdb20:
000002d0 00000014         13406		.long	.LDW_unq_34-.LDW_unq_33
                          13407	.LDW_unq_33:
000002d4 00000000         13408		.long	.LDW_5cc4c70
000002d8 00000000         13409		.long	CheckSubServiceTable..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_diag_core.
000002dc 000000f0         13410		.long	__ghs_eofn_CheckSubServiceTable-CheckSubServiceTable..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_diag_core.
000002e0 01               13411		.byte	1
000002e1 00000000         13412		.long	.LDW36
000002e5 00               13413		.byte	0
000002e6 00               13414		.byte	0
000002e7 00               13415		.byte	0
                          13416	.LDW_unq_34:
                          13417		.section	.debug_line
00000d00 000502           13418		.byte	0,5,2
00000d03 00000000         13419		.long	CheckSubServiceTable..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_diag_core.
00000d07 06               13420		.byte	6
00000d08 03               13421		.byte	3
00000d09 dc0b             13422		.byte	220,11
00000d0b 02               13423		.byte	2
00000d0c 00               13424		.byte	0
00000d0d 01               13425		.byte	1

                                   Fri Apr 10 08:32:04 2020           Page 241
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
00000d0e 03               13426		.byte	3
00000d0f 06               13427		.byte	6
00000d10 02               13428		.byte	2
00000d11 10               13429		.byte	16
00000d12 01               13430		.byte	1
00000d13 1c               13431		.byte	28
00000d14 03               13432		.byte	3
00000d15 04               13433		.byte	4
00000d16 02               13434		.byte	2
00000d17 0c               13435		.byte	12
00000d18 01               13436		.byte	1
00000d19 000502           13437		.byte	0,5,2
00000d1c 00000000         13438		.long	.LDWlin76
00000d20 0d               13439		.byte	13
00000d21 15               13440		.byte	21
00000d22 000502           13441		.byte	0,5,2
00000d25 00000000         13442		.long	.LDWlin77
00000d29 0b               13443		.byte	11
00000d2a 2d               13444		.byte	45
00000d2b 000502           13445		.byte	0,5,2
00000d2e 00000000         13446		.long	.LDWlin78
00000d32 0b               13447		.byte	11
00000d33 03               13448		.byte	3
00000d34 05               13449		.byte	5
00000d35 02               13450		.byte	2
00000d36 00               13451		.byte	0
00000d37 01               13452		.byte	1
00000d38 35               13453		.byte	53
00000d39 7b               13454		.byte	123
00000d3a 0d               13455		.byte	13
00000d3b 02               13456		.byte	2
00000d3c 00               13457		.byte	0
00000d3d 0b               13458		.byte	11
00000d3e 000502           13459		.byte	0,5,2
00000d41 00000000         13460		.long	.LDWlin79
00000d45 0b               13461		.byte	11
00000d46 0c               13462		.byte	12
00000d47 000502           13463		.byte	0,5,2
00000d4a 00000000         13464		.long	.LDWlin80
00000d4e 03               13465		.byte	3
00000d4f 04               13466		.byte	4
00000d50 02               13467		.byte	2
00000d51 00               13468		.byte	0
00000d52 01               13469		.byte	1
00000d53 02               13470		.byte	2
00000d54 00               13471		.byte	0
00000d55 0b               13472		.byte	11
00000d56 0c               13473		.byte	12
00000d57 0c               13474		.byte	12
00000d58 06               13475		.byte	6
00000d59 000502           13476		.byte	0,5,2
00000d5c 00000000         13477		.long	.LDWlin81
00000d60 03               13478		.byte	3
00000d61 7a               13479		.byte	122
00000d62 02               13480		.byte	2
00000d63 00               13481		.byte	0

                                   Fri Apr 10 08:32:04 2020           Page 242
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
00000d64 01               13482		.byte	1
00000d65 06               13483		.byte	6
00000d66 03               13484		.byte	3
00000d67 07               13485		.byte	7
00000d68 02               13486		.byte	2
00000d69 00               13487		.byte	0
00000d6a 01               13488		.byte	1
00000d6b 0c               13489		.byte	12
00000d6c 1b               13490		.byte	27
00000d6d 02               13491		.byte	2
00000d6e 00               13492		.byte	0
00000d6f 0b               13493		.byte	11
00000d70 02               13494		.byte	2
00000d71 00               13495		.byte	0
00000d72 0c               13496		.byte	12
00000d73 000502           13497		.byte	0,5,2
00000d76 00000000         13498		.long	.LDWlin82
00000d7a 03               13499		.byte	3
00000d7b 04               13500		.byte	4
00000d7c 02               13501		.byte	2
00000d7d 00               13502		.byte	0
00000d7e 01               13503		.byte	1
00000d7f 0c               13504		.byte	12
00000d80 1b               13505		.byte	27
00000d81 02               13506		.byte	2
00000d82 00               13507		.byte	0
00000d83 0d               13508		.byte	13
00000d84 000502           13509		.byte	0,5,2
00000d87 00000000         13510		.long	.LDWlin83
00000d8b 0d               13511		.byte	13
00000d8c 0c               13512		.byte	12
00000d8d 1b               13513		.byte	27
00000d8e 02               13514		.byte	2
00000d8f 00               13515		.byte	0
00000d90 03               13516		.byte	3
00000d91 04               13517		.byte	4
00000d92 02               13518		.byte	2
00000d93 00               13519		.byte	0
00000d94 01               13520		.byte	1
00000d95 000502           13521		.byte	0,5,2
00000d98 00000000         13522		.long	.LDWlin84
00000d9c 0d               13523		.byte	13
00000d9d 0d               13524		.byte	13
00000d9e 000502           13525		.byte	0,5,2
00000da1 00000000         13526		.long	.LDWlin85
00000da5 0b               13527		.byte	11
00000da6 02               13528		.byte	2
00000da7 00               13529		.byte	0
00000da8 03               13530		.byte	3
00000da9 04               13531		.byte	4
00000daa 02               13532		.byte	2
00000dab 00               13533		.byte	0
00000dac 01               13534		.byte	1
00000dad 0c               13535		.byte	12
00000dae 0b               13536		.byte	11
00000daf 000502           13537		.byte	0,5,2

                                   Fri Apr 10 08:32:04 2020           Page 243
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
00000db2 00000000         13538		.long	.LDWlin86
00000db6 0b               13539		.byte	11
00000db7 0c               13540		.byte	12
00000db8 03               13541		.byte	3
00000db9 05               13542		.byte	5
00000dba 02               13543		.byte	2
00000dbb 02               13544		.byte	2
00000dbc 01               13545		.byte	1
00000dbd 13               13546		.byte	19
00000dbe 02               13547		.byte	2
00000dbf 00               13548		.byte	0
00000dc0 0c               13549		.byte	12
00000dc1 13               13550		.byte	19
00000dc2 02               13551		.byte	2
00000dc3 00               13552		.byte	0
00000dc4 03               13553		.byte	3
00000dc5 a77f             13554		.byte	167,127
00000dc7 02               13555		.byte	2
00000dc8 00               13556		.byte	0
00000dc9 01               13557		.byte	1
00000dca 000502           13558		.byte	0,5,2
00000dcd 00000000         13559		.long	.LDWlin87
00000dd1 03               13560		.byte	3
00000dd2 da00             13561		.byte	218,0
00000dd4 02               13562		.byte	2
00000dd5 00               13563		.byte	0
00000dd6 01               13564		.byte	1
00000dd7 0d               13565		.byte	13
00000dd8 06               13566		.byte	6
00000dd9 02               13567		.byte	2
00000dda 02               13568		.byte	2
00000ddb 02               13569		.byte	2
00000ddc 0c               13570		.byte	12
00000ddd 000101           13571		.byte	0,1,1
                          13572		.section	.debug_info
                          13573	.LDW_5d44430:
00001bdd 11               13574		.byte	17
00001bde 737562466374496e 13575		.strz	"subFctInfo"
00001be6 666f00          
00001be9 dc0b             13576		.byte	220,11
00001beb 56               13577		.byte	86
00001bec 01               13578		.byte	1
00001bed 00000000         13579		.long	.LDW_5d667a8
00001bf1 00               13580		.byte	0
00001bf2 016c             13581		.byte	1,108
                          13582	
                          13583	.LDW_5d444e0:
00001bf4 11               13584		.byte	17
00001bf5 696e666f5461626c 13585		.strz	"infoTableLen"
00001bfd 654c656e00      
00001c02 dc0b             13586		.byte	220,11
00001c04 69               13587		.byte	105
00001c05 01               13588		.byte	1
00001c06 00000000         13589		.long	.LDW_5d44850
00001c0a 00               13590		.byte	0
00001c0b 016d             13591		.byte	1,109
                          13592	
                          13593	.LDW_5d44640:

                                   Fri Apr 10 08:32:04 2020           Page 244
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
00001c0d 11               13594		.byte	17
00001c0e 706172616d496454 13595		.strz	"paramIdTableLen"
00001c16 61626c654c656e00
00001c1e dc0b             13596		.byte	220,11
00001c20 7e               13597		.byte	126
00001c21 01               13598		.byte	1
00001c22 00000000         13599		.long	.LDW_5d44850
00001c26 00               13600		.byte	0
00001c27 0155             13601		.byte	1,85
                          13602	
                          13603	.LDW_5bdd6b8:
00001c29 1f               13604		.byte	31
00001c2a 00000000         13605		.long	.LDW26
00001c2e 00000000         13606		.long	.LDW36
                          13607	
                          13608	.LDW_5d44a08:
00001c32 06               13609		.byte	6
00001c33 726573756c7400   13610		.strz	"result"
00001c3a de0b             13611		.byte	222,11
00001c3c 0c               13612		.byte	12
00001c3d 01               13613		.byte	1
00001c3e 00000000         13614		.long	.LDW_4a49eb0
00001c42 00               13615		.byte	0
00001c43 00               13616		.byte	0
00001c44 016a             13617		.byte	1,106
                          13618	
                          13619	.LDW_5d44170:
00001c46 06               13620		.byte	6
00001c47 726573756c745375 13621		.strz	"resultSubParam"
00001c4f 62506172616d00  
00001c56 df0b             13622		.byte	223,11
00001c58 0c               13623		.byte	12
00001c59 01               13624		.byte	1
00001c5a 00000000         13625		.long	.LDW_4a49eb0
00001c5e 00               13626		.byte	0
00001c5f 00               13627		.byte	0
00001c60 0153             13628		.byte	1,83
                          13629	
                          13630	.LDW_5d442d0:
00001c62 06               13631		.byte	6
00001c63 7375625061725374 13632		.strz	"subParState"
00001c6b 61746500        
00001c6f e00b             13633		.byte	224,11
00001c71 0c               13634		.byte	12
00001c72 01               13635		.byte	1
00001c73 00000000         13636		.long	.LDW_4a49eb0
00001c77 00               13637		.byte	0
00001c78 00               13638		.byte	0
00001c79 016f             13639		.byte	1,111
                          13640	
00001c7b 00               13641		.byte	0
                          13642	
00001c7c 00               13643		.byte	0
                          13644	
                          13645	.LDW_5d55ae0:
00001c7d 16               13646		.byte	22
00001c7e 436865636b536572 13647		.strz	"CheckServiceTable"
00001c86 766963655461626c
00001c8e 6500            
00001c90 d40c             13648		.byte	212,12
00001c92 10               13649		.byte	16

                                   Fri Apr 10 08:32:04 2020           Page 245
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
00001c93 01               13650		.byte	1
00001c94 00000000         13651		.long	.LDW_4a49eb0
00001c98 00000000         13652		.long	CheckServiceTable..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_diag_core.
00001c9c 00000000         13653		.long	__ghs_eofn_CheckServiceTable
00001ca0 0151             13654		.byte	1,81
00001ca2 8080808008       13655		.byte	128,128,128,128,8
00001ca7 0c               13656		.byte	12
00001ca8 00               13657		.byte	0
00001ca9 10               13658		.byte	16
00001caa 00               13659		.byte	0
00001cab 00               13660		.byte	0
00001cac 00               13661		.byte	0
00001cad 00               13662		.byte	0
00001cae 01               13663		.byte	1
00001caf 00               13664		.byte	0
00001cb0 01               13665		.byte	1
                          13666	
                          13667		.section	.debug_frame
                          13668	.LDW_5ccdf60:
000002e8 00000014         13669		.long	.LDW_unq_36-.LDW_unq_35
                          13670	.LDW_unq_35:
000002ec 00000000         13671		.long	.LDW_5cc4c70
000002f0 00000000         13672		.long	CheckServiceTable..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_diag_core.
000002f4 0000007c         13673		.long	__ghs_eofn_CheckServiceTable-CheckServiceTable..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_diag_core.
000002f8 01               13674		.byte	1
000002f9 00000000         13675		.long	.LDW95
000002fd 00               13676		.byte	0
000002fe 00               13677		.byte	0
000002ff 00               13678		.byte	0
                          13679	.LDW_unq_36:
                          13680		.section	.debug_line
00000de0 000502           13681		.byte	0,5,2
00000de3 00000000         13682		.long	CheckServiceTable..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_diag_core.
00000de7 06               13683		.byte	6
00000de8 03               13684		.byte	3
00000de9 d40c             13685		.byte	212,12
00000deb 02               13686		.byte	2
00000dec 00               13687		.byte	0
00000ded 01               13688		.byte	1
00000dee 03               13689		.byte	3
00000def 04               13690		.byte	4
00000df0 02               13691		.byte	2
00000df1 0c               13692		.byte	12
00000df2 01               13693		.byte	1
00000df3 03               13694		.byte	3
00000df4 04               13695		.byte	4
00000df5 02               13696		.byte	2
00000df6 02               13697		.byte	2
00000df7 01               13698		.byte	1
00000df8 4d               13699		.byte	77
00000df9 63               13700		.byte	99
00000dfa 24               13701		.byte	36
00000dfb 02               13702		.byte	2
00000dfc 00               13703		.byte	0
00000dfd 0d               13704		.byte	13
00000dfe 000502           13705		.byte	0,5,2

                                   Fri Apr 10 08:32:04 2020           Page 246
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
00000e01 00000000         13706		.long	.LDWlin66
00000e05 0b               13707		.byte	11
00000e06 0b               13708		.byte	11
00000e07 1b               13709		.byte	27
00000e08 02               13710		.byte	2
00000e09 00               13711		.byte	0
00000e0a 0d               13712		.byte	13
00000e0b 000502           13713		.byte	0,5,2
00000e0e 00000000         13714		.long	.LDWlin67
00000e12 0b               13715		.byte	11
00000e13 0b               13716		.byte	11
00000e14 1b               13717		.byte	27
00000e15 02               13718		.byte	2
00000e16 00               13719		.byte	0
00000e17 0d               13720		.byte	13
00000e18 000502           13721		.byte	0,5,2
00000e1b 00000000         13722		.long	.LDWlin68
00000e1f 0b               13723		.byte	11
00000e20 2c               13724		.byte	44
00000e21 000502           13725		.byte	0,5,2
00000e24 00000000         13726		.long	.LDWlin69
00000e28 0d               13727		.byte	13
00000e29 02               13728		.byte	2
00000e2a 00               13729		.byte	0
00000e2b 0b               13730		.byte	11
00000e2c 0c               13731		.byte	12
00000e2d 0c               13732		.byte	12
00000e2e 06               13733		.byte	6
00000e2f 000502           13734		.byte	0,5,2
00000e32 00000000         13735		.long	.LDWlin70
00000e36 03               13736		.byte	3
00000e37 7a               13737		.byte	122
00000e38 02               13738		.byte	2
00000e39 00               13739		.byte	0
00000e3a 01               13740		.byte	1
00000e3b 06               13741		.byte	6
00000e3c 03               13742		.byte	3
00000e3d 07               13743		.byte	7
00000e3e 02               13744		.byte	2
00000e3f 00               13745		.byte	0
00000e40 01               13746		.byte	1
00000e41 0b               13747		.byte	11
00000e42 1b               13748		.byte	27
00000e43 02               13749		.byte	2
00000e44 00               13750		.byte	0
00000e45 0b               13751		.byte	11
00000e46 02               13752		.byte	2
00000e47 00               13753		.byte	0
00000e48 0c               13754		.byte	12
00000e49 06               13755		.byte	6
00000e4a 02               13756		.byte	2
00000e4b 02               13757		.byte	2
00000e4c 02               13758		.byte	2
00000e4d 0a               13759		.byte	10
00000e4e 000101           13760		.byte	0,1,1
                          13761		.section	.debug_info

                                   Fri Apr 10 08:32:04 2020           Page 247
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
                          13762	.LDW_5d44a60:
00001cb1 11               13763		.byte	17
00001cb2 7053657276696365 13764		.strz	"pServiceInfo"
00001cba 496e666f00      
00001cbf d40c             13765		.byte	212,12
00001cc1 54               13766		.byte	84
00001cc2 01               13767		.byte	1
00001cc3 00000000         13768		.long	.LDW_5d666c8
00001cc7 00               13769		.byte	0
00001cc8 0155             13770		.byte	1,85
                          13771	
                          13772	.LDW_5bdd508:
00001cca 1f               13773		.byte	31
00001ccb 00000000         13774		.long	.LDW85
00001ccf 00000000         13775		.long	.LDW95
                          13776	
                          13777	.LDW_5d44ab8:
00001cd3 06               13778		.byte	6
00001cd4 7365727669636543 13779		.strz	"serviceCheckResult"
00001cdc 6865636b52657375
00001ce4 6c7400          
00001ce7 d60c             13780		.byte	214,12
00001ce9 0c               13781		.byte	12
00001cea 01               13782		.byte	1
00001ceb 00000000         13783		.long	.LDW_4a49eb0
00001cef 00               13784		.byte	0
00001cf0 00               13785		.byte	0
00001cf1 016f             13786		.byte	1,111
                          13787	
00001cf3 00               13788		.byte	0
                          13789	
00001cf4 00               13790		.byte	0
                          13791	
                          13792	.LDW_5d559b0:
00001cf5 16               13793		.byte	22
00001cf6 436865636b536572 13794		.strz	"CheckServicePreconditions"
00001cfe 7669636550726563
00001d06 6f6e646974696f6e
00001d0e 7300            
00001d10 910d             13795		.byte	145,13
00001d12 13               13796		.byte	19
00001d13 01               13797		.byte	1
00001d14 00000000         13798		.long	.LDW_4a4a380
00001d18 00000000         13799		.long	CheckServicePreconditions..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_diag_core.
00001d1c 00000000         13800		.long	__ghs_eofn_CheckServicePreconditions
00001d20 0151             13801		.byte	1,81
00001d22 808080800f       13802		.byte	128,128,128,128,15
00001d27 08               13803		.byte	8
00001d28 00               13804		.byte	0
00001d29 18               13805		.byte	24
00001d2a 00               13806		.byte	0
00001d2b 00               13807		.byte	0
00001d2c 00               13808		.byte	0
00001d2d 00               13809		.byte	0
00001d2e 01               13810		.byte	1
00001d2f 00               13811		.byte	0
00001d30 01               13812		.byte	1
                          13813	
                          13814		.section	.debug_frame
                          13815	.LDW_5ccd820:
00000300 00000014         13816		.long	.LDW_unq_38-.LDW_unq_37
                          13817	.LDW_unq_37:

                                   Fri Apr 10 08:32:04 2020           Page 248
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
00000304 00000000         13818		.long	.LDW_5cc4c70
00000308 00000000         13819		.long	CheckServicePreconditions..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_diag_core.
0000030c 0000009c         13820		.long	__ghs_eofn_CheckServicePreconditions-CheckServicePreconditions..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_diag_core.
00000310 01               13821		.byte	1
00000311 00000000         13822		.long	.LDW56
00000315 00               13823		.byte	0
00000316 00               13824		.byte	0
00000317 00               13825		.byte	0
                          13826	.LDW_unq_38:
                          13827		.section	.debug_line
00000e51 000502           13828		.byte	0,5,2
00000e54 00000000         13829		.long	CheckServicePreconditions..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_diag_core.
00000e58 06               13830		.byte	6
00000e59 03               13831		.byte	3
00000e5a 910d             13832		.byte	145,13
00000e5c 02               13833		.byte	2
00000e5d 00               13834		.byte	0
00000e5e 01               13835		.byte	1
00000e5f 03               13836		.byte	3
00000e60 05               13837		.byte	5
00000e61 02               13838		.byte	2
00000e62 0c               13839		.byte	12
00000e63 01               13840		.byte	1
00000e64 15               13841		.byte	21
00000e65 000502           13842		.byte	0,5,2
00000e68 00000000         13843		.long	.LDWlin88
00000e6c 0d               13844		.byte	13
00000e6d 06               13845		.byte	6
00000e6e 03               13846		.byte	3
00000e6f 08               13847		.byte	8
00000e70 02               13848		.byte	2
00000e71 08               13849		.byte	8
00000e72 01               13850		.byte	1
00000e73 03               13851		.byte	3
00000e74 7a               13852		.byte	122
00000e75 02               13853		.byte	2
00000e76 00               13854		.byte	0
00000e77 01               13855		.byte	1
00000e78 03               13856		.byte	3
00000e79 7e               13857		.byte	126
00000e7a 02               13858		.byte	2
00000e7b 00               13859		.byte	0
00000e7c 01               13860		.byte	1
00000e7d 06               13861		.byte	6
00000e7e 000502           13862		.byte	0,5,2
00000e81 00000000         13863		.long	.LDWlin89
00000e85 03               13864		.byte	3
00000e86 04               13865		.byte	4
00000e87 02               13866		.byte	2
00000e88 00               13867		.byte	0
00000e89 01               13868		.byte	1
00000e8a 000502           13869		.byte	0,5,2
00000e8d 00000000         13870		.long	.LDWlin90
00000e91 03               13871		.byte	3
00000e92 05               13872		.byte	5
00000e93 02               13873		.byte	2

                                   Fri Apr 10 08:32:04 2020           Page 249
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
00000e94 00               13874		.byte	0
00000e95 01               13875		.byte	1
00000e96 02               13876		.byte	2
00000e97 00               13877		.byte	0
00000e98 0d               13878		.byte	13
00000e99 000502           13879		.byte	0,5,2
00000e9c 00000000         13880		.long	.LDWlin91
00000ea0 0b               13881		.byte	11
00000ea1 0c               13882		.byte	12
00000ea2 13               13883		.byte	19
00000ea3 2b               13884		.byte	43
00000ea4 0c               13885		.byte	12
00000ea5 02               13886		.byte	2
00000ea6 00               13887		.byte	0
00000ea7 0c               13888		.byte	12
00000ea8 000502           13889		.byte	0,5,2
00000eab 00000000         13890		.long	.LDWlin92
00000eaf 0d               13891		.byte	13
00000eb0 02               13892		.byte	2
00000eb1 00               13893		.byte	0
00000eb2 0c               13894		.byte	12
00000eb3 000502           13895		.byte	0,5,2
00000eb6 00000000         13896		.long	.LDWlin93
00000eba 0b               13897		.byte	11
00000ebb 0c               13898		.byte	12
00000ebc 15               13899		.byte	21
00000ebd 000502           13900		.byte	0,5,2
00000ec0 00000000         13901		.long	.LDWlin94
00000ec4 0b               13902		.byte	11
00000ec5 0c               13903		.byte	12
00000ec6 000502           13904		.byte	0,5,2
00000ec9 00000000         13905		.long	.LDWlin95
00000ecd 0b               13906		.byte	11
00000ece 0b               13907		.byte	11
00000ecf 000502           13908		.byte	0,5,2
00000ed2 00000000         13909		.long	.LDWlin96
00000ed6 0b               13910		.byte	11
00000ed7 0c               13911		.byte	12
00000ed8 000502           13912		.byte	0,5,2
00000edb 00000000         13913		.long	.LDWlin97
00000edf 0b               13914		.byte	11
00000ee0 0b               13915		.byte	11
00000ee1 000502           13916		.byte	0,5,2
00000ee4 00000000         13917		.long	.LDWlin98
00000ee8 0b               13918		.byte	11
00000ee9 0c               13919		.byte	12
00000eea 000502           13920		.byte	0,5,2
00000eed 00000000         13921		.long	.LDWlin99
00000ef1 0b               13922		.byte	11
00000ef2 0c               13923		.byte	12
00000ef3 0c               13924		.byte	12
00000ef4 1b               13925		.byte	27
00000ef5 02               13926		.byte	2
00000ef6 00               13927		.byte	0
00000ef7 0b               13928		.byte	11
00000ef8 02               13929		.byte	2

                                   Fri Apr 10 08:32:04 2020           Page 250
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
00000ef9 00               13930		.byte	0
00000efa 0c               13931		.byte	12
00000efb 06               13932		.byte	6
00000efc 02               13933		.byte	2
00000efd 02               13934		.byte	2
00000efe 02               13935		.byte	2
00000eff 0c               13936		.byte	12
00000f00 000101           13937		.byte	0,1,1
                          13938		.section	.debug_info
                          13939	.LDW_5d44538:
00001d31 11               13940		.byte	17
00001d32 7053657276696365 13941		.strz	"pServiceInfo"
00001d3a 496e666f00      
00001d3f 910d             13942		.byte	145,13
00001d41 5e               13943		.byte	94
00001d42 01               13944		.byte	1
00001d43 00000000         13945		.long	.LDW_5d666c8
00001d47 00               13946		.byte	0
00001d48 016d             13947		.byte	1,109
                          13948	
                          13949	.LDW_5bdd3b8:
00001d4a 1f               13950		.byte	31
00001d4b 00000000         13951		.long	.LDW46
00001d4f 00000000         13952		.long	.LDW56
                          13953	
                          13954	.LDW_5d44b68:
00001d53 06               13955		.byte	6
00001d54 726573756c7400   13956		.strz	"result"
00001d5b 930d             13957		.byte	147,13
00001d5d 0f               13958		.byte	15
00001d5e 01               13959		.byte	1
00001d5f 00000000         13960		.long	.LDW_4a4a380
00001d63 00               13961		.byte	0
00001d64 00               13962		.byte	0
00001d65 016f             13963		.byte	1,111
                          13964	
                          13965	.LDW_5d44278:
00001d67 06               13966		.byte	6
00001d68 7365727669636543 13967		.strz	"serviceCheckResult"
00001d70 6865636b52657375
00001d78 6c7400          
00001d7b 940d             13968		.byte	148,13
00001d7d 0c               13969		.byte	12
00001d7e 01               13970		.byte	1
00001d7f 00000000         13971		.long	.LDW_4a49eb0
00001d83 00               13972		.byte	0
00001d84 00               13973		.byte	0
00001d85 016e             13974		.byte	1,110
                          13975	
00001d87 00               13976		.byte	0
                          13977	
00001d88 00               13978		.byte	0
                          13979	
                          13980	.LDW_5d55b78:
00001d89 16               13981		.byte	22
00001d8a 46696e6453657276 13982		.strz	"FindServiceInfo"
00001d92 696365496e666f00
00001d9a df0d             13983		.byte	223,13
00001d9c 3b               13984		.byte	59
00001d9d 01               13985		.byte	1

                                   Fri Apr 10 08:32:04 2020           Page 251
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
00001d9e 00000000         13986		.long	.LDW_5d666c8
00001da2 00000000         13987		.long	FindServiceInfo..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_diag_core.
00001da6 00000000         13988		.long	__ghs_eofn_FindServiceInfo
00001daa 0151             13989		.byte	1,81
00001dac 03               13990		.byte	3
00001dad 00               13991		.byte	0
00001dae 00               13992		.byte	0
00001daf 00               13993		.byte	0
00001db0 00               13994		.byte	0
00001db1 00               13995		.byte	0
00001db2 00               13996		.byte	0
00001db3 00               13997		.byte	0
00001db4 01               13998		.byte	1
00001db5 00               13999		.byte	0
00001db6 01               14000		.byte	1
                          14001	
                          14002		.section	.debug_frame
                          14003	.LDW_5ccd8a0:
00000318 00000014         14004		.long	.LDW_unq_3a-.LDW_unq_39
                          14005	.LDW_unq_39:
0000031c 00000000         14006		.long	.LDW_5cc4c70
00000320 00000000         14007		.long	FindServiceInfo..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_diag_core.
00000324 0000002c         14008		.long	__ghs_eofn_FindServiceInfo-FindServiceInfo..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_diag_core.
00000328 01               14009		.byte	1
00000329 00000000         14010		.long	.LDW75
0000032d 00               14011		.byte	0
0000032e 00               14012		.byte	0
0000032f 00               14013		.byte	0
                          14014	.LDW_unq_3a:
                          14015		.section	.debug_line
00000f03 000502           14016		.byte	0,5,2
00000f06 00000000         14017		.long	FindServiceInfo..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_diag_core.
00000f0a 06               14018		.byte	6
00000f0b 03               14019		.byte	3
00000f0c df0d             14020		.byte	223,13
00000f0e 02               14021		.byte	2
00000f0f 00               14022		.byte	0
00000f10 01               14023		.byte	1
00000f11 03               14024		.byte	3
00000f12 05               14025		.byte	5
00000f13 02               14026		.byte	2
00000f14 08               14027		.byte	8
00000f15 01               14028		.byte	1
00000f16 15               14029		.byte	21
00000f17 000502           14030		.byte	0,5,2
00000f1a 00000000         14031		.long	.LDWlin62
00000f1e 0c               14032		.byte	12
00000f1f 000502           14033		.byte	0,5,2
00000f22 00000000         14034		.long	.LDWlin63
00000f26 0b               14035		.byte	11
00000f27 0c               14036		.byte	12
00000f28 13               14037		.byte	19
00000f29 000502           14038		.byte	0,5,2
00000f2c 00000000         14039		.long	.LDWlin64
00000f30 0b               14040		.byte	11
00000f31 02               14041		.byte	2

                                   Fri Apr 10 08:32:04 2020           Page 252
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
00000f32 00               14042		.byte	0
00000f33 03               14043		.byte	3
00000f34 79               14044		.byte	121
00000f35 02               14045		.byte	2
00000f36 00               14046		.byte	0
00000f37 01               14047		.byte	1
00000f38 000502           14048		.byte	0,5,2
00000f3b 00000000         14049		.long	.LDWlin65
00000f3f 03               14050		.byte	3
00000f40 08               14051		.byte	8
00000f41 02               14052		.byte	2
00000f42 00               14053		.byte	0
00000f43 01               14054		.byte	1
00000f44 0c               14055		.byte	12
00000f45 06               14056		.byte	6
00000f46 02               14057		.byte	2
00000f47 02               14058		.byte	2
00000f48 02               14059		.byte	2
00000f49 02               14060		.byte	2
00000f4a 000101           14061		.byte	0,1,1
                          14062		.section	.debug_info
                          14063	.LDW_5d440c0:
00001db7 11               14064		.byte	17
00001db8 7365727669636549 14065		.strz	"serviceId"
00001dc0 6400            
00001dc2 df0d             14066		.byte	223,13
00001dc4 52               14067		.byte	82
00001dc5 01               14068		.byte	1
00001dc6 00000000         14069		.long	.LDW_4a4b818
00001dca 00               14070		.byte	0
00001dcb 0153             14071		.byte	1,83
                          14072	
                          14073	.LDW_5bdd418:
00001dcd 1f               14074		.byte	31
00001dce 00000000         14075		.long	.LDW65
00001dd2 00000000         14076		.long	.LDW75
                          14077	
                          14078	.LDW_5d44118:
00001dd6 06               14079		.byte	6
00001dd7 7365727669636549 14080		.strz	"serviceInfoTable"
00001ddf 6e666f5461626c65
00001de7 00              
00001de8 e10d             14081		.byte	225,13
00001dea 36               14082		.byte	54
00001deb 01               14083		.byte	1
00001dec 00000000         14084		.long	.LDW_5d666c8
00001df0 00               14085		.byte	0
00001df1 00               14086		.byte	0
00001df2 0150             14087		.byte	1,80
                          14088	
                          14089	.LDW_5d441c8:
00001df4 06               14090		.byte	6
00001df5 6900             14091		.strz	"i"
00001df7 e20d             14092		.byte	226,13
00001df9 0b               14093		.byte	11
00001dfa 01               14094		.byte	1
00001dfb 00000000         14095		.long	.LDW_5d44850
00001dff 00               14096		.byte	0
00001e00 00               14097		.byte	0

                                   Fri Apr 10 08:32:04 2020           Page 253
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
00001e01 0157             14098		.byte	1,87
                          14099	
00001e03 00               14100		.byte	0
                          14101	
00001e04 00               14102		.byte	0
                          14103	
                          14104	.LDW_5d55c10:
00001e05 15               14105		.byte	21
00001e06 46626c4469616749 14106		.strz	"FblDiagInitStartFromAppl"
00001e0e 6e69745374617274
00001e16 46726f6d4170706c
00001e1e 00              
00001e1f 800e             14107		.byte	128,14
00001e21 06               14108		.byte	6
00001e22 01               14109		.byte	1
00001e23 00000000         14110		.long	FblDiagInitStartFromAppl
00001e27 00000000         14111		.long	__ghs_eofn_FblDiagInitStartFromAppl
00001e2b 0151             14112		.byte	1,81
00001e2d 8080808008       14113		.byte	128,128,128,128,8
00001e32 0c               14114		.byte	12
00001e33 00               14115		.byte	0
00001e34 10               14116		.byte	16
00001e35 00               14117		.byte	0
00001e36 00               14118		.byte	0
00001e37 00               14119		.byte	0
00001e38 01               14120		.byte	1
00001e39 01               14121		.byte	1
00001e3a 00               14122		.byte	0
00001e3b 01               14123		.byte	1
                          14124	
                          14125		.section	.debug_frame
                          14126	.LDW_5ccdbe0:
00000330 00000014         14127		.long	.LDW_unq_3c-.LDW_unq_3b
                          14128	.LDW_unq_3b:
00000334 00000000         14129		.long	.LDW_5cc4c70
00000338 00000000         14130		.long	FblDiagInitStartFromAppl
0000033c 00000080         14131		.long	__ghs_eofn_FblDiagInitStartFromAppl-FblDiagInitStartFromAppl
00000340 01               14132		.byte	1
00000341 00000000         14133		.long	.LDW96
00000345 00               14134		.byte	0
00000346 00               14135		.byte	0
00000347 00               14136		.byte	0
                          14137	.LDW_unq_3c:
                          14138		.section	.debug_line
00000f4d 000502           14139		.byte	0,5,2
00000f50 00000000         14140		.long	FblDiagInitStartFromAppl
00000f54 06               14141		.byte	6
00000f55 03               14142		.byte	3
00000f56 800e             14143		.byte	128,14
00000f58 02               14144		.byte	2
00000f59 00               14145		.byte	0
00000f5a 01               14146		.byte	1
00000f5b 33               14147		.byte	51
00000f5c 1c               14148		.byte	28
00000f5d 000502           14149		.byte	0,5,2
00000f60 00000000         14150		.long	.LDWlin115
00000f64 0b               14151		.byte	11
00000f65 0c               14152		.byte	12
00000f66 03               14153		.byte	3

                                   Fri Apr 10 08:32:04 2020           Page 254
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
00000f67 07               14154		.byte	7
00000f68 02               14155		.byte	2
00000f69 04               14156		.byte	4
00000f6a 01               14157		.byte	1
00000f6b 2b               14158		.byte	43
00000f6c 03               14159		.byte	3
00000f6d 05               14160		.byte	5
00000f6e 02               14161		.byte	2
00000f6f 0c               14162		.byte	12
00000f70 01               14163		.byte	1
00000f71 03               14164		.byte	3
00000f72 04               14165		.byte	4
00000f73 02               14166		.byte	2
00000f74 12               14167		.byte	18
00000f75 01               14168		.byte	1
00000f76 35               14169		.byte	53
00000f77 0b               14170		.byte	11
00000f78 0c               14171		.byte	12
00000f79 000502           14172		.byte	0,5,2
00000f7c 00000000         14173		.long	.LDWlin116
00000f80 0b               14174		.byte	11
00000f81 000502           14175		.byte	0,5,2
00000f84 00000000         14176		.long	.LDWlin117
00000f88 0d               14177		.byte	13
00000f89 000502           14178		.byte	0,5,2
00000f8c 00000000         14179		.long	.LDWlin118
00000f90 0d               14180		.byte	13
00000f91 000502           14181		.byte	0,5,2
00000f94 00000000         14182		.long	.LDWlin119
00000f98 0b               14183		.byte	11
00000f99 0c               14184		.byte	12
00000f9a 03               14185		.byte	3
00000f9b 04               14186		.byte	4
00000f9c 02               14187		.byte	2
00000f9d 00               14188		.byte	0
00000f9e 01               14189		.byte	1
00000f9f 02               14190		.byte	2
00000fa0 00               14191		.byte	0
00000fa1 0b               14192		.byte	11
00000fa2 0c               14193		.byte	12
00000fa3 0b               14194		.byte	11
00000fa4 1b               14195		.byte	27
00000fa5 02               14196		.byte	2
00000fa6 00               14197		.byte	0
00000fa7 0b               14198		.byte	11
00000fa8 02               14199		.byte	2
00000fa9 0a               14200		.byte	10
00000faa 000101           14201		.byte	0,1,1
                          14202		.section	.debug_info
                          14203	.LDW_5bdd598:
00001e3c 1f               14204		.byte	31
00001e3d 00000000         14205		.long	.LDW86
00001e41 00000000         14206		.long	.LDW96
                          14207	
00001e45 00               14208		.byte	0
                          14209	

                                   Fri Apr 10 08:32:04 2020           Page 255
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
00001e46 00               14210		.byte	0
                          14211	
                          14212	.LDW_5d55290:
00001e47 15               14213		.byte	21
00001e48 46626c4469616752 14214		.strz	"FblDiagRxStartIndication"
00001e50 785374617274496e
00001e58 6469636174696f6e
00001e60 00              
00001e61 a20f             14215		.byte	162,15
00001e63 06               14216		.byte	6
00001e64 01               14217		.byte	1
00001e65 00000000         14218		.long	FblDiagRxStartIndication
00001e69 00000000         14219		.long	__ghs_eofn_FblDiagRxStartIndication
00001e6d 0151             14220		.byte	1,81
00001e6f 03               14221		.byte	3
00001e70 00               14222		.byte	0
00001e71 00               14223		.byte	0
00001e72 00               14224		.byte	0
00001e73 00               14225		.byte	0
00001e74 00               14226		.byte	0
00001e75 00               14227		.byte	0
00001e76 01               14228		.byte	1
00001e77 01               14229		.byte	1
00001e78 00               14230		.byte	0
00001e79 01               14231		.byte	1
                          14232	
                          14233		.section	.debug_frame
                          14234	.LDW_5ccde60:
00000348 00000014         14235		.long	.LDW_unq_3e-.LDW_unq_3d
                          14236	.LDW_unq_3d:
0000034c 00000000         14237		.long	.LDW_5cc4c70
00000350 00000000         14238		.long	FblDiagRxStartIndication
00000354 0000003a         14239		.long	__ghs_eofn_FblDiagRxStartIndication-FblDiagRxStartIndication
00000358 01               14240		.byte	1
00000359 00000000         14241		.long	.LDW35
0000035d 00               14242		.byte	0
0000035e 00               14243		.byte	0
0000035f 00               14244		.byte	0
                          14245	.LDW_unq_3e:
                          14246		.section	.debug_line
00000fad 000502           14247		.byte	0,5,2
00000fb0 00000000         14248		.long	FblDiagRxStartIndication
00000fb4 06               14249		.byte	6
00000fb5 03               14250		.byte	3
00000fb6 a40f             14251		.byte	164,15
00000fb8 02               14252		.byte	2
00000fb9 00               14253		.byte	0
00000fba 01               14254		.byte	1
00000fbb 35               14255		.byte	53
00000fbc 44               14256		.byte	68
00000fbd 2d               14257		.byte	45
00000fbe 4b               14258		.byte	75
00000fbf 2b               14259		.byte	43
00000fc0 02               14260		.byte	2
00000fc1 02               14261		.byte	2
00000fc2 000101           14262		.byte	0,1,1
                          14263		.section	.debug_info
                          14264	.LDW_5bdd448:
00001e7a 1f               14265		.byte	31

                                   Fri Apr 10 08:32:04 2020           Page 256
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
00001e7b 00000000         14266		.long	.LDW25
00001e7f 00000000         14267		.long	.LDW35
                          14268	
00001e83 00               14269		.byte	0
                          14270	
00001e84 00               14271		.byte	0
                          14272	
                          14273	.LDW_5d550c8:
00001e85 15               14274		.byte	21
00001e86 46626c4469616752 14275		.strz	"FblDiagRxIndication"
00001e8e 78496e6469636174
00001e96 696f6e00        
00001e9a ba0f             14276		.byte	186,15
00001e9c 06               14277		.byte	6
00001e9d 01               14278		.byte	1
00001e9e 00000000         14279		.long	FblDiagRxIndication
00001ea2 00000000         14280		.long	__ghs_eofn_FblDiagRxIndication
00001ea6 0151             14281		.byte	1,81
00001ea8 00               14282		.byte	0
00001ea9 08               14283		.byte	8
00001eaa 00               14284		.byte	0
00001eab 08               14285		.byte	8
00001eac 00               14286		.byte	0
00001ead 00               14287		.byte	0
00001eae 00               14288		.byte	0
00001eaf 01               14289		.byte	1
00001eb0 01               14290		.byte	1
00001eb1 00               14291		.byte	0
00001eb2 01               14292		.byte	1
                          14293	
                          14294		.section	.debug_frame
                          14295	.LDW_5ccdf20:
00000360 00000014         14296		.long	.LDW_unq_40-.LDW_unq_3f
                          14297	.LDW_unq_3f:
00000364 00000000         14298		.long	.LDW_5cc4c70
00000368 00000000         14299		.long	FblDiagRxIndication
0000036c 00000078         14300		.long	__ghs_eofn_FblDiagRxIndication-FblDiagRxIndication
00000370 01               14301		.byte	1
00000371 00000000         14302		.long	.LDW55
00000375 00               14303		.byte	0
00000376 00               14304		.byte	0
00000377 00               14305		.byte	0
                          14306	.LDW_unq_40:
                          14307		.section	.debug_line
00000fc5 000502           14308		.byte	0,5,2
00000fc8 00000000         14309		.long	FblDiagRxIndication
00000fcc 06               14310		.byte	6
00000fcd 03               14311		.byte	3
00000fce ba0f             14312		.byte	186,15
00000fd0 02               14313		.byte	2
00000fd1 00               14314		.byte	0
00000fd2 01               14315		.byte	1
00000fd3 2c               14316		.byte	44
00000fd4 23               14317		.byte	35
00000fd5 03               14318		.byte	3
00000fd6 06               14319		.byte	6
00000fd7 02               14320		.byte	2
00000fd8 0e               14321		.byte	14

                                   Fri Apr 10 08:32:04 2020           Page 257
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
00000fd9 01               14322		.byte	1
00000fda 03               14323		.byte	3
00000fdb 04               14324		.byte	4
00000fdc 02               14325		.byte	2
00000fdd 0a               14326		.byte	10
00000fde 01               14327		.byte	1
00000fdf 000502           14328		.byte	0,5,2
00000fe2 00000000         14329		.long	.LDWlin59
00000fe6 03               14330		.byte	3
00000fe7 05               14331		.byte	5
00000fe8 02               14332		.byte	2
00000fe9 00               14333		.byte	0
00000fea 01               14334		.byte	1
00000feb 0c               14335		.byte	12
00000fec 000502           14336		.byte	0,5,2
00000fef 00000000         14337		.long	.LDWlin60
00000ff3 0b               14338		.byte	11
00000ff4 000502           14339		.byte	0,5,2
00000ff7 00000000         14340		.long	.LDWlin61
00000ffb 0b               14341		.byte	11
00000ffc 0c               14342		.byte	12
00000ffd 0c               14343		.byte	12
00000ffe 33               14344		.byte	51
00000fff 03               14345		.byte	3
00001000 08               14346		.byte	8
00001001 02               14347		.byte	2
00001002 0a               14348		.byte	10
00001003 01               14349		.byte	1
00001004 02               14350		.byte	2
00001005 00               14351		.byte	0
00001006 03               14352		.byte	3
00001007 04               14353		.byte	4
00001008 02               14354		.byte	2
00001009 00               14355		.byte	0
0000100a 01               14356		.byte	1
0000100b 3c               14357		.byte	60
0000100c 02               14358		.byte	2
0000100d 08               14359		.byte	8
0000100e 000101           14360		.byte	0,1,1
                          14361		.section	.debug_info
                          14362	.LDW_5d44220:
00001eb3 11               14363		.byte	17
00001eb4 7062446961674275 14364		.strz	"pbDiagBuffer"
00001ebc 6666657200      
00001ec1 ba0f             14365		.byte	186,15
00001ec3 22               14366		.byte	34
00001ec4 01               14367		.byte	1
00001ec5 00000000         14368		.long	.LDW_4a0c648
00001ec9 00               14369		.byte	0
00001eca 0153             14370		.byte	1,83
                          14371	
                          14372	.LDW_5d443d8:
00001ecc 11               14373		.byte	17
00001ecd 7278446174614c65 14374		.strz	"rxDataLength"
00001ed5 6e67746800      
00001eda ba0f             14375		.byte	186,15
00001edc 42               14376		.byte	66
00001edd 01               14377		.byte	1

                                   Fri Apr 10 08:32:04 2020           Page 258
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
00001ede 00000000         14378		.long	.LDW_4a4a2d0
00001ee2 00               14379		.byte	0
00001ee3 0154             14380		.byte	1,84
                          14381	
                          14382	.LDW_5bdd358:
00001ee5 1f               14383		.byte	31
00001ee6 00000000         14384		.long	.LDW45
00001eea 00000000         14385		.long	.LDW55
                          14386	
00001eee 00               14387		.byte	0
                          14388	
00001eef 00               14389		.byte	0
                          14390	
                          14391	.LDW_5d55d40:
00001ef0 16               14392		.byte	22
00001ef1 46626c4469616752 14393		.strz	"FblDiagRxGetPhysBuffer"
00001ef9 7847657450687973
00001f01 42756666657200  
00001f08 ed0f             14394		.byte	237,15
00001f0a 09               14395		.byte	9
00001f0b 01               14396		.byte	1
00001f0c 00000000         14397		.long	.LDW_4a0c648
00001f10 00000000         14398		.long	FblDiagRxGetPhysBuffer
00001f14 00000000         14399		.long	__ghs_eofn_FblDiagRxGetPhysBuffer
00001f18 0151             14400		.byte	1,81
00001f1a 03               14401		.byte	3
00001f1b 00               14402		.byte	0
00001f1c 00               14403		.byte	0
00001f1d 00               14404		.byte	0
00001f1e 00               14405		.byte	0
00001f1f 00               14406		.byte	0
00001f20 00               14407		.byte	0
00001f21 01               14408		.byte	1
00001f22 01               14409		.byte	1
00001f23 00               14410		.byte	0
00001f24 01               14411		.byte	1
                          14412	
                          14413		.section	.debug_frame
                          14414	.LDW_5ccdd60:
00000378 00000014         14415		.long	.LDW_unq_42-.LDW_unq_41
                          14416	.LDW_unq_41:
0000037c 00000000         14417		.long	.LDW_5cc4c70
00000380 00000000         14418		.long	FblDiagRxGetPhysBuffer
00000384 0000002a         14419		.long	__ghs_eofn_FblDiagRxGetPhysBuffer-FblDiagRxGetPhysBuffer
00000388 01               14420		.byte	1
00000389 00000000         14421		.long	.LDW15
0000038d 00               14422		.byte	0
0000038e 00               14423		.byte	0
0000038f 00               14424		.byte	0
                          14425	.LDW_unq_42:
                          14426		.section	.debug_line
00001011 000502           14427		.byte	0,5,2
00001014 00000000         14428		.long	FblDiagRxGetPhysBuffer
00001018 06               14429		.byte	6
00001019 03               14430		.byte	3
0000101a f10f             14431		.byte	241,15
0000101c 02               14432		.byte	2
0000101d 00               14433		.byte	0

                                   Fri Apr 10 08:32:04 2020           Page 259
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
0000101e 01               14434		.byte	1
0000101f 15               14435		.byte	21
00001020 000502           14436		.byte	0,5,2
00001023 00000000         14437		.long	.LDWlin58
00001027 03               14438		.byte	3
00001028 04               14439		.byte	4
00001029 02               14440		.byte	2
0000102a 00               14441		.byte	0
0000102b 01               14442		.byte	1
0000102c 0c               14443		.byte	12
0000102d 15               14444		.byte	21
0000102e 25               14445		.byte	37
0000102f 23               14446		.byte	35
00001030 02               14447		.byte	2
00001031 00               14448		.byte	0
00001032 0c               14449		.byte	12
00001033 06               14450		.byte	6
00001034 02               14451		.byte	2
00001035 02               14452		.byte	2
00001036 02               14453		.byte	2
00001037 02               14454		.byte	2
00001038 000101           14455		.byte	0,1,1
                          14456		.section	.debug_info
                          14457	.LDW_5d44e28:
00001f25 11               14458		.byte	17
00001f26 7278446174614c65 14459		.strz	"rxDataLength"
00001f2e 6e67746800      
00001f33 ed0f             14460		.byte	237,15
00001f35 32               14461		.byte	50
00001f36 01               14462		.byte	1
00001f37 00000000         14463		.long	.LDW_4a4a2d0
00001f3b 00               14464		.byte	0
00001f3c 0153             14465		.byte	1,83
                          14466	
                          14467	.LDW_5bdd718:
00001f3e 1f               14468		.byte	31
00001f3f 00000000         14469		.long	.LDW05
00001f43 00000000         14470		.long	.LDW15
                          14471	
                          14472	.LDW_5d44c70:
00001f47 06               14473		.byte	6
00001f48 726573756c7400   14474		.strz	"result"
00001f4f ef0f             14475		.byte	239,15
00001f51 0c               14476		.byte	12
00001f52 01               14477		.byte	1
00001f53 00000000         14478		.long	.LDW_4a0c648
00001f57 00               14479		.byte	0
00001f58 00               14480		.byte	0
00001f59 0157             14481		.byte	1,87
                          14482	
00001f5b 00               14483		.byte	0
                          14484	
00001f5c 00               14485		.byte	0
                          14486	
                          14487	.LDW_5d557e8:
00001f5d 16               14488		.byte	22
00001f5e 46626c4469616752 14489		.strz	"FblDiagRxGetFuncBuffer"
00001f66 7847657446756e63
00001f6e 42756666657200  

                                   Fri Apr 10 08:32:04 2020           Page 260
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
00001f75 8e10             14490		.byte	142,16
00001f77 09               14491		.byte	9
00001f78 01               14492		.byte	1
00001f79 00000000         14493		.long	.LDW_4a0c648
00001f7d 00000000         14494		.long	FblDiagRxGetFuncBuffer
00001f81 00000000         14495		.long	__ghs_eofn_FblDiagRxGetFuncBuffer
00001f85 0151             14496		.byte	1,81
00001f87 00               14497		.byte	0
00001f88 08               14498		.byte	8
00001f89 00               14499		.byte	0
00001f8a 08               14500		.byte	8
00001f8b 00               14501		.byte	0
00001f8c 00               14502		.byte	0
00001f8d 00               14503		.byte	0
00001f8e 01               14504		.byte	1
00001f8f 01               14505		.byte	1
00001f90 00               14506		.byte	0
00001f91 01               14507		.byte	1
                          14508	
                          14509		.section	.debug_frame
                          14510	.LDW_5ccd8e0:
00000390 00000014         14511		.long	.LDW_unq_44-.LDW_unq_43
                          14512	.LDW_unq_43:
00000394 00000000         14513		.long	.LDW_5cc4c70
00000398 00000000         14514		.long	FblDiagRxGetFuncBuffer
0000039c 00000026         14515		.long	__ghs_eofn_FblDiagRxGetFuncBuffer-FblDiagRxGetFuncBuffer
000003a0 01               14516		.byte	1
000003a1 00000000         14517		.long	.LDW57
000003a5 00               14518		.byte	0
000003a6 00               14519		.byte	0
000003a7 00               14520		.byte	0
                          14521	.LDW_unq_44:
                          14522		.section	.debug_line
0000103b 000502           14523		.byte	0,5,2
0000103e 00000000         14524		.long	FblDiagRxGetFuncBuffer
00001042 06               14525		.byte	6
00001043 03               14526		.byte	3
00001044 8e10             14527		.byte	142,16
00001046 02               14528		.byte	2
00001047 00               14529		.byte	0
00001048 01               14530		.byte	1
00001049 2c               14531		.byte	44
0000104a 000502           14532		.byte	0,5,2
0000104d 00000000         14533		.long	.LDWlin131
00001051 0d               14534		.byte	13
00001052 000502           14535		.byte	0,5,2
00001055 00000000         14536		.long	.LDWlin132
00001059 0b               14537		.byte	11
0000105a 2b               14538		.byte	43
0000105b 23               14539		.byte	35
0000105c 02               14540		.byte	2
0000105d 00               14541		.byte	0
0000105e 0c               14542		.byte	12
0000105f 02               14543		.byte	2
00001060 08               14544		.byte	8
00001061 000101           14545		.byte	0,1,1

                                   Fri Apr 10 08:32:04 2020           Page 261
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
                          14546		.section	.debug_info
                          14547	.LDW_5d44fe0:
00001f92 11               14548		.byte	17
00001f93 7278446174614c65 14549		.strz	"rxDataLength"
00001f9b 6e67746800      
00001fa0 8e10             14550		.byte	142,16
00001fa2 32               14551		.byte	50
00001fa3 01               14552		.byte	1
00001fa4 00000000         14553		.long	.LDW_4a4a2d0
00001fa8 00               14554		.byte	0
00001fa9 0153             14555		.byte	1,83
                          14556	
                          14557	.LDW_5bdd1d8:
00001fab 1f               14558		.byte	31
00001fac 00000000         14559		.long	.LDW47
00001fb0 00000000         14560		.long	.LDW57
                          14561	
                          14562	.LDW_5d44bc0:
00001fb4 06               14563		.byte	6
00001fb5 66756e6342756666 14564		.strz	"funcBuffer"
00001fbd 657200          
00001fc0 9110             14565		.byte	145,16
00001fc2 0c               14566		.byte	12
00001fc3 01               14567		.byte	1
00001fc4 00000000         14568		.long	.LDW_4a0c648
00001fc8 00               14569		.byte	0
00001fc9 00               14570		.byte	0
00001fca 0153             14571		.byte	1,83
                          14572	
00001fcc 00               14573		.byte	0
                          14574	
00001fcd 00               14575		.byte	0
                          14576	
                          14577	.LDW_5d55160:
00001fce 15               14578		.byte	21
00001fcf 46626c4469616752 14579		.strz	"FblDiagRxErrorIndication"
00001fd7 784572726f72496e
00001fdf 6469636174696f6e
00001fe7 00              
00001fe8 a310             14580		.byte	163,16
00001fea 06               14581		.byte	6
00001feb 01               14582		.byte	1
00001fec 00000000         14583		.long	FblDiagRxErrorIndication
00001ff0 00000000         14584		.long	__ghs_eofn_FblDiagRxErrorIndication
00001ff4 0151             14585		.byte	1,81
00001ff6 03               14586		.byte	3
00001ff7 00               14587		.byte	0
00001ff8 00               14588		.byte	0
00001ff9 00               14589		.byte	0
00001ffa 00               14590		.byte	0
00001ffb 00               14591		.byte	0
00001ffc 00               14592		.byte	0
00001ffd 01               14593		.byte	1
00001ffe 01               14594		.byte	1
00001fff 00               14595		.byte	0
00002000 01               14596		.byte	1
                          14597	
                          14598		.section	.debug_frame
                          14599	.LDW_5ccde20:
000003a8 00000014         14600		.long	.LDW_unq_46-.LDW_unq_45
                          14601	.LDW_unq_45:

                                   Fri Apr 10 08:32:04 2020           Page 262
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
000003ac 00000000         14602		.long	.LDW_5cc4c70
000003b0 00000000         14603		.long	FblDiagRxErrorIndication
000003b4 00000004         14604		.long	__ghs_eofn_FblDiagRxErrorIndication-FblDiagRxErrorIndication
000003b8 01               14605		.byte	1
000003b9 00000000         14606		.long	.LDW77
000003bd 00               14607		.byte	0
000003be 00               14608		.byte	0
000003bf 00               14609		.byte	0
                          14610	.LDW_unq_46:
                          14611		.section	.debug_line
00001064 000502           14612		.byte	0,5,2
00001067 00000000         14613		.long	FblDiagRxErrorIndication
0000106b 06               14614		.byte	6
0000106c 03               14615		.byte	3
0000106d a510             14616		.byte	165,16
0000106f 02               14617		.byte	2
00001070 00               14618		.byte	0
00001071 01               14619		.byte	1
00001072 000502           14620		.byte	0,5,2
00001075 00000000         14621		.long	__ghs_eofn_FblDiagRxErrorIndication
00001079 0b               14622		.byte	11
0000107a 000101           14623		.byte	0,1,1
                          14624		.section	.debug_info
                          14625	.LDW_5bdd238:
00002001 1f               14626		.byte	31
00002002 00000000         14627		.long	.LDW67
00002006 00000000         14628		.long	.LDW77
                          14629	
0000200a 00               14630		.byte	0
                          14631	
0000200b 00               14632		.byte	0
                          14633	
                          14634	.LDW_5d55588:
0000200c 15               14635		.byte	21
0000200d 46626c4469616754 14636		.strz	"FblDiagTxErrorIndication"
00002015 784572726f72496e
0000201d 6469636174696f6e
00002025 00              
00002026 b210             14637		.byte	178,16
00002028 06               14638		.byte	6
00002029 01               14639		.byte	1
0000202a 00000000         14640		.long	FblDiagTxErrorIndication
0000202e 00000000         14641		.long	__ghs_eofn_FblDiagTxErrorIndication
00002032 0151             14642		.byte	1,81
00002034 03               14643		.byte	3
00002035 00               14644		.byte	0
00002036 00               14645		.byte	0
00002037 00               14646		.byte	0
00002038 00               14647		.byte	0
00002039 00               14648		.byte	0
0000203a 00               14649		.byte	0
0000203b 01               14650		.byte	1
0000203c 01               14651		.byte	1
0000203d 00               14652		.byte	0
0000203e 01               14653		.byte	1
                          14654	
                          14655		.section	.debug_frame
                          14656	.LDW_5ccdea0:
000003c0 00000014         14657		.long	.LDW_unq_48-.LDW_unq_47

                                   Fri Apr 10 08:32:04 2020           Page 263
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
                          14658	.LDW_unq_47:
000003c4 00000000         14659		.long	.LDW_5cc4c70
000003c8 00000000         14660		.long	FblDiagTxErrorIndication
000003cc 0000000a         14661		.long	__ghs_eofn_FblDiagTxErrorIndication-FblDiagTxErrorIndication
000003d0 01               14662		.byte	1
000003d1 00000000         14663		.long	.LDW97
000003d5 00               14664		.byte	0
000003d6 00               14665		.byte	0
000003d7 00               14666		.byte	0
                          14667	.LDW_unq_48:
                          14668		.section	.debug_line
0000107d 000502           14669		.byte	0,5,2
00001080 00000000         14670		.long	FblDiagTxErrorIndication
00001084 06               14671		.byte	6
00001085 03               14672		.byte	3
00001086 b410             14673		.byte	180,16
00001088 02               14674		.byte	2
00001089 00               14675		.byte	0
0000108a 01               14676		.byte	1
0000108b 000502           14677		.byte	0,5,2
0000108e 00000000         14678		.long	.LDWlin134
00001092 0b               14679		.byte	11
00001093 0c               14680		.byte	12
00001094 000502           14681		.byte	0,5,2
00001097 00000000         14682		.long	.LDWlin135
0000109b 0b               14683		.byte	11
0000109c 02               14684		.byte	2
0000109d 00               14685		.byte	0
0000109e 0b               14686		.byte	11
0000109f 02               14687		.byte	2
000010a0 02               14688		.byte	2
000010a1 000101           14689		.byte	0,1,1
                          14690		.section	.debug_info
                          14691	.LDW_5d44f88:
0000203f 11               14692		.byte	17
00002040 63774d7367547970 14693		.strz	"cwMsgType"
00002048 6500            
0000204a b210             14694		.byte	178,16
0000204c 26               14695		.byte	38
0000204d 01               14696		.byte	1
0000204e 00000000         14697		.long	.LDW_4a4b818
00002052 00               14698		.byte	0
00002053 0153             14699		.byte	1,83
                          14700	
                          14701	.LDW_5bdd7d8:
00002055 1f               14702		.byte	31
00002056 00000000         14703		.long	.LDW87
0000205a 00000000         14704		.long	.LDW97
                          14705	
0000205e 00               14706		.byte	0
                          14707	
0000205f 00               14708		.byte	0
                          14709	
                          14710	.LDW_5d55458:
00002060 15               14711		.byte	21
00002061 46626c4469616754 14712		.strz	"FblDiagTxConfirmation"
00002069 78436f6e6669726d
00002071 6174696f6e00    
00002077 c410             14713		.byte	196,16

                                   Fri Apr 10 08:32:04 2020           Page 264
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
00002079 06               14714		.byte	6
0000207a 01               14715		.byte	1
0000207b 00000000         14716		.long	FblDiagTxConfirmation
0000207f 00000000         14717		.long	__ghs_eofn_FblDiagTxConfirmation
00002083 0151             14718		.byte	1,81
00002085 00               14719		.byte	0
00002086 08               14720		.byte	8
00002087 00               14721		.byte	0
00002088 08               14722		.byte	8
00002089 00               14723		.byte	0
0000208a 00               14724		.byte	0
0000208b 00               14725		.byte	0
0000208c 01               14726		.byte	1
0000208d 01               14727		.byte	1
0000208e 00               14728		.byte	0
0000208f 01               14729		.byte	1
                          14730	
                          14731		.section	.debug_frame
                          14732	.LDW_5ccdda0:
000003d8 00000014         14733		.long	.LDW_unq_4a-.LDW_unq_49
                          14734	.LDW_unq_49:
000003dc 00000000         14735		.long	.LDW_5cc4c70
000003e0 00000000         14736		.long	FblDiagTxConfirmation
000003e4 0000002a         14737		.long	__ghs_eofn_FblDiagTxConfirmation-FblDiagTxConfirmation
000003e8 01               14738		.byte	1
000003e9 00000000         14739		.long	.LDW18
000003ed 00               14740		.byte	0
000003ee 00               14741		.byte	0
000003ef 00               14742		.byte	0
                          14743	.LDW_unq_4a:
                          14744		.section	.debug_line
000010a4 000502           14745		.byte	0,5,2
000010a7 00000000         14746		.long	FblDiagTxConfirmation
000010ab 06               14747		.byte	6
000010ac 03               14748		.byte	3
000010ad c410             14749		.byte	196,16
000010af 02               14750		.byte	2
000010b0 00               14751		.byte	0
000010b1 01               14752		.byte	1
000010b2 2c               14753		.byte	44
000010b3 000502           14754		.byte	0,5,2
000010b6 00000000         14755		.long	.LDWlin136
000010ba 0b               14756		.byte	11
000010bb 0c               14757		.byte	12
000010bc 000502           14758		.byte	0,5,2
000010bf 00000000         14759		.long	.LDWlin137
000010c3 0b               14760		.byte	11
000010c4 02               14761		.byte	2
000010c5 00               14762		.byte	0
000010c6 0d               14763		.byte	13
000010c7 000502           14764		.byte	0,5,2
000010ca 00000000         14765		.long	.LDWlin138
000010ce 0b               14766		.byte	11
000010cf 0b               14767		.byte	11
000010d0 1b               14768		.byte	27
000010d1 02               14769		.byte	2

                                   Fri Apr 10 08:32:04 2020           Page 265
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
000010d2 00               14770		.byte	0
000010d3 0b               14771		.byte	11
000010d4 02               14772		.byte	2
000010d5 08               14773		.byte	8
000010d6 000101           14774		.byte	0,1,1
                          14775		.section	.debug_info
                          14776	.LDW_5d44ed8:
00002090 11               14777		.byte	17
00002091 63774d7367547970 14778		.strz	"cwMsgType"
00002099 6500            
0000209b c410             14779		.byte	196,16
0000209d 23               14780		.byte	35
0000209e 01               14781		.byte	1
0000209f 00000000         14782		.long	.LDW_4a4b818
000020a3 00               14783		.byte	0
000020a4 0153             14784		.byte	1,83
                          14785	
                          14786	.LDW_5bdd8f8:
000020a6 1f               14787		.byte	31
000020a7 00000000         14788		.long	.LDW08
000020ab 00000000         14789		.long	.LDW18
                          14790	
000020af 00               14791		.byte	0
                          14792	
000020b0 00               14793		.byte	0
                          14794	
                          14795	.LDW_5d551f8:
000020b1 16               14796		.byte	22
000020b2 46626c446961674d 14797		.strz	"FblDiagMemPreWrite"
000020ba 656d507265577269
000020c2 746500          
000020c5 e110             14798		.byte	225,16
000020c7 0c               14799		.byte	12
000020c8 01               14800		.byte	1
000020c9 00000000         14801		.long	.LDW_4a4a380
000020cd 00000000         14802		.long	FblDiagMemPreWrite
000020d1 00000000         14803		.long	__ghs_eofn_FblDiagMemPreWrite
000020d5 0151             14804		.byte	1,81
000020d7 03               14805		.byte	3
000020d8 00               14806		.byte	0
000020d9 00               14807		.byte	0
000020da 00               14808		.byte	0
000020db 00               14809		.byte	0
000020dc 00               14810		.byte	0
000020dd 00               14811		.byte	0
000020de 01               14812		.byte	1
000020df 01               14813		.byte	1
000020e0 00               14814		.byte	0
000020e1 01               14815		.byte	1
                          14816	
                          14817		.section	.debug_frame
                          14818	.LDW_5ccdc20:
000003f0 00000014         14819		.long	.LDW_unq_4c-.LDW_unq_4b
                          14820	.LDW_unq_4b:
000003f4 00000000         14821		.long	.LDW_5cc4c70
000003f8 00000000         14822		.long	FblDiagMemPreWrite
000003fc 00000004         14823		.long	__ghs_eofn_FblDiagMemPreWrite-FblDiagMemPreWrite
00000400 01               14824		.byte	1
00000401 00000000         14825		.long	.LDW38

                                   Fri Apr 10 08:32:04 2020           Page 266
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
00000405 00               14826		.byte	0
00000406 00               14827		.byte	0
00000407 00               14828		.byte	0
                          14829	.LDW_unq_4c:
                          14830		.section	.debug_line
000010d9 000502           14831		.byte	0,5,2
000010dc 00000000         14832		.long	FblDiagMemPreWrite
000010e0 06               14833		.byte	6
000010e1 03               14834		.byte	3
000010e2 e410             14835		.byte	228,16
000010e4 02               14836		.byte	2
000010e5 00               14837		.byte	0
000010e6 01               14838		.byte	1
000010e7 06               14839		.byte	6
000010e8 02               14840		.byte	2
000010e9 02               14841		.byte	2
000010ea 02               14842		.byte	2
000010eb 02               14843		.byte	2
000010ec 000101           14844		.byte	0,1,1
                          14845		.section	.debug_info
                          14846	.LDW_5bdd868:
000020e2 1f               14847		.byte	31
000020e3 00000000         14848		.long	.LDW28
000020e7 00000000         14849		.long	.LDW38
                          14850	
000020eb 00               14851		.byte	0
                          14852	
000020ec 00               14853		.byte	0
                          14854	
                          14855	.LDW_5d55e70:
000020ed 16               14856		.byte	22
000020ee 46626c446961674d 14857		.strz	"FblDiagMemPostWrite"
000020f6 656d506f73745772
000020fe 69746500        
00002102 f010             14858		.byte	240,16
00002104 0c               14859		.byte	12
00002105 01               14860		.byte	1
00002106 00000000         14861		.long	.LDW_4a4a380
0000210a 00000000         14862		.long	FblDiagMemPostWrite
0000210e 00000000         14863		.long	__ghs_eofn_FblDiagMemPostWrite
00002112 0151             14864		.byte	1,81
00002114 03               14865		.byte	3
00002115 00               14866		.byte	0
00002116 00               14867		.byte	0
00002117 00               14868		.byte	0
00002118 00               14869		.byte	0
00002119 00               14870		.byte	0
0000211a 00               14871		.byte	0
0000211b 01               14872		.byte	1
0000211c 01               14873		.byte	1
0000211d 00               14874		.byte	0
0000211e 01               14875		.byte	1
                          14876	
                          14877		.section	.debug_frame
                          14878	.LDW_5ccdee0:
00000408 00000014         14879		.long	.LDW_unq_4e-.LDW_unq_4d
                          14880	.LDW_unq_4d:
0000040c 00000000         14881		.long	.LDW_5cc4c70

                                   Fri Apr 10 08:32:04 2020           Page 267
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
00000410 00000000         14882		.long	FblDiagMemPostWrite
00000414 00000004         14883		.long	__ghs_eofn_FblDiagMemPostWrite-FblDiagMemPostWrite
00000418 01               14884		.byte	1
00000419 00000000         14885		.long	.LDW58
0000041d 00               14886		.byte	0
0000041e 00               14887		.byte	0
0000041f 00               14888		.byte	0
                          14889	.LDW_unq_4e:
                          14890		.section	.debug_line
000010ef 000502           14891		.byte	0,5,2
000010f2 00000000         14892		.long	FblDiagMemPostWrite
000010f6 06               14893		.byte	6
000010f7 03               14894		.byte	3
000010f8 f310             14895		.byte	243,16
000010fa 02               14896		.byte	2
000010fb 00               14897		.byte	0
000010fc 01               14898		.byte	1
000010fd 06               14899		.byte	6
000010fe 02               14900		.byte	2
000010ff 02               14901		.byte	2
00001100 02               14902		.byte	2
00001101 02               14903		.byte	2
00001102 000101           14904		.byte	0,1,1
                          14905		.section	.debug_info
                          14906	.LDW_5bdd928:
0000211f 1f               14907		.byte	31
00002120 00000000         14908		.long	.LDW48
00002124 00000000         14909		.long	.LDW58
                          14910	
00002128 00               14911		.byte	0
                          14912	
00002129 00               14913		.byte	0
                          14914	
0000212a 00               14915		.byte	0
                          14916	
                          14917		.section	.debug_line
                          14918	.Ldw_line_end:
                          14919		.section	.debug_macinfo
00000000 01               14920		.byte	1
00000001 00               14921		.byte	0
00000002 5f5f4c494e455f5f 14922		.strz	"__LINE__"
0000000a 00              
0000000b 01               14923		.byte	1
0000000c 00               14924		.byte	0
0000000d 5f5f46494c455f5f 14925		.strz	"__FILE__"
00000015 00              
00000016 03               14926		.byte	3
00000017 00               14927		.byte	0
00000018 01               14928		.byte	1
00000019 03               14929		.byte	3
0000001a 47               14930		.byte	71
0000001b 02               14931		.byte	2
0000001c 01               14932		.byte	1
0000001d 4a               14933		.byte	74
0000001e 5f5f46424c5f494e 14934		.strz	"__FBL_INC_H__ "
00000026 435f485f5f2000  
0000002d 03               14935		.byte	3
0000002e 59               14936		.byte	89
0000002f 03               14937		.byte	3

                                   Fri Apr 10 08:32:04 2020           Page 268
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
00000030 01               14938		.byte	1
00000031 1c               14939		.byte	28
00000032 5f46424c44494147 14940		.strz	"_FBLDIAG_14229_CORE_VERSION 0x0210u"
0000003a 5f31343232395f43
00000042 4f52455f56455253
0000004a 494f4e2030783032
00000052 31307500        
00000056 01               14941		.byte	1
00000057 1d               14942		.byte	29
00000058 5f46424c44494147 14943		.strz	"_FBLDIAG_14229_CORE_RELEASE_VERSION 0x02u"
00000060 5f31343232395f43
00000068 4f52455f52454c45
00000070 4153455f56455253
00000078 494f4e2030783032
00000080 7500            
00000082 04               14944		.byte	4
00000083 03               14945		.byte	3
00000084 5a               14946		.byte	90
00000085 04               14947		.byte	4
00000086 01               14948		.byte	1
00000087 30               14949		.byte	48
00000088 5647454e5f47454e 14950		.strz	"VGEN_GENY "
00000090 592000          
00000093 01               14951		.byte	1
00000094 4a               14952		.byte	74
00000095 435f435055545950 14953		.strz	"C_CPUTYPE_32BIT "
0000009d 455f333242495420
000000a5 00              
000000a6 01               14954		.byte	1
000000a7 54               14955		.byte	84
000000a8 435f435055545950 14956		.strz	"C_CPUTYPE_BIGENDIAN "
000000b0 455f424947454e44
000000b8 49414e2000      
000000bd 01               14957		.byte	1
000000be 59               14958		.byte	89
000000bf 435f435055545950 14959		.strz	"C_CPUTYPE_BITORDER_MSB2LSB "
000000c7 455f4249544f5244
000000cf 45525f4d5342324c
000000d7 53422000        
000000db 01               14960		.byte	1
000000dc 8901             14961		.byte	137,1
000000de 5647454e5f454e41 14962		.strz	"VGEN_ENABLE_CANFBL "
000000e6 424c455f43414e46
000000ee 424c2000        
000000f2 01               14963		.byte	1
000000f3 be01             14964		.byte	190,1
000000f5 565f434f4d505f47 14965		.strz	"V_COMP_GHS_MPC5700 "
000000fd 48535f4d50433537
00000105 30302000        
00000109 01               14966		.byte	1
0000010a bf01             14967		.byte	191,1
0000010c 565f4350555f4d50 14968		.strz	"V_CPU_MPC5700 "
00000114 43353730302000  
0000011b 01               14969		.byte	1
0000011c ca01             14970		.byte	202,1
0000011e 4d414749435f4e55 14971		.strz	"MAGIC_NUMBER 312540478"
00000126 4d42455220333132
0000012e 35343034373800  
00000135 04               14972		.byte	4
00000136 03               14973		.byte	3
00000137 5c               14974		.byte	92
00000138 05               14975		.byte	5
00000139 03               14976		.byte	3
0000013a 31               14977		.byte	49
0000013b 06               14978		.byte	6
0000013c 03               14979		.byte	3
0000013d 34               14980		.byte	52
0000013e 07               14981		.byte	7
0000013f 01               14982		.byte	1
00000140 8704             14983		.byte	135,4
00000142 565f4445465f5355 14984		.strz	"V_DEF_SUPPORTED_PLATFORM "
0000014a 50504f525445445f
00000152 504c4154464f524d
0000015a 2000            
0000015c 01               14985		.byte	1
0000015d e104             14986		.byte	225,4
0000015f 7675696e74782076 14987		.strz	"vuintx vuint32"
00000167 75696e74333200  
0000016e 01               14988		.byte	1
0000016f e404             14989		.byte	228,4
00000171 7673696e74782076 14990		.strz	"vsintx vsint32"
00000179 73696e74333200  
00000180 01               14991		.byte	1
00000181 da06             14992		.byte	218,6
00000183 4c4f43414c5f494e 14993		.strz	"LOCAL_INLINE static inline"
0000018b 4c494e4520737461
00000193 74696320696e6c69
0000019b 6e6500          

                                   Fri Apr 10 08:32:04 2020           Page 269
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
0000019e 01               14994		.byte	1
0000019f e406             14995		.byte	228,6
000001a1 565f4d454d524f4d 14996		.strz	"V_MEMROM0 "
000001a9 302000          
000001ac 01               14997		.byte	1
000001ad ec06             14998		.byte	236,6
000001af 565f4d454d524f4d 14999		.strz	"V_MEMROM1 "
000001b7 312000          
000001ba 01               15000		.byte	1
000001bb f006             15001		.byte	240,6
000001bd 565f4d454d524f4d 15002		.strz	"V_MEMROM1_FAR "
000001c5 315f4641522000  
000001cc 01               15003		.byte	1
000001cd 8007             15004		.byte	128,7
000001cf 565f4d454d524f4d 15005		.strz	"V_MEMROM2 const"
000001d7 3220636f6e737400
000001df 01               15006		.byte	1
000001e0 8307             15007		.byte	131,7
000001e2 4d454d4f52595f52 15008		.strz	"MEMORY_ROM V_MEMROM2"
000001ea 4f4d20565f4d454d
000001f2 524f4d3200      
000001f7 01               15009		.byte	1
000001f8 8a07             15010		.byte	138,7
000001fa 565f4d454d524f4d 15011		.strz	"V_MEMROM2_FAR const"
00000202 325f46415220636f
0000020a 6e737400        
0000020e 01               15012		.byte	1
0000020f 9307             15013		.byte	147,7
00000211 565f4d454d524f4d 15014		.strz	"V_MEMROM3 "
00000219 332000          
0000021c 01               15015		.byte	1
0000021d 9907             15016		.byte	153,7
0000021f 565f4d454d52414d 15017		.strz	"V_MEMRAM0 "
00000227 302000          
0000022a 01               15018		.byte	1
0000022b 9d07             15019		.byte	157,7
0000022d 565f4d454d52414d 15020		.strz	"V_MEMRAM1_NEAR "
00000235 315f4e4541522000
0000023d 01               15021		.byte	1
0000023e a107             15022		.byte	161,7
00000240 565f4d454d52414d 15023		.strz	"V_MEMRAM1 "
00000248 312000          
0000024b 01               15024		.byte	1
0000024c ab07             15025		.byte	171,7
0000024e 565f4d454d52414d 15026		.strz	"V_MEMRAM2_NEAR "
00000256 325f4e4541522000
0000025e 01               15027		.byte	1
0000025f ae07             15028		.byte	174,7
00000261 4d454d4f52595f4e 15029		.strz	"MEMORY_NEAR V_MEMRAM2_NEAR"
00000269 45415220565f4d45
00000271 4d52414d325f4e45
00000279 415200          
0000027c 01               15030		.byte	1
0000027d b507             15031		.byte	181,7
0000027f 565f4d454d52414d 15032		.strz	"V_MEMRAM2 "
00000287 322000          
0000028a 01               15033		.byte	1
0000028b bf07             15034		.byte	191,7
0000028d 565f4d454d52414d 15035		.strz	"V_MEMRAM2_FAR "
00000295 325f4641522000  
0000029c 01               15036		.byte	1
0000029d c207             15037		.byte	194,7
0000029f 4d454d4f52595f46 15038		.strz	"MEMORY_FAR V_MEMRAM2_FAR"
000002a7 415220565f4d454d
000002af 52414d325f464152
000002b7 00              
000002b8 01               15039		.byte	1
000002b9 cc07             15040		.byte	204,7
000002bb 565f4d454d52414d 15041		.strz	"V_MEMRAM3 "
000002c3 332000          
000002c6 01               15042		.byte	1
000002c7 f907             15043		.byte	249,7
000002c9 565f4e554c4c2028 15044		.strz	"V_NULL ((void*)0)"
000002d1 28766f69642a2930
000002d9 2900            
000002db 01               15045		.byte	1
000002dc fe07             15046		.byte	254,7
000002de 4e554c4c20565f4e 15047		.strz	"NULL V_NULL"
000002e6 554c4c00        
000002ea 04               15048		.byte	4
000002eb 01               15049		.byte	1

                                   Fri Apr 10 08:32:04 2020           Page 270
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
000002ec 45               15050		.byte	69
000002ed 6b47454e79566572 15051		.strz	"kGENyVersionNumberOfBytes 10"
000002f5 73696f6e4e756d62
000002fd 65724f6642797465
00000305 7320313000      
0000030a 04               15052		.byte	4
0000030b 04               15053		.byte	4
0000030c 03               15054		.byte	3
0000030d 60               15055		.byte	96
0000030e 08               15056		.byte	8
0000030f 03               15057		.byte	3
00000310 44               15058		.byte	68
00000311 09               15059		.byte	9
00000312 03               15060		.byte	3
00000313 55               15061		.byte	85
00000314 0a               15062		.byte	10
00000315 01               15063		.byte	1
00000316 45               15064		.byte	69
00000317 5f5f5345435f494e 15065		.strz	"__SEC_INC_H__ "
0000031f 435f485f5f2000  
00000326 03               15066		.byte	3
00000327 56               15067		.byte	86
00000328 0b               15068		.byte	11
00000329 01               15069		.byte	1
0000032a 2f               15070		.byte	47
0000032b 5345435f434c4153 15071		.strz	"SEC_CLASS_DDD 0"
00000333 535f444444203000
0000033b 01               15072		.byte	1
0000033c 30               15073		.byte	48
0000033d 5345435f434c4153 15074		.strz	"SEC_CLASS_C 1"
00000345 535f43203100    
0000034b 01               15075		.byte	1
0000034c 31               15076		.byte	49
0000034d 5345435f434c4153 15077		.strz	"SEC_CLASS_CCC 2"
00000355 535f434343203200
0000035d 01               15078		.byte	1
0000035e 32               15079		.byte	50
0000035f 5345435f434c4153 15080		.strz	"SEC_CLASS_VENDOR 3"
00000367 535f56454e444f52
0000036f 203300          
00000372 01               15081		.byte	1
00000373 39               15082		.byte	57
00000374 5345435f52495045 15083		.strz	"SEC_RIPEMD160 0"
0000037c 4d44313630203000
00000384 01               15084		.byte	1
00000385 3a               15085		.byte	58
00000386 5345435f53484131 15086		.strz	"SEC_SHA1 1"
0000038e 203100          
00000391 01               15087		.byte	1
00000392 3b               15088		.byte	59
00000393 5345435f53484132 15089		.strz	"SEC_SHA256 2"
0000039b 3536203200      
000003a0 01               15090		.byte	1
000003a1 44               15091		.byte	68
000003a2 5345435f4b45595f 15092		.strz	"SEC_KEY_TIMEOUT 0"
000003aa 54494d454f555420
000003b2 3000            
000003b4 01               15093		.byte	1
000003b5 48               15094		.byte	72
000003b6 5345435f48415348 15095		.strz	"SEC_HASH_ALGORITHM SEC_SHA1"
000003be 5f414c474f524954
000003c6 484d205345435f53
000003ce 48413100        
000003d2 01               15096		.byte	1
000003d3 49               15097		.byte	73
000003d4 5345435f53454355 15098		.strz	"SEC_SECURITY_CLASS SEC_CLASS_DDD"
000003dc 524954595f434c41
000003e4 5353205345435f43
000003ec 4c4153535f444444
000003f4 00              
000003f5 01               15099		.byte	1
000003f6 4f               15100		.byte	79
000003f7 5345435f454e4142 15101		.strz	"SEC_ENABLE_VERIFICATION_KEY_INTERNAL "
000003ff 4c455f5645524946
00000407 49434154494f4e5f
0000040f 4b45595f494e5445
00000417 524e414c2000    
0000041d 01               15102		.byte	1
0000041e 50               15103		.byte	80
0000041f 5345435f53495a45 15104		.strz	"SEC_SIZE_CHECKSUM_VENDOR 0"
00000427 5f434845434b5355
0000042f 4d5f56454e444f52
00000437 203000          
0000043a 01               15105		.byte	1

                                   Fri Apr 10 08:32:04 2020           Page 271
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
0000043b 52               15106		.byte	82
0000043c 5345435f56455249 15107		.strz	"SEC_VERIFY_BYTES 64"
00000444 46595f4259544553
0000044c 20363400        
00000450 01               15108		.byte	1
00000451 53               15109		.byte	83
00000452 5345435f454e4142 15110		.strz	"SEC_ENABLE_VERIFICATION_ADDRESS_LENGTH "
0000045a 4c455f5645524946
00000462 49434154494f4e5f
0000046a 414444524553535f
00000472 4c454e4754482000
0000047a 01               15111		.byte	1
0000047b 54               15112		.byte	84
0000047c 5345435f454e4142 15113		.strz	"SEC_ENABLE_CRC_TOTAL "
00000484 4c455f4352435f54
0000048c 4f54414c2000    
00000492 01               15114		.byte	1
00000493 57               15115		.byte	87
00000494 5345435f5645525f 15116		.strz	"SEC_VER_SIG_OFFSET 0"
0000049c 5349475f4f464653
000004a4 4554203000      
000004a9 01               15117		.byte	1
000004aa 58               15118		.byte	88
000004ab 5345435f5645525f 15119		.strz	"SEC_VER_CRC_OFFSET 0"
000004b3 4352435f4f464653
000004bb 4554203000      
000004c0 04               15120		.byte	4
000004c1 03               15121		.byte	3
000004c2 59               15122		.byte	89
000004c3 0c               15123		.byte	12
000004c4 03               15124		.byte	3
000004c5 4d               15125		.byte	77
000004c6 0a               15126		.byte	10
000004c7 04               15127		.byte	4
000004c8 01               15128		.byte	1
000004c9 59               15129		.byte	89
000004ca 5345435f57415443 15130		.strz	"SEC_WATCHDOG_CYCLE_COUNT (0x20u)"
000004d2 48444f475f435943
000004da 4c455f434f554e54
000004e2 2028307832307529
000004ea 00              
000004eb 01               15131		.byte	1
000004ec 60               15132		.byte	96
000004ed 5345435f454e4142 15133		.strz	"SEC_ENABLE_WORKSPACE_INTERNAL "
000004f5 4c455f574f524b53
000004fd 504143455f494e54
00000505 45524e414c2000  
0000050c 01               15134		.byte	1
0000050d 66               15135		.byte	102
0000050e 5345435f43484543 15136		.strz	"SEC_CHECKSUM_TYPE_CRC 0u"
00000516 4b53554d5f545950
0000051e 455f435243203075
00000526 00              
00000527 01               15137		.byte	1
00000528 6b               15138		.byte	107
00000529 5345435f43484543 15139		.strz	"SEC_CHECKSUM_TYPE_HASH (SEC_CHECKSUM_TYPE_CRC + 1u)"
00000531 4b53554d5f545950
00000539 455f484153482028
00000541 5345435f43484543
00000549 4b53554d5f545950
00000551 455f435243202b20
00000559 31752900        
0000055d 01               15140		.byte	1
0000055e 71               15141		.byte	113
0000055f 5345435f4d41435f 15142		.strz	"SEC_MAC_TYPE_HMAC 0u"
00000567 545950455f484d41
0000056f 4320307500      
00000574 01               15143		.byte	1
00000575 8601             15144		.byte	134,1
00000577 5345435f43524333 15145		.strz	"SEC_CRC32 0u"
0000057f 3220307500      
00000584 01               15146		.byte	1
00000585 8e01             15147		.byte	142,1
00000587 5345435f43524331 15148		.strz	"SEC_CRC16 (SEC_CRC32 + 1u)"
0000058f 3620285345435f43
00000597 52433332202b2031
0000059f 752900          
000005a2 01               15149		.byte	1
000005a3 ca01             15150		.byte	202,1
000005a5 5345435f5349474e 15151		.strz	"SEC_SIGNATURE_SCHEME_RSA_V15 0u"
000005ad 41545552455f5343
000005b5 48454d455f525341
000005bd 5f56313520307500
000005c5 01               15152		.byte	1
000005c6 e301             15153		.byte	227,1
000005c8 5345435f43414c4c 15154		.strz	"SEC_CALL_TYPE "
000005d0 5f545950452000  
000005d7 04               15155		.byte	4
000005d8 03               15156		.byte	3
000005d9 5c               15157		.byte	92
000005da 0d               15158		.byte	13
000005db 03               15159		.byte	3
000005dc 2f               15160		.byte	47
000005dd 0e               15161		.byte	14

                                   Fri Apr 10 08:32:04 2020           Page 272
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
000005de 04               15162		.byte	4
000005df 04               15163		.byte	4
000005e0 04               15164		.byte	4
000005e1 03               15165		.byte	3
000005e2 58               15166		.byte	88
000005e3 0f               15167		.byte	15
000005e4 01               15168		.byte	1
000005e5 6d               15169		.byte	109
000005e6 5345435f4352435f 15170		.strz	"SEC_CRC_TYPE SEC_CRC32"
000005ee 5459504520534543
000005f6 5f435243333200  
000005fd 01               15171		.byte	1
000005fe 78               15172		.byte	120
000005ff 5345435f454e4142 15173		.strz	"SEC_ENABLE_CRC_TYPE_CRC32 "
00000607 4c455f4352435f54
0000060f 5950455f43524333
00000617 322000          
0000061a 04               15174		.byte	4
0000061b 03               15175		.byte	3
0000061c 59               15176		.byte	89
0000061d 10               15177		.byte	16
0000061e 03               15178		.byte	3
0000061f 55               15179		.byte	85
00000620 11               15180		.byte	17
00000621 01               15181		.byte	1
00000622 3e               15182		.byte	62
00000623 5345435f53454544 15183		.strz	"SEC_SEED_LENGTH 8u"
0000062b 5f4c454e47544820
00000633 387500          
00000636 01               15184		.byte	1
00000637 40               15185		.byte	64
00000638 5345435f4b45595f 15186		.strz	"SEC_KEY_LENGTH 4u"
00000640 4c454e4754482034
00000648 7500            
0000064a 04               15187		.byte	4
0000064b 01               15188		.byte	1
0000064c 7e               15189		.byte	126
0000064d 5345435f50524e47 15190		.strz	"SEC_PRNG_LCG 0u"
00000655 5f4c434720307500
0000065d 01               15191		.byte	1
0000065e 8301             15192		.byte	131,1
00000660 5345435f50524e47 15193		.strz	"SEC_PRNG_FIPS186 (SEC_PRNG_LCG + 1u)"
00000668 5f46495053313836
00000670 20285345435f5052
00000678 4e475f4c4347202b
00000680 2031752900      
00000685 01               15194		.byte	1
00000686 8901             15195		.byte	137,1
00000688 5345435f50524e47 15196		.strz	"SEC_PRNG SEC_PRNG_LCG"
00000690 205345435f50524e
00000698 475f4c434700    
0000069e 04               15197		.byte	4
0000069f 03               15198		.byte	3
000006a0 5a               15199		.byte	90
000006a1 12               15200		.byte	18
000006a2 01               15201		.byte	1
000006a3 ba01             15202		.byte	186,1
000006a5 5345435f53454355 15203		.strz	"SEC_SECURITY_CLASS_VERIFY SEC_SECURITY_CLASS"
000006ad 524954595f434c41
000006b5 53535f5645524946
000006bd 59205345435f5345
000006c5 4355524954595f43
000006cd 4c41535300      
000006d2 01               15204		.byte	1
000006d3 c001             15205		.byte	192,1
000006d5 5345435f53454355 15206		.strz	"SEC_SECURITY_CLASS_VERIFICATION SEC_SECURITY_CLASS"
000006dd 524954595f434c41
000006e5 53535f5645524946
000006ed 49434154494f4e20
000006f5 5345435f53454355
000006fd 524954595f434c41
00000705 535300          
00000708 01               15207		.byte	1
00000709 c701             15208		.byte	199,1
0000070b 5345435f43484543 15209		.strz	"SEC_CHECKSUM_TYPE SEC_CHECKSUM_TYPE_CRC"
00000713 4b53554d5f545950
0000071b 45205345435f4348
00000723 45434b53554d5f54
0000072b 5950455f43524300
00000733 01               15210		.byte	1
00000734 cd01             15211		.byte	205,1
00000736 5345435f4d41435f 15212		.strz	"SEC_MAC_TYPE SEC_MAC_TYPE_HMAC"
0000073e 5459504520534543
00000746 5f4d41435f545950
0000074e 455f484d414300  
00000755 01               15213		.byte	1
00000756 d301             15214		.byte	211,1
00000758 5345435f5349474e 15215		.strz	"SEC_SIGNATURE_SCHEME SEC_SIGNATURE_SCHEME_RSA_V15"
00000760 41545552455f5343
00000768 48454d4520534543
00000770 5f5349474e415455
00000778 52455f534348454d
00000780 455f5253415f5631
00000788 3500            
0000078a 01               15216		.byte	1
0000078b fd01             15217		.byte	253,1

                                   Fri Apr 10 08:32:04 2020           Page 273
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
0000078d 5345435f454e4142 15218		.strz	"SEC_ENABLE_SECURITY_CLASS_DDD "
00000795 4c455f5345435552
0000079d 4954595f434c4153
000007a5 535f4444442000  
000007ac 01               15219		.byte	1
000007ad 8f02             15220		.byte	143,2
000007af 5345435f454e4142 15221		.strz	"SEC_ENABLE_CHECKSUM_TYPE_CRC "
000007b7 4c455f434845434b
000007bf 53554d5f54595045
000007c7 5f4352432000    
000007cd 01               15222		.byte	1
000007ce db02             15223		.byte	219,2
000007d0 5345435f454e4142 15224		.strz	"SEC_ENABLE_VERIFY_CHECKSUM_CRC "
000007d8 4c455f5645524946
000007e0 595f434845434b53
000007e8 554d5f4352432000
000007f0 04               15225		.byte	4
000007f1 04               15226		.byte	4
000007f2 04               15227		.byte	4
000007f3 03               15228		.byte	3
000007f4 62               15229		.byte	98
000007f5 13               15230		.byte	19
000007f6 03               15231		.byte	3
000007f7 48               15232		.byte	72
000007f8 14               15233		.byte	20
000007f9 01               15234		.byte	1
000007fa 33               15235		.byte	51
000007fb 46424c5f5553455f 15236		.strz	"FBL_USE_OWN_MEMCPY "
00000803 4f574e5f4d454d43
0000080b 50592000        
0000080f 01               15237		.byte	1
00000810 34               15238		.byte	52
00000811 46424c5f57415443 15239		.strz	"FBL_WATCHDOG_ON "
00000819 48444f475f4f4e20
00000821 00              
00000822 01               15240		.byte	1
00000823 35               15241		.byte	53
00000824 46424c5f57415443 15242		.strz	"FBL_WATCHDOG_TIME (1 / FBL_REPEAT_CALL_CYCLE)"
0000082c 48444f475f54494d
00000834 45202831202f2046
0000083c 424c5f5245504541
00000844 545f43414c4c5f43
0000084c 59434c452900    
00000852 01               15243		.byte	1
00000853 36               15244		.byte	54
00000854 46424c5f48454144 15245		.strz	"FBL_HEADER_ADDRESS 0xFC0400u"
0000085c 45525f4144445245
00000864 5353203078464330
0000086c 3430307500      
00000871 01               15246		.byte	1
00000872 37               15247		.byte	55
00000873 46424c5f454e4142 15248		.strz	"FBL_ENABLE_APPL_TASK "
0000087b 4c455f4150504c5f
00000883 5441534b2000    
00000889 01               15249		.byte	1
0000088a 39               15250		.byte	57
0000088b 46424c5f44494147 15251		.strz	"FBL_DIAG_BUFFER_LENGTH 4095"
00000893 5f4255464645525f
0000089b 4c454e4754482034
000008a3 30393500        
000008a7 01               15252		.byte	1
000008a8 3a               15253		.byte	58
000008a9 46424c5f44494147 15254		.strz	"FBL_DIAG_TIME_P2MAX (50 / FBL_REPEAT_CALL_CYCLE)"
000008b1 5f54494d455f5032
000008b9 4d41582028353020
000008c1 2f2046424c5f5245
000008c9 504541545f43414c
000008d1 4c5f4359434c4529
000008d9 00              
000008da 01               15255		.byte	1
000008db 3b               15256		.byte	59
000008dc 46424c5f44494147 15257		.strz	"FBL_DIAG_TIME_P3MAX (2000 / FBL_REPEAT_CALL_CYCLE)"
000008e4 5f54494d455f5033
000008ec 4d41582028323030
000008f4 30202f2046424c5f
000008fc 5245504541545f43
00000904 414c4c5f4359434c
0000090c 452900          
0000090f 01               15258		.byte	1
00000910 3c               15259		.byte	60
00000911 46424c5f454e4142 15260		.strz	"FBL_ENABLE_SLEEPMODE "
00000919 4c455f534c454550
00000921 4d4f44452000    
00000927 01               15261		.byte	1
00000928 3d               15262		.byte	61
00000929 46424c5f534c4545 15263		.strz	"FBL_SLEEP_TIME 300000"
00000931 505f54494d452033
00000939 303030303000    
0000093f 01               15264		.byte	1
00000940 3e               15265		.byte	62
00000941 46424c5f454e4142 15266		.strz	"FBL_ENABLE_GAP_FILL "
00000949 4c455f4741505f46
00000951 494c4c2000      
00000956 01               15267		.byte	1
00000957 40               15268		.byte	64
00000958 46424c5f454e4142 15269		.strz	"FBL_ENABLE_MULTIPLE_MEM_DEVICES "
00000960 4c455f4d554c5449
00000968 504c455f4d454d5f
00000970 4445564943455320
00000978 00              
00000979 01               15270		.byte	1
0000097a 41               15271		.byte	65
0000097b 46424c5f4d454d44 15272		.strz	"FBL_MEMDRV_SEGMENT_SIZE 8"
00000983 52565f5345474d45
0000098b 4e545f53495a4520
00000993 3800            
00000995 01               15273		.byte	1

                                   Fri Apr 10 08:32:04 2020           Page 274
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
00000996 42               15274		.byte	66
00000997 46424c5f454e4142 15275		.strz	"FBL_ENABLE_PRESENCE_PATTERN "
0000099f 4c455f5052455345
000009a7 4e43455f50415454
000009af 45524e2000      
000009b4 01               15276		.byte	1
000009b5 43               15277		.byte	67
000009b6 46424c5f454e4142 15278		.strz	"FBL_ENABLE_FBL_START "
000009be 4c455f46424c5f53
000009c6 544152542000    
000009cc 01               15279		.byte	1
000009cd 45               15280		.byte	69
000009ce 46424c5f44495341 15281		.strz	"FBL_DISABLE_USERSUBFUNCTION "
000009d6 424c455f55534552
000009de 53554246554e4354
000009e6 494f4e2000      
000009eb 01               15282		.byte	1
000009ec 47               15283		.byte	71
000009ed 46424c5f4d544142 15284		.strz	"FBL_MTAB_NO_OF_BLOCKS 2"
000009f5 5f4e4f5f4f465f42
000009fd 4c4f434b53203200
00000a05 01               15285		.byte	1
00000a06 49               15286		.byte	73
00000a07 46424c5f44495341 15287		.strz	"FBL_DISABLE_DATA_PROCESSING "
00000a0f 424c455f44415441
00000a17 5f50524f43455353
00000a1f 494e472000      
00000a24 01               15288		.byte	1
00000a25 51               15289		.byte	81
00000a26 46424c5f454e4142 15290		.strz	"FBL_ENABLE_SYSTEM_CHECK "
00000a2e 4c455f5359535445
00000a36 4d5f434845434b20
00000a3e 00              
00000a3f 01               15291		.byte	1
00000a40 52               15292		.byte	82
00000a41 46424c5f454e4142 15293		.strz	"FBL_ENABLE_DEBUG_STATUS "
00000a49 4c455f4445425547
00000a51 5f53544154555320
00000a59 00              
00000a5a 01               15294		.byte	1
00000a5b 53               15295		.byte	83
00000a5c 46424c5f454e4142 15296		.strz	"FBL_ENABLE_ASSERTION "
00000a64 4c455f4153534552
00000a6c 54494f4e2000    
00000a72 01               15297		.byte	1
00000a73 56               15298		.byte	86
00000a74 46424c5f4d454d5f 15299		.strz	"FBL_MEM_ENABLE_VERIFY_OUTPUT "
00000a7c 454e41424c455f56
00000a84 45524946595f4f55
00000a8c 545055542000    
00000a92 01               15300		.byte	1
00000a93 5f               15301		.byte	95
00000a94 464c4153485f5349 15302		.strz	"FLASH_SIZE 1536"
00000a9c 5a45203135333600
00000aa4 01               15303		.byte	1
00000aa5 72               15304		.byte	114
00000aa6 53574d5f44415441 15305		.strz	"SWM_DATA_MAX_NOAR 8"
00000aae 5f4d41585f4e4f41
00000ab6 52203800        
00000aba 01               15306		.byte	1
00000abb 74               15307		.byte	116
00000abc 46424c5f454e4142 15308		.strz	"FBL_ENABLE_SEC_ACCESS_DELAY "
00000ac4 4c455f5345435f41
00000acc 43434553535f4445
00000ad4 4c41592000      
00000ad9 01               15309		.byte	1
00000ada 76               15310		.byte	118
00000adb 46424c5f44494147 15311		.strz	"FBL_DIAG_ENABLE_ADDR_BASED_DOWNLOAD "
00000ae3 5f454e41424c455f
00000aeb 414444525f424153
00000af3 45445f444f574e4c
00000afb 4f41442000      
00000b00 01               15312		.byte	1
00000b01 8201             15313		.byte	130,1
00000b03 46424c5f454e4142 15314		.strz	"FBL_ENABLE_CAN_CONFIRMATION "
00000b0b 4c455f43414e5f43
00000b13 4f4e4649524d4154
00000b1b 494f4e2000      
00000b20 01               15315		.byte	1
00000b21 8301             15316		.byte	131,1
00000b23 46424c5f454e4142 15317		.strz	"FBL_ENABLE_SECMOD_VECTOR "
00000b2b 4c455f5345434d4f
00000b33 445f564543544f52
00000b3b 2000            
00000b3d 01               15318		.byte	1
00000b3e 8501             15319		.byte	133,1
00000b40 46424c5f454e4142 15320		.strz	"FBL_ENABLE_WRAPPER_NV "
00000b48 4c455f5752415050
00000b50 45525f4e562000  
00000b57 01               15321		.byte	1
00000b58 8d01             15322		.byte	141,1
00000b5a 46424c5f454e4142 15323		.strz	"FBL_ENABLE_APPL_STATE_TASK "
00000b62 4c455f4150504c5f
00000b6a 53544154455f5441
00000b72 534b2000        
00000b76 01               15324		.byte	1
00000b77 9001             15325		.byte	144,1
00000b79 46424c5f454e4142 15326		.strz	"FBL_ENABLE_APPL_TIMER_TASK "
00000b81 4c455f4150504c5f
00000b89 54494d45525f5441
00000b91 534b2000        
00000b95 01               15327		.byte	1
00000b96 9901             15328		.byte	153,1
00000b98 46424c5f5346525f 15329		.strz	"FBL_SFR_SIU_TYPE 2u"
00000ba0 5349555f54595045
00000ba8 20327500        

                                   Fri Apr 10 08:32:04 2020           Page 275
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
00000bac 01               15330		.byte	1
00000bad 9f01             15331		.byte	159,1
00000baf 46424c5f4d455f42 15332		.strz	"FBL_ME_BASE 0xFFFB8000ul"
00000bb7 4153452030784646
00000bbf 464238303030756c
00000bc7 00              
00000bc8 01               15333		.byte	1
00000bc9 a001             15334		.byte	160,1
00000bcb 46424c5f434d555f 15335		.strz	"FBL_CMU_BASE 0xC3FE0100ul"
00000bd3 4241534520307843
00000bdb 3346453031303075
00000be3 6c00            
00000be5 01               15336		.byte	1
00000be6 a101             15337		.byte	161,1
00000be8 46424c5f434d555f 15338		.strz	"FBL_CMU_PLL_BASE 0xFFFB0200ul"
00000bf0 504c4c5f42415345
00000bf8 2030784646464230
00000c00 323030756c00    
00000c06 01               15339		.byte	1
00000c07 a201             15340		.byte	162,1
00000c09 46424c5f43474d5f 15341		.strz	"FBL_CGM_BASE 0xFFFB0000ul"
00000c11 4241534520307846
00000c19 4646423030303075
00000c21 6c00            
00000c23 01               15342		.byte	1
00000c24 a301             15343		.byte	163,1
00000c26 46424c5f52474d5f 15344		.strz	"FBL_RGM_BASE 0xFFFA8000ul"
00000c2e 4241534520307846
00000c36 4646413830303075
00000c3e 6c00            
00000c40 01               15345		.byte	1
00000c41 a901             15346		.byte	169,1
00000c43 46424c5f5346525f 15347		.strz	"FBL_SFR_BASE_ADRESSES_PRECONFIGURED "
00000c4b 424153455f414452
00000c53 45535345535f5052
00000c5b 45434f4e46494755
00000c63 5245442000      
00000c68 04               15348		.byte	4
00000c69 03               15349		.byte	3
00000c6a 5a               15350		.byte	90
00000c6b 15               15351		.byte	21
00000c6c 01               15352		.byte	1
00000c6d 44               15353		.byte	68
00000c6e 6b46626c53797341 15354		.strz	"kFblSysAssertServiceMainHandlerInvalid 0x21u"
00000c76 7373657274536572
00000c7e 766963654d61696e
00000c86 48616e646c657249
00000c8e 6e76616c69642030
00000c96 7832317500      
00000c9b 01               15355		.byte	1
00000c9c 4b               15356		.byte	75
00000c9d 6b46626c53797341 15357		.strz	"kFblSysAssertParameterOutOfRange 0x50u"
00000ca5 7373657274506172
00000cad 616d657465724f75
00000cb5 744f6652616e6765
00000cbd 20307835307500  
00000cc4 03               15358		.byte	3
00000cc5 54               15359		.byte	84
00000cc6 16               15360		.byte	22
00000cc7 01               15361		.byte	1
00000cc8 33               15362		.byte	51
00000cc9 6b46626c4f656d41 15363		.strz	"kFblOemAssertMainHandlerIdxInvalid 0x80u"
00000cd1 73736572744d6169
00000cd9 6e48616e646c6572
00000ce1 496478496e76616c
00000ce9 6964203078383075
00000cf1 00              
00000cf2 04               15364		.byte	4
00000cf3 01               15365		.byte	1
00000cf4 5a               15366		.byte	90
00000cf5 46424c5f4445434c 15367		.strz	"FBL_DECL_ASSERT_EXTENDED_INFO(n) n"
00000cfd 5f4153534552545f
00000d05 455854454e444544
00000d0d 5f494e464f286e29
00000d15 206e00          
00000d18 01               15368		.byte	1
00000d19 5b               15369		.byte	91
00000d1a 46424c5f55534544 15370		.strz	"FBL_USED_ASSERT_EXTENDED_INFO(n) (n)"
00000d22 5f4153534552545f
00000d2a 455854454e444544
00000d32 5f494e464f286e29
00000d3a 20286e2900      
00000d3f 01               15371		.byte	1
00000d40 60               15372		.byte	96
00000d41 6173736572744662 15373		.strz	"assertFblUser(p,e) if (!(p)) ApplFblFatalError(FBL_USED_ASSERT_EXTENDED_INFO(e))"
00000d49 6c5573657228702c
00000d51 6529206966202821
00000d59 2870292920417070
00000d61 6c46626c46617461
00000d69 6c4572726f722846
00000d71 424c5f555345445f
00000d79 4153534552545f45
00000d81 5854454e4445445f
00000d89 494e464f28652929
00000d91 00              
00000d92 01               15374		.byte	1
00000d93 61               15375		.byte	97
00000d94 6173736572744662 15376		.strz	"assertFblGen(p,e) if (!(p)) ApplFblFatalError(FBL_USED_ASSERT_EXTENDED_INFO(e))"
00000d9c 6c47656e28702c65
00000da4 2920696620282128
00000dac 702929204170706c
00000db4 46626c466174616c
00000dbc 4572726f72284642
00000dc4 4c5f555345445f41
00000dcc 53534552545f4558
00000dd4 54454e4445445f49
00000ddc 4e464f2865292900
00000de4 01               15377		.byte	1
00000de5 62               15378		.byte	98
00000de6 6173736572744662 15379		.strz	"assertFblInternal(p,e) if (!(p)) ApplFblFatalError(FBL_USED_ASSERT_EXTENDED_INFO(e))"
00000dee 6c496e7465726e61
00000df6 6c28702c65292069
00000dfe 6620282128702929
00000e06 204170706c46626c
00000e0e 466174616c457272
00000e16 6f722846424c5f55
00000e1e 5345445f41535345
00000e26 52545f455854454e
00000e2e 4445445f494e464f
00000e36 2865292900      
00000e3b 04               15380		.byte	4
00000e3c 01               15381		.byte	1
00000e3d 6c               15382		.byte	108
00000e3e 46424c5f4445465f 15383		.strz	"FBL_DEF_ENABLE_NON_KB_MAIN "
00000e46 454e41424c455f4e
00000e4e 4f4e5f4b425f4d41
00000e56 494e2000        
00000e5a 01               15384		.byte	1
00000e5b 7e               15385		.byte	126

                                   Fri Apr 10 08:32:04 2020           Page 276
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
00000e5c 6b46626c4f6b2030 15386		.strz	"kFblOk 0x00u"
00000e64 7830307500      
00000e69 01               15387		.byte	1
00000e6a 7f               15388		.byte	127
00000e6b 6b46626c4661696c 15389		.strz	"kFblFailed 0x01u"
00000e73 6564203078303175
00000e7b 00              
00000e7c 01               15390		.byte	1
00000e7d 9501             15391		.byte	149,1
00000e7f 46424c5f52455045 15392		.strz	"FBL_REPEAT_CALL_CYCLE 1"
00000e87 41545f43414c4c5f
00000e8f 4359434c45203100
00000e97 01               15393		.byte	1
00000e98 9a01             15394		.byte	154,1
00000e9a 46424c5f43414c4c 15395		.strz	"FBL_CALL_TYPE "
00000ea2 5f545950452000  
00000ea9 01               15396		.byte	1
00000eaa 9e01             15397		.byte	158,1
00000eac 565f43414c4c4241 15398		.strz	"V_CALLBACK_NEAR "
00000eb4 434b5f4e45415220
00000ebc 00              
00000ebd 01               15399		.byte	1
00000ebe a101             15400		.byte	161,1
00000ec0 565f4150495f4e45 15401		.strz	"V_API_NEAR "
00000ec8 41522000        
00000ecc 01               15402		.byte	1
00000ecd c601             15403		.byte	198,1
00000ecf 46424c5f42495430 15404		.strz	"FBL_BIT0 0x01u"
00000ed7 20307830317500  
00000ede 01               15405		.byte	1
00000edf c701             15406		.byte	199,1
00000ee1 46424c5f42495431 15407		.strz	"FBL_BIT1 0x02u"
00000ee9 20307830327500  
00000ef0 01               15408		.byte	1
00000ef1 c801             15409		.byte	200,1
00000ef3 46424c5f42495432 15410		.strz	"FBL_BIT2 0x04u"
00000efb 20307830347500  
00000f02 01               15411		.byte	1
00000f03 c901             15412		.byte	201,1
00000f05 46424c5f42495433 15413		.strz	"FBL_BIT3 0x08u"
00000f0d 20307830387500  
00000f14 01               15414		.byte	1
00000f15 ca01             15415		.byte	202,1
00000f17 46424c5f42495434 15416		.strz	"FBL_BIT4 0x10u"
00000f1f 20307831307500  
00000f26 01               15417		.byte	1
00000f27 cb01             15418		.byte	203,1
00000f29 46424c5f42495435 15419		.strz	"FBL_BIT5 0x20u"
00000f31 20307832307500  
00000f38 01               15420		.byte	1
00000f39 cc01             15421		.byte	204,1
00000f3b 46424c5f42495436 15422		.strz	"FBL_BIT6 0x40u"
00000f43 20307834307500  
00000f4a 01               15423		.byte	1
00000f4b cd01             15424		.byte	205,1
00000f4d 46424c5f42495437 15425		.strz	"FBL_BIT7 0x80u"
00000f55 20307838307500  
00000f5c 01               15426		.byte	1
00000f5d d701             15427		.byte	215,1
00000f5f 46626c496e766572 15428		.strz	"FblInvert8Bit(x) ((vuint8) ((x) ^ ((vuint8)0xFFu)))"
00000f67 7438426974287829
00000f6f 2028287675696e74
00000f77 3829202828782920
00000f7f 5e2028287675696e
00000f87 7438293078464675
00000f8f 29292900        
00000f93 01               15429		.byte	1
00000f94 d801             15430		.byte	216,1
00000f96 46626c496e766572 15431		.strz	"FblInvert16Bit(x) ((vuint16)((x) ^ ((vuint16)0xFFFFu)))"
00000f9e 7431364269742878
00000fa6 292028287675696e
00000fae 7431362928287829
00000fb6 205e202828767569
00000fbe 6e74313629307846
00000fc6 4646467529292900
00000fce 01               15432		.byte	1
00000fcf d901             15433		.byte	217,1
00000fd1 46626c496e766572 15434		.strz	"FblInvert32Bit(x) ((vuint32)((x) ^ ((vuint32)0xFFFFFFFFul)))"
00000fd9 7433324269742878
00000fe1 292028287675696e
00000fe9 7433322928287829
00000ff1 205e202828767569
00000ff9 6e74333229307846
00001001 4646464646464675
00001009 6c29292900      
0000100e 01               15435		.byte	1
0000100f de01             15436		.byte	222,1
00001011 6b46626c44696167 15437		.strz	"kFblDiagTimeP2 FBL_DIAG_TIME_P2MAX"
00001019 54696d6550322046
00001021 424c5f444941475f
00001029 54494d455f50324d
00001031 415800          
00001034 01               15438		.byte	1
00001035 df01             15439		.byte	223,1
00001037 6b46626c44696167 15440		.strz	"kFblDiagTimeP2Star FBL_DIAG_TIME_P3MAX"
0000103f 54696d6550325374
00001047 61722046424c5f44
0000104f 4941475f54494d45
00001057 5f50334d415800  
0000105e 01               15441		.byte	1

                                   Fri Apr 10 08:32:04 2020           Page 277
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
0000105f 8502             15442		.byte	133,2
00001061 46424c5f53544154 15443		.strz	"FBL_STATE_BITS 32"
00001069 455f424954532033
00001071 3200            
00001073 01               15444		.byte	1
00001074 8702             15445		.byte	135,2
00001076 6b46626c53746174 15446		.strz	"kFblStateMaskAll 0xFFFFFFFFul"
0000107e 654d61736b416c6c
00001086 2030784646464646
0000108e 464646756c00    
00001094 01               15447		.byte	1
00001095 8802             15448		.byte	136,2
00001097 46626c496e766572 15449		.strz	"FblInvertStates(x) FblInvert32Bit(x)"
0000109f 7453746174657328
000010a7 78292046626c496e
000010af 7665727433324269
000010b7 7428782900      
000010bc 01               15450		.byte	1
000010bd 8f02             15451		.byte	143,2
000010bf 46424c5f53544154 15452		.strz	"FBL_STATE_MASK(bit) ((tFblStateBitmap)(1ul << ((bit) % FBL_STATE_BITS)))"
000010c7 455f4d41534b2862
000010cf 6974292028287446
000010d7 626c537461746542
000010df 69746d6170292831
000010e7 756c203c3c202828
000010ef 6269742920252046
000010f7 424c5f5354415445
000010ff 5f42495453292929
00001107 00              
00001108 01               15453		.byte	1
00001109 9002             15454		.byte	144,2
0000110b 46424c5f53544154 15455		.strz	"FBL_STATE_MULTIMASK(min,max) ((((kFblStateMaskAll) >> ((min) % FBL_STATE_BITS)) << ((min) % FBL_STATE_BITS)) ^ (((kFblStateMaskAll) >> (((max) + 1) % FBL_STATE_BITS)) << (((max) + 1) % FBL_STATE_BITS)))"
00001113 455f4d554c54494d
0000111b 41534b286d696e2c
00001123 6d61782920282828
0000112b 286b46626c537461
00001133 74654d61736b416c
0000113b 6c29203e3e202828
00001143 6d696e2920252046
0000114b 424c5f5354415445
00001153 5f42495453292920
0000115b 3c3c2028286d696e
00001163 2920252046424c5f
0000116b 53544154455f4249
00001173 54532929205e2028
0000117b 28286b46626c5374
00001183 6174654d61736b41
0000118b 6c6c29203e3e2028
00001193 28286d617829202b
0000119b 2031292025204642
000011a3 4c5f53544154455f
000011ab 424954532929203c
000011b3 3c202828286d6178
000011bb 29202b2031292025
000011c3 2046424c5f535441
000011cb 54455f4249545329
000011d3 292900          
000011d6 01               15456		.byte	1
000011d7 9102             15457		.byte	145,2
000011d9 46424c5f53544154 15458		.strz	"FBL_STATE_MASKLONG(bit) (1ul << (bit))"
000011e1 455f4d41534b4c4f
000011e9 4e47286269742920
000011f1 2831756c203c3c20
000011f9 28626974292900  
00001200 01               15459		.byte	1
00001201 9302             15460		.byte	147,2
00001203 46424c5f53544154 15461		.strz	"FBL_STATE_INDEX(bit) ((bit) / FBL_STATE_BITS)"
0000120b 455f494e44455828
00001213 6269742920282862
0000121b 697429202f204642
00001223 4c5f53544154455f
0000122b 424954532900    
00001231 01               15462		.byte	1
00001232 9402             15463		.byte	148,2
00001234 46424c5f53544154 15464		.strz	"FBL_STATE_SET(arr,bit) ((arr)[FBL_STATE_INDEX(bit)] |= FBL_STATE_MASK(bit))"
0000123c 455f534554286172
00001244 722c626974292028
0000124c 28617272295b4642
00001254 4c5f53544154455f
0000125c 494e444558286269
00001264 74295d207c3d2046
0000126c 424c5f5354415445
00001274 5f4d41534b286269
0000127c 74292900        
00001280 01               15465		.byte	1
00001281 9502             15466		.byte	149,2
00001283 46424c5f53544154 15467		.strz	"FBL_STATE_CLR(arr,bit) ((arr)[FBL_STATE_INDEX(bit)] &= FblInvertStates(FBL_STATE_MASK(bit)))"
0000128b 455f434c52286172
00001293 722c626974292028
0000129b 28617272295b4642
000012a3 4c5f53544154455f
000012ab 494e444558286269
000012b3 74295d20263d2046
000012bb 626c496e76657274
000012c3 5374617465732846
000012cb 424c5f5354415445
000012d3 5f4d41534b286269
000012db 7429292900      
000012e0 01               15468		.byte	1
000012e1 9602             15469		.byte	150,2
000012e3 46424c5f53544154 15470		.strz	"FBL_STATE_MULTICLR(arr,min,max) ((arr)[FBL_STATE_INDEX(min)] &= FblInvertStates(FBL_STATE_MULTIMASK((min), (max))))"
000012eb 455f4d554c544943
000012f3 4c52286172722c6d
000012fb 696e2c6d61782920
00001303 2828617272295b46
0000130b 424c5f5354415445
00001313 5f494e444558286d
0000131b 696e295d20263d20
00001323 46626c496e766572
0000132b 7453746174657328
00001333 46424c5f53544154
0000133b 455f4d554c54494d
00001343 41534b28286d696e
0000134b 292c20286d617829
00001353 29292900        
00001357 01               15471		.byte	1
00001358 9702             15472		.byte	151,2
0000135a 46424c5f53544154 15473		.strz	"FBL_STATE_TEST(arr,bit) (((arr)[FBL_STATE_INDEX(bit)] & FBL_STATE_MASK(bit)) == FBL_STATE_MASK(bit))"
00001362 455f544553542861
0000136a 72722c6269742920
00001372 282828617272295b
0000137a 46424c5f53544154
00001382 455f494e44455828
0000138a 626974295d202620
00001392 46424c5f53544154
0000139a 455f4d41534b2862
000013a2 69742929203d3d20
000013aa 46424c5f53544154
000013b2 455f4d41534b2862
000013ba 6974292900      
000013bf 01               15474		.byte	1
000013c0 b002             15475		.byte	176,2
000013c2 4d454d53495a455f 15476		.strz	"MEMSIZE_OK "
000013ca 4f4b2000        
000013ce 04               15477		.byte	4
000013cf 03               15478		.byte	3
000013d0 68               15479		.byte	104
000013d1 17               15480		.byte	23
000013d2 01               15481		.byte	1
000013d3 3b               15482		.byte	59
000013d4 6b4e724f6656616c 15483		.strz	"kNrOfValidationBytes 1"
000013dc 69646174696f6e42
000013e4 79746573203100  
000013eb 01               15484		.byte	1
000013ec 5c               15485		.byte	92
000013ed 46424c5f4c42545f 15486		.strz	"FBL_LBT_START_SEC_CONST "
000013f5 53544152545f5345
000013fd 435f434f4e535420
00001405 00              
00001406 03               15487		.byte	3
00001407 5d               15488		.byte	93
00001408 18               15489		.byte	24
00001409 01               15490		.byte	1
0000140a 2b               15491		.byte	43
0000140b 46424c5f4d454d4d 15492		.strz	"FBL_MEMMAP_ERROR "
00001413 41505f4552524f52
0000141b 2000            
0000141d 04               15493		.byte	4
0000141e 01               15494		.byte	1
0000141f 5f               15495		.byte	95
00001420 46424c5f4c42545f 15496		.strz	"FBL_LBT_STOP_SEC_CONST "
00001428 53544f505f534543
00001430 5f434f4e53542000
00001438 03               15497		.byte	3

                                   Fri Apr 10 08:32:04 2020           Page 278
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
00001439 60               15498		.byte	96
0000143a 18               15499		.byte	24
0000143b 01               15500		.byte	1
0000143c 2b               15501		.byte	43
0000143d 46424c5f4d454d4d 15502		.strz	"FBL_MEMMAP_ERROR "
00001445 41505f4552524f52
0000144d 2000            
0000144f 04               15503		.byte	4
00001450 04               15504		.byte	4
00001451 03               15505		.byte	3
00001452 6e               15506		.byte	110
00001453 19               15507		.byte	25
00001454 01               15508		.byte	1
00001455 54               15509		.byte	84
00001456 464c4153485f5345 15510		.strz	"FLASH_SEGMENT_SIZE 8u"
0000145e 474d454e545f5349
00001466 5a4520387500    
0000146c 04               15511		.byte	4
0000146d 03               15512		.byte	3
0000146e 6f               15513		.byte	111
0000146f 1a               15514		.byte	26
00001470 04               15515		.byte	4
00001471 03               15516		.byte	3
00001472 75               15517		.byte	117
00001473 1b               15518		.byte	27
00001474 01               15519		.byte	1
00001475 5e               15520		.byte	94
00001476 476574503254696d 15521		.strz	"GetP2Timer() (P2Timer)"
0000147e 6572282920285032
00001486 54696d65722900  
0000148d 01               15522		.byte	1
0000148e 5f               15523		.byte	95
0000148f 536574503254696d 15524		.strz	"SetP2Timer(val) (P2Timer = (val))"
00001497 65722876616c2920
0000149f 28503254696d6572
000014a7 203d202876616c29
000014af 2900            
000014b1 01               15525		.byte	1
000014b2 60               15526		.byte	96
000014b3 436c72503254696d 15527		.strz	"ClrP2Timer() (P2Timer = 0x00u)"
000014bb 6572282920285032
000014c3 54696d6572203d20
000014cb 30783030752900  
000014d2 01               15528		.byte	1
000014d3 7c               15529		.byte	124
000014d4 494e495457415443 15530		.strz	"INITWATCHDOG_START_SEC_CODE_EXPORT "
000014dc 48444f475f535441
000014e4 52545f5345435f43
000014ec 4f44455f4558504f
000014f4 52542000        
000014f8 03               15531		.byte	3
000014f9 7d               15532		.byte	125
000014fa 18               15533		.byte	24
000014fb 01               15534		.byte	1
000014fc 2b               15535		.byte	43
000014fd 46424c5f4d454d4d 15536		.strz	"FBL_MEMMAP_ERROR "
00001505 41505f4552524f52
0000150d 2000            
0000150f 04               15537		.byte	4
00001510 01               15538		.byte	1
00001511 8001             15539		.byte	128,1
00001513 494e495457415443 15540		.strz	"INITWATCHDOG_STOP_SEC_CODE_EXPORT "
0000151b 48444f475f53544f
00001523 505f5345435f434f
0000152b 44455f4558504f52
00001533 542000          
00001536 03               15541		.byte	3
00001537 8101             15542		.byte	129,1
00001539 18               15543		.byte	24
0000153a 01               15544		.byte	1
0000153b 2b               15545		.byte	43
0000153c 46424c5f4d454d4d 15546		.strz	"FBL_MEMMAP_ERROR "
00001544 41505f4552524f52
0000154c 2000            
0000154e 04               15547		.byte	4
0000154f 01               15548		.byte	1
00001550 8301             15549		.byte	131,1
00001552 4c4f4f4b464f5257 15550		.strz	"LOOKFORWATCHDOG_START_SEC_CODE_EXPORT "
0000155a 41544348444f475f
00001562 53544152545f5345
0000156a 435f434f44455f45
00001572 58504f52542000  
00001579 03               15551		.byte	3
0000157a 8401             15552		.byte	132,1
0000157c 18               15553		.byte	24

                                   Fri Apr 10 08:32:04 2020           Page 279
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
0000157d 01               15554		.byte	1
0000157e 2b               15555		.byte	43
0000157f 46424c5f4d454d4d 15556		.strz	"FBL_MEMMAP_ERROR "
00001587 41505f4552524f52
0000158f 2000            
00001591 04               15557		.byte	4
00001592 01               15558		.byte	1
00001593 8801             15559		.byte	136,1
00001595 4c4f4f4b464f5257 15560		.strz	"LOOKFORWATCHDOG_STOP_SEC_CODE_EXPORT "
0000159d 41544348444f475f
000015a5 53544f505f534543
000015ad 5f434f44455f4558
000015b5 504f52542000    
000015bb 03               15561		.byte	3
000015bc 8901             15562		.byte	137,1
000015be 18               15563		.byte	24
000015bf 01               15564		.byte	1
000015c0 2b               15565		.byte	43
000015c1 46424c5f4d454d4d 15566		.strz	"FBL_MEMMAP_ERROR "
000015c9 41505f4552524f52
000015d1 2000            
000015d3 04               15567		.byte	4
000015d4 01               15568		.byte	1
000015d5 8b01             15569		.byte	139,1
000015d7 4c4f4f4b464f5257 15570		.strz	"LOOKFORWATCHDOG_START_SEC_CODE_EXPORT "
000015df 41544348444f475f
000015e7 53544152545f5345
000015ef 435f434f44455f45
000015f7 58504f52542000  
000015fe 03               15571		.byte	3
000015ff 8c01             15572		.byte	140,1
00001601 18               15573		.byte	24
00001602 01               15574		.byte	1
00001603 2b               15575		.byte	43
00001604 46424c5f4d454d4d 15576		.strz	"FBL_MEMMAP_ERROR "
0000160c 41505f4552524f52
00001614 2000            
00001616 04               15577		.byte	4
00001617 01               15578		.byte	1
00001618 9001             15579		.byte	144,1
0000161a 4c4f4f4b464f5257 15580		.strz	"LOOKFORWATCHDOG_STOP_SEC_CODE_EXPORT "
00001622 41544348444f475f
0000162a 53544f505f534543
00001632 5f434f44455f4558
0000163a 504f52542000    
00001640 03               15581		.byte	3
00001641 9101             15582		.byte	145,1
00001643 18               15583		.byte	24
00001644 01               15584		.byte	1
00001645 2b               15585		.byte	43
00001646 46424c5f4d454d4d 15586		.strz	"FBL_MEMMAP_ERROR "
0000164e 41505f4552524f52
00001656 2000            
00001658 04               15587		.byte	4
00001659 04               15588		.byte	4
0000165a 03               15589		.byte	3
0000165b 76               15590		.byte	118
0000165c 1c               15591		.byte	28
0000165d 01               15592		.byte	1
0000165e 4d               15593		.byte	77
0000165f 494f5f455f4f4b20 15594		.strz	"IO_E_OK ((vuint8)0x00u)"
00001667 28287675696e7438
0000166f 2930783030752900
00001677 04               15595		.byte	4
00001678 03               15596		.byte	3
00001679 7e               15597		.byte	126
0000167a 1d               15598		.byte	29
0000167b 01               15599		.byte	1
0000167c c001             15600		.byte	192,1
0000167e 4d656d4472697665 15601		.strz	"MemDriver_RReadSync (*memDrvLst[FlashBlock[memSegment].device].read)"
00001686 725f525265616453
0000168e 796e6320282a6d65
00001696 6d4472764c73745b
0000169e 466c617368426c6f
000016a6 636b5b6d656d5365
000016ae 676d656e745d2e64
000016b6 65766963655d2e72
000016be 6561642900      
000016c3 01               15602		.byte	1
000016c4 c401             15603		.byte	196,1
000016c6 4d656d4472697665 15604		.strz	"MemDriver_DeinitSync(a) MemDriver_RDeinitSync((a))"
000016ce 725f4465696e6974
000016d6 53796e6328612920
000016de 4d656d4472697665
000016e6 725f524465696e69
000016ee 7453796e63282861
000016f6 292900          
000016f9 01               15605		.byte	1
000016fa ca01             15606		.byte	202,1
000016fc 46424c5f4d41585f 15607		.strz	"FBL_MAX_SEGMENT_SIZE_MIO FBL_MEMDRV_SEGMENT_SIZE"
00001704 5345474d454e545f
0000170c 53495a455f4d494f
00001714 2046424c5f4d454d
0000171c 4452565f5345474d
00001724 454e545f53495a45
0000172c 00              
0000172d 01               15608		.byte	1
0000172e e601             15609		.byte	230,1

                                   Fri Apr 10 08:32:04 2020           Page 280
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
00001730 46424c5f4d41585f 15610		.strz	"FBL_MAX_SEGMENT_SIZE FBL_MAX_SEGMENT_SIZE_MIO"
00001738 5345474d454e545f
00001740 53495a452046424c
00001748 5f4d41585f534547
00001750 4d454e545f53495a
00001758 455f4d494f00    
0000175e 01               15611		.byte	1
0000175f 8702             15612		.byte	135,2
00001761 46424c5f4d494f5f 15613		.strz	"FBL_MIO_DEFAULT_FCT_PTR "
00001769 44454641554c545f
00001771 4643545f50545220
00001779 00              
0000177a 01               15614		.byte	1
0000177b a002             15615		.byte	160,2
0000177d 46424c4d494f5f53 15616		.strz	"FBLMIO_START_SEC_CODE "
00001785 544152545f534543
0000178d 5f434f44452000  
00001794 03               15617		.byte	3
00001795 a102             15618		.byte	161,2
00001797 18               15619		.byte	24
00001798 01               15620		.byte	1
00001799 2b               15621		.byte	43
0000179a 46424c5f4d454d4d 15622		.strz	"FBL_MEMMAP_ERROR "
000017a2 41505f4552524f52
000017aa 2000            
000017ac 04               15623		.byte	4
000017ad 01               15624		.byte	1
000017ae b102             15625		.byte	177,2
000017b0 46424c4d494f5f53 15626		.strz	"FBLMIO_STOP_SEC_CODE "
000017b8 544f505f5345435f
000017c0 434f44452000    
000017c6 03               15627		.byte	3
000017c7 b202             15628		.byte	178,2
000017c9 18               15629		.byte	24
000017ca 01               15630		.byte	1
000017cb 2b               15631		.byte	43
000017cc 46424c5f4d454d4d 15632		.strz	"FBL_MEMMAP_ERROR "
000017d4 41505f4552524f52
000017dc 2000            
000017de 04               15633		.byte	4
000017df 04               15634		.byte	4
000017e0 03               15635		.byte	3
000017e1 7f               15636		.byte	127
000017e2 1e               15637		.byte	30
000017e3 01               15638		.byte	1
000017e4 66               15639		.byte	102
000017e5 46424c464c494f5f 15640		.strz	"FBLFLIO_FLASHCODE_START_SEC_VAR "
000017ed 464c415348434f44
000017f5 455f53544152545f
000017fd 5345435f56415220
00001805 00              
00001806 03               15641		.byte	3
00001807 67               15642		.byte	103
00001808 18               15643		.byte	24
00001809 01               15644		.byte	1
0000180a 2b               15645		.byte	43
0000180b 46424c5f4d454d4d 15646		.strz	"FBL_MEMMAP_ERROR "
00001813 41505f4552524f52
0000181b 2000            
0000181d 04               15647		.byte	4
0000181e 01               15648		.byte	1
0000181f 69               15649		.byte	105
00001820 46424c464c494f5f 15650		.strz	"FBLFLIO_FLASHCODE_STOP_SEC_VAR "
00001828 464c415348434f44
00001830 455f53544f505f53
00001838 45435f5641522000
00001840 03               15651		.byte	3
00001841 6a               15652		.byte	106
00001842 18               15653		.byte	24
00001843 01               15654		.byte	1
00001844 2b               15655		.byte	43
00001845 46424c5f4d454d4d 15656		.strz	"FBL_MEMMAP_ERROR "
0000184d 41505f4552524f52
00001855 2000            
00001857 04               15657		.byte	4
00001858 04               15658		.byte	4
00001859 03               15659		.byte	3
0000185a 8001             15660		.byte	128,1
0000185c 1f               15661		.byte	31
0000185d 04               15662		.byte	4
0000185e 03               15663		.byte	3
0000185f 8101             15664		.byte	129,1
00001861 20               15665		.byte	32

                                   Fri Apr 10 08:32:04 2020           Page 281
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
00001862 03               15666		.byte	3
00001863 2a               15667		.byte	42
00001864 02               15668		.byte	2
00001865 04               15669		.byte	4
00001866 03               15670		.byte	3
00001867 2b               15671		.byte	43
00001868 21               15672		.byte	33
00001869 01               15673		.byte	1
0000186a 49               15674		.byte	73
0000186b 45455044554d4d59 15675		.strz	"EEPDUMMY_FULL_START_SEC_CODE "
00001873 5f46554c4c5f5354
0000187b 4152545f5345435f
00001883 434f44452000    
00001889 03               15676		.byte	3
0000188a 4a               15677		.byte	74
0000188b 18               15678		.byte	24
0000188c 01               15679		.byte	1
0000188d 2b               15680		.byte	43
0000188e 46424c5f4d454d4d 15681		.strz	"FBL_MEMMAP_ERROR "
00001896 41505f4552524f52
0000189e 2000            
000018a0 04               15682		.byte	4
000018a1 01               15683		.byte	1
000018a2 54               15684		.byte	84
000018a3 45455044554d4d59 15685		.strz	"EEPDUMMY_FULL_STOP_SEC_CODE "
000018ab 5f46554c4c5f5354
000018b3 4f505f5345435f43
000018bb 4f44452000      
000018c0 03               15686		.byte	3
000018c1 55               15687		.byte	85
000018c2 18               15688		.byte	24
000018c3 01               15689		.byte	1
000018c4 2b               15690		.byte	43
000018c5 46424c5f4d454d4d 15691		.strz	"FBL_MEMMAP_ERROR "
000018cd 41505f4552524f52
000018d5 2000            
000018d7 04               15692		.byte	4
000018d8 04               15693		.byte	4
000018d9 04               15694		.byte	4
000018da 03               15695		.byte	3
000018db 8401             15696		.byte	132,1
000018dd 22               15697		.byte	34
000018de 01               15698		.byte	1
000018df 55               15699		.byte	85
000018e0 46424c5f4150504c 15700		.strz	"FBL_APPLVECT_START_SEC_CONST "
000018e8 564543545f535441
000018f0 52545f5345435f43
000018f8 4f4e53542000    
000018fe 03               15701		.byte	3
000018ff 56               15702		.byte	86
00001900 18               15703		.byte	24
00001901 01               15704		.byte	1
00001902 2b               15705		.byte	43
00001903 46424c5f4d454d4d 15706		.strz	"FBL_MEMMAP_ERROR "
0000190b 41505f4552524f52
00001913 2000            
00001915 04               15707		.byte	4
00001916 01               15708		.byte	1
00001917 5a               15709		.byte	90
00001918 46424c5f4150504c 15710		.strz	"FBL_APPLVECT_STOP_SEC_CONST "
00001920 564543545f53544f
00001928 505f5345435f434f
00001930 4e53542000      
00001935 03               15711		.byte	3
00001936 5b               15712		.byte	91
00001937 18               15713		.byte	24
00001938 01               15714		.byte	1
00001939 2b               15715		.byte	43
0000193a 46424c5f4d454d4d 15716		.strz	"FBL_MEMMAP_ERROR "
00001942 41505f4552524f52
0000194a 2000            
0000194c 04               15717		.byte	4
0000194d 04               15718		.byte	4
0000194e 03               15719		.byte	3
0000194f 8801             15720		.byte	136,1
00001951 23               15721		.byte	35

                                   Fri Apr 10 08:32:04 2020           Page 282
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
00001952 03               15722		.byte	3
00001953 3c               15723		.byte	60
00001954 24               15724		.byte	36
00001955 01               15725		.byte	1
00001956 49               15726		.byte	73
00001957 46424c5f43414e5f 15727		.strz	"FBL_CAN_NUMBER_OF_RX_ID 2u"
0000195f 4e554d4245525f4f
00001967 465f52585f494420
0000196f 327500          
00001972 01               15728		.byte	1
00001973 4a               15729		.byte	74
00001974 46424c5f43414e5f 15730		.strz	"FBL_CAN_NUMBER_OF_RANGES 0u"
0000197c 4e554d4245525f4f
00001984 465f52414e474553
0000198c 20307500        
00001990 01               15731		.byte	1
00001991 4b               15732		.byte	75
00001992 46424c5f4e554d42 15733		.strz	"FBL_NUMBER_OF_RX_ID (FBL_CAN_NUMBER_OF_RX_ID + FBL_CAN_NUMBER_OF_RANGES)"
0000199a 45525f4f465f5258
000019a2 5f4944202846424c
000019aa 5f43414e5f4e554d
000019b2 4245525f4f465f52
000019ba 585f4944202b2046
000019c2 424c5f43414e5f4e
000019ca 554d4245525f4f46
000019d2 5f52414e47455329
000019da 00              
000019db 01               15734		.byte	1
000019dc 54               15735		.byte	84
000019dd 46424c5f4e554d42 15736		.strz	"FBL_NUMBER_OF_TX_ID 1u"
000019e5 45525f4f465f5458
000019ed 5f494420317500  
000019f4 01               15737		.byte	1
000019f5 57               15738		.byte	87
000019f6 46424c5f43575f43 15739		.strz	"FBL_CW_CFG_START_SEC_CONST "
000019fe 46475f5354415254
00001a06 5f5345435f434f4e
00001a0e 53542000        
00001a12 03               15740		.byte	3
00001a13 58               15741		.byte	88
00001a14 18               15742		.byte	24
00001a15 01               15743		.byte	1
00001a16 2b               15744		.byte	43
00001a17 46424c5f4d454d4d 15745		.strz	"FBL_MEMMAP_ERROR "
00001a1f 41505f4552524f52
00001a27 2000            
00001a29 04               15746		.byte	4
00001a2a 01               15747		.byte	1
00001a2b 67               15748		.byte	103
00001a2c 46424c5f43575f43 15749		.strz	"FBL_CW_CFG_STOP_SEC_CONST "
00001a34 46475f53544f505f
00001a3c 5345435f434f4e53
00001a44 542000          
00001a47 03               15750		.byte	3
00001a48 68               15751		.byte	104
00001a49 18               15752		.byte	24
00001a4a 01               15753		.byte	1
00001a4b 2b               15754		.byte	43
00001a4c 46424c5f4d454d4d 15755		.strz	"FBL_MEMMAP_ERROR "
00001a54 41505f4552524f52
00001a5c 2000            
00001a5e 04               15756		.byte	4
00001a5f 01               15757		.byte	1
00001a60 6d               15758		.byte	109
00001a61 46424c5f43575f45 15759		.strz	"FBL_CW_ENABLE_PHYSICAL_REQUEST_HANDLER "
00001a69 4e41424c455f5048
00001a71 59534943414c5f52
00001a79 4551554553545f48
00001a81 414e444c45522000
00001a89 01               15760		.byte	1
00001a8a 6e               15761		.byte	110
00001a8b 46424c5f43575f45 15762		.strz	"FBL_CW_ENABLE_FUNCTIONAL_REQUEST_HANDLER "
00001a93 4e41424c455f4655
00001a9b 4e4354494f4e414c
00001aa3 5f52455155455354
00001aab 5f48414e444c4552
00001ab3 2000            
00001ab5 04               15763		.byte	4
00001ab6 03               15764		.byte	3
00001ab7 4d               15765		.byte	77
00001ab8 25               15766		.byte	37
00001ab9 03               15767		.byte	3
00001aba 54               15768		.byte	84
00001abb 26               15769		.byte	38
00001abc 04               15770		.byte	4
00001abd 01               15771		.byte	1
00001abe 74               15772		.byte	116
00001abf 4d554c5449504c45 15773		.strz	"MULTIPLE_RECEIVE_BUFFER "
00001ac7 5f52454345495645
00001acf 5f42554646455220
00001ad7 00              
00001ad8 01               15774		.byte	1
00001ad9 9902             15775		.byte	153,2
00001adb 6b46626c43616e4d 15776		.strz	"kFblCanMaxMB 16"
00001ae3 61784d4220313600
00001aeb 01               15777		.byte	1

                                   Fri Apr 10 08:32:04 2020           Page 283
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
00001aec cd03             15778		.byte	205,3
00001aee 46424c48575f5241 15779		.strz	"FBLHW_RAMCODE_START_SEC_CODE "
00001af6 4d434f44455f5354
00001afe 4152545f5345435f
00001b06 434f44452000    
00001b0c 03               15780		.byte	3
00001b0d ce03             15781		.byte	206,3
00001b0f 18               15782		.byte	24
00001b10 01               15783		.byte	1
00001b11 2b               15784		.byte	43
00001b12 46424c5f4d454d4d 15785		.strz	"FBL_MEMMAP_ERROR "
00001b1a 41505f4552524f52
00001b22 2000            
00001b24 04               15786		.byte	4
00001b25 01               15787		.byte	1
00001b26 d003             15788		.byte	208,3
00001b28 46424c48575f5241 15789		.strz	"FBLHW_RAMCODE_STOP_SEC_CODE "
00001b30 4d434f44455f5354
00001b38 4f505f5345435f43
00001b40 4f44452000      
00001b45 03               15790		.byte	3
00001b46 d103             15791		.byte	209,3
00001b48 18               15792		.byte	24
00001b49 01               15793		.byte	1
00001b4a 2b               15794		.byte	43
00001b4b 46424c5f4d454d4d 15795		.strz	"FBL_MEMMAP_ERROR "
00001b53 41505f4552524f52
00001b5b 2000            
00001b5d 04               15796		.byte	4
00001b5e 01               15797		.byte	1
00001b5f d703             15798		.byte	215,3
00001b61 46424c48575f5354 15799		.strz	"FBLHW_START_SEC_CODE "
00001b69 4152545f5345435f
00001b71 434f44452000    
00001b77 03               15800		.byte	3
00001b78 d803             15801		.byte	216,3
00001b7a 18               15802		.byte	24
00001b7b 01               15803		.byte	1
00001b7c 2b               15804		.byte	43
00001b7d 46424c5f4d454d4d 15805		.strz	"FBL_MEMMAP_ERROR "
00001b85 41505f4552524f52
00001b8d 2000            
00001b8f 04               15806		.byte	4
00001b90 01               15807		.byte	1
00001b91 da03             15808		.byte	218,3
00001b93 46424c48575f5354 15809		.strz	"FBLHW_STOP_SEC_CODE "
00001b9b 4f505f5345435f43
00001ba3 4f44452000      
00001ba8 03               15810		.byte	3
00001ba9 db03             15811		.byte	219,3
00001bab 18               15812		.byte	24
00001bac 01               15813		.byte	1
00001bad 2b               15814		.byte	43
00001bae 46424c5f4d454d4d 15815		.strz	"FBL_MEMMAP_ERROR "
00001bb6 41505f4552524f52
00001bbe 2000            
00001bc0 04               15816		.byte	4
00001bc1 01               15817		.byte	1
00001bc2 df03             15818		.byte	223,3
00001bc4 46424c48575f4642 15819		.strz	"FBLHW_FBLCANTRANSMITTED_START_SEC_CODE "
00001bcc 4c43414e5452414e
00001bd4 534d49545445445f
00001bdc 53544152545f5345
00001be4 435f434f44452000
00001bec 03               15820		.byte	3
00001bed e003             15821		.byte	224,3
00001bef 18               15822		.byte	24
00001bf0 01               15823		.byte	1
00001bf1 2b               15824		.byte	43
00001bf2 46424c5f4d454d4d 15825		.strz	"FBL_MEMMAP_ERROR "
00001bfa 41505f4552524f52
00001c02 2000            
00001c04 04               15826		.byte	4
00001c05 01               15827		.byte	1
00001c06 e203             15828		.byte	226,3
00001c08 46424c48575f4642 15829		.strz	"FBLHW_FBLCANTRANSMITTED_STOP_SEC_CODE "
00001c10 4c43414e5452414e
00001c18 534d49545445445f
00001c20 53544f505f534543
00001c28 5f434f44452000  
00001c2f 03               15830		.byte	3
00001c30 e303             15831		.byte	227,3
00001c32 18               15832		.byte	24
00001c33 01               15833		.byte	1

                                   Fri Apr 10 08:32:04 2020           Page 284
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
00001c34 2b               15834		.byte	43
00001c35 46424c5f4d454d4d 15835		.strz	"FBL_MEMMAP_ERROR "
00001c3d 41505f4552524f52
00001c45 2000            
00001c47 04               15836		.byte	4
00001c48 01               15837		.byte	1
00001c49 e503             15838		.byte	229,3
00001c4b 46424c48575f5354 15839		.strz	"FBLHW_START_SEC_CODE "
00001c53 4152545f5345435f
00001c5b 434f44452000    
00001c61 03               15840		.byte	3
00001c62 e603             15841		.byte	230,3
00001c64 18               15842		.byte	24
00001c65 01               15843		.byte	1
00001c66 2b               15844		.byte	43
00001c67 46424c5f4d454d4d 15845		.strz	"FBL_MEMMAP_ERROR "
00001c6f 41505f4552524f52
00001c77 2000            
00001c79 04               15846		.byte	4
00001c7a 01               15847		.byte	1
00001c7b e803             15848		.byte	232,3
00001c7d 46424c48575f5354 15849		.strz	"FBLHW_STOP_SEC_CODE "
00001c85 4f505f5345435f43
00001c8d 4f44452000      
00001c92 03               15850		.byte	3
00001c93 e903             15851		.byte	233,3
00001c95 18               15852		.byte	24
00001c96 01               15853		.byte	1
00001c97 2b               15854		.byte	43
00001c98 46424c5f4d454d4d 15855		.strz	"FBL_MEMMAP_ERROR "
00001ca0 41505f4552524f52
00001ca8 2000            
00001caa 04               15856		.byte	4
00001cab 01               15857		.byte	1
00001cac f903             15858		.byte	249,3
00001cae 4d454d4350595f53 15859		.strz	"MEMCPY_START_SEC_CODE "
00001cb6 544152545f534543
00001cbe 5f434f44452000  
00001cc5 03               15860		.byte	3
00001cc6 fa03             15861		.byte	250,3
00001cc8 18               15862		.byte	24
00001cc9 01               15863		.byte	1
00001cca 2b               15864		.byte	43
00001ccb 46424c5f4d454d4d 15865		.strz	"FBL_MEMMAP_ERROR "
00001cd3 41505f4552524f52
00001cdb 2000            
00001cdd 04               15866		.byte	4
00001cde 01               15867		.byte	1
00001cdf fd03             15868		.byte	253,3
00001ce1 4d454d4350595f53 15869		.strz	"MEMCPY_STOP_SEC_CODE "
00001ce9 544f505f5345435f
00001cf1 434f44452000    
00001cf7 03               15870		.byte	3
00001cf8 fe03             15871		.byte	254,3
00001cfa 18               15872		.byte	24
00001cfb 01               15873		.byte	1
00001cfc 2b               15874		.byte	43
00001cfd 46424c5f4d454d4d 15875		.strz	"FBL_MEMMAP_ERROR "
00001d05 41505f4552524f52
00001d0d 2000            
00001d0f 04               15876		.byte	4
00001d10 04               15877		.byte	4
00001d11 03               15878		.byte	3
00001d12 4e               15879		.byte	78
00001d13 27               15880		.byte	39
00001d14 01               15881		.byte	1
00001d15 3b               15882		.byte	59
00001d16 46424c5f54505f45 15883		.strz	"FBL_TP_ENABLE_ISO15765_2_2 "
00001d1e 4e41424c455f4953
00001d26 4f31353736355f32
00001d2e 5f322000        
00001d32 01               15884		.byte	1
00001d33 41               15885		.byte	65
00001d34 46424c5f54505f45 15886		.strz	"FBL_TP_ENABLE_CONFIRMATION_INTERRUPT "
00001d3c 4e41424c455f434f
00001d44 4e4649524d415449
00001d4c 4f4e5f494e544552
00001d54 525550542000    
00001d5a 04               15887		.byte	4
00001d5b 03               15888		.byte	3
00001d5c 4f               15889		.byte	79

                                   Fri Apr 10 08:32:04 2020           Page 285
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
00001d5d 28               15890		.byte	40
00001d5e 01               15891		.byte	1
00001d5f b101             15892		.byte	177,1
00001d61 46424c54505f5241 15893		.strz	"FBLTP_RAMCODE_START_SEC_CODE "
00001d69 4d434f44455f5354
00001d71 4152545f5345435f
00001d79 434f44452000    
00001d7f 03               15894		.byte	3
00001d80 b201             15895		.byte	178,1
00001d82 18               15896		.byte	24
00001d83 01               15897		.byte	1
00001d84 2b               15898		.byte	43
00001d85 46424c5f4d454d4d 15899		.strz	"FBL_MEMMAP_ERROR "
00001d8d 41505f4552524f52
00001d95 2000            
00001d97 04               15900		.byte	4
00001d98 01               15901		.byte	1
00001d99 c301             15902		.byte	195,1
00001d9b 46424c54505f5241 15903		.strz	"FBLTP_RAMCODE_STOP_SEC_CODE "
00001da3 4d434f44455f5354
00001dab 4f505f5345435f43
00001db3 4f44452000      
00001db8 03               15904		.byte	3
00001db9 c401             15905		.byte	196,1
00001dbb 18               15906		.byte	24
00001dbc 01               15907		.byte	1
00001dbd 2b               15908		.byte	43
00001dbe 46424c5f4d454d4d 15909		.strz	"FBL_MEMMAP_ERROR "
00001dc6 41505f4552524f52
00001dce 2000            
00001dd0 04               15910		.byte	4
00001dd1 04               15911		.byte	4
00001dd2 01               15912		.byte	1
00001dd3 79               15913		.byte	121
00001dd4 46626c4377536574 15914		.strz	"FblCwSetOfflineMode() "
00001ddc 4f66666c696e654d
00001de4 6f646528292000  
00001deb 01               15915		.byte	1
00001dec 7a               15916		.byte	122
00001ded 46626c4377536574 15917		.strz	"FblCwSetOnlineMode() "
00001df5 4f6e6c696e654d6f
00001dfd 646528292000    
00001e03 01               15918		.byte	1
00001e04 7d               15919		.byte	125
00001e05 46626c4377547261 15920		.strz	"FblCwTransmit(a,b,c) FblCwCanTransmit((a), (b))"
00001e0d 6e736d697428612c
00001e15 622c63292046626c
00001e1d 437743616e547261
00001e25 6e736d6974282861
00001e2d 292c202862292900
00001e35 01               15921		.byte	1
00001e36 8401             15922		.byte	132,1
00001e38 46626c4377536875 15923		.strz	"FblCwShutdownRequest(a) FblSetShutdownRequest()"
00001e40 74646f776e526571
00001e48 7565737428612920
00001e50 46626c5365745368
00001e58 7574646f776e5265
00001e60 7175657374282900
00001e68 01               15924		.byte	1
00001e69 8f01             15925		.byte	143,1
00001e6b 6b46626c43774d73 15926		.strz	"kFblCwMsgTypeRcrRp 0x03u"
00001e73 6754797065526372
00001e7b 5270203078303375
00001e83 00              
00001e84 01               15927		.byte	1
00001e85 c601             15928		.byte	198,1
00001e87 46424c5f43575f46 15929		.strz	"FBL_CW_FULL_START_SEC_CODE "
00001e8f 554c4c5f53544152
00001e97 545f5345435f434f
00001e9f 44452000        
00001ea3 03               15930		.byte	3
00001ea4 c701             15931		.byte	199,1
00001ea6 18               15932		.byte	24
00001ea7 01               15933		.byte	1
00001ea8 2b               15934		.byte	43
00001ea9 46424c5f4d454d4d 15935		.strz	"FBL_MEMMAP_ERROR "
00001eb1 41505f4552524f52
00001eb9 2000            
00001ebb 04               15936		.byte	4
00001ebc 01               15937		.byte	1
00001ebd cd01             15938		.byte	205,1
00001ebf 46424c5f43575f54 15939		.strz	"FBL_CW_TASK_START_SEC_CODE "
00001ec7 41534b5f53544152
00001ecf 545f5345435f434f
00001ed7 44452000        
00001edb 03               15940		.byte	3
00001edc ce01             15941		.byte	206,1
00001ede 18               15942		.byte	24
00001edf 01               15943		.byte	1
00001ee0 2b               15944		.byte	43
00001ee1 46424c5f4d454d4d 15945		.strz	"FBL_MEMMAP_ERROR "
00001ee9 41505f4552524f52
00001ef1 2000            

                                   Fri Apr 10 08:32:04 2020           Page 286
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
00001ef3 04               15946		.byte	4
00001ef4 01               15947		.byte	1
00001ef5 d101             15948		.byte	209,1
00001ef7 46424c5f43575f54 15949		.strz	"FBL_CW_TASK_STOP_SEC_CODE "
00001eff 41534b5f53544f50
00001f07 5f5345435f434f44
00001f0f 452000          
00001f12 03               15950		.byte	3
00001f13 d201             15951		.byte	210,1
00001f15 18               15952		.byte	24
00001f16 01               15953		.byte	1
00001f17 2b               15954		.byte	43
00001f18 46424c5f4d454d4d 15955		.strz	"FBL_MEMMAP_ERROR "
00001f20 41505f4552524f52
00001f28 2000            
00001f2a 04               15956		.byte	4
00001f2b 01               15957		.byte	1
00001f2c ee01             15958		.byte	238,1
00001f2e 46626c4377507265 15959		.strz	"FblCwPrepareResponseAddress() kFblOk"
00001f36 7061726552657370
00001f3e 6f6e736541646472
00001f46 6573732829206b46
00001f4e 626c4f6b00      
00001f53 01               15960		.byte	1
00001f54 fa01             15961		.byte	250,1
00001f56 46424c5f43575f46 15962		.strz	"FBL_CW_FULL_STOP_SEC_CODE "
00001f5e 554c4c5f53544f50
00001f66 5f5345435f434f44
00001f6e 452000          
00001f71 03               15963		.byte	3
00001f72 fb01             15964		.byte	251,1
00001f74 18               15965		.byte	24
00001f75 01               15966		.byte	1
00001f76 2b               15967		.byte	43
00001f77 46424c5f4d454d4d 15968		.strz	"FBL_MEMMAP_ERROR "
00001f7f 41505f4552524f52
00001f87 2000            
00001f89 04               15969		.byte	4
00001f8a 04               15970		.byte	4
00001f8b 03               15971		.byte	3
00001f8c 8e01             15972		.byte	142,1
00001f8e 29               15973		.byte	41
00001f8f 03               15974		.byte	3
00001f90 39               15975		.byte	57
00001f91 2a               15976		.byte	42
00001f92 03               15977		.byte	3
00001f93 3b               15978		.byte	59
00001f94 2b               15979		.byte	43
00001f95 01               15980		.byte	1
00001f96 31               15981		.byte	49
00001f97 4e565f454e41424c 15982		.strz	"NV_ENABLE_ADDRESS_LOOKUP "
00001f9f 455f414444524553
00001fa7 535f4c4f4f4b5550
00001faf 2000            
00001fb1 01               15983		.byte	1
00001fb2 5f               15984		.byte	95
00001fb3 6b45657053697a65 15985		.strz	"kEepSizeValidityFlags 0x01u"
00001fbb 56616c6964697479
00001fc3 466c616773203078
00001fcb 30317500        
00001fcf 04               15986		.byte	4
00001fd0 04               15987		.byte	4
00001fd1 04               15988		.byte	4
00001fd2 03               15989		.byte	3
00001fd3 9501             15990		.byte	149,1
00001fd5 2c               15991		.byte	44
00001fd6 01               15992		.byte	1
00001fd7 40               15993		.byte	64
00001fd8 46424c5f4642545f 15994		.strz	"FBL_FBT_START_SEC_CONST "
00001fe0 53544152545f5345
00001fe8 435f434f4e535420
00001ff0 00              
00001ff1 03               15995		.byte	3
00001ff2 41               15996		.byte	65
00001ff3 18               15997		.byte	24
00001ff4 01               15998		.byte	1
00001ff5 2b               15999		.byte	43
00001ff6 46424c5f4d454d4d 16000		.strz	"FBL_MEMMAP_ERROR "
00001ffe 41505f4552524f52
00002006 2000            
00002008 04               16001		.byte	4

                                   Fri Apr 10 08:32:04 2020           Page 287
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
00002009 01               16002		.byte	1
0000200a 47               16003		.byte	71
0000200b 46424c5f4642545f 16004		.strz	"FBL_FBT_STOP_SEC_CONST "
00002013 53544f505f534543
0000201b 5f434f4e53542000
00002023 03               16005		.byte	3
00002024 48               16006		.byte	72
00002025 18               16007		.byte	24
00002026 01               16008		.byte	1
00002027 2b               16009		.byte	43
00002028 46424c5f4d454d4d 16010		.strz	"FBL_MEMMAP_ERROR "
00002030 41505f4552524f52
00002038 2000            
0000203a 04               16011		.byte	4
0000203b 04               16012		.byte	4
0000203c 03               16013		.byte	3
0000203d a101             16014		.byte	161,1
0000203f 2d               16015		.byte	45
00002040 03               16016		.byte	3
00002041 4b               16017		.byte	75
00002042 2e               16018		.byte	46
00002043 01               16019		.byte	1
00002044 3b               16020		.byte	59
00002045 46424c5f44494147 16021		.strz	"FBL_DIAGCORE_API_REFERENCE_VERSION_MAJOR 0x02u"
0000204d 434f52455f415049
00002055 5f5245464552454e
0000205d 43455f5645525349
00002065 4f4e5f4d414a4f52
0000206d 20307830327500  
00002074 01               16022		.byte	1
00002075 3d               16023		.byte	61
00002076 46424c5f44494147 16024		.strz	"FBL_DIAGCORE_API_REFERENCE_VERSION_MINOR 0x08u"
0000207e 434f52455f415049
00002086 5f5245464552454e
0000208e 43455f5645525349
00002096 4f4e5f4d494e4f52
0000209e 20307830387500  
000020a5 01               16025		.byte	1
000020a6 41               16026		.byte	65
000020a7 46424c5f44494147 16027		.strz	"FBL_DIAG_DISABLE_CORE_READ_SECACCESSDELAY_FLAG "
000020af 5f44495341424c45
000020b7 5f434f52455f5245
000020bf 41445f5345434143
000020c7 4345535344454c41
000020cf 595f464c41472000
000020d7 01               16028		.byte	1
000020d8 48               16029		.byte	72
000020d9 4170706c46626c43 16030		.strz	"ApplFblClrSecAccessDelayFlag() FblDiagSecAccessDelayExpired()"
000020e1 6c72536563416363
000020e9 65737344656c6179
000020f1 466c616728292046
000020f9 626c446961675365
00002101 6341636365737344
00002109 656c617945787069
00002111 726564282900    
00002117 01               16031		.byte	1
00002118 54               16032		.byte	84
00002119 46424c5f44494147 16033		.strz	"FBL_DIAG_ENABLE_CORE_GETBLOCKNR "
00002121 5f454e41424c455f
00002129 434f52455f474554
00002131 424c4f434b4e5220
00002139 00              
0000213a 01               16034		.byte	1
0000213b 55               16035		.byte	85
0000213c 46424c5f44494147 16036		.strz	"FBL_DIAG_ENABLE_CORE_RANGECHECKS "
00002144 5f454e41424c455f
0000214c 434f52455f52414e
00002154 4745434845434b53
0000215c 2000            
0000215e 01               16037		.byte	1
0000215f 56               16038		.byte	86
00002160 46424c5f44494147 16039		.strz	"FBL_DIAG_ENABLE_CORE_SEGMENTHANDLING "
00002168 5f454e41424c455f
00002170 434f52455f534547
00002178 4d454e5448414e44
00002180 4c494e472000    
00002186 01               16040		.byte	1
00002187 57               16041		.byte	87
00002188 46424c5f44494147 16042		.strz	"FBL_DIAG_ENABLE_OEM_INITPOWERON "
00002190 5f454e41424c455f
00002198 4f454d5f494e4954
000021a0 504f5745524f4e20
000021a8 00              
000021a9 01               16043		.byte	1
000021aa 58               16044		.byte	88
000021ab 46424c5f44494147 16045		.strz	"FBL_DIAG_ENABLE_OEM_POSTINIT "
000021b3 5f454e41424c455f
000021bb 4f454d5f504f5354
000021c3 494e49542000    
000021c9 01               16046		.byte	1
000021ca 59               16047		.byte	89
000021cb 46424c5f44494147 16048		.strz	"FBL_DIAG_ENABLE_CORE_PREWRITE "
000021d3 5f454e41424c455f
000021db 434f52455f505245
000021e3 57524954452000  
000021ea 01               16049		.byte	1
000021eb 5a               16050		.byte	90
000021ec 46424c5f44494147 16051		.strz	"FBL_DIAG_ENABLE_CORE_POSTWRITE "
000021f4 5f454e41424c455f
000021fc 434f52455f504f53
00002204 5457524954452000
0000220c 01               16052		.byte	1
0000220d 61               16053		.byte	97
0000220e 6b44696167537461 16054		.strz	"kDiagStateIdxSecurityKeyAllowed (kDiagLastCoreStateIdx + 1u)"
00002216 7465496478536563
0000221e 75726974794b6579
00002226 416c6c6f77656420
0000222e 286b446961674c61
00002236 7374436f72655374
0000223e 617465496478202b
00002246 2031752900      
0000224b 01               16055		.byte	1
0000224c 62               16056		.byte	98
0000224d 6b44696167537461 16057		.strz	"kDiagStateIdxSecurityUnlock (kDiagStateIdxSecurityKeyAllowed + 1u)"
00002255 7465496478536563
0000225d 7572697479556e6c
00002265 6f636b20286b4469
0000226d 6167537461746549
00002275 6478536563757269
0000227d 74794b6579416c6c
00002285 6f776564202b2031
0000228d 752900          

                                   Fri Apr 10 08:32:04 2020           Page 288
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
00002290 01               16058		.byte	1
00002291 63               16059		.byte	99
00002292 6b44696167537461 16060		.strz	"kDiagStateIdxFingerprintValid (kDiagStateIdxSecurityUnlock + 1u)"
0000229a 746549647846696e
000022a2 6765727072696e74
000022aa 56616c696420286b
000022b2 4469616753746174
000022ba 6549647853656375
000022c2 72697479556e6c6f
000022ca 636b202b20317529
000022d2 00              
000022d3 01               16061		.byte	1
000022d4 64               16062		.byte	100
000022d5 6b44696167537461 16063		.strz	"kDiagStateIdxEraseSucceeded (kDiagStateIdxFingerprintValid + 1u)"
000022dd 7465496478457261
000022e5 7365537563636565
000022ed 64656420286b4469
000022f5 6167537461746549
000022fd 647846696e676572
00002305 7072696e7456616c
0000230d 6964202b20317529
00002315 00              
00002316 01               16064		.byte	1
00002317 65               16065		.byte	101
00002318 6b44696167537461 16066		.strz	"kDiagStateIdxTransferDataAllowed (kDiagStateIdxEraseSucceeded + 1u)"
00002320 7465496478547261
00002328 6e73666572446174
00002330 61416c6c6f776564
00002338 20286b4469616753
00002340 7461746549647845
00002348 7261736553756363
00002350 6565646564202b20
00002358 31752900        
0000235c 01               16067		.byte	1
0000235d 66               16068		.byte	102
0000235e 6b44696167537461 16069		.strz	"kDiagStateIdxTransferDataSucceeded (kDiagStateIdxTransferDataAllowed + 1u)"
00002366 7465496478547261
0000236e 6e73666572446174
00002376 6153756363656564
0000237e 656420286b446961
00002386 6753746174654964
0000238e 785472616e736665
00002396 7244617461416c6c
0000239e 6f776564202b2031
000023a6 752900          
000023a9 01               16070		.byte	1
000023aa 67               16071		.byte	103
000023ab 6b44696167537461 16072		.strz	"kDiagStateIdxChecksumAllowed (kDiagStateIdxTransferDataSucceeded + 1u)"
000023b3 7465496478436865
000023bb 636b73756d416c6c
000023c3 6f77656420286b44
000023cb 6961675374617465
000023d3 4964785472616e73
000023db 6665724461746153
000023e3 7563636565646564
000023eb 202b2031752900  
000023f2 01               16073		.byte	1
000023f3 69               16074		.byte	105
000023f4 6b446961674c6173 16075		.strz	"kDiagLastOemStateIdx kDiagStateIdxChecksumAllowed"
000023fc 744f656d53746174
00002404 65496478206b4469
0000240c 6167537461746549
00002414 6478436865636b73
0000241c 756d416c6c6f7765
00002424 6400            
00002426 01               16076		.byte	1
00002427 6d               16077		.byte	109
00002428 4765745365637572 16078		.strz	"GetSecurityUnlock() GetDiagState(kDiagStateIdxSecurityUnlock)"
00002430 697479556e6c6f63
00002438 6b28292047657444
00002440 6961675374617465
00002448 286b446961675374
00002450 6174654964785365
00002458 637572697479556e
00002460 6c6f636b2900    
00002466 01               16079		.byte	1
00002467 b701             16080		.byte	183,1
00002469 6b4469616752716c 16081		.strz	"kDiagRqlDiagnosticSessionControlParameter 0x00u"
00002471 446961676e6f7374
00002479 696353657373696f
00002481 6e436f6e74726f6c
00002489 506172616d657465
00002491 7220307830307500
00002499 01               16082		.byte	1
0000249a c601             16083		.byte	198,1
0000249c 6b4469616752716c 16084		.strz	"kDiagRqlDiagnosticSessionControl (0x01u + kDiagRqlDiagnosticSessionControlParameter)"
000024a4 446961676e6f7374
000024ac 696353657373696f
000024b4 6e436f6e74726f6c
000024bc 2028307830317520
000024c4 2b206b4469616752
000024cc 716c446961676e6f
000024d4 7374696353657373
000024dc 696f6e436f6e7472
000024e4 6f6c506172616d65
000024ec 7465722900      
000024f1 01               16085		.byte	1
000024f2 d501             16086		.byte	213,1
000024f4 6b4469616752716c 16087		.strz	"kDiagRqlTesterPresent 0x01u"
000024fc 5465737465725072
00002504 6573656e74203078
0000250c 30317500        
00002510 01               16088		.byte	1
00002511 f401             16089		.byte	244,1
00002513 6b44696167466d74 16090		.strz	"kDiagFmtServiceId 0x00u"
0000251b 5365727669636549
00002523 6420307830307500
0000252b 01               16091		.byte	1
0000252c f501             16092		.byte	245,1
0000252e 6b44696167466d74 16093		.strz	"kDiagFmtpbDiagData 0x01u"
00002536 7062446961674461
0000253e 7461203078303175
00002546 00              
00002547 01               16094		.byte	1
00002548 f601             16095		.byte	246,1
0000254a 6b44696167466d74 16096		.strz	"kDiagFmtSubparam (kDiagFmtServiceId + 1u)"
00002552 537562706172616d
0000255a 20286b4469616746
00002562 6d74536572766963
0000256a 654964202b203175
00002572 2900            
00002574 01               16097		.byte	1
00002575 8002             16098		.byte	128,2
00002577 6b44696167466d74 16099		.strz	"kDiagFmtNegResponse (kDiagFmtSubparam + 1u)"
0000257f 4e6567526573706f
00002587 6e736520286b4469
0000258f 6167466d74537562
00002597 706172616d202b20
0000259f 31752900        
000025a3 01               16100		.byte	1
000025a4 c702             16101		.byte	199,2
000025a6 46626c4572725374 16102		.strz	"FblErrStatSetSId(id) (errStatLastServiceId = (id))"
000025ae 6174536574534964
000025b6 2869642920286572
000025be 72537461744c6173
000025c6 7453657276696365
000025ce 4964203d20286964
000025d6 292900          
000025d9 04               16103		.byte	4
000025da 01               16104		.byte	1
000025db 51               16105		.byte	81
000025dc 46424c444941475f 16106		.strz	"FBLDIAG_14229_CORE_VERSION 0x0210u"
000025e4 31343232395f434f
000025ec 52455f5645525349
000025f4 4f4e203078303231
000025fc 307500          
000025ff 01               16107		.byte	1
00002600 52               16108		.byte	82
00002601 46424c444941475f 16109		.strz	"FBLDIAG_14229_CORE_RELEASE_VERSION 0x02u"
00002609 31343232395f434f
00002611 52455f52454c4541
00002619 53455f5645525349
00002621 4f4e203078303275
00002629 00              
0000262a 01               16110		.byte	1
0000262b 5a               16111		.byte	90
0000262c 6b4469616743616c 16112		.strz	"kDiagCallCycle 1u"
00002634 6c4379636c652031
0000263c 7500            
0000263e 01               16113		.byte	1

                                   Fri Apr 10 08:32:04 2020           Page 289
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
0000263f 6a               16114		.byte	106
00002640 6b44696167537461 16115		.strz	"kDiagStateIdxSessionDefault 0u"
00002648 7465496478536573
00002650 73696f6e44656661
00002658 756c7420307500  
0000265f 01               16116		.byte	1
00002660 6b               16117		.byte	107
00002661 6b44696167537461 16118		.strz	"kDiagStateIdxSessionExtended 1u"
00002669 7465496478536573
00002671 73696f6e45787465
00002679 6e64656420317500
00002681 01               16119		.byte	1
00002682 6c               16120		.byte	108
00002683 6b44696167537461 16121		.strz	"kDiagStateIdxSessionProgramming 2u"
0000268b 7465496478536573
00002693 73696f6e50726f67
0000269b 72616d6d696e6720
000026a3 327500          
000026a6 01               16122		.byte	1
000026a7 6d               16123		.byte	109
000026a8 6b44696167537461 16124		.strz	"kDiagStateIdxFunctionalRequest 3u"
000026b0 746549647846756e
000026b8 6374696f6e616c52
000026c0 6571756573742033
000026c8 7500            
000026ca 01               16125		.byte	1
000026cb 6e               16126		.byte	110
000026cc 6b44696167537461 16127		.strz	"kDiagStateIdxDiagBufferLocked 4u"
000026d4 7465496478446961
000026dc 674275666665724c
000026e4 6f636b6564203475
000026ec 00              
000026ed 01               16128		.byte	1
000026ee 6f               16129		.byte	111
000026ef 6b44696167537461 16130		.strz	"kDiagStateIdxDiagHandlerCalled 5u"
000026f7 7465496478446961
000026ff 6748616e646c6572
00002707 43616c6c65642035
0000270f 7500            
00002711 01               16131		.byte	1
00002712 70               16132		.byte	112
00002713 6b44696167537461 16133		.strz	"kDiagStateIdxServiceInProgress 6u"
0000271b 7465496478536572
00002723 76696365496e5072
0000272b 6f67726573732036
00002733 7500            
00002735 01               16134		.byte	1
00002736 71               16135		.byte	113
00002737 6b44696167537461 16136		.strz	"kDiagStateIdxRcrRpAllowed 7u"
0000273f 7465496478526372
00002747 5270416c6c6f7765
0000274f 6420377500      
00002754 01               16137		.byte	1
00002755 72               16138		.byte	114
00002756 6b44696167537461 16139		.strz	"kDiagStateIdxRcrRpInProgress 8u"
0000275e 7465496478526372
00002766 5270496e50726f67
0000276e 7265737320387500
00002776 01               16140		.byte	1
00002777 73               16141		.byte	115
00002778 6b44696167537461 16142		.strz	"kDiagStateIdxSuppressPosRspMsg 9u"
00002780 7465496478537570
00002788 7072657373506f73
00002790 5273704d73672039
00002798 7500            
0000279a 01               16143		.byte	1
0000279b 74               16144		.byte	116
0000279c 6b44696167537461 16145		.strz	"kDiagStateIdxServiceHasSubfunction 10u"
000027a4 7465496478536572
000027ac 7669636548617353
000027b4 756266756e637469
000027bc 6f6e2031307500  
000027c3 01               16146		.byte	1
000027c4 75               16147		.byte	117
000027c5 6b44696167537461 16148		.strz	"kDiagStateIdxResponseProcessing 11u"
000027cd 7465496478526573
000027d5 706f6e736550726f
000027dd 63657373696e6720
000027e5 31317500        
000027e9 01               16149		.byte	1
000027ea 78               16150		.byte	120
000027eb 6b44696167537461 16151		.strz	"kDiagStateIdxWaitEcuReset 13u"
000027f3 7465496478576169
000027fb 7445637552657365
00002803 742031337500    
00002809 01               16152		.byte	1
0000280a 79               16153		.byte	121
0000280b 6b44696167537461 16154		.strz	"kDiagStateIdxEcuResetFctFinished 14u"
00002813 7465496478456375
0000281b 5265736574466374
00002823 46696e6973686564
0000282b 2031347500      
00002830 01               16155		.byte	1
00002831 7a               16156		.byte	122
00002832 6b44696167537461 16157		.strz	"kDiagStateIdxResetMsgConfirmed 15u"
0000283a 7465496478526573
00002842 65744d7367436f6e
0000284a 6669726d65642031
00002852 357500          
00002855 01               16158		.byte	1
00002856 7c               16159		.byte	124
00002857 6b44696167537461 16160		.strz	"kDiagStateIdxPreconditionsChecked 16u"
0000285f 7465496478507265
00002867 636f6e646974696f
0000286f 6e73436865636b65
00002877 642031367500    
0000287d 01               16161		.byte	1
0000287e 7d               16162		.byte	125
0000287f 6b44696167537461 16163		.strz	"kDiagStateIdxMemDriverInitialized 17u"
00002887 74654964784d656d
0000288f 447269766572496e
00002897 697469616c697a65
0000289f 642031377500    
000028a5 01               16164		.byte	1
000028a6 7f               16165		.byte	127
000028a7 6b446961674c6173 16166		.strz	"kDiagLastCoreStateIdx kDiagStateIdxMemDriverInitialized"
000028af 74436f7265537461
000028b7 7465496478206b44
000028bf 6961675374617465
000028c7 4964784d656d4472
000028cf 69766572496e6974
000028d7 69616c697a656400
000028df 01               16167		.byte	1
000028e0 8201             16168		.byte	130,1
000028e2 6b446961674e756d 16169		.strz	"kDiagNumberOfStates ( kDiagLastOemStateIdx + 1u )"
000028ea 6265724f66537461
000028f2 7465732028206b44
000028fa 6961674c6173744f
00002902 656d537461746549
0000290a 6478202b20317520
00002912 2900            

                                   Fri Apr 10 08:32:04 2020           Page 290
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
00002914 01               16170		.byte	1
00002915 8301             16171		.byte	131,1
00002917 6b446961674e756d 16172		.strz	"kDiagNumberOfDispatchStates kDiagNumberOfStates"
0000291f 6265724f66446973
00002927 7061746368537461
0000292f 746573206b446961
00002937 674e756d6265724f
0000293f 6653746174657300
00002947 01               16173		.byte	1
00002948 8701             16174		.byte	135,1
0000294a 4765744469616750 16175		.strz	"GetDiagProgrammingSession() GetDiagState( kDiagStateIdxSessionProgramming )"
00002952 726f6772616d6d69
0000295a 6e6753657373696f
00002962 6e28292047657444
0000296a 6961675374617465
00002972 28206b4469616753
0000297a 7461746549647853
00002982 657373696f6e5072
0000298a 6f6772616d6d696e
00002992 67202900        
00002996 01               16176		.byte	1
00002997 8801             16177		.byte	136,1
00002999 4765744469616745 16178		.strz	"GetDiagExtendedSession() GetDiagState( kDiagStateIdxSessionExtended )"
000029a1 7874656e64656453
000029a9 657373696f6e2829
000029b1 2047657444696167
000029b9 537461746528206b
000029c1 4469616753746174
000029c9 6549647853657373
000029d1 696f6e457874656e
000029d9 646564202900    
000029df 01               16179		.byte	1
000029e0 8901             16180		.byte	137,1
000029e2 4765744469616742 16181		.strz	"GetDiagBufferLocked() GetDiagState( kDiagStateIdxDiagBufferLocked )"
000029ea 75666665724c6f63
000029f2 6b65642829204765
000029fa 7444696167537461
00002a02 746528206b446961
00002a0a 6753746174654964
00002a12 7844696167427566
00002a1a 6665724c6f636b65
00002a22 64202900        
00002a26 01               16182		.byte	1
00002a27 8b01             16183		.byte	139,1
00002a29 4765745263725270 16184		.strz	"GetRcrRpAllowed() GetDiagState( kDiagStateIdxRcrRpAllowed )"
00002a31 416c6c6f77656428
00002a39 2920476574446961
00002a41 6753746174652820
00002a49 6b44696167537461
00002a51 7465496478526372
00002a59 5270416c6c6f7765
00002a61 64202900        
00002a65 01               16185		.byte	1
00002a66 8c01             16186		.byte	140,1
00002a68 4765745263725270 16187		.strz	"GetRcrRpInProgress() GetDiagState( kDiagStateIdxRcrRpInProgress )"
00002a70 496e50726f677265
00002a78 7373282920476574
00002a80 4469616753746174
00002a88 6528206b44696167
00002a90 5374617465496478
00002a98 5263725270496e50
00002aa0 726f677265737320
00002aa8 2900            
00002aaa 01               16188		.byte	1
00002aab 8f01             16189		.byte	143,1
00002aad 4765745365727669 16190		.strz	"GetServiceHasSubfunction() GetDiagState( kDiagStateIdxServiceHasSubfunction )"
00002ab5 6365486173537562
00002abd 66756e6374696f6e
00002ac5 2829204765744469
00002acd 6167537461746528
00002ad5 206b446961675374
00002add 6174654964785365
00002ae5 7276696365486173
00002aed 53756266756e6374
00002af5 696f6e202900    
00002afb 01               16191		.byte	1
00002afc 9101             16192		.byte	145,1
00002afe 47657446756e6374 16193		.strz	"GetFunctionalRequest() GetDiagState( kDiagStateIdxFunctionalRequest )"
00002b06 696f6e616c526571
00002b0e 7565737428292047
00002b16 6574446961675374
00002b1e 61746528206b4469
00002b26 6167537461746549
00002b2e 647846756e637469
00002b36 6f6e616c52657175
00002b3e 657374202900    
00002b44 01               16194		.byte	1
00002b45 9401             16195		.byte	148,1
00002b47 4765745761697445 16196		.strz	"GetWaitEcuReset() GetDiagState( kDiagStateIdxWaitEcuReset )"
00002b4f 6375526573657428
00002b57 2920476574446961
00002b5f 6753746174652820
00002b67 6b44696167537461
00002b6f 7465496478576169
00002b77 7445637552657365
00002b7f 74202900        
00002b83 01               16197		.byte	1
00002b84 9501             16198		.byte	149,1
00002b86 4765744563755265 16199		.strz	"GetEcuResetFctFinished() GetDiagState( kDiagStateIdxEcuResetFctFinished )"
00002b8e 7365744663744669
00002b96 6e69736865642829
00002b9e 2047657444696167
00002ba6 537461746528206b
00002bae 4469616753746174
00002bb6 6549647845637552
00002bbe 6573657446637446
00002bc6 696e697368656420
00002bce 2900            
00002bd0 01               16200		.byte	1
00002bd1 9601             16201		.byte	150,1
00002bd3 4765745265736574 16202		.strz	"GetResetMsgConfirmed() GetDiagState( kDiagStateIdxResetMsgConfirmed )"
00002bdb 4d7367436f6e6669
00002be3 726d656428292047
00002beb 6574446961675374
00002bf3 61746528206b4469
00002bfb 6167537461746549
00002c03 647852657365744d
00002c0b 7367436f6e666972
00002c13 6d6564202900    
00002c19 01               16203		.byte	1
00002c1a 9901             16204		.byte	153,1
00002c1c 4765744d656d4472 16205		.strz	"GetMemDriverInitialized() GetDiagState( kDiagStateIdxMemDriverInitialized )"
00002c24 69766572496e6974
00002c2c 69616c697a656428
00002c34 2920476574446961
00002c3c 6753746174652820
00002c44 6b44696167537461
00002c4c 74654964784d656d
00002c54 447269766572496e
00002c5c 697469616c697a65
00002c64 64202900        
00002c68 01               16206		.byte	1
00002c69 c801             16207		.byte	200,1
00002c6b 46424c5f44494147 16208		.strz	"FBL_DIAG_STATECHECK_ARRAYSIZE (((kDiagNumberOfDispatchStates - 1u) / FBL_STATE_BITS) + 1u)"
00002c73 5f53544154454348
00002c7b 45434b5f41525241
00002c83 5953495a45202828
00002c8b 286b446961674e75
00002c93 6d6265724f664469
00002c9b 7370617463685374
00002ca3 61746573202d2031
00002cab 7529202f2046424c
00002cb3 5f53544154455f42
00002cbb 49545329202b2031
00002cc3 752900          
00002cc6 01               16209		.byte	1
00002cc7 cb01             16210		.byte	203,1
00002cc9 4765744469616753 16211		.strz	"GetDiagState(state) FBL_STATE_TEST(fblDiagStates, (state))"
00002cd1 7461746528737461
00002cd9 7465292046424c5f
00002ce1 53544154455f5445
00002ce9 53542866626c4469
00002cf1 6167537461746573
00002cf9 2c20287374617465
00002d01 292900          
00002d04 01               16212		.byte	1
00002d05 ea01             16213		.byte	234,1
00002d07 6b44696167537461 16214		.strz	"kDiagStateMask(state) FBL_STATE_MASKLONG(state)"
00002d0f 74654d61736b2873
00002d17 7461746529204642
00002d1f 4c5f53544154455f
00002d27 4d41534b4c4f4e47
00002d2f 2873746174652900
00002d37 01               16215		.byte	1
00002d38 ec01             16216		.byte	236,1
00002d3a 5365744469616753 16217		.strz	"SetDiagState(state) FBL_STATE_SET(fblDiagStates, state)"
00002d42 7461746528737461
00002d4a 7465292046424c5f
00002d52 53544154455f5345
00002d5a 542866626c446961
00002d62 675374617465732c
00002d6a 2073746174652900
00002d72 01               16218		.byte	1
00002d73 ed01             16219		.byte	237,1
00002d75 436c724469616753 16220		.strz	"ClrDiagState(state) FBL_STATE_CLR(fblDiagStates, state)"
00002d7d 7461746528737461
00002d85 7465292046424c5f
00002d8d 53544154455f434c
00002d95 522866626c446961
00002d9d 675374617465732c
00002da5 2073746174652900
00002dad 01               16221		.byte	1
00002dae f501             16222		.byte	245,1
00002db0 6b44696167536964 16223		.strz	"kDiagSidDiagnosticSessionControl 0x10u"
00002db8 446961676e6f7374
00002dc0 696353657373696f
00002dc8 6e436f6e74726f6c
00002dd0 20307831307500  
00002dd7 01               16224		.byte	1
00002dd8 fd01             16225		.byte	253,1

                                   Fri Apr 10 08:32:04 2020           Page 291
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
00002dda 6b44696167536964 16226		.strz	"kDiagSidRoutineControl 0x31u"
00002de2 526f7574696e6543
00002dea 6f6e74726f6c2030
00002df2 7833317500      
00002df7 01               16227		.byte	1
00002df8 8102             16228		.byte	129,2
00002dfa 6b44696167536964 16229		.strz	"kDiagSidTesterPresent 0x3Eu"
00002e02 5465737465725072
00002e0a 6573656e74203078
00002e12 33457500        
00002e16 01               16230		.byte	1
00002e17 8602             16231		.byte	134,2
00002e19 6b44696167526964 16232		.strz	"kDiagRidNegativeResponse 0x7Fu"
00002e21 4e65676174697665
00002e29 526573706f6e7365
00002e31 20307837467500  
00002e38 01               16233		.byte	1
00002e39 8902             16234		.byte	137,2
00002e3b 6b44696167537570 16235		.strz	"kDiagSuppressPosRspMsgIndicationBit 0x80u"
00002e43 7072657373506f73
00002e4b 5273704d7367496e
00002e53 6469636174696f6e
00002e5b 4269742030783830
00002e63 7500            
00002e65 01               16236		.byte	1
00002e66 8d02             16237		.byte	141,2
00002e68 6b44696167537562 16238		.strz	"kDiagSubProgrammingSession 0x02u"
00002e70 50726f6772616d6d
00002e78 696e675365737369
00002e80 6f6e203078303275
00002e88 00              
00002e89 01               16239		.byte	1
00002e8a ae02             16240		.byte	174,2
00002e8c 6b44696167457272 16241		.strz	"kDiagErrorNone 0x00u"
00002e94 6f724e6f6e652030
00002e9c 7830307500      
00002ea1 01               16242		.byte	1
00002ea2 af02             16243		.byte	175,2
00002ea4 6b446961674e7263 16244		.strz	"kDiagNrcGeneralReject 0x10u"
00002eac 47656e6572616c52
00002eb4 656a656374203078
00002ebc 31307500        
00002ec0 01               16245		.byte	1
00002ec1 b002             16246		.byte	176,2
00002ec3 6b446961674e7263 16247		.strz	"kDiagNrcServiceNotSupported 0x11u"
00002ecb 536572766963654e
00002ed3 6f74537570706f72
00002edb 7465642030783131
00002ee3 7500            
00002ee5 01               16248		.byte	1
00002ee6 b102             16249		.byte	177,2
00002ee8 6b446961674e7263 16250		.strz	"kDiagNrcSubFunctionNotSupported 0x12u"
00002ef0 53756246756e6374
00002ef8 696f6e4e6f745375
00002f00 70706f7274656420
00002f08 307831327500    
00002f0e 01               16251		.byte	1
00002f0f b502             16252		.byte	181,2
00002f11 6b446961674e7263 16253		.strz	"kDiagNrcConditionsNotCorrect 0x22u"
00002f19 436f6e646974696f
00002f21 6e734e6f74436f72
00002f29 7265637420307832
00002f31 327500          
00002f34 01               16254		.byte	1
00002f35 b602             16255		.byte	182,2
00002f37 6b446961674e7263 16256		.strz	"kDiagNrcRequestSequenceError 0x24u"
00002f3f 5265717565737453
00002f47 657175656e636545
00002f4f 72726f7220307832
00002f57 347500          
00002f5a 01               16257		.byte	1
00002f5b b702             16258		.byte	183,2
00002f5d 6b446961674e7263 16259		.strz	"kDiagNrcRequestOutOfRange 0x31u"
00002f65 526571756573744f
00002f6d 75744f6652616e67
00002f75 6520307833317500
00002f7d 01               16260		.byte	1
00002f7e bc02             16261		.byte	188,2
00002f80 6b446961674e7263 16262		.strz	"kDiagNrcUploadDownloadNotAccepted 0x70u"
00002f88 55706c6f6164446f
00002f90 776e6c6f61644e6f
00002f98 7441636365707465
00002fa0 6420307837307500
00002fa8 01               16263		.byte	1
00002fa9 bd02             16264		.byte	189,2
00002fab 6b446961674e7263 16265		.strz	"kDiagNrcTransferDataSuspended 0x71u"
00002fb3 5472616e73666572
00002fbb 4461746153757370
00002fc3 656e646564203078
00002fcb 37317500        
00002fcf 01               16266		.byte	1
00002fd0 be02             16267		.byte	190,2
00002fd2 6b446961674e7263 16268		.strz	"kDiagNrcGeneralProgrammingFailure 0x72u"
00002fda 47656e6572616c50
00002fe2 726f6772616d6d69
00002fea 6e674661696c7572
00002ff2 6520307837327500
00002ffa 01               16269		.byte	1
00002ffb c102             16270		.byte	193,2
00002ffd 6b446961674e7263 16271		.strz	"kDiagNrcRcrResponsePending 0x78u"
00003005 526372526573706f
0000300d 6e736550656e6469
00003015 6e67203078373875
0000301d 00              
0000301e 01               16272		.byte	1
0000301f fd02             16273		.byte	253,2
00003021 6b4e6f74466f7263 16274		.strz	"kNotForceSendResponsePending 0x00u"
00003029 6553656e64526573
00003031 706f6e736550656e
00003039 64696e6720307830
00003041 307500          
00003044 01               16275		.byte	1
00003045 fe02             16276		.byte	254,2
00003047 6b466f7263655365 16277		.strz	"kForceSendResponsePending 0x01u"
0000304f 6e64526573706f6e
00003057 736550656e64696e
0000305f 6720307830317500
00003067 01               16278		.byte	1
00003068 ff02             16279		.byte	255,2
0000306a 6b466f7263655365 16280		.strz	"kForceSendRpIfNotInProgress 0x02u"
00003072 6e64527049664e6f
0000307a 74496e50726f6772
00003082 6573732030783032
0000308a 7500            
0000308c 01               16281		.byte	1

                                   Fri Apr 10 08:32:04 2020           Page 292
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
0000308d 9003             16282		.byte	144,3
0000308f 5445535445525f50 16283		.strz	"TESTER_PRESENT_TIMEOUT 5000u"
00003097 524553454e545f54
0000309f 494d454f55542035
000030a7 3030307500      
000030ac 01               16284		.byte	1
000030ad 9303             16285		.byte	147,3
000030af 54696d656f757454 16286		.strz	"TimeoutTesterValue() testerPresentTimeout"
000030b7 657374657256616c
000030bf 7565282920746573
000030c7 7465725072657365
000030cf 6e7454696d656f75
000030d7 7400            
000030d9 01               16287		.byte	1
000030da 9403             16288		.byte	148,3
000030dc 44656354696d656f 16289		.strz	"DecTimeoutTesterValue() ( testerPresentTimeout-- )"
000030e4 7574546573746572
000030ec 56616c7565282920
000030f4 2820746573746572
000030fc 50726573656e7454
00003104 696d656f75742d2d
0000310c 202900          
0000310f 01               16290		.byte	1
00003110 9503             16291		.byte	149,3
00003112 5265736574546573 16292		.strz	"ResetTesterTimeout() ( testerPresentTimeout = (vuint16)( TESTER_PRESENT_TIMEOUT / kDiagCallCycle ))"
0000311a 74657254696d656f
00003122 7574282920282074
0000312a 6573746572507265
00003132 73656e7454696d65
0000313a 6f7574203d202876
00003142 75696e7431362928
0000314a 205445535445525f
00003152 50524553454e545f
0000315a 54494d454f555420
00003162 2f206b4469616743
0000316a 616c6c4379636c65
00003172 20292900        
00003176 01               16293		.byte	1
00003177 9603             16294		.byte	150,3
00003179 53746f7054657374 16295		.strz	"StopTesterTimeout() ( testerPresentTimeout = 0u )"
00003181 657254696d656f75
00003189 7428292028207465
00003191 7374657250726573
00003199 656e7454696d656f
000031a1 7574203d20307520
000031a9 2900            
000031ab 01               16296		.byte	1
000031ac 9a03             16297		.byte	154,3
000031ae 6b46626c536c6565 16298		.strz	"kFblSleepDelayTime ((vuint32)( FBL_SLEEP_TIME / FBL_REPEAT_CALL_CYCLE ))"
000031b6 7044656c61795469
000031be 6d65202828767569
000031c6 6e74333229282046
000031ce 424c5f534c454550
000031d6 5f54494d45202f20
000031de 46424c5f52455045
000031e6 41545f43414c4c5f
000031ee 4359434c45202929
000031f6 00              
000031f7 01               16299		.byte	1
000031f8 9b03             16300		.byte	155,3
000031fa 46626c536c656570 16301		.strz	"FblSleepCounterClear() ( sleepCounter = 0x00u )"
00003202 436f756e74657243
0000320a 6c65617228292028
00003212 20736c656570436f
0000321a 756e746572203d20
00003222 3078303075202900
0000322a 01               16302		.byte	1
0000322b 9c03             16303		.byte	156,3
0000322d 46626c536c656570 16304		.strz	"FblSleepCounterReload() ( sleepCounter = kFblSleepDelayTime )"
00003235 436f756e74657252
0000323d 656c6f6164282920
00003245 2820736c65657043
0000324d 6f756e746572203d
00003255 206b46626c536c65
0000325d 657044656c617954
00003265 696d65202900    
0000326b 01               16305		.byte	1
0000326c 9d03             16306		.byte	157,3
0000326e 46626c446563536c 16307		.strz	"FblDecSleepCounter() ( sleepCounter-- )"
00003276 656570436f756e74
0000327e 6572282920282073
00003286 6c656570436f756e
0000328e 7465722d2d202900
00003296 01               16308		.byte	1
00003297 9e03             16309		.byte	158,3
00003299 46626c476574536c 16310		.strz	"FblGetSleepCounter() ((vuint32) sleepCounter )"
000032a1 656570436f756e74
000032a9 6572282920282876
000032b1 75696e7433322920
000032b9 736c656570436f75
000032c1 6e746572202900  
000032c8 01               16311		.byte	1
000032c9 cf03             16312		.byte	207,3
000032cb 46424c444941475f 16313		.strz	"FBLDIAG_RAMCODE_START_SEC_CODE "
000032d3 52414d434f44455f
000032db 53544152545f5345
000032e3 435f434f44452000
000032eb 03               16314		.byte	3
000032ec d003             16315		.byte	208,3
000032ee 18               16316		.byte	24
000032ef 01               16317		.byte	1
000032f0 2b               16318		.byte	43
000032f1 46424c5f4d454d4d 16319		.strz	"FBL_MEMMAP_ERROR "
000032f9 41505f4552524f52
00003301 2000            
00003303 04               16320		.byte	4
00003304 01               16321		.byte	1
00003305 dc03             16322		.byte	220,3
00003307 46424c444941475f 16323		.strz	"FBLDIAG_RAMCODE_STOP_SEC_CODE "
0000330f 52414d434f44455f
00003317 53544f505f534543
0000331f 5f434f44452000  
00003326 03               16324		.byte	3
00003327 dd03             16325		.byte	221,3
00003329 18               16326		.byte	24
0000332a 01               16327		.byte	1
0000332b 2b               16328		.byte	43
0000332c 46424c5f4d454d4d 16329		.strz	"FBL_MEMMAP_ERROR "
00003334 41505f4552524f52
0000333c 2000            
0000333e 04               16330		.byte	4
0000333f 04               16331		.byte	4
00003340 03               16332		.byte	3
00003341 a301             16333		.byte	163,1
00003343 2f               16334		.byte	47
00003344 03               16335		.byte	3
00003345 b201             16336		.byte	178,1
00003347 30               16337		.byte	48

                                   Fri Apr 10 08:32:04 2020           Page 293
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
00003348 01               16338		.byte	1
00003349 79               16339		.byte	121
0000334a 46424c5f4d454d5f 16340		.strz	"FBL_MEM_BUFFER_SIZE FBL_DIAG_BUFFER_LENGTH"
00003352 4255464645525f53
0000335a 495a452046424c5f
00003362 444941475f425546
0000336a 4645525f4c454e47
00003372 544800          
00003375 01               16341		.byte	1
00003376 7b               16342		.byte	123
00003377 46424c5f4d454d5f 16343		.strz	"FBL_MEM_DEFAULT_PREAMBLE_LENGTH 2u"
0000337f 44454641554c545f
00003387 505245414d424c45
0000338f 5f4c454e47544820
00003397 327500          
0000339a 01               16344		.byte	1
0000339b 7d               16345		.byte	125
0000339c 46424c5f4d454d5f 16346		.strz	"FBL_MEM_MAX_PREAMBLE_LENGTH 2u"
000033a4 4d41585f50524541
000033ac 4d424c455f4c454e
000033b4 47544820327500  
000033bb 01               16347		.byte	1
000033bc ad01             16348		.byte	173,1
000033be 5f5f4170706c4662 16349		.strz	"__ApplFblMemPreWrite() FblDiagMemPreWrite()"
000033c6 6c4d656d50726557
000033ce 7269746528292046
000033d6 626c446961674d65
000033de 6d50726557726974
000033e6 65282900        
000033ea 01               16350		.byte	1
000033eb ae01             16351		.byte	174,1
000033ed 5f5f4170706c4662 16352		.strz	"__ApplFblMemPostWrite() FblDiagMemPostWrite()"
000033f5 6c4d656d506f7374
000033fd 5772697465282920
00003405 46626c446961674d
0000340d 656d506f73745772
00003415 697465282900    
0000341b 01               16353		.byte	1
0000341c b301             16354		.byte	179,1
0000341e 5f5f4170706c4662 16355		.strz	"__ApplFblMemPreErase() FblDiagMemPreWrite()"
00003426 6c4d656d50726545
0000342e 7261736528292046
00003436 626c446961674d65
0000343e 6d50726557726974
00003446 65282900        
0000344a 01               16356		.byte	1
0000344b b401             16357		.byte	180,1
0000344d 5f5f4170706c4662 16358		.strz	"__ApplFblMemPostErase() FblDiagMemPostWrite()"
00003455 6c4d656d506f7374
0000345d 4572617365282920
00003465 46626c446961674d
0000346d 656d506f73745772
00003475 697465282900    
0000347b 01               16359		.byte	1
0000347c bd01             16360		.byte	189,1
0000347e 46424c5f4d454d5f 16361		.strz	"FBL_MEM_WD_TRIGGER_DEFAULT (FBL_NO_TRIGGER)"
00003486 57445f5452494747
0000348e 45525f4445464155
00003496 4c54202846424c5f
0000349e 4e4f5f5452494747
000034a6 45522900        
000034aa 01               16362		.byte	1
000034ab c201             16363		.byte	194,1
000034ad 46424c5f4d454d5f 16364		.strz	"FBL_MEM_TRIGGER_STATUS_OVERWRITE vuint8"
000034b5 545249474745525f
000034bd 5354415455535f4f
000034c5 5645525752495445
000034cd 207675696e743800
000034d5 01               16365		.byte	1
000034d6 e601             16366		.byte	230,1
000034d8 46424c5f4d454d5f 16367		.strz	"FBL_MEM_ENABLE_STATUS_OVERWRITE "
000034e0 454e41424c455f53
000034e8 54415455535f4f56
000034f0 4552575249544520
000034f8 00              
000034f9 01               16368		.byte	1
000034fa ef01             16369		.byte	239,1
000034fc 46424c5f4d454d5f 16370		.strz	"FBL_MEM_STATUS_Ok kDiagErrorNone"
00003504 5354415455535f4f
0000350c 6b206b4469616745
00003514 72726f724e6f6e65
0000351c 00              
0000351d 01               16371		.byte	1
0000351e f001             16372		.byte	240,1
00003520 46424c5f4d454d5f 16373		.strz	"FBL_MEM_STATUS_Failed kDiagNrcConditionsNotCorrect"
00003528 5354415455535f46
00003530 61696c6564206b44
00003538 6961674e7263436f
00003540 6e646974696f6e73
00003548 4e6f74436f727265
00003550 637400          
00003553 01               16374		.byte	1
00003554 f201             16375		.byte	242,1
00003556 46424c5f4d454d5f 16376		.strz	"FBL_MEM_STATUS_BlockEraseSequence kDiagNrcRequestSequenceError"
0000355e 5354415455535f42
00003566 6c6f636b45726173
0000356e 6553657175656e63
00003576 65206b446961674e
0000357e 7263526571756573
00003586 7453657175656e63
0000358e 654572726f7200  
00003595 01               16377		.byte	1
00003596 f401             16378		.byte	244,1
00003598 46424c5f4d454d5f 16379		.strz	"FBL_MEM_STATUS_BlockStartSequence kDiagNrcRequestSequenceError"
000035a0 5354415455535f42
000035a8 6c6f636b53746172
000035b0 7453657175656e63
000035b8 65206b446961674e
000035c0 7263526571756573
000035c8 7453657175656e63
000035d0 654572726f7200  
000035d7 01               16380		.byte	1
000035d8 f501             16381		.byte	245,1
000035da 46424c5f4d454d5f 16382		.strz	"FBL_MEM_STATUS_BlockStartParam kDiagNrcConditionsNotCorrect"
000035e2 5354415455535f42
000035ea 6c6f636b53746172
000035f2 74506172616d206b
000035fa 446961674e726343
00003602 6f6e646974696f6e
0000360a 734e6f74436f7272
00003612 65637400        
00003616 01               16383		.byte	1
00003617 f701             16384		.byte	247,1
00003619 46424c5f4d454d5f 16385		.strz	"FBL_MEM_STATUS_BlockEndSequence kDiagNrcRequestSequenceError"
00003621 5354415455535f42
00003629 6c6f636b456e6453
00003631 657175656e636520
00003639 6b446961674e7263
00003641 5265717565737453
00003649 657175656e636545
00003651 72726f7200      
00003656 01               16386		.byte	1
00003657 f801             16387		.byte	248,1
00003659 46424c5f4d454d5f 16388		.strz	"FBL_MEM_STATUS_BlockEndVerifyFinalize kDiagNrcGeneralProgrammingFailure"
00003661 5354415455535f42
00003669 6c6f636b456e6456
00003671 657269667946696e
00003679 616c697a65206b44
00003681 6961674e72634765
00003689 6e6572616c50726f
00003691 6772616d6d696e67
00003699 4661696c75726500
000036a1 01               16389		.byte	1
000036a2 fa01             16390		.byte	250,1
000036a4 46424c5f4d454d5f 16391		.strz	"FBL_MEM_STATUS_BlockVerifySequence kDiagNrcRequestSequenceError"
000036ac 5354415455535f42
000036b4 6c6f636b56657269
000036bc 667953657175656e
000036c4 6365206b44696167
000036cc 4e72635265717565
000036d4 737453657175656e
000036dc 63654572726f7200
000036e4 01               16392		.byte	1
000036e5 fb01             16393		.byte	251,1

                                   Fri Apr 10 08:32:04 2020           Page 294
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
000036e7 46424c5f4d454d5f 16394		.strz	"FBL_MEM_STATUS_BlockVerifyInputVerify kDiagNrcGeneralReject"
000036ef 5354415455535f42
000036f7 6c6f636b56657269
000036ff 6679496e70757456
00003707 6572696679206b44
0000370f 6961674e72634765
00003717 6e6572616c52656a
0000371f 65637400        
00003723 01               16395		.byte	1
00003724 fc01             16396		.byte	252,1
00003726 46424c5f4d454d5f 16397		.strz	"FBL_MEM_STATUS_BlockVerifyProcessedVerify kDiagNrcGeneralReject"
0000372e 5354415455535f42
00003736 6c6f636b56657269
0000373e 667950726f636573
00003746 7365645665726966
0000374e 79206b446961674e
00003756 726347656e657261
0000375e 6c52656a65637400
00003766 01               16398		.byte	1
00003767 fd01             16399		.byte	253,1
00003769 46424c5f4d454d5f 16400		.strz	"FBL_MEM_STATUS_BlockVerifyPipeVerify kDiagNrcGeneralReject"
00003771 5354415455535f42
00003779 6c6f636b56657269
00003781 6679506970655665
00003789 72696679206b4469
00003791 61674e726347656e
00003799 6572616c52656a65
000037a1 637400          
000037a4 01               16401		.byte	1
000037a5 fe01             16402		.byte	254,1
000037a7 46424c5f4d454d5f 16403		.strz	"FBL_MEM_STATUS_BlockVerifyOutputVerify kDiagNrcGeneralReject"
000037af 5354415455535f42
000037b7 6c6f636b56657269
000037bf 66794f7574707574
000037c7 566572696679206b
000037cf 446961674e726347
000037d7 656e6572616c5265
000037df 6a65637400      
000037e4 01               16404		.byte	1
000037e5 8002             16405		.byte	128,2
000037e7 46424c5f4d454d5f 16406		.strz	"FBL_MEM_STATUS_SegmentStartSequence kDiagNrcRequestSequenceError"
000037ef 5354415455535f53
000037f7 65676d656e745374
000037ff 6172745365717565
00003807 6e6365206b446961
0000380f 674e726352657175
00003817 6573745365717565
0000381f 6e63654572726f72
00003827 00              
00003828 01               16407		.byte	1
00003829 8102             16408		.byte	129,2
0000382b 46424c5f4d454d5f 16409		.strz	"FBL_MEM_STATUS_SegmentStartDataProcInit kDiagNrcUploadDownloadNotAccepted"
00003833 5354415455535f53
0000383b 65676d656e745374
00003843 6172744461746150
0000384b 726f63496e697420
00003853 6b446961674e7263
0000385b 55706c6f6164446f
00003863 776e6c6f61644e6f
0000386b 7441636365707465
00003873 6400            
00003875 01               16410		.byte	1
00003876 8202             16411		.byte	130,2
00003878 46424c5f4d454d5f 16412		.strz	"FBL_MEM_STATUS_SegmentStartStreamOutInit kDiagNrcUploadDownloadNotAccepted"
00003880 5354415455535f53
00003888 65676d656e745374
00003890 6172745374726561
00003898 6d4f7574496e6974
000038a0 206b446961674e72
000038a8 6355706c6f616444
000038b0 6f776e6c6f61644e
000038b8 6f74416363657074
000038c0 656400          
000038c3 01               16413		.byte	1
000038c4 8302             16414		.byte	131,2
000038c6 46424c5f4d454d5f 16415		.strz	"FBL_MEM_STATUS_SegmentStartVerifyInit kDiagNrcConditionsNotCorrect"
000038ce 5354415455535f53
000038d6 65676d656e745374
000038de 6172745665726966
000038e6 79496e6974206b44
000038ee 6961674e7263436f
000038f6 6e646974696f6e73
000038fe 4e6f74436f727265
00003906 637400          
00003909 01               16416		.byte	1
0000390a 8402             16417		.byte	132,2
0000390c 46424c5f4d454d5f 16418		.strz	"FBL_MEM_STATUS_SegmentStartVerifyCompute kDiagNrcGeneralProgrammingFailure"
00003914 5354415455535f53
0000391c 65676d656e745374
00003924 6172745665726966
0000392c 79436f6d70757465
00003934 206b446961674e72
0000393c 6347656e6572616c
00003944 50726f6772616d6d
0000394c 696e674661696c75
00003954 726500          
00003957 01               16419		.byte	1
00003958 8502             16420		.byte	133,2
0000395a 46424c5f4d454d5f 16421		.strz	"FBL_MEM_STATUS_SegmentStartSegmentCount kDiagNrcRequestOutOfRange"
00003962 5354415455535f53
0000396a 65676d656e745374
00003972 6172745365676d65
0000397a 6e74436f756e7420
00003982 6b446961674e7263
0000398a 526571756573744f
00003992 75744f6652616e67
0000399a 6500            
0000399c 01               16422		.byte	1
0000399d 8702             16423		.byte	135,2
0000399f 46424c5f4d454d5f 16424		.strz	"FBL_MEM_STATUS_SegmentEndSequence kDiagNrcRequestSequenceError"
000039a7 5354415455535f53
000039af 65676d656e74456e
000039b7 6453657175656e63
000039bf 65206b446961674e
000039c7 7263526571756573
000039cf 7453657175656e63
000039d7 654572726f7200  
000039de 01               16425		.byte	1
000039df 8802             16426		.byte	136,2
000039e1 46424c5f4d454d5f 16427		.strz	"FBL_MEM_STATUS_SegmentEndInsufficientData kDiagNrcRequestSequenceError"
000039e9 5354415455535f53
000039f1 65676d656e74456e
000039f9 64496e7375666669
00003a01 6369656e74446174
00003a09 61206b446961674e
00003a11 7263526571756573
00003a19 7453657175656e63
00003a21 654572726f7200  
00003a28 01               16428		.byte	1
00003a29 8902             16429		.byte	137,2
00003a2b 46424c5f4d454d5f 16430		.strz	"FBL_MEM_STATUS_SegmentEndPost kDiagNrcConditionsNotCorrect"
00003a33 5354415455535f53
00003a3b 65676d656e74456e
00003a43 64506f7374206b44
00003a4b 6961674e7263436f
00003a53 6e646974696f6e73
00003a5b 4e6f74436f727265
00003a63 637400          
00003a66 01               16431		.byte	1
00003a67 8b02             16432		.byte	139,2
00003a69 46424c5f4d454d5f 16433		.strz	"FBL_MEM_STATUS_DataIndSequence kDiagNrcRequestSequenceError"
00003a71 5354415455535f44
00003a79 617461496e645365
00003a81 7175656e6365206b
00003a89 446961674e726352
00003a91 6571756573745365
00003a99 7175656e63654572
00003aa1 726f7200        
00003aa5 01               16434		.byte	1
00003aa6 8c02             16435		.byte	140,2
00003aa8 46424c5f4d454d5f 16436		.strz	"FBL_MEM_STATUS_DataIndParam kDiagNrcGeneralProgrammingFailure"
00003ab0 5354415455535f44
00003ab8 617461496e645061
00003ac0 72616d206b446961
00003ac8 674e726347656e65
00003ad0 72616c50726f6772
00003ad8 616d6d696e674661
00003ae0 696c75726500    
00003ae6 01               16437		.byte	1
00003ae7 8d02             16438		.byte	141,2
00003ae9 46424c5f4d454d5f 16439		.strz	"FBL_MEM_STATUS_DataIndOverflow kDiagNrcTransferDataSuspended"
00003af1 5354415455535f44
00003af9 617461496e644f76
00003b01 6572666c6f77206b
00003b09 446961674e726354
00003b11 72616e7366657244
00003b19 6174615375737065
00003b21 6e64656400      
00003b26 01               16440		.byte	1
00003b27 8f02             16441		.byte	143,2
00003b29 46424c5f4d454d5f 16442		.strz	"FBL_MEM_STATUS_DataProc kDiagNrcGeneralProgrammingFailure"
00003b31 5354415455535f44
00003b39 61746150726f6320
00003b41 6b446961674e7263
00003b49 47656e6572616c50
00003b51 726f6772616d6d69
00003b59 6e674661696c7572
00003b61 6500            
00003b63 01               16443		.byte	1
00003b64 9002             16444		.byte	144,2
00003b66 46424c5f4d454d5f 16445		.strz	"FBL_MEM_STATUS_DataProcConsume kDiagNrcGeneralProgrammingFailure"
00003b6e 5354415455535f44
00003b76 61746150726f6343
00003b7e 6f6e73756d65206b
00003b86 446961674e726347
00003b8e 656e6572616c5072
00003b96 6f6772616d6d696e
00003b9e 674661696c757265
00003ba6 00              
00003ba7 01               16446		.byte	1
00003ba8 9102             16447		.byte	145,2
00003baa 46424c5f4d454d5f 16448		.strz	"FBL_MEM_STATUS_DataProcDeinit kDiagNrcConditionsNotCorrect"
00003bb2 5354415455535f44
00003bba 61746150726f6344
00003bc2 65696e6974206b44
00003bca 6961674e7263436f
00003bd2 6e646974696f6e73
00003bda 4e6f74436f727265
00003be2 637400          
00003be5 01               16449		.byte	1

                                   Fri Apr 10 08:32:04 2020           Page 295
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
00003be6 9302             16450		.byte	147,2
00003be8 46424c5f4d454d5f 16451		.strz	"FBL_MEM_STATUS_StreamOutput kDiagNrcGeneralProgrammingFailure"
00003bf0 5354415455535f53
00003bf8 747265616d4f7574
00003c00 707574206b446961
00003c08 674e726347656e65
00003c10 72616c50726f6772
00003c18 616d6d696e674661
00003c20 696c75726500    
00003c26 01               16452		.byte	1
00003c27 9402             16453		.byte	148,2
00003c29 46424c5f4d454d5f 16454		.strz	"FBL_MEM_STATUS_StreamOutputConsume kDiagNrcGeneralProgrammingFailure"
00003c31 5354415455535f53
00003c39 747265616d4f7574
00003c41 707574436f6e7375
00003c49 6d65206b44696167
00003c51 4e726347656e6572
00003c59 616c50726f677261
00003c61 6d6d696e67466169
00003c69 6c75726500      
00003c6e 01               16455		.byte	1
00003c6f 9502             16456		.byte	149,2
00003c71 46424c5f4d454d5f 16457		.strz	"FBL_MEM_STATUS_StreamOutputOverflow kDiagNrcTransferDataSuspended"
00003c79 5354415455535f53
00003c81 747265616d4f7574
00003c89 7075744f76657266
00003c91 6c6f77206b446961
00003c99 674e72635472616e
00003ca1 7366657244617461
00003ca9 53757370656e6465
00003cb1 6400            
00003cb3 01               16458		.byte	1
00003cb4 9602             16459		.byte	150,2
00003cb6 46424c5f4d454d5f 16460		.strz	"FBL_MEM_STATUS_StreamOutputDeinit kDiagNrcConditionsNotCorrect"
00003cbe 5354415455535f53
00003cc6 747265616d4f7574
00003cce 7075744465696e69
00003cd6 74206b446961674e
00003cde 7263436f6e646974
00003ce6 696f6e734e6f7443
00003cee 6f727265637400  
00003cf5 01               16461		.byte	1
00003cf6 9802             16462		.byte	152,2
00003cf8 46424c5f4d454d5f 16463		.strz	"FBL_MEM_STATUS_DriverResumeWrite kDiagNrcGeneralProgrammingFailure"
00003d00 5354415455535f44
00003d08 7269766572526573
00003d10 756d655772697465
00003d18 206b446961674e72
00003d20 6347656e6572616c
00003d28 50726f6772616d6d
00003d30 696e674661696c75
00003d38 726500          
00003d3b 01               16464		.byte	1
00003d3c 9902             16465		.byte	153,2
00003d3e 46424c5f4d454d5f 16466		.strz	"FBL_MEM_STATUS_DriverWrite kDiagNrcGeneralProgrammingFailure"
00003d46 5354415455535f44
00003d4e 7269766572577269
00003d56 7465206b44696167
00003d5e 4e726347656e6572
00003d66 616c50726f677261
00003d6e 6d6d696e67466169
00003d76 6c75726500      
00003d7b 01               16467		.byte	1
00003d7c 9a02             16468		.byte	154,2
00003d7e 46424c5f4d454d5f 16469		.strz	"FBL_MEM_STATUS_DriverErase kDiagNrcGeneralProgrammingFailure"
00003d86 5354415455535f44
00003d8e 7269766572457261
00003d96 7365206b44696167
00003d9e 4e726347656e6572
00003da6 616c50726f677261
00003dae 6d6d696e67466169
00003db6 6c75726500      
00003dbb 01               16470		.byte	1
00003dbc 9b02             16471		.byte	155,2
00003dbe 46424c5f4d454d5f 16472		.strz	"FBL_MEM_STATUS_DriverRemainder kDiagNrcGeneralProgrammingFailure"
00003dc6 5354415455535f44
00003dce 726976657252656d
00003dd6 61696e646572206b
00003dde 446961674e726347
00003de6 656e6572616c5072
00003dee 6f6772616d6d696e
00003df6 674661696c757265
00003dfe 00              
00003dff 01               16473		.byte	1
00003e00 9c02             16474		.byte	156,2
00003e02 46424c5f4d454d5f 16475		.strz	"FBL_MEM_STATUS_DriverSuspendWrite kDiagNrcGeneralProgrammingFailure"
00003e0a 5354415455535f44
00003e12 7269766572537573
00003e1a 70656e6457726974
00003e22 65206b446961674e
00003e2a 726347656e657261
00003e32 6c50726f6772616d
00003e3a 6d696e674661696c
00003e42 75726500        
00003e46 01               16476		.byte	1
00003e47 9e02             16477		.byte	158,2
00003e49 46424c5f4d454d5f 16478		.strz	"FBL_MEM_STATUS_ProgramOverflow kDiagNrcTransferDataSuspended"
00003e51 5354415455535f50
00003e59 726f6772616d4f76
00003e61 6572666c6f77206b
00003e69 446961674e726354
00003e71 72616e7366657244
00003e79 6174615375737065
00003e81 6e64656400      
00003e86 01               16479		.byte	1
00003e87 9f02             16480		.byte	159,2
00003e89 46424c5f4d454d5f 16481		.strz	"FBL_MEM_STATUS_ProgramOutsideFbt kDiagNrcTransferDataSuspended"
00003e91 5354415455535f50
00003e99 726f6772616d4f75
00003ea1 7473696465466274
00003ea9 206b446961674e72
00003eb1 635472616e736665
00003eb9 7244617461537573
00003ec1 70656e64656400  
00003ec8 01               16482		.byte	1
00003ec9 a002             16483		.byte	160,2
00003ecb 46424c5f4d454d5f 16484		.strz	"FBL_MEM_STATUS_ProgramUnalignedAddress kDiagNrcGeneralProgrammingFailure"
00003ed3 5354415455535f50
00003edb 726f6772616d556e
00003ee3 616c69676e656441
00003eeb 646472657373206b
00003ef3 446961674e726347
00003efb 656e6572616c5072
00003f03 6f6772616d6d696e
00003f0b 674661696c757265
00003f13 00              
00003f14 01               16485		.byte	1
00003f15 a102             16486		.byte	161,2
00003f17 46424c5f4d454d5f 16487		.strz	"FBL_MEM_STATUS_ProgramDriverNotReady kDiagNrcRequestSequenceError"
00003f1f 5354415455535f50
00003f27 726f6772616d4472
00003f2f 697665724e6f7452
00003f37 65616479206b4469
00003f3f 61674e7263526571
00003f47 7565737453657175
00003f4f 656e63654572726f
00003f57 7200            
00003f59 01               16488		.byte	1
00003f5a a202             16489		.byte	162,2
00003f5c 46424c5f4d454d5f 16490		.strz	"FBL_MEM_STATUS_ProgramPreWrite kDiagNrcGeneralProgrammingFailure"
00003f64 5354415455535f50
00003f6c 726f6772616d5072
00003f74 655772697465206b
00003f7c 446961674e726347
00003f84 656e6572616c5072
00003f8c 6f6772616d6d696e
00003f94 674661696c757265
00003f9c 00              
00003f9d 01               16491		.byte	1
00003f9e a302             16492		.byte	163,2
00003fa0 46424c5f4d454d5f 16493		.strz	"FBL_MEM_STATUS_ProgramPostWrite kDiagNrcGeneralProgrammingFailure"
00003fa8 5354415455535f50
00003fb0 726f6772616d506f
00003fb8 7374577269746520
00003fc0 6b446961674e7263
00003fc8 47656e6572616c50
00003fd0 726f6772616d6d69
00003fd8 6e674661696c7572
00003fe0 6500            
00003fe2 01               16494		.byte	1
00003fe3 a502             16495		.byte	165,2
00003fe5 46424c5f4d454d5f 16496		.strz	"FBL_MEM_STATUS_EraseOutsideFbt kDiagNrcRequestOutOfRange"
00003fed 5354415455535f45
00003ff5 726173654f757473
00003ffd 696465466274206b
00004005 446961674e726352
0000400d 6571756573744f75
00004015 744f6652616e6765
0000401d 00              
0000401e 01               16497		.byte	1
0000401f a602             16498		.byte	166,2
00004021 46424c5f4d454d5f 16499		.strz	"FBL_MEM_STATUS_EraseDriverNotReady kDiagNrcConditionsNotCorrect"
00004029 5354415455535f45
00004031 7261736544726976
00004039 65724e6f74526561
00004041 6479206b44696167
00004049 4e7263436f6e6469
00004051 74696f6e734e6f74
00004059 436f727265637400
00004061 01               16500		.byte	1
00004062 a702             16501		.byte	167,2
00004064 46424c5f4d454d5f 16502		.strz	"FBL_MEM_STATUS_ErasePreErase kDiagNrcConditionsNotCorrect"
0000406c 5354415455535f45
00004074 7261736550726545
0000407c 72617365206b4469
00004084 61674e7263436f6e
0000408c 646974696f6e734e
00004094 6f74436f72726563
0000409c 7400            
0000409e 01               16503		.byte	1
0000409f a802             16504		.byte	168,2
000040a1 46424c5f4d454d5f 16505		.strz	"FBL_MEM_STATUS_ErasePostErase kDiagNrcConditionsNotCorrect"
000040a9 5354415455535f45
000040b1 72617365506f7374
000040b9 4572617365206b44
000040c1 6961674e7263436f
000040c9 6e646974696f6e73
000040d1 4e6f74436f727265
000040d9 637400          

                                   Fri Apr 10 08:32:04 2020           Page 296
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
000040dc 01               16506		.byte	1
000040dd aa02             16507		.byte	170,2
000040df 46424c5f4d454d5f 16508		.strz	"FBL_MEM_STATUS_VerifyCompute kDiagNrcGeneralProgrammingFailure"
000040e7 5354415455535f56
000040ef 6572696679436f6d
000040f7 70757465206b4469
000040ff 61674e726347656e
00004107 6572616c50726f67
0000410f 72616d6d696e6746
00004117 61696c75726500  
0000411e 01               16509		.byte	1
0000411f ab02             16510		.byte	171,2
00004121 46424c5f4d454d5f 16511		.strz	"FBL_MEM_STATUS_VerifyFinalize kDiagNrcGeneralProgrammingFailure"
00004129 5354415455535f56
00004131 657269667946696e
00004139 616c697a65206b44
00004141 6961674e72634765
00004149 6e6572616c50726f
00004151 6772616d6d696e67
00004159 4661696c75726500
00004161 01               16512		.byte	1
00004162 ad02             16513		.byte	173,2
00004164 46424c5f4d454d5f 16514		.strz	"FBL_MEM_STATUS_PassThroughLocal kDiagNrcConditionsNotCorrect"
0000416c 5354415455535f50
00004174 6173735468726f75
0000417c 67684c6f63616c20
00004184 6b446961674e7263
0000418c 436f6e646974696f
00004194 6e734e6f74436f72
0000419c 7265637400      
000041a1 01               16515		.byte	1
000041a2 ae02             16516		.byte	174,2
000041a4 46424c5f4d454d5f 16517		.strz	"FBL_MEM_STATUS_PassThroughRemote kDiagNrcConditionsNotCorrect"
000041ac 5354415455535f50
000041b4 6173735468726f75
000041bc 676852656d6f7465
000041c4 206b446961674e72
000041cc 63436f6e64697469
000041d4 6f6e734e6f74436f
000041dc 727265637400    
000041e2 01               16518		.byte	1
000041e3 b302             16519		.byte	179,2
000041e5 46424c5f4d454d5f 16520		.strz	"FBL_MEM_ENABLE_EXT_STATUS "
000041ed 454e41424c455f45
000041f5 58545f5354415455
000041fd 532000          
00004200 01               16521		.byte	1
00004201 b602             16522		.byte	182,2
00004203 46424c5f4d454d5f 16523		.strz	"FBL_MEM_EXT_STATUS_Ok(status) "
0000420b 4558545f53544154
00004213 55535f4f6b287374
0000421b 61747573292000  
00004222 01               16524		.byte	1
00004223 b702             16525		.byte	183,2
00004225 46424c5f4d454d5f 16526		.strz	"FBL_MEM_EXT_STATUS_Failed(status) "
0000422d 4558545f53544154
00004235 55535f4661696c65
0000423d 6428737461747573
00004245 292000          
00004248 04               16527		.byte	4
00004249 01               16528		.byte	1
0000424a e901             16529		.byte	233,1
0000424c 46424c5f4d454d5f 16530		.strz	"FBL_MEM_ENABLE_GAP_FILL "
00004254 454e41424c455f47
0000425c 41505f46494c4c20
00004264 00              
00004265 01               16531		.byte	1
00004266 f901             16532		.byte	249,1
00004268 46424c5f4d454d5f 16533		.strz	"FBL_MEM_ENABLE_SEGMENT_HANDLING "
00004270 454e41424c455f53
00004278 45474d454e545f48
00004280 414e444c494e4720
00004288 00              
00004289 01               16534		.byte	1
0000428a a902             16535		.byte	169,2
0000428c 46424c5f4d454d5f 16536		.strz	"FBL_MEM_STATUS_NAME(name) kFblMemStatus_ ## name"
00004294 5354415455535f4e
0000429c 414d45286e616d65
000042a4 29206b46626c4d65
000042ac 6d5374617475735f
000042b4 202323206e616d65
000042bc 00              
000042bd 01               16537		.byte	1
000042be aa02             16538		.byte	170,2
000042c0 46424c5f4d454d5f 16539		.strz	"FBL_MEM_STATUS_DEFINE(name) FBL_MEM_STATUS_ ## name"
000042c8 5354415455535f44
000042d0 4546494e45286e61
000042d8 6d65292046424c5f
000042e0 4d454d5f53544154
000042e8 55535f202323206e
000042f0 616d6500        
000042f4 01               16540		.byte	1
000042f5 ae02             16541		.byte	174,2
000042f7 46424c5f4d454d5f 16542		.strz	"FBL_MEM_STATUS_DEFINITION(name) FBL_MEM_STATUS_NAME(name) = FBL_MEM_STATUS_DEFINE(name)"
000042ff 5354415455535f44
00004307 4546494e4954494f
0000430f 4e286e616d652920
00004317 46424c5f4d454d5f
0000431f 5354415455535f4e
00004327 414d45286e616d65
0000432f 29203d2046424c5f
00004337 4d454d5f53544154
0000433f 55535f444546494e
00004347 45286e616d652900
0000434f 01               16543		.byte	1
00004350 e006             16544		.byte	224,6
00004352 46424c4c49425f4d 16545		.strz	"FBLLIB_MEM_RAMCODE_START_SEC_CODE_EXPORT "
0000435a 454d5f52414d434f
00004362 44455f5354415254
0000436a 5f5345435f434f44
00004372 455f4558504f5254
0000437a 2000            
0000437c 03               16546		.byte	3
0000437d e106             16547		.byte	225,6
0000437f 18               16548		.byte	24
00004380 01               16549		.byte	1
00004381 2b               16550		.byte	43
00004382 46424c5f4d454d4d 16551		.strz	"FBL_MEMMAP_ERROR "
0000438a 41505f4552524f52
00004392 2000            
00004394 04               16552		.byte	4
00004395 01               16553		.byte	1
00004396 e506             16554		.byte	229,6
00004398 46424c4c49425f4d 16555		.strz	"FBLLIB_MEM_RAMCODE_STOP_SEC_CODE_EXPORT "
000043a0 454d5f52414d434f
000043a8 44455f53544f505f
000043b0 5345435f434f4445
000043b8 5f4558504f525420
000043c0 00              
000043c1 03               16556		.byte	3
000043c2 e606             16557		.byte	230,6
000043c4 18               16558		.byte	24
000043c5 01               16559		.byte	1
000043c6 2b               16560		.byte	43
000043c7 46424c5f4d454d4d 16561		.strz	"FBL_MEMMAP_ERROR "
000043cf 41505f4552524f52
000043d7 2000            

                                   Fri Apr 10 08:32:04 2020           Page 297
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
000043d9 04               16562		.byte	4
000043da 01               16563		.byte	1
000043db f106             16564		.byte	241,6
000043dd 46424c4c49425f4d 16565		.strz	"FBLLIB_MEM_START_SEC_VAR_EXPORT "
000043e5 454d5f5354415254
000043ed 5f5345435f564152
000043f5 5f4558504f525420
000043fd 00              
000043fe 03               16566		.byte	3
000043ff f206             16567		.byte	242,6
00004401 18               16568		.byte	24
00004402 01               16569		.byte	1
00004403 2b               16570		.byte	43
00004404 46424c5f4d454d4d 16571		.strz	"FBL_MEMMAP_ERROR "
0000440c 41505f4552524f52
00004414 2000            
00004416 04               16572		.byte	4
00004417 01               16573		.byte	1
00004418 f606             16574		.byte	246,6
0000441a 46424c4c49425f4d 16575		.strz	"FBLLIB_MEM_STOP_SEC_VAR_EXPORT "
00004422 454d5f53544f505f
0000442a 5345435f5641525f
00004432 4558504f52542000
0000443a 03               16576		.byte	3
0000443b f706             16577		.byte	247,6
0000443d 18               16578		.byte	24
0000443e 01               16579		.byte	1
0000443f 2b               16580		.byte	43
00004440 46424c5f4d454d4d 16581		.strz	"FBL_MEMMAP_ERROR "
00004448 41505f4552524f52
00004450 2000            
00004452 04               16582		.byte	4
00004453 04               16583		.byte	4
00004454 03               16584		.byte	3
00004455 a901             16585		.byte	169,1
00004457 31               16586		.byte	49
00004458 01               16587		.byte	1
00004459 ac02             16588		.byte	172,2
0000445b 46424c41505f5241 16589		.strz	"FBLAP_RAMCODE_START_SEC_CODE_EXPORT "
00004463 4d434f44455f5354
0000446b 4152545f5345435f
00004473 434f44455f455850
0000447b 4f52542000      
00004480 03               16590		.byte	3
00004481 ad02             16591		.byte	173,2
00004483 18               16592		.byte	24
00004484 01               16593		.byte	1
00004485 2b               16594		.byte	43
00004486 46424c5f4d454d4d 16595		.strz	"FBL_MEMMAP_ERROR "
0000448e 41505f4552524f52
00004496 2000            
00004498 04               16596		.byte	4
00004499 01               16597		.byte	1
0000449a af02             16598		.byte	175,2
0000449c 46424c41505f5241 16599		.strz	"FBLAP_RAMCODE_STOP_SEC_CODE_EXPORT "
000044a4 4d434f44455f5354
000044ac 4f505f5345435f43
000044b4 4f44455f4558504f
000044bc 52542000        
000044c0 03               16600		.byte	3
000044c1 b002             16601		.byte	176,2
000044c3 18               16602		.byte	24
000044c4 01               16603		.byte	1
000044c5 2b               16604		.byte	43
000044c6 46424c5f4d454d4d 16605		.strz	"FBL_MEMMAP_ERROR "
000044ce 41505f4552524f52
000044d6 2000            
000044d8 04               16606		.byte	4
000044d9 04               16607		.byte	4
000044da 03               16608		.byte	3
000044db aa01             16609		.byte	170,1
000044dd 32               16610		.byte	50
000044de 01               16611		.byte	1
000044df 9402             16612		.byte	148,2
000044e1 5744545249474745 16613		.strz	"WDTRIGGER_START_SEC_CODE_EXPORT "
000044e9 525f53544152545f
000044f1 5345435f434f4445
000044f9 5f4558504f525420
00004501 00              
00004502 03               16614		.byte	3
00004503 9502             16615		.byte	149,2
00004505 18               16616		.byte	24
00004506 01               16617		.byte	1

                                   Fri Apr 10 08:32:04 2020           Page 298
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
00004507 2b               16618		.byte	43
00004508 46424c5f4d454d4d 16619		.strz	"FBL_MEMMAP_ERROR "
00004510 41505f4552524f52
00004518 2000            
0000451a 04               16620		.byte	4
0000451b 01               16621		.byte	1
0000451c 9702             16622		.byte	151,2
0000451e 5744545249474745 16623		.strz	"WDTRIGGER_STOP_SEC_CODE_EXPORT "
00004526 525f53544f505f53
0000452e 45435f434f44455f
00004536 4558504f52542000
0000453e 03               16624		.byte	3
0000453f 9802             16625		.byte	152,2
00004541 18               16626		.byte	24
00004542 01               16627		.byte	1
00004543 2b               16628		.byte	43
00004544 46424c5f4d454d4d 16629		.strz	"FBL_MEMMAP_ERROR "
0000454c 41505f4552524f52
00004554 2000            
00004556 04               16630		.byte	4
00004557 04               16631		.byte	4
00004558 03               16632		.byte	3
00004559 ab01             16633		.byte	171,1
0000455b 33               16634		.byte	51
0000455c 04               16635		.byte	4
0000455d 03               16636		.byte	3
0000455e ac01             16637		.byte	172,1
00004560 34               16638		.byte	52
00004561 01               16639		.byte	1
00004562 f501             16640		.byte	245,1
00004564 6b46626c50726573 16641		.strz	"kFblPresencePatternSize 4u"
0000456c 656e636550617474
00004574 65726e53697a6520
0000457c 347500          
0000457f 04               16642		.byte	4
00004580 03               16643		.byte	3
00004581 b201             16644		.byte	178,1
00004583 35               16645		.byte	53
00004584 01               16646		.byte	1
00004585 40               16647		.byte	64
00004586 6b46626c4d61696e 16648		.strz	"kFblMainStateStartFromAppl 1u"
0000458e 5374617465537461
00004596 727446726f6d4170
0000459e 706c20317500    
000045a4 01               16649		.byte	1
000045a5 45               16650		.byte	69
000045a6 6b46626c4d61696e 16651		.strz	"kFblMainStateFblShutdownRequest 6u"
000045ae 537461746546626c
000045b6 53687574646f776e
000045be 5265717565737420
000045c6 367500          
000045c9 01               16652		.byte	1
000045ca 47               16653		.byte	71
000045cb 6b46626c4d61696e 16654		.strz	"kFblMainNumberOfStates 7u"
000045d3 4e756d6265724f66
000045db 5374617465732037
000045e3 7500            
000045e5 01               16655		.byte	1
000045e6 4d               16656		.byte	77
000045e7 47657446626c4d61 16657		.strz	"GetFblMainState(state) FBL_STATE_TEST(fblMainStates, (state))"
000045ef 696e537461746528
000045f7 7374617465292046
000045ff 424c5f5354415445
00004607 5f54455354286662
0000460f 6c4d61696e537461
00004617 7465732c20287374
0000461f 617465292900    
00004625 01               16658		.byte	1
00004626 4e               16659		.byte	78
00004627 53657446626c4d61 16660		.strz	"SetFblMainState(state) FBL_STATE_SET(fblMainStates, state)"
0000462f 696e537461746528
00004637 7374617465292046
0000463f 424c5f5354415445
00004647 5f5345542866626c
0000464f 4d61696e53746174
00004657 65732c2073746174
0000465f 652900          
00004662 01               16661		.byte	1
00004663 52               16662		.byte	82
00004664 46626c4d61696e47 16663		.strz	"FblMainGetStartFromAppl() GetFblMainState( kFblMainStateStartFromAppl )"
0000466c 6574537461727446
00004674 726f6d4170706c28
0000467c 292047657446626c
00004684 4d61696e53746174
0000468c 6528206b46626c4d
00004694 61696e5374617465
0000469c 537461727446726f
000046a4 6d4170706c202900
000046ac 01               16664		.byte	1
000046ad 59               16665		.byte	89
000046ae 46626c4d61696e53 16666		.strz	"FblMainSetFblShutdownRequest() SetFblMainState( kFblMainStateFblShutdownRequest )"
000046b6 657446626c536875
000046be 74646f776e526571
000046c6 7565737428292053
000046ce 657446626c4d6169
000046d6 6e53746174652820
000046de 6b46626c4d61696e
000046e6 537461746546626c
000046ee 53687574646f776e
000046f6 5265717565737420
000046fe 2900            
00004700 01               16667		.byte	1
00004701 5b               16668		.byte	91
00004702 46626c5365745368 16669		.strz	"FblSetShutdownRequest() FblMainSetFblShutdownRequest()"
0000470a 7574646f776e5265
00004712 7175657374282920
0000471a 46626c4d61696e53
00004722 657446626c536875
0000472a 74646f776e526571
00004732 75657374282900  
00004739 01               16670		.byte	1
0000473a 8701             16671		.byte	135,1
0000473c 6b46626c4e6f4f66 16672		.strz	"kFblNoOfMagicBytes 8u"
00004744 4d61676963427974
0000474c 657320387500    
00004752 01               16673		.byte	1

                                   Fri Apr 10 08:32:04 2020           Page 299
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
00004753 e501             16674		.byte	229,1
00004755 46424c4845414445 16675		.strz	"FBLHEADER_START_SEC_CONST "
0000475d 525f53544152545f
00004765 5345435f434f4e53
0000476d 542000          
00004770 03               16676		.byte	3
00004771 e601             16677		.byte	230,1
00004773 18               16678		.byte	24
00004774 01               16679		.byte	1
00004775 2b               16680		.byte	43
00004776 46424c5f4d454d4d 16681		.strz	"FBL_MEMMAP_ERROR "
0000477e 41505f4552524f52
00004786 2000            
00004788 04               16682		.byte	4
00004789 01               16683		.byte	1
0000478a e801             16684		.byte	232,1
0000478c 46424c4845414445 16685		.strz	"FBLHEADER_STOP_SEC_CONST "
00004794 525f53544f505f53
0000479c 45435f434f4e5354
000047a4 2000            
000047a6 03               16686		.byte	3
000047a7 e901             16687		.byte	233,1
000047a9 18               16688		.byte	24
000047aa 01               16689		.byte	1
000047ab 2b               16690		.byte	43
000047ac 46424c5f4d454d4d 16691		.strz	"FBL_MEMMAP_ERROR "
000047b4 41505f4552524f52
000047bc 2000            
000047be 04               16692		.byte	4
000047bf 01               16693		.byte	1
000047c0 ec01             16694		.byte	236,1
000047c2 46424c5f4d41494e 16695		.strz	"FBL_MAIN_MAGICFLAG_START_SEC_VAR "
000047ca 5f4d41474943464c
000047d2 41475f5354415254
000047da 5f5345435f564152
000047e2 2000            
000047e4 03               16696		.byte	3
000047e5 ed01             16697		.byte	237,1
000047e7 18               16698		.byte	24
000047e8 01               16699		.byte	1
000047e9 2b               16700		.byte	43
000047ea 46424c5f4d454d4d 16701		.strz	"FBL_MEMMAP_ERROR "
000047f2 41505f4552524f52
000047fa 2000            
000047fc 04               16702		.byte	4
000047fd 01               16703		.byte	1
000047fe f301             16704		.byte	243,1
00004800 46424c5f4d41494e 16705		.strz	"FBL_MAIN_MAGICFLAG_STOP_SEC_VAR "
00004808 5f4d41474943464c
00004810 41475f53544f505f
00004818 5345435f56415220
00004820 00              
00004821 03               16706		.byte	3
00004822 f401             16707		.byte	244,1
00004824 18               16708		.byte	24
00004825 01               16709		.byte	1
00004826 2b               16710		.byte	43
00004827 46424c5f4d454d4d 16711		.strz	"FBL_MEMMAP_ERROR "
0000482f 41505f4552524f52
00004837 2000            
00004839 04               16712		.byte	4
0000483a 01               16713		.byte	1
0000483b fc01             16714		.byte	252,1
0000483d 46424c5f4d41494e 16715		.strz	"FBL_MAIN_FBLSTART_START_SEC_CODE "
00004845 5f46424c53544152
0000484d 545f53544152545f
00004855 5345435f434f4445
0000485d 2000            
0000485f 03               16716		.byte	3
00004860 fd01             16717		.byte	253,1
00004862 18               16718		.byte	24
00004863 01               16719		.byte	1
00004864 2b               16720		.byte	43
00004865 46424c5f4d454d4d 16721		.strz	"FBL_MEMMAP_ERROR "
0000486d 41505f4552524f52
00004875 2000            
00004877 04               16722		.byte	4
00004878 01               16723		.byte	1
00004879 8302             16724		.byte	131,2
0000487b 46424c5f4d41494e 16725		.strz	"FBL_MAIN_FBLSTART_STOP_SEC_CODE "
00004883 5f46424c53544152
0000488b 545f53544f505f53
00004893 45435f434f444520
0000489b 00              
0000489c 03               16726		.byte	3
0000489d 8402             16727		.byte	132,2
0000489f 18               16728		.byte	24
000048a0 01               16729		.byte	1

                                   Fri Apr 10 08:32:04 2020           Page 300
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
000048a1 2b               16730		.byte	43
000048a2 46424c5f4d454d4d 16731		.strz	"FBL_MEMMAP_ERROR "
000048aa 41505f4552524f52
000048b2 2000            
000048b4 04               16732		.byte	4
000048b5 04               16733		.byte	4
000048b6 04               16734		.byte	4
000048b7 03               16735		.byte	3
000048b8 48               16736		.byte	72
000048b9 36               16737		.byte	54
000048ba 01               16738		.byte	1
000048bb 4f               16739		.byte	79
000048bc 46424c444941475f 16740		.strz	"FBLDIAG_14229_COREINT_VERSION 0x0210u"
000048c4 31343232395f434f
000048cc 5245494e545f5645
000048d4 5253494f4e203078
000048dc 303231307500    
000048e2 01               16741		.byte	1
000048e3 50               16742		.byte	80
000048e4 46424c444941475f 16743		.strz	"FBLDIAG_14229_COREINT_RELEASE_VERSION 0x02u"
000048ec 31343232395f434f
000048f4 5245494e545f5245
000048fc 4c454153455f5645
00004904 5253494f4e203078
0000490c 30327500        
00004910 01               16744		.byte	1
00004911 54               16745		.byte	84
00004912 46424c5f44494147 16746		.strz	"FBL_DIAGCORE_API_VERSION_MAJOR 0x02u"
0000491a 434f52455f415049
00004922 5f56455253494f4e
0000492a 5f4d414a4f522030
00004932 7830327500      
00004937 01               16747		.byte	1
00004938 56               16748		.byte	86
00004939 46424c5f44494147 16749		.strz	"FBL_DIAGCORE_API_VERSION_MINOR 0x10u"
00004941 434f52455f415049
00004949 5f56455253494f4e
00004951 5f4d494e4f522030
00004959 7831307500      
0000495e 01               16750		.byte	1
0000495f 63               16751		.byte	99
00004960 46424c5f44494147 16752		.strz	"FBL_DIAG_ENABLE_CORE_WRITE_SECACCESSDELAY_FLAG "
00004968 5f454e41424c455f
00004970 434f52455f575249
00004978 54455f5345434143
00004980 4345535344454c41
00004988 595f464c41472000
00004990 01               16753		.byte	1
00004991 68               16754		.byte	104
00004992 46424c5f44494147 16755		.strz	"FBL_DIAG_ENABLE_CORE_GETBLOCKFROMADDR "
0000499a 5f454e41424c455f
000049a2 434f52455f474554
000049aa 424c4f434b46524f
000049b2 4d414444522000  
000049b9 01               16756		.byte	1
000049ba 77               16757		.byte	119
000049bb 6b446961674c656e 16758		.strz	"kDiagLengthSpecialCheck FBL_BIT4"
000049c3 6774685370656369
000049cb 616c436865636b20
000049d3 46424c5f42495434
000049db 00              
000049dc 01               16759		.byte	1
000049dd 78               16760		.byte	120
000049de 6b44696167536563 16761		.strz	"kDiagSecuredService FBL_BIT5"
000049e6 7572656453657276
000049ee 6963652046424c5f
000049f6 4249543500      
000049fb 01               16762		.byte	1
000049fc 79               16763		.byte	121
000049fd 6b44696167536572 16764		.strz	"kDiagServiceIsSubfunction FBL_BIT6"
00004a05 7669636549735375
00004a0d 6266756e6374696f
00004a15 6e2046424c5f4249
00004a1d 543600          
00004a20 01               16765		.byte	1
00004a21 7a               16766		.byte	122
00004a22 6b4469616746756e 16767		.strz	"kDiagFunctionalRequestAllowed FBL_BIT7"
00004a2a 6374696f6e616c52
00004a32 657175657374416c
00004a3a 6c6f776564204642
00004a42 4c5f4249543700  
00004a49 01               16768		.byte	1
00004a4a 8201             16769		.byte	130,1
00004a4c 6b44696167537562 16770		.strz	"kDiagSubFctNoMainHandler (tFblDiagMainHandler)V_NULL"
00004a54 4663744e6f4d6169
00004a5c 6e48616e646c6572
00004a64 20287446626c4469
00004a6c 61674d61696e4861
00004a74 6e646c657229565f
00004a7c 4e554c4c00      
00004a81 01               16771		.byte	1
00004a82 8b01             16772		.byte	139,1
00004a84 436c724469616753 16773		.strz	"ClrDiagSession() FBL_STATE_MULTICLR(fblDiagStates, kDiagStateIdxSessionDefault, kDiagStateIdxSessionProgramming)"
00004a8c 657373696f6e2829
00004a94 2046424c5f535441
00004a9c 54455f4d554c5449
00004aa4 434c522866626c44
00004aac 6961675374617465
00004ab4 732c206b44696167
00004abc 5374617465496478
00004ac4 53657373696f6e44
00004acc 656661756c742c20
00004ad4 6b44696167537461
00004adc 7465496478536573
00004ae4 73696f6e50726f67
00004aec 72616d6d696e6729
00004af4 00              
00004af5 01               16774		.byte	1
00004af6 8e01             16775		.byte	142,1
00004af8 6b44696167537461 16776		.strz	"kDiagStateSessionDefault kDiagStateMask(kDiagStateIdxSessionDefault)"
00004b00 746553657373696f
00004b08 6e44656661756c74
00004b10 206b446961675374
00004b18 6174654d61736b28
00004b20 6b44696167537461
00004b28 7465496478536573
00004b30 73696f6e44656661
00004b38 756c742900      
00004b3d 01               16777		.byte	1
00004b3e 8f01             16778		.byte	143,1
00004b40 5365744469616744 16779		.strz	"SetDiagDefaultSession() { ClrDiagSession(); SetDiagState(kDiagStateIdxSessionDefault); }"
00004b48 656661756c745365
00004b50 7373696f6e282920
00004b58 7b20436c72446961
00004b60 6753657373696f6e
00004b68 28293b2053657444
00004b70 6961675374617465
00004b78 286b446961675374
00004b80 6174654964785365
00004b88 7373696f6e446566
00004b90 61756c74293b207d
00004b98 00              
00004b99 01               16780		.byte	1
00004b9a 9501             16781		.byte	149,1
00004b9c 6b44696167537461 16782		.strz	"kDiagStateSessionExtended kDiagStateMask(kDiagStateIdxSessionExtended)"
00004ba4 746553657373696f
00004bac 6e457874656e6465
00004bb4 64206b4469616753
00004bbc 746174654d61736b
00004bc4 286b446961675374
00004bcc 6174654964785365
00004bd4 7373696f6e457874
00004bdc 656e6465642900  
00004be3 01               16783		.byte	1
00004be4 9701             16784		.byte	151,1
00004be6 5365744469616745 16785		.strz	"SetDiagExtendedSession() { ClrDiagSession(); SetDiagState(kDiagStateIdxSessionExtended); }"
00004bee 7874656e64656453
00004bf6 657373696f6e2829
00004bfe 207b20436c724469
00004c06 616753657373696f
00004c0e 6e28293b20536574
00004c16 4469616753746174
00004c1e 65286b4469616753
00004c26 7461746549647853
00004c2e 657373696f6e4578
00004c36 74656e646564293b
00004c3e 207d00          

                                   Fri Apr 10 08:32:04 2020           Page 301
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
00004c41 01               16786		.byte	1
00004c42 9d01             16787		.byte	157,1
00004c44 6b44696167537461 16788		.strz	"kDiagStateSessionProgramming kDiagStateMask(kDiagStateIdxSessionProgramming)"
00004c4c 746553657373696f
00004c54 6e50726f6772616d
00004c5c 6d696e67206b4469
00004c64 616753746174654d
00004c6c 61736b286b446961
00004c74 6753746174654964
00004c7c 7853657373696f6e
00004c84 50726f6772616d6d
00004c8c 696e672900      
00004c91 01               16789		.byte	1
00004c92 a501             16790		.byte	165,1
00004c94 6b44696167537461 16791		.strz	"kDiagStateSessionMask (kDiagStateSessionDefault|kDiagStateSessionExtended|kDiagStateSessionProgramming)"
00004c9c 746553657373696f
00004ca4 6e4d61736b20286b
00004cac 4469616753746174
00004cb4 6553657373696f6e
00004cbc 44656661756c747c
00004cc4 6b44696167537461
00004ccc 746553657373696f
00004cd4 6e457874656e6465
00004cdc 647c6b4469616753
00004ce4 7461746553657373
00004cec 696f6e50726f6772
00004cf4 616d6d696e672900
00004cfc 01               16792		.byte	1
00004cfd a601             16793		.byte	166,1
00004cff 4765744375727265 16794		.strz	"GetCurrentSession() (vuint8)(fblDiagStates[0] & kDiagStateSessionMask)"
00004d07 6e7453657373696f
00004d0f 6e28292028767569
00004d17 6e7438292866626c
00004d1f 4469616753746174
00004d27 65735b305d202620
00004d2f 6b44696167537461
00004d37 746553657373696f
00004d3f 6e4d61736b2900  
00004d46 01               16795		.byte	1
00004d47 ad01             16796		.byte	173,1
00004d49 436c724469616750 16797		.strz	"ClrDiagProgrammingSession() ClrDiagState( kDiagStateIdxSessionProgramming )"
00004d51 726f6772616d6d69
00004d59 6e6753657373696f
00004d61 6e282920436c7244
00004d69 6961675374617465
00004d71 28206b4469616753
00004d79 7461746549647853
00004d81 657373696f6e5072
00004d89 6f6772616d6d696e
00004d91 67202900        
00004d95 01               16798		.byte	1
00004d96 af01             16799		.byte	175,1
00004d98 5365744469616742 16800		.strz	"SetDiagBufferLocked() SetDiagState( kDiagStateIdxDiagBufferLocked )"
00004da0 75666665724c6f63
00004da8 6b65642829205365
00004db0 7444696167537461
00004db8 746528206b446961
00004dc0 6753746174654964
00004dc8 7844696167427566
00004dd0 6665724c6f636b65
00004dd8 64202900        
00004ddc 01               16801		.byte	1
00004ddd b001             16802		.byte	176,1
00004ddf 436c724469616742 16803		.strz	"ClrDiagBufferLocked() ClrDiagState( kDiagStateIdxDiagBufferLocked )"
00004de7 75666665724c6f63
00004def 6b6564282920436c
00004df7 7244696167537461
00004dff 746528206b446961
00004e07 6753746174654964
00004e0f 7844696167427566
00004e17 6665724c6f636b65
00004e1f 64202900        
00004e23 01               16804		.byte	1
00004e24 b101             16805		.byte	177,1
00004e26 5365744469616748 16806		.strz	"SetDiagHandlerCalled() SetDiagState( kDiagStateIdxDiagHandlerCalled )"
00004e2e 616e646c65724361
00004e36 6c6c656428292053
00004e3e 6574446961675374
00004e46 61746528206b4469
00004e4e 6167537461746549
00004e56 6478446961674861
00004e5e 6e646c657243616c
00004e66 6c6564202900    
00004e6c 01               16807		.byte	1
00004e6d b201             16808		.byte	178,1
00004e6f 436c724469616748 16809		.strz	"ClrDiagHandlerCalled() ClrDiagState( kDiagStateIdxDiagHandlerCalled )"
00004e77 616e646c65724361
00004e7f 6c6c656428292043
00004e87 6c72446961675374
00004e8f 61746528206b4469
00004e97 6167537461746549
00004e9f 6478446961674861
00004ea7 6e646c657243616c
00004eaf 6c6564202900    
00004eb5 01               16810		.byte	1
00004eb6 b301             16811		.byte	179,1
00004eb8 5365745263725270 16812		.strz	"SetRcrRpAllowed() SetDiagState( kDiagStateIdxRcrRpAllowed )"
00004ec0 416c6c6f77656428
00004ec8 2920536574446961
00004ed0 6753746174652820
00004ed8 6b44696167537461
00004ee0 7465496478526372
00004ee8 5270416c6c6f7765
00004ef0 64202900        
00004ef4 01               16813		.byte	1
00004ef5 b401             16814		.byte	180,1
00004ef7 436c725263725270 16815		.strz	"ClrRcrRpAllowed() ClrDiagState( kDiagStateIdxRcrRpAllowed )"
00004eff 416c6c6f77656428
00004f07 2920436c72446961
00004f0f 6753746174652820
00004f17 6b44696167537461
00004f1f 7465496478526372
00004f27 5270416c6c6f7765
00004f2f 64202900        
00004f33 01               16816		.byte	1
00004f34 b501             16817		.byte	181,1
00004f36 5365745263725270 16818		.strz	"SetRcrRpInProgress() SetDiagState( kDiagStateIdxRcrRpInProgress )"
00004f3e 496e50726f677265
00004f46 7373282920536574
00004f4e 4469616753746174
00004f56 6528206b44696167
00004f5e 5374617465496478
00004f66 5263725270496e50
00004f6e 726f677265737320
00004f76 2900            
00004f78 01               16819		.byte	1
00004f79 b601             16820		.byte	182,1
00004f7b 436c725263725270 16821		.strz	"ClrRcrRpInProgress() ClrDiagState( kDiagStateIdxRcrRpInProgress )"
00004f83 496e50726f677265
00004f8b 7373282920436c72
00004f93 4469616753746174
00004f9b 6528206b44696167
00004fa3 5374617465496478
00004fab 5263725270496e50
00004fb3 726f677265737320
00004fbb 2900            
00004fbd 01               16822		.byte	1
00004fbe b701             16823		.byte	183,1
00004fc0 536574526573706f 16824		.strz	"SetResponseProcessing() SetDiagState( kDiagStateIdxResponseProcessing )"
00004fc8 6e736550726f6365
00004fd0 7373696e67282920
00004fd8 5365744469616753
00004fe0 7461746528206b44
00004fe8 6961675374617465
00004ff0 496478526573706f
00004ff8 6e736550726f6365
00005000 7373696e67202900
00005008 01               16825		.byte	1
00005009 b801             16826		.byte	184,1
0000500b 436c72526573706f 16827		.strz	"ClrResponseProcessing() ClrDiagState( kDiagStateIdxResponseProcessing )"
00005013 6e736550726f6365
0000501b 7373696e67282920
00005023 436c724469616753
0000502b 7461746528206b44
00005033 6961675374617465
0000503b 496478526573706f
00005043 6e736550726f6365
0000504b 7373696e67202900
00005053 01               16828		.byte	1
00005054 b901             16829		.byte	185,1
00005056 5365745375707072 16830		.strz	"SetSuppressPosRspMsg() SetDiagState( kDiagStateIdxSuppressPosRspMsg )"
0000505e 657373506f735273
00005066 704d736728292053
0000506e 6574446961675374
00005076 61746528206b4469
0000507e 6167537461746549
00005086 6478537570707265
0000508e 7373506f73527370
00005096 4d7367202900    
0000509c 01               16831		.byte	1
0000509d ba01             16832		.byte	186,1
0000509f 436c725375707072 16833		.strz	"ClrSuppressPosRspMsg() ClrDiagState( kDiagStateIdxSuppressPosRspMsg )"
000050a7 657373506f735273
000050af 704d736728292043
000050b7 6c72446961675374
000050bf 61746528206b4469
000050c7 6167537461746549
000050cf 6478537570707265
000050d7 7373506f73527370
000050df 4d7367202900    
000050e5 01               16834		.byte	1
000050e6 bb01             16835		.byte	187,1
000050e8 5365745365727669 16836		.strz	"SetServiceHasSubfunction() SetDiagState( kDiagStateIdxServiceHasSubfunction )"
000050f0 6365486173537562
000050f8 66756e6374696f6e
00005100 2829205365744469
00005108 6167537461746528
00005110 206b446961675374
00005118 6174654964785365
00005120 7276696365486173
00005128 53756266756e6374
00005130 696f6e202900    
00005136 01               16837		.byte	1
00005137 bc01             16838		.byte	188,1
00005139 436c725365727669 16839		.strz	"ClrServiceHasSubfunction() ClrDiagState( kDiagStateIdxServiceHasSubfunction )"
00005141 6365486173537562
00005149 66756e6374696f6e
00005151 282920436c724469
00005159 6167537461746528
00005161 206b446961675374
00005169 6174654964785365
00005171 7276696365486173
00005179 53756266756e6374
00005181 696f6e202900    
00005187 01               16840		.byte	1
00005188 bd01             16841		.byte	189,1

                                   Fri Apr 10 08:32:04 2020           Page 302
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
0000518a 5365745365727669 16842		.strz	"SetServiceInProgress() SetDiagState( kDiagStateIdxServiceInProgress )"
00005192 6365496e50726f67
0000519a 7265737328292053
000051a2 6574446961675374
000051aa 61746528206b4469
000051b2 6167537461746549
000051ba 6478536572766963
000051c2 65496e50726f6772
000051ca 657373202900    
000051d0 01               16843		.byte	1
000051d1 be01             16844		.byte	190,1
000051d3 436c725365727669 16845		.strz	"ClrServiceInProgress() ClrDiagState( kDiagStateIdxServiceInProgress )"
000051db 6365496e50726f67
000051e3 7265737328292043
000051eb 6c72446961675374
000051f3 61746528206b4469
000051fb 6167537461746549
00005203 6478536572766963
0000520b 65496e50726f6772
00005213 657373202900    
00005219 01               16846		.byte	1
0000521a bf01             16847		.byte	191,1
0000521c 53657446756e6374 16848		.strz	"SetFunctionalRequest() SetDiagState( kDiagStateIdxFunctionalRequest )"
00005224 696f6e616c526571
0000522c 7565737428292053
00005234 6574446961675374
0000523c 61746528206b4469
00005244 6167537461746549
0000524c 647846756e637469
00005254 6f6e616c52657175
0000525c 657374202900    
00005262 01               16849		.byte	1
00005263 c001             16850		.byte	192,1
00005265 436c7246756e6374 16851		.strz	"ClrFunctionalRequest() ClrDiagState( kDiagStateIdxFunctionalRequest )"
0000526d 696f6e616c526571
00005275 7565737428292043
0000527d 6c72446961675374
00005285 61746528206b4469
0000528d 6167537461746549
00005295 647846756e637469
0000529d 6f6e616c52657175
000052a5 657374202900    
000052ab 01               16852		.byte	1
000052ac c901             16853		.byte	201,1
000052ae 436c725761697445 16854		.strz	"ClrWaitEcuReset() { ClrDiagState( kDiagStateIdxWaitEcuReset ); StopEcuResetTimeout(); }"
000052b6 6375526573657428
000052be 29207b20436c7244
000052c6 6961675374617465
000052ce 28206b4469616753
000052d6 7461746549647857
000052de 6169744563755265
000052e6 73657420293b2053
000052ee 746f704563755265
000052f6 73657454696d656f
000052fe 757428293b207d00
00005306 01               16855		.byte	1
00005307 d001             16856		.byte	208,1
00005309 5365745265736574 16857		.strz	"SetResetMsgConfirmed() SetDiagState( kDiagStateIdxResetMsgConfirmed )"
00005311 4d7367436f6e6669
00005319 726d656428292053
00005321 6574446961675374
00005329 61746528206b4469
00005331 6167537461746549
00005339 647852657365744d
00005341 7367436f6e666972
00005349 6d6564202900    
0000534f 01               16858		.byte	1
00005350 d301             16859		.byte	211,1
00005352 536574507265636f 16860		.strz	"SetPreconditionsChecked() SetDiagState( kDiagStateIdxPreconditionsChecked )"
0000535a 6e646974696f6e73
00005362 436865636b656428
0000536a 2920536574446961
00005372 6753746174652820
0000537a 6b44696167537461
00005382 7465496478507265
0000538a 636f6e646974696f
00005392 6e73436865636b65
0000539a 64202900        
0000539e 01               16861		.byte	1
0000539f d601             16862		.byte	214,1
000053a1 436c724d656d4472 16863		.strz	"ClrMemDriverInitialized() ClrDiagState( kDiagStateIdxMemDriverInitialized )"
000053a9 69766572496e6974
000053b1 69616c697a656428
000053b9 2920436c72446961
000053c1 6753746174652820
000053c9 6b44696167537461
000053d1 74654964784d656d
000053d9 447269766572496e
000053e1 697469616c697a65
000053e9 64202900        
000053ed 01               16864		.byte	1
000053ee dd01             16865		.byte	221,1
000053f0 6b44696167536573 16866		.strz	"kDiagSessionTimingP2 ( kFblDiagTimeP2 * FBL_REPEAT_CALL_CYCLE )"
000053f8 73696f6e54696d69
00005400 6e6750322028206b
00005408 46626c4469616754
00005410 696d655032202a20
00005418 46424c5f52455045
00005420 41545f43414c4c5f
00005428 4359434c45202900
00005430 01               16867		.byte	1
00005431 de01             16868		.byte	222,1
00005433 6b44696167536573 16869		.strz	"kDiagSessionTimingP2StarRaw ( kFblDiagTimeP2Star * FBL_REPEAT_CALL_CYCLE )"
0000543b 73696f6e54696d69
00005443 6e67503253746172
0000544b 5261772028206b46
00005453 626c446961675469
0000545b 6d65503253746172
00005463 202a2046424c5f52
0000546b 45504541545f4341
00005473 4c4c5f4359434c45
0000547b 202900          
0000547e 01               16870		.byte	1
0000547f e301             16871		.byte	227,1
00005481 6b46626c44696167 16872		.strz	"kFblDiagP2MinThreshold ( kDiagSessionTimingP2 / 2u )"
00005489 50324d696e546872
00005491 6573686f6c642028
00005499 206b446961675365
000054a1 7373696f6e54696d
000054a9 696e675032202f20
000054b1 3275202900      
000054b6 01               16873		.byte	1
000054b7 e801             16874		.byte	232,1
000054b9 6b46626c44696167 16875		.strz	"kFblDiagP2StarMinThreshold ( kDiagSessionTimingP2StarRaw / 2u )"
000054c1 5032537461724d69
000054c9 6e5468726573686f
000054d1 6c642028206b4469
000054d9 616753657373696f
000054e1 6e54696d696e6750
000054e9 3253746172526177
000054f1 202f203275202900
000054f9 01               16876		.byte	1
000054fa 8102             16877		.byte	129,2
000054fc 54696d656f757445 16878		.strz	"TimeoutEcuResetValue() ecuResetTimeout"
00005504 6375526573657456
0000550c 616c756528292065
00005514 6375526573657454
0000551c 696d656f757400  
00005523 01               16879		.byte	1
00005524 8202             16880		.byte	130,2
00005526 44656354696d656f 16881		.strz	"DecTimeoutEcuResetValue() (ecuResetTimeout--)"
0000552e 7574456375526573
00005536 657456616c756528
0000553e 2920286563755265
00005546 73657454696d656f
0000554e 75742d2d2900    
00005554 01               16882		.byte	1
00005555 8402             16883		.byte	132,2
00005557 53746f7045637552 16884		.strz	"StopEcuResetTimeout() (ecuResetTimeout = 0)"
0000555f 6573657454696d65
00005567 6f75742829202865
0000556f 6375526573657454
00005577 696d656f7574203d
0000557f 20302900        
00005583 01               16885		.byte	1
00005584 8a02             16886		.byte	138,2
00005586 4765745365637572 16887		.strz	"GetSecurityAccessDelay() (secSecurityAccessDelay)"
0000558e 6974794163636573
00005596 7344656c61792829
0000559e 2028736563536563
000055a6 7572697479416363
000055ae 65737344656c6179
000055b6 2900            
000055b8 01               16888		.byte	1
000055b9 8b02             16889		.byte	139,2
000055bb 4465635365637572 16890		.strz	"DecSecurityAccessDelay() (secSecurityAccessDelay--)"
000055c3 6974794163636573
000055cb 7344656c61792829
000055d3 2028736563536563
000055db 7572697479416363
000055e3 65737344656c6179
000055eb 2d2d2900        
000055ef 01               16891		.byte	1
000055f0 8c02             16892		.byte	140,2
000055f2 436c725365637572 16893		.strz	"ClrSecurityAccessDelay() (secSecurityAccessDelay = 0)"
000055fa 6974794163636573
00005602 7344656c61792829
0000560a 2028736563536563
00005612 7572697479416363
0000561a 65737344656c6179
00005622 203d20302900    
00005628 01               16894		.byte	1
00005629 9102             16895		.byte	145,2
0000562b 44696167436c7245 16896		.strz	"DiagClrError() ( diagErrorCode = kDiagErrorNone )"
00005633 72726f7228292028
0000563b 2064696167457272
00005643 6f72436f6465203d
0000564b 206b446961674572
00005653 726f724e6f6e6520
0000565b 2900            
0000565d 01               16897		.byte	1

                                   Fri Apr 10 08:32:04 2020           Page 303
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
0000565e 9202             16898		.byte	146,2
00005660 4469616747657445 16899		.strz	"DiagGetError() ( diagErrorCode )"
00005668 72726f7228292028
00005670 2064696167457272
00005678 6f72436f64652029
00005680 00              
00005681 01               16900		.byte	1
00005682 9602             16901		.byte	150,2
00005684 6b53776d4f75744f 16902		.strz	"kSwmOutOfRange 0xFFu"
0000568c 6652616e67652030
00005694 7846467500      
00005699 01               16903		.byte	1
0000569a 9702             16904		.byte	151,2
0000569c 46626c4469616753 16905		.strz	"FblDiagSegmentInit() (segmentCount = 0)"
000056a4 65676d656e74496e
000056ac 6974282920287365
000056b4 676d656e74436f75
000056bc 6e74203d20302900
000056c4 01               16906		.byte	1
000056c5 9c02             16907		.byte	156,2
000056c7 446961675365744e 16908		.strz	"DiagSetNoResponse() ( diagResponseFlag |= kDiagPutNoResponse )"
000056cf 6f526573706f6e73
000056d7 6528292028206469
000056df 6167526573706f6e
000056e7 7365466c6167207c
000056ef 3d206b4469616750
000056f7 75744e6f52657370
000056ff 6f6e7365202900  
00005706 01               16909		.byte	1
00005707 9f02             16910		.byte	159,2
00005709 6b44696167526573 16911		.strz	"kDiagResponseIdle 0x00u"
00005711 706f6e736549646c
00005719 6520307830307500
00005721 01               16912		.byte	1
00005722 a002             16913		.byte	160,2
00005724 6b44696167526573 16914		.strz	"kDiagResponseRequested FBL_BIT0"
0000572c 706f6e7365526571
00005734 7565737465642046
0000573c 424c5f4249543000
00005744 01               16915		.byte	1
00005745 a102             16916		.byte	161,2
00005747 6b44696167507574 16917		.strz	"kDiagPutNoResponse FBL_BIT1"
0000574f 4e6f526573706f6e
00005757 73652046424c5f42
0000575f 49543100        
00005763 01               16918		.byte	1
00005764 a202             16919		.byte	162,2
00005766 6b44696167507574 16920		.strz	"kDiagPutPosResponse FBL_BIT2"
0000576e 506f73526573706f
00005776 6e73652046424c5f
0000577e 4249543200      
00005783 01               16921		.byte	1
00005784 a302             16922		.byte	163,2
00005786 6b44696167507574 16923		.strz	"kDiagPutNegResponse FBL_BIT3"
0000578e 4e6567526573706f
00005796 6e73652046424c5f
0000579e 4249543300      
000057a3 01               16924		.byte	1
000057a4 a402             16925		.byte	164,2
000057a6 6b44696167526570 16926		.strz	"kDiagRepeatResponse FBL_BIT7"
000057ae 656174526573706f
000057b6 6e73652046424c5f
000057be 4249543700      
000057c3 01               16927		.byte	1
000057c4 a702             16928		.byte	167,2
000057c6 6b44696167506f73 16929		.strz	"kDiagPostPosResponse 0x00u"
000057ce 74506f7352657370
000057d6 6f6e736520307830
000057de 307500          
000057e1 01               16930		.byte	1
000057e2 a802             16931		.byte	168,2
000057e4 6b44696167506f73 16932		.strz	"kDiagPostNegResponse 0x01u"
000057ec 744e656752657370
000057f4 6f6e736520307830
000057fc 317500          
000057ff 01               16933		.byte	1
00005800 aa02             16934		.byte	170,2
00005802 6b44696167506f73 16935		.strz	"kDiagPostRcrRp 0x03u"
0000580a 7452637252702030
00005812 7830337500      
00005817 01               16936		.byte	1
00005818 ab02             16937		.byte	171,2
0000581a 6b44696167506f73 16938		.strz	"kDiagPostNoResponse 0x04u"
00005822 744e6f526573706f
0000582a 6e73652030783034
00005832 7500            
00005834 01               16939		.byte	1
00005835 b002             16940		.byte	176,2
00005837 6b53657276696365 16941		.strz	"kServiceFailure 0x4000u"
0000583f 4661696c75726520
00005847 3078343030307500
0000584f 01               16942		.byte	1
00005850 b102             16943		.byte	177,2
00005852 6b53756253657276 16944		.strz	"kSubServiceFailure 0x8000u"
0000585a 6963654661696c75
00005862 7265203078383030
0000586a 307500          
0000586d 01               16945		.byte	1
0000586e b202             16946		.byte	178,2
00005870 6b436865636b5661 16947		.strz	"kCheckValid 0x0000u"
00005878 6c69642030783030
00005880 30307500        
00005884 01               16948		.byte	1
00005885 b502             16949		.byte	181,2
00005887 6b53756253657276 16950		.strz	"kSubServiceValid kCheckValid"
0000588f 69636556616c6964
00005897 206b436865636b56
0000589f 616c696400      
000058a4 01               16951		.byte	1
000058a5 b702             16952		.byte	183,2
000058a7 6b436865636b4c65 16953		.strz	"kCheckLenFailure 0x0001u"
000058af 6e4661696c757265
000058b7 2030783030303175
000058bf 00              

                                   Fri Apr 10 08:32:04 2020           Page 304
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
000058c0 01               16954		.byte	1
000058c1 b802             16955		.byte	184,2
000058c3 6b436865636b5365 16956		.strz	"kCheckSessionFailure 0x0002u"
000058cb 7373696f6e466169
000058d3 6c75726520307830
000058db 3030327500      
000058e0 01               16957		.byte	1
000058e1 b902             16958		.byte	185,2
000058e3 6b436865636b5061 16959		.strz	"kCheckParameterNotFound 0x0004u"
000058eb 72616d657465724e
000058f3 6f74466f756e6420
000058fb 3078303030347500
00005903 01               16960		.byte	1
00005904 ba02             16961		.byte	186,2
00005906 6b436865636b4675 16962		.strz	"kCheckFunctionNotFound 0x0008u"
0000590e 6e6374696f6e4e6f
00005916 74466f756e642030
0000591e 78303030387500  
00005925 01               16963		.byte	1
00005926 bb02             16964		.byte	187,2
00005928 6b436865636b5461 16965		.strz	"kCheckTableMismatch 0x0010u"
00005930 626c654d69736d61
00005938 7463682030783030
00005940 31307500        
00005944 01               16966		.byte	1
00005945 bc02             16967		.byte	188,2
00005947 6b436865636b5365 16968		.strz	"kCheckSecAccFailure 0x0020u"
0000594f 634163634661696c
00005957 7572652030783030
0000595f 32307500        
00005963 01               16969		.byte	1
00005964 bd02             16970		.byte	189,2
00005966 6b436865636b4e6f 16971		.strz	"kCheckNoFuncSupport 0x0040u"
0000596e 46756e6353757070
00005976 6f72742030783030
0000597e 34307500        
00005982 01               16972		.byte	1
00005983 bf02             16973		.byte	191,2
00005985 6b436865636b4d69 16974		.strz	"kCheckMinLenFailure 0x0100u"
0000598d 6e4c656e4661696c
00005995 7572652030783031
0000599d 30307500        
000059a1 01               16975		.byte	1
000059a2 c002             16976		.byte	192,2
000059a4 6b436865636b5061 16977		.strz	"kCheckParameterFound 0x1000u"
000059ac 72616d6574657246
000059b4 6f756e6420307831
000059bc 3030307500      
000059c1 01               16978		.byte	1
000059c2 c302             16979		.byte	195,2
000059c4 6b53657276696365 16980		.strz	"kServiceLenFailure (kServiceFailure | kCheckLenFailure)"
000059cc 4c656e4661696c75
000059d4 726520286b536572
000059dc 766963654661696c
000059e4 757265207c206b43
000059ec 6865636b4c656e46
000059f4 61696c7572652900
000059fc 01               16981		.byte	1
000059fd c402             16982		.byte	196,2
000059ff 6b53657276696365 16983		.strz	"kServiceMinLenFailure (kServiceFailure | kCheckMinLenFailure)"
00005a07 4d696e4c656e4661
00005a0f 696c75726520286b
00005a17 5365727669636546
00005a1f 61696c757265207c
00005a27 206b436865636b4d
00005a2f 696e4c656e466169
00005a37 6c7572652900    
00005a3d 01               16984		.byte	1
00005a3e c502             16985		.byte	197,2
00005a40 6b53657276696365 16986		.strz	"kServiceSessionFailure (kServiceFailure | kCheckSessionFailure)"
00005a48 53657373696f6e46
00005a50 61696c7572652028
00005a58 6b53657276696365
00005a60 4661696c75726520
00005a68 7c206b436865636b
00005a70 53657373696f6e46
00005a78 61696c7572652900
00005a80 01               16987		.byte	1
00005a81 c902             16988		.byte	201,2
00005a83 6b53657276696365 16989		.strz	"kServiceSecAccFailure (kServiceFailure | kCheckSecAccFailure)"
00005a8b 5365634163634661
00005a93 696c75726520286b
00005a9b 5365727669636546
00005aa3 61696c757265207c
00005aab 206b436865636b53
00005ab3 6563416363466169
00005abb 6c7572652900    
00005ac1 01               16990		.byte	1
00005ac2 cd02             16991		.byte	205,2
00005ac4 6b53756253657276 16992		.strz	"kSubServiceLenFailure (kSubServiceFailure | kCheckLenFailure)"
00005acc 6963654c656e4661
00005ad4 696c75726520286b
00005adc 5375625365727669
00005ae4 63654661696c7572
00005aec 65207c206b436865
00005af4 636b4c656e466169
00005afc 6c7572652900    
00005b02 01               16993		.byte	1
00005b03 cf02             16994		.byte	207,2
00005b05 6b53756253657276 16995		.strz	"kSubServiceSessionFailure (kSubServiceFailure | kCheckSessionFailure)"
00005b0d 6963655365737369
00005b15 6f6e4661696c7572
00005b1d 6520286b53756253
00005b25 6572766963654661
00005b2d 696c757265207c20
00005b35 6b436865636b5365
00005b3d 7373696f6e466169
00005b45 6c7572652900    
00005b4b 01               16996		.byte	1
00005b4c d002             16997		.byte	208,2
00005b4e 6b53756253657276 16998		.strz	"kSubServiceParameterNotFound (kSubServiceFailure | kCheckParameterNotFound)"
00005b56 696365506172616d
00005b5e 657465724e6f7446
00005b66 6f756e6420286b53
00005b6e 7562536572766963
00005b76 654661696c757265
00005b7e 207c206b43686563
00005b86 6b506172616d6574
00005b8e 65724e6f74466f75
00005b96 6e642900        
00005b9a 01               16999		.byte	1
00005b9b d102             17000		.byte	209,2
00005b9d 6b53756253657276 17001		.strz	"kSubServiceFunctionNotFound (kSubServiceFailure | kCheckFunctionNotFound)"
00005ba5 69636546756e6374
00005bad 696f6e4e6f74466f
00005bb5 756e6420286b5375
00005bbd 6253657276696365
00005bc5 4661696c75726520
00005bcd 7c206b436865636b
00005bd5 46756e6374696f6e
00005bdd 4e6f74466f756e64
00005be5 2900            
00005be7 01               17002		.byte	1
00005be8 d202             17003		.byte	210,2
00005bea 6b53756253657276 17004		.strz	"kSubServiceTableMismatch (kSubServiceFailure | kCheckTableMismatch)"
00005bf2 6963655461626c65
00005bfa 4d69736d61746368
00005c02 20286b5375625365
00005c0a 7276696365466169
00005c12 6c757265207c206b
00005c1a 436865636b546162
00005c22 6c654d69736d6174
00005c2a 63682900        
00005c2e 01               17005		.byte	1
00005c2f d302             17006		.byte	211,2
00005c31 6b53756253657276 17007		.strz	"kSubServiceSecAccFailure (kSubServiceFailure | kCheckSecAccFailure)"
00005c39 6963655365634163
00005c41 634661696c757265
00005c49 20286b5375625365
00005c51 7276696365466169
00005c59 6c757265207c206b
00005c61 436865636b536563
00005c69 4163634661696c75
00005c71 72652900        
00005c75 01               17008		.byte	1
00005c76 d402             17009		.byte	212,2

                                   Fri Apr 10 08:32:04 2020           Page 305
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
00005c78 6b53756253657276 17010		.strz	"kSubServiceNoFuncSupport (kSubServiceFailure | kCheckNoFuncSupport)"
00005c80 6963654e6f46756e
00005c88 63537570706f7274
00005c90 20286b5375625365
00005c98 7276696365466169
00005ca0 6c757265207c206b
00005ca8 436865636b4e6f46
00005cb0 756e63537570706f
00005cb8 72742900        
00005cbc 01               17011		.byte	1
00005cbd d702             17012		.byte	215,2
00005cbf 6b53756253657276 17013		.strz	"kSubServiceParameterFound (kSubServiceFailure | kCheckParameterFound)"
00005cc7 696365506172616d
00005ccf 65746572466f756e
00005cd7 6420286b53756253
00005cdf 6572766963654661
00005ce7 696c757265207c20
00005cef 6b436865636b5061
00005cf7 72616d6574657246
00005cff 6f756e642900    
00005d05 01               17014		.byte	1
00005d06 db02             17015		.byte	219,2
00005d08 6b53657276696365 17016		.strz	"kServiceMainHandlerNoHandler -1"
00005d10 4d61696e48616e64
00005d18 6c65724e6f48616e
00005d20 646c6572202d3100
00005d28 04               17017		.byte	4
00005d29 01               17018		.byte	1
00005d2a 73               17019		.byte	115
00005d2b 6b44696167526573 17020		.strz	"kDiagResponseActive ( kDiagPutNoResponse | kDiagPutPosResponse | kDiagPutNegResponse )"
00005d33 706f6e7365416374
00005d3b 6976652028206b44
00005d43 6961675075744e6f
00005d4b 526573706f6e7365
00005d53 207c206b44696167
00005d5b 507574506f735265
00005d63 73706f6e7365207c
00005d6b 206b446961675075
00005d73 744e656752657370
00005d7b 6f6e7365202900  
00005d82 01               17021		.byte	1
00005d83 7c               17022		.byte	124
00005d84 46424c5f44494147 17023		.strz	"FBL_DIAG_ENABLE_SPS_EXTENDED_SESSION "
00005d8c 5f454e41424c455f
00005d94 5350535f45585445
00005d9c 4e4445445f534553
00005da4 53494f4e2000    
00005daa 01               17024		.byte	1
00005dab 7f               17025		.byte	127
00005dac 6b4469616752716c 17026		.strz	"kDiagRqlSpsFromAppl kDiagRqlDiagnosticSessionControl"
00005db4 53707346726f6d41
00005dbc 70706c206b446961
00005dc4 6752716c44696167
00005dcc 6e6f737469635365
00005dd4 7373696f6e436f6e
00005ddc 74726f6c00      
00005de1 01               17027		.byte	1
00005de2 9802             17028		.byte	152,2
00005de4 46424c444941475f 17029		.strz	"FBLDIAG_RAMCODE_START_SEC_CODE "
00005dec 52414d434f44455f
00005df4 53544152545f5345
00005dfc 435f434f44452000
00005e04 03               17030		.byte	3
00005e05 9902             17031		.byte	153,2
00005e07 18               17032		.byte	24
00005e08 01               17033		.byte	1
00005e09 2b               17034		.byte	43
00005e0a 46424c5f4d454d4d 17035		.strz	"FBL_MEMMAP_ERROR "
00005e12 41505f4552524f52
00005e1a 2000            
00005e1c 04               17036		.byte	4
00005e1d 01               17037		.byte	1
00005e1e 9d02             17038		.byte	157,2
00005e20 46424c444941475f 17039		.strz	"FBLDIAG_RAMCODE_STOP_SEC_CODE "
00005e28 52414d434f44455f
00005e30 53544f505f534543
00005e38 5f434f44452000  
00005e3f 03               17040		.byte	3
00005e40 9e02             17041		.byte	158,2
00005e42 18               17042		.byte	24
00005e43 01               17043		.byte	1
00005e44 2b               17044		.byte	43
00005e45 46424c5f4d454d4d 17045		.strz	"FBL_MEMMAP_ERROR "
00005e4d 41505f4552524f52
00005e55 2000            
00005e57 04               17046		.byte	4
00005e58 01               17047		.byte	1
00005e59 c805             17048		.byte	200,5
00005e5b 46424c444941475f 17049		.strz	"FBLDIAG_RAMCODE_START_SEC_CODE "
00005e63 52414d434f44455f
00005e6b 53544152545f5345
00005e73 435f434f44452000
00005e7b 03               17050		.byte	3
00005e7c c905             17051		.byte	201,5
00005e7e 18               17052		.byte	24
00005e7f 01               17053		.byte	1
00005e80 2b               17054		.byte	43
00005e81 46424c5f4d454d4d 17055		.strz	"FBL_MEMMAP_ERROR "
00005e89 41505f4552524f52
00005e91 2000            
00005e93 04               17056		.byte	4
00005e94 01               17057		.byte	1
00005e95 fc05             17058		.byte	252,5
00005e97 46424c444941475f 17059		.strz	"FBLDIAG_RAMCODE_STOP_SEC_CODE "
00005e9f 52414d434f44455f
00005ea7 53544f505f534543
00005eaf 5f434f44452000  
00005eb6 03               17060		.byte	3
00005eb7 fd05             17061		.byte	253,5
00005eb9 18               17062		.byte	24
00005eba 01               17063		.byte	1
00005ebb 2b               17064		.byte	43
00005ebc 46424c5f4d454d4d 17065		.strz	"FBL_MEMMAP_ERROR "
00005ec4 41505f4552524f52
00005ecc 2000            

                                   Fri Apr 10 08:32:04 2020           Page 306
                                   Fri Apr 10 08:32:04 2020   gh_00007d41.si
00005ece 04               17066		.byte	4
00005ecf 01               17067		.byte	1
00005ed0 940f             17068		.byte	148,15
00005ed2 46424c444941475f 17069		.strz	"FBLDIAG_RAMCODE_START_SEC_CODE "
00005eda 52414d434f44455f
00005ee2 53544152545f5345
00005eea 435f434f44452000
00005ef2 03               17070		.byte	3
00005ef3 950f             17071		.byte	149,15
00005ef5 18               17072		.byte	24
00005ef6 01               17073		.byte	1
00005ef7 2b               17074		.byte	43
00005ef8 46424c5f4d454d4d 17075		.strz	"FBL_MEMMAP_ERROR "
00005f00 41505f4552524f52
00005f08 2000            
00005f0a 04               17076		.byte	4
00005f0b 01               17077		.byte	1
00005f0c d410             17078		.byte	212,16
00005f0e 46424c444941475f 17079		.strz	"FBLDIAG_RAMCODE_STOP_SEC_CODE "
00005f16 52414d434f44455f
00005f1e 53544f505f534543
00005f26 5f434f44452000  
00005f2d 03               17080		.byte	3
00005f2e d510             17081		.byte	213,16
00005f30 18               17082		.byte	24
00005f31 01               17083		.byte	1
00005f32 2b               17084		.byte	43
00005f33 46424c5f4d454d4d 17085		.strz	"FBL_MEMMAP_ERROR "
00005f3b 41505f4552524f52
00005f43 2000            
00005f45 04               17086		.byte	4
00005f46 04               17087		.byte	4
00005f47 00               17088		.byte	0
                          17089		.section	.debug_abbrev
00000182 00               17090		.byte	0
                          17091		.section	.debug_info
                          17092	.Ldw_end:
