
                                   Fri Apr 10 08:32:21 2020           Page 1
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
Command Line:   C:\ghs\comp_201754\asppc.exe -noundefined -stderr=err/fbl_tp.err
                -elf -b1 -I../../../bsw/_common -I../../../bsw/eep
                -I../../../bsw/fbl -I../../../bsw/flash -I../../../bsw/flash_xd1
                -I../../../bsw/secmod -I../../../bsw/wrapnv
                -Ic:/ghs/comp_201754/ansi -Ic:/ghs/comp_201754/include/ppc
                -Ic:/ghs/comp_201754/src/libsys -Igendata -Iinclude
                -IC:\ghs\comp_201754\lib\ppc5514 -cpu=ppc560xp
                -patch_dbo=C:\Vector\CBD1800772_D00_Mpc57xx\Demo\DemoFbl\Appl\obj\fbl_tp.dbo
                -source=fbl_tp.c -o obj\gh_00004l01.o -list=lst/fbl_tp.lst
                C:\Users\owner\AppData\Local\Temp\gh_00004l01.si
Source File:    C:\Users\owner\AppData\Local\Temp\gh_00004l01.si
Directory:      C:\Vector\CBD1800772_D00_Mpc57xx\Demo\DemoFbl\Appl
Host OS:        Windows
AS: Copyright (C) 1983-2017 Green Hills Software.  All Rights Reserved.
Release: Compiler v2017.5.4
Build Directory: [Directory] COMP-VAL-WIN50:c:/autoval2/v2017.5-2017-10-03/win32-comp-ecom
Revision: [VCInfo] http://toolsvc/branches/release-branch-2017-5-comp/src@603870 (built by auto-compiler)
Revision Date: Wed Oct 04 11:30:08 2017

Release Date: Wed Oct 04 09:00:05 2017

                             1	#Driver Command: ccppc -DBRS_DERIVATIVE_SPC570S50 -DBRS_OSC_CLK=40
                             2	#		-DBRS_TIMEBASE_CLOCK=80 -DBRS_OS_USECASE_BRS
                             3	#		-DBRS_EVA_BOARD_DEFAULT -DBRS_PLATFORM_MPC57XX -DBRS_COMP_GHS
                             4	#		-DBRSHW_INSTRUCTION_SET_VLE -DBRS_CPU_STARTUP_ID=0
                             5	#		-object_dir=obj -list=lst/fbl_tp.lst -stderr=err/fbl_tp.err -c
                             6	#		-vle -DC_ENABLE_INSTRUCTION_SET_VLE -D__vle --prototype_warnings
                             7	#		-Odebug -Osize -Ospace -G -dual_debug -nofloatio -cpu=ppc560xp
                             8	#		-noobj -DRAM_48K -inline_prologue -pragma_asm_inline -noSPE
                             9	#		--no_exceptions --no_commons -nokeeptempfiles -pnone
                            10	#		--incorrect_pragma_warnings --slash_comment --long_long
                            11	#		-preprocess_assembly_files -passsource -I../../../bsw/_common
                            12	#		-I../../../bsw/eep -I../../../bsw/fbl -I../../../bsw/flash
                            13	#		-I../../../bsw/flash_xd1 -I../../../bsw/secmod
                            14	#		-I../../../bsw/wrapnv -Ic:/ghs/comp_201754/ansi
                            15	#		-Ic:/ghs/comp_201754/include/ppc -Ic:/ghs/comp_201754/src/libsys
                            16	#		-Igendata -Iinclude ../../../BSW/Fbl/fbl_tp.c
                            17	#Source File:   ../../../BSW/Fbl/fbl_tp.c
                            18	#Directory:     C:\Vector\CBD1800772_D00_Mpc57xx\Demo\DemoFbl\Appl
                            19	#Compile Date:  Fri Apr 10 08:32:20 2020
                            20	#Host OS:       Win32
                            21	#Version:       C-POWERPC 2017.5.4 RELEASE VERSION
                            22	#Release:       Compiler v2017.5.4
                            23	#Revision Date: Wed Oct 04 11:39:37 2017
                            24	#Release Date:  Wed Oct 04 09:00:05 2017
                            25	# ecom  -g -w -OMS
                            26	
                            27	#1: /***********************************************************************************************************************
                            28	#2:  *  FILE DESCRIPTION
                            29	#3:  *  ------------------------------------------------------------------------------------------------------------------*/
                            30	#4: /** \file
                            31	#5:  *  \brief        OSEK transport protocol version ISO-15765
                            32	#6:  *  \description  This versions supports the specification for the OSEK transport protocol with the following
                            33	#7:  *                restriction: Maximum message length is 255 byte for RX and TX (no length in TPCI).
                            34	#8:  *
                            35	#9:  *  \attention    In case using the extended addressing mode with different targets a consistency problem for the
                            36	#10:  *                target address may occur, if an unsuccessful SaveTransmit of an FlowControl is delayed and within
                            37	#11:  *                this call cycle (e.g. 10ms) the TpTransmit function is called.
                            38	#12:  *
                            39	#13:  *  --------------------------------------------------------------------------------------------------------------------
                            40	#14:  *  COPYRIGHT
                            41	#15:  *  --------------------------------------------------------------------------------------------------------------------
                            42	#16:  *  \par Copyright
                            43	#17:  *  \verbatim

                                   Fri Apr 10 08:32:21 2020           Page 2
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
                            44	#18:  *  Copyright (c) 2017 by Vector Informatik GmbH.                                                  All rights reserved.
                            45	#19:  *
                            46	#20:  *                This software is copyright protected and proprietary to Vector Informatik GmbH.
                            47	#21:  *                Vector Informatik GmbH grants to you only those rights as set out in the license conditions.
                            48	#22:  *                All other rights remain with Vector Informatik GmbH.
                            49	#23:  *                This software is only allowed to be used for and with the VECTOR Flash Bootloader!
                            50	#24:  *  \endverbatim
                            51	#25:  */
                            52	#26: /**********************************************************************************************************************/
                            53	#28: /***********************************************************************************************************************
                            54	#29:  *  AUTHOR IDENTITY
                            55	#30:  *  --------------------------------------------------------------------------------------------------------------------
                            56	#31:  *  Name                          Initials      Company
                            57	#32:  *  --------------------------------------------------------------------------------------------------------------------
                            58	#33:  *  Christian Baeuerle            CB            Vector Informatik GmbH
                            59	#34:  *  Konrad Lazarus                Ls            Vector Informatik GmbH
                            60	#35:  *  Robert Schaeffner             Rr            Vector Informatik GmbH
                            61	#36:  *  Quetty Palacios               QPs           Vector Informatik GmbH
                            62	#37:  *  Marcel Viole                  MVi           Vector Informatik GmbH
                            63	#38:  *  Andre Caspari                 Ci            Vector Informatik GmbH
                            64	#39:  *  Thomas Bezold                 TBe           Vector Informatik GmbH
                            65	#40:  *  Andreas Wenckebach            AWh           Vector Informatik GmbH
                            66	#41:  *  Achim Strobelt                Ach           Vector Informatik GmbH
                            67	#42:  *  Alexander Starke              ASe           Vector Informatik GmbH
                            68	#43:  *  Torben Stoessel               TnS           Vector Informatik GmbH
                            69	#44:  *  Marco Riedl                   Rie           Vector Informatik GmbH
                            70	#45:  *  --------------------------------------------------------------------------------------------------------------------
                            71	#46:  *  REVISION HISTORY
                            72	#47:  *  --------------------------------------------------------------------------------------------------------------------
                            73	#48:  *  Version    Date        Author  Change Id        Description
                            74	#49:  *  --------------------------------------------------------------------------------------------------------------------
                            75	#50:  *  03.00.00   2008-02-08  Hp      ESCAN00024337    Adapt configuration switches and function names to match
                            76	#51:  *                                                  naming rules. FTP_CFG.H now generated by Geny.
                            77	#52:  *  03.00.01   2008-02-28  Hp      ESCAN00024955    Add optionally support to map TP-functions into RAM using memmap
                            78	#53:  *  03.01.00   2008-03-12  Rr      ESCAN00025302    Removed pragma for V850 with NEC compiler
                            79	#54:  *                                 ESCAN00027212    Removed CanCancelTransmit() call
                            80	#55:  *  03.02.00   2008-06-05  QPs     ESCAN00027374    Adapted switch name to match name generated by Geny
                            81	#56:  *                         Ci      ESCAN00027409    Added support for configurations with multiple CAN channels
                            82	#57:  *  03.02.01   2008-06-24  MVi     ESCAN00027820    Replaced an if with an ifdef
                            83	#58:  *  03.03.00   2008-11-18  AWh     ESCAN00031393    Allow configurations with both FblTp and tpmc, allow
                            84	#59:  *                                                  alternative txDataBuffer and rxDataBuffer configurations.
                            85	#60:  *  03.04.00   2009-05-18  Ci      ESCAN00032418    Removed obsolete code
                            86	#61:  *                         Ls      ESCAN00035170    No changes
                            87	#62:  *                         QPs     ESCAN00035243    Support for variable blocksize and STmin
                            88	#63:  *  03.05.00   2009-08-21  Hp      ESCAN00037079    Call Confirmation within FblTpTransmitSF after transmission request
                            89	#64:  *                                                  Remove CAN calls if COM wrapper is used.
                            90	#65:  *  03.05.01   2009-09-10  Hp      ESCAN00037122    Call to CanTxTask removed due to assertion in CANbedded CAN driver
                            91	#66:  *  03.06.00   2009-12-09  TBe     ESCAN00039383    Adaptions for +strict option in Cosmic compiler
                            92	#67:  *  03.07.00   2010-02-16  AWh     ESCAN00040879    Adaptions to reduce compiler warnings, changed include order
                            93	#68:  *                                                  for string.h/stddef.h, readded kTpTxHandle compatibility macro
                            94	#69:  *  03.08.00   2010-10-14  Ci      ESCAN00044300    No changes (see header file)
                            95	#70:  *                         Hp      ESCAN00045954    TxTimer isn't reset after successfull send repetition
                            96	#71:  *  03.09.00   2012-01-23  AWh     ESCAN00054601    Added configuration to allow dynamic
                            97	#72:  *                                                  switch normal/extended addressing
                            98	#73:  *  03.10.00   2012-05-25  Ach     ESCAN00057426    STmin = 255 can lead to blocked reception of physical frames
                            99	#74:  *                         CB      ESCAN00059071    Added interrupt lock around critical sections.

                                   Fri Apr 10 08:32:21 2020           Page 3
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
                           100	#75:  *  03.11.00   2012-07-06  CB      ESCAN00059951    Modified Interrupt lock in FblTpTask
                           101	#76:  *  03.12.00   2013-04-19  ASe     ESCAN00064581    Adapted comments to use Doxygen
                           102	#77:  *                         Hp      ESCAN00066786    TpRx- and TpTx states splitted and simplified, separate var. for rxSN
                           103	#78:  *                                 ESCAN00066792    Add support for queued requests
                           104	#79:  *  03.12.01   2013-07-25  Hp      ESCAN00068861    Remove compile check INTERRUPT_CONFIRMATION with CAN_CONFIRMATION
                           105	#80:  *                                                  for CBD-Driver usage
                           106	#81:  *                                 ESCAN00069345    Separate FC-timer for FC.Wait transmission
                           107	#82:  *  03.13.00   2015-07-22  AWh     ESCAN00084003    Beautification
                           108	#83:  *  03.14.00   2015-08-18  QPs     ESCAN00084611    FBL_CLIENT_RENAULT switch removed
                           109	#84:  *  03.14.01   2015-12-03  TnS     ESCAN00050252    Frame padding error with IAR compiler
                           110	#85:  *  03.15.00   2016-02-19  Ach     ESCAN00088425    Changed kFblTxOk to kFblCanTxOk
                           111	#86:  *                         TnS     ESCAN00088469    Added MISRA deviation comments
                           112	#87:  *  03.16.00   2016-07-29  CB      ESCAN00089471    Adapted include file list
                           113	#88:  *  03.17.00   2016-08-24  Rie     ESCAN00091652    Reworked extended addressing
                           114	#89:  *  03.18.00   2016-09-26  CB      ESCAN00053859    Removed unnecessary volatile qualifiers
                           115	#90:  *  03.19.00   2016-11-08  TnS     ESCAN00092702    Added support for Mixed Addressing
                           116	#91:  *  03.20.00   2017-05-16  Ach     ESCAN00095195    Usage of STmin parameters F1-F9 should be configurable
                           117	#92:  *  03.21.00   2017-11-20  CB      ESCAN00097480    FblTpTransmit reads from uninitialized memory
                           118	#93:  *
                           119	#94:  *  NOTE: This version has been adapted and must be used with Flash-Bootloader ONLY!
                           120	#95:  **********************************************************************************************************************/
                           121	#96: #include "fbl_inc.h"
                           122	#98: /***********************************************************************************************************************
                           123	#99:  *  VERSION CHECK
                           124	#100:  **********************************************************************************************************************/
                           125	#102: #if ( FBLTP_ISO_VERSION != 0x0321u )
                           126	#103: # error "fbl_tp.c and fbl_tp.h used in different versions, please check!"
                           127	#104: #endif
                           128	#105: #if ( FBLTP_ISO_RELEASE_VERSION != 0x00u )
                           129	#106: # error "fbl_tp.c and fbl_tp.h used in different versions, please check!"
                           130	#107: #endif
                           131	#109: #if ( FBLTP_ISO_VERSION != _FBLTP_VERSION )
                           132	#110: # error "Error in fbl_tp.c: Source and v_ver.h file are inconsistent!"
                           133	#111: #endif
                           134	#112: #if ( FBLTP_ISO_RELEASE_VERSION != _FBLTP_RELEASE_VERSION )
                           135	#113: # error "Error in fbl_tp.c: Source and v_ver.h file are inconsistent!"
                           136	#114: #endif
                           137	#116: /* PRQA S 3453 FblTp_3453 */ /* MD_MSR_19.7 */
                           138	#117: /* PRQA S 3458 FblTp_3458 */ /* MD_MSR_19.4 */
                           139	#119: /***********************************************************************************************************************
                           140	#120:  *  TRANSPORT LAYER VERSION
                           141	#121:  **********************************************************************************************************************/
                           142	#124: /* OSEK_TRANSPORT_LAYER_VERSION is defined within the tp.h file */
                           143	#125: MEMORY_ROM vuint8 kFblTpMainVersion   = (vuint8)((FBLTP_ISO_VERSION >> 8)  & 0xFFu);
                           144	#126: MEMORY_ROM vuint8 kFblTpSubVersion    = (vuint8)(FBLTP_ISO_VERSION & 0xFFu);
                           145	#127: MEMORY_ROM vuint8 kFblTpBugFixVersion = FBLTP_ISO_RELEASE_VERSION;
                           146	#130: #if !defined( FBLDRVCAN_REFERENCE_IMPLEMENTATION )
                           147	#131: # define FBLDRVCAN_REFERENCE_IMPLEMENTATION  0x0100u
                           148	#132: #endif
                           149	#134: /***********************************************************************************************************************
                           150	#135:  *  EXTERNAL DEFINE NAME ADAPTATION
                           151	#136:  **********************************************************************************************************************/
                           152	#138: #if defined( MULTIPLE_RECEIVE_BUFFER )  
                           153	#139:   /* Internal check usage only */
                           154	#140: # define FBLTP_PROCESSOR_OK
                           155	#141: # define kCopyNoData             kCanNoCopyData

                                   Fri Apr 10 08:32:21 2020           Page 4
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
                           156	#142: #endif
                           157	#144: #if !defined( FBLTP_PROCESSOR_OK )
                           158	#145: # error "Used processor/compiler is not specified correct for usage"
                           159	#146:   /* The processor (and in some cases the compiler, too) must be specified within the generated file for your ECU.
                           160	#147:    * See the define checks above for supported processor and compiler types. The define is set via the generation tool
                           161	#148:    * automatically, so in case of the 'normal way' you should not see this error! */
                           162	#149: #endif
                           163	#151: /***********************************************************************************************************************
                           164	#152:  *  TRANSPORT PROTOCOL TPCI CODES AND PROTOCOL LENGTHS
                           165	#153:  **********************************************************************************************************************/
                           166	#155: #define kL4_SingleFrame                0x00u
                           167	#156: #define kL4_FirstFrame                 0x10u
                           168	#157: #define kL4_ConsecutiveFrame           0x20u
                           169	#158: #define kL4_FlowControl                0x30u
                           170	#159: #define kL4_FlowStatus_Overrun         0x32u
                           171	#160: #define kL4_ErrorFrame                 0x40u
                           172	#162: #define kL4_FrameTypeMask              0xF0u
                           173	#164: #define kL4_SNMask                     0x0Fu
                           174	#165: #define kL4_MaxSN                      0x0Fu
                           175	#166: #define kL4_BSMask                     0x0Fu
                           176	#167: #define kL4_SFData                     0x0Fu
                           177	#168: #define kL4_FFData                     0x0Fu
                           178	#170: #define kCanFrameLength                8u        /**< Total length of a CAN frame */
                           179	#173: #define kFlowStateCTS                  0x00u     /* CTS=Clear to send */
                           180	#174: #define kFlowStateWait                 0x01u
                           181	#175: #define kFlowStateOverrun              0x02u
                           182	#177: #define kWaitForFFConfInterrupt        0x10u     /**< First frame */
                           183	#178: #define kWaitForCFConfInterrupt        0x20u     /**< Consecutive frame */
                           184	#179: #define kWaitForLastCFConfInterrupt    0x30u     /**< Very last consecutive frame */
                           185	#180: #define kWaitForFCConfInterrupt        0x40u     /**< Flow control */
                           186	#181: #define kWaitForSFConfInterrupt        0x50u     /**< Single frame */
                           187	#182: #define kWaitForFCOverrunConfInterrupt 0x60u     /**< Overrun frame */
                           188	#183: #define kWaitForFCWaitFrameConfInterrupt 0x70u   /**< Wait frame transmission (currently not supported) */
                           189	#184: #define kWaitForFCQueuedReqWaitFrameConfInterrupt 0x80u  /**< Waif frame transmission for queued requests */
                           190	#186: #define kConfInterruptOccured          0x01u
                           191	#188: /***********************************************************************************************************************
                           192	#189:  *  TRANSPORT PROTOCOL STATE ACCESS
                           193	#190:  **********************************************************************************************************************/
                           194	#192: /** Enum for bTpRxState */
                           195	#193: typedef enum
                           196	#194: {
                           197	#195:    kTpRxIdle = 0x00u,
                           198	#196:    kTpRxWaitCF = 0x01u,
                           199	#197:    kTpRxBlocked = 0x10u
                           200	#198: } tTpRxState;
                           201	#200: /** Tx states */
                           202	#201: typedef enum
                           203	#202: {
                           204	#203:    kTpTxIdle,
                           205	#204:    kTpTxWaitFC,
                           206	#205:    kTpTxWaitForTxCF,
                           207	#206:    kTpTxRepeatTransmit
                           208	#207: } tTpTxState;
                           209	#210: /***********************************************************************************************************************
                           210	#211:  *  SPECIAL FEATURES SUPPORT
                           211	#212:  **********************************************************************************************************************/

                                   Fri Apr 10 08:32:21 2020           Page 5
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
                           212	#214: /* Data length optimization for lower CPU's */
                           213	#215: #if defined( C_CPUTYPE_8BIT )
                           214	#216: # if ((kFblTpTimeoutCF / TpCallCycle) > 0x00FFu)
                           215	#217: typedef vuint16 tTpRxTimer;
                           216	#218: # else
                           217	#219: typedef vuint8 tTpRxTimer;
                           218	#220: # endif
                           219	#221: # if ((kFblTpTimeoutFC / TpCallCycle) > 0x00FFu)
                           220	#222: typedef vuint16 tTpTxTimer;
                           221	#223: # else
                           222	#224: typedef vuint8 tTpTxTimer;
                           223	#225: # endif
                           224	#226: # if ((kFblTpConfInterruptTimeout / TpCallCycle) > 0x00FFu)
                           225	#227: typedef vuint16 tTpConfTimer;
                           226	#228: # else
                           227	#229: typedef vuint8 tTpConfTimer;
                           228	#230: # endif
                           229	#231: #else
                           230	#232: typedef vuint16 tTpRxTimer;
                           231	#233: typedef vuint16 tTpTxTimer;
                           232	#234: typedef vuint16 tTpConfTimer;
                           233	#235: #endif
                           234	#237: /***********************************************************************************************************************
                           235	#238:  *  TP DATA ACCESS
                           236	#239:  **********************************************************************************************************************/
                           237	#241: # define kTargetByteOffset    (0u)
                           238	#243: #define kTpciPos              (0u + kTargetByteOffset)
                           239	#244: #define kBsPos                (1u + kTargetByteOffset)
                           240	#245: #define kSTminPos             (2u + kTargetByteOffset)
                           241	#246: #define kLengthPos            (1u + kTargetByteOffset)
                           242	#247: #define kSFDataPos            (1u + kTargetByteOffset)
                           243	#248: #define kFFDataPos            (2u + kTargetByteOffset)
                           244	#249: #define kCFDataPos            (1u + kTargetByteOffset)
                           245	#251: #if defined( MULTIPLE_RECEIVE_BUFFER )
                           246	#252: # define tpCanRxData data
                           247	#253: #endif /* MULTIPLE_RECEIVE_BUFFER */
                           248	#255: #define TPCI_Byte            (tpCanRxData[kTpciPos])
                           249	#256: #define DL_Byte              (tpCanRxData[kLengthPos])
                           250	#257: #define STmin_Byte           (tpCanRxData[kSTminPos])
                           251	#259: /* Start value for sequence number counter */
                           252	#260: # define kTpSNStartValue      1u
                           253	#262: /***********************************************************************************************************************
                           254	#263:  *  GLOBAL TRANSPORT LAYER DATA
                           255	#264:  **********************************************************************************************************************/
                           256	#266: /**
                           257	#267:  *  \description Index to receive data in RX flat data buffer model. For RX only the flat data model is supported.
                           258	#268:  *  \note        Value range / coding: 0..255
                           259	#269:  */
                           260	#270: tTpDataType gbTpRxDL;
                           261	#272: /**
                           262	#273:  *  \description Index to transmit data in TX flat data buffer model. For TX the model of transmit buffer could be
                           263	#274:  *               chosen between flat (linear) and cyclic buffer handling.
                           264	#275:  *  \note        Value range / coding: 0..255
                           265	#276:  */
                           266	#277: tTpDataType gbTpTxDL;
                           267	#279: /**

                                   Fri Apr 10 08:32:21 2020           Page 6
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
                           268	#280:  *  \description Length of data to be received. The size of this variable limits the maximum size of messages.
                           269	#281:  *  \note        Value range / coding: 0..255
                           270	#282:  */
                           271	#283: tTpDataType gbTpRxLength;
                           272	#285: /**
                           273	#286:  *  \description Internal Tx states are stored here. This variable should be stored in bit addressed memory areas for fast
                           274	#287:  *               and easy bit access. MEMORY_NEAR is defined within the included generated header v_def.h.
                           275	#288:  *
                           276	#289:  *  \verbatim
                           277	#290:  *   Usage of variable vuint8 bTpTxState:
                           278	#291:  *   7654 3210
                           279	#292:  *   |||| ++++ unused
                           280	#293:  *   ||++ Internal TX state: 0x00 Idle,
                           281	#294:  *   ||                      0x10 Wait for first FC,
                           282	#295:  *   ||                      0x20 Wait for TX of CF
                           283	#296:  *   ||                      0x30 Wait resent last message
                           284	#297:  *   ++ Unused
                           285	#298:  *  \endverbatim
                           286	#299:  *
                           287	#300:  *  \attention   There are some typecasts to avoid compiler warnings. These casts have to be adapted if the type of
                           288	#301:  *               bTpTxState is changed.
                           289	#302:  *  \note        Value range / coding: 0..255
                           290	#303:  */
                           291	#304: static MEMORY_NEAR tTpTxState volatile bTpTxState;
                           292	#306: /**
                           293	#307:  *  \description Internal Rx states are stored here. This variable should be stored in bit addressed memory areas for fast
                           294	#308:  *               and easy bit access. MEMORY_NEAR is defined within the included generated header v_def.h.
                           295	#309:  *
                           296	#310:  *  \verbatim
                           297	#311:  *   Usage of variable vuint8 bTpRxState:
                           298	#312:  *   7654 3210
                           299	#313:      |||| |||+ Internal RX state                           0x00 Idle
                           300	#314:      |||| |||                                              0x01 kTpRxWaitCF
                           301	#315:      |||+---- Lock for single buffer usage (e.g. diagnose) 0x00 kTpRxFree
                           302	#316:  *   |||  |||                                              0x10 kTpRxBlocked
                           303	#317:  *   +++  +++  unused
                           304	#318:  *  \endverbatim
                           305	#319:  *
                           306	#320:  *  \attention   There are some typecasts to avoid compiler warnings. These casts have to be adapted if the type of
                           307	#321:  *               bTpRxState is changed.
                           308	#322:  *  \note        Value range / coding: 0..03
                           309	#323:  */
                           310	#324: static MEMORY_NEAR tTpRxState volatile bTpRxState;
                           311	#326: /**
                           312	#327:  *  \description The block size (BS) runs from 0 to 15, so the requested BS is stored into the high nibble and the
                           313	#328:  *               actual counter value is represented within the low nibble.
                           314	#329:  *               Rx means: Send in own FC. The application can change the block size via an access macro.
                           315	#330:  *
                           316	#331:  *  \verbatim
                           317	#332:  *   Usage of variable vuint8 bRxBlockSize:
                           318	#333:  *   7654 3210
                           319	#334:  *   |||| ++++BlockSize counter for rx usage, range from 0x1 to 0xF (variable)
                           320	#335:  *   ||||     (This is a nibble counter from own BS down to 0)
                           321	#336:  *   ++++ BlockSize BS start value for rx usage, range 0x0 to 0xF (fix)
                           322	#337:  *  \endverbatim
                           323	#338:  *

                                   Fri Apr 10 08:32:21 2020           Page 7
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
                           324	#339:  *  \note        Value range / coding: 0..255
                           325	#340:  */
                           326	#341: MEMORY_NEAR volatile vuint8 bRxBlockSize;
                           327	#343: /**
                           328	#344:  *  \description Due to the block size that runs from 0 to 255 the block size value and block size counter cannot
                           329	#345:  *               be stored in a single byte.
                           330	#346:  *
                           331	#347:  *  \verbatim
                           332	#348:  *   Usage of variable vuint8 bRxBSCounter
                           333	#349:  *   7654 3210
                           334	#350:  *   ++++ ++++ BlockSize counter, range from 0x01 to 0xFF
                           335	#351:  *  \endverbatim
                           336	#352:  *
                           337	#353:  *  \note        Value range / coding: 0..255
                           338	#354:  */
                           339	#355: MEMORY_NEAR volatile vuint8 bRxBSCounter;
                           340	#357: /**
                           341	#358:  *  \description The requested or default STmin value is stored in the variable bRxSTmin.
                           342	#359:  *               RX means: Send in own FC.
                           343	#360:  *               STmin via an access macro.
                           344	#361:  *  \note        Value range / coding: 0..255
                           345	#362:  */
                           346	#363: vuint8 bRxSTmin;
                           347	#367: /***********************************************************************************************************************
                           348	#368:  *  LOCAL TRANSPORT LAYER DATA
                           349	#369:  **********************************************************************************************************************/
                           350	#371: /**
                           351	#372:  *  \description The segment counter is calculated at start of transmit and counts down to zero. Attention: SN is
                           352	#373:  *               stored within and used from low nibble of can transmit buffer! Do not overwrite can transmit
                           353	#374: *                buffer by other functions!
                           354	#375:  *  \note        Value range / coding: 0..255
                           355	#376:  */
                           356	#377: static MEMORY_NEAR volatile tTpDataType bTxSEG;
                           357	#379: #if defined( FBL_TP_ENABLE_ONLY_FIRST_FC )
                           358	#380: /**
                           359	#381:  *  \description The block size (BS) runs from 0 to 15, so the requested BS is stored into the high nibble and the
                           360	#382:  *               actual counter value is represented within the low nibble.
                           361	#383:  *               TX means: extracted from received FC and used for transmission of data
                           362	#384:  *
                           363	#385:  *  \verbatim
                           364	#386:  *   Usage of variable vuint8 bTxBlockSize:
                           365	#387:  *   7654 3210
                           366	#388:  *   |||| ++++BlockSize counter for TX usage, range from 0x1 to 0xF (variable)
                           367	#389:  *   ||||     (This is a nibble counter from counterpart BS down to 0)
                           368	#390:  *   ++++ BlockSize BS start value for TX usage, range 0x0 to 0xF (fix)
                           369	#391:  *  \endverbatim
                           370	#392:  *
                           371	#393:  *  \note        Value range / coding: 0..255
                           372	#394:  */
                           373	#395: static MEMORY_NEAR volatile vuint8 bTxBlockSize;
                           374	#396: #endif
                           375	#398: /**
                           376	#399:  *  \description Due to the block size that runs from 0 to 255 the block size value and block size counter cannot
                           377	#400:  *               be stored in a single byte.
                           378	#401:  *
                           379	#402:  *  \verbatim

                                   Fri Apr 10 08:32:21 2020           Page 8
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
                           380	#403:  *   Usage of variable vuint8 bRxBSCounter
                           381	#404:  *   7654 3210
                           382	#405:  *   ++++ ++++ BlockSize counter, range from 0x01 to 0xFF
                           383	#406:  *  \endverbatim
                           384	#407:  *
                           385	#408:  *  \note        Value range / coding: 0..255
                           386	#409:  */
                           387	#410: static MEMORY_NEAR volatile vuint8 bTxBSCounter;
                           388	#412: /**
                           389	#413:  *  \description bTxSN is a modulo 15 counter for the sequence number to be transmitted in consecutive frames.
                           390	#414:  *  \note        Value range / coding: 0..255 (internally) , 0..15 (externally)
                           391	#415:  */
                           392	#416: static vuint8 bTxSN;
                           393	#418: /**
                           394	#419:  *  \description bRxSN is a modulo 15 counter for the sequence number to be received in consecutive frames.
                           395	#420:  *  \note        Value range / coding: 0..255 (internally) , 0..15 (externally)
                           396	#421:  */
                           397	#422: static vuint8 bRxSN;
                           398	#424: /**
                           399	#425:  *  \description The timer runs until the timer value is zero. If it changes from 1 to 0 the specified reaction
                           400	#426:  *               (e.g. timeout) have to be done.
                           401	#427:  *               The maximum possible time depends on the call cycle and the timer size in bits. (e.g. 10ms call cycle,
                           402	#428:  *               8 bit is resulting in 255 * 10ms = 2550 ms timer runtime)
                           403	#429:  *  \note        Value range / coding: 0..255
                           404	#430:  */
                           405	#431: static volatile tTpRxTimer bRxTimer;
                           406	#433: /**
                           407	#434:  *  \description The timer runs until the timer value is zero. If it changes from 1 to 0 the specified reaction
                           408	#435:  *               (e.g. timeout) have to be done.
                           409	#436:  *               The maximum possible time depends on the call cycle and the timer size in bits. (e.g. 10ms call cycle,
                           410	#437:  *               8 bit is resulting in 255 * 10ms = 2550 ms timer runtime)
                           411	#438:  *  \note        Value range / coding: 0..255
                           412	#439:  */
                           413	#440: static volatile tTpTxTimer bTxTimer;
                           414	#442: /**
                           415	#443:  *  \description Global value to store the requested minimum separation time received in the flow control frames.
                           416	#444:  *               The received STmin value will be adjusted to multiples of TpCallCycle.
                           417	#445:  *  \note        Value range / coding: 0..255 / in ms
                           418	#446:  */
                           419	#447: static vuint8  STmin;
                           420	#449: /**
                           421	#450:  *  \description Value to store the number of bytes at the end of a frame that have to be padded with zeros.
                           422	#451:  *  \note        Value range / coding: 0..kCF_DataLength - 1
                           423	#452:  */
                           424	#453: static vuint8 bPaddingLength;
                           425	#455: /**
                           426	#456:  *  \brief       Additional flags for different purposes
                           427	#457:  *
                           428	#458:  *  \verbatim
                           429	#459:  *  7654 3210
                           430	#460:  *          +- FC is already evaluated
                           431	#461:  *         +-- Signal flag for interrupt occurred, that set RxTimerValue
                           432	#462:  *  ++++ ++--- not used
                           433	#463:  *  \endverbatim
                           434	#464:  *
                           435	#465:  * \attention    There are some typecasts to avoid compiler warnings. These casts have to be adapted if the type of

                                   Fri Apr 10 08:32:21 2020           Page 9
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
                           436	#466:  *               bStateFlags is changed.
                           437	#467:  */
                           438	#468: static vuint8 bStateFlags;
                           439	#470: #if defined( FBL_TP_ENABLE_VARIABLE_TX_DLC )
                           440	#471: /** Storage of current DLC */
                           441	#472: static vuint8 tpTxDLC;
                           442	#474: #endif
                           443	#476: #if defined( FBL_TP_ENABLE_CONFIRMATION_INTERRUPT )
                           444	#477: static MEMORY_NEAR vuint8 gTpConfState;         /**< State variable for confirmation interrupt handling */
                           445	#478: static MEMORY_NEAR tTpConfTimer gTpConfTimer;   /**< Counter variable for confirmation timeout observation */
                           446	#479: #endif /* FBL_TP_ENABLE_CONFIRMATION_INTERRUPT */
                           447	#481: /***********************************************************************************************************************
                           448	#482:  *  TRANSPORT LAYER VARIABLE ASSIGNMENT
                           449	#483:  **********************************************************************************************************************/
                           450	#485: #define kDefaultBS         8u
                           451	#487: #if defined( FBL_TP_ENABLE_ALTERNATIVE_TXRX_BUFFERS )
                           452	#488: # define txDataBuffer      fblTpTxDataPtr
                           453	#489: # define rxDataBuffer      fblTpRxDataPtr
                           454	#490: #else
                           455	#491: # define txDataBuffer      DiagBuffer
                           456	#492: # define rxDataBuffer      DiagBuffer
                           457	#493: #endif
                           458	#495: #define txDataIndex        gbTpTxDL
                           459	#496: #define txSEG              bTxSEG
                           460	#497: #define txSN               bTxSN
                           461	#499: #define rxDataIndex        gbTpRxDL
                           462	#500: #define rxDataLength       gbTpRxLength
                           463	#501: #define rxSN               bRxSN
                           464	#503: #if !defined( kFblTpSTMinF1F9 )
                           465	#504: # define kFblTpSTMinF1F9   1u       /**< Default value if a STmin parameter between F1 and F9 is requested. */
                           466	#505: #endif
                           467	#507: /***********************************************************************************************************************
                           468	#508:  *  TRANSPORT PROTOCOL TPCI CODES AND PROTOCOL LENGHTS
                           469	#509:  **********************************************************************************************************************/
                           470	#511: #define kSF_DataLength     (7u - kTargetByteOffset)
                           471	#512: #define kFF_DataLength     (6u - kTargetByteOffset)
                           472	#513: #define kFC_DataLength     (3u)
                           473	#514: #define kCF_DataLength     (7u - kTargetByteOffset)
                           474	#516: #define kConfInterruptTimeoutCounter         (kFblTpConfInterruptTimeout / TpCallCycle)
                           475	#518: #if defined( FBL_TP_ENABLE_CONFIRMATION_INTERRUPT )
                           476	#520: /* Set timeout timer as well */
                           477	#521: # define SetWaitForFFConfInterrupt()         { \
                           478	#522:                                                 gTpConfState = kWaitForFFConfInterrupt; \
                           479	#523:                                                 gTpConfTimer = kConfInterruptTimeoutCounter; \
                           480	#524:                                              }
                           481	#525: # define SetWaitForCFConfInterrupt()         { \
                           482	#526:                                                 gTpConfState = kWaitForCFConfInterrupt; \
                           483	#527:                                                 gTpConfTimer = kConfInterruptTimeoutCounter; \
                           484	#528:                                              }
                           485	#529: # define SetWaitForLastCFConfInterrupt()     { \
                           486	#530:                                                 gTpConfState = kWaitForLastCFConfInterrupt; \
                           487	#531:                                                 gTpConfTimer = kConfInterruptTimeoutCounter; \
                           488	#532:                                              }
                           489	#533: # define SetWaitForFCConfInterrupt()         { \
                           490	#534:                                                 gTpConfState = kWaitForFCConfInterrupt; \
                           491	#535:                                                 gTpConfTimer = kConfInterruptTimeoutCounter; \

                                   Fri Apr 10 08:32:21 2020           Page 10
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
                           492	#536:                                              }
                           493	#537: # define SetWaitForFCOverrunConfInterrupt()  { \
                           494	#538:                                                 gTpConfState = kWaitForFCOverrunConfInterrupt; \
                           495	#539:                                                 gTpConfTimer = kConfInterruptTimeoutCounter; \
                           496	#540:                                              }
                           497	#542: # define SetWaitForSFConfInterrupt()         { \
                           498	#543:                                                 gTpConfState = kWaitForSFConfInterrupt; \
                           499	#544:                                                 gTpConfTimer = kConfInterruptTimeoutCounter; \
                           500	#545:                                              }
                           501	#547: # define SetWaitForQueuedReqWaitFrameConfInterrupt() \
                           502	#548:                                              { \
                           503	#549:                                                 gTpConfState = kWaitForFCQueuedReqWaitFrameConfInterrupt; \
                           504	#550:                                                 gTpConfTimer = kConfInterruptTimeoutCounter; \
                           505	#551:                                              }
                           506	#553: # define IsWaitingForConfInterrupt()         (0u != gTpConfState)
                           507	#554: # define GetConfInterruptState()             gTpConfState
                           508	#556: # define SetConfInterruptTimeout()           (gTpConfTimer = kConfInterruptTimeoutCounter)
                           509	#557: # define GetConfInterruptTimer()             gTpConfTimer
                           510	#559: # define ResetConfState()                    (gTpConfState = 0u)
                           511	#560: # define InitConfState()                     {gTpConfState = 0u; gTpConfTimer = 0u;}
                           512	#562: #endif /* FBL_TP_ENABLE_CONFIRMATION_INTERRUPT */
                           513	#564: /***********************************************************************************************************************
                           514	#565:  *  TRANSPORT PROTOCOL LOCALLY USED TIMES
                           515	#566:  **********************************************************************************************************************/
                           516	#568: #define kTimeoutCF         (kFblTpTimeoutCF / TpCallCycle)  /**< Timer value in counter units */
                           517	#569: #define kTimeoutFC         (kFblTpTimeoutFC / TpCallCycle)  /**< Timer value in counter units */
                           518	#571: #if defined(kFblTpTransmitFCWait)
                           519	#572: #define kTransmitFCWait    (kFblTpTransmitFCWait / TpCallCycle)  /**< Retransmission cycle of FC.Wait frames */
                           520	#573: #else
                           521	#574: #define kTransmitFCWait    (((kFblTpTimeoutFC * 8u) / 10u) / TpCallCycle)  /**< Retransmission cycle of FC.Wait frames is 80% of FC.timeout (N_Br/N_Bs) */
                           522	#575: #endif
                           523	#577: /** Timer value in counter units */
                           524	#578: #define kTransmitCF        (((kFblTpTransmitCF > TpCallCycle) ? kFblTpTransmitCF : TpCallCycle) / TpCallCycle)
                           525	#580: #define kTimeoutFCDiagFF   (kTimeoutFC + 1u)                /* Timer value in counter units */
                           526	#582: #define kTimerOff          0u
                           527	#584: /***********************************************************************************************************************
                           528	#585:  *  TRANSPORT PROTOCOL TIMER ACCESS
                           529	#586:  **********************************************************************************************************************/
                           530	#588: #define StartRxTimeoutCF(newVal, newState)   { \
                           531	#589:                                                 bRxTimer   = (newVal); \
                           532	#590:                                                 bTpRxState = (newState); \
                           533	#591:                                              }
                           534	#592: #define StartTxWaitForTxCF(newVal, newState) { \
                           535	#593:                                                 bTxTimer   = (newVal); \
                           536	#594:                                                 bTpTxState = (newState); \
                           537	#595:                                              }
                           538	#596: #define StartTxTimeoutFC(newVal, newState)   { \
                           539	#597:                                                 bTxTimer   = (newVal); \
                           540	#598:                                                 bTpTxState = (newState); \
                           541	#599:                                              }
                           542	#601: #define StopTxTimer()                        (bTxTimer = kTimerOff)
                           543	#602: #define StopRxTimer()                        (bRxTimer = kTimerOff)
                           544	#603: #define TxTimerValue()                       bTxTimer
                           545	#604: #define DecTxTimerValue()                    (bTxTimer--)
                           546	#605: #define SetTxTimerValue(t)                   (bTxTimer = (t))
                           547	#606: #define RxTimerValue()                       bRxTimer

                                   Fri Apr 10 08:32:21 2020           Page 11
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
                           548	#607: #define DecRxTimerValue()                    (bRxTimer--)
                           549	#608: #define SetRxTimerValue(t)                   (bRxTimer = (t))
                           550	#610: /***********************************************************************************************************************
                           551	#611:  *  TRANSPORT PROTOCOL STATE ACCESS
                           552	#612:  **********************************************************************************************************************/
                           553	#614: #define txGetState()          bTpTxState
                           554	#615: #define txSetState(newS)      (bTpTxState = (newS))
                           555	#617: #define rxGetState()          bTpRxState
                           556	#618: #define rxSetState(newS)      (bTpRxState = (newS))
                           557	#620: #define rxGetSN()             (rxSN & kL4_SNMask)
                           558	#621: #define rxSetSN(newSN)        (rxSN = (newSN))
                           559	#623: #define rxIncSN()             (rxSN++)
                           560	#624: #define rxResetSN()           (rxSN = 0u)
                           561	#626: #if defined( FBL_TP_ENABLE_ONLY_FIRST_FC )
                           562	#627: # define FCEvaFlag            0x01u
                           563	#628: # define txSetFCEvaFlag()     (bStateFlags |= FCEvaFlag)
                           564	#629: # define txGetFCEvaFlag()     (FCEvaFlag == (bStateFlags & FCEvaFlag))
                           565	#630: # define txClearFCEvaFlag()   (bStateFlags &= FblInvert8Bit(FCEvaFlag))
                           566	#631: #endif
                           567	#633: #define TpRxCFFlag            0x02u
                           568	#634: #define SetRxCFFlag()         (bStateFlags |= TpRxCFFlag)
                           569	#635: #define GetRxCFFlag()         (TpRxCFFlag == (bStateFlags & TpRxCFFlag))
                           570	#636: #define ClearRxCFFlag()       (bStateFlags &= FblInvert8Bit(TpRxCFFlag))
                           571	#638: #if defined( FBL_TP_ENABLE_ACCEPT_TOO_LARGE_DATA )
                           572	#639: # define TpRxBlockTooLargeFlag         0x04u
                           573	#640: # define SetRxBlockTooLargeFlag()      (bStateFlags |= TpRxBlockTooLargeFlag)
                           574	#641: # define GetRxBlockTooLargeFlag()      (TpRxBlockTooLargeFlag == (bStateFlags &  TpRxBlockTooLargeFlag))
                           575	#642: # define ClearRxBlockTooLargeFlag()    (bStateFlags &= FblInvert8Bit(TpRxBlockTooLargeFlag))
                           576	#643: #endif
                           577	#645: #define ResetStateFlags()     (bStateFlags = 0u)
                           578	#647: #if defined( FBL_TP_ENABLE_ACCEPT_TOO_LARGE_DATA )
                           579	#648: # define ResetRxStateFlags()  (bStateFlags &= FblInvert8Bit(TpRxCFFlag | TpRxBlockTooLargeFlag))
                           580	#649: #else
                           581	#650: # define ResetRxStateFlags()  (bStateFlags &= FblInvert8Bit(TpRxCFFlag))
                           582	#651: #endif
                           583	#653: /***********************************************************************************************************************
                           584	#654:  *  TRANSPORT PROTOCOL BLOCKSIZE ACCESS
                           585	#655:  **********************************************************************************************************************/
                           586	#658: /* Macros for block size handling with maximum BS-value of 255 */
                           587	#659: #if defined( FBL_TP_ENABLE_ONLY_FIRST_FC )
                           588	#660: # define txSetBS(newBS)    {bTxBlockSize = (newBS); bTxBSCounter = (newBS);} /* Reset counter-byte also */
                           589	#661: # define txReloadBSCnt()   (bTxBSCounter = bTxBlockSize)
                           590	#662: #else
                           591	#663: # define txSetBS(newBS)    (bTxBSCounter = (newBS))
                           592	#664: #endif
                           593	#665: #define txDecBSCnt()       (bTxBSCounter--)                 /* Call only if BS>0 */
                           594	#666: #define txCheckBSCnt()     (bTxBSCounter)
                           595	#667: #define txCheckBSZero()    (bTxBSCounter)
                           596	#668: #define txClearBS()        (bTxBSCounter = 0u)
                           597	#670: #define rxReloadBSCnt()    (bRxBSCounter = (bRxBlockSize))  /* BS must be counted to 0 */
                           598	#671: #define rxDecBSCnt()       (bRxBSCounter--)                 /* Call only if BS > 0 */
                           599	#672: #define rxCheckBSCnt()     (bRxBSCounter)
                           600	#673: #define rxCheckBSZero()    (bRxBSCounter)
                           601	#675: /***********************************************************************************************************************
                           602	#676:  *  TRANSPORT PROTOCOL EXTENDED ADDRESSING SET MACROS
                           603	#677:  **********************************************************************************************************************/

                                   Fri Apr 10 08:32:21 2020           Page 12
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
                           604	#680: /***********************************************************************************************************************
                           605	#681:  *  CHECK FOR POSSIBLE COMPILE AND DEFINITION ERRORS
                           606	#682:  **********************************************************************************************************************/
                           607	#684: #if ( (kFblTpSTMin / TpCallCycle) > 0x00FF )
                           608	#685: # error "Time kFblTpSTMin too large!"
                           609	#686: #endif
                           610	#688: #if ( ((kFblTpTimeoutFC / TpCallCycle) * TpCallCycle) != kFblTpTimeoutFC )
                           611	#689: # error "kFblTpTimeoutFC must be a integer multiple of TpCallCycle"
                           612	#690: #endif
                           613	#692: #if ( ((kFblTpTimeoutCF / TpCallCycle) * TpCallCycle) != kFblTpTimeoutCF )
                           614	#693: # error "TpTimeoutCF must be a integer multiple of TpCallCycle"
                           615	#694: #endif
                           616	#696: #if ( ((kFblTpTransmitCF / TpCallCycle) * TpCallCycle) != kFblTpTransmitCF )
                           617	#697: # error "kFblTpTransmitCF must be a integer multiple of TpCallCycle"
                           618	#698: #endif
                           619	#700: #if defined( FBL_TP_DISABLE_OSEK_DATA_LENGTH ) && \
                           620	#701:     defined( C_CPUTYPE_8BIT )
                           621	#702: # if ( kFblTpBufferSize > 0xFF )
                           622	#703: #  error "Buffer for transport layer is larger than 255 bytes"
                           623	#704: # endif
                           624	#705: #endif
                           625	#707: #if ( kFblTpBufferSize > 0x0FFF )
                           626	#708: # error "Buffer for transport layer is larger than 4095 bytes"
                           627	#709: #endif
                           628	#712: /* PRQA L:FblTp_3453 */
                           629	#713: /* PRQA L:FblTp_3458 */
                           630	#715: /***********************************************************************************************************************
                           631	#716:  *  LOCAL FUNCTION PROTOTYPES
                           632	#717:  **********************************************************************************************************************/
                           633	#718: # define FBLTP_RAMCODE_START_SEC_CODE
                           634	#719: # include "MemMap.h" /* PRQA S 5087 */ /* MD_MSR_19.1 */
                           635	#720: static void AssembleFC(void);
                           636	#721: static vuint8 CAN_SaveTransmit(void);
                           637	#722: static void TxConfirm(vuint8 state);
                           638	#723: static void FblTpInit(void);
                           639	#724: # define FBLTP_RAMCODE_STOP_SEC_CODE
                           640	#725: # include "MemMap.h" /* PRQA S 5087 */ /* MD_MSR_19.1 */
                           641	#727: /***********************************************************************************************************************
                           642	#728:  *  LOCAL FUNCTIONS
                           643	#729:  **********************************************************************************************************************/
                           644	#731: /* Start code segment to be executed in RAM */
                           645	#732: # define FBLTP_RAMCODE_START_SEC_CODE
                           646	#733: # include "MemMap.h" /* PRQA S 5087 */ /* MD_MSR_19.1 */
                           647	#734: /***********************************************************************************************************************
                           648	#735:  *  AssembleFC
                           649	#736:  **********************************************************************************************************************/
                           650	#737: /*! \brief       Assemble an FlowControl Frame
                           651	#738:  **********************************************************************************************************************/
                           652		.section ".vletext", "vax"
                           653		.vle
                           654		.vle
                           655	..bof.C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_tp...43.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl..5E8FB084..0::
                           656		.align	1
                           657	..gh.f.p.0.a.1.r.0.e.0:
                           658		.type	..gh.f.p.0.a.1.r.0.e.0,@object
                           659		.size	..gh.f.p.0.a.1.r.0.e.0,0

                                   Fri Apr 10 08:32:21 2020           Page 13
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
                           660		.global	AssembleFC..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_tp.
                           661	AssembleFC..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_tp.:
                           662	AssembleFC:
                           663	#	    .bf
                           664	.LDW01:
00000000 70e0e000          665		e_lis	r7, %hiadj(fblCwDiagTransmitObject)
00000004 50e70000          666		e_lwz	r7, %lo(fblCwDiagTransmitObject)(r7)
                           667	#739: static void AssembleFC(void)
                           668	#740: {
                           669	#742:    tpCanTxData[kTpciPos] = kL4_FlowControl;
00000008 4b00              670		se_li	r0, 48
0000000a 70a0e000          671		e_lis	r5, %hiadj(bRxBlockSize)
0000000e 18e7a014          672		e_mulli	r7, r7, 20
00000012 1ce70000          673		e_add16i	r7, r7, %lo(fblCanTxObj)
00000016 70079000          674		e_add2is	r7, %hiadj(fblCanTxObj)
0000001a 9807              675		se_stb	r0, 8(r7)
                           676	#744:    tpCanTxData[kBsPos] = (vuint8)FblTpGetRxBS();
0000001c 30050000          677		e_lbz	r0, %lo(bRxBlockSize)(r5)
00000020 70a0e000          678		e_lis	r5, %hiadj(bRxSTmin)
00000024 9907              679		se_stb	r0, 9(r7)
                           680	#746:    tpCanTxData[kSTminPos] = (vuint8)FblTpGetRxSTmin();
00000026 30050000          681		e_lbz	r0, %lo(bRxSTmin)(r5)
                           682	#	    .bs
                           683	.LDW11:
0000002a 18c78008          684		e_addi	r6, r7, 8
                           685	#748: #if defined( FBL_TP_ENABLE_VARIABLE_TX_DLC )
                           686	#749:    tpTxDLC = (vuint8)(kFC_DataLength + kTpciPos);
                           687	#750: #else
                           688	#751:    {
0000002e 9a07              689		se_stb	r0, 10(r7)
                           690	#752:       vuintx i;
                           691	#753:       /* Just for a fine look of the flow control message... */
                           692	#754:       for (i = (kFC_DataLength + kTpciPos); i < kCanFrameLength; i++)
00000030 4830              693		se_li	r0, 3
                           694	.L6:
                           695	#755:       {
                           696	#756:          tpCanTxData[i] = kFblTpFillPattern;
00000032 70e000aa          697		e_li	r7, 170
00000036 7ce601ae          698		stbx	r7, r6, r0
0000003a 2000              699		se_addi	r0, 1
0000003c 2270              700		se_cmpli	r0, 8
0000003e e400              701		se_blt	.L6
                           702	#	    .es
                           703	.LDW21:
                           704	#757:       }
                           705	#758:    }
                           706	#759: #endif
                           707	#761: }
                           708	#	    .ef
                           709	.LDW31:
                           710	#line761
                           711	..lin.5de73f94..15fcb31a.0_1::
                           712	.LDWlin1:
00000040 0004              713		se_blr
                           714	__ghs_eofn_AssembleFC:
                           715		.type	AssembleFC,@function

                                   Fri Apr 10 08:32:21 2020           Page 14
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
                           716		.size	AssembleFC,$-AssembleFC
                           717		.type	AssembleFC..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_tp.,@function
                           718		.size	AssembleFC..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_tp.,$-AssembleFC..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_tp.
                           719		.align	1
                           720	
                           721	#function:			AssembleFC
                           722	#stack frame size:		0
                           723	#
                           724	#i	r0	local
                           725	
                           726		.section ".bss","awb"
                           727		.align	2
                           728		.global	bTpTxState..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_tp.
                           729	bTpTxState..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_tp.:
00000000                   730	bTpTxState:	.space	4
                           731		.type	bTpTxState..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_tp.,@object
                           732		.size	bTpTxState..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_tp.,4
                           733		.type	bTpTxState,@object
                           734		.size	bTpTxState,4
                           735		.global	bTpRxState..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_tp.
                           736	bTpRxState..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_tp.:
00000004                   737	bTpRxState:	.space	4
                           738		.type	bTpRxState..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_tp.,@object
                           739		.size	bTpRxState..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_tp.,4
                           740		.type	bTpRxState,@object
                           741		.size	bTpRxState,4
                           742		.global	bTxSEG..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_tp.
                           743	bTxSEG..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_tp.:
00000008                   744	bTxSEG:	.space	2
                           745		.type	bTxSEG..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_tp.,@object
                           746		.size	bTxSEG..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_tp.,2
                           747		.type	bTxSEG,@object
                           748		.size	bTxSEG,2
                           749		.global	bRxTimer..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_tp.
                           750	bRxTimer..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_tp.:
0000000a                   751	bRxTimer:	.space	2
                           752		.type	bRxTimer..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_tp.,@object
                           753		.size	bRxTimer..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_tp.,2
                           754		.type	bRxTimer,@object
                           755		.size	bRxTimer,2
                           756		.global	bTxTimer..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_tp.
                           757	bTxTimer..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_tp.:
0000000c                   758	bTxTimer:	.space	2
                           759		.type	bTxTimer..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_tp.,@object
                           760		.size	bTxTimer..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_tp.,2
                           761		.type	bTxTimer,@object
                           762		.size	bTxTimer,2
                           763		.global	gTpConfTimer..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_tp.
                           764	gTpConfTimer..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_tp.:
0000000e                   765	gTpConfTimer:	.space	2
                           766		.type	gTpConfTimer..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_tp.,@object
                           767		.size	gTpConfTimer..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_tp.,2
                           768		.type	gTpConfTimer,@object
                           769		.size	gTpConfTimer,2
                           770		.global	bTxBSCounter..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_tp.
                           771	bTxBSCounter..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_tp.:

                                   Fri Apr 10 08:32:21 2020           Page 15
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
00000010                   772	bTxBSCounter:	.space	1
                           773		.type	bTxBSCounter..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_tp.,@object
                           774		.size	bTxBSCounter..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_tp.,1
                           775		.type	bTxBSCounter,@object
                           776		.size	bTxBSCounter,1
                           777		.global	bTxSN..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_tp.
                           778	bTxSN..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_tp.:
00000011                   779	bTxSN:	.space	1
                           780		.type	bTxSN..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_tp.,@object
                           781		.size	bTxSN..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_tp.,1
                           782		.type	bTxSN,@object
                           783		.size	bTxSN,1
                           784		.global	bRxSN..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_tp.
                           785	bRxSN..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_tp.:
00000012                   786	bRxSN:	.space	1
                           787		.type	bRxSN..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_tp.,@object
                           788		.size	bRxSN..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_tp.,1
                           789		.type	bRxSN,@object
                           790		.size	bRxSN,1
                           791		.global	STmin..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_tp.
                           792	STmin..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_tp.:
00000013                   793	STmin:	.space	1
                           794		.type	STmin..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_tp.,@object
                           795		.size	STmin..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_tp.,1
                           796		.type	STmin,@object
                           797		.size	STmin,1
                           798		.global	bPaddingLength..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_tp.
                           799	bPaddingLength..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_tp.:
00000014                   800	bPaddingLength:	.space	1
                           801		.type	bPaddingLength..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_tp.,@object
                           802		.size	bPaddingLength..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_tp.,1
                           803		.type	bPaddingLength,@object
                           804		.size	bPaddingLength,1
                           805		.global	bStateFlags..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_tp.
                           806	bStateFlags..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_tp.:
00000015                   807	bStateFlags:	.space	1
                           808		.type	bStateFlags..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_tp.,@object
                           809		.size	bStateFlags..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_tp.,1
                           810		.type	bStateFlags,@object
                           811		.size	bStateFlags,1
                           812		.global	gTpConfState..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_tp.
                           813	gTpConfState..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_tp.:
00000016                   814	gTpConfState:	.space	1
                           815		.type	gTpConfState..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_tp.,@object
                           816		.size	gTpConfState..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_tp.,1
                           817		.type	gTpConfState,@object
                           818		.size	gTpConfState,1
                           819		.data
                           820		.section ".vletext", "vax"
                           821		.vle
                           822		.vle
                           823	
                           824	
                           825	#763: /***********************************************************************************************************************
                           826	#764:  *  CAN_SaveTransmit
                           827	#765:  **********************************************************************************************************************/

                                   Fri Apr 10 08:32:21 2020           Page 16
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
                           828	#766: /*! \brief       Error proofed CAN_SaveTransmit, extra function used to save ROM
                           829	#767:  *  \return      kTpSuccess if succeeded, otherwise kTpFailed
                           830	#768:  **********************************************************************************************************************/
                           831		.align	1
                           832		.align	1
                           833	..gh.f.p.0.a.1.r.0.e.1:
                           834		.type	..gh.f.p.0.a.1.r.0.e.1,@object
                           835		.size	..gh.f.p.0.a.1.r.0.e.1,0
                           836		.global	CAN_SaveTransmit..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_tp.
                           837	CAN_SaveTransmit..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_tp.:
                           838	CAN_SaveTransmit:
00000042 0080              839		se_mflr	r0
00000044 d101              840		se_stw	r0, 4(sp)
00000046 182106f8          841		e_stwu	sp, -8(sp)
                           842	#	    .bf
                           843	.LDW41:
0000004a 70e0e000          844		e_lis	r7, %hiadj(fblCwDiagTransmitObject)
0000004e 50e70000          845		e_lwz	r7, %lo(fblCwDiagTransmitObject)(r7)
                           846	#769: static vuint8 CAN_SaveTransmit(void)
                           847	#770: {
                           848	#771:    vuint8 rval;
                           849	#773: # if defined( FBL_TP_ENABLE_VARIABLE_TX_DLC )
                           850	#774:    /* Set DLC value for next tp message */
                           851	#775:    FblCanSetTxDLC(fblCanTxObj[kTpTxObj], tpTxDLC);
                           852	#776: # endif
                           853	#777:    if (FblCanTransmit(kFblTpTxHandle) != kFblCanTxOk)
00000052 1807a014          854		e_mulli	r0, r7, 20
00000056 1c600000          855		e_add16i	r3, r0, %lo(fblCanTxObj)
0000005a 70039000          856		e_add2is	r3, %hiadj(fblCanTxObj)
0000005e 78000001          857		e_bl	FblCanTransmit
00000062 2a03              858		se_cmpi	r3, 0
00000064 e600              859		se_beq	.L64
                           860	#778:    {
                           861	#779:       txSetState(kTpTxRepeatTransmit);
                           862	#line779
                           863	..lin.5de73f94..d7018cf7.0_2::
                           864	.LDWlin2:
00000066 70e0e000          865		e_lis	r7, %hiadj(bTpTxState)
0000006a 4830              866		se_li	r0, 3
0000006c 4813              867		se_li	r3, 1
                           868	#780: #if defined( FBL_TP_ENABLE_CONFIRMATION_INTERRUPT )
                           869	#781: #else
                           870	#782:       /* If transmission fails, make sure the TxTimer is active to limit the number of retries */
                           871	#783:       if (TxTimerValue() == 0u)
                           872	#784:       {
                           873	#785:          /* Do not overwrite the timer value in case it has already been started */
                           874	#786:          SetTxTimerValue(kConfInterruptTimeoutCounter);
                           875	#787:       }
                           876	#788: #endif
                           877	#789:       rval = kTpFailed;
0000006e 54070000          878		e_stw	r0, %lo(bTpTxState)(r7)
                           879	#790:    }
                           880	#791:    else
                           881	#792:    {
                           882	#793: #if defined( FBL_TP_ENABLE_CONFIRMATION_INTERRUPT )
                           883	#794: #else

                                   Fri Apr 10 08:32:21 2020           Page 17
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
                           884	#795:       __ApplFblTpCanMessageTransmitted(); /* Used for e.g. reseting of application counters */
                           885	#796: #endif
                           886	#797:       rval = kTpSuccess;
                           887	#798:    }
                           888	#800:    return rval;
                           889	.L64:
                           890	#	    .ef
                           891	.LDW51:
00000072 c301              892		se_lwz	r0, 12(sp)
00000074 2071              893		se_addi	sp, 8
00000076 0090              894		se_mtlr	r0
00000078 0004              895		se_blr
                           896	__ghs_eofn_CAN_SaveTransmit:
                           897		.type	CAN_SaveTransmit,@function
                           898		.size	CAN_SaveTransmit,$-CAN_SaveTransmit
                           899		.type	CAN_SaveTransmit..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_tp.,@function
                           900		.size	CAN_SaveTransmit..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_tp.,$-CAN_SaveTransmit..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_tp.
                           901		.align	1
                           902	
                           903	#function:			CAN_SaveTransmit
                           904	#stack frame size:		8
                           905	#link area offset:		0
                           906	#local storage area offset:	8
                           907	#
                           908	#rval	r3	local
                           909	
                           910		.data
                           911		.section ".vletext", "vax"
                           912		.vle
                           913		.vle
                           914	
                           915	#801: }
                           916	
                           917	#803: /***********************************************************************************************************************
                           918	#804:  *  TxConfirm
                           919	#805:  **********************************************************************************************************************/
                           920	#806: /*! \brief       Conclusion of a message transmission
                           921	#807:  *  \param[in]   state either a kTpBusy or kTpSuccess.
                           922	#808:  **********************************************************************************************************************/
                           923		.align	1
                           924		.align	1
                           925	..gh.f.p.3.a.1.r.0.e.2:
                           926		.type	..gh.f.p.3.a.1.r.0.e.2,@object
                           927		.size	..gh.f.p.3.a.1.r.0.e.2,0
                           928		.global	TxConfirm..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_tp.
                           929	TxConfirm..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_tp.:
                           930	TxConfirm:
                           931	#	    .bf
                           932	.LDW61:
                           933	#809: static void TxConfirm(vuint8 state)
                           934	#810: {
                           935	#811:    __ApplFblTpConfirm(state);
0000007a 78000000          936		e_b	FblCwTpConfirmation
                           937	#813: }
                           938	#	    .ef
                           939	.LDW71:

                                   Fri Apr 10 08:32:21 2020           Page 18
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
                           940	__ghs_eofn_TxConfirm:
                           941		.type	TxConfirm,@function
                           942		.size	TxConfirm,$-TxConfirm
                           943		.type	TxConfirm..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_tp.,@function
                           944		.size	TxConfirm..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_tp.,$-TxConfirm..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_tp.
                           945		.align	1
                           946	
                           947	#function:			TxConfirm
                           948	#stack frame size:		0
                           949	#
                           950	
                           951	#state	none	param
                           952	
                           953		.data
                           954		.section ".vletext", "vax"
                           955		.vle
                           956		.vle
                           957	
                           958	
                           959	#816: /***********************************************************************************************************************
                           960	#817:  *  FblTpInit
                           961	#818:  **********************************************************************************************************************/
                           962	#819: /*! \brief       Initialization function
                           963	#820:  **********************************************************************************************************************/
                           964		.align	1
                           965		.align	1
                           966	..gh.f.p.0.a.1.r.0.e.3:
                           967		.type	..gh.f.p.0.a.1.r.0.e.3,@object
                           968		.size	..gh.f.p.0.a.1.r.0.e.3,0
                           969		.global	FblTpInit..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_tp.
                           970	FblTpInit..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_tp.:
                           971	FblTpInit:
                           972	#	    .bf
                           973	.LDW81:
                           974	#821: static void FblTpInit(void)
                           975	#822: {
                           976	#823:    txSetBS(kDefaultBS); /* PRQA S 3109 */ /* MD_FblTp_3109 */
0000007e 4880              977		se_li	r0, 8
00000080 70e0e000          978		e_lis	r7, %hiadj(bTxBSCounter)
00000084 34070000          979		e_stb	r0, %lo(bTxBSCounter)(r7)
                           980	#824:    rxSetSN(1u);
00000088 4810              981		se_li	r0, 1
0000008a 70e0e000          982		e_lis	r7, %hiadj(bRxSN)
0000008e 34070000          983		e_stb	r0, %lo(bRxSN)(r7)
                           984	#826:    rxSetState(kTpRxIdle);
00000092 4800              985		se_li	r0, 0
00000094 70e0e000          986		e_lis	r7, %hiadj(bTpRxState)
00000098 54070000          987		e_stw	r0, %lo(bTpRxState)(r7)
                           988	#827:    txSetState(kTpTxIdle);
0000009c 70e0e000          989		e_lis	r7, %hiadj(bTpTxState)
000000a0 54070000          990		e_stw	r0, %lo(bTpTxState)(r7)
                           991	#828:    StopTxTimer();
000000a4 70e0e000          992		e_lis	r7, %hiadj(bTxTimer)
000000a8 5c070000          993		e_sth	r0, %lo(bTxTimer)(r7)
                           994	#829:    StopRxTimer();
000000ac 70e0e000          995		e_lis	r7, %hiadj(bRxTimer)

                                   Fri Apr 10 08:32:21 2020           Page 19
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
000000b0 5c070000          996		e_sth	r0, %lo(bRxTimer)(r7)
                           997	#830:    ResetStateFlags();
000000b4 70e0e000          998		e_lis	r7, %hiadj(bStateFlags)
000000b8 34070000          999		e_stb	r0, %lo(bStateFlags)(r7)
                          1000	#832:    txSEG = 0u;
000000bc 70e0e000         1001		e_lis	r7, %hiadj(bTxSEG)
000000c0 5c070000         1002		e_sth	r0, %lo(bTxSEG)(r7)
                          1003	#834:    STmin = kTransmitCF;
000000c4 48a7             1004		se_li	r7, 10
000000c6 70c0e000         1005		e_lis	r6, %hiadj(STmin)
000000ca 34e60000         1006		e_stb	r7, %lo(STmin)(r6)
                          1007	#836:    txDataIndex = 0u;
000000ce 70e0e000         1008		e_lis	r7, %hiadj(gbTpTxDL)
000000d2 5c070000         1009		e_sth	r0, %lo(gbTpTxDL)(r7)
                          1010	#837:    rxDataIndex = 0u;
000000d6 70e0e000         1011		e_lis	r7, %hiadj(gbTpRxDL)
000000da 5c070000         1012		e_sth	r0, %lo(gbTpRxDL)(r7)
                          1013	#839: #if defined( FBL_TP_ENABLE_CONFIRMATION_INTERRUPT )
                          1014	#840:    InitConfState(); /* PRQA S 3109 */ /* MD_FblTp_3109 */
000000de 70e0e000         1015		e_lis	r7, %hiadj(gTpConfState)
000000e2 34070000         1016		e_stb	r0, %lo(gTpConfState)(r7)
000000e6 70e0e000         1017		e_lis	r7, %hiadj(gTpConfTimer)
000000ea 5c070000         1018		e_sth	r0, %lo(gTpConfTimer)(r7)
                          1019	#841: #endif
                          1020	#842: #if defined( FBL_TP_ENABLE_VARIABLE_TX_DLC )
                          1021	#843:    tpTxDLC = 0x0u;
                          1022	#844: #endif
                          1023	#845: }
                          1024	#	    .ef
                          1025	.LDW91:
000000ee 0004             1026		se_blr
                          1027	__ghs_eofn_FblTpInit:
                          1028		.type	FblTpInit,@function
                          1029		.size	FblTpInit,$-FblTpInit
                          1030		.type	FblTpInit..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_tp.,@function
                          1031		.size	FblTpInit..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_tp.,$-FblTpInit..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_tp.
                          1032		.align	1
                          1033	
                          1034	#function:			FblTpInit
                          1035	#stack frame size:		0
                          1036	#
                          1037	
                          1038		.data
                          1039		.section ".vletext", "vax"
                          1040		.vle
                          1041		.vle
                          1042	
                          1043	
                          1044	#847: /***********************************************************************************************************************
                          1045	#848:  *  GLOBAL FUNCTIONS
                          1046	#849:  **********************************************************************************************************************/
                          1047	#851: /***********************************************************************************************************************
                          1048	#852:  *  FblTpResetRxBlock
                          1049	#853:  **********************************************************************************************************************/
                          1050	#854: /*! \brief       Release lock state of internal buffer
                          1051	#855:  **********************************************************************************************************************/

                                   Fri Apr 10 08:32:21 2020           Page 20
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
                          1052		.align	1
                          1053		.align	1
                          1054	..gh.f.p.0.a.1.r.0.e.4:
                          1055		.type	..gh.f.p.0.a.1.r.0.e.4,@object
                          1056		.size	..gh.f.p.0.a.1.r.0.e.4,0
                          1057		.global	FblTpResetRxBlock
                          1058	FblTpResetRxBlock:
                          1059	#	    .bf
                          1060	.LDW02:
                          1061	#856: void FblTpResetRxBlock(void)
                          1062	#857: {
                          1063	#858:    rxSetState(kTpRxIdle);
000000f0 4800             1064		se_li	r0, 0
000000f2 70e0e000         1065		e_lis	r7, %hiadj(bTpRxState)
000000f6 54070000         1066		e_stw	r0, %lo(bTpRxState)(r7)
                          1067	#859: }
                          1068	#	    .ef
                          1069	.LDW12:
000000fa 0004             1070		se_blr
                          1071		.global	__ghs_eofn_FblTpResetRxBlock
                          1072	__ghs_eofn_FblTpResetRxBlock:
                          1073		.type	FblTpResetRxBlock,@function
                          1074		.size	FblTpResetRxBlock,$-FblTpResetRxBlock
                          1075		.align	1
                          1076	
                          1077	#function:			FblTpResetRxBlock
                          1078	#stack frame size:		0
                          1079	#
                          1080	
                          1081		.data
                          1082		.section ".vletext", "vax"
                          1083		.vle
                          1084		.vle
                          1085	
                          1086	
                          1087	#861: /***********************************************************************************************************************
                          1088	#862:  *  FblTpSetRxBlock
                          1089	#863:  **********************************************************************************************************************/
                          1090	#864: /*! \brief       Set lock state of internal buffer
                          1091	#865:  **********************************************************************************************************************/
                          1092		.align	1
                          1093		.align	1
                          1094	..gh.f.p.0.a.1.r.0.e.5:
                          1095		.type	..gh.f.p.0.a.1.r.0.e.5,@object
                          1096		.size	..gh.f.p.0.a.1.r.0.e.5,0
                          1097		.global	FblTpSetRxBlock
                          1098	FblTpSetRxBlock:
                          1099	#	    .bf
                          1100	.LDW22:
                          1101	#866: void FblTpSetRxBlock(void)
                          1102	#867: {
                          1103	#868:    rxSetState(kTpRxBlocked);
000000fc 4900             1104		se_li	r0, 16
000000fe 70e0e000         1105		e_lis	r7, %hiadj(bTpRxState)
00000102 54070000         1106		e_stw	r0, %lo(bTpRxState)(r7)
                          1107	#869: }

                                   Fri Apr 10 08:32:21 2020           Page 21
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
                          1108	#	    .ef
                          1109	.LDW32:
00000106 0004             1110		se_blr
                          1111		.global	__ghs_eofn_FblTpSetRxBlock
                          1112	__ghs_eofn_FblTpSetRxBlock:
                          1113		.type	FblTpSetRxBlock,@function
                          1114		.size	FblTpSetRxBlock,$-FblTpSetRxBlock
                          1115		.align	1
                          1116	
                          1117	#function:			FblTpSetRxBlock
                          1118	#stack frame size:		0
                          1119	#
                          1120	
                          1121		.data
                          1122		.section ".vletext", "vax"
                          1123		.vle
                          1124		.vle
                          1125	
                          1126	
                          1127	#871: /***********************************************************************************************************************
                          1128	#872:  *  FblTpInitPowerOn
                          1129	#873:  **********************************************************************************************************************/
                          1130	#874: /*! \brief       Initialization function
                          1131	#875:  **********************************************************************************************************************/
                          1132		.align	1
                          1133		.align	1
                          1134	..gh.f.p.0.a.1.r.0.e.6:
                          1135		.type	..gh.f.p.0.a.1.r.0.e.6,@object
                          1136		.size	..gh.f.p.0.a.1.r.0.e.6,0
                          1137		.global	FblTpInitPowerOn
                          1138	FblTpInitPowerOn:
                          1139	#	    .bf
                          1140	.LDW42:
                          1141	#876: void FblTpInitPowerOn(void)
                          1142	#877: {
                          1143	#878:    /* Init BS with preconfigured value */
                          1144	#879:    FblTpSetRxBS(kFblTpBlocksize); /* PRQA S 3109 */ /* MD_FblTp_3109 */
00000108 4880             1145		se_li	r0, 8
0000010a 70e0e000         1146		e_lis	r7, %hiadj(bRxBlockSize)
0000010e 34070000         1147		e_stb	r0, %lo(bRxBlockSize)(r7)
00000112 70e0e000         1148		e_lis	r7, %hiadj(bRxBSCounter)
00000116 34070000         1149		e_stb	r0, %lo(bRxBSCounter)(r7)
                          1150	#881:    /* Init STmin with preconfigured value */
                          1151	#882:    FblTpSetRxSTmin(kFblTpSTMin);
0000011a 4800             1152		se_li	r0, 0
0000011c 70e0e000         1153		e_lis	r7, %hiadj(bRxSTmin)
00000120 34070000         1154		e_stb	r0, %lo(bRxSTmin)(r7)
                          1155	#884:    FblTpInit();      /* Initialize connection specific parameter */
00000124 e800             1156		se_b	FblTpInit
                          1157	#886: }
                          1158	#	    .ef
                          1159	.LDW52:
                          1160	..lin.5de73f94..bd07521b.0_3::
                          1161	.LDWlin3:
                          1162		.global	__ghs_eofn_FblTpInitPowerOn
                          1163	__ghs_eofn_FblTpInitPowerOn:

                                   Fri Apr 10 08:32:21 2020           Page 22
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
                          1164		.type	FblTpInitPowerOn,@function
                          1165		.size	FblTpInitPowerOn,$-FblTpInitPowerOn
                          1166		.align	1
                          1167	
                          1168	#function:			FblTpInitPowerOn
                          1169	#stack frame size:		0
                          1170	#
                          1171	
                          1172		.data
                          1173		.section ".vletext", "vax"
                          1174		.vle
                          1175		.vle
                          1176	
                          1177	
                          1178	#888: /***********************************************************************************************************************
                          1179	#889:  *  FblTpTransmit
                          1180	#890:  **********************************************************************************************************************/
                          1181	#891: /*! \brief       Transmit data in buffer
                          1182	#892:  *  \param[in]   count Number of bytes to be transmitted
                          1183	#893:  *  \return      kTpSuccess if succeeded, otherwise an error code
                          1184	#894:  **********************************************************************************************************************/
                          1185		.align	1
                          1186		.align	1
                          1187	..gh.f.p.3.a.1.r.0.e.7:
                          1188		.type	..gh.f.p.3.a.1.r.0.e.7,@object
                          1189		.size	..gh.f.p.3.a.1.r.0.e.7,0
                          1190		.global	FblTpTransmit
                          1191	FblTpTransmit:
00000126 182106e8         1192		e_stwu	sp, -24(sp)
0000012a 1b810908         1193		e_stmw	r28, 8(sp)
0000012e 0080             1194		se_mflr	r0
00000130 d701             1195		se_stw	r0, 28(sp)
                          1196	#	    .bf
                          1197	.LDW62:
                          1198	#895: vuint8 FblTpTransmit(tTpDataType count)
                          1199	#896: {
                          1200	#897: #if defined( FBL_TP_ENABLE_CONFIRMATION_INTERRUPT )
                          1201	#898:    if (IsWaitingForConfInterrupt() || (txGetState() != kTpTxIdle)) /* PRQA S 3415 */ /* MD_FblTp_3415 */
00000132 70c0e000         1202		e_lis	r6, %hiadj(gTpConfState)
00000136 1cc60000         1203		e_add16i	r6, r6, %lo(gTpConfState)
0000013a 8006             1204		se_lbz	r0, 0(r6)
0000013c 480f             1205		se_li	r31, 0
0000013e 2a00             1206		se_cmpi	r0, 0
00000140 e200             1207		se_bne	.L339
00000142 70e0e000         1208		e_lis	r7, %hiadj(bTpTxState)
00000146 50e70000         1209		e_lwz	r7, %lo(bTpTxState)(r7)
0000014a 2a07             1210		se_cmpi	r7, 0
0000014c e600             1211		se_beq	.L338
                          1212	.L339:
                          1213	#899: #else
                          1214	#900:    if (txGetState() != kTpTxIdle)
                          1215	#901: #endif
                          1216	#902:    {
                          1217	#903:       __ApplFblTpConfirm(kTpBusy);  /* Transport layer busy, notify application */
                          1218	#line903
                          1219	..lin.5de73f94..227bf5af.0_4::

                                   Fri Apr 10 08:32:21 2020           Page 23
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
                          1220	.LDWlin4:
0000014e 4833             1221		se_li	r3, 3
00000150 78000001         1222		e_bl	FblCwTpConfirmation
                          1223	#904:       return kTpBusy;           /* Sending not possible while waiting or not idle */
00000154 4833             1224		se_li	r3, 3
00000156 78000000         1225		se_b	.L336
                          1226	.L338:
                          1227	#	    .bs
                          1228	.LDW72:
                          1229	#905:    }
                          1230	#909:    if (count <= kSF_DataLength)     /* (0)1 to 6/7 bytes will be a SingleFrame */
                          1231	#line909
                          1232	..lin.5de73f94..227bf5af.0_5::
                          1233	.LDWlin5:
0000015a 7000e000         1234		e_lis	r0, %hiadj(bTxSEG)
0000015e 70a0e000         1235		e_lis	r5, %hiadj(gTpConfTimer)
00000162 1c000000         1236		e_add16i	r0, r0, %lo(bTxSEG)
00000166 73c0e000         1237		e_lis	r30, %hiadj(bTpRxState)
0000016a 1ca50000         1238		e_add16i	r5, r5, %lo(gTpConfTimer)
0000016e 7080e000         1239		e_lis	r4, %hiadj(fblCanTxObj)
00000172 1fde0000         1240		e_add16i	r30, r30, %lo(bTpRxState)
00000176 70e0e000         1241		e_lis	r7, %hiadj(fblCwDiagTransmitObject)
0000017a 1c840000         1242		e_add16i	r4, r4, %lo(fblCanTxObj)
0000017e 1ce70000         1243		e_add16i	r7, r7, %lo(fblCwDiagTransmitObject)
00000182 2263             1244		se_cmpli	r3, 7
00000184 e500             1245		se_bgt	.L342
                          1246	#910:    {
                          1247	#	    .bs
                          1248	.LDW82:
                          1249	#911:       txSEG = 0u;                   /* In case of repetition due to CAN-disturbance
                          1250	#line911
                          1251	..lin.5de73f94..227bf5af.0_6::
                          1252	.LDWlin6:
00000186 b0f0             1253		se_sth	r31, 0(r0)
                          1254	#912:                                      * This ensures, that the RX / TX state is re-init */
                          1255	#913:       tpCanTxData[kTpciPos] = (vuint8)count; /* kL4_SingleFrame TPCI is 0x00 */
00000188 c007             1256		se_lwz	r0, 0(r7)
0000018a 18e0a014         1257		e_mulli	r7, r0, 20
                          1258	#	    .bs
                          1259	.LDW92:
0000018e 0447             1260		se_add	r7, r4
00000190 4800             1261		se_li	r0, 0
                          1262	#915: #if defined( FBL_TP_ENABLE_INTERNAL_MEMCPY )
                          1263	#916:       {
00000192 9837             1264		se_stb	r3, 8(r7)
                          1265	#917:          vuintx i;
                          1266	#918:          for (i = 0u; i < count; i++)
00000194 18878008         1267		e_addi	r4, r7, 8
                          1268	.L347:
00000198 0d30             1269		se_cmpl	r0, r3
0000019a e000             1270		se_bge	.L348
                          1271	#line919
                          1272	..lin.5de73f94..227bf5af.0_7::
                          1273	.LDWlin7:
0000019c 70e0e000         1274		e_lis	r7, %hiadj(DiagBuffer)
000001a0 50e70000         1275		e_lwz	r7, %lo(DiagBuffer)(r7)

                                   Fri Apr 10 08:32:21 2020           Page 24
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
                          1276	#919:          {
                          1277	#920:             tpCanTxData[kSFDataPos + i] = txDataBuffer[i];
000001a4 7ce700ae         1278		lbzx	r7, r7, r0
000001a8 7fa40214         1279		add	r29, r4, r0
000001ac 917d             1280		se_stb	r7, 1(r29)
000001ae 2000             1281		se_addi	r0, 1
000001b0 e800             1282		se_b	.L347
                          1283	#	    .es
                          1284	.LDW03:
                          1285	#921:          }
                          1286	#922:       }
                          1287	#923: #else
                          1288	#924:       __ApplFblTpCopyToCAN(&tpCanTxData[kSFDataPos], &txDataBuffer[0], count);
                          1289	#925: #endif
                          1290	#927: #if defined( FBL_TP_ENABLE_VARIABLE_TX_DLC )
                          1291	#928:       tpTxDLC = (vuint8)(count + kLengthPos);
                          1292	#929: #else
                          1293	#930: # if defined( FBL_TP_ENABLE_TX_FRAME_PADDING )
                          1294	#931:       /* Padding unused data within the frame */
                          1295	#932:       while ((count + kSFDataPos) < kCanFrameLength)
                          1296	.L350:
                          1297	#933:       {
                          1298	#934:          tpCanTxData[(count + kSFDataPos)] = kFblTpFillPattern;
                          1299	#line934
                          1300	..lin.5de73f94..227bf5af.0_8::
                          1301	.LDWlin8:
000001b2 0443             1302		se_add	r3, r4
000001b4 70e000aa         1303		e_li	r7, 170
000001b8 9173             1304		se_stb	r7, 1(r3)
                          1305	#935:          count++;
000001ba 7403043f         1306		e_rlwinm	r3, r0, 0, 16, 31
                          1307	.L348:
000001be 18038001         1308		e_addi	r0, r3, 1
000001c2 2270             1309		se_cmpli	r0, 8
000001c4 e400             1310		se_blt	.L350
                          1311	#936:       }
                          1312	#937: # endif
                          1313	#938: #endif
                          1314	#940: #if defined( FBL_TP_ENABLE_CONFIRMATION_INTERRUPT )
                          1315	#941:       SetWaitForSFConfInterrupt(); /* PRQA S 3109 */ /* MD_FblTp_3109 */
                          1316	#line941
                          1317	..lin.5de73f94..227bf5af.0_9::
                          1318	.LDWlin9:
000001c6 4d00             1319		se_li	r0, 80
000001c8 9006             1320		se_stb	r0, 0(r6)
000001ca 4c60             1321		se_li	r0, 70
000001cc b005             1322		se_sth	r0, 0(r5)
                          1323	#942:       (void)CAN_SaveTransmit();
000001ce 78000001         1324		se_bl	CAN_SaveTransmit
                          1325	#943:       rxSetState(kTpRxIdle);
                          1326	#line943
                          1327	..lin.5de73f94..227bf5af.0_10::
                          1328	.LDWlin10:
000001d2 d0fe             1329		se_stw	r31, 0(r30)
                          1330	#	    .es
                          1331	.LDW13:

                                   Fri Apr 10 08:32:21 2020           Page 25
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
000001d4 e800             1332		se_b	.L351
                          1333	.L342:
                          1334	#944: #else
                          1335	#945:       if (CAN_SaveTransmit() == kTpSuccess)
                          1336	#946:       {
                          1337	#947:          rxSetState(kTpRxIdle);
                          1338	#948:          TxConfirm(kTpSuccess);
                          1339	#949:       }
                          1340	#950: #endif
                          1341	#951:    }
                          1342	#952:    else
                          1343	#953:    {
                          1344	#954:       /* Correct calculation means txSEG = (count - 6 + 6) / 7 or (count - 5 + 5) / 6 */
                          1345	#955:       txSEG = (tTpDataType)(count / kCF_DataLength);
                          1346	#line955
                          1347	..lin.5de73f94..227bf5af.0_11::
                          1348	.LDWlin11:
000001d6 487d             1349		se_li	r29, 7
000001d8 7fa3eb96         1350		divwu	r29, r3, r29
000001dc b0d0             1351		se_sth	r29, 0(r0)
                          1352	#956:       bPaddingLength = (vuint8)(((txSEG * kCF_DataLength) - (count - kFF_DataLength)) & 0xffu);
000001de a000             1353		se_lhz	r0, 0(r0)
000001e0 1ba0a007         1354		e_mulli	r29, r0, 7
000001e4 180384fa         1355		e_addi	r0, r3, -6
000001e8 07d0             1356		se_subf	r0, r29
000001ea 73a0e000         1357		e_lis	r29, %hiadj(bPaddingLength)
000001ee 341d0000         1358		e_stb	r0, %lo(bPaddingLength)(r29)
                          1359	#958:       txSN = kTpSNStartValue; /* Start value of sequence number counter */
000001f2 73a0e000         1360		e_lis	r29, %hiadj(bTxSN)
000001f6 4810             1361		se_li	r0, 1
000001f8 341d0000         1362		e_stb	r0, %lo(bTxSN)(r29)
                          1363	#959: #if defined( FBL_TP_DISABLE_OSEK_DATA_LENGTH ) && \
                          1364	#960:      defined( C_CPUTYPE_8BIT ) /* Means length <= 255 */
                          1365	#961:       tpCanTxData[kTpciPos]   = (vuint8)kL4_FirstFrame; /* No length in TPCI byte */
                          1366	#962: #else /* Means length <= 4095 */
                          1367	#963:       tpCanTxData[kTpciPos]   = (vuint8)(kL4_FirstFrame + (vuint8)(count >> 8)); /* DL in TPCI byte */
000001fc c007             1368		se_lwz	r0, 0(r7)
000001fe 18e0a014         1369		e_mulli	r7, r0, 20
00000202 7460c63f         1370		e_rlwinm	r0, r3, 24, 24, 31
00000206 0447             1371		se_add	r7, r4
00000208 20f0             1372		se_addi	r0, 16
0000020a 9807             1373		se_stb	r0, 8(r7)
0000020c 18878008         1374		e_addi	r4, r7, 8
                          1375	#964: #endif
                          1376	#965:       tpCanTxData[kLengthPos] = (vuint8)count;
00000210 9937             1377		se_stb	r3, 9(r7)
                          1378	#967: #if defined( FBL_TP_ENABLE_INTERNAL_MEMCPY )
                          1379	#968:       for (txDataIndex = 0u; txDataIndex < kFF_DataLength; txDataIndex++)
00000212 70e0e000         1380		e_lis	r7, %hiadj(gbTpTxDL)
00000216 5fe70000         1381		e_sth	r31, %lo(gbTpTxDL)(r7)
0000021a 4800             1382		se_li	r0, 0
                          1383	.L354:
0000021c 70e0e000         1384		e_lis	r7, %hiadj(DiagBuffer)
00000220 50e70000         1385		e_lwz	r7, %lo(DiagBuffer)(r7)
                          1386	#969:       {
                          1387	#970:          tpCanTxData[kFFDataPos + txDataIndex] = txDataBuffer[txDataIndex];

                                   Fri Apr 10 08:32:21 2020           Page 26
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
00000224 7ce700ae         1388		lbzx	r7, r7, r0
00000228 7c640214         1389		add	r3, r4, r0
0000022c 2000             1390		se_addi	r0, 1
0000022e 00e0             1391		se_extzh	r0
00000230 9273             1392		se_stb	r7, 2(r3)
00000232 70e0e000         1393		e_lis	r7, %hiadj(gbTpTxDL)
00000236 5c070000         1394		e_sth	r0, %lo(gbTpTxDL)(r7)
0000023a 2250             1395		se_cmpli	r0, 6
0000023c e400             1396		se_blt	.L354
                          1397	#971:       }
                          1398	#972: #else
                          1399	#973:       __ApplFblTpCopyToCAN(&tpCanTxData[kFFDataPos], &txDataBuffer[0], kFF_DataLength);
                          1400	#974:       txDataIndex = kFF_DataLength; /* First bytes are transmitted */
                          1401	#975: #endif
                          1402	#977:       txClearBS(); /* Necessary for correct setting of next state kTpTxWaitFC */
                          1403	#line977
                          1404	..lin.5de73f94..227bf5af.0_12::
                          1405	.LDWlin12:
0000023e 70e0e000         1406		e_lis	r7, %hiadj(bTxBSCounter)
00000242 37e70000         1407		e_stb	r31, %lo(bTxBSCounter)(r7)
                          1408	#978:       /* For diagnostic usage, the first timeout loop have to be increased by one loop */
                          1409	#979:       StartTxTimeoutFC(kTimeoutFCDiagFF, kTpTxWaitFC); /* PRQA S 3109 */ /* MD_FblTp_3109 */
00000246 70000097         1410		e_li	r0, 151
0000024a 70e0e000         1411		e_lis	r7, %hiadj(bTxTimer)
0000024e 5c070000         1412		e_sth	r0, %lo(bTxTimer)(r7)
00000252 4810             1413		se_li	r0, 1
00000254 70e0e000         1414		e_lis	r7, %hiadj(bTpTxState)
00000258 54070000         1415		e_stw	r0, %lo(bTpTxState)(r7)
                          1416	#980:       rxSetState(kTpRxBlocked);      /* Ensure the buffer is locked (normally already by previous request) */
0000025c 4900             1417		se_li	r0, 16
0000025e d00e             1418		se_stw	r0, 0(r30)
                          1419	#981: #if defined( FBL_TP_ENABLE_CONFIRMATION_INTERRUPT )
                          1420	#982:       SetWaitForFFConfInterrupt(); /* PRQA S 3109 */ /* MD_FblTp_3109 */
00000260 9006             1421		se_stb	r0, 0(r6)
00000262 4c60             1422		se_li	r0, 70
00000264 b005             1423		se_sth	r0, 0(r5)
                          1424	#983: #else
                          1425	#984:       __ApplFblTpNotifyTx(kFF_DataLength);
                          1426	#985: #endif/* Use confirmation interrupt */
                          1427	#986: #if defined( FBL_TP_ENABLE_VARIABLE_TX_DLC )
                          1428	#987:       tpTxDLC = (vuint8)8u;
                          1429	#988: #endif
                          1430	#989:       (void)CAN_SaveTransmit();
00000266 78000001         1431		se_bl	CAN_SaveTransmit
                          1432	.L351:
                          1433	#	    .es
                          1434	.LDW23:
                          1435	#990:    }
                          1436	#992:    /* !!!NOTE: 'count' is destroyed here depending on the configuration */
                          1437	#993:    /* ================================================================= */
                          1438	#996: #if defined( FBL_TP_ENABLE_ONLY_FIRST_FC )
                          1439	#997:    txClearFCEvaFlag();
                          1440	#998: #endif
                          1441	#1000:    return kTpSuccess;
                          1442	#line1000
                          1443	..lin.5de73f94..227bf5af.0_13::

                                   Fri Apr 10 08:32:21 2020           Page 27
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
                          1444	.LDWlin13:
0000026a 4803             1445		se_li	r3, 0
                          1446	.L336:
                          1447	#	    .ef
                          1448	.LDW33:
0000026c c701             1449		se_lwz	r0, 28(sp)
0000026e 1b810808         1450		e_lmw	r28, 8(sp)
00000272 2171             1451		se_addi	sp, 24
00000274 0090             1452		se_mtlr	r0
00000276 0004             1453		se_blr
                          1454		.global	__ghs_eofn_FblTpTransmit
                          1455	__ghs_eofn_FblTpTransmit:
                          1456		.type	FblTpTransmit,@function
                          1457		.size	FblTpTransmit,$-FblTpTransmit
                          1458		.align	1
                          1459	
                          1460	#function:			FblTpTransmit
                          1461	#stack frame size:		24
                          1462	#link area offset:		0
                          1463	#local storage area offset:	8
                          1464	#gpr save area offset:		8
                          1465	#
                          1466	#i	r0	local
                          1467	
                          1468	#count	r3	param
                          1469	
                          1470		.data
                          1471		.section ".vletext", "vax"
                          1472		.vle
                          1473		.vle
                          1474	
                          1475	#1001: } /* PRQA S 2006 */ /* MD_MSR_14.7 */
                          1476	
                          1477	#1003: /***********************************************************************************************************************
                          1478	#1004:  *  FblTpTransmitSF
                          1479	#1005:  **********************************************************************************************************************/
                          1480	#1006: /*! \brief       Transmit data which is already stored in CAN driver buffer for special usage within diagnostic
                          1481	#1007:  *               module (negative acknowledge codes)
                          1482	#1008:  *  \param[in]   count Number of bytes to be transmitted
                          1483	#1009:  *  \return      kTpSuccess if succeeded, otherwise an error code
                          1484	#1010:  **********************************************************************************************************************/
                          1485		.align	1
                          1486		.align	1
                          1487	..gh.f.p.3.a.1.r.0.e.8:
                          1488		.type	..gh.f.p.3.a.1.r.0.e.8,@object
                          1489		.size	..gh.f.p.3.a.1.r.0.e.8,0
                          1490		.global	FblTpTransmitSF
                          1491	FblTpTransmitSF:
00000278 182106f0         1492		e_stwu	sp, -16(sp)
0000027c 1bc10908         1493		e_stmw	r30, 8(sp)
00000280 0080             1494		se_mflr	r0
00000282 d501             1495		se_stw	r0, 20(sp)
00000284 0136             1496		se_mr	r6, r3
                          1497	#	    .bf
                          1498	.LDW43:
                          1499	#1011: vuint8 FblTpTransmitSF(vuint8 count)

                                   Fri Apr 10 08:32:21 2020           Page 28
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
                          1500	#1012: {
                          1501	#1013: #if defined( FBL_TP_ENABLE_CONFIRMATION_INTERRUPT )
                          1502	#1014:    if (IsWaitingForConfInterrupt() || (txGetState() != kTpTxIdle)) /* PRQA S 3415 */ /* MD_FblTp_3415 */
00000286 73e0e000         1503		e_lis	r31, %hiadj(gTpConfState)
0000028a 1fff0000         1504		e_add16i	r31, r31, %lo(gTpConfState)
0000028e 800f             1505		se_lbz	r0, 0(r31)
00000290 2a00             1506		se_cmpi	r0, 0
00000292 e200             1507		se_bne	.L563
00000294 70e0e000         1508		e_lis	r7, %hiadj(bTpTxState)
00000298 50e70000         1509		e_lwz	r7, %lo(bTpTxState)(r7)
0000029c 2a07             1510		se_cmpi	r7, 0
0000029e e200             1511		se_bne	.L563
                          1512	#1015: #else
                          1513	#1016:    if (txGetState() != kTpTxIdle)
                          1514	#1017: #endif
                          1515	#1018:    {
                          1516	#1019:       __ApplFblTpConfirm(kTpBusy);  /* Transport layer busy, notify application */
                          1517	#1020:       return kTpBusy;               /* Sending not possible while waiting or not idle */
                          1518	#1021:    }
                          1519	#1023:    if (count > kSF_DataLength)
                          1520	#line1023
                          1521	..lin.5de73f94..b1502868.0_14::
                          1522	.LDWlin14:
000002a0 2263             1523		se_cmpli	r3, 7
000002a2 e100             1524		se_ble	.L562
                          1525	.L563:
                          1526	#1024:    {
                          1527	#1025:       __ApplFblTpConfirm(kTpBusy);  /* Transport layer busy, notify application */
                          1528	#line1025
                          1529	..lin.5de73f94..b1502868.0_15::
                          1530	.LDWlin15:
000002a4 4833             1531		se_li	r3, 3
000002a6 78000001         1532		e_bl	FblCwTpConfirmation
                          1533	#1026:       return kTpBusy;               /* Sending not possible while waiting or not idle */
000002aa 4833             1534		se_li	r3, 3
000002ac e800             1535		se_b	.L556
                          1536	.L562:
                          1537	#line1029
                          1538	..lin.5de73f94..b1502868.0_16::
                          1539	.LDWlin16:
000002ae 70e0e000         1540		e_lis	r7, %hiadj(fblCwDiagTransmitObject)
000002b2 50e70000         1541		e_lwz	r7, %lo(fblCwDiagTransmitObject)(r7)
                          1542	#1027:    }
                          1543	#1029:    tpCanTxData[kTpciPos] = count; /* kL4_SingleFrame is 0x00 */
000002b6 7060e000         1544		e_lis	r3, %hiadj(fblCanTxObj)
000002ba 1c630000         1545		e_add16i	r3, r3, %lo(fblCanTxObj)
000002be 73c0e000         1546		e_lis	r30, %hiadj(gTpConfTimer)
000002c2 1fde0000         1547		e_add16i	r30, r30, %lo(gTpConfTimer)
000002c6 1807a014         1548		e_mulli	r0, r7, 20
                          1549	#1030: #if defined( FBL_TP_ENABLE_CONFIRMATION_INTERRUPT )
                          1550	#1031:    SetWaitForSFConfInterrupt(); /* PRQA S 3109 */ /* MD_FblTp_3109 */
000002ca 0403             1551		se_add	r3, r0
000002cc 9863             1552		se_stb	r6, 8(r3)
000002ce 4d00             1553		se_li	r0, 80
000002d0 900f             1554		se_stb	r0, 0(r31)
000002d2 4c60             1555		se_li	r0, 70

                                   Fri Apr 10 08:32:21 2020           Page 29
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
000002d4 b00e             1556		se_sth	r0, 0(r30)
                          1557	#1032: #endif
                          1558	#1033: #if defined( FBL_TP_ENABLE_VARIABLE_TX_DLC )
                          1559	#1034:    tpTxDLC = (vuint8)(count + kLengthPos);
                          1560	#1035: #endif
                          1561	#1037: # if defined( FBL_TP_ENABLE_VARIABLE_TX_DLC )
                          1562	#1038:    /* Set DLC value for next tp message */
                          1563	#1039:    FblCanSetTxDLC(fblCanTxObj[kTpTxObj], tpTxDLC);
                          1564	#1040: # endif
                          1565	#1041:    if (FblCanTransmit(kFblTpTxHandle) != kFblCanTxOk)
000002d6 78000001         1566		e_bl	FblCanTransmit
000002da 2a03             1567		se_cmpi	r3, 0
000002dc e600             1568		se_beq	.L556
                          1569	#1042:    {
                          1570	#1043: #if defined( FBL_TP_ENABLE_CONFIRMATION_INTERRUPT )
                          1571	#1044:       InitConfState(); /* PRQA S 3109 */ /* MD_FblTp_3109 */
                          1572	#line1044
                          1573	..lin.5de73f94..b1502868.0_17::
                          1574	.LDWlin17:
000002de 4800             1575		se_li	r0, 0
000002e0 900f             1576		se_stb	r0, 0(r31)
000002e2 b00e             1577		se_sth	r0, 0(r30)
                          1578	#1045: #endif
                          1579	#1046:       TxConfirm(kTpFailed);
000002e4 4813             1580		se_li	r3, 1
000002e6 78000001         1581		se_bl	TxConfirm
                          1582	#1048:       return kTpFailed;
                          1583	#line1048
                          1584	..lin.5de73f94..b1502868.0_18::
                          1585	.LDWlin18:
000002ea 4813             1586		se_li	r3, 1
                          1587	#1049:    }
                          1588	#1050: #if defined( FBL_TP_ENABLE_CONFIRMATION_INTERRUPT )
                          1589	#1051: #else
                          1590	#1052:    TxConfirm(kTpSuccess);
                          1591	#1053: #endif
                          1592	#1055:    return kTpSuccess;
                          1593	.L556:
                          1594	#	    .ef
                          1595	.LDW53:
000002ec c501             1596		se_lwz	r0, 20(sp)
000002ee 1bc10808         1597		e_lmw	r30, 8(sp)
000002f2 20f1             1598		se_addi	sp, 16
000002f4 0090             1599		se_mtlr	r0
000002f6 0004             1600		se_blr
                          1601		.global	__ghs_eofn_FblTpTransmitSF
                          1602	__ghs_eofn_FblTpTransmitSF:
                          1603		.type	FblTpTransmitSF,@function
                          1604		.size	FblTpTransmitSF,$-FblTpTransmitSF
                          1605		.align	1
                          1606	
                          1607	#function:			FblTpTransmitSF
                          1608	#stack frame size:		16
                          1609	#link area offset:		0
                          1610	#local storage area offset:	8
                          1611	#gpr save area offset:		8

                                   Fri Apr 10 08:32:21 2020           Page 30
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
                          1612	#
                          1613	
                          1614	#count	r6	param
                          1615	
                          1616		.data
                          1617		.section ".vletext", "vax"
                          1618		.vle
                          1619		.vle
                          1620	
                          1621	#1056: } /* PRQA S 2006 */ /* MD_MSR_14.7 */
                          1622	
                          1623	#1059: /***********************************************************************************************************************
                          1624	#1060:  *  FblTpPrecopy
                          1625	#1061:  **********************************************************************************************************************/
                          1626	#1062: /*! \brief       Receive function for CAN driver
                          1627	#1063:  *  \return      kCopyNoData
                          1628	#1064:  **********************************************************************************************************************/
                          1629	#1065: #if defined( MULTIPLE_RECEIVE_BUFFER )
                          1630		.align	1
                          1631		.align	1
                          1632	..gh.f.p.3.a.1.r.0.e.9:
                          1633		.type	..gh.f.p.3.a.1.r.0.e.9,@object
                          1634		.size	..gh.f.p.3.a.1.r.0.e.9,0
                          1635		.global	FblTpPrecopy
                          1636	FblTpPrecopy:
000002f8 182106e0         1637		e_stwu	sp, -32(sp)
000002fc 1b61090c         1638		e_stmw	r27, 12(sp)
00000300 0080             1639		se_mflr	r0
00000302 d901             1640		se_stw	r0, 36(sp)
00000304 013f             1641		se_mr	r31, r3
                          1642	#	    .bf
                          1643	.LDW63:
00000306 70e0e000         1644		e_lis	r7, %hiadj(CanRxActualDLC)
0000030a 50e70000         1645		e_lwz	r7, %lo(CanRxActualDLC)(r7)
                          1646	#1066: vuint8 FblTpPrecopy(const pChipDataPtr data) /* PRQA S 3673 */ /* MD_FblTp_3673 */
                          1647	#1067: {
                          1648	#1068: #endif
                          1649	#1069: #if defined( FBL_TP_ENABLE_FIX_RX_DLC_CHECK )
                          1650	#1070: # if defined( FBL_TP_ENABLE_VARIABLE_RX_DLC )
                          1651	#1071: # else
                          1652	#1072:    if (CanRxActualDLC != 8u)
0000030e 2a87             1653		se_cmpi	r7, 8
00000310 7a0202fe         1654		se_bne	.L786
                          1655	#1073:    {
                          1656	#1074:       return kCopyNoData;
                          1657	#1075:    }
                          1658	#1076: # endif
                          1659	#1077: #endif
                          1660	#1080: #if defined( FBL_TP_ENABLE_CONFIRMATION_INTERRUPT )
                          1661	#1081:    if (IsWaitingForConfInterrupt())
                          1662	#line1081
                          1663	..lin.5de73f94..323e101f.0_19::
                          1664	.LDWlin19:
00000314 70e0e000         1665		e_lis	r7, %hiadj(gTpConfState)
00000318 30070000         1666		e_lbz	r0, %lo(gTpConfState)(r7)
0000031c 2a00             1667		se_cmpi	r0, 0

                                   Fri Apr 10 08:32:21 2020           Page 31
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
0000031e 7a0202f0         1668		se_bne	.L786
                          1669	#1082:    {
                          1670	#1083:       /* Polling CAN is now the task of the wrapper */
                          1671	#1084:       {
                          1672	#1085:          return kCopyNoData; /* Receive nothing while waiting */
                          1673	#1086:       }
                          1674	#1087:    }
                          1675	#1088: #endif
                          1676	#1090:    __ApplFblTpCanMessageReceived(); /* Used for e.g. reseting of application counters */
                          1677	#	    .bs
                          1678	.LDW73:
                          1679	#1092:    switch (TPCI_Byte & kL4_FrameTypeMask)
                          1680	#line1092
                          1681	..lin.5de73f94..323e101f.0_20::
                          1682	.LDWlin20:
00000322 73a0e000         1683		e_lis	r29, %hiadj(bTpRxState)
00000326 7380e000         1684		e_lis	r28, %hiadj(bRxBSCounter)
0000032a 1fbd0000         1685		e_add16i	r29, r29, %lo(bTpRxState)
0000032e 8003             1686		se_lbz	r0, 0(r3)
00000330 1f9c0000         1687		e_add16i	r28, r28, %lo(bRxBSCounter)
00000334 7360e000         1688		e_lis	r27, %hiadj(bRxSN)
00000338 70c00096         1689		e_li	r6, 150
0000033c 73c0e000         1690		e_lis	r30, %hiadj(gbTpRxDL)
00000340 1f7b0000         1691		e_add16i	r27, r27, %lo(bRxSN)
00000344 1fde0000         1692		e_add16i	r30, r30, %lo(gbTpRxDL)
00000348 7000c8f0         1693		e_and2i.	r0, 240
0000034c e600             1694		se_beq	.L801
0000034e 22f0             1695		se_cmpli	r0, 16
00000350 e600             1696		se_beq	.L818
00000352 23f0             1697		se_cmpli	r0, 32
00000354 7a120122         1698		se_beq	.L797
00000358 1880a830         1699		e_cmpli	r0, 48
0000035c 7a120214         1700		se_beq	.L863
00000360 78000000         1701		se_b	.L786
                          1702	.L801:
                          1703	#	    .bs
                          1704	.LDW83:
                          1705	#1093:    {
                          1706	#1094:       /*-----------------------------------------------------------------------------
                          1707	#1095:       | Receive SingleFrame
                          1708	#1096:       -----------------------------------------------------------------------------*/
                          1709	#1097:       case kL4_SingleFrame:
                          1710	#1098:       {
                          1711	#	    .bs
                          1712	.LDW93:
                          1713	#1099: #if defined( FBL_TP_ENABLE_ISO_COMPLIANCE )
                          1714	#1100: #else
                          1715	#1101: # if defined( FBL_TP_ENABLE_CONFIRMATION_INTERRUPT )
                          1716	#1102:          if (IsWaitingForConfInterrupt())
                          1717	#1103:          {
                          1718	#1104:             return kCopyNoData; /* Receive nothing while waiting */
                          1719	#1105:          }
                          1720	#1106: # endif
                          1721	#1107: #endif
                          1722	#1108:          /* Check if the receive buffer is free */
                          1723	#1109:          if (kTpRxBlocked == rxGetState())

                                   Fri Apr 10 08:32:21 2020           Page 32
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
                          1724	#line1109
                          1725	..lin.5de73f94..323e101f.0_21::
                          1726	.LDWlin21:
00000364 c00d             1727		se_lwz	r0, 0(r29)
00000366 2b00             1728		se_cmpi	r0, 16
00000368 e600             1729		se_beq	.L822
                          1730	#1110:          {
                          1731	#1111:             /* Transport Layer blocked, SF not allowed
                          1732	#1112:              * only buffer is blocked - reception not in progress - kill that frame */
                          1733	#1113:             __ApplFblTpErrorIndication((vuint8)kTpErrRxNotIdle); /* Notify application */
                          1734	#1114:             return kCopyNoData;
                          1735	#1115:          }
                          1736	#1116: #if defined( FBL_TP_ENABLE_ISO_COMPLIANCE )
                          1737	#1117: # if defined( FBL_TP_ENABLE_CONFIRMATION_INTERRUPT )
                          1738	#1118:          /* Reset on-going reception when receiving a TP Single-frame. */
                          1739	#1119:          /* Note: Even if invalid! */
                          1740	#1120:          if (IsWaitingForConfInterrupt()) /* PRQA S 3356 */ /* PRQA S 3359 */ /* MD_FblTp_WaitForConfIR */
                          1741	#1121:          { /* PRQA S 3201 */ /* MD_FblTp_WaitForConfIR */
                          1742	#1122:             /* Reception is in progress */
                          1743	#1123:             /* First cancel transmission object */
                          1744	#1124:             /* Free the state machine */
                          1745	#1125:             InitConfState(); /* PRQA S 3109 */ /* MD_FblTp_3109 */
                          1746	#1126:             StopRxTimer();
                          1747	#1127:             rxSetState(kTpRxIdle);
                          1748	#1128:             ResetRxStateFlags();
                          1749	#1129:          }
                          1750	#1130:          else
                          1751	#1131: # endif
                          1752	#1132:          {
                          1753	#1133:             if (rxGetState() == kTpRxWaitCF)
                          1754	#1134:             {
                          1755	#1135:                /* Reception is in progress */
                          1756	#1136:                /* Free the state machine */
                          1757	#1137:                StopRxTimer();
                          1758	#1138:                rxSetState(kTpRxIdle);
                          1759	#1139:                ResetRxStateFlags();
                          1760	#1140:             }
                          1761	#1141:          }
                          1762	#1142: #endif
                          1763	#1144:          if ((TPCI_Byte > kSF_DataLength)
                          1764	#line1144
                          1765	..lin.5de73f94..323e101f.0_22::
                          1766	.LDWlin22:
0000036a 8003             1767		se_lbz	r0, 0(r3)
0000036c 2260             1768		se_cmpli	r0, 7
0000036e e500             1769		se_bgt	.L808
00000370 8003             1770		se_lbz	r0, 0(r3)
00000372 2a00             1771		se_cmpi	r0, 0
00000374 e200             1772		se_bne	.L807
                          1773	.L808:
                          1774	#1145: #if defined( FBL_TP_ENABLE_ISO15765_2_2 )
                          1775	#1146:             || (0u == TPCI_Byte)
                          1776	#1147: #endif
                          1777	#1148:          )
                          1778	#1149:          {
                          1779	#1150:             __ApplFblTpErrorIndication((vuint8)kTpErrRxSFDL);  /* Notify application */

                                   Fri Apr 10 08:32:21 2020           Page 33
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
                          1780	#line1150
                          1781	..lin.5de73f94..323e101f.0_23::
                          1782	.LDWlin23:
00000376 48b3             1783		se_li	r3, 11
                          1784	#1151:             return kCopyNoData;                                /* The frame is not accepted */
00000378 78000000         1785		se_b	.L1840
                          1786	.L807:
                          1787	#1152:          }
                          1788	#1153:          else
                          1789	#1154:          {
                          1790	#1155:             /* Store length for application usage */
                          1791	#1156:             rxDataLength = TPCI_Byte; /* & kL4_SFData not necessary */
                          1792	#line1156
                          1793	..lin.5de73f94..323e101f.0_24::
                          1794	.LDWlin24:
0000037c 8003             1795		se_lbz	r0, 0(r3)
0000037e 70e0e000         1796		e_lis	r7, %hiadj(gbTpRxLength)
00000382 5c070000         1797		e_sth	r0, %lo(gbTpRxLength)(r7)
                          1798	#1157:          }
                          1799	#1159: #if defined( FBL_TP_ENABLE_VARIABLE_RX_DLC )
                          1800	#1160:          /* Variable checking of CAN-DLC */
                          1801	#1161:          if (CanRxActualDLC <= rxDataLength + kTpciPos)
                          1802	#1162:          {
                          1803	#1163:             return kCopyNoData;
                          1804	#1164:          }
                          1805	#1165: #endif
                          1806	#1168:          __ApplFblTpRxSF(); /* Defined in tp_cfg.h / tp.cfg; Normally not used */
00000386 78000001         1807		e_bl	FblCwTpRxStartIndication
                          1808	#1170: #if defined( FBL_TP_ENABLE_INTERNAL_MEMCPY )
                          1809	#1171:          {
                          1810	#	    .bs
                          1811	.LDW04:
                          1812	#1172:             vuintx i;
                          1813	#1173:             for (i = 0u; i < rxDataLength; i++)
0000038a 4800             1814		se_li	r0, 0
0000038c e800             1815		se_b	.L815
                          1816	.L814:
                          1817	#line1174
                          1818	..lin.5de73f94..323e101f.0_25::
                          1819	.LDWlin25:
0000038e 70e0e000         1820		e_lis	r7, %hiadj(DiagBuffer)
00000392 7cdf0214         1821		add	r6, r31, r0
                          1822	#1174:             {
                          1823	#1175:                rxDataBuffer[i] = tpCanRxData[kSFDataPos + i];
00000396 8166             1824		se_lbz	r6, 1(r6)
00000398 50e70000         1825		e_lwz	r7, %lo(DiagBuffer)(r7)
0000039c 7cc701ae         1826		stbx	r6, r7, r0
000003a0 2000             1827		se_addi	r0, 1
                          1828	.L815:
000003a2 70e0e000         1829		e_lis	r7, %hiadj(gbTpRxLength)
000003a6 58670000         1830		e_lhz	r3, %lo(gbTpRxLength)(r7)
000003aa 0d30             1831		se_cmpl	r0, r3
000003ac e400             1832		se_blt	.L814
                          1833	.L812:
                          1834	#	    .es
                          1835	.LDW14:

                                   Fri Apr 10 08:32:21 2020           Page 34
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
                          1836	#1176:             }
                          1837	#1177:          }
                          1838	#1178: #else /* FBL_TP_ENABLE_INTERNAL_MEMCPY */
                          1839	#1179:          __ApplFblTpCopyFromCAN(rxDataBuffer, &tpCanRxData[kSFDataPos], rxDataLength); /* PRQA S 0312 */ /* MD_FblTp_0312 */
                          1840	#1180: #endif
                          1841	#1181:          rxSetState(kTpRxBlocked);
                          1842	#line1181
                          1843	..lin.5de73f94..323e101f.0_26::
                          1844	.LDWlin26:
000003ae 4900             1845		se_li	r0, 16
000003b0 d00d             1846		se_stw	r0, 0(r29)
                          1847	#1182:          __ApplFblTpDataInd((tTpDataType)rxDataLength); /* Ready, a single frame was received */
000003b2 78000001         1848		e_bl	FblCwTpDataInd
                          1849	#1183:          break;
000003b6 78000000         1850		se_b	.L786
                          1851	.L818:
                          1852	#	    .es
                          1853	.LDW24:
                          1854	#1184:       }
                          1855	#1185:       /*-----------------------------------------------------------------------------
                          1856	#1186:       | Receive FirstFrame
                          1857	#1187:       -----------------------------------------------------------------------------*/
                          1858	#1188:       case kL4_FirstFrame:
                          1859	#1189:       {
                          1860	#	    .bs
                          1861	.LDW34:
                          1862	#1190:          /* Use a temporary data length variable until it's certain that the frame is valid */
                          1863	#1191:          vuint16 tmpDL;
                          1864	#1193: #if defined( FBL_TP_ENABLE_VARIABLE_RX_DLC )
                          1865	#1194:          /* Checking CAN-DLC */
                          1866	#1195:          if (CanRxActualDLC != 8u)
                          1867	#1196:          {
                          1868	#1197:             return kCopyNoData;
                          1869	#1198:          }
                          1870	#1199: #endif
                          1871	#1200: #if defined( FBL_TP_ENABLE_ISO_COMPLIANCE )
                          1872	#1201: #else
                          1873	#1202: # if defined( FBL_TP_ENABLE_CONFIRMATION_INTERRUPT )
                          1874	#1203:          if (IsWaitingForConfInterrupt())
                          1875	#1204:          {
                          1876	#1205:             return kCopyNoData; /* Receive nothing while waiting */
                          1877	#1206:          }
                          1878	#1207: # endif
                          1879	#1208: #endif
                          1880	#1209:          if (kTpRxBlocked == rxGetState())
                          1881	#line1209
                          1882	..lin.5de73f94..323e101f.0_27::
                          1883	.LDWlin27:
000003ba c00d             1884		se_lwz	r0, 0(r29)
000003bc 2b00             1885		se_cmpi	r0, 16
000003be e200             1886		se_bne	.L821
                          1887	.L822:
                          1888	#1210:          {
                          1889	#1211:             /* Transport Layer blocked, FF not allowed */
                          1890	#1212:             /* Only buffer is blocked - reception not in progress - kill that frame */
                          1891	#1213:             __ApplFblTpErrorIndication((vuint8)kTpErrRxNotIdle); /* Notify application */

                                   Fri Apr 10 08:32:21 2020           Page 35
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
                          1892	#line1213
                          1893	..lin.5de73f94..323e101f.0_28::
                          1894	.LDWlin28:
000003c0 4883             1895		se_li	r3, 8
                          1896	#1214:             return kCopyNoData;
000003c2 e800             1897		se_b	.L1841
                          1898	.L821:
                          1899	#1215:          }
                          1900	#1218: #if defined( FBL_TP_ENABLE_ISO_COMPLIANCE )
                          1901	#1219: # if defined( FBL_TP_ENABLE_CONFIRMATION_INTERRUPT )
                          1902	#1220:          /* NOTE: Non-Compliance for FBL_TP */
                          1903	#1221:          if (IsWaitingForConfInterrupt()) /* PRQA S 3356 */ /* PRQA S 3359 */ /* MD_FblTp_WaitForConfIR */
                          1904	#1222:          { /* PRQA S 3201 */ /* MD_FblTp_WaitForConfIR */
                          1905	#1223:             /* Reception is in progress */
                          1906	#1224:             /* First cancel transmission object */
                          1907	#1225:             /* CanCancelTransmit(kFblTpTxHandle); */
                          1908	#1226:             /* Free the state machine */
                          1909	#1227:             InitConfState(); /* PRQA S 3109 */ /* MD_FblTp_3109 */
                          1910	#1228:             StopRxTimer();
                          1911	#1229:             rxSetState(kTpRxIdle);
                          1912	#1230:             ResetRxStateFlags();
                          1913	#1231:          }
                          1914	#1232:          else
                          1915	#1233: # endif
                          1916	#1234:          {
                          1917	#1235:             if (rxGetState() == kTpRxWaitCF)
                          1918	#1236:             {
                          1919	#1237:                /* Reception is in progress */
                          1920	#1238:                /* Free the state machine */
                          1921	#1239:                StopRxTimer();
                          1922	#1240:                rxSetState(kTpRxIdle);
                          1923	#1241:                ResetRxStateFlags();
                          1924	#1242:             }
                          1925	#1243:          }
                          1926	#1244: #endif
                          1927	#1246:          /* Optimized version for diagnostic only with *(data+1) */
                          1928	#1247:          tmpDL  = (((vuint16)(TPCI_Byte & kL4_FFData)) << 8);
                          1929	#line1247
                          1930	..lin.5de73f94..323e101f.0_29::
                          1931	.LDWlin29:
000003c4 8003             1932		se_lbz	r0, 0(r3)
000003c6 8173             1933		se_lbz	r7, 1(r3)
                          1934	#1248:          tmpDL |=   (vuint16)DL_Byte;
000003c8 7400452f         1935		e_rlwinm	r0, r0, 8, 20, 23
000003cc 4470             1936		se_or	r0, r7
                          1937	#1250:          /* Check for invalid length */
                          1938	#1251:          if (tmpDL <= kSF_DataLength)
000003ce 2260             1939		se_cmpli	r0, 7
000003d0 7a01023e         1940		se_ble	.L786
                          1941	#1252:          {
                          1942	#1253:             return kCopyNoData; /* The frame is not accepted */
                          1943	#1254:          }
                          1944	#1256:          if (tmpDL > kFblTpBufferSize)
                          1945	#line1256
                          1946	..lin.5de73f94..323e101f.0_30::
                          1947	.LDWlin30:

                                   Fri Apr 10 08:32:21 2020           Page 36
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
000003d4 7020afff         1948		e_cmpl16i	r0, 4095
000003d8 e100             1949		se_ble	.L827
                          1950	.L828:
                          1951	#1257:          {
                          1952	#1258: #if defined( FBL_TP_ENABLE_ISO15765_2_2 ) || \
                          1953	#1259:     defined( FBL_TP_ENABLE_OVERRUN_FLAG_IN_FC )
                          1954	#1260:             AssembleFC();
                          1955	#line1260
                          1956	..lin.5de73f94..323e101f.0_31::
                          1957	.LDWlin31:
000003da 78000001         1958		se_bl	AssembleFC
                          1959	#1261:             rxReloadBSCnt();
                          1960	#line1261
                          1961	..lin.5de73f94..323e101f.0_32::
                          1962	.LDWlin32:
000003de 70e0e000         1963		e_lis	r7, %hiadj(bRxBlockSize)
000003e2 30070000         1964		e_lbz	r0, %lo(bRxBlockSize)(r7)
000003e6 70e0e000         1965		e_lis	r7, %hiadj(fblCwDiagTransmitObject)
000003ea 50e70000         1966		e_lwz	r7, %lo(fblCwDiagTransmitObject)(r7)
000003ee 900c             1967		se_stb	r0, 0(r28)
                          1968	#1262:             tpCanTxData[kTpciPos] = kL4_FlowStatus_Overrun;
000003f0 4b20             1969		se_li	r0, 50
000003f2 18e7a014         1970		e_mulli	r7, r7, 20
000003f6 1cc70008         1971		e_add16i	r6, r7, %lo(fblCanTxObj+8)
000003fa 70069000         1972		e_add2is	r6, %hiadj(fblCanTxObj+8)
000003fe 9006             1973		se_stb	r0, 0(r6)
                          1974	#1263: # if defined( FBL_TP_ENABLE_CONFIRMATION_INTERRUPT )
                          1975	#1264:             SetWaitForFCOverrunConfInterrupt(); /* PRQA S 3109 */ /* MD_FblTp_3109 */
00000400 4e00             1976		se_li	r0, 96
00000402 70e0e000         1977		e_lis	r7, %hiadj(gTpConfState)
00000406 34070000         1978		e_stb	r0, %lo(gTpConfState)(r7)
0000040a 4c60             1979		se_li	r0, 70
0000040c 70e0e000         1980		e_lis	r7, %hiadj(gTpConfTimer)
00000410 5c070000         1981		e_sth	r0, %lo(gTpConfTimer)(r7)
                          1982	.L1842:
                          1983	#1265: # endif
                          1984	#1266:             (void)CAN_SaveTransmit();
00000414 78000001         1985		se_bl	CAN_SaveTransmit
                          1986	#1267:             return kCopyNoData;
00000418 78000000         1987		se_b	.L786
                          1988	.L827:
                          1989	#1268: #else
                          1990	#1269:             /* Inform application */
                          1991	#1270:             __ApplFblTpMsgTooLong((vuint8)DL_Byte, (vuint8)(TPCI_Byte & 0x0Fu));
                          1992	#1271: # if defined( FBL_TP_ENABLE_ACCEPT_TOO_LARGE_DATA )
                          1993	#1272:             /* Receiving a large block that exceeds the capacity
                          1994	#1273:              * of the DiagBuffer. FlowControl is transmitted in this
                          1995	#1274:              * configuration, but no further data (excepting
                          1996	#1275:              * FirstFrame data) are copied to the buffer. */
                          1997	#1276:             SetRxBlockTooLargeFlag();
                          1998	#1277: # else
                          1999	#1278:             return kCopyNoData; /* Don't accept frames longer than our buffer */
                          2000	#1279: # endif /* ! FBL_TP_ENABLE_ACCEPT_TOO_LARGE_DATA */
                          2001	#1280: #endif /* ! FBL_TP_ENABLE_ISO15765_2_2 */
                          2002	#1281:          }
                          2003	#1282: #if defined( FBL_TP_ENABLE_ACCEPT_TOO_LARGE_DATA )

                                   Fri Apr 10 08:32:21 2020           Page 37
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
                          2004	#1283:          else
                          2005	#1284:          {
                          2006	#1285:             ClearRxBlockTooLargeFlag();
                          2007	#1286:          }
                          2008	#1287: #endif
                          2009	#1288:          rxDataLength = (tTpDataType)tmpDL;
                          2010	#line1288
                          2011	..lin.5de73f94..323e101f.0_33::
                          2012	.LDWlin33:
0000041c 70e0e000         2013		e_lis	r7, %hiadj(gbTpRxLength)
00000420 5c070000         2014		e_sth	r0, %lo(gbTpRxLength)(r7)
                          2015	#1291:          __ApplFblTpRxFF(); /* Defined in tp_cfg.h/tp.cfg; Normally not used */
00000424 78000001         2016		e_bl	FblCwTpRxStartIndication
                          2017	#1293: #if defined( FBL_TP_ENABLE_INTERNAL_MEMCPY )
                          2018	#1294:          {
                          2019	#	    .bs
                          2020	.LDW44:
                          2021	#1295:             vuintx i;
                          2022	#1296:             for (i = 0u; i < kFF_DataLength; i++)
00000428 4800             2023		se_li	r0, 0
                          2024	.L832:
0000042a 70e0e000         2025		e_lis	r7, %hiadj(DiagBuffer)
0000042e 7cdf0214         2026		add	r6, r31, r0
                          2027	#1297:             {
                          2028	#1298:                rxDataBuffer[i] = tpCanRxData[kFFDataPos + i];
00000432 8266             2029		se_lbz	r6, 2(r6)
00000434 50e70000         2030		e_lwz	r7, %lo(DiagBuffer)(r7)
00000438 7cc701ae         2031		stbx	r6, r7, r0
0000043c 2000             2032		se_addi	r0, 1
0000043e 2250             2033		se_cmpli	r0, 6
00000440 e400             2034		se_blt	.L832
                          2035	#	    .es
                          2036	.LDW54:
                          2037	#1299:             }
                          2038	#1300:          }
                          2039	#1301: #else
                          2040	#1302:          __ApplFblTpCopyFromCAN( rxDataBuffer, &tpCanRxData[kFFDataPos], kFF_DataLength ); /* PRQA S 0312 */ /* MD_FblTp_0312 */
                          2041	#1303: #endif /* ! FBL_TP_ENABLE_INTERNAL_MEMCPY */
                          2042	#1305:          rxDataIndex = kFF_DataLength;    /* Set RX index to next free data element */
                          2043	#line1305
                          2044	..lin.5de73f94..323e101f.0_34::
                          2045	.LDWlin34:
00000442 4860             2046		se_li	r0, 6
00000444 b00e             2047		se_sth	r0, 0(r30)
                          2048	#1306:          AssembleFC();                    /* FF always required TX of a FC */
00000446 78000001         2049		se_bl	AssembleFC
                          2050	#1307:          rxReloadBSCnt();
                          2051	#line1307
                          2052	..lin.5de73f94..323e101f.0_35::
                          2053	.LDWlin35:
0000044a 70e0e000         2054		e_lis	r7, %hiadj(bRxBlockSize)
0000044e 30070000         2055		e_lbz	r0, %lo(bRxBlockSize)(r7)
00000452 70e0e000         2056		e_lis	r7, %hiadj(gTpConfState)
                          2057	#1308: #if defined( FBL_TP_ENABLE_CONFIRMATION_INTERRUPT )
                          2058	#1309:          SetWaitForFCConfInterrupt(); /* PRQA S 3109 */ /* MD_FblTp_3109 */
00000456 900c             2059		se_stb	r0, 0(r28)

                                   Fri Apr 10 08:32:21 2020           Page 38
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
00000458 4c00             2060		se_li	r0, 64
0000045a 34070000         2061		e_stb	r0, %lo(gTpConfState)(r7)
0000045e 4c60             2062		se_li	r0, 70
00000460 70e0e000         2063		e_lis	r7, %hiadj(gTpConfTimer)
00000464 5c070000         2064		e_sth	r0, %lo(gTpConfTimer)(r7)
                          2065	#1310: #else
                          2066	#1311:          SetRxCFFlag();
                          2067	#1312:          StartRxTimeoutCF(kTimeoutCF, kTpRxWaitCF); /* Wait for next CF */ /* PRQA S 3109 */ /* MD_FblTp_3109 */
                          2068	#1313: #endif
                          2069	#1314:          /* Make sure that repetition is not interpreted accidentally for TX-finish */
                          2070	#1315:          txSEG = 1u;
00000468 70e0e000         2071		e_lis	r7, %hiadj(bTxSEG)
0000046c 4810             2072		se_li	r0, 1
0000046e 5c070000         2073		e_sth	r0, %lo(bTxSEG)(r7)
                          2074	#1316:          rxSetSN(kTpSNStartValue);  /* Await CF with SN = kTpSNStartValue first */
00000472 900b             2075		se_stb	r0, 0(r27)
                          2076	#1317:          (void)CAN_SaveTransmit();
                          2077	#1318:          break;
00000474 e800             2078		se_b	.L1842
                          2079	.L797:
                          2080	#	    .es
                          2081	.LDW64:
                          2082	#	    .bs
                          2083	.LDW74:
                          2084	#line1307
                          2085	..lin.5de73f94..323e101f.0_36::
                          2086	.LDWlin36:
00000476 c00d             2087		se_lwz	r0, 0(r29)
                          2088	#1319:       }
                          2089	#1320:       /*-----------------------------------------------------------------------------
                          2090	#1321:       | kL4_ConsecutiveFrame
                          2091	#1322:       -----------------------------------------------------------------------------*/
                          2092	#1323:       case kL4_ConsecutiveFrame:
                          2093	#1324:       {
00000478 70e0e000         2094		e_lis	r7, %hiadj(gbTpRxLength)
                          2095	#1325:          tTpDataType const locRxDataLength = rxDataLength; /* Use local variable to avoid warnings: ESCAN00040879 */
                          2096	#1326: #if defined( FBL_TP_ENABLE_CONFIRMATION_INTERRUPT )
                          2097	#1327:          if (IsWaitingForConfInterrupt()) /* PRQA S 3356 */ /* PRQA S 3359 */ /* MD_FblTp_WaitForConfIR */
                          2098	#1328:          { /* PRQA S 3201 */ /* MD_FblTp_WaitForConfIR */
                          2099	#1329:             return kCopyNoData; /* Receive nothing while waiting */
                          2100	#1330:          }
                          2101	#1331: #endif
                          2102	#1332:          if (rxGetState() != kTpRxWaitCF)
0000047c 58670000         2103		e_lhz	r3, %lo(gbTpRxLength)(r7)
00000480 2a10             2104		se_cmpi	r0, 1
00000482 e600             2105		se_beq	.L837
                          2106	#1333:          {
                          2107	#1334:             __ApplFblTpErrorIndication((vuint8)kTpErrRxCFNotExpected); /* Notify application */
                          2108	#line1334
                          2109	..lin.5de73f94..323e101f.0_37::
                          2110	.LDWlin37:
00000484 48a3             2111		se_li	r3, 10
                          2112	#1335:             return kCopyNoData; /* No FF received, CF not allowed */
00000486 e800             2113		se_b	.L1839
                          2114	.L837:
                          2115	#1336:          }

                                   Fri Apr 10 08:32:21 2020           Page 39
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
                          2116	#1337:          __ApplFblTpRxCF(); /* Defined in tp_cfg.h/tp.cfg; Normally not used */
                          2117	#1339:          if ((TPCI_Byte & kL4_SNMask) != rxGetSN()) /* Wrong SN received? */
                          2118	#line1339
                          2119	..lin.5de73f94..323e101f.0_38::
                          2120	.LDWlin38:
00000488 800b             2121		se_lbz	r0, 0(r27)
0000048a 807f             2122		se_lbz	r7, 0(r31)
0000048c 7ce00278         2123		xor	r0, r7, r0
00000490 7000c80f         2124		e_and2i.	r0, 15
00000494 e600             2125		se_beq	.L840
                          2126	.L841:
                          2127	#1340:          {
                          2128	#1341: #if defined( FBL_TP_ENABLE_WAIT_CORRECT_SN )
                          2129	#1342: #else
                          2130	#1343:             rxSetState(kTpRxIdle); /* Stop receiving immediately! */
                          2131	#line1343
                          2132	..lin.5de73f94..323e101f.0_39::
                          2133	.LDWlin39:
00000496 4800             2134		se_li	r0, 0
00000498 d00d             2135		se_stw	r0, 0(r29)
                          2136	#1344:             __ApplFblTpErrorIndication((vuint8)kTpErrRxWrongSN); /* Notify application */
0000049a 4863             2137		se_li	r3, 6
                          2138	.L1839:
                          2139	.L1840:
                          2140	.L1841:
0000049c 78000001         2141		e_bl	FblCwTpErrorIndication
                          2142	#1345:             /*Possible TX of error frame here?*/
                          2143	#1346: #endif
                          2144	#1347:             return kCopyNoData;
000004a0 78000000         2145		se_b	.L786
                          2146	.L840:
                          2147	#1348:          }
                          2148	#1350:          /* A correct SN is received, calculate next expected SN in case of more CF are
                          2149	#1351:           * expected. (Calculation is only necessary if more messages are expected!) */
                          2150	#1353: #if defined( FBL_TP_ENABLE_ACCEPT_TOO_LARGE_DATA )
                          2151	#1354:          /* BlockTooLarge indicates the reception of the data block, that exceeds the capacity of the DiagBuffer.
                          2152	#1355:           * ConsecutiveFrame is accepted but no further data are copied to the buffer. */
                          2153	#1356:          if (0u != GetRxBlockTooLargeFlag())
                          2154	#1357:          {
                          2155	#1358:             if ((locRxDataLength - rxDataIndex) >= kCF_DataLength)
                          2156	#1359:             {
                          2157	#1360:                rxDataIndex += kCF_DataLength;
                          2158	#1361:             }
                          2159	#1362:             else
                          2160	#1363:             {
                          2161	#1364:                rxDataIndex = locRxDataLength;
                          2162	#1365:             }
                          2163	#1366:          }
                          2164	#1367:          else
                          2165	#1368: #endif
                          2166	#1369:          {
                          2167	#	    .bs
                          2168	.LDW84:
                          2169	#	    .bs
                          2170	.LDW94:
                          2171	#1370:             /* Normally we are able to copy all data to RX buffer, but if the last CAN message can not be copied as

                                   Fri Apr 10 08:32:21 2020           Page 40
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
                          2172	#1371:              * one block, the following check will be done to prevent buffer overrun. Then bytes are copied
                          2173	#1372:              * until the RX buffer is full. */
                          2174	#1373:             /* Rx buffer with free elements? */
                          2175	#1374:             if ((locRxDataLength - rxDataIndex) < (tTpDataType)kCF_DataLength)
                          2176	#line1374
                          2177	..lin.5de73f94..323e101f.0_40::
                          2178	.LDWlin40:
000004a4 a00e             2179		se_lhz	r0, 0(r30)
000004a6 7ce01850         2180		subf	r7, r0, r3
000004aa 2a77             2181		se_cmpi	r7, 7
000004ac e000             2182		se_bge	.L843
                          2183	#1375:             {
                          2184	#	    .bs
                          2185	.LDW05:
                          2186	#1376: #if defined( FBL_TP_ENABLE_VARIABLE_RX_DLC )
                          2187	#1377:             /* Checking CAN-DLC */
                          2188	#1378:                if (CanRxActualDLC <= (locRxDataLength - rxDataIndex + kTpciPos))
                          2189	#1379:                {
                          2190	#1380:                   return kCopyNoData;
                          2191	#1381:                }
                          2192	#1382: #endif
                          2193	#1383: #if defined( FBL_TP_ENABLE_INTERNAL_MEMCPY )
                          2194	#1384:                {
                          2195	#	    .bs
                          2196	.LDW15:
                          2197	#1385:                   vuintx i = 0u;
                          2198	#line1385
                          2199	..lin.5de73f94..323e101f.0_41::
                          2200	.LDWlin41:
000004ae 4806             2201		se_li	r6, 0
                          2202	#1386:                   while (rxDataIndex < locRxDataLength)
000004b0 e800             2203		se_b	.L845
                          2204	.L847:
                          2205	#line1387
                          2206	..lin.5de73f94..323e101f.0_42::
                          2207	.LDWlin42:
000004b2 70e0e000         2208		e_lis	r7, %hiadj(DiagBuffer)
000004b6 7cbf3214         2209		add	r5, r31, r6
                          2210	#1387:                   {
                          2211	#1388:                      /* Copy data with start at (TPCI + 1) byte */
                          2212	#1389:                      rxDataBuffer[rxDataIndex] = tpCanRxData[kSFDataPos + i];
000004ba 50e70000         2213		e_lwz	r7, %lo(DiagBuffer)(r7)
000004be 8155             2214		se_lbz	r5, 1(r5)
000004c0 7ca701ae         2215		stbx	r5, r7, r0
                          2216	#1390:                      rxDataIndex++;
000004c4 a00e             2217		se_lhz	r0, 0(r30)
000004c6 2006             2218		se_addi	r6, 1
000004c8 2000             2219		se_addi	r0, 1
000004ca b00e             2220		se_sth	r0, 0(r30)
                          2221	#1391:                      i++;
000004cc 00e0             2222		se_extzh	r0
                          2223	.L845:
000004ce 0d30             2224		se_cmpl	r0, r3
000004d0 e400             2225		se_blt	.L847
                          2226	.L853:
                          2227	#1425:          {

                                   Fri Apr 10 08:32:21 2020           Page 41
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
                          2228	#1426:             rxSetState(kTpRxBlocked);
                          2229	#1427:             /* StopRxTimer(); */
                          2230	#1428: #if defined( FBL_TP_ENABLE_ACCEPT_TOO_LARGE_DATA )
                          2231	#1429:             if (0u != GetRxBlockTooLargeFlag())
                          2232	#1430:             {
                          2233	#1431:                ClearRxBlockTooLargeFlag();
                          2234	#1433:                /* Indicate reception of overrun data.
                          2235	#1434:                 * First argument is number of data in receive buffer,
                          2236	#1435:                 * second argument is no. of expected data.
                          2237	#1436:                 * (BO: Buffer Overrun). */
                          2238	#1437:                __ApplFblTpDataIndOverrun((vuint8)kSF_DataLength, (tTpDataType)locRxDataLength);
                          2239	#1438:             }
                          2240	#1439:             else
                          2241	#1440:             {
                          2242	#1441: #endif
                          2243	#1442:                __ApplFblTpDataInd((tTpDataType)locRxDataLength);
                          2244	#line1442
                          2245	..lin.5de73f94..323e101f.0_43::
                          2246	.LDWlin43:
000004d2 78000000         2247		se_b	.L812
                          2248	.L843:
                          2249	#	    .es
                          2250	.LDW25:
                          2251	#	    .es
                          2252	.LDW35:
                          2253	#1392:                   }
                          2254	#1393:                }
                          2255	#1394: #else
                          2256	#1395:                __ApplFblTpCopyFromCAN(&rxDataBuffer[rxDataIndex], &tpCanRxData[kSFDataPos], (locRxDataLength - rxDataIndex)); /* PRQA S 0312 */ /* MD_FblTp_0312 */
                          2257	#1396:                rxDataIndex = kFblTpBufferSize; /* No more free data element! */
                          2258	#1397: #endif
                          2259	#1398:             }
                          2260	#1399:             else
                          2261	#1400:             {
                          2262	#	    .bs
                          2263	.LDW45:
                          2264	#1401: #if defined( FBL_TP_ENABLE_VARIABLE_RX_DLC )
                          2265	#1402:                /* Checking CAN-DLC */
                          2266	#1403:                if (CanRxActualDLC != 8u)
                          2267	#1404:                {
                          2268	#1405:                   return kCopyNoData;
                          2269	#1406:                }
                          2270	#1407: #endif
                          2271	#1408: #if defined( FBL_TP_ENABLE_INTERNAL_MEMCPY )
                          2272	#1409:                {
                          2273	#	    .bs
                          2274	.LDW55:
                          2275	#1410:                   vuintx i;
                          2276	#1411:                   for (i = 0u; i < kCF_DataLength; i++)
                          2277	#line1411
                          2278	..lin.5de73f94..323e101f.0_44::
                          2279	.LDWlin44:
000004d6 4805             2280		se_li	r5, 0
                          2281	.L851:
000004d8 a00e             2282		se_lhz	r0, 0(r30)
000004da 7c9f2a14         2283		add	r4, r31, r5

                                   Fri Apr 10 08:32:21 2020           Page 42
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
                          2284	#1412:                   {
                          2285	#1413:                      rxDataBuffer[rxDataIndex + i] = tpCanRxData[kSFDataPos + i];
000004de 70e0e000         2286		e_lis	r7, %hiadj(DiagBuffer)
000004e2 8144             2287		se_lbz	r4, 1(r4)
000004e4 50e70000         2288		e_lwz	r7, %lo(DiagBuffer)(r7)
000004e8 0450             2289		se_add	r0, r5
000004ea 2005             2290		se_addi	r5, 1
000004ec 7c8701ae         2291		stbx	r4, r7, r0
000004f0 2265             2292		se_cmpli	r5, 7
000004f2 e400             2293		se_blt	.L851
                          2294	#	    .es
                          2295	.LDW65:
                          2296	#1414:                   }
                          2297	#1415:                }
                          2298	#1416: #else /* FBL_TP_ENABLE_INTERNAL_MEMCPY */
                          2299	#1417:                __ApplFblTpCopyFromCAN(&rxDataBuffer[rxDataIndex], &tpCanRxData[kSFDataPos], kCF_DataLength); /* PRQA S 0312 */ /* MD_FblTp_0312 */
                          2300	#1418: #endif
                          2301	#1420:                rxDataIndex += kCF_DataLength; /* Set RX index to next free data element */
                          2302	#line1420
                          2303	..lin.5de73f94..323e101f.0_45::
                          2304	.LDWlin45:
000004f4 a00e             2305		se_lhz	r0, 0(r30)
                          2306	#	    .es
                          2307	.LDW75:
000004f6 2060             2308		se_addi	r0, 7
000004f8 b00e             2309		se_sth	r0, 0(r30)
                          2310	#	    .es
                          2311	.LDW85:
000004fa 00e0             2312		se_extzh	r0
                          2313	#	    .es
                          2314	.LDW95:
                          2315	#1421:             }
                          2316	#1422:          } /* To prevent misunderstandings */
                          2317	#1424:          if (rxDataIndex >= locRxDataLength) /* Last message? (Also if buffer is full!) */
000004fc 0d30             2318		se_cmpl	r0, r3
000004fe e000             2319		se_bge	.L853
                          2320	#1443: #if defined( FBL_TP_ENABLE_ACCEPT_TOO_LARGE_DATA )
                          2321	#1444:             } /* To prevent misunderstandings */
                          2322	#1445: #endif
                          2323	#1447:          }
                          2324	#1448:          else
                          2325	#1449:          {                             /* No, wait for next CF */
                          2326	#1450:             SetRxCFFlag();
                          2327	#line1450
                          2328	..lin.5de73f94..323e101f.0_46::
                          2329	.LDWlin46:
00000500 70e0e000         2330		e_lis	r7, %hiadj(bStateFlags)
00000504 1ce70000         2331		e_add16i	r7, r7, %lo(bStateFlags)
00000508 8007             2332		se_lbz	r0, 0(r7)
0000050a 65e0             2333		se_bseti	r0, 30
0000050c 9007             2334		se_stb	r0, 0(r7)
                          2335	#1451:             StartRxTimeoutCF(kTimeoutCF, kTpRxWaitCF); /* PRQA S 3109 */ /* MD_FblTp_3109 */
0000050e 70e0e000         2336		e_lis	r7, %hiadj(bRxTimer)
00000512 5cc70000         2337		e_sth	r6, %lo(bRxTimer)(r7)
00000516 4810             2338		se_li	r0, 1
00000518 d00d             2339		se_stw	r0, 0(r29)

                                   Fri Apr 10 08:32:21 2020           Page 43
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
                          2340	#1452:             if (rxCheckBSZero() != 0u) /* Check if a FC is requested (BS == 0?) */
0000051a 800c             2341		se_lbz	r0, 0(r28)
0000051c 2a00             2342		se_cmpi	r0, 0
0000051e e600             2343		se_beq	.L855
                          2344	#1453:             {
                          2345	#1454:                rxDecBSCnt();           /* FC is requested! */
                          2346	#line1454
                          2347	..lin.5de73f94..323e101f.0_47::
                          2348	.LDWlin47:
00000520 800c             2349		se_lbz	r0, 0(r28)
00000522 2400             2350		se_subi	r0, 1
00000524 900c             2351		se_stb	r0, 0(r28)
                          2352	#1455:                if (! rxCheckBSCnt())   /* Check if a FC must be send (counter is zero) */
00000526 800c             2353		se_lbz	r0, 0(r28)
00000528 2a00             2354		se_cmpi	r0, 0
0000052a e200             2355		se_bne	.L855
                          2356	#1456:                {
                          2357	#1457:                   AssembleFC();        /* Assemble FC and reload BS counter */
                          2358	#line1457
                          2359	..lin.5de73f94..323e101f.0_48::
                          2360	.LDWlin48:
0000052c 78000001         2361		se_bl	AssembleFC
                          2362	#1458:                   rxReloadBSCnt();
                          2363	#line1458
                          2364	..lin.5de73f94..323e101f.0_49::
                          2365	.LDWlin49:
00000530 70e0e000         2366		e_lis	r7, %hiadj(bRxBlockSize)
00000534 30070000         2367		e_lbz	r0, %lo(bRxBlockSize)(r7)
00000538 70e0e000         2368		e_lis	r7, %hiadj(gTpConfState)
                          2369	#1459: #if defined( FBL_TP_ENABLE_CONFIRMATION_INTERRUPT )
                          2370	#1460:                   SetWaitForFCConfInterrupt(); /* PRQA S 3109 */ /* MD_FblTp_3109 */
0000053c 900c             2371		se_stb	r0, 0(r28)
0000053e 4c00             2372		se_li	r0, 64
00000540 34070000         2373		e_stb	r0, %lo(gTpConfState)(r7)
00000544 4c60             2374		se_li	r0, 70
00000546 70e0e000         2375		e_lis	r7, %hiadj(gTpConfTimer)
0000054a 5c070000         2376		e_sth	r0, %lo(gTpConfTimer)(r7)
                          2377	#1461:                   StopRxTimer();       /* Stop RX timeout CF */
0000054e 4800             2378		se_li	r0, 0
00000550 70e0e000         2379		e_lis	r7, %hiadj(bRxTimer)
00000554 5c070000         2380		e_sth	r0, %lo(bRxTimer)(r7)
                          2381	#1462: #endif
                          2382	#1463:                   (void)CAN_SaveTransmit();
00000558 78000001         2383		se_bl	CAN_SaveTransmit
                          2384	.L855:
                          2385	#1464:                }
                          2386	#1465:             }
                          2387	#1466:             if (rxGetSN() < kL4_MaxSN)
                          2388	#line1466
                          2389	..lin.5de73f94..323e101f.0_50::
                          2390	.LDWlin50:
0000055c 807b             2391		se_lbz	r7, 0(r27)
0000055e 4800             2392		se_li	r0, 0
00000560 18e6c00f         2393		e_andi	r6, r7, 15
00000564 22e6             2394		se_cmpli	r6, 15
00000566 e000             2395		se_bge	.L1404

                                   Fri Apr 10 08:32:21 2020           Page 44
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
                          2396	#1467:             {
                          2397	#1468:                /* SN is calculated modulo 15 */
                          2398	#1469:                rxIncSN(); /* SN increment; Optimization! See define! */
                          2399	#line1469
                          2400	..lin.5de73f94..323e101f.0_51::
                          2401	.LDWlin51:
00000568 18078001         2402		e_addi	r0, r7, 1
                          2403	.L1404:
0000056c 900b             2404		se_stb	r0, 0(r27)
0000056e e800             2405		se_b	.L786
                          2406	.L863:
                          2407	#1470:             }
                          2408	#1471:             else
                          2409	#1472:             {
                          2410	#1473:                rxResetSN(); /* SN set to zero; optimization! See define! */
                          2411	#1474:             }
                          2412	#1475:          }
                          2413	#1476:          break;
                          2414	#	    .es
                          2415	.LDW06:
                          2416	#1477:       }
                          2417	#1478:       /*-----------------------------------------------------------------------------
                          2418	#1479:       | kL4_FlowControl
                          2419	#1480:       -----------------------------------------------------------------------------*/
                          2420	#1481:       case kL4_FlowControl:
                          2421	#1482:       {
                          2422	#1483: #if defined( FBL_TP_ENABLE_CONFIRMATION_INTERRUPT )
                          2423	#1484:          if (IsWaitingForConfInterrupt()) /* PRQA S 3356 */ /* PRQA S 3359 */ /* MD_FblTp_WaitForConfIR */
                          2424	#1485:          { /* PRQA S 3201 */ /* MD_FblTp_WaitForConfIR */
                          2425	#1486:             return kCopyNoData; /* Receive nothing while waiting */
                          2426	#1487:          }
                          2427	#1488: #endif
                          2428	#1489: #if defined( FBL_TP_ENABLE_VARIABLE_RX_DLC )
                          2429	#1490:          /* Checking CAN-DLC */
                          2430	#1491:          if (CanRxActualDLC < (kFC_DataLength + kTpciPos))
                          2431	#1492:          {
                          2432	#1493:             return kCopyNoData;
                          2433	#1494:          }
                          2434	#1495: #endif
                          2435	#1496:          /* Attention: No FC after last data message allowed */
                          2436	#1497:          if (txGetState() != kTpTxWaitFC)
                          2437	#line1497
                          2438	..lin.5de73f94..323e101f.0_52::
                          2439	.LDWlin52:
00000570 70e0e000         2440		e_lis	r7, %hiadj(bTpTxState)
00000574 50e70000         2441		e_lwz	r7, %lo(bTpTxState)(r7)
00000578 2a17             2442		se_cmpi	r7, 1
0000057a e600             2443		se_beq	.L866
                          2444	#1498:          {
                          2445	#1499:             /** This notification does not reset the current transmission status */
                          2446	#1500:             TxConfirm(kTpErrTxFCNotExpected); /* Notify application */
                          2447	#line1500
                          2448	..lin.5de73f94..323e101f.0_53::
                          2449	.LDWlin53:
0000057c 4893             2450		se_li	r3, 9
                          2451	#1501:             return kCopyNoData;

                                   Fri Apr 10 08:32:21 2020           Page 45
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
0000057e e800             2452		se_b	.L1843
                          2453	.L866:
                          2454	#1502:          }
                          2455	#1504:          if ((TPCI_Byte & 0x0Fu) == kFlowStateWait)
                          2456	#line1504
                          2457	..lin.5de73f94..323e101f.0_54::
                          2458	.LDWlin54:
00000580 8003             2459		se_lbz	r0, 0(r3)
00000582 2ef0             2460		se_andi	r0, 15
00000584 2a10             2461		se_cmpi	r0, 1
00000586 e200             2462		se_bne	.L869
                          2463	#1505:          {
                          2464	#1506:             /* WaitFrame received, set timer again */
                          2465	#1507:             StartTxTimeoutFC(kTimeoutFC, kTpTxWaitFC); /* PRQA S 3109 */ /* MD_FblTp_3109 */
                          2466	#line1507
                          2467	..lin.5de73f94..323e101f.0_55::
                          2468	.LDWlin55:
00000588 70e0e000         2469		e_lis	r7, %hiadj(bTxTimer)
0000058c 5cc70000         2470		e_sth	r6, %lo(bTxTimer)(r7)
                          2471	#1508:             return kCopyNoData;
00000590 e800             2472		se_b	.L1838
                          2473	.L869:
                          2474	#1509:          }
                          2475	#1510: #if defined( FBL_TP_ENABLE_ISO15765_2_2 ) || \
                          2476	#1511:     defined( FBL_TP_ENABLE_OVERRUN_FLAG_IN_FC )
                          2477	#1512:          else if ((TPCI_Byte & 0x0Fu) == kFlowStateOverrun)
                          2478	#line1512
                          2479	..lin.5de73f94..323e101f.0_56::
                          2480	.LDWlin56:
00000592 8003             2481		se_lbz	r0, 0(r3)
00000594 2ef0             2482		se_andi	r0, 15
00000596 2a20             2483		se_cmpi	r0, 2
00000598 e200             2484		se_bne	.L873
                          2485	#1513:          {
                          2486	#1514:             FblTpInit();
                          2487	#line1514
                          2488	..lin.5de73f94..323e101f.0_57::
                          2489	.LDWlin57:
0000059a 78000001         2490		se_bl	FblTpInit
                          2491	#1515:             /** This notification does not reset the current transmission status */
                          2492	#1516:             TxConfirm(kTpErrTxOverrun);  /* Notify application */
                          2493	#line1516
                          2494	..lin.5de73f94..323e101f.0_58::
                          2495	.LDWlin58:
0000059e 48f3             2496		se_li	r3, 15
                          2497	#1517:             return kCopyNoData;
000005a0 e800             2498		se_b	.L1844
                          2499	.L873:
                          2500	#1518:          }
                          2501	#1519: #endif
                          2502	#1521: #if defined( FBL_TP_ENABLE_FLOW_STATE )
                          2503	#1522:          else if ((TPCI_Byte & 0x0Fu) != kFlowStateCTS)
                          2504	#line1522
                          2505	..lin.5de73f94..323e101f.0_59::
                          2506	.LDWlin59:
000005a2 8003             2507		se_lbz	r0, 0(r3)

                                   Fri Apr 10 08:32:21 2020           Page 46
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
000005a4 7000c80f         2508		e_and2i.	r0, 15
000005a8 e600             2509		se_beq	.L872
                          2510	.L878:
                          2511	#1523:          {
                          2512	#1524:             FblTpInit();
                          2513	#line1524
                          2514	..lin.5de73f94..323e101f.0_60::
                          2515	.LDWlin60:
000005aa 78000001         2516		se_bl	FblTpInit
                          2517	#1525:             /* Not a valid FlowControl frame - discard */
                          2518	#1526:             TxConfirm(kTpErrTxFSInvalid);  /* Notify application */
                          2519	#line1526
                          2520	..lin.5de73f94..323e101f.0_61::
                          2521	.LDWlin61:
000005ae 4903             2522		se_li	r3, 16
                          2523	.L1843:
                          2524	.L1844:
000005b0 78000001         2525		se_bl	TxConfirm
                          2526	#1527:             return kCopyNoData;
000005b4 e800             2527		se_b	.L786
                          2528	.L872:
                          2529	#1528:          }
                          2530	#1529: #endif
                          2531	#1530:          else
                          2532	#1531:          {
                          2533	#1532:             /* MISRA */
                          2534	#1533:             ;
                          2535	#1534:          }
                          2536	#1536: # if defined( FBL_TP_ENABLE_ONLY_FIRST_FC )
                          2537	#1537:          if (!txGetFCEvaFlag())
                          2538	#1538:          {
                          2539	#1539:             txSetFCEvaFlag();    /* Set flag with the first received FC */
                          2540	#1540: # endif
                          2541	#1542:             txSetBS(DL_Byte); /* Take the full 8 bit BS */ /* PRQA S 3109 */ /* MD_FblTp_3109 */
                          2542	#line1542
                          2543	..lin.5de73f94..323e101f.0_62::
                          2544	.LDWlin62:
000005b6 8103             2545		se_lbz	r0, 1(r3)
000005b8 70e0e000         2546		e_lis	r7, %hiadj(bTxBSCounter)
000005bc 34070000         2547		e_stb	r0, %lo(bTxBSCounter)(r7)
                          2548	#1544: # if defined( FBL_TP_ENABLE_ISO15765_2_2 )
                          2549	#1545:             if ((STmin_Byte & 0x80u) == 0x80u)
000005c0 8273             2550		se_lbz	r7, 2(r3)
000005c2 8203             2551		se_lbz	r0, 2(r3)
000005c4 73c0e000         2552		e_lis	r30, %hiadj(STmin)
000005c8 1fde0000         2553		e_add16i	r30, r30, %lo(STmin)
000005cc 6787             2554		se_btsti	r7, 24
000005ce e600             2555		se_beq	.L881
                          2556	#1546:             {
                          2557	#1547:                if ((STmin_Byte > 0xF0u) && (STmin_Byte <= 0xF9u))
                          2558	#line1547
                          2559	..lin.5de73f94..323e101f.0_63::
                          2560	.LDWlin63:
000005d0 1880a8f0         2561		e_cmpli	r0, 240
000005d4 e100             2562		se_ble	.L883
000005d6 8203             2563		se_lbz	r0, 2(r3)

                                   Fri Apr 10 08:32:21 2020           Page 47
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
000005d8 1880a8f9         2564		e_cmpli	r0, 249
000005dc e500             2565		se_bgt	.L883
                          2566	#1548:                {
                          2567	#1549:                   STmin = kFblTpSTMinF1F9;
                          2568	#line1549
                          2569	..lin.5de73f94..323e101f.0_64::
                          2570	.LDWlin64:
000005de 4810             2571		se_li	r0, 1
000005e0 e800             2572		se_b	.L1845
                          2573	.L883:
                          2574	#1550:                }
                          2575	#1551:                else
                          2576	#1552:                {
                          2577	#1553:                   /* Max STmin time */
                          2578	#1554:                   STmin = (vuint8)((127u / TpCallCycle) + 1u);
                          2579	#line1554
                          2580	..lin.5de73f94..323e101f.0_65::
                          2581	.LDWlin65:
000005e2 6380             2582		se_bgeni	r0, 24
                          2583	.L1845:
000005e4 900e             2584		se_stb	r0, 0(r30)
000005e6 e800             2585		se_b	.L887
                          2586	.L881:
                          2587	#1555:                }
                          2588	#1556:             }
                          2589	#1557:             else
                          2590	#1558: # endif
                          2591	#1559:             {
                          2592	#1560:                STmin = (vuint8)((STmin_Byte / TpCallCycle) + 1u);
                          2593	#line1560
                          2594	..lin.5de73f94..323e101f.0_66::
                          2595	.LDWlin66:
000005e8 2000             2596		se_addi	r0, 1
000005ea 900e             2597		se_stb	r0, 0(r30)
                          2598	#1561: #  if defined( FBL_TP_ENABLE_ISO15765_2_2 )
                          2599	#1562:                assertFblInternal((STmin_Byte < 0x80u), kFblSysAssertParameterOutOfRange); /* PRQA S 2214 */ /* MD_FblDef_Assert */
000005ec 8203             2600		se_lbz	r0, 2(r3)
000005ee 1880a880         2601		e_cmpli	r0, 128
000005f2 e400             2602		se_blt	.L887
000005f4 4d03             2603		se_li	r3, 80
000005f6 78000001         2604		e_bl	ApplFblFatalError
                          2605	.L887:
                          2606	#1563: #  else
                          2607	#1564:                /* Check for integer overflow */
                          2608	#1565:                if (STmin == 0x00u)
                          2609	#1566:                {
                          2610	#1567:                   /* Recover from overflow */
                          2611	#1568:                   STmin = 255u;
                          2612	#1569:                }
                          2613	#1570: #  endif
                          2614	#1571:             }
                          2615	#1573: # if defined( FBL_TP_ENABLE_ONLY_FIRST_FC )
                          2616	#1574:          }
                          2617	#1575:          else
                          2618	#1576:          {
                          2619	#1577:             txReloadBSCnt();

                                   Fri Apr 10 08:32:21 2020           Page 48
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
                          2620	#1578:          }
                          2621	#1579: # endif
                          2622	#1580: #if defined( FBL_TP_ENABLE_NO_STMIN_AFTER_FC )
                          2623	#1581:          StartTxWaitForTxCF(1, kTpTxWaitForTxCF); /* PRQA S 3109 */ /* MD_FblTp_3109 */
                          2624	#1582: #else
                          2625	#1583:          StartTxWaitForTxCF(STmin, kTpTxWaitForTxCF); /* PRQA S 3109 */ /* MD_FblTp_3109 */
                          2626	#line1583
                          2627	..lin.5de73f94..323e101f.0_67::
                          2628	.LDWlin67:
000005fa 800e             2629		se_lbz	r0, 0(r30)
000005fc 70e0e000         2630		e_lis	r7, %hiadj(bTxTimer)
00000600 5c070000         2631		e_sth	r0, %lo(bTxTimer)(r7)
00000604 4820             2632		se_li	r0, 2
                          2633	.L1838:
00000606 70e0e000         2634		e_lis	r7, %hiadj(bTpTxState)
0000060a 54070000         2635		e_stw	r0, %lo(bTpTxState)(r7)
                          2636	#1584: #endif
                          2637	#1585:          break;
                          2638	#1586:       }
                          2639	#1587:       default:
                          2640	#1588:       {
                          2641	#1589:          /* Not used */
                          2642	#1590:          break;
                          2643	#	    .es
                          2644	.LDW16:
                          2645	#	    .es
                          2646	.LDW26:
                          2647	#1591:       }
                          2648	#1592:    }
                          2649	#1594:    return kCopyNoData;
                          2650	.L786:
0000060e 4803             2651		se_li	r3, 0
                          2652	#	    .ef
                          2653	.LDW36:
00000610 c901             2654		se_lwz	r0, 36(sp)
00000612 1b61080c         2655		e_lmw	r27, 12(sp)
00000616 21f1             2656		se_addi	sp, 32
00000618 0090             2657		se_mtlr	r0
0000061a 0004             2658		se_blr
                          2659		.global	__ghs_eofn_FblTpPrecopy
                          2660	__ghs_eofn_FblTpPrecopy:
                          2661		.type	FblTpPrecopy,@function
                          2662		.size	FblTpPrecopy,$-FblTpPrecopy
                          2663		.align	1
                          2664	
                          2665	#function:			FblTpPrecopy
                          2666	#stack frame size:		32
                          2667	#link area offset:		0
                          2668	#local storage area offset:	12
                          2669	#gpr save area offset:		12
                          2670	#
                          2671	#i	r0	local
                          2672	#tmpDL	r0	local
                          2673	#i	r0	local
                          2674	#locRxDataLength	r3	local
                          2675	#i	r6	local

                                   Fri Apr 10 08:32:21 2020           Page 49
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
                          2676	#i	r5	local
                          2677	
                          2678	#data	r31	param
                          2679	
                          2680		.data
                          2681		.section ".vletext", "vax"
                          2682		.vle
                          2683		.vle
                          2684	
                          2685	#1595: } /* PRQA S 6010 */ /* PRQA S 6030 */ /* PRQA S 6050 */ /* MD_FblTp_60xx */ /* PRQA S 4700 */ /* MD_FblTp_4700 */ /* PRQA S 2006 */ /* MD_MSR_14.7 */
                          2686	
                          2687	#1597: /***********************************************************************************************************************
                          2688	#1598:  *  FblTpTask
                          2689	#1599:  **********************************************************************************************************************/
                          2690	#1600: /*! \brief       Cyclicly called task function (e.g. every 10 ms)
                          2691	#1601:  *  \attention   This functions stores the SN within the used CAN transmit buffer. No other function should write to
                          2692	#1602:  *               this buffer!
                          2693	#1603:  **********************************************************************************************************************/
                          2694		.align	1
                          2695		.align	1
                          2696	..gh.f.p.0.a.1.r.0.e.10:
                          2697		.type	..gh.f.p.0.a.1.r.0.e.10,@object
                          2698		.size	..gh.f.p.0.a.1.r.0.e.10,0
                          2699		.global	FblTpTask
                          2700	FblTpTask:
0000061c 182106e0         2701		e_stwu	sp, -32(sp)
00000620 1b410908         2702		e_stmw	r26, 8(sp)
00000624 0080             2703		se_mflr	r0
00000626 d901             2704		se_stw	r0, 36(sp)
                          2705	#	    .bf
                          2706	.LDW46:
                          2707	#1604: void FblTpTask(void)
                          2708	#1605: {
                          2709	#1606: #if defined( FBL_TP_ENABLE_TX_FRAME_PADDING ) || \
                          2710	#1607:     defined( FBL_TP_ENABLE_INTERNAL_MEMCPY )
                          2711	#1608:     vuintx idx;      /* loop variable */
                          2712	#1609: #endif
                          2713	#1611:    /* Disabling the interrupt is not necessary */
                          2714	#1612:    /* Do RX stuff even if waiting for confirmation interrupt */
                          2715	#1613:    if (kTpRxWaitCF == (rxGetState() & kTpRxWaitCF))
00000628 73c0e000         2716		e_lis	r30, %hiadj(bTpRxState)
0000062c 1fde0000         2717		e_add16i	r30, r30, %lo(bTpRxState)
00000630 c00e             2718		se_lwz	r0, 0(r30)
00000632 73800096         2719		e_li	r28, 150
00000636 480f             2720		se_li	r31, 0
00000638 67f0             2721		se_btsti	r0, 31
0000063a e600             2722		se_beq	.L1848
                          2723	#1614:    {
                          2724	#1615:       if (RxTimerValue() != 0u)
                          2725	#line1615
                          2726	..lin.5de73f94..82f45970.0_68::
                          2727	.LDWlin68:
0000063c 70e0e000         2728		e_lis	r7, %hiadj(bRxTimer)
00000640 58070000         2729		e_lhz	r0, %lo(bRxTimer)(r7)
00000644 2a00             2730		se_cmpi	r0, 0
00000646 e600             2731		se_beq	.L1848

                                   Fri Apr 10 08:32:21 2020           Page 50
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
                          2732	#1616:       {
                          2733	#1617:             /* Set a prestate for checking a interrupt while decrementing */
                          2734	#1618:             ClearRxCFFlag();
                          2735	#line1618
                          2736	..lin.5de73f94..82f45970.0_69::
                          2737	.LDWlin69:
00000648 70e0e000         2738		e_lis	r7, %hiadj(bStateFlags)
0000064c 1ce70000         2739		e_add16i	r7, r7, %lo(bStateFlags)
00000650 8007             2740		se_lbz	r0, 0(r7)
00000652 70c0e000         2741		e_lis	r6, %hiadj(bRxTimer)
00000656 1cc60000         2742		e_add16i	r6, r6, %lo(bRxTimer)
                          2743	#1619:             DecRxTimerValue();
0000065a 61e0             2744		se_bclri	r0, 30
0000065c 9007             2745		se_stb	r0, 0(r7)
0000065e a076             2746		se_lhz	r7, 0(r6)
00000660 2407             2747		se_subi	r7, 1
00000662 b076             2748		se_sth	r7, 0(r6)
                          2749	#1621:             if (! RxTimerValue())
00000664 70e0e000         2750		e_lis	r7, %hiadj(bRxTimer)
00000668 58e70000         2751		e_lhz	r7, %lo(bRxTimer)(r7)
0000066c 2a07             2752		se_cmpi	r7, 0
0000066e e200             2753		se_bne	.L1852
                          2754	#1622:             {
                          2755	#1623:                /* CF timeout occurred, do not notify application now! */
                          2756	#1624:                FblTpInit(); /* And go to idle state */
                          2757	#line1624
                          2758	..lin.5de73f94..82f45970.0_70::
                          2759	.LDWlin70:
00000670 78000001         2760		se_bl	FblTpInit
                          2761	#1625:                __ApplFblTpErrorIndication((vuint8)kTpErrRxTimeout); /* Notify application */
                          2762	#line1625
                          2763	..lin.5de73f94..82f45970.0_71::
                          2764	.LDWlin71:
00000674 4873             2765		se_li	r3, 7
00000676 78000001         2766		e_bl	FblCwTpErrorIndication
0000067a e800             2767		se_b	.L1848
                          2768	.L1852:
                          2769	#1626:             }
                          2770	#1627:             else
                          2771	#1628:             {
                          2772	#1629:                if (GetRxCFFlag() != 0u)
                          2773	#line1629
                          2774	..lin.5de73f94..82f45970.0_72::
                          2775	.LDWlin72:
0000067c 6810             2776		se_srwi	r0, 1
0000067e 67f0             2777		se_btsti	r0, 31
00000680 e600             2778		se_beq	.L1848
                          2779	#1630:                {
                          2780	#1631:                   /* Receive interrupt occurred */
                          2781	#1632:                   /* The RxTimerValue is undefined, because of an interrupt */
                          2782	#1633:                   /* during the decrementing -> reload timer */
                          2783	#1634:                   SetRxTimerValue(kTimeoutCF);
                          2784	#line1634
                          2785	..lin.5de73f94..82f45970.0_73::
                          2786	.LDWlin73:
00000682 70e0e000         2787		e_lis	r7, %hiadj(bRxTimer)

                                   Fri Apr 10 08:32:21 2020           Page 51
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
00000686 5f870000         2788		e_sth	r28, %lo(bRxTimer)(r7)
                          2789	.L1848:
                          2790	#1635:                }
                          2791	#1636:             }
                          2792	#1637:       }
                          2793	#1638:    }
                          2794	#1640:    /* RepeatTransmit only necessary with disabled can queue */
                          2795	#1641:    if (txGetState() == kTpTxRepeatTransmit)
0000068a 73a0e000         2796		e_lis	r29, %hiadj(bTpTxState)
0000068e 1fbd0000         2797		e_add16i	r29, r29, %lo(bTpTxState)
00000692 c00d             2798		se_lwz	r0, 0(r29)
00000694 7360e000         2799		e_lis	r27, %hiadj(bTxTimer)
00000698 1f7b0000         2800		e_add16i	r27, r27, %lo(bTxTimer)
0000069c 2a30             2801		se_cmpi	r0, 3
0000069e e200             2802		se_bne	.L1857
                          2803	#line1642
                          2804	..lin.5de73f94..82f45970.0_74::
                          2805	.LDWlin74:
000006a0 70e0e000         2806		e_lis	r7, %hiadj(fblCwDiagTransmitObject)
000006a4 50e70000         2807		e_lwz	r7, %lo(fblCwDiagTransmitObject)(r7)
                          2808	#1642:    {
                          2809	#1643:       if (FblCanTransmit(kFblTpTxHandle) == kFblCanTxOk)
000006a8 7340e000         2810		e_lis	r26, %hiadj(fblCanTxObj)
000006ac 1f5a0000         2811		e_add16i	r26, r26, %lo(fblCanTxObj)
000006b0 1867a014         2812		e_mulli	r3, r7, 20
000006b4 04a3             2813		se_add	r3, r26
000006b6 78000001         2814		e_bl	FblCanTransmit
000006ba 2a03             2815		se_cmpi	r3, 0
000006bc e200             2816		se_bne	.L1857
                          2817	#1644:       {
                          2818	#1645: #if defined( FBL_TP_ENABLE_CONFIRMATION_INTERRUPT )
                          2819	#1646: #else
                          2820	#1647:          __ApplFblTpCanMessageTransmitted(); /* Used for e.g. reseting of application counters */
                          2821	#1648: #endif
                          2822	#1649:          if (txSEG == 0u)
                          2823	#line1649
                          2824	..lin.5de73f94..82f45970.0_75::
                          2825	.LDWlin75:
000006be 70e0e000         2826		e_lis	r7, %hiadj(bTxSEG)
000006c2 58e70000         2827		e_lhz	r7, %lo(bTxSEG)(r7)
000006c6 2a07             2828		se_cmpi	r7, 0
000006c8 e200             2829		se_bne	.L1861
                          2830	#1650:          {
                          2831	#1651:             /* For a single frame txSEG is always zero */
                          2832	#1652:             txSetState(kTpTxIdle);
                          2833	#line1652
                          2834	..lin.5de73f94..82f45970.0_76::
                          2835	.LDWlin76:
000006ca d07d             2836		se_stw	r7, 0(r29)
                          2837	#1653:             rxSetState(kTpRxIdle);
000006cc d0fe             2838		se_stw	r31, 0(r30)
                          2839	#1654:             StopTxTimer();
000006ce e800             2840		se_b	.L3300
                          2841	.L1861:
                          2842	#line1662
                          2843	..lin.5de73f94..82f45970.0_77::

                                   Fri Apr 10 08:32:21 2020           Page 52
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
                          2844	.LDWlin77:
000006d0 70e0e000         2845		e_lis	r7, %hiadj(fblCwDiagTransmitObject)
000006d4 50e70000         2846		e_lwz	r7, %lo(fblCwDiagTransmitObject)(r7)
                          2847	#1656: #if defined( FBL_TP_ENABLE_CONFIRMATION_INTERRUPT )
                          2848	#1657: #else
                          2849	#1658:             TxConfirm(kTpSuccess);
                          2850	#1659: #endif
                          2851	#1660:          }
                          2852	#1661:          else
                          2853	#1662:          {
                          2854	#1663:             /* Check for frame type of repetition and switch state */
                          2855	#1664:             if ((tpCanTxData[kTpciPos] & kL4_FrameTypeMask) == kL4_FirstFrame)
000006d8 18e7a014         2856		e_mulli	r7, r7, 20
000006dc 04a7             2857		se_add	r7, r26
000006de 8807             2858		se_lbz	r0, 8(r7)
000006e0 18c78008         2859		e_addi	r6, r7, 8
000006e4 1800c0f0         2860		e_andi	r0, r0, 240
000006e8 2b00             2861		se_cmpi	r0, 16
000006ea e200             2862		se_bne	.L1864
                          2863	#1665:             {
                          2864	#1666:                StartTxTimeoutFC(kTimeoutFC, kTpTxWaitFC); /* PRQA S 3109 */ /* MD_FblTp_3109 */
                          2865	#line1666
                          2866	..lin.5de73f94..82f45970.0_78::
                          2867	.LDWlin78:
000006ec b0cb             2868		se_sth	r28, 0(r27)
000006ee 4810             2869		se_li	r0, 1
000006f0 e800             2870		se_b	.L3299
                          2871	.L1864:
                          2872	#1667:             }
                          2873	#1668:             else if ((tpCanTxData[kTpciPos] & kL4_FrameTypeMask) == kL4_FlowControl)
                          2874	#line1668
                          2875	..lin.5de73f94..82f45970.0_79::
                          2876	.LDWlin79:
000006f2 8807             2877		se_lbz	r0, 8(r7)
000006f4 1800c0f0         2878		e_andi	r0, r0, 240
000006f8 1800a830         2879		e_cmpi	r0, 48
000006fc e200             2880		se_bne	.L1867
                          2881	.L1868:
                          2882	#1669:             {
                          2883	#1670:                txSetState(kTpTxIdle);
                          2884	#line1670
                          2885	..lin.5de73f94..82f45970.0_80::
                          2886	.LDWlin80:
000006fe d0fd             2887		se_stw	r31, 0(r29)
                          2888	.L3300:
                          2889	#1671: #if defined( FBL_TP_ENABLE_CONFIRMATION_INTERRUPT )
                          2890	#1672: #else
                          2891	#1673:                StartRxTimeoutCF(kTimeoutCF, kTpRxWaitCF); /* Wait for next CF */ /* PRQA S 3109 */ /* MD_FblTp_3109 */
                          2892	#1674: #endif
                          2893	#1675:                StopTxTimer();
00000700 b0fb             2894		se_sth	r31, 0(r27)
00000702 e800             2895		se_b	.L1863
                          2896	.L1867:
                          2897	#1676:             }
                          2898	#1677:             else if ((tpCanTxData[kTpciPos] & kL4_FrameTypeMask) == kL4_ConsecutiveFrame)
                          2899	#line1677

                                   Fri Apr 10 08:32:21 2020           Page 53
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
                          2900	..lin.5de73f94..82f45970.0_81::
                          2901	.LDWlin81:
00000704 8006             2902		se_lbz	r0, 0(r6)
00000706 1800c0f0         2903		e_andi	r0, r0, 240
0000070a 23f0             2904		se_cmpli	r0, 32
0000070c e200             2905		se_bne	.L1863
                          2906	.L1871:
                          2907	#1678:             {
                          2908	#1679:                StartTxWaitForTxCF(STmin, kTpTxWaitForTxCF); /* PRQA S 3109 */ /* MD_FblTp_3109 */
                          2909	#line1679
                          2910	..lin.5de73f94..82f45970.0_82::
                          2911	.LDWlin82:
0000070e 70e0e000         2912		e_lis	r7, %hiadj(STmin)
00000712 30070000         2913		e_lbz	r0, %lo(STmin)(r7)
00000716 b00b             2914		se_sth	r0, 0(r27)
00000718 4820             2915		se_li	r0, 2
                          2916	.L3299:
0000071a d00d             2917		se_stw	r0, 0(r29)
                          2918	.L1863:
                          2919	#1680: #if defined( FBL_TP_ENABLE_CONFIRMATION_INTERRUPT )
                          2920	#1681: #else
                          2921	#1682:                if (txCheckBSZero() != 0u)
                          2922	#1683:                {
                          2923	#1684:                   txDecBSCnt();
                          2924	#1685:                   if (! txCheckBSCnt())
                          2925	#1686:                   {
                          2926	#1687:                      /* Check for FC of counterpart now */
                          2927	#1688:                      /* Overwrite state from kTpTxWaitForTxCF to kTpTxWaitFC */
                          2928	#1689:                      /* bTpTxState for TX changed */
                          2929	#1690:                      StartTxTimeoutFC(kTimeoutFC, kTpTxWaitFC); /* PRQA S 3109 */ /* MD_FblTp_3109 */
                          2930	#1691:                   }
                          2931	#1692:                }
                          2932	#1693: #endif
                          2933	#1694:             }
                          2934	#1695:             else
                          2935	#1696:             {
                          2936	#1697:                /* ("else" required by MISRA) */
                          2937	#1698:             }
                          2938	#1699:          }
                          2939	#1700:          /* If transmission was successful here, wait for next call, to keep the timing
                          2940	#1701:           * (would be too fast if Tx is started in the upcoming switch statement ). */
                          2941	#1702:          if (STmin != 0u)
0000071c 70e0e000         2942		e_lis	r7, %hiadj(STmin)
00000720 30070000         2943		e_lbz	r0, %lo(STmin)(r7)
00000724 2a00             2944		se_cmpi	r0, 0
00000726 7a020158         2945		se_bne	.L1846
                          2946	.L1857:
                          2947	#1703:          {
                          2948	#1704:             return;
                          2949	#1705:          }
                          2950	#1706:       }
                          2951	#1707:    }
                          2952	#1709: #if defined( FBL_TP_ENABLE_CONFIRMATION_INTERRUPT )
                          2953	#1710:    /* Disabling the interrupt is not necessary */
                          2954	#1711:    if (IsWaitingForConfInterrupt())
                          2955	#line1711

                                   Fri Apr 10 08:32:21 2020           Page 54
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
                          2956	..lin.5de73f94..82f45970.0_83::
                          2957	.LDWlin83:
0000072a 70e0e000         2958		e_lis	r7, %hiadj(gTpConfState)
0000072e 30070000         2959		e_lbz	r0, %lo(gTpConfState)(r7)
00000732 7380e000         2960		e_lis	r28, %hiadj(gTpConfTimer)
00000736 1f9c0000         2961		e_add16i	r28, r28, %lo(gTpConfTimer)
0000073a 2a00             2962		se_cmpi	r0, 0
0000073c e600             2963		se_beq	.L1876
                          2964	#1712:    {
                          2965	#1713:       /* Polling CAN is now the task of the wrapper */
                          2966	#1714:       {
                          2967	#1715:          if (GetConfInterruptTimer() != 0u)
                          2968	#line1715
                          2969	..lin.5de73f94..82f45970.0_84::
                          2970	.LDWlin84:
0000073e a00c             2971		se_lhz	r0, 0(r28)
00000740 2a00             2972		se_cmpi	r0, 0
00000742 e600             2973		se_beq	.L1878
                          2974	#1716:          {
                          2975	#1717:             gTpConfTimer--;
                          2976	#line1717
                          2977	..lin.5de73f94..82f45970.0_85::
                          2978	.LDWlin85:
00000744 2400             2979		se_subi	r0, 1
00000746 b00c             2980		se_sth	r0, 0(r28)
                          2981	#1718:             return;  /* Neglect all other things while waiting   */
00000748 78000000         2982		se_b	.L1846
                          2983	.L1878:
                          2984	#1719:          }
                          2985	#1720:          else
                          2986	#1721:          {
                          2987	#1722:             FblTpInit();
                          2988	#line1722
                          2989	..lin.5de73f94..82f45970.0_86::
                          2990	.LDWlin86:
0000074c 78000001         2991		se_bl	FblTpInit
                          2992	#1723:             /* Timeout, apparently no access to bus  */
                          2993	#1724:             TxConfirm(kTpCanTxFailed);  /* Notify application and go to idle state */
                          2994	#line1724
                          2995	..lin.5de73f94..82f45970.0_87::
                          2996	.LDWlin87:
00000750 4823             2997		se_li	r3, 2
00000752 78000001         2998		se_bl	TxConfirm
                          2999	.L1876:
                          3000	#1725:          }
                          3001	#1726:       }
                          3002	#1727:    }
                          3003	#1728: #endif /* FBL_TP_ENABLE_CONFIRMATION_INTERRUPT */
                          3004	#1730:    if (TxTimerValue() != 0u)
                          3005	#line1730
                          3006	..lin.5de73f94..82f45970.0_88::
                          3007	.LDWlin88:
00000756 a00b             3008		se_lhz	r0, 0(r27)
00000758 2a00             3009		se_cmpi	r0, 0
0000075a 7a120124         3010		se_beq	.L1846
                          3011	#1731:    {

                                   Fri Apr 10 08:32:21 2020           Page 55
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
                          3012	#1732:       DecTxTimerValue();
                          3013	#line1732
                          3014	..lin.5de73f94..82f45970.0_89::
                          3015	.LDWlin89:
0000075e a00b             3016		se_lhz	r0, 0(r27)
00000760 2400             3017		se_subi	r0, 1
00000762 b00b             3018		se_sth	r0, 0(r27)
                          3019	#1734:       if (! TxTimerValue())
00000764 a00b             3020		se_lhz	r0, 0(r27)
00000766 2a00             3021		se_cmpi	r0, 0
00000768 7a020116         3022		se_bne	.L1846
                          3023	#1735:       {
                          3024	#1736:          switch (txGetState())
                          3025	#line1736
                          3026	..lin.5de73f94..82f45970.0_90::
                          3027	.LDWlin90:
0000076c c00d             3028		se_lwz	r0, 0(r29)
0000076e 2200             3029		se_cmpli	r0, 1
00000770 7a10010e         3030		se_blt	.L1846
00000774 e600             3031		se_beq	.L1887
00000776 2210             3032		se_cmpli	r0, 2
00000778 e600             3033		se_beq	.L1888
                          3034	.L3054:
                          3035	#1812: #else
                          3036	#1813:                   if (CAN_SaveTransmit() == kTpSuccess)
                          3037	#1814:                   {
                          3038	#1815:                      __ApplFblTpNotifyTx(kCF_DataLength);
                          3039	#1816:                      StartTxWaitForTxCF(STmin, kTpTxWaitForTxCF); /* PRQA S 3109 */ /* MD_FblTp_3109 */
                          3040	#1818:                      if (txCheckBSZero() != 0u)
                          3041	#1819:                      {
                          3042	#1820:                         txDecBSCnt();
                          3043	#1821:                         if (! txCheckBSCnt())
                          3044	#1822:                         {
                          3045	#1823:                            /* Check for FC of counterpart now */
                          3046	#1824:                            /* Overwrite state from kTpTxWaitForTxCF to kTpTxWaitFC */
                          3047	#1825:                            /* bTpTxState for TX changed */
                          3048	#1826:                            StartTxTimeoutFC(kTimeoutFC, kTpTxWaitFC); /* PRQA S 3109 */ /* MD_FblTp_3109 */
                          3049	#1827:                         }
                          3050	#1828:                      }
                          3051	#1829:                   }
                          3052	#1830: #endif
                          3053	#1831:                }
                          3054	#1832:                break;
                          3055	#1833:             }
                          3056	#1834:             case kTpTxIdle:
                          3057	#1835:             {
                          3058	#1836:                break;
                          3059	#1837:             }
                          3060	#1838:             case kTpTxRepeatTransmit:
                          3061	#1839:             default:
                          3062	#1840:             {
                          3063	#1841:                /* typically, when the txTimer expires for Repeated messages */
                          3064	#1842:                txSetState(kTpTxIdle);
                          3065	#line1842
                          3066	..lin.5de73f94..82f45970.0_91::
                          3067	.LDWlin91:

                                   Fri Apr 10 08:32:21 2020           Page 56
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
0000077a d0fd             3068		se_stw	r31, 0(r29)
                          3069	#1843:                rxSetState(kTpRxIdle);
0000077c d0fe             3070		se_stw	r31, 0(r30)
                          3071	#1844:                TxConfirm(kTpCanTxFailed);
0000077e 4823             3072		se_li	r3, 2
                          3073	.L3297:
00000780 78000001         3074		se_bl	TxConfirm
                          3075	#1845:                break;
                          3076	#line1845
                          3077	..lin.5de73f94..82f45970.0_92::
                          3078	.LDWlin92:
00000784 e800             3079		se_b	.L1846
                          3080	.L1887:
                          3081	#1737:          {
                          3082	#1738:             case kTpTxWaitFC:
                          3083	#1739:             {
                          3084	#1740:                FblTpInit();
                          3085	#line1740
                          3086	..lin.5de73f94..82f45970.0_93::
                          3087	.LDWlin93:
00000786 78000001         3088		se_bl	FblTpInit
                          3089	#1741:                /* FC timeout occurred! */
                          3090	#1742:                TxConfirm(kTpTimeoutFC);  /* Notify application and go to idle state */
                          3091	#line1742
                          3092	..lin.5de73f94..82f45970.0_94::
                          3093	.LDWlin94:
0000078a 4853             3094		se_li	r3, 5
                          3095	#1743:                break;
0000078c e800             3096		se_b	.L3297
                          3097	.L1888:
                          3098	#1744:             }
                          3099	#1745:             case kTpTxWaitForTxCF:
                          3100	#1746:             {
                          3101	#1747:                txSEG--;
                          3102	#line1747
                          3103	..lin.5de73f94..82f45970.0_95::
                          3104	.LDWlin95:
0000078e 70e0e000         3105		e_lis	r7, %hiadj(bTxSEG)
00000792 1ce70000         3106		e_add16i	r7, r7, %lo(bTxSEG)
00000796 a007             3107		se_lhz	r0, 0(r7)
00000798 70c0e000         3108		e_lis	r6, %hiadj(fblCwDiagTransmitObject)
0000079c 50c60000         3109		e_lwz	r6, %lo(fblCwDiagTransmitObject)(r6)
000007a0 7060e000         3110		e_lis	r3, %hiadj(bTxSN)
000007a4 7340e000         3111		e_lis	r26, %hiadj(fblCanTxObj)
                          3112	#1748:                /*Assemble CF now*/
                          3113	#1749:                tpCanTxData[kTpciPos]=(vuint8)(kL4_ConsecutiveFrame | (txSN & kL4_MaxSN));
000007a8 2400             3114		se_subi	r0, 1
000007aa b007             3115		se_sth	r0, 0(r7)
000007ac 30e30000         3116		e_lbz	r7, %lo(bTxSN)(r3)
000007b0 18c6a014         3117		e_mulli	r6, r6, 20
000007b4 18e0c00f         3118		e_andi	r0, r7, 15
000007b8 1f5a0000         3119		e_add16i	r26, r26, %lo(fblCanTxObj)
000007bc 2007             3120		se_addi	r7, 1
000007be 7ca6d214         3121		add	r5, r6, r26
000007c2 34e30000         3122		e_stb	r7, %lo(bTxSN)(r3)
000007c6 65a0             3123		se_bseti	r0, 26

                                   Fri Apr 10 08:32:21 2020           Page 57
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
                          3124	#1751:                txSN++;                      /* SN increment */
000007c8 70e0e000         3125		e_lis	r7, %hiadj(bTxSEG)
000007cc 9805             3126		se_stb	r0, 8(r5)
                          3127	#1753:                /* Prepare the CAN-frame for CF */
                          3128	#1755:                if (txSEG == 0u)
000007ce 58070000         3129		e_lhz	r0, %lo(bTxSEG)(r7)
000007d2 18c58008         3130		e_addi	r6, r5, 8
000007d6 7080e000         3131		e_lis	r4, %hiadj(gbTpTxDL)
000007da 4805             3132		se_li	r5, 0
000007dc 1c840000         3133		e_add16i	r4, r4, %lo(gbTpTxDL)
000007e0 2a00             3134		se_cmpi	r0, 0
000007e2 e200             3135		se_bne	.L1907
                          3136	#1756:                {
                          3137	#1757: #if defined( FBL_TP_ENABLE_INTERNAL_MEMCPY )
                          3138	#1758:                   for (idx = 0u; idx < (kCF_DataLength - bPaddingLength); idx++)
                          3139	#line1758
                          3140	..lin.5de73f94..82f45970.0_96::
                          3141	.LDWlin96:
000007e4 e800             3142		se_b	.L1899
                          3143	.L1898:
                          3144	#line1759
                          3145	..lin.5de73f94..82f45970.0_97::
                          3146	.LDWlin97:
000007e6 70e0e000         3147		e_lis	r7, %hiadj(DiagBuffer)
000007ea 50e70000         3148		e_lwz	r7, %lo(DiagBuffer)(r7)
                          3149	#1759:                   {
                          3150	#1760:                      tpCanTxData[kCFDataPos + idx] = txDataBuffer[txDataIndex + idx];
000007ee 0450             3151		se_add	r0, r5
000007f0 7c0700ae         3152		lbzx	r0, r7, r0
000007f4 7c662a14         3153		add	r3, r6, r5
000007f8 2005             3154		se_addi	r5, 1
000007fa 9103             3155		se_stb	r0, 1(r3)
                          3156	.L1899:
000007fc 70e0e000         3157		e_lis	r7, %hiadj(bPaddingLength)
00000800 30e70000         3158		e_lbz	r7, %lo(bPaddingLength)(r7)
00000804 a004             3159		se_lhz	r0, 0(r4)
00000806 1867b007         3160		e_subfic	r3, r7, 7
0000080a 0d35             3161		se_cmpl	r5, r3
0000080c e400             3162		se_blt	.L1898
                          3163	#1761:                   }
                          3164	#1762: #else
                          3165	#1763:                   __ApplFblTpCopyToCAN(&tpCanTxData[kCFDataPos], &txDataBuffer[txDataIndex], (kCF_DataLength - bPaddingLength));
                          3166	#1764: #endif
                          3167	#1765:                   txDataIndex += (kCF_DataLength - bPaddingLength);
                          3168	#line1765
                          3169	..lin.5de73f94..82f45970.0_98::
                          3170	.LDWlin98:
0000080e 0670             3171		se_sub	r0, r7
00000810 2060             3172		se_addi	r0, 7
00000812 b004             3173		se_sth	r0, 0(r4)
                          3174	#1767: #if defined( FBL_TP_ENABLE_VARIABLE_TX_DLC )
                          3175	#1768:                   tpTxDLC = (vuint8)(kCanFrameLength - bPaddingLength);
                          3176	#1769: #endif
                          3177	#1770: #if defined( FBL_TP_ENABLE_TX_FRAME_PADDING )
                          3178	#1771:                   /* PRQA S 3356, 3359 1 */ /* MD_FblTp_WaitForConfIR */
                          3179	#1772:                   for (idx = kCanFrameLength - bPaddingLength; idx < kCanFrameLength; idx++)

                                   Fri Apr 10 08:32:21 2020           Page 58
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
00000814 18a7b008         3180		e_subfic	r5, r7, 8
00000818 e800             3181		se_b	.L1903
                          3182	.L1902:
                          3183	#1773:                   { /* PRQA S 3201 */ /* MD_FblTp_WaitForConfIR */
                          3184	#1774:                      tpCanTxData[idx] = kFblTpFillPattern;
                          3185	#line1774
                          3186	..lin.5de73f94..82f45970.0_99::
                          3187	.LDWlin99:
0000081a 700000aa         3188		e_li	r0, 170
0000081e 7c0629ae         3189		stbx	r0, r6, r5
00000822 2005             3190		se_addi	r5, 1
                          3191	.L1903:
00000824 2275             3192		se_cmpli	r5, 8
00000826 e400             3193		se_blt	.L1902
                          3194	#1775:                   }
                          3195	#1776: #endif
                          3196	#1778:                   /* Send last CF now and we're done! No FC after last CF */
                          3197	#1779: #if defined( FBL_TP_ENABLE_CONFIRMATION_INTERRUPT )
                          3198	#1780:                   SetWaitForLastCFConfInterrupt(); /* PRQA S 3109 */ /* MD_FblTp_3109 */
                          3199	#line1780
                          3200	..lin.5de73f94..82f45970.0_100::
                          3201	.LDWlin100:
00000828 4b00             3202		se_li	r0, 48
0000082a 70e0e000         3203		e_lis	r7, %hiadj(gTpConfState)
0000082e 34070000         3204		e_stb	r0, %lo(gTpConfState)(r7)
00000832 4c60             3205		se_li	r0, 70
00000834 d0fd             3206		se_stw	r31, 0(r29)
                          3207	#1781:                   txSetState(kTpTxIdle);
00000836 d0fe             3208		se_stw	r31, 0(r30)
                          3209	#1782:                   rxSetState(kTpRxIdle);
00000838 b00c             3210		se_sth	r0, 0(r28)
                          3211	#1783:                   (void)CAN_SaveTransmit();
0000083a e800             3212		se_b	.L3298
                          3213	#1784: #else
                          3214	#1785:                   if (CAN_SaveTransmit() == kTpSuccess)
                          3215	#1786:                   {
                          3216	#1787:                      txSetState(kTpTxIdle);
                          3217	#1788:                      rxSetState(kTpRxIdle);
                          3218	#1789:                      TxConfirm(kTpSuccess);
                          3219	#1790:                   }
                          3220	#1791: #endif
                          3221	#1792:                }
                          3222	#1793:                else
                          3223	#1794:                {
                          3224	#1795: #if defined( FBL_TP_ENABLE_INTERNAL_MEMCPY )
                          3225	#1796:                   for (idx = 0u; idx < kCF_DataLength; idx++)
                          3226	.L1907:
                          3227	#line1797
                          3228	..lin.5de73f94..82f45970.0_101::
                          3229	.LDWlin101:
0000083c a004             3230		se_lhz	r0, 0(r4)
0000083e 70e0e000         3231		e_lis	r7, %hiadj(DiagBuffer)
                          3232	#1797:                   {
                          3233	#1798:                      tpCanTxData[kCFDataPos + idx] = txDataBuffer[txDataIndex + idx];
00000842 50e70000         3234		e_lwz	r7, %lo(DiagBuffer)(r7)
00000846 7fe02a14         3235		add	r31, r0, r5

                                   Fri Apr 10 08:32:21 2020           Page 59
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
0000084a 7ce7f8ae         3236		lbzx	r7, r7, r31
0000084e 7c662a14         3237		add	r3, r6, r5
00000852 2005             3238		se_addi	r5, 1
00000854 9173             3239		se_stb	r7, 1(r3)
00000856 2265             3240		se_cmpli	r5, 7
00000858 e400             3241		se_blt	.L1907
                          3242	.L1905:
                          3243	#1799:                   }
                          3244	#1800: #else
                          3245	#1801:                   __ApplFblTpCopyToCAN(&tpCanTxData[kCFDataPos], &txDataBuffer[txDataIndex], kCF_DataLength);
                          3246	#1802: #endif
                          3247	#1803:                   txDataIndex += kCF_DataLength;
                          3248	#line1803
                          3249	..lin.5de73f94..82f45970.0_102::
                          3250	.LDWlin102:
0000085a 2060             3251		se_addi	r0, 7
0000085c b004             3252		se_sth	r0, 0(r4)
                          3253	#1805: #if defined( FBL_TP_ENABLE_VARIABLE_TX_DLC )
                          3254	#1806:                   tpTxDLC = (vuint8)8u;
                          3255	#1807: #endif
                          3256	#1808: #if defined( FBL_TP_ENABLE_CONFIRMATION_INTERRUPT )
                          3257	#1809:                   StartTxWaitForTxCF(STmin, kTpTxWaitForTxCF); /* PRQA S 3109 */ /* MD_FblTp_3109 */
0000085e 70e0e000         3258		e_lis	r7, %hiadj(STmin)
00000862 30070000         3259		e_lbz	r0, %lo(STmin)(r7)
00000866 70e0e000         3260		e_lis	r7, %hiadj(gTpConfState)
0000086a b00b             3261		se_sth	r0, 0(r27)
0000086c 4820             3262		se_li	r0, 2
                          3263	#1810:                   SetWaitForCFConfInterrupt(); /* PRQA S 3109 */ /* MD_FblTp_3109 */
0000086e d00d             3264		se_stw	r0, 0(r29)
00000870 4a00             3265		se_li	r0, 32
00000872 34070000         3266		e_stb	r0, %lo(gTpConfState)(r7)
00000876 4c60             3267		se_li	r0, 70
00000878 b00c             3268		se_sth	r0, 0(r28)
                          3269	.L3298:
                          3270	#1811:                   (void)CAN_SaveTransmit();
0000087a 78000001         3271		se_bl	CAN_SaveTransmit
                          3272	.L1846:
                          3273	#1846:             }
                          3274	#1847:          } /* End of "switch (txGetState())" */
                          3275	#1848:       } /* End of "if (TxTimerValue())" */
                          3276	#1849:    }
                          3277	#1850: } /* PRQA S 6010 */ /* PRQA S 6030 */ /* PRQA S 6080 */ /* MD_FblTp_60xx */ /* PRQA S 4700 */ /* MD_FblTp_4700 */ /* PRQA S 2006 */ /* MD_MSR_14.7 */
                          3278	#	    .ef
                          3279	.LDW56:
                          3280	#line1850
                          3281	..lin.5de73f94..82f45970.0_103::
                          3282	.LDWlin103:
0000087e c901             3283		se_lwz	r0, 36(sp)
00000880 1b410808         3284		e_lmw	r26, 8(sp)
00000884 21f1             3285		se_addi	sp, 32
00000886 0090             3286		se_mtlr	r0
00000888 0004             3287		se_blr
                          3288		.global	__ghs_eofn_FblTpTask
                          3289	__ghs_eofn_FblTpTask:
                          3290		.type	FblTpTask,@function
                          3291		.size	FblTpTask,$-FblTpTask

                                   Fri Apr 10 08:32:21 2020           Page 60
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
                          3292		.align	1
                          3293	
                          3294	#function:			FblTpTask
                          3295	#stack frame size:		32
                          3296	#link area offset:		0
                          3297	#local storage area offset:	8
                          3298	#gpr save area offset:		8
                          3299	#
                          3300	#idx	r5	local
                          3301	
                          3302		.data
                          3303		.section ".vletext", "vax"
                          3304		.vle
                          3305		.vle
                          3306	
                          3307	
                          3308	#1852: /***********************************************************************************************************************
                          3309	#1853:  *  FblTpConfirmation
                          3310	#1854:  **********************************************************************************************************************/
                          3311	#1855: /*! \brief       Confirmation function
                          3312	#1856:  *  \description Without confirmation interrupt: done in Can_SaveTransmit
                          3313	#1857:  *               Can_SaveTransmit is called in:
                          3314	#1858:  *               - TpPrecopy    to send a FlowControl
                          3315	#1859:  *               - TpTransmit   to send a SingleFrame or a FirstFrame
                          3316	#1860:  *               - TpTransmitSF to send a SingleFrame
                          3317	#1861:  *               - TpTask       to send a ConsecutiveFrame
                          3318	#1862:  *  \param[in]   txObject A transmit object handle
                          3319	#1863:  **********************************************************************************************************************/
                          3320		.align	1
                          3321		.align	1
                          3322	..gh.f.p.3.a.1.r.0.e.11:
                          3323		.type	..gh.f.p.3.a.1.r.0.e.11,@object
                          3324		.size	..gh.f.p.3.a.1.r.0.e.11,0
                          3325		.global	FblTpConfirmation
                          3326	FblTpConfirmation:
                          3327	#	    .bf
                          3328	.LDW66:
                          3329	#1864: void FblTpConfirmation(CanTransmitHandle txObject)
                          3330	#1865: {
                          3331	#1866: #if defined( FBL_TP_ENABLE_CONFIRMATION_INTERRUPT )
                          3332	#1867:    vuint8 confIntState;
                          3333	#1868: #endif
                          3334	#1870: #if defined( V_ENABLE_USE_DUMMY_STATEMENT )
                          3335	#1871:    (void)txObject; /* PRQA S 3112 */ /* MD_FblTp_3112 */
                          3336	#1872: #endif
                          3337	#1874: #if defined( FBL_TP_ENABLE_CONFIRMATION_INTERRUPT )
                          3338	#1875:    confIntState = GetConfInterruptState();
0000088a 70e0e000         3339		e_lis	r7, %hiadj(gTpConfState)
0000088e 1ce70000         3340		e_add16i	r7, r7, %lo(gTpConfState)
00000892 8007             3341		se_lbz	r0, 0(r7)
                          3342	#1876:    ResetConfState();
00000894 4806             3343		se_li	r6, 0
00000896 9067             3344		se_stb	r6, 0(r7)
                          3345	#1878:    /* Compiler warning about unused argument can be safely ignored */
                          3346	#1879:    switch (confIntState)
00000898 22f0             3347		se_cmpli	r0, 16

                                   Fri Apr 10 08:32:21 2020           Page 61
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
0000089a e600             3348		se_beq	.L3305
0000089c 23f0             3349		se_cmpli	r0, 32
0000089e e600             3350		se_beq	.L3308
000008a0 1880a830         3351		e_cmpli	r0, 48
000008a4 e600             3352		se_beq	.L3309
000008a6 1880a840         3353		e_cmpli	r0, 64
000008aa e600             3354		se_beq	.L3306
000008ac 1880a850         3355		e_cmpli	r0, 80
000008b0 e600             3356		se_beq	.L3309
000008b2 1880a860         3357		e_cmpli	r0, 96
000008b6 e200             3358		se_bne	.L3301
                          3359	#1908:       }
                          3360	#1909: # if defined( FBL_TP_ENABLE_ISO15765_2_2 ) || \
                          3361	#1910:      defined( FBL_TP_ENABLE_OVERRUN_FLAG_IN_FC )
                          3362	#1911:       case kWaitForFCOverrunConfInterrupt:
                          3363	#1912:       {
                          3364	#1913:          FblTpInit();
                          3365	#line1913
                          3366	..lin.5de73f94..54c2d1e6.0_104::
                          3367	.LDWlin104:
000008b8 78000000         3368		se_b	FblTpInit
                          3369	#1914:          break;
                          3370	.L3301:
                          3371	#1939:       }
                          3372	#1940:       case kWaitForFCWaitFrameConfInterrupt:
                          3373	#1941:       {
                          3374	#1942:          /* Not yet supported */
                          3375	#1943:          break;
                          3376	#1944:       }
                          3377	#1945:       case kWaitForFCQueuedReqWaitFrameConfInterrupt:
                          3378	#1946:       {
                          3379	#1947:          /* No action required */
                          3380	#1948:          break;
                          3381	#1949:       }
                          3382	#1950:       default:
                          3383	#1951:       {
                          3384	#1952:          /* Nothing to do */
                          3385	#1953:          break;
                          3386	#1954:       }
                          3387	#1955:    } /* End of switch state */
                          3388	#1957:    __ApplFblTpCanMessageTransmitted(); /* Used for e.g. reseting of application counters */
                          3389	#1958: #endif /* Use of confirmation interrupt */
                          3390	#1959: } /* PRQA S 6030 */ /* MD_FblTp_60xx */ /* PRQA S 4700 */ /* MD_FblTp_4700 */
                          3391	#	    .ef
                          3392	.LDW76:
                          3393	#line1959
                          3394	..lin.5de73f94..54c2d1e6.0_105::
                          3395	.LDWlin105:
000008bc 0004             3396		se_blr
                          3397	.L3305:
000008be 70e0e000         3398		e_lis	r7, %hiadj(fblCwDiagTransmitObject)
000008c2 50e70000         3399		e_lwz	r7, %lo(fblCwDiagTransmitObject)(r7)
                          3400	#1880:    {
                          3401	#1881:       case kWaitForSFConfInterrupt:
                          3402	#1882:       {
                          3403	#1883:          /* Without confirmation interrupt: done in TpTransmit */

                                   Fri Apr 10 08:32:21 2020           Page 62
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
                          3404	#1884:          /* !! Not done, if SF is send via TpTransmitSF !! */
                          3405	#1885:          TxConfirm(kTpSuccess);    /* inform application */
                          3406	#1886:          break;
                          3407	#1887:       }
                          3408	#1888:       case kWaitForFFConfInterrupt:
                          3409	#1889:       {
                          3410	#1890:          /* Without confirmation interrupt: done in TpTransmit */
                          3411	#1892: # if defined( FBL_TP_DISABLE_OSEK_DATA_LENGTH ) && \
                          3412	#1893:      defined( C_CPUTYPE_8BIT )
                          3413	#1894: # else
                          3414	#1895:          /* Reset sequence counter after sending first frame */
                          3415	#1896:          tpCanTxData[kTpciPos] = (tTpDataType)kL4_FirstFrame;
000008c6 18e7a014         3416		e_mulli	r7, r7, 20
000008ca 1cc70008         3417		e_add16i	r6, r7, %lo(fblCanTxObj+8)
000008ce 70069000         3418		e_add2is	r6, %hiadj(fblCanTxObj+8)
000008d2 9006             3419		se_stb	r0, 0(r6)
                          3420	#1897: # endif
                          3421	#1899:          __ApplFblTpNotifyTx(kFF_DataLength);
                          3422	#1900:          break;
000008d4 0004             3423		se_blr
                          3424	.L3306:
                          3425	#1901:       }
                          3426	#1902:       case kWaitForFCConfInterrupt:
                          3427	#1903:       {
                          3428	#1904:          /* Without confirmation interrupt: done in TpPrecopy or TpTask */
                          3429	#1905:          SetRxCFFlag();
000008d6 70e0e000         3430		e_lis	r7, %hiadj(bStateFlags)
000008da 1ce70000         3431		e_add16i	r7, r7, %lo(bStateFlags)
000008de 8007             3432		se_lbz	r0, 0(r7)
000008e0 65e0             3433		se_bseti	r0, 30
000008e2 9007             3434		se_stb	r0, 0(r7)
                          3435	#1906:          StartRxTimeoutCF(kTimeoutCF, kTpRxWaitCF);   /* Wait for next CF */ /* PRQA S 3109 */ /* MD_FblTp_3109 */
000008e4 70000096         3436		e_li	r0, 150
000008e8 70e0e000         3437		e_lis	r7, %hiadj(bRxTimer)
000008ec 5c070000         3438		e_sth	r0, %lo(bRxTimer)(r7)
000008f0 70e0e000         3439		e_lis	r7, %hiadj(bTpRxState)
000008f4 4810             3440		se_li	r0, 1
000008f6 54070000         3441		e_stw	r0, %lo(bTpRxState)(r7)
                          3442	#1907:          break;
000008fa 0004             3443		se_blr
                          3444	.L3308:
                          3445	#1915:       }
                          3446	#1916: # endif
                          3447	#1917:       case kWaitForCFConfInterrupt:
                          3448	#1918:       {
                          3449	#1919:          /* Without confirmation interrupt: done in TpTask */
                          3450	#1920:          __ApplFblTpNotifyTx(kCF_DataLength);
                          3451	#1921:          if (txCheckBSZero() != 0u)
000008fc 7000e000         3452		e_lis	r0, %hiadj(bTxBSCounter)
00000900 1c000000         3453		e_add16i	r0, r0, %lo(bTxBSCounter)
00000904 8070             3454		se_lbz	r7, 0(r0)
00000906 2a07             3455		se_cmpi	r7, 0
00000908 e600             3456		se_beq	.L3301
                          3457	#1922:          {
                          3458	#1923:             txDecBSCnt();
                          3459	#line1923

                                   Fri Apr 10 08:32:21 2020           Page 63
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
                          3460	..lin.5de73f94..54c2d1e6.0_106::
                          3461	.LDWlin106:
0000090a 8070             3462		se_lbz	r7, 0(r0)
0000090c 2407             3463		se_subi	r7, 1
0000090e 9070             3464		se_stb	r7, 0(r0)
                          3465	#1924:             if (! txCheckBSCnt())
00000910 8000             3466		se_lbz	r0, 0(r0)
00000912 2a00             3467		se_cmpi	r0, 0
00000914 e200             3468		se_bne	.L3301
                          3469	#1925:             {
                          3470	#1926:                /* Check for FC of counterpart now */
                          3471	#1927:                /* Overwrite state from kTpTxWaitForTxCF to kTpTxWaitFC */
                          3472	#1928:                /* bTpTxState for TX changed */
                          3473	#1929:                StartTxTimeoutFC(kTimeoutFC, kTpTxWaitFC); /* PRQA S 3109 */ /* MD_FblTp_3109 */
                          3474	#line1929
                          3475	..lin.5de73f94..54c2d1e6.0_107::
                          3476	.LDWlin107:
00000916 70000096         3477		e_li	r0, 150
0000091a 70e0e000         3478		e_lis	r7, %hiadj(bTxTimer)
0000091e 5c070000         3479		e_sth	r0, %lo(bTxTimer)(r7)
00000922 4810             3480		se_li	r0, 1
00000924 70e0e000         3481		e_lis	r7, %hiadj(bTpTxState)
00000928 54070000         3482		e_stw	r0, %lo(bTpTxState)(r7)
0000092c 0004             3483		se_blr
                          3484	.L3309:
                          3485	#1930:             }
                          3486	#1931:          }
                          3487	#1932:          break;
                          3488	#1933:       }
                          3489	#1934:       case kWaitForLastCFConfInterrupt:
                          3490	#1935:       {
                          3491	#1936:          /* Without confirmation interrupt: done in TpTask   */
                          3492	#1937:          TxConfirm(kTpSuccess);
0000092e 4803             3493		se_li	r3, 0
00000930 78000000         3494		se_b	TxConfirm
                          3495	#1938:          break;
                          3496	..lin.5de73f94..54c2d1e6.0_108::
                          3497	.LDWlin108:
                          3498		.global	__ghs_eofn_FblTpConfirmation
                          3499	__ghs_eofn_FblTpConfirmation:
                          3500		.type	FblTpConfirmation,@function
                          3501		.size	FblTpConfirmation,$-FblTpConfirmation
                          3502		.align	1
                          3503	
                          3504	#function:			FblTpConfirmation
                          3505	#stack frame size:		0
                          3506	#
                          3507	#confIntState	r0	local
                          3508	
                          3509	#txObject	none	param
                          3510	
                          3511		.data
                          3512		.section ".vletext", "vax"
                          3513		.vle
                          3514		.vle
                          3515	

                                   Fri Apr 10 08:32:21 2020           Page 64
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
                          3516		.align	1
                          3517	#CanRxActualDLC	CanRxActualDLC	import
                          3518	#fblCanTxObj	fblCanTxObj	import
                          3519	#fblCwDiagTransmitObject	fblCwDiagTransmitObject	import
                          3520	#DiagBuffer	DiagBuffer	import
                          3521	#bTpTxState	bTpTxState	static
                          3522	#bTpRxState	bTpRxState	static
                          3523	#bTxSEG	bTxSEG	static
                          3524	#bTxBSCounter	bTxBSCounter	static
                          3525	#bTxSN	bTxSN	static
                          3526	#bRxSN	bRxSN	static
                          3527	#bRxTimer	bRxTimer	static
                          3528	#bTxTimer	bTxTimer	static
                          3529	#STmin	STmin	static
                          3530	#bPaddingLength	bPaddingLength	static
                          3531	#bStateFlags	bStateFlags	static
                          3532	#gTpConfState	gTpConfState	static
                          3533	#gTpConfTimer	gTpConfTimer	static
                          3534	
                          3535		.section ".rodata","a"
                          3536		.global	kFblTpMainVersion
00000000 03               3537	kFblTpMainVersion:	.byte	3
                          3538		.type	kFblTpMainVersion,@object
                          3539		.size	kFblTpMainVersion,1
                          3540		.global	kFblTpSubVersion
00000001 21               3541	kFblTpSubVersion:	.byte	33
                          3542		.type	kFblTpSubVersion,@object
                          3543		.size	kFblTpSubVersion,1
                          3544		.global	kFblTpBugFixVersion
00000002 00               3545	kFblTpBugFixVersion:	.byte	0
                          3546		.type	kFblTpBugFixVersion,@object
                          3547		.size	kFblTpBugFixVersion,1
                          3548		.data
                          3549		.section ".bss","awb"
00000017                  3550		.space	1
                          3551		.align	1
                          3552		.global	gbTpRxDL
00000018                  3553	gbTpRxDL:	.space	2
                          3554		.type	gbTpRxDL,@object
                          3555		.size	gbTpRxDL,2
                          3556		.align	1
                          3557		.global	gbTpTxDL
0000001a                  3558	gbTpTxDL:	.space	2
                          3559		.type	gbTpTxDL,@object
                          3560		.size	gbTpTxDL,2
                          3561		.align	1
                          3562		.global	gbTpRxLength
0000001c                  3563	gbTpRxLength:	.space	2
                          3564		.type	gbTpRxLength,@object
                          3565		.size	gbTpRxLength,2
                          3566		.global	bRxBlockSize
0000001e                  3567	bRxBlockSize:	.space	1
                          3568		.type	bRxBlockSize,@object
                          3569		.size	bRxBlockSize,1
                          3570		.global	bRxBSCounter
0000001f                  3571	bRxBSCounter:	.space	1

                                   Fri Apr 10 08:32:21 2020           Page 65
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
                          3572		.type	bRxBSCounter,@object
                          3573		.size	bRxBSCounter,1
                          3574		.global	bRxSTmin
00000020                  3575	bRxSTmin:	.space	1
                          3576		.type	bRxSTmin,@object
                          3577		.size	bRxSTmin,1
                          3578		.data
                          3579		.note ".PPC.EMB.apuinfo",""
00000000 00000008         3580		.long	0x00000008
00000004 00000004         3581		.long	4
00000008 00000002         3582		.long	0x00000002
                          3583		# "APUinfo\000"
0000000c 41505569         3584		.byte	65,80,85,105
00000010 6e666f00         3585		.byte	110,102,111,0
00000014 01040001         3586		.long	0x01040001
                          3587		.ghsnote version,20
                          3588		.ghsnote tools,3
                          3589		.ghsnote options,644
                          3590		.section ".vletext", "vax"
                          3591		.vle
                          3592		.vle
                          3593		.align	1
                          3594	..eof.C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_tp...43.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl..5E8FB084..0::
                          3595		.section	.debug_info
                          3596	.Ldw_begin:
00000000 00000c27         3597		.long	.Ldw_end-.Ldw_begin-4
00000004 0002             3598		.byte	0,2
00000006 00000000         3599		.long	.Ldw_abbr_begin
0000000a 04               3600		.byte	4
                          3601		.section	.debug_abbrev
                          3602	.Ldw_abbr_begin:
                          3603		.section	.debug_info
0000000b 01               3604		.byte	1
0000000c 00000000         3605		.long	..bof.C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_tp...43.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl..5E8FB084..0
00000010 00000000         3606		.long	..eof.C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_tp...43.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl..5E8FB084..0
00000014 2e2e2f2e2e2f2e2e 3607		.strz	"../../../BSW/Fbl/fbl_tp.c"
0000001c 2f4253572f46626c
00000024 2f66626c5f74702e
0000002c 6300            
0000002e 433a5c566563746f 3608		.strz	"C:\\Vector\\CBD1800772_D00_Mpc57xx\\Demo\\DemoFbl\\Appl"
00000036 725c434244313830
0000003e 303737325f443030
00000046 5f4d706335377878
0000004e 5c44656d6f5c4465
00000056 6d6f46626c5c4170
0000005e 706c00          
00000061 4748532043203230 3609		.strz	"GHS C 2017.5.4 [dual]"
00000069 31372e352e34205b
00000071 6475616c5d00    
00000077 0001             3610		.byte	0,1
00000079 00000000         3611		.long	.Ldw_line_begin
0000007d 00000000         3612		.long	.Ldw_macinfo_begin
00000081 00               3613		.byte	0
                          3614	
                          3615		.section	.debug_abbrev
00000000 01               3616		.byte	1
00000001 11               3617		.byte	17
00000002 01               3618		.byte	1
00000003 1101             3619		.byte	17,1
00000005 1201             3620		.byte	18,1
00000007 0308             3621		.byte	3,8
00000009 1b08             3622		.byte	27,8
0000000b 2508             3623		.byte	37,8
0000000d 1305             3624		.byte	19,5
0000000f 1006             3625		.byte	16,6
00000011 4306             3626		.byte	67,6
00000013 420b             3627		.byte	66,11

                                   Fri Apr 10 08:32:21 2020           Page 66
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
00000015 0000             3628		.byte	0,0
                          3629	
                          3630		.section	.debug_line
                          3631	.Ldw_line_begin:
00000000 00000e0f         3632		.long	.Ldw_line_end-.Ldw_line_begin-4
00000004 0002             3633		.byte	0,2
00000006 000005ef         3634		.long	.Ldw_lpro_end-.Ldw_lpro_begin
                          3635	.Ldw_lpro_begin:
0000000a 01               3636		.byte	1
0000000b 00               3637		.byte	0
0000000c 00               3638		.byte	0
0000000d 04               3639		.byte	4
0000000e 0a               3640		.byte	10
0000000f 000101           3641		.byte	0,1,1
00000012 010100           3642		.byte	1,1,0
00000015 000001           3643		.byte	0,0,1
00000018 00               3644		.byte	0
00000019 2e2e2f2e2e2f2e2e 3645		.strz	"../../../BSW/Fbl/fbl_tp.c"
00000021 2f4253572f46626c
00000029 2f66626c5f74702e
00000031 6300            
00000033 000000           3646		.byte	0,0,0
00000036 696e636c7564655c 3647		.strz	"include\\fbl_inc.h"
0000003e 66626c5f696e632e
00000046 6800            
00000048 000000           3648		.byte	0,0,0
0000004b 2e2e2f2e2e2f2e2e 3649		.strz	"../../../bsw/fbl/v_ver.h"
00000053 2f6273772f66626c
0000005b 2f765f7665722e68
00000063 00              
00000064 000000           3650		.byte	0,0,0
00000067 67656e646174615c 3651		.strz	"gendata\\v_cfg.h"
0000006f 765f6366672e6800
00000077 000000           3652		.byte	0,0,0
0000007a 67656e646174615c 3653		.strz	"gendata\\v_inc.h"
00000082 765f696e632e6800
0000008a 000000           3654		.byte	0,0,0
0000008d 67656e646174615c 3655		.strz	"gendata\\v_par.h"
00000095 765f7061722e6800
0000009d 000000           3656		.byte	0,0,0
000000a0 2e2e2f2e2e2f2e2e 3657		.strz	"../../../bsw/_common/v_def.h"
000000a8 2f6273772f5f636f
000000b0 6d6d6f6e2f765f64
000000b8 65662e6800      
000000bd 000000           3658		.byte	0,0,0
000000c0 2e2e2f2e2e2f2e2e 3659		.strz	"../../../bsw/secmod/SecM.h"
000000c8 2f6273772f736563
000000d0 6d6f642f5365634d
000000d8 2e6800          
000000db 000000           3660		.byte	0,0,0
000000de 2e2e2f2e2e2f2e2e 3661		.strz	"../../../bsw/secmod/Sec.h"
000000e6 2f6273772f736563
000000ee 6d6f642f5365632e
000000f6 6800            
000000f8 000000           3662		.byte	0,0,0
000000fb 2e2e2f2e2e2f2e2e 3663		.strz	"../../../bsw/secmod/Sec_Inc.h"
00000103 2f6273772f736563
0000010b 6d6f642f5365635f
00000113 496e632e6800    
00000119 000000           3664		.byte	0,0,0
0000011c 67656e646174615c 3665		.strz	"gendata\\SecM_cfg.h"
00000124 5365634d5f636667
0000012c 2e6800          
0000012f 000000           3666		.byte	0,0,0
00000132 2e2e2f2e2e2f2e2e 3667		.strz	"../../../bsw/secmod/Sec_Types.h"
0000013a 2f6273772f736563
00000142 6d6f642f5365635f
0000014a 54797065732e6800
00000152 000000           3668		.byte	0,0,0
00000155 67656e646174615c 3669		.strz	"gendata\\SecMPar.h"
0000015d 5365634d5061722e
00000165 6800            
00000167 000000           3670		.byte	0,0,0
0000016a 2e2e2f2e2e2f2e2e 3671		.strz	"../../../bsw/secmod/SecM_inc.h"
00000172 2f6273772f736563
0000017a 6d6f642f5365634d
00000182 5f696e632e6800  
00000189 000000           3672		.byte	0,0,0
0000018c 2e2e2f2e2e2f2e2e 3673		.strz	"../../../bsw/secmod/Sec_Crc.h"
00000194 2f6273772f736563
0000019c 6d6f642f5365635f
000001a4 4372632e6800    
000001aa 000000           3674		.byte	0,0,0
000001ad 2e2e2f2e2e2f2e2e 3675		.strz	"../../../bsw/secmod/Sec_SeedKey.h"
000001b5 2f6273772f736563
000001bd 6d6f642f5365635f
000001c5 536565644b65792e
000001cd 6800            
000001cf 000000           3676		.byte	0,0,0
000001d2 696e636c7564655c 3677		.strz	"include\\Sec_SeedKey_Cfg.h"
000001da 5365635f53656564
000001e2 4b65795f4366672e
000001ea 6800            
000001ec 000000           3678		.byte	0,0,0
000001ef 2e2e2f2e2e2f2e2e 3679		.strz	"../../../bsw/secmod/Sec_Verification.h"
000001f7 2f6273772f736563
000001ff 6d6f642f5365635f
00000207 5665726966696361
0000020f 74696f6e2e6800  
00000216 000000           3680		.byte	0,0,0
00000219 2e2e2f2e2e2f2e2e 3681		.strz	"../../../bsw/fbl/fbl_def.h"
00000221 2f6273772f66626c
00000229 2f66626c5f646566
00000231 2e6800          
00000234 000000           3682		.byte	0,0,0
00000237 67656e646174615c 3683		.strz	"gendata\\fbl_cfg.h"
0000023f 66626c5f6366672e
00000247 6800            

                                   Fri Apr 10 08:32:21 2020           Page 67
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
00000249 000000           3684		.byte	0,0,0
0000024c 2e2e2f2e2e2f2e2e 3685		.strz	"../../../bsw/fbl/fbl_assert.h"
00000254 2f6273772f66626c
0000025c 2f66626c5f617373
00000264 6572742e6800    
0000026a 000000           3686		.byte	0,0,0
0000026d 2e2e2f2e2e2f2e2e 3687		.strz	"../../../bsw/fbl/fbl_assert_oem.h"
00000275 2f6273772f66626c
0000027d 2f66626c5f617373
00000285 6572745f6f656d2e
0000028d 6800            
0000028f 000000           3688		.byte	0,0,0
00000292 67656e646174615c 3689		.strz	"gendata\\fbl_mtab.h"
0000029a 66626c5f6d746162
000002a2 2e6800          
000002a5 000000           3690		.byte	0,0,0
000002a8 696e636c7564655c 3691		.strz	"include\\MemMap.h"
000002b0 4d656d4d61702e68
000002b8 00              
000002b9 000000           3692		.byte	0,0,0
000002bc 2e2e2f2e2e2f2e2e 3693		.strz	"../../../bsw/flash/flashdrv.h"
000002c4 2f6273772f666c61
000002cc 73682f666c617368
000002d4 6472762e6800    
000002da 000000           3694		.byte	0,0,0
000002dd 2e2e2f2e2e2f2e2e 3695		.strz	"../../../bsw/flash_xd1/flashdrv_xd1.h"
000002e5 2f6273772f666c61
000002ed 73685f7864312f66
000002f5 6c6173686472765f
000002fd 7864312e6800    
00000303 000000           3696		.byte	0,0,0
00000306 2e2e2f2e2e2f2e2e 3697		.strz	"../../../bsw/fbl/fbl_wd.h"
0000030e 2f6273772f66626c
00000316 2f66626c5f77642e
0000031e 6800            
00000320 000000           3698		.byte	0,0,0
00000323 2e2e2f2e2e2f2e2e 3699		.strz	"../../../bsw/fbl/iotypes.h"
0000032b 2f6273772f66626c
00000333 2f696f7479706573
0000033b 2e6800          
0000033e 000000           3700		.byte	0,0,0
00000341 2e2e2f2e2e2f2e2e 3701		.strz	"../../../bsw/fbl/fbl_mio.h"
00000349 2f6273772f66626c
00000351 2f66626c5f6d696f
00000359 2e6800          
0000035c 000000           3702		.byte	0,0,0
0000035f 2e2e2f2e2e2f2e2e 3703		.strz	"../../../bsw/fbl/fbl_flio.h"
00000367 2f6273772f66626c
0000036f 2f66626c5f666c69
00000377 6f2e6800        
0000037b 000000           3704		.byte	0,0,0
0000037e 2e2e2f2e2e2f2e2e 3705		.strz	"../../../bsw/fbl/fbl_flio_xd1.h"
00000386 2f6273772f66626c
0000038e 2f66626c5f666c69
00000396 6f5f7864312e6800
0000039e 000000           3706		.byte	0,0,0
000003a1 2e2e2f2e2e2f2e2e 3707		.strz	"../../../bsw/eep/EepInc.h"
000003a9 2f6273772f656570
000003b1 2f456570496e632e
000003b9 6800            
000003bb 000000           3708		.byte	0,0,0
000003be 2e2e2f2e2e2f2e2e 3709		.strz	"../../../bsw/eep/EepIO.h"
000003c6 2f6273772f656570
000003ce 2f456570494f2e68
000003d6 00              
000003d7 000000           3710		.byte	0,0,0
000003da 2e2e2f2e2e2f2e2e 3711		.strz	"../../../bsw/fbl/applvect.h"
000003e2 2f6273772f66626c
000003ea 2f6170706c766563
000003f2 742e6800        
000003f6 000000           3712		.byte	0,0,0
000003f9 2e2e2f2e2e2f2e2e 3713		.strz	"../../../bsw/fbl/fbl_cw.h"
00000401 2f6273772f66626c
00000409 2f66626c5f63772e
00000411 6800            
00000413 000000           3714		.byte	0,0,0
00000416 67656e646174615c 3715		.strz	"gendata\\fbl_cw_cfg.h"
0000041e 66626c5f63775f63
00000426 66672e6800      
0000042b 000000           3716		.byte	0,0,0
0000042e 2e2e2f2e2e2f2e2e 3717		.strz	"../../../bsw/fbl/fbl_hw.h"
00000436 2f6273772f66626c
0000043e 2f66626c5f68772e
00000446 6800            
00000448 000000           3718		.byte	0,0,0
0000044b 2e2e2f2e2e2f2e2e 3719		.strz	"../../../bsw/fbl/fbl_sfr.h"
00000453 2f6273772f66626c
0000045b 2f66626c5f736672
00000463 2e6800          
00000466 000000           3720		.byte	0,0,0
00000469 67656e646174615c 3721		.strz	"gendata\\ftp_cfg.h"
00000471 6674705f6366672e
00000479 6800            
0000047b 000000           3722		.byte	0,0,0
0000047e 2e2e2f2e2e2f2e2e 3723		.strz	"../../../bsw/fbl/fbl_tp.h"
00000486 2f6273772f66626c
0000048e 2f66626c5f74702e
00000496 6800            
00000498 000000           3724		.byte	0,0,0
0000049b 696e636c7564655c 3725		.strz	"include\\WrapNv_inc.h"
000004a3 577261704e765f69
000004ab 6e632e6800      
000004b0 000000           3726		.byte	0,0,0
000004b3 2e2e2f2e2e2f2e2e 3727		.strz	"../../../bsw/wrapnv/WrapNv.h"
000004bb 2f6273772f777261
000004c3 706e762f57726170
000004cb 4e762e6800      
000004d0 000000           3728		.byte	0,0,0
000004d3 67656e646174615c 3729		.strz	"gendata\\WrapNv_cfg.h"
000004db 577261704e765f63
000004e3 66672e6800      
000004e8 000000           3730		.byte	0,0,0
000004eb 67656e646174615c 3731		.strz	"gendata\\fbl_apfb.h"
000004f3 66626c5f61706662
000004fb 2e6800          
000004fe 000000           3732		.byte	0,0,0
00000501 2e2e2f2e2e2f2e2e 3733		.strz	"../../../bsw/fbl/fbl_diag.h"
00000509 2f6273772f66626c
00000511 2f66626c5f646961
00000519 672e6800        
0000051d 000000           3734		.byte	0,0,0
00000520 2e2e2f2e2e2f2e2e 3735		.strz	"../../../bsw/fbl/fbl_diag_oem.h"
00000528 2f6273772f66626c
00000530 2f66626c5f646961
00000538 675f6f656d2e6800
00000540 000000           3736		.byte	0,0,0
00000543 2e2e2f2e2e2f2e2e 3737		.strz	"../../../bsw/fbl/fbl_mem.h"
0000054b 2f6273772f66626c
00000553 2f66626c5f6d656d
0000055b 2e6800          
0000055e 000000           3738		.byte	0,0,0
00000561 2e2e2f2e2e2f2e2e 3739		.strz	"../../../bsw/fbl/fbl_mem_oem.h"
00000569 2f6273772f66626c
00000571 2f66626c5f6d656d
00000579 5f6f656d2e6800  

                                   Fri Apr 10 08:32:21 2020           Page 68
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
00000580 000000           3740		.byte	0,0,0
00000583 696e636c7564655c 3741		.strz	"include\\fbl_ap.h"
0000058b 66626c5f61702e68
00000593 00              
00000594 000000           3742		.byte	0,0,0
00000597 696e636c7564655c 3743		.strz	"include\\fbl_apwd.h"
0000059f 66626c5f61707764
000005a7 2e6800          
000005aa 000000           3744		.byte	0,0,0
000005ad 696e636c7564655c 3745		.strz	"include\\fbl_apdi.h"
000005b5 66626c5f61706469
000005bd 2e6800          
000005c0 000000           3746		.byte	0,0,0
000005c3 696e636c7564655c 3747		.strz	"include\\fbl_apnv.h"
000005cb 66626c5f61706e76
000005d3 2e6800          
000005d6 000000           3748		.byte	0,0,0
000005d9 2e2e2f2e2e2f2e2e 3749		.strz	"../../../bsw/fbl/fbl_main.h"
000005e1 2f6273772f66626c
000005e9 2f66626c5f6d6169
000005f1 6e2e6800        
000005f5 000000           3750		.byte	0,0,0
000005f8 00               3751		.byte	0
                          3752	.Ldw_lpro_end:
                          3753		.section	.debug_macinfo
                          3754	.Ldw_macinfo_begin:
                          3755		.section	.debug_frame
                          3756	.LDW_5d25e48:
00000000 0000008c         3757		.long	.LDW_unq_2-.LDW_unq_1
                          3758	.LDW_unq_1:
00000004 ffffffff         3759		.byte	255,255,255,255
00000008 01               3760		.byte	1
00000009 00               3761		.byte	0
0000000a 01               3762		.byte	1
0000000b 01               3763		.byte	1
0000000c 6c               3764		.byte	108
0000000d 0c               3765		.byte	12
0000000e 01               3766		.byte	1
0000000f 00               3767		.byte	0
00000010 07               3768		.byte	7
00000011 00               3769		.byte	0
00000012 07               3770		.byte	7
00000013 01               3771		.byte	1
00000014 07               3772		.byte	7
00000015 02               3773		.byte	2
00000016 07               3774		.byte	7
00000017 03               3775		.byte	3
00000018 07               3776		.byte	7
00000019 04               3777		.byte	4
0000001a 07               3778		.byte	7
0000001b 05               3779		.byte	5
0000001c 07               3780		.byte	7
0000001d 06               3781		.byte	6
0000001e 07               3782		.byte	7
0000001f 07               3783		.byte	7
00000020 07               3784		.byte	7
00000021 08               3785		.byte	8
00000022 07               3786		.byte	7
00000023 09               3787		.byte	9
00000024 07               3788		.byte	7
00000025 0a               3789		.byte	10
00000026 07               3790		.byte	7
00000027 0b               3791		.byte	11
00000028 07               3792		.byte	7
00000029 0c               3793		.byte	12
0000002a 07               3794		.byte	7
0000002b 0d               3795		.byte	13

                                   Fri Apr 10 08:32:21 2020           Page 69
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
0000002c 07               3796		.byte	7
0000002d 0e               3797		.byte	14
0000002e 07               3798		.byte	7
0000002f 0f               3799		.byte	15
00000030 07               3800		.byte	7
00000031 10               3801		.byte	16
00000032 07               3802		.byte	7
00000033 11               3803		.byte	17
00000034 07               3804		.byte	7
00000035 12               3805		.byte	18
00000036 07               3806		.byte	7
00000037 13               3807		.byte	19
00000038 07               3808		.byte	7
00000039 14               3809		.byte	20
0000003a 07               3810		.byte	7
0000003b 15               3811		.byte	21
0000003c 07               3812		.byte	7
0000003d 16               3813		.byte	22
0000003e 07               3814		.byte	7
0000003f 17               3815		.byte	23
00000040 07               3816		.byte	7
00000041 18               3817		.byte	24
00000042 07               3818		.byte	7
00000043 19               3819		.byte	25
00000044 07               3820		.byte	7
00000045 1a               3821		.byte	26
00000046 07               3822		.byte	7
00000047 1b               3823		.byte	27
00000048 07               3824		.byte	7
00000049 1c               3825		.byte	28
0000004a 07               3826		.byte	7
0000004b 1d               3827		.byte	29
0000004c 07               3828		.byte	7
0000004d 1e               3829		.byte	30
0000004e 07               3830		.byte	7
0000004f 1f               3831		.byte	31
00000050 07               3832		.byte	7
00000051 20               3833		.byte	32
00000052 07               3834		.byte	7
00000053 21               3835		.byte	33
00000054 07               3836		.byte	7
00000055 22               3837		.byte	34
00000056 07               3838		.byte	7
00000057 23               3839		.byte	35
00000058 07               3840		.byte	7
00000059 24               3841		.byte	36
0000005a 07               3842		.byte	7
0000005b 25               3843		.byte	37
0000005c 07               3844		.byte	7
0000005d 26               3845		.byte	38
0000005e 07               3846		.byte	7
0000005f 27               3847		.byte	39
00000060 07               3848		.byte	7
00000061 28               3849		.byte	40
00000062 07               3850		.byte	7
00000063 29               3851		.byte	41

                                   Fri Apr 10 08:32:21 2020           Page 70
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
00000064 07               3852		.byte	7
00000065 2a               3853		.byte	42
00000066 07               3854		.byte	7
00000067 2b               3855		.byte	43
00000068 07               3856		.byte	7
00000069 2c               3857		.byte	44
0000006a 07               3858		.byte	7
0000006b 2d               3859		.byte	45
0000006c 07               3860		.byte	7
0000006d 2e               3861		.byte	46
0000006e 07               3862		.byte	7
0000006f 2f               3863		.byte	47
00000070 07               3864		.byte	7
00000071 30               3865		.byte	48
00000072 07               3866		.byte	7
00000073 31               3867		.byte	49
00000074 07               3868		.byte	7
00000075 32               3869		.byte	50
00000076 07               3870		.byte	7
00000077 33               3871		.byte	51
00000078 07               3872		.byte	7
00000079 34               3873		.byte	52
0000007a 07               3874		.byte	7
0000007b 35               3875		.byte	53
0000007c 07               3876		.byte	7
0000007d 36               3877		.byte	54
0000007e 07               3878		.byte	7
0000007f 37               3879		.byte	55
00000080 07               3880		.byte	7
00000081 38               3881		.byte	56
00000082 07               3882		.byte	7
00000083 39               3883		.byte	57
00000084 07               3884		.byte	7
00000085 3a               3885		.byte	58
00000086 07               3886		.byte	7
00000087 3b               3887		.byte	59
00000088 07               3888		.byte	7
00000089 3c               3889		.byte	60
0000008a 07               3890		.byte	7
0000008b 3d               3891		.byte	61
0000008c 07               3892		.byte	7
0000008d 3e               3893		.byte	62
0000008e 07               3894		.byte	7
0000008f 3f               3895		.byte	63
                          3896	.LDW_unq_2:
                          3897		.section	.debug_info
                          3898	.LDW_4a0c500:
00000082 47               3899		.byte	71
00000083 01               3900		.byte	1
                          3901	
                          3902		.section	.debug_abbrev
00000017 47               3903		.byte	71
00000018 15               3904		.byte	21
00000019 01               3905		.byte	1
0000001a 270c             3906		.byte	39,12
0000001c 0000             3907		.byte	0,0

                                   Fri Apr 10 08:32:21 2020           Page 71
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
                          3908	
                          3909		.section	.debug_info
00000084 00               3910		.byte	0
                          3911	
                          3912	.LDW_4a0c618:
00000085 27               3913		.byte	39
00000086 756e7369676e6564 3914		.strz	"unsigned long"
0000008e 206c6f6e6700    
00000094 07               3915		.byte	7
00000095 04               3916		.byte	4
                          3917	
                          3918		.section	.debug_abbrev
0000001e 27               3919		.byte	39
0000001f 24               3920		.byte	36
00000020 00               3921		.byte	0
00000021 0308             3922		.byte	3,8
00000023 3e0b             3923		.byte	62,11
00000025 0b0b             3924		.byte	11,11
00000027 0000             3925		.byte	0,0
                          3926	
                          3927		.section	.debug_info
                          3928	.LDW_4a0c650:
00000096 27               3929		.byte	39
00000097 756e7369676e6564 3930		.strz	"unsigned char"
0000009f 206368617200    
000000a5 08               3931		.byte	8
000000a6 01               3932		.byte	1
                          3933	
                          3934	.LDW_4a0c810:
000000a7 46               3935		.byte	70
000000a8 00000000         3936		.long	.LDW_4a4b8b0
000000ac 01               3937		.byte	1
                          3938	
                          3939		.section	.debug_abbrev
00000029 46               3940		.byte	70
0000002a 15               3941		.byte	21
0000002b 01               3942		.byte	1
0000002c 4910             3943		.byte	73,16
0000002e 270c             3944		.byte	39,12
00000030 0000             3945		.byte	0,0
                          3946	
                          3947		.section	.debug_info
000000ad 00               3948		.byte	0
                          3949	
                          3950	.LDW_4a0c538:
000000ae 47               3951		.byte	71
000000af 01               3952		.byte	1
                          3953	
                          3954	.LDW_4a03268:
000000b0 14               3955		.byte	20
000000b1 00000000         3956		.long	.LDW_4a4b8b0
000000b5 00               3957		.byte	0
                          3958	
                          3959		.section	.debug_abbrev
00000032 14               3960		.byte	20
00000033 05               3961		.byte	5
00000034 00               3962		.byte	0
00000035 4910             3963		.byte	73,16

                                   Fri Apr 10 08:32:21 2020           Page 72
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
00000037 4b0c             3964		.byte	75,12
00000039 0000             3965		.byte	0,0
                          3966	
                          3967		.section	.debug_info
000000b6 00               3968		.byte	0
                          3969	
                          3970	.LDW_4a0c6c0:
000000b7 47               3971		.byte	71
000000b8 01               3972		.byte	1
                          3973	
000000b9 00               3974		.byte	0
                          3975	
                          3976	.LDW_4a0c3b0:
000000ba 47               3977		.byte	71
000000bb 01               3978		.byte	1
                          3979	
000000bc 00               3980		.byte	0
                          3981	
                          3982	.LDW_4a0c420:
000000bd 47               3983		.byte	71
000000be 01               3984		.byte	1
                          3985	
000000bf 00               3986		.byte	0
                          3987	
                          3988	.LDW_4a0c7a0:
000000c0 47               3989		.byte	71
000000c1 01               3990		.byte	1
                          3991	
000000c2 00               3992		.byte	0
                          3993	
                          3994	.LDW_4a0c4c8:
000000c3 27               3995		.byte	39
000000c4 756e7369676e6564 3996		.strz	"unsigned short"
000000cc 2073686f727400  
000000d3 07               3997		.byte	7
000000d4 02               3998		.byte	2
                          3999	
                          4000	.LDW_4a0c9d0:
000000d5 46               4001		.byte	70
000000d6 00000000         4002		.long	.LDW_4a4b8b0
000000da 01               4003		.byte	1
                          4004	
                          4005	.LDW_4a03208:
000000db 14               4006		.byte	20
000000dc 00000000         4007		.long	.LDW_4a4da60
000000e0 00               4008		.byte	0
                          4009	
000000e1 00               4010		.byte	0
                          4011	
                          4012	.LDW_4a0c458:
000000e2 46               4013		.byte	70
000000e3 00000000         4014		.long	.LDW_4a4b8b0
000000e7 01               4015		.byte	1
                          4016	
                          4017	.LDW_4a03658:
000000e8 14               4018		.byte	20
000000e9 00000000         4019		.long	.LDW_4a4b8b0

                                   Fri Apr 10 08:32:21 2020           Page 73
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
000000ed 00               4020		.byte	0
                          4021	
000000ee 00               4022		.byte	0
                          4023	
                          4024	.LDW_5b15c40:
000000ef 2d               4025		.byte	45
000000f0 00000000         4026		.long	.LDW_4a4b8b0
                          4027	
                          4028		.section	.debug_abbrev
0000003b 2d               4029		.byte	45
0000003c 35               4030		.byte	53
0000003d 00               4031		.byte	0
0000003e 4910             4032		.byte	73,16
00000040 0000             4033		.byte	0,0
                          4034	
                          4035		.section	.debug_info
                          4036	.LDW_4a0c7d8:
000000f4 31               4037		.byte	49
000000f5 00000000         4038		.long	.LDW_5b15c40
                          4039	
                          4040		.section	.debug_abbrev
00000042 31               4041		.byte	49
00000043 0f               4042		.byte	15
00000044 00               4043		.byte	0
00000045 4910             4044		.byte	73,16
00000047 0000             4045		.byte	0,0
                          4046	
                          4047		.section	.debug_info
                          4048	.LDW_5bae500:
000000f9 2b               4049		.byte	43
000000fa 00000000         4050		.long	.LDW_5bae4a8
                          4051	
                          4052		.section	.debug_abbrev
00000049 2b               4053		.byte	43
0000004a 26               4054		.byte	38
0000004b 00               4055		.byte	0
0000004c 4910             4056		.byte	73,16
0000004e 0000             4057		.byte	0,0
                          4058	
                          4059		.section	.debug_info
                          4060	.LDW_4a0c570:
000000fe 46               4061		.byte	70
000000ff 00000000         4062		.long	.LDW_4a4b8b0
00000103 01               4063		.byte	1
                          4064	
                          4065	.LDW_4a033e8:
00000104 14               4066		.byte	20
00000105 00000000         4067		.long	.LDW_5bae500
00000109 00               4068		.byte	0
                          4069	
0000010a 00               4070		.byte	0
                          4071	
                          4072	.LDW_5bae6c8:
0000010b 2b               4073		.byte	43
0000010c 00000000         4074		.long	.LDW_4a4da60
                          4075	

                                   Fri Apr 10 08:32:21 2020           Page 74
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
                          4076	.LDW_4a0c5a8:
00000110 47               4077		.byte	71
00000111 01               4078		.byte	1
                          4079	
00000112 00               4080		.byte	0
                          4081	
                          4082	.LDW_4a0c848:
00000113 47               4083		.byte	71
00000114 01               4084		.byte	1
                          4085	
                          4086	.LDW_4a03718:
00000115 14               4087		.byte	20
00000116 00000000         4088		.long	.LDW_5baeca0
0000011a 00               4089		.byte	0
                          4090	
0000011b 00               4091		.byte	0
                          4092	
                          4093	.LDW_4a0cb20:
0000011c 27               4094		.byte	39
0000011d 696e7400         4095		.strz	"int"
00000121 05               4096		.byte	5
00000122 04               4097		.byte	4
                          4098	
                          4099	.LDW_5d6ec50:
00000123 31               4100		.byte	49
00000124 00000000         4101		.long	.LDW_4a4b8b0
                          4102	
                          4103	.LDW_5d74b98:
00000128 3c               4104		.byte	60
00000129 00               4105		.byte	0
0000012a 08               4106		.byte	8
0000012b 00000000         4107		.long	.LDW_4a4b8b0
                          4108	
                          4109		.section	.debug_abbrev
00000050 3c               4110		.byte	60
00000051 01               4111		.byte	1
00000052 01               4112		.byte	1
00000053 090b             4113		.byte	9,11
00000055 0b0f             4114		.byte	11,15
00000057 4910             4115		.byte	73,16
00000059 0000             4116		.byte	0,0
                          4117	
                          4118		.section	.debug_info
0000012f 34               4119		.byte	52
00000130 00000000         4120		.long	.LDW_4a0cb20
00000134 04               4121		.byte	4
00000135 00               4122		.byte	0
00000136 07               4123		.byte	7
                          4124	
                          4125		.section	.debug_abbrev
0000005b 34               4126		.byte	52
0000005c 21               4127		.byte	33
0000005d 00               4128		.byte	0
0000005e 4910             4129		.byte	73,16
00000060 0b0f             4130		.byte	11,15
00000062 220d             4131		.byte	34,13

                                   Fri Apr 10 08:32:21 2020           Page 75
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
00000064 2f0d             4132		.byte	47,13
00000066 0000             4133		.byte	0,0
                          4134	
                          4135		.section	.debug_info
00000137 00               4136		.byte	0
                          4137	
                          4138	.LDW_5d727e8:
00000138 47               4139		.byte	71
00000139 01               4140		.byte	1
                          4141	
                          4142	.LDW_5d6e658:
0000013a 14               4143		.byte	20
0000013b 00000000         4144		.long	.LDW_4a4b8b0
0000013f 00               4145		.byte	0
                          4146	
00000140 00               4147		.byte	0
                          4148	
                          4149	.LDW_5d72200:
00000141 31               4150		.byte	49
00000142 00000000         4151		.long	.LDW_5d727e8
                          4152	
                          4153	.LDW_5d74240:
00000146 2d               4154		.byte	45
00000147 00000000         4155		.long	.LDW_5d742f0
                          4156	
                          4157	.LDW_5cc44b8:
0000014b 2b               4158		.byte	43
0000014c 00000000         4159		.long	.LDW_4a4b8b0
                          4160	
                          4161	.LDW_5cc1e30:
00000150 3c               4162		.byte	60
00000151 00               4163		.byte	0
00000152 14               4164		.byte	20
00000153 00000000         4165		.long	.LDW_5d74138
                          4166	
00000157 34               4167		.byte	52
00000158 00000000         4168		.long	.LDW_4a0cb20
0000015c 04               4169		.byte	4
0000015d 00               4170		.byte	0
0000015e 00               4171		.byte	0
                          4172	
0000015f 00               4173		.byte	0
                          4174	
                          4175	.LDW_5cc7fb0:
00000160 2d               4176		.byte	45
00000161 00000000         4177		.long	.LDW_5cc4d50
                          4178	
                          4179	.LDW_5cc78d0:
00000165 2d               4180		.byte	45
00000166 00000000         4181		.long	.LDW_5cc4a38
                          4182	
                          4183	.LDW_5cc7718:
0000016a 2d               4184		.byte	45
0000016b 00000000         4185		.long	.LDW_4a4da60
                          4186	
                          4187	.LDW_5cc7be8:

                                   Fri Apr 10 08:32:21 2020           Page 76
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
0000016f 2d               4188		.byte	45
00000170 00000000         4189		.long	.LDW_5cc4b40
                          4190	
                          4191	.LDW_5cc7770:
00000174 2d               4192		.byte	45
00000175 00000000         4193		.long	.LDW_5cc4358
                          4194	
                          4195	.LDW_5cca758:
00000179 31               4196		.byte	49
0000017a 00000000         4197		.long	.LDW_5d74138
                          4198	
                          4199	.LDW_5cca560:
0000017e 46               4200		.byte	70
0000017f 00000000         4201		.long	.LDW_4a4b8b0
00000183 01               4202		.byte	1
                          4203	
                          4204	.LDW_5cccb28:
00000184 14               4205		.byte	20
00000185 00000000         4206		.long	.LDW_5cca758
00000189 00               4207		.byte	0
                          4208	
0000018a 00               4209		.byte	0
                          4210	
                          4211	.LDW_5ccd658:
0000018b 27               4212		.byte	39
0000018c 756e7369676e6564 4213		.strz	"unsigned int"
00000194 20696e7400      
00000199 07               4214		.byte	7
0000019a 04               4215		.byte	4
                          4216	
                          4217	.LDW_5ccd818:
0000019b 47               4218		.byte	71
0000019c 01               4219		.byte	1
                          4220	
                          4221	.LDW_5ccce88:
0000019d 14               4222		.byte	20
0000019e 00000000         4223		.long	.LDW_5d73dc8
000001a2 00               4224		.byte	0
                          4225	
000001a3 00               4226		.byte	0
                          4227	
                          4228	.LDW_5ccd1f8:
000001a4 47               4229		.byte	71
000001a5 01               4230		.byte	1
                          4231	
                          4232	.LDW_5ccc9a8:
000001a6 14               4233		.byte	20
000001a7 00000000         4234		.long	.LDW_4a4b8b0
000001ab 00               4235		.byte	0
                          4236	
000001ac 00               4237		.byte	0
                          4238	
                          4239	.LDW_5ccd578:
000001ad 47               4240		.byte	71
000001ae 01               4241		.byte	1
                          4242	
000001af 00               4243		.byte	0

                                   Fri Apr 10 08:32:21 2020           Page 77
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
                          4244	
                          4245	.LDW_5ccd150:
000001b0 47               4246		.byte	71
000001b1 01               4247		.byte	1
                          4248	
                          4249	.LDW_5ccca38:
000001b2 14               4250		.byte	20
000001b3 00000000         4251		.long	.LDW_4a4b8b0
000001b7 00               4252		.byte	0
                          4253	
000001b8 00               4254		.byte	0
                          4255	
                          4256	.LDW_5d77c88:
000001b9 47               4257		.byte	71
000001ba 01               4258		.byte	1
                          4259	
                          4260	.LDW_5ccdf58:
000001bb 14               4261		.byte	20
000001bc 00000000         4262		.long	.LDW_4a4b8b0
000001c0 00               4263		.byte	0
                          4264	
000001c1 00               4265		.byte	0
                          4266	
                          4267	.LDW_4a4b8b0:
000001c2 2a               4268		.byte	42
000001c3 7675696e743800   4269		.strz	"vuint8"
000001ca 9b04             4270		.byte	155,4
000001cc 18               4271		.byte	24
000001cd 07               4272		.byte	7
000001ce 00000000         4273		.long	.LDW_4a0c650
                          4274	
                          4275		.section	.debug_abbrev
00000068 2a               4276		.byte	42
00000069 16               4277		.byte	22
0000006a 00               4278		.byte	0
0000006b 0308             4279		.byte	3,8
0000006d 3b0f             4280		.byte	59,15
0000006f 390f             4281		.byte	57,15
00000071 3a0f             4282		.byte	58,15
00000073 4910             4283		.byte	73,16
00000075 0000             4284		.byte	0,0
                          4285	
                          4286		.section	.debug_info
                          4287	.LDW_4a4da08:
000001d2 2a               4288		.byte	42
000001d3 7675696e74313600 4289		.strz	"vuint16"
000001db a604             4290		.byte	166,4
000001dd 18               4291		.byte	24
000001de 07               4292		.byte	7
000001df 00000000         4293		.long	.LDW_4a0c4c8
                          4294	
                          4295	.LDW_4a4b800:
000001e3 2a               4296		.byte	42
000001e4 7675696e74333200 4297		.strz	"vuint32"
000001ec b204             4298		.byte	178,4
000001ee 18               4299		.byte	24

                                   Fri Apr 10 08:32:21 2020           Page 78
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
000001ef 07               4300		.byte	7
000001f0 00000000         4301		.long	.LDW_4a0c618
                          4302	
                          4303	.LDW_5baeca0:
000001f4 2a               4304		.byte	42
000001f5 43616e5472616e73 4305		.strz	"CanTransmitHandle"
000001fd 6d697448616e646c
00000205 6500            
00000207 dc02             4306		.byte	220,2
00000209 10               4307		.byte	16
0000020a 25               4308		.byte	37
0000020b 00000000         4309		.long	.LDW_4a4b8b0
                          4310	
                          4311	.LDW_5bae4a8:
0000020f 2a               4312		.byte	42
00000210 7043686970446174 4313		.strz	"pChipDataPtr"
00000218 6150747200      
0000021d df02             4314		.byte	223,2
0000021f 1a               4315		.byte	26
00000220 25               4316		.byte	37
00000221 00000000         4317		.long	.LDW_4a0c7d8
                          4318	
                          4319	.LDW_5d740e0:
00000225 42               4320		.byte	66
00000226 746167496e746572 4321		.strz	"tagInternalMsgObject"
0000022e 6e616c4d73674f62
00000236 6a65637400      
0000023b f002             4322		.byte	240,2
0000023d 10               4323		.byte	16
0000023e 25               4324		.byte	37
0000023f 10               4325		.byte	16
00000240 01               4326		.byte	1
                          4327	
                          4328		.section	.debug_abbrev
00000077 42               4329		.byte	66
00000078 13               4330		.byte	19
00000079 01               4331		.byte	1
0000007a 0308             4332		.byte	3,8
0000007c 3b0f             4333		.byte	59,15
0000007e 390f             4334		.byte	57,15
00000080 3a0f             4335		.byte	58,15
00000082 0b0f             4336		.byte	11,15
00000084 320b             4337		.byte	50,11
00000086 0000             4338		.byte	0,0
                          4339	
                          4340		.section	.debug_info
                          4341	.LDW_5d73360:
00000241 25               4342		.byte	37
00000242 636f6e74726f6c00 4343		.strz	"control"
0000024a f702             4344		.byte	247,2
0000024c 0d               4345		.byte	13
0000024d 25               4346		.byte	37
0000024e 00000000         4347		.long	.LDW_4a4da08
00000252 0223             4348		.byte	2,35
00000254 00               4349		.byte	0
00000255 01               4350		.byte	1
                          4351	
                          4352		.section	.debug_abbrev
00000088 25               4353		.byte	37
00000089 0d               4354		.byte	13
0000008a 00               4355		.byte	0

                                   Fri Apr 10 08:32:21 2020           Page 79
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
0000008b 0308             4356		.byte	3,8
0000008d 3b0f             4357		.byte	59,15
0000008f 390f             4358		.byte	57,15
00000091 3a0f             4359		.byte	58,15
00000093 4910             4360		.byte	73,16
00000095 380a             4361		.byte	56,10
00000097 320b             4362		.byte	50,11
00000099 0000             4363		.byte	0,0
                          4364	
                          4365		.section	.debug_info
                          4366	.LDW_5d72ce8:
00000256 25               4367		.byte	37
00000257 74696d657374616d 4368		.strz	"timestamp"
0000025f 7000            
00000261 f802             4369		.byte	248,2
00000263 0d               4370		.byte	13
00000264 25               4371		.byte	37
00000265 00000000         4372		.long	.LDW_4a4da08
00000269 0223             4373		.byte	2,35
0000026b 02               4374		.byte	2
0000026c 01               4375		.byte	1
                          4376	
                          4377	.LDW_5d72ee0:
0000026d 25               4378		.byte	37
0000026e 6d7367494400     4379		.strz	"msgID"
00000274 fa02             4380		.byte	250,2
00000276 0d               4381		.byte	13
00000277 25               4382		.byte	37
00000278 00000000         4383		.long	.LDW_4a4b800
0000027c 0223             4384		.byte	2,35
0000027e 04               4385		.byte	4
0000027f 01               4386		.byte	1
                          4387	
                          4388	.LDW_5d73090:
00000280 25               4389		.byte	37
00000281 44617461466c6400 4390		.strz	"DataFld"
00000289 fb02             4391		.byte	251,2
0000028b 0d               4392		.byte	13
0000028c 25               4393		.byte	37
0000028d 00000000         4394		.long	.LDW_5d74b98
00000291 0223             4395		.byte	2,35
00000293 08               4396		.byte	8
00000294 01               4397		.byte	1
                          4398	
00000295 00               4399		.byte	0
                          4400	
                          4401	.LDW_5d74190:
00000296 2a               4402		.byte	42
00000297 74496e7465726e61 4403		.strz	"tInternalMsgObject"
0000029f 6c4d73674f626a65
000002a7 637400          
000002aa fc02             4404		.byte	252,2
000002ac 03               4405		.byte	3
000002ad 25               4406		.byte	37
000002ae 00000000         4407		.long	.LDW_5d740e0
                          4408	
                          4409	.LDW_5d742f0:
000002b2 42               4410		.byte	66
000002b3 7461674d73674f62 4411		.strz	"tagMsgObject"
000002bb 6a65637400      

                                   Fri Apr 10 08:32:21 2020           Page 80
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
000002c0 ff02             4412		.byte	255,2
000002c2 19               4413		.byte	25
000002c3 25               4414		.byte	37
000002c4 14               4415		.byte	20
000002c5 01               4416		.byte	1
                          4417	
                          4418	.LDW_5d73288:
000002c6 25               4419		.byte	37
000002c7 6d73674f626a6563 4420		.strz	"msgObject"
000002cf 7400            
000002d1 8103             4421		.byte	129,3
000002d3 17               4422		.byte	23
000002d4 25               4423		.byte	37
000002d5 00000000         4424		.long	.LDW_5d74190
000002d9 0223             4425		.byte	2,35
000002db 00               4426		.byte	0
000002dc 01               4427		.byte	1
                          4428	
                          4429	.LDW_5d72e50:
000002dd 25               4430		.byte	37
000002de 436f6e6669726d61 4431		.strz	"ConfirmationFct"
000002e6 74696f6e46637400
000002ee 8203             4432		.byte	130,3
000002f0 0b               4433		.byte	11
000002f1 25               4434		.byte	37
000002f2 00000000         4435		.long	.LDW_5d72200
000002f6 0223             4436		.byte	2,35
000002f8 10               4437		.byte	16
000002f9 01               4438		.byte	1
                          4439	
000002fa 00               4440		.byte	0
                          4441	
                          4442	.LDW_5d74138:
000002fb 2a               4443		.byte	42
000002fc 744d73674f626a65 4444		.strz	"tMsgObject"
00000304 637400          
00000307 8303             4445		.byte	131,3
00000309 03               4446		.byte	3
0000030a 25               4447		.byte	37
0000030b 00000000         4448		.long	.LDW_5d74240
                          4449	
                          4450	.LDW_4a4da60:
0000030f 2a               4451		.byte	42
00000310 7454704461746154 4452		.strz	"tTpDataType"
00000318 79706500        
0000031c 59               4453		.byte	89
0000031d 11               4454		.byte	17
0000031e 27               4455		.byte	39
0000031f 00000000         4456		.long	.LDW_4a4da08
                          4457	
                          4458	.LDW_5d73dc8:
00000323 2a               4459		.byte	42
00000324 744377446174614c 4460		.strz	"tCwDataLengthType"
0000032c 656e677468547970
00000334 6500            
00000336 c001             4461		.byte	192,1
00000338 15               4462		.byte	21
00000339 23               4463		.byte	35
0000033a 00000000         4464		.long	.LDW_4a4da60
                          4465	
                          4466	.LDW_5cc49e0:
0000033e 30               4467		.byte	48

                                   Fri Apr 10 08:32:21 2020           Page 81
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
0000033f 00               4468		.byte	0
00000340 c201             4469		.byte	194,1
00000342 01               4470		.byte	1
00000343 01               4471		.byte	1
00000344 04               4472		.byte	4
00000345 01               4473		.byte	1
                          4474	
                          4475		.section	.debug_abbrev
0000009b 30               4476		.byte	48
0000009c 04               4477		.byte	4
0000009d 01               4478		.byte	1
0000009e 0308             4479		.byte	3,8
000000a0 3b0f             4480		.byte	59,15
000000a2 390f             4481		.byte	57,15
000000a4 3a0f             4482		.byte	58,15
000000a6 0b0f             4483		.byte	11,15
000000a8 320b             4484		.byte	50,11
000000aa 0000             4485		.byte	0,0
                          4486	
                          4487		.section	.debug_info
                          4488	.LDW_5cc3420:
00000346 2f               4489		.byte	47
00000347 6b5470527849646c 4490		.strz	"kTpRxIdle"
0000034f 6500            
00000351 c301             4491		.byte	195,1
00000353 04               4492		.byte	4
00000354 01               4493		.byte	1
00000355 00               4494		.byte	0
                          4495	
                          4496		.section	.debug_abbrev
000000ac 2f               4497		.byte	47
000000ad 28               4498		.byte	40
000000ae 00               4499		.byte	0
000000af 0308             4500		.byte	3,8
000000b1 3b0f             4501		.byte	59,15
000000b3 390f             4502		.byte	57,15
000000b5 3a0f             4503		.byte	58,15
000000b7 1c0d             4504		.byte	28,13
000000b9 0000             4505		.byte	0,0
                          4506	
                          4507		.section	.debug_info
                          4508	.LDW_5cc39a0:
00000356 2f               4509		.byte	47
00000357 6b54705278576169 4510		.strz	"kTpRxWaitCF"
0000035f 74434600        
00000363 c401             4511		.byte	196,1
00000365 04               4512		.byte	4
00000366 01               4513		.byte	1
00000367 01               4514		.byte	1
                          4515	
                          4516	.LDW_5cc33e0:
00000368 2f               4517		.byte	47
00000369 6b54705278426c6f 4518		.strz	"kTpRxBlocked"
00000371 636b656400      
00000376 c501             4519		.byte	197,1
00000378 04               4520		.byte	4
00000379 01               4521		.byte	1
0000037a 10               4522		.byte	16
                          4523	

                                   Fri Apr 10 08:32:21 2020           Page 82
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
0000037b 00               4524		.byte	0
                          4525	
                          4526	.LDW_5cc4a38:
0000037c 2a               4527		.byte	42
0000037d 7454705278537461 4528		.strz	"tTpRxState"
00000385 746500          
00000388 c601             4529		.byte	198,1
0000038a 03               4530		.byte	3
0000038b 01               4531		.byte	1
0000038c 00000000         4532		.long	.LDW_5cc49e0
                          4533	
                          4534	.LDW_5cc4ae8:
00000390 30               4535		.byte	48
00000391 00               4536		.byte	0
00000392 ca01             4537		.byte	202,1
00000394 01               4538		.byte	1
00000395 01               4539		.byte	1
00000396 04               4540		.byte	4
00000397 01               4541		.byte	1
                          4542	
                          4543	.LDW_5cc3460:
00000398 2f               4544		.byte	47
00000399 6b5470547849646c 4545		.strz	"kTpTxIdle"
000003a1 6500            
000003a3 cb01             4546		.byte	203,1
000003a5 04               4547		.byte	4
000003a6 01               4548		.byte	1
000003a7 00               4549		.byte	0
                          4550	
                          4551	.LDW_5cc36a0:
000003a8 2f               4552		.byte	47
000003a9 6b54705478576169 4553		.strz	"kTpTxWaitFC"
000003b1 74464300        
000003b5 cc01             4554		.byte	204,1
000003b7 04               4555		.byte	4
000003b8 01               4556		.byte	1
000003b9 01               4557		.byte	1
                          4558	
                          4559	.LDW_5cc3320:
000003ba 2f               4560		.byte	47
000003bb 6b54705478576169 4561		.strz	"kTpTxWaitForTxCF"
000003c3 74466f7254784346
000003cb 00              
000003cc cd01             4562		.byte	205,1
000003ce 04               4563		.byte	4
000003cf 01               4564		.byte	1
000003d0 02               4565		.byte	2
                          4566	
                          4567	.LDW_5cc35a0:
000003d1 2f               4568		.byte	47
000003d2 6b54705478526570 4569		.strz	"kTpTxRepeatTransmit"
000003da 6561745472616e73
000003e2 6d697400        
000003e6 ce01             4570		.byte	206,1
000003e8 04               4571		.byte	4
000003e9 01               4572		.byte	1
000003ea 03               4573		.byte	3
                          4574	
000003eb 00               4575		.byte	0
                          4576	
                          4577	.LDW_5cc4d50:
000003ec 2a               4578		.byte	42
000003ed 7454705478537461 4579		.strz	"tTpTxState"
000003f5 746500          

                                   Fri Apr 10 08:32:21 2020           Page 83
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
000003f8 cf01             4580		.byte	207,1
000003fa 03               4581		.byte	3
000003fb 01               4582		.byte	1
000003fc 00000000         4583		.long	.LDW_5cc4ae8
                          4584	
                          4585	.LDW_5cc4b40:
00000400 2a               4586		.byte	42
00000401 745470527854696d 4587		.strz	"tTpRxTimer"
00000409 657200          
0000040c e801             4588		.byte	232,1
0000040e 11               4589		.byte	17
0000040f 01               4590		.byte	1
00000410 00000000         4591		.long	.LDW_4a4da08
                          4592	
                          4593	.LDW_5cc4358:
00000414 2a               4594		.byte	42
00000415 745470547854696d 4595		.strz	"tTpTxTimer"
0000041d 657200          
00000420 e901             4596		.byte	233,1
00000422 11               4597		.byte	17
00000423 01               4598		.byte	1
00000424 00000000         4599		.long	.LDW_4a4da08
                          4600	
                          4601	.LDW_5cc43b0:
00000428 2a               4602		.byte	42
00000429 745470436f6e6654 4603		.strz	"tTpConfTimer"
00000431 696d657200      
00000436 ea01             4604		.byte	234,1
00000438 11               4605		.byte	17
00000439 01               4606		.byte	1
0000043a 00000000         4607		.long	.LDW_4a4da08
                          4608	
                          4609	.LDW_5cc6a28:
0000043e 07               4610		.byte	7
0000043f 43616e5278416374 4611		.strz	"CanRxActualDLC"
00000447 75616c444c4300  
0000044e 8804             4612		.byte	136,4
00000450 2e               4613		.byte	46
00000451 25               4614		.byte	37
00000452 00000000         4615		.long	.LDW_4a4b800
00000456 01               4616		.byte	1
00000457 01               4617		.byte	1
                          4618	
                          4619		.section	.debug_abbrev
000000bb 07               4620		.byte	7
000000bc 34               4621		.byte	52
000000bd 00               4622		.byte	0
000000be 0308             4623		.byte	3,8
000000c0 3b0f             4624		.byte	59,15
000000c2 390f             4625		.byte	57,15
000000c4 3a0f             4626		.byte	58,15
000000c6 4910             4627		.byte	73,16
000000c8 3f0c             4628		.byte	63,12
000000ca 3c0c             4629		.byte	60,12
000000cc 0000             4630		.byte	0,0
                          4631	
                          4632		.section	.debug_info
                          4633	.LDW_5cc6a80:
00000458 07               4634		.byte	7
00000459 66626c43616e5478 4635		.strz	"fblCanTxObj"
00000461 4f626a00        

                                   Fri Apr 10 08:32:21 2020           Page 84
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
00000465 8502             4636		.byte	133,2
00000467 3b               4637		.byte	59
00000468 23               4638		.byte	35
00000469 00000000         4639		.long	.LDW_5cc1e30
0000046d 01               4640		.byte	1
0000046e 01               4641		.byte	1
                          4642	
                          4643	.LDW_5cc6fa8:
0000046f 07               4644		.byte	7
00000470 66626c4377446961 4645		.strz	"fblCwDiagTransmitObject"
00000478 675472616e736d69
00000480 744f626a65637400
00000488 8602             4646		.byte	134,2
0000048a 2d               4647		.byte	45
0000048b 23               4648		.byte	35
0000048c 00000000         4649		.long	.LDW_4a4b800
00000490 01               4650		.byte	1
00000491 01               4651		.byte	1
                          4652	
                          4653	.LDW_5cc70b0:
00000492 07               4654		.byte	7
00000493 4469616742756666 4655		.strz	"DiagBuffer"
0000049b 657200          
0000049e e303             4656		.byte	227,3
000004a0 5e               4657		.byte	94
000004a1 2d               4658		.byte	45
000004a2 00000000         4659		.long	.LDW_5d6ec50
000004a6 01               4660		.byte	1
000004a7 01               4661		.byte	1
                          4662	
                          4663	.LDW_5cc7528:
000004a8 06               4664		.byte	6
000004a9 6b46626c54704d61 4665		.strz	"kFblTpMainVersion"
000004b1 696e56657273696f
000004b9 6e00            
000004bb 7d               4666		.byte	125
000004bc 13               4667		.byte	19
000004bd 01               4668		.byte	1
000004be 00000000         4669		.long	.LDW_5cc44b8
000004c2 01               4670		.byte	1
000004c3 00               4671		.byte	0
000004c4 0503             4672		.byte	5,3
000004c6 00000000         4673		.long	kFblTpMainVersion
                          4674	
                          4675		.section	.debug_abbrev
000000ce 06               4676		.byte	6
000000cf 34               4677		.byte	52
000000d0 00               4678		.byte	0
000000d1 0308             4679		.byte	3,8
000000d3 3b0f             4680		.byte	59,15
000000d5 390f             4681		.byte	57,15
000000d7 3a0f             4682		.byte	58,15
000000d9 4910             4683		.byte	73,16
000000db 3f0c             4684		.byte	63,12
000000dd 3c0c             4685		.byte	60,12
000000df 020a             4686		.byte	2,10
000000e1 0000             4687		.byte	0,0
                          4688	
                          4689		.section	.debug_info
                          4690	.LDW_5cc71b8:
000004ca 06               4691		.byte	6

                                   Fri Apr 10 08:32:21 2020           Page 85
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
000004cb 6b46626c54705375 4692		.strz	"kFblTpSubVersion"
000004d3 6256657273696f6e
000004db 00              
000004dc 7e               4693		.byte	126
000004dd 13               4694		.byte	19
000004de 01               4695		.byte	1
000004df 00000000         4696		.long	.LDW_5cc44b8
000004e3 01               4697		.byte	1
000004e4 00               4698		.byte	0
000004e5 0503             4699		.byte	5,3
000004e7 00000000         4700		.long	kFblTpSubVersion
                          4701	
                          4702	.LDW_5cc7318:
000004eb 06               4703		.byte	6
000004ec 6b46626c54704275 4704		.strz	"kFblTpBugFixVersion"
000004f4 6746697856657273
000004fc 696f6e00        
00000500 7f               4705		.byte	127
00000501 13               4706		.byte	19
00000502 01               4707		.byte	1
00000503 00000000         4708		.long	.LDW_5cc44b8
00000507 01               4709		.byte	1
00000508 00               4710		.byte	0
00000509 0503             4711		.byte	5,3
0000050b 00000000         4712		.long	kFblTpBugFixVersion
                          4713	
                          4714	.LDW_5cc7210:
0000050f 06               4715		.byte	6
00000510 676254705278444c 4716		.strz	"gbTpRxDL"
00000518 00              
00000519 8e02             4717		.byte	142,2
0000051b 0d               4718		.byte	13
0000051c 01               4719		.byte	1
0000051d 00000000         4720		.long	.LDW_4a4da60
00000521 01               4721		.byte	1
00000522 00               4722		.byte	0
00000523 0503             4723		.byte	5,3
00000525 00000000         4724		.long	gbTpRxDL
                          4725	
                          4726	.LDW_5cc7268:
00000529 06               4727		.byte	6
0000052a 676254705478444c 4728		.strz	"gbTpTxDL"
00000532 00              
00000533 9502             4729		.byte	149,2
00000535 0d               4730		.byte	13
00000536 01               4731		.byte	1
00000537 00000000         4732		.long	.LDW_4a4da60
0000053b 01               4733		.byte	1
0000053c 00               4734		.byte	0
0000053d 0503             4735		.byte	5,3
0000053f 00000000         4736		.long	gbTpTxDL
                          4737	
                          4738	.LDW_5cc7878:
00000543 06               4739		.byte	6
00000544 6762547052784c65 4740		.strz	"gbTpRxLength"
0000054c 6e67746800      
00000551 9b02             4741		.byte	155,2
00000553 0d               4742		.byte	13
00000554 01               4743		.byte	1
00000555 00000000         4744		.long	.LDW_4a4da60
00000559 01               4745		.byte	1
0000055a 00               4746		.byte	0
0000055b 0503             4747		.byte	5,3

                                   Fri Apr 10 08:32:21 2020           Page 86
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
0000055d 00000000         4748		.long	gbTpRxLength
                          4749	
                          4750	.LDW_5cc7a88:
00000561 06               4751		.byte	6
00000562 6254705478537461 4752		.strz	"bTpTxState"
0000056a 746500          
0000056d b002             4753		.byte	176,2
0000056f 28               4754		.byte	40
00000570 01               4755		.byte	1
00000571 00000000         4756		.long	.LDW_5cc7fb0
00000575 00               4757		.byte	0
00000576 00               4758		.byte	0
00000577 0503             4759		.byte	5,3
00000579 00000000         4760		.long	bTpTxState..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_tp.
                          4761	
                          4762	.LDW_5cc7df8:
0000057d 06               4763		.byte	6
0000057e 6254705278537461 4764		.strz	"bTpRxState"
00000586 746500          
00000589 c402             4765		.byte	196,2
0000058b 28               4766		.byte	40
0000058c 01               4767		.byte	1
0000058d 00000000         4768		.long	.LDW_5cc78d0
00000591 00               4769		.byte	0
00000592 00               4770		.byte	0
00000593 0503             4771		.byte	5,3
00000595 00000000         4772		.long	bTpRxState..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_tp.
                          4773	
                          4774	.LDW_5cc8060:
00000599 06               4775		.byte	6
0000059a 625278426c6f636b 4776		.strz	"bRxBlockSize"
000005a2 53697a6500      
000005a7 d502             4777		.byte	213,2
000005a9 1d               4778		.byte	29
000005aa 01               4779		.byte	1
000005ab 00000000         4780		.long	.LDW_5b15c40
000005af 01               4781		.byte	1
000005b0 00               4782		.byte	0
000005b1 0503             4783		.byte	5,3
000005b3 00000000         4784		.long	bRxBlockSize
                          4785	
                          4786	.LDW_5cc7928:
000005b7 06               4787		.byte	6
000005b8 6252784253436f75 4788		.strz	"bRxBSCounter"
000005c0 6e74657200      
000005c5 e302             4789		.byte	227,2
000005c7 1d               4790		.byte	29
000005c8 01               4791		.byte	1
000005c9 00000000         4792		.long	.LDW_5b15c40
000005cd 01               4793		.byte	1
000005ce 00               4794		.byte	0
000005cf 0503             4795		.byte	5,3
000005d1 00000000         4796		.long	bRxBSCounter
                          4797	
                          4798	.LDW_5cc7980:
000005d5 06               4799		.byte	6
000005d6 62527853546d696e 4800		.strz	"bRxSTmin"
000005de 00              
000005df eb02             4801		.byte	235,2
000005e1 08               4802		.byte	8
000005e2 01               4803		.byte	1

                                   Fri Apr 10 08:32:21 2020           Page 87
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
000005e3 00000000         4804		.long	.LDW_4a4b8b0
000005e7 01               4805		.byte	1
000005e8 00               4806		.byte	0
000005e9 0503             4807		.byte	5,3
000005eb 00000000         4808		.long	bRxSTmin
                          4809	
                          4810	.LDW_5cc7e50:
000005ef 06               4811		.byte	6
000005f0 62547853454700   4812		.strz	"bTxSEG"
000005f7 f902             4813		.byte	249,2
000005f9 29               4814		.byte	41
000005fa 01               4815		.byte	1
000005fb 00000000         4816		.long	.LDW_5cc7718
000005ff 00               4817		.byte	0
00000600 00               4818		.byte	0
00000601 0503             4819		.byte	5,3
00000603 00000000         4820		.long	bTxSEG..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_tp.
                          4821	
                          4822	.LDW_5cc7ae0:
00000607 06               4823		.byte	6
00000608 6254784253436f75 4824		.strz	"bTxBSCounter"
00000610 6e74657200      
00000615 9a03             4825		.byte	154,3
00000617 24               4826		.byte	36
00000618 01               4827		.byte	1
00000619 00000000         4828		.long	.LDW_5b15c40
0000061d 00               4829		.byte	0
0000061e 00               4830		.byte	0
0000061f 0503             4831		.byte	5,3
00000621 00000000         4832		.long	bTxBSCounter..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_tp.
                          4833	
                          4834	.LDW_5cc79d8:
00000625 06               4835		.byte	6
00000626 625478534e00     4836		.strz	"bTxSN"
0000062c a003             4837		.byte	160,3
0000062e 0f               4838		.byte	15
0000062f 01               4839		.byte	1
00000630 00000000         4840		.long	.LDW_4a4b8b0
00000634 00               4841		.byte	0
00000635 00               4842		.byte	0
00000636 0503             4843		.byte	5,3
00000638 00000000         4844		.long	bTxSN..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_tp.
                          4845	
                          4846	.LDW_5cc7a30:
0000063c 06               4847		.byte	6
0000063d 625278534e00     4848		.strz	"bRxSN"
00000643 a603             4849		.byte	166,3
00000645 0f               4850		.byte	15
00000646 01               4851		.byte	1
00000647 00000000         4852		.long	.LDW_4a4b8b0
0000064b 00               4853		.byte	0
0000064c 00               4854		.byte	0
0000064d 0503             4855		.byte	5,3
0000064f 00000000         4856		.long	bRxSN..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_tp.
                          4857	
                          4858	.LDW_5cc7f00:
00000653 06               4859		.byte	6

                                   Fri Apr 10 08:32:21 2020           Page 88
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
00000654 62527854696d6572 4860		.strz	"bRxTimer"
0000065c 00              
0000065d af03             4861		.byte	175,3
0000065f 1c               4862		.byte	28
00000660 01               4863		.byte	1
00000661 00000000         4864		.long	.LDW_5cc7be8
00000665 00               4865		.byte	0
00000666 00               4866		.byte	0
00000667 0503             4867		.byte	5,3
00000669 00000000         4868		.long	bRxTimer..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_tp.
                          4869	
                          4870	.LDW_5cc7c40:
0000066d 06               4871		.byte	6
0000066e 62547854696d6572 4872		.strz	"bTxTimer"
00000676 00              
00000677 b803             4873		.byte	184,3
00000679 1c               4874		.byte	28
0000067a 01               4875		.byte	1
0000067b 00000000         4876		.long	.LDW_5cc7770
0000067f 00               4877		.byte	0
00000680 00               4878		.byte	0
00000681 0503             4879		.byte	5,3
00000683 00000000         4880		.long	bTxTimer..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_tp.
                          4881	
                          4882	.LDW_5cc7b38:
00000687 06               4883		.byte	6
00000688 53546d696e00     4884		.strz	"STmin"
0000068e bf03             4885		.byte	191,3
00000690 10               4886		.byte	16
00000691 01               4887		.byte	1
00000692 00000000         4888		.long	.LDW_4a4b8b0
00000696 00               4889		.byte	0
00000697 00               4890		.byte	0
00000698 0503             4891		.byte	5,3
0000069a 00000000         4892		.long	STmin..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_tp.
                          4893	
                          4894	.LDW_5cc7b90:
0000069e 06               4895		.byte	6
0000069f 6250616464696e67 4896		.strz	"bPaddingLength"
000006a7 4c656e67746800  
000006ae c503             4897		.byte	197,3
000006b0 0f               4898		.byte	15
000006b1 01               4899		.byte	1
000006b2 00000000         4900		.long	.LDW_4a4b8b0
000006b6 00               4901		.byte	0
000006b7 00               4902		.byte	0
000006b8 0503             4903		.byte	5,3
000006ba 00000000         4904		.long	bPaddingLength..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_tp.
                          4905	
                          4906	.LDW_5cc80b8:
000006be 06               4907		.byte	6
000006bf 625374617465466c 4908		.strz	"bStateFlags"
000006c7 61677300        
000006cb d403             4909		.byte	212,3
000006cd 0f               4910		.byte	15
000006ce 01               4911		.byte	1
000006cf 00000000         4912		.long	.LDW_4a4b8b0
000006d3 00               4913		.byte	0
000006d4 00               4914		.byte	0
000006d5 0503             4915		.byte	5,3

                                   Fri Apr 10 08:32:21 2020           Page 89
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
000006d7 00000000         4916		.long	bStateFlags..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_tp.
                          4917	
                          4918	.LDW_5cc7c98:
000006db 06               4919		.byte	6
000006dc 675470436f6e6653 4920		.strz	"gTpConfState"
000006e4 7461746500      
000006e9 dd03             4921		.byte	221,3
000006eb 1b               4922		.byte	27
000006ec 01               4923		.byte	1
000006ed 00000000         4924		.long	.LDW_4a4b8b0
000006f1 00               4925		.byte	0
000006f2 00               4926		.byte	0
000006f3 0503             4927		.byte	5,3
000006f5 00000000         4928		.long	gTpConfState..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_tp.
                          4929	
                          4930	.LDW_5cc7cf0:
000006f9 06               4931		.byte	6
000006fa 675470436f6e6654 4932		.strz	"gTpConfTimer"
00000702 696d657200      
00000707 de03             4933		.byte	222,3
00000709 21               4934		.byte	33
0000070a 01               4935		.byte	1
0000070b 00000000         4936		.long	.LDW_5cc43b0
0000070f 00               4937		.byte	0
00000710 00               4938		.byte	0
00000711 0503             4939		.byte	5,3
00000713 00000000         4940		.long	gTpConfTimer..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_tp.
                          4941	
                          4942	.LDW_5ccab08:
00000717 18               4943		.byte	24
00000718 46626c43616e5472 4944		.strz	"FblCanTransmit"
00000720 616e736d697400  
00000727 e703             4945		.byte	231,3
00000729 08               4946		.byte	8
0000072a 25               4947		.byte	37
0000072b 00000000         4948		.long	.LDW_4a4b8b0
0000072f 01               4949		.byte	1
00000730 00               4950		.byte	0
00000731 01               4951		.byte	1
00000732 01               4952		.byte	1
00000733 00               4953		.byte	0
00000734 01               4954		.byte	1
                          4955	
                          4956		.section	.debug_abbrev
000000e3 18               4957		.byte	24
000000e4 2e               4958		.byte	46
000000e5 01               4959		.byte	1
000000e6 0308             4960		.byte	3,8
000000e8 3b0f             4961		.byte	59,15
000000ea 390f             4962		.byte	57,15
000000ec 3a0f             4963		.byte	58,15
000000ee 4910             4964		.byte	73,16
000000f0 3c0c             4965		.byte	60,12
000000f2 200b             4966		.byte	32,11
000000f4 3f0c             4967		.byte	63,12
000000f6 320b             4968		.byte	50,11
000000f8 4c0b             4969		.byte	76,11
000000fa 270c             4970		.byte	39,12
000000fc 0000             4971		.byte	0,0

                                   Fri Apr 10 08:32:21 2020           Page 90
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
                          4972	
                          4973		.section	.debug_info
00000735 00               4974		.byte	0
                          4975	
                          4976	.LDW_5ccaba0:
00000736 17               4977		.byte	23
00000737 46626c4377547044 4978		.strz	"FblCwTpDataInd"
0000073f 617461496e6400  
00000746 da01             4979		.byte	218,1
00000748 06               4980		.byte	6
00000749 23               4981		.byte	35
0000074a 01               4982		.byte	1
0000074b 00               4983		.byte	0
0000074c 01               4984		.byte	1
0000074d 01               4985		.byte	1
0000074e 00               4986		.byte	0
0000074f 01               4987		.byte	1
                          4988	
                          4989		.section	.debug_abbrev
000000fe 17               4990		.byte	23
000000ff 2e               4991		.byte	46
00000100 01               4992		.byte	1
00000101 0308             4993		.byte	3,8
00000103 3b0f             4994		.byte	59,15
00000105 390f             4995		.byte	57,15
00000107 3a0f             4996		.byte	58,15
00000109 3c0c             4997		.byte	60,12
0000010b 200b             4998		.byte	32,11
0000010d 3f0c             4999		.byte	63,12
0000010f 320b             5000		.byte	50,11
00000111 4c0b             5001		.byte	76,11
00000113 270c             5002		.byte	39,12
00000115 0000             5003		.byte	0,0
                          5004	
                          5005		.section	.debug_info
00000750 00               5006		.byte	0
                          5007	
                          5008	.LDW_5ccafc8:
00000751 17               5009		.byte	23
00000752 46626c4377547043 5010		.strz	"FblCwTpConfirmation"
0000075a 6f6e6669726d6174
00000762 696f6e00        
00000766 dc01             5011		.byte	220,1
00000768 06               5012		.byte	6
00000769 23               5013		.byte	35
0000076a 01               5014		.byte	1
0000076b 00               5015		.byte	0
0000076c 01               5016		.byte	1
0000076d 01               5017		.byte	1
0000076e 00               5018		.byte	0
0000076f 01               5019		.byte	1
                          5020	
00000770 00               5021		.byte	0
                          5022	
                          5023	.LDW_5ccad68:
00000771 17               5024		.byte	23
00000772 46626c4377547052 5025		.strz	"FblCwTpRxStartIndication"
0000077a 785374617274496e
00000782 6469636174696f6e
0000078a 00              
0000078b dd01             5026		.byte	221,1
0000078d 06               5027		.byte	6

                                   Fri Apr 10 08:32:21 2020           Page 91
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
0000078e 23               5028		.byte	35
0000078f 01               5029		.byte	1
00000790 00               5030		.byte	0
00000791 01               5031		.byte	1
00000792 01               5032		.byte	1
00000793 00               5033		.byte	0
00000794 01               5034		.byte	1
                          5035	
00000795 00               5036		.byte	0
                          5037	
                          5038	.LDW_5ccb228:
00000796 17               5039		.byte	23
00000797 46626c4377547045 5040		.strz	"FblCwTpErrorIndication"
0000079f 72726f72496e6469
000007a7 636174696f6e00  
000007ae de01             5041		.byte	222,1
000007b0 06               5042		.byte	6
000007b1 23               5043		.byte	35
000007b2 01               5044		.byte	1
000007b3 00               5045		.byte	0
000007b4 01               5046		.byte	1
000007b5 01               5047		.byte	1
000007b6 00               5048		.byte	0
000007b7 01               5049		.byte	1
                          5050	
000007b8 00               5051		.byte	0
                          5052	
                          5053	.LDW_5d7a310:
000007b9 17               5054		.byte	23
000007ba 4170706c46626c46 5055		.strz	"ApplFblFatalError"
000007c2 6174616c4572726f
000007ca 7200            
000007cc c402             5056		.byte	196,2
000007ce 06               5057		.byte	6
000007cf 31               5058		.byte	49
000007d0 01               5059		.byte	1
000007d1 00               5060		.byte	0
000007d2 01               5061		.byte	1
000007d3 01               5062		.byte	1
000007d4 00               5063		.byte	0
000007d5 01               5064		.byte	1
                          5065	
000007d6 00               5066		.byte	0
                          5067	
                          5068	.LDW_4a4b768:
000007d7 15               5069		.byte	21
000007d8 417373656d626c65 5070		.strz	"AssembleFC"
000007e0 464300          
000007e3 e305             5071		.byte	227,5
000007e5 0d               5072		.byte	13
000007e6 01               5073		.byte	1
000007e7 00000000         5074		.long	AssembleFC..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_tp.
000007eb 00000000         5075		.long	__ghs_eofn_AssembleFC
000007ef 0151             5076		.byte	1,81
000007f1 03               5077		.byte	3
000007f2 00               5078		.byte	0
000007f3 00               5079		.byte	0
000007f4 00               5080		.byte	0
000007f5 00               5081		.byte	0
000007f6 00               5082		.byte	0
000007f7 00               5083		.byte	0

                                   Fri Apr 10 08:32:21 2020           Page 92
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
000007f8 00               5084		.byte	0
000007f9 01               5085		.byte	1
000007fa 00               5086		.byte	0
000007fb 01               5087		.byte	1
                          5088	
                          5089		.section	.debug_abbrev
00000117 15               5090		.byte	21
00000118 2e               5091		.byte	46
00000119 01               5092		.byte	1
0000011a 0308             5093		.byte	3,8
0000011c 3b0f             5094		.byte	59,15
0000011e 390f             5095		.byte	57,15
00000120 3a0f             5096		.byte	58,15
00000122 1101             5097		.byte	17,1
00000124 1201             5098		.byte	18,1
00000126 400a             5099		.byte	64,10
00000128 8341             5100		.byte	131,65
0000012a 0f               5101		.byte	15
0000012b 8741             5102		.byte	135,65
0000012d 0d               5103		.byte	13
0000012e 8541             5104		.byte	133,65
00000130 0f               5105		.byte	15
00000131 8641             5106		.byte	134,65
00000133 0d               5107		.byte	13
00000134 9241             5108		.byte	146,65
00000136 0f               5109		.byte	15
00000137 3c0c             5110		.byte	60,12
00000139 200b             5111		.byte	32,11
0000013b 3f0c             5112		.byte	63,12
0000013d 320b             5113		.byte	50,11
0000013f 4c0b             5114		.byte	76,11
00000141 270c             5115		.byte	39,12
00000143 0000             5116		.byte	0,0
                          5117	
                          5118		.section	.debug_frame
                          5119	.LDW_5cc3720:
00000090 00000014         5120		.long	.LDW_unq_4-.LDW_unq_3
                          5121	.LDW_unq_3:
00000094 00000000         5122		.long	.LDW_5d25e48
00000098 00000000         5123		.long	AssembleFC..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_tp.
0000009c 00000042         5124		.long	__ghs_eofn_AssembleFC-AssembleFC..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_tp.
000000a0 01               5125		.byte	1
000000a1 00000000         5126		.long	.LDW31
000000a5 00               5127		.byte	0
000000a6 00               5128		.byte	0
000000a7 00               5129		.byte	0
                          5130	.LDW_unq_4:
                          5131		.section	.debug_line
000005f9 000502           5132		.byte	0,5,2
000005fc 00000000         5133		.long	AssembleFC..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_tp.
00000600 06               5134		.byte	6
00000601 03               5135		.byte	3
00000602 e305             5136		.byte	227,5
00000604 02               5137		.byte	2
00000605 00               5138		.byte	0
00000606 01               5139		.byte	1

                                   Fri Apr 10 08:32:21 2020           Page 93
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
00000607 2c               5140		.byte	44
00000608 5c               5141		.byte	92
00000609 34               5142		.byte	52
0000060a 02               5143		.byte	2
0000060b 04               5144		.byte	4
0000060c 03               5145		.byte	3
0000060d 05               5146		.byte	5
0000060e 02               5147		.byte	2
0000060f 04               5148		.byte	4
00000610 01               5149		.byte	1
00000611 15               5150		.byte	21
00000612 02               5151		.byte	2
00000613 02               5152		.byte	2
00000614 0c               5153		.byte	12
00000615 03               5154		.byte	3
00000616 7e               5155		.byte	126
00000617 02               5156		.byte	2
00000618 08               5157		.byte	8
00000619 01               5158		.byte	1
0000061a 000502           5159		.byte	0,5,2
0000061d 00000000         5160		.long	.LDWlin1
00000621 0d               5161		.byte	13
00000622 03               5162		.byte	3
00000623 04               5163		.byte	4
00000624 02               5164		.byte	2
00000625 00               5165		.byte	0
00000626 01               5166		.byte	1
00000627 02               5167		.byte	2
00000628 02               5168		.byte	2
00000629 000101           5169		.byte	0,1,1
                          5170		.section	.debug_info
                          5171	.LDW_4a032f8:
000007fc 1f               5172		.byte	31
000007fd 00000000         5173		.long	.LDW01
00000801 00000000         5174		.long	.LDW31
                          5175	
                          5176		.section	.debug_abbrev
00000145 1f               5177		.byte	31
00000146 0b               5178		.byte	11
00000147 01               5179		.byte	1
00000148 1101             5180		.byte	17,1
0000014a 1201             5181		.byte	18,1
0000014c 0000             5182		.byte	0,0
                          5183	
                          5184		.section	.debug_info
                          5185	.LDW_4a030e8:
00000805 1f               5186		.byte	31
00000806 00000000         5187		.long	.LDW11
0000080a 00000000         5188		.long	.LDW21
                          5189	
                          5190	.LDW_4a4b858:
0000080e 06               5191		.byte	6
0000080f 6900             5192		.strz	"i"
00000811 f005             5193		.byte	240,5
00000813 0e               5194		.byte	14
00000814 01               5195		.byte	1

                                   Fri Apr 10 08:32:21 2020           Page 94
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
00000815 00000000         5196		.long	.LDW_4a4b800
00000819 00               5197		.byte	0
0000081a 00               5198		.byte	0
0000081b 0150             5199		.byte	1,80
                          5200	
0000081d 00               5201		.byte	0
                          5202	
0000081e 00               5203		.byte	0
                          5204	
0000081f 00               5205		.byte	0
                          5206	
                          5207	.LDW_4a4b908:
00000820 16               5208		.byte	22
00000821 43414e5f53617665 5209		.strz	"CAN_SaveTransmit"
00000829 5472616e736d6974
00000831 00              
00000832 8106             5210		.byte	129,6
00000834 0f               5211		.byte	15
00000835 01               5212		.byte	1
00000836 00000000         5213		.long	.LDW_4a4b8b0
0000083a 00000000         5214		.long	CAN_SaveTransmit..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_tp.
0000083e 00000000         5215		.long	__ghs_eofn_CAN_SaveTransmit
00000842 0151             5216		.byte	1,81
00000844 00               5217		.byte	0
00000845 08               5218		.byte	8
00000846 00               5219		.byte	0
00000847 08               5220		.byte	8
00000848 00               5221		.byte	0
00000849 00               5222		.byte	0
0000084a 00               5223		.byte	0
0000084b 00               5224		.byte	0
0000084c 01               5225		.byte	1
0000084d 00               5226		.byte	0
0000084e 01               5227		.byte	1
                          5228	
                          5229		.section	.debug_abbrev
0000014e 16               5230		.byte	22
0000014f 2e               5231		.byte	46
00000150 01               5232		.byte	1
00000151 0308             5233		.byte	3,8
00000153 3b0f             5234		.byte	59,15
00000155 390f             5235		.byte	57,15
00000157 3a0f             5236		.byte	58,15
00000159 4910             5237		.byte	73,16
0000015b 1101             5238		.byte	17,1
0000015d 1201             5239		.byte	18,1
0000015f 400a             5240		.byte	64,10
00000161 8341             5241		.byte	131,65
00000163 0f               5242		.byte	15
00000164 8741             5243		.byte	135,65
00000166 0d               5244		.byte	13
00000167 8541             5245		.byte	133,65
00000169 0f               5246		.byte	15
0000016a 8641             5247		.byte	134,65
0000016c 0d               5248		.byte	13
0000016d 9241             5249		.byte	146,65
0000016f 0f               5250		.byte	15
00000170 3c0c             5251		.byte	60,12

                                   Fri Apr 10 08:32:21 2020           Page 95
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
00000172 200b             5252		.byte	32,11
00000174 3f0c             5253		.byte	63,12
00000176 320b             5254		.byte	50,11
00000178 4c0b             5255		.byte	76,11
0000017a 270c             5256		.byte	39,12
0000017c 0000             5257		.byte	0,0
                          5258	
                          5259		.section	.debug_frame
                          5260	.LDW_5cc32e0:
000000a8 00000014         5261		.long	.LDW_unq_6-.LDW_unq_5
                          5262	.LDW_unq_5:
000000ac 00000000         5263		.long	.LDW_5d25e48
000000b0 00000000         5264		.long	CAN_SaveTransmit..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_tp.
000000b4 00000038         5265		.long	__ghs_eofn_CAN_SaveTransmit-CAN_SaveTransmit..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_tp.
000000b8 01               5266		.byte	1
000000b9 00000000         5267		.long	.LDW51
000000bd 00               5268		.byte	0
000000be 00               5269		.byte	0
000000bf 00               5270		.byte	0
                          5271	.LDW_unq_6:
                          5272		.section	.debug_line
0000062c 000502           5273		.byte	0,5,2
0000062f 00000000         5274		.long	CAN_SaveTransmit..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_tp.
00000633 06               5275		.byte	6
00000634 03               5276		.byte	3
00000635 8106             5277		.byte	129,6
00000637 02               5278		.byte	2
00000638 00               5279		.byte	0
00000639 01               5280		.byte	1
0000063a 02               5281		.byte	2
0000063b 08               5282		.byte	8
0000063c 03               5283		.byte	3
0000063d 07               5284		.byte	7
0000063e 02               5285		.byte	2
0000063f 08               5286		.byte	8
00000640 01               5287		.byte	1
00000641 000502           5288		.byte	0,5,2
00000644 00000000         5289		.long	.LDWlin2
00000648 0b               5290		.byte	11
00000649 0b               5291		.byte	11
0000064a 03               5292		.byte	3
0000064b 0a               5293		.byte	10
0000064c 02               5294		.byte	2
0000064d 08               5295		.byte	8
0000064e 01               5296		.byte	1
0000064f 1b               5297		.byte	27
00000650 0c               5298		.byte	12
00000651 03               5299		.byte	3
00000652 06               5300		.byte	6
00000653 02               5301		.byte	2
00000654 00               5302		.byte	0
00000655 01               5303		.byte	1
00000656 02               5304		.byte	2
00000657 00               5305		.byte	0
00000658 0c               5306		.byte	12
00000659 02               5307		.byte	2

                                   Fri Apr 10 08:32:21 2020           Page 96
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
0000065a 08               5308		.byte	8
0000065b 000101           5309		.byte	0,1,1
                          5310		.section	.debug_info
                          5311	.LDW_4a03388:
0000084f 1f               5312		.byte	31
00000850 00000000         5313		.long	.LDW41
00000854 00000000         5314		.long	.LDW51
                          5315	
                          5316	.LDW_4a4b9a0:
00000858 06               5317		.byte	6
00000859 7276616c00       5318		.strz	"rval"
0000085e 8306             5319		.byte	131,6
00000860 0b               5320		.byte	11
00000861 01               5321		.byte	1
00000862 00000000         5322		.long	.LDW_4a4b8b0
00000866 00               5323		.byte	0
00000867 00               5324		.byte	0
00000868 0153             5325		.byte	1,83
                          5326	
0000086a 00               5327		.byte	0
                          5328	
0000086b 00               5329		.byte	0
                          5330	
                          5331	.LDW_4a4d6b8:
0000086c 15               5332		.byte	21
0000086d 5478436f6e666972 5333		.strz	"TxConfirm"
00000875 6d00            
00000877 a906             5334		.byte	169,6
00000879 0d               5335		.byte	13
0000087a 01               5336		.byte	1
0000087b 00000000         5337		.long	TxConfirm..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_tp.
0000087f 00000000         5338		.long	__ghs_eofn_TxConfirm
00000883 0151             5339		.byte	1,81
00000885 03               5340		.byte	3
00000886 00               5341		.byte	0
00000887 00               5342		.byte	0
00000888 00               5343		.byte	0
00000889 00               5344		.byte	0
0000088a 00               5345		.byte	0
0000088b 00               5346		.byte	0
0000088c 00               5347		.byte	0
0000088d 01               5348		.byte	1
0000088e 00               5349		.byte	0
0000088f 01               5350		.byte	1
                          5351	
                          5352		.section	.debug_frame
                          5353	.LDW_5cc35e0:
000000c0 00000014         5354		.long	.LDW_unq_8-.LDW_unq_7
                          5355	.LDW_unq_7:
000000c4 00000000         5356		.long	.LDW_5d25e48
000000c8 00000000         5357		.long	TxConfirm..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_tp.
000000cc 00000004         5358		.long	__ghs_eofn_TxConfirm-TxConfirm..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_tp.
000000d0 01               5359		.byte	1
000000d1 00000000         5360		.long	.LDW71
000000d5 00               5361		.byte	0
000000d6 00               5362		.byte	0
000000d7 00               5363		.byte	0

                                   Fri Apr 10 08:32:21 2020           Page 97
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
                          5364	.LDW_unq_8:
                          5365		.section	.debug_line
0000065e 000502           5366		.byte	0,5,2
00000661 00000000         5367		.long	TxConfirm..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_tp.
00000665 06               5368		.byte	6
00000666 03               5369		.byte	3
00000667 aa06             5370		.byte	170,6
00000669 02               5371		.byte	2
0000066a 00               5372		.byte	0
0000066b 01               5373		.byte	1
0000066c 02               5374		.byte	2
0000066d 04               5375		.byte	4
0000066e 000101           5376		.byte	0,1,1
                          5377		.section	.debug_info
                          5378	.LDW_4a4d750:
00000890 11               5379		.byte	17
00000891 737461746500     5380		.strz	"state"
00000897 a906             5381		.byte	169,6
00000899 1e               5382		.byte	30
0000089a 01               5383		.byte	1
0000089b 00000000         5384		.long	.LDW_4a4b8b0
0000089f 00               5385		.byte	0
000008a0 0153             5386		.byte	1,83
                          5387	
                          5388		.section	.debug_abbrev
0000017e 11               5389		.byte	17
0000017f 05               5390		.byte	5
00000180 00               5391		.byte	0
00000181 0308             5392		.byte	3,8
00000183 3b0f             5393		.byte	59,15
00000185 390f             5394		.byte	57,15
00000187 3a0f             5395		.byte	58,15
00000189 4910             5396		.byte	73,16
0000018b 4b0c             5397		.byte	75,12
0000018d 020a             5398		.byte	2,10
0000018f 0000             5399		.byte	0,0
                          5400	
                          5401		.section	.debug_info
                          5402	.LDW_4a031a8:
000008a2 1f               5403		.byte	31
000008a3 00000000         5404		.long	.LDW61
000008a7 00000000         5405		.long	.LDW71
                          5406	
000008ab 00               5407		.byte	0
                          5408	
000008ac 00               5409		.byte	0
                          5410	
                          5411	.LDW_4a4d7a8:
000008ad 15               5412		.byte	21
000008ae 46626c5470496e69 5413		.strz	"FblTpInit"
000008b6 7400            
000008b8 b506             5414		.byte	181,6
000008ba 0d               5415		.byte	13
000008bb 01               5416		.byte	1
000008bc 00000000         5417		.long	FblTpInit..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_tp.
000008c0 00000000         5418		.long	__ghs_eofn_FblTpInit
000008c4 0151             5419		.byte	1,81

                                   Fri Apr 10 08:32:21 2020           Page 98
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
000008c6 03               5420		.byte	3
000008c7 00               5421		.byte	0
000008c8 00               5422		.byte	0
000008c9 00               5423		.byte	0
000008ca 00               5424		.byte	0
000008cb 00               5425		.byte	0
000008cc 00               5426		.byte	0
000008cd 00               5427		.byte	0
000008ce 01               5428		.byte	1
000008cf 00               5429		.byte	0
000008d0 01               5430		.byte	1
                          5431	
                          5432		.section	.debug_frame
                          5433	.LDW_5cc3360:
000000d8 00000014         5434		.long	.LDW_unq_a-.LDW_unq_9
                          5435	.LDW_unq_9:
000000dc 00000000         5436		.long	.LDW_5d25e48
000000e0 00000000         5437		.long	FblTpInit..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_tp.
000000e4 00000072         5438		.long	__ghs_eofn_FblTpInit-FblTpInit..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_tp.
000000e8 01               5439		.byte	1
000000e9 00000000         5440		.long	.LDW91
000000ed 00               5441		.byte	0
000000ee 00               5442		.byte	0
000000ef 00               5443		.byte	0
                          5444	.LDW_unq_a:
                          5445		.section	.debug_line
00000671 000502           5446		.byte	0,5,2
00000674 00000000         5447		.long	FblTpInit..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_tp.
00000678 06               5448		.byte	6
00000679 03               5449		.byte	3
0000067a b606             5450		.byte	182,6
0000067c 02               5451		.byte	2
0000067d 00               5452		.byte	0
0000067e 01               5453		.byte	1
0000067f 33               5454		.byte	51
00000680 34               5455		.byte	52
00000681 33               5456		.byte	51
00000682 2b               5457		.byte	43
00000683 2b               5458		.byte	43
00000684 2b               5459		.byte	43
00000685 2c               5460		.byte	44
00000686 2c               5461		.byte	44
00000687 34               5462		.byte	52
00000688 2b               5463		.byte	43
00000689 2d               5464		.byte	45
0000068a 03               5465		.byte	3
0000068b 05               5466		.byte	5
0000068c 02               5467		.byte	2
0000068d 10               5468		.byte	16
0000068e 01               5469		.byte	1
0000068f 02               5470		.byte	2
00000690 02               5471		.byte	2
00000691 000101           5472		.byte	0,1,1
                          5473		.section	.debug_info
                          5474	.LDW_4a03628:
000008d1 1f               5475		.byte	31

                                   Fri Apr 10 08:32:21 2020           Page 99
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
000008d2 00000000         5476		.long	.LDW81
000008d6 00000000         5477		.long	.LDW91
                          5478	
000008da 00               5479		.byte	0
                          5480	
000008db 00               5481		.byte	0
                          5482	
                          5483	.LDW_4a4d840:
000008dc 15               5484		.byte	21
000008dd 46626c5470526573 5485		.strz	"FblTpResetRxBlock"
000008e5 65745278426c6f63
000008ed 6b00            
000008ef d806             5486		.byte	216,6
000008f1 06               5487		.byte	6
000008f2 01               5488		.byte	1
000008f3 00000000         5489		.long	FblTpResetRxBlock
000008f7 00000000         5490		.long	__ghs_eofn_FblTpResetRxBlock
000008fb 0151             5491		.byte	1,81
000008fd 03               5492		.byte	3
000008fe 00               5493		.byte	0
000008ff 00               5494		.byte	0
00000900 00               5495		.byte	0
00000901 00               5496		.byte	0
00000902 00               5497		.byte	0
00000903 00               5498		.byte	0
00000904 01               5499		.byte	1
00000905 01               5500		.byte	1
00000906 00               5501		.byte	0
00000907 01               5502		.byte	1
                          5503	
                          5504		.section	.debug_frame
                          5505	.LDW_5cc3620:
000000f0 00000014         5506		.long	.LDW_unq_c-.LDW_unq_b
                          5507	.LDW_unq_b:
000000f4 00000000         5508		.long	.LDW_5d25e48
000000f8 00000000         5509		.long	FblTpResetRxBlock
000000fc 0000000c         5510		.long	__ghs_eofn_FblTpResetRxBlock-FblTpResetRxBlock
00000100 01               5511		.byte	1
00000101 00000000         5512		.long	.LDW12
00000105 00               5513		.byte	0
00000106 00               5514		.byte	0
00000107 00               5515		.byte	0
                          5516	.LDW_unq_c:
                          5517		.section	.debug_line
00000694 000502           5518		.byte	0,5,2
00000697 00000000         5519		.long	FblTpResetRxBlock
0000069b 06               5520		.byte	6
0000069c 03               5521		.byte	3
0000069d d906             5522		.byte	217,6
0000069f 02               5523		.byte	2
000006a0 00               5524		.byte	0
000006a1 01               5525		.byte	1
000006a2 33               5526		.byte	51
000006a3 02               5527		.byte	2
000006a4 02               5528		.byte	2
000006a5 000101           5529		.byte	0,1,1
                          5530		.section	.debug_info
                          5531	.LDW_4a03358:

                                   Fri Apr 10 08:32:21 2020           Page 100
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
00000908 1f               5532		.byte	31
00000909 00000000         5533		.long	.LDW02
0000090d 00000000         5534		.long	.LDW12
                          5535	
00000911 00               5536		.byte	0
                          5537	
00000912 00               5538		.byte	0
                          5539	
                          5540	.LDW_4a4d8d8:
00000913 15               5541		.byte	21
00000914 46626c5470536574 5542		.strz	"FblTpSetRxBlock"
0000091c 5278426c6f636b00
00000924 e206             5543		.byte	226,6
00000926 06               5544		.byte	6
00000927 01               5545		.byte	1
00000928 00000000         5546		.long	FblTpSetRxBlock
0000092c 00000000         5547		.long	__ghs_eofn_FblTpSetRxBlock
00000930 0151             5548		.byte	1,81
00000932 03               5549		.byte	3
00000933 00               5550		.byte	0
00000934 00               5551		.byte	0
00000935 00               5552		.byte	0
00000936 00               5553		.byte	0
00000937 00               5554		.byte	0
00000938 00               5555		.byte	0
00000939 01               5556		.byte	1
0000093a 01               5557		.byte	1
0000093b 00               5558		.byte	0
0000093c 01               5559		.byte	1
                          5560	
                          5561		.section	.debug_frame
                          5562	.LDW_5cc33a0:
00000108 00000014         5563		.long	.LDW_unq_e-.LDW_unq_d
                          5564	.LDW_unq_d:
0000010c 00000000         5565		.long	.LDW_5d25e48
00000110 00000000         5566		.long	FblTpSetRxBlock
00000114 0000000c         5567		.long	__ghs_eofn_FblTpSetRxBlock-FblTpSetRxBlock
00000118 01               5568		.byte	1
00000119 00000000         5569		.long	.LDW32
0000011d 00               5570		.byte	0
0000011e 00               5571		.byte	0
0000011f 00               5572		.byte	0
                          5573	.LDW_unq_e:
                          5574		.section	.debug_line
000006a8 000502           5575		.byte	0,5,2
000006ab 00000000         5576		.long	FblTpSetRxBlock
000006af 06               5577		.byte	6
000006b0 03               5578		.byte	3
000006b1 e306             5579		.byte	227,6
000006b3 02               5580		.byte	2
000006b4 00               5581		.byte	0
000006b5 01               5582		.byte	1
000006b6 33               5583		.byte	51
000006b7 02               5584		.byte	2
000006b8 02               5585		.byte	2
000006b9 000101           5586		.byte	0,1,1
                          5587		.section	.debug_info

                                   Fri Apr 10 08:32:21 2020           Page 101
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
                          5588	.LDW_4a03688:
0000093d 1f               5589		.byte	31
0000093e 00000000         5590		.long	.LDW22
00000942 00000000         5591		.long	.LDW32
                          5592	
00000946 00               5593		.byte	0
                          5594	
00000947 00               5595		.byte	0
                          5596	
                          5597	.LDW_4a4d970:
00000948 15               5598		.byte	21
00000949 46626c5470496e69 5599		.strz	"FblTpInitPowerOn"
00000951 74506f7765724f6e
00000959 00              
0000095a ec06             5600		.byte	236,6
0000095c 06               5601		.byte	6
0000095d 01               5602		.byte	1
0000095e 00000000         5603		.long	FblTpInitPowerOn
00000962 00000000         5604		.long	__ghs_eofn_FblTpInitPowerOn
00000966 0151             5605		.byte	1,81
00000968 03               5606		.byte	3
00000969 00               5607		.byte	0
0000096a 00               5608		.byte	0
0000096b 00               5609		.byte	0
0000096c 00               5610		.byte	0
0000096d 00               5611		.byte	0
0000096e 00               5612		.byte	0
0000096f 01               5613		.byte	1
00000970 01               5614		.byte	1
00000971 00               5615		.byte	0
00000972 01               5616		.byte	1
                          5617	
                          5618		.section	.debug_frame
                          5619	.LDW_5cc3960:
00000120 00000014         5620		.long	.LDW_unq_10-.LDW_unq_f
                          5621	.LDW_unq_f:
00000124 00000000         5622		.long	.LDW_5d25e48
00000128 00000000         5623		.long	FblTpInitPowerOn
0000012c 0000001e         5624		.long	__ghs_eofn_FblTpInitPowerOn-FblTpInitPowerOn
00000130 01               5625		.byte	1
00000131 00000000         5626		.long	.LDW52
00000135 00               5627		.byte	0
00000136 00               5628		.byte	0
00000137 00               5629		.byte	0
                          5630	.LDW_unq_10:
                          5631		.section	.debug_line
000006bc 000502           5632		.byte	0,5,2
000006bf 00000000         5633		.long	FblTpInitPowerOn
000006c3 06               5634		.byte	6
000006c4 03               5635		.byte	3
000006c5 ee06             5636		.byte	238,6
000006c7 02               5637		.byte	2
000006c8 00               5638		.byte	0
000006c9 01               5639		.byte	1
000006ca 55               5640		.byte	85
000006cb 34               5641		.byte	52
000006cc 000502           5642		.byte	0,5,2
000006cf 00000000         5643		.long	__ghs_eofn_FblTpInitPowerOn

                                   Fri Apr 10 08:32:21 2020           Page 102
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
000006d3 0c               5644		.byte	12
000006d4 000101           5645		.byte	0,1,1
                          5646		.section	.debug_info
                          5647	.LDW_4a034d8:
00000973 1f               5648		.byte	31
00000974 00000000         5649		.long	.LDW42
00000978 00000000         5650		.long	.LDW52
                          5651	
0000097c 00               5652		.byte	0
                          5653	
0000097d 00               5654		.byte	0
                          5655	
                          5656	.LDW_5b15a08:
0000097e 16               5657		.byte	22
0000097f 46626c5470547261 5658		.strz	"FblTpTransmit"
00000987 6e736d697400    
0000098d ff06             5659		.byte	255,6
0000098f 08               5660		.byte	8
00000990 01               5661		.byte	1
00000991 00000000         5662		.long	.LDW_4a4b8b0
00000995 00000000         5663		.long	FblTpTransmit
00000999 00000000         5664		.long	__ghs_eofn_FblTpTransmit
0000099d 0151             5665		.byte	1,81
0000099f 808080800f       5666		.byte	128,128,128,128,15
000009a4 08               5667		.byte	8
000009a5 00               5668		.byte	0
000009a6 18               5669		.byte	24
000009a7 00               5670		.byte	0
000009a8 00               5671		.byte	0
000009a9 00               5672		.byte	0
000009aa 01               5673		.byte	1
000009ab 01               5674		.byte	1
000009ac 00               5675		.byte	0
000009ad 01               5676		.byte	1
                          5677	
                          5678		.section	.debug_frame
                          5679	.LDW_5cc3b60:
00000138 00000014         5680		.long	.LDW_unq_12-.LDW_unq_11
                          5681	.LDW_unq_11:
0000013c 00000000         5682		.long	.LDW_5d25e48
00000140 00000000         5683		.long	FblTpTransmit
00000144 00000152         5684		.long	__ghs_eofn_FblTpTransmit-FblTpTransmit
00000148 01               5685		.byte	1
00000149 00000000         5686		.long	.LDW33
0000014d 00               5687		.byte	0
0000014e 00               5688		.byte	0
0000014f 00               5689		.byte	0
                          5690	.LDW_unq_12:
                          5691		.section	.debug_line
000006d7 000502           5692		.byte	0,5,2
000006da 00000000         5693		.long	FblTpTransmit
000006de 06               5694		.byte	6
000006df 03               5695		.byte	3
000006e0 ff06             5696		.byte	255,6
000006e2 02               5697		.byte	2
000006e3 00               5698		.byte	0
000006e4 01               5699		.byte	1

                                   Fri Apr 10 08:32:21 2020           Page 103
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
000006e5 3c               5700		.byte	60
000006e6 000502           5701		.byte	0,5,2
000006e9 00000000         5702		.long	.LDWlin4
000006ed 03               5703		.byte	3
000006ee 04               5704		.byte	4
000006ef 02               5705		.byte	2
000006f0 00               5706		.byte	0
000006f1 01               5707		.byte	1
000006f2 0b               5708		.byte	11
000006f3 23               5709		.byte	35
000006f4 000502           5710		.byte	0,5,2
000006f7 00000000         5711		.long	.LDWlin5
000006fb 0b               5712		.byte	11
000006fc 02               5713		.byte	2
000006fd 00               5714		.byte	0
000006fe 03               5715		.byte	3
000006ff 04               5716		.byte	4
00000700 02               5717		.byte	2
00000701 00               5718		.byte	0
00000702 01               5719		.byte	1
00000703 000502           5720		.byte	0,5,2
00000706 00000000         5721		.long	.LDWlin6
0000070a 0b               5722		.byte	11
0000070b 0b               5723		.byte	11
0000070c 14               5724		.byte	20
0000070d 02               5725		.byte	2
0000070e 06               5726		.byte	6
0000070f 1d               5727		.byte	29
00000710 14               5728		.byte	20
00000711 02               5729		.byte	2
00000712 04               5730		.byte	4
00000713 000502           5731		.byte	0,5,2
00000716 00000000         5732		.long	.LDWlin7
0000071a 0b               5733		.byte	11
0000071b 2b               5734		.byte	43
0000071c 03               5735		.byte	3
0000071d 7e               5736		.byte	126
0000071e 02               5737		.byte	2
0000071f 0a               5738		.byte	10
00000720 01               5739		.byte	1
00000721 000502           5740		.byte	0,5,2
00000724 00000000         5741		.long	.LDWlin8
00000728 0d               5742		.byte	13
00000729 03               5743		.byte	3
0000072a 0b               5744		.byte	11
0000072b 02               5745		.byte	2
0000072c 00               5746		.byte	0
0000072d 01               5747		.byte	1
0000072e 0c               5748		.byte	12
0000072f 2b               5749		.byte	43
00000730 03               5750		.byte	3
00000731 7d               5751		.byte	125
00000732 02               5752		.byte	2
00000733 04               5753		.byte	4
00000734 01               5754		.byte	1
00000735 000502           5755		.byte	0,5,2

                                   Fri Apr 10 08:32:21 2020           Page 104
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
00000738 00000000         5756		.long	.LDWlin9
0000073c 03               5757		.byte	3
0000073d 04               5758		.byte	4
0000073e 02               5759		.byte	2
0000073f 00               5760		.byte	0
00000740 01               5761		.byte	1
00000741 03               5762		.byte	3
00000742 05               5763		.byte	5
00000743 02               5764		.byte	2
00000744 00               5765		.byte	0
00000745 01               5766		.byte	1
00000746 2b               5767		.byte	43
00000747 000502           5768		.byte	0,5,2
0000074a 00000000         5769		.long	.LDWlin10
0000074e 0b               5770		.byte	11
0000074f 06               5771		.byte	6
00000750 02               5772		.byte	2
00000751 02               5773		.byte	2
00000752 06               5774		.byte	6
00000753 000502           5775		.byte	0,5,2
00000756 00000000         5776		.long	.LDWlin11
0000075a 03               5777		.byte	3
0000075b 08               5778		.byte	8
0000075c 02               5779		.byte	2
0000075d 00               5780		.byte	0
0000075e 01               5781		.byte	1
0000075f 0c               5782		.byte	12
00000760 0c               5783		.byte	12
00000761 2b               5784		.byte	43
00000762 5c               5785		.byte	92
00000763 03               5786		.byte	3
00000764 05               5787		.byte	5
00000765 02               5788		.byte	2
00000766 0a               5789		.byte	10
00000767 01               5790		.byte	1
00000768 5c               5791		.byte	92
00000769 15               5792		.byte	21
0000076a 02               5793		.byte	2
0000076b 0a               5794		.byte	10
0000076c 0b               5795		.byte	11
0000076d 2b               5796		.byte	43
0000076e 03               5797		.byte	3
0000076f 7e               5798		.byte	126
00000770 02               5799		.byte	2
00000771 0a               5800		.byte	10
00000772 01               5801		.byte	1
00000773 000502           5802		.byte	0,5,2
00000776 00000000         5803		.long	.LDWlin12
0000077a 0d               5804		.byte	13
0000077b 03               5805		.byte	3
0000077c 06               5806		.byte	6
0000077d 02               5807		.byte	2
0000077e 00               5808		.byte	0
0000077f 01               5809		.byte	1
00000780 2c               5810		.byte	44
00000781 63               5811		.byte	99

                                   Fri Apr 10 08:32:21 2020           Page 105
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
00000782 1c               5812		.byte	28
00000783 03               5813		.byte	3
00000784 07               5814		.byte	7
00000785 02               5815		.byte	2
00000786 06               5816		.byte	6
00000787 01               5817		.byte	1
00000788 000502           5818		.byte	0,5,2
0000078b 00000000         5819		.long	.LDWlin13
0000078f 0b               5820		.byte	11
00000790 02               5821		.byte	2
00000791 00               5822		.byte	0
00000792 03               5823		.byte	3
00000793 0a               5824		.byte	10
00000794 02               5825		.byte	2
00000795 00               5826		.byte	0
00000796 01               5827		.byte	1
00000797 06               5828		.byte	6
00000798 02               5829		.byte	2
00000799 02               5830		.byte	2
0000079a 02               5831		.byte	2
0000079b 0c               5832		.byte	12
0000079c 000101           5833		.byte	0,1,1
                          5834		.section	.debug_info
                          5835	.LDW_5b15aa0:
000009ae 11               5836		.byte	17
000009af 636f756e7400     5837		.strz	"count"
000009b5 ff06             5838		.byte	255,6
000009b7 22               5839		.byte	34
000009b8 01               5840		.byte	1
000009b9 00000000         5841		.long	.LDW_4a4da60
000009bd 00               5842		.byte	0
000009be 0153             5843		.byte	1,83
                          5844	
                          5845	.LDW_4a03598:
000009c0 1f               5846		.byte	31
000009c1 00000000         5847		.long	.LDW62
000009c5 00000000         5848		.long	.LDW33
                          5849	
                          5850	.LDW_4a033b8:
000009c9 1f               5851		.byte	31
000009ca 00000000         5852		.long	.LDW72
000009ce 00000000         5853		.long	.LDW23
                          5854	
                          5855	.LDW_4a03238:
000009d2 1f               5856		.byte	31
000009d3 00000000         5857		.long	.LDW82
000009d7 00000000         5858		.long	.LDW13
                          5859	
                          5860	.LDW_4a034a8:
000009db 1f               5861		.byte	31
000009dc 00000000         5862		.long	.LDW92
000009e0 00000000         5863		.long	.LDW03
                          5864	
                          5865	.LDW_5b15af8:
000009e4 06               5866		.byte	6
000009e5 6900             5867		.strz	"i"

                                   Fri Apr 10 08:32:21 2020           Page 106
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
000009e7 9507             5868		.byte	149,7
000009e9 11               5869		.byte	17
000009ea 01               5870		.byte	1
000009eb 00000000         5871		.long	.LDW_4a4b800
000009ef 00               5872		.byte	0
000009f0 00               5873		.byte	0
000009f1 0150             5874		.byte	1,80
                          5875	
000009f3 00               5876		.byte	0
                          5877	
000009f4 00               5878		.byte	0
                          5879	
000009f5 00               5880		.byte	0
                          5881	
000009f6 00               5882		.byte	0
                          5883	
000009f7 00               5884		.byte	0
                          5885	
                          5886	.LDW_5b15b50:
000009f8 16               5887		.byte	22
000009f9 46626c5470547261 5888		.strz	"FblTpTransmitSF"
00000a01 6e736d6974534600
00000a09 f307             5889		.byte	243,7
00000a0b 08               5890		.byte	8
00000a0c 01               5891		.byte	1
00000a0d 00000000         5892		.long	.LDW_4a4b8b0
00000a11 00000000         5893		.long	FblTpTransmitSF
00000a15 00000000         5894		.long	__ghs_eofn_FblTpTransmitSF
00000a19 0151             5895		.byte	1,81
00000a1b 808080800c       5896		.byte	128,128,128,128,12
00000a20 08               5897		.byte	8
00000a21 00               5898		.byte	0
00000a22 10               5899		.byte	16
00000a23 00               5900		.byte	0
00000a24 00               5901		.byte	0
00000a25 00               5902		.byte	0
00000a26 01               5903		.byte	1
00000a27 01               5904		.byte	1
00000a28 00               5905		.byte	0
00000a29 01               5906		.byte	1
                          5907	
                          5908		.section	.debug_frame
                          5909	.LDW_5cc3ba0:
00000150 00000014         5910		.long	.LDW_unq_14-.LDW_unq_13
                          5911	.LDW_unq_13:
00000154 00000000         5912		.long	.LDW_5d25e48
00000158 00000000         5913		.long	FblTpTransmitSF
0000015c 00000080         5914		.long	__ghs_eofn_FblTpTransmitSF-FblTpTransmitSF
00000160 01               5915		.byte	1
00000161 00000000         5916		.long	.LDW53
00000165 00               5917		.byte	0
00000166 00               5918		.byte	0
00000167 00               5919		.byte	0
                          5920	.LDW_unq_14:
                          5921		.section	.debug_line
0000079f 000502           5922		.byte	0,5,2
000007a2 00000000         5923		.long	FblTpTransmitSF

                                   Fri Apr 10 08:32:21 2020           Page 107
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
000007a6 06               5924		.byte	6
000007a7 03               5925		.byte	3
000007a8 f307             5926		.byte	243,7
000007aa 02               5927		.byte	2
000007ab 00               5928		.byte	0
000007ac 01               5929		.byte	1
000007ad 44               5930		.byte	68
000007ae 000502           5931		.byte	0,5,2
000007b1 00000000         5932		.long	.LDWlin14
000007b5 03               5933		.byte	3
000007b6 07               5934		.byte	7
000007b7 02               5935		.byte	2
000007b8 00               5936		.byte	0
000007b9 01               5937		.byte	1
000007ba 02               5938		.byte	2
000007bb 00               5939		.byte	0
000007bc 0c               5940		.byte	12
000007bd 06               5941		.byte	6
000007be 000502           5942		.byte	0,5,2
000007c1 00000000         5943		.long	.LDWlin15
000007c5 03               5944		.byte	3
000007c6 7c               5945		.byte	124
000007c7 02               5946		.byte	2
000007c8 00               5947		.byte	0
000007c9 01               5948		.byte	1
000007ca 06               5949		.byte	6
000007cb 03               5950		.byte	3
000007cc 05               5951		.byte	5
000007cd 02               5952		.byte	2
000007ce 00               5953		.byte	0
000007cf 01               5954		.byte	1
000007d0 0b               5955		.byte	11
000007d1 06               5956		.byte	6
000007d2 03               5957		.byte	3
000007d3 7b               5958		.byte	123
000007d4 02               5959		.byte	2
000007d5 06               5960		.byte	6
000007d6 01               5961		.byte	1
000007d7 06               5962		.byte	6
000007d8 03               5963		.byte	3
000007d9 06               5964		.byte	6
000007da 02               5965		.byte	2
000007db 00               5966		.byte	0
000007dc 01               5967		.byte	1
000007dd 000502           5968		.byte	0,5,2
000007e0 00000000         5969		.long	.LDWlin16
000007e4 0b               5970		.byte	11
000007e5 02               5971		.byte	2
000007e6 00               5972		.byte	0
000007e7 0c               5973		.byte	12
000007e8 7c               5974		.byte	124
000007e9 03               5975		.byte	3
000007ea 0a               5976		.byte	10
000007eb 02               5977		.byte	2
000007ec 0c               5978		.byte	12
000007ed 01               5979		.byte	1

                                   Fri Apr 10 08:32:21 2020           Page 108
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
000007ee 000502           5980		.byte	0,5,2
000007f1 00000000         5981		.long	.LDWlin17
000007f5 0b               5982		.byte	11
000007f6 0c               5983		.byte	12
000007f7 24               5984		.byte	36
000007f8 000502           5985		.byte	0,5,2
000007fb 00000000         5986		.long	.LDWlin18
000007ff 0c               5987		.byte	12
00000800 13               5988		.byte	19
00000801 02               5989		.byte	2
00000802 00               5990		.byte	0
00000803 03               5991		.byte	3
00000804 06               5992		.byte	6
00000805 02               5993		.byte	2
00000806 00               5994		.byte	0
00000807 01               5995		.byte	1
00000808 02               5996		.byte	2
00000809 0c               5997		.byte	12
0000080a 000101           5998		.byte	0,1,1
                          5999		.section	.debug_info
                          6000	.LDW_5b15be8:
00000a2a 11               6001		.byte	17
00000a2b 636f756e7400     6002		.strz	"count"
00000a31 f307             6003		.byte	243,7
00000a33 1f               6004		.byte	31
00000a34 01               6005		.byte	1
00000a35 00000000         6006		.long	.LDW_4a4b8b0
00000a39 00               6007		.byte	0
00000a3a 0156             6008		.byte	1,86
                          6009	
                          6010	.LDW_4a03118:
00000a3c 1f               6011		.byte	31
00000a3d 00000000         6012		.long	.LDW43
00000a41 00000000         6013		.long	.LDW53
                          6014	
00000a45 00               6015		.byte	0
                          6016	
00000a46 00               6017		.byte	0
                          6018	
                          6019	.LDW_5bae558:
00000a47 16               6020		.byte	22
00000a48 46626c5470507265 6021		.strz	"FblTpPrecopy"
00000a50 636f707900      
00000a55 aa08             6022		.byte	170,8
00000a57 08               6023		.byte	8
00000a58 01               6024		.byte	1
00000a59 00000000         6025		.long	.LDW_4a4b8b0
00000a5d 00000000         6026		.long	FblTpPrecopy
00000a61 00000000         6027		.long	__ghs_eofn_FblTpPrecopy
00000a65 0151             6028		.byte	1,81
00000a67 808080c00f       6029		.byte	128,128,128,192,15
00000a6c 0c               6030		.byte	12
00000a6d 00               6031		.byte	0
00000a6e 20               6032		.byte	32
00000a6f 00               6033		.byte	0
00000a70 00               6034		.byte	0
00000a71 00               6035		.byte	0

                                   Fri Apr 10 08:32:21 2020           Page 109
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
00000a72 01               6036		.byte	1
00000a73 01               6037		.byte	1
00000a74 00               6038		.byte	0
00000a75 01               6039		.byte	1
                          6040	
                          6041		.section	.debug_frame
                          6042	.LDW_5cc3ce0:
00000168 00000014         6043		.long	.LDW_unq_16-.LDW_unq_15
                          6044	.LDW_unq_15:
0000016c 00000000         6045		.long	.LDW_5d25e48
00000170 00000000         6046		.long	FblTpPrecopy
00000174 00000324         6047		.long	__ghs_eofn_FblTpPrecopy-FblTpPrecopy
00000178 01               6048		.byte	1
00000179 00000000         6049		.long	.LDW36
0000017d 00               6050		.byte	0
0000017e 00               6051		.byte	0
0000017f 00               6052		.byte	0
                          6053	.LDW_unq_16:
                          6054		.section	.debug_line
0000080d 000502           6055		.byte	0,5,2
00000810 00000000         6056		.long	FblTpPrecopy
00000814 06               6057		.byte	6
00000815 03               6058		.byte	3
00000816 aa08             6059		.byte	170,8
00000818 02               6060		.byte	2
00000819 00               6061		.byte	0
0000081a 01               6062		.byte	1
0000081b 02               6063		.byte	2
0000081c 0e               6064		.byte	14
0000081d 03               6065		.byte	3
0000081e 05               6066		.byte	5
0000081f 02               6067		.byte	2
00000820 08               6068		.byte	8
00000821 01               6069		.byte	1
00000822 000502           6070		.byte	0,5,2
00000825 00000000         6071		.long	.LDWlin19
00000829 0d               6072		.byte	13
0000082a 02               6073		.byte	2
0000082b 00               6074		.byte	0
0000082c 03               6075		.byte	3
0000082d 06               6076		.byte	6
0000082e 02               6077		.byte	2
0000082f 00               6078		.byte	0
00000830 01               6079		.byte	1
00000831 000502           6080		.byte	0,5,2
00000834 00000000         6081		.long	.LDWlin20
00000838 03               6082		.byte	3
00000839 06               6083		.byte	6
0000083a 02               6084		.byte	2
0000083b 00               6085		.byte	0
0000083c 01               6086		.byte	1
0000083d 02               6087		.byte	2
0000083e 00               6088		.byte	0
0000083f 03               6089		.byte	3
00000840 05               6090		.byte	5
00000841 02               6091		.byte	2

                                   Fri Apr 10 08:32:21 2020           Page 110
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
00000842 00               6092		.byte	0
00000843 01               6093		.byte	1
00000844 000502           6094		.byte	0,5,2
00000847 00000000         6095		.long	.LDWlin21
0000084b 03               6096		.byte	3
0000084c 06               6097		.byte	6
0000084d 02               6098		.byte	2
0000084e 00               6099		.byte	0
0000084f 01               6100		.byte	1
00000850 03               6101		.byte	3
00000851 04               6102		.byte	4
00000852 02               6103		.byte	2
00000853 00               6104		.byte	0
00000854 01               6105		.byte	1
00000855 0d               6106		.byte	13
00000856 02               6107		.byte	2
00000857 00               6108		.byte	0
00000858 03               6109		.byte	3
00000859 04               6110		.byte	4
0000085a 02               6111		.byte	2
0000085b 00               6112		.byte	0
0000085c 01               6113		.byte	1
0000085d 000502           6114		.byte	0,5,2
00000860 00000000         6115		.long	.LDWlin22
00000864 03               6116		.byte	3
00000865 06               6117		.byte	6
00000866 02               6118		.byte	2
00000867 00               6119		.byte	0
00000868 01               6120		.byte	1
00000869 02               6121		.byte	2
0000086a 00               6122		.byte	0
0000086b 03               6123		.byte	3
0000086c 1d               6124		.byte	29
0000086d 02               6125		.byte	2
0000086e 00               6126		.byte	0
0000086f 01               6127		.byte	1
00000870 000502           6128		.byte	0,5,2
00000873 00000000         6129		.long	.LDWlin23
00000877 03               6130		.byte	3
00000878 05               6131		.byte	5
00000879 02               6132		.byte	2
0000087a 00               6133		.byte	0
0000087b 01               6134		.byte	1
0000087c 0b               6135		.byte	11
0000087d 000502           6136		.byte	0,5,2
00000880 00000000         6137		.long	.LDWlin24
00000884 0c               6138		.byte	12
00000885 0c               6139		.byte	12
00000886 0c               6140		.byte	12
00000887 33               6141		.byte	51
00000888 02               6142		.byte	2
00000889 00               6143		.byte	0
0000088a 03               6144		.byte	3
0000088b 0b               6145		.byte	11
0000088c 02               6146		.byte	2
0000088d 00               6147		.byte	0

                                   Fri Apr 10 08:32:21 2020           Page 111
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
0000088e 01               6148		.byte	1
0000088f 03               6149		.byte	3
00000890 05               6150		.byte	5
00000891 02               6151		.byte	2
00000892 04               6152		.byte	4
00000893 01               6153		.byte	1
00000894 02               6154		.byte	2
00000895 02               6155		.byte	2
00000896 000502           6156		.byte	0,5,2
00000899 00000000         6157		.long	.LDWlin25
0000089d 0b               6158		.byte	11
0000089e 2b               6159		.byte	43
0000089f 03               6160		.byte	3
000008a0 7e               6161		.byte	126
000008a1 02               6162		.byte	2
000008a2 0a               6163		.byte	10
000008a3 01               6164		.byte	1
000008a4 000502           6165		.byte	0,5,2
000008a7 00000000         6166		.long	.LDWlin26
000008ab 0d               6167		.byte	13
000008ac 03               6168		.byte	3
000008ad 05               6169		.byte	5
000008ae 02               6170		.byte	2
000008af 00               6171		.byte	0
000008b0 01               6172		.byte	1
000008b1 1b               6173		.byte	27
000008b2 1b               6174		.byte	27
000008b3 000502           6175		.byte	0,5,2
000008b6 00000000         6176		.long	.LDWlin27
000008ba 03               6177		.byte	3
000008bb 05               6178		.byte	5
000008bc 02               6179		.byte	2
000008bd 00               6180		.byte	0
000008be 01               6181		.byte	1
000008bf 0b               6182		.byte	11
000008c0 03               6183		.byte	3
000008c1 0e               6184		.byte	14
000008c2 02               6185		.byte	2
000008c3 00               6186		.byte	0
000008c4 01               6187		.byte	1
000008c5 0d               6188		.byte	13
000008c6 02               6189		.byte	2
000008c7 00               6190		.byte	0
000008c8 0d               6191		.byte	13
000008c9 06               6192		.byte	6
000008ca 000502           6193		.byte	0,5,2
000008cd 00000000         6194		.long	.LDWlin28
000008d1 03               6195		.byte	3
000008d2 a07f             6196		.byte	160,127
000008d4 02               6197		.byte	2
000008d5 00               6198		.byte	0
000008d6 01               6199		.byte	1
000008d7 06               6200		.byte	6
000008d8 03               6201		.byte	3
000008d9 e100             6202		.byte	225,0
000008db 02               6203		.byte	2

                                   Fri Apr 10 08:32:21 2020           Page 112
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
000008dc 00               6204		.byte	0
000008dd 01               6205		.byte	1
000008de 0d               6206		.byte	13
000008df 000502           6207		.byte	0,5,2
000008e2 00000000         6208		.long	.LDWlin29
000008e6 0c               6209		.byte	12
000008e7 02               6210		.byte	2
000008e8 00               6211		.byte	0
000008e9 03               6212		.byte	3
000008ea 20               6213		.byte	32
000008eb 02               6214		.byte	2
000008ec 00               6215		.byte	0
000008ed 01               6216		.byte	1
000008ee 1b               6217		.byte	27
000008ef 25               6218		.byte	37
000008f0 000502           6219		.byte	0,5,2
000008f3 00000000         6220		.long	.LDWlin30
000008f7 0d               6221		.byte	13
000008f8 02               6222		.byte	2
000008f9 00               6223		.byte	0
000008fa 0c               6224		.byte	12
000008fb 000502           6225		.byte	0,5,2
000008fe 00000000         6226		.long	.LDWlin31
00000902 0b               6227		.byte	11
00000903 0d               6228		.byte	13
00000904 000502           6229		.byte	0,5,2
00000907 00000000         6230		.long	.LDWlin32
0000090b 0b               6231		.byte	11
0000090c 3b               6232		.byte	59
0000090d 64               6233		.byte	100
0000090e 5c               6234		.byte	92
0000090f 000502           6235		.byte	0,5,2
00000912 00000000         6236		.long	.LDWlin33
00000916 03               6237		.byte	3
00000917 0f               6238		.byte	15
00000918 02               6239		.byte	2
00000919 00               6240		.byte	0
0000091a 01               6241		.byte	1
0000091b 02               6242		.byte	2
0000091c 00               6243		.byte	0
0000091d 03               6244		.byte	3
0000091e 07               6245		.byte	7
0000091f 02               6246		.byte	2
00000920 00               6247		.byte	0
00000921 01               6248		.byte	1
00000922 2d               6249		.byte	45
00000923 03               6250		.byte	3
00000924 05               6251		.byte	5
00000925 02               6252		.byte	2
00000926 04               6253		.byte	4
00000927 01               6254		.byte	1
00000928 02               6255		.byte	2
00000929 02               6256		.byte	2
0000092a 0b               6257		.byte	11
0000092b 2b               6258		.byte	43
0000092c 03               6259		.byte	3

                                   Fri Apr 10 08:32:21 2020           Page 113
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
0000092d 7e               6260		.byte	126
0000092e 02               6261		.byte	2
0000092f 0a               6262		.byte	10
00000930 01               6263		.byte	1
00000931 000502           6264		.byte	0,5,2
00000934 00000000         6265		.long	.LDWlin34
00000938 0d               6266		.byte	13
00000939 03               6267		.byte	3
0000093a 06               6268		.byte	6
0000093b 02               6269		.byte	2
0000093c 00               6270		.byte	0
0000093d 01               6271		.byte	1
0000093e 1b               6272		.byte	27
0000093f 000502           6273		.byte	0,5,2
00000942 00000000         6274		.long	.LDWlin35
00000946 0b               6275		.byte	11
00000947 3c               6276		.byte	60
00000948 03               6277		.byte	3
00000949 06               6278		.byte	6
0000094a 02               6279		.byte	2
0000094b 12               6280		.byte	18
0000094c 01               6281		.byte	1
0000094d 33               6282		.byte	51
0000094e 14               6283		.byte	20
0000094f 000502           6284		.byte	0,5,2
00000952 00000000         6285		.long	.LDWlin36
00000956 02               6286		.byte	2
00000957 00               6287		.byte	0
00000958 03               6288		.byte	3
00000959 05               6289		.byte	5
0000095a 02               6290		.byte	2
0000095b 02               6291		.byte	2
0000095c 01               6292		.byte	1
0000095d 0b               6293		.byte	11
0000095e 1d               6294		.byte	29
0000095f 0d               6295		.byte	13
00000960 02               6296		.byte	2
00000961 00               6297		.byte	0
00000962 0c               6298		.byte	12
00000963 000502           6299		.byte	0,5,2
00000966 00000000         6300		.long	.LDWlin37
0000096a 0b               6301		.byte	11
0000096b 0b               6302		.byte	11
0000096c 000502           6303		.byte	0,5,2
0000096f 00000000         6304		.long	.LDWlin38
00000973 0c               6305		.byte	12
00000974 02               6306		.byte	2
00000975 00               6307		.byte	0
00000976 0d               6308		.byte	13
00000977 000502           6309		.byte	0,5,2
0000097a 00000000         6310		.long	.LDWlin39
0000097e 0b               6311		.byte	11
0000097f 0d               6312		.byte	13
00000980 1b               6313		.byte	27
00000981 000502           6314		.byte	0,5,2
00000984 00000000         6315		.long	.LDWlin40

                                   Fri Apr 10 08:32:21 2020           Page 114
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
00000988 03               6316		.byte	3
00000989 04               6317		.byte	4
0000098a 02               6318		.byte	2
0000098b 00               6319		.byte	0
0000098c 01               6320		.byte	1
0000098d 02               6321		.byte	2
0000098e 00               6322		.byte	0
0000098f 03               6323		.byte	3
00000990 1a               6324		.byte	26
00000991 02               6325		.byte	2
00000992 00               6326		.byte	0
00000993 01               6327		.byte	1
00000994 000502           6328		.byte	0,5,2
00000997 00000000         6329		.long	.LDWlin41
0000099b 0b               6330		.byte	11
0000099c 03               6331		.byte	3
0000099d 0a               6332		.byte	10
0000099e 02               6333		.byte	2
0000099f 00               6334		.byte	0
000009a0 01               6335		.byte	1
000009a1 13               6336		.byte	19
000009a2 000502           6337		.byte	0,5,2
000009a5 00000000         6338		.long	.LDWlin42
000009a9 0b               6339		.byte	11
000009aa 2c               6340		.byte	44
000009ab 33               6341		.byte	51
000009ac 2b               6342		.byte	43
000009ad 03               6343		.byte	3
000009ae 7b               6344		.byte	123
000009af 02               6345		.byte	2
000009b0 02               6346		.byte	2
000009b1 01               6347		.byte	1
000009b2 000502           6348		.byte	0,5,2
000009b5 00000000         6349		.long	.LDWlin43
000009b9 03               6350		.byte	3
000009ba 27               6351		.byte	39
000009bb 02               6352		.byte	2
000009bc 00               6353		.byte	0
000009bd 01               6354		.byte	1
000009be 03               6355		.byte	3
000009bf 11               6356		.byte	17
000009c0 02               6357		.byte	2
000009c1 00               6358		.byte	0
000009c2 01               6359		.byte	1
000009c3 000502           6360		.byte	0,5,2
000009c6 00000000         6361		.long	.LDWlin44
000009ca 03               6362		.byte	3
000009cb 4e               6363		.byte	78
000009cc 02               6364		.byte	2
000009cd 00               6365		.byte	0
000009ce 01               6366		.byte	1
000009cf 03               6367		.byte	3
000009d0 06               6368		.byte	6
000009d1 02               6369		.byte	2
000009d2 00               6370		.byte	0
000009d3 01               6371		.byte	1

                                   Fri Apr 10 08:32:21 2020           Page 115
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
000009d4 0c               6372		.byte	12
000009d5 03               6373		.byte	3
000009d6 0b               6374		.byte	11
000009d7 02               6375		.byte	2
000009d8 00               6376		.byte	0
000009d9 01               6377		.byte	1
000009da 02               6378		.byte	2
000009db 02               6379		.byte	2
000009dc 0b               6380		.byte	11
000009dd 23               6381		.byte	35
000009de 03               6382		.byte	3
000009df 7e               6383		.byte	126
000009e0 02               6384		.byte	2
000009e1 0e               6385		.byte	14
000009e2 01               6386		.byte	1
000009e3 000502           6387		.byte	0,5,2
000009e6 00000000         6388		.long	.LDWlin45
000009ea 0d               6389		.byte	13
000009eb 03               6390		.byte	3
000009ec 06               6391		.byte	6
000009ed 02               6392		.byte	2
000009ee 00               6393		.byte	0
000009ef 01               6394		.byte	1
000009f0 06               6395		.byte	6
000009f1 02               6396		.byte	2
000009f2 02               6397		.byte	2
000009f3 06               6398		.byte	6
000009f4 1b               6399		.byte	27
000009f5 02               6400		.byte	2
000009f6 00               6401		.byte	0
000009f7 06               6402		.byte	6
000009f8 02               6403		.byte	2
000009f9 00               6404		.byte	0
000009fa 06               6405		.byte	6
000009fb 15               6406		.byte	21
000009fc 000502           6407		.byte	0,5,2
000009ff 00000000         6408		.long	.LDWlin46
00000a03 03               6409		.byte	3
00000a04 17               6410		.byte	23
00000a05 02               6411		.byte	2
00000a06 00               6412		.byte	0
00000a07 01               6413		.byte	1
00000a08 0c               6414		.byte	12
00000a09 0b               6415		.byte	11
00000a0a 43               6416		.byte	67
00000a0b 3b               6417		.byte	59
00000a0c 000502           6418		.byte	0,5,2
00000a0f 00000000         6419		.long	.LDWlin47
00000a13 0b               6420		.byte	11
00000a14 0b               6421		.byte	11
00000a15 23               6422		.byte	35
00000a16 000502           6423		.byte	0,5,2
00000a19 00000000         6424		.long	.LDWlin48
00000a1d 0b               6425		.byte	11
00000a1e 0b               6426		.byte	11
00000a1f 000502           6427		.byte	0,5,2

                                   Fri Apr 10 08:32:21 2020           Page 116
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
00000a22 00000000         6428		.long	.LDWlin49
00000a26 0b               6429		.byte	11
00000a27 3c               6430		.byte	60
00000a28 53               6431		.byte	83
00000a29 34               6432		.byte	52
00000a2a 000502           6433		.byte	0,5,2
00000a2d 00000000         6434		.long	.LDWlin50
00000a31 0b               6435		.byte	11
00000a32 02               6436		.byte	2
00000a33 00               6437		.byte	0
00000a34 0b               6438		.byte	11
00000a35 02               6439		.byte	2
00000a36 00               6440		.byte	0
00000a37 0b               6441		.byte	11
00000a38 000502           6442		.byte	0,5,2
00000a3b 00000000         6443		.long	.LDWlin51
00000a3f 0b               6444		.byte	11
00000a40 0c               6445		.byte	12
00000a41 000502           6446		.byte	0,5,2
00000a44 00000000         6447		.long	.LDWlin52
00000a48 03               6448		.byte	3
00000a49 05               6449		.byte	5
00000a4a 02               6450		.byte	2
00000a4b 00               6451		.byte	0
00000a4c 01               6452		.byte	1
00000a4d 02               6453		.byte	2
00000a4e 00               6454		.byte	0
00000a4f 0b               6455		.byte	11
00000a50 02               6456		.byte	2
00000a51 00               6457		.byte	0
00000a52 03               6458		.byte	3
00000a53 06               6459		.byte	6
00000a54 02               6460		.byte	2
00000a55 00               6461		.byte	0
00000a56 01               6462		.byte	1
00000a57 0b               6463		.byte	11
00000a58 0c               6464		.byte	12
00000a59 0d               6465		.byte	13
00000a5a 02               6466		.byte	2
00000a5b 00               6467		.byte	0
00000a5c 03               6468		.byte	3
00000a5d 0a               6469		.byte	10
00000a5e 02               6470		.byte	2
00000a5f 00               6471		.byte	0
00000a60 01               6472		.byte	1
00000a61 000502           6473		.byte	0,5,2
00000a64 00000000         6474		.long	.LDWlin53
00000a68 0b               6475		.byte	11
00000a69 0c               6476		.byte	12
00000a6a 000502           6477		.byte	0,5,2
00000a6d 00000000         6478		.long	.LDWlin54
00000a71 0c               6479		.byte	12
00000a72 02               6480		.byte	2
00000a73 00               6481		.byte	0
00000a74 0c               6482		.byte	12
00000a75 000502           6483		.byte	0,5,2

                                   Fri Apr 10 08:32:21 2020           Page 117
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
00000a78 00000000         6484		.long	.LDWlin55
00000a7c 0b               6485		.byte	11
00000a7d 0c               6486		.byte	12
00000a7e 000502           6487		.byte	0,5,2
00000a81 00000000         6488		.long	.LDWlin56
00000a85 0c               6489		.byte	12
00000a86 0d               6490		.byte	13
00000a87 000502           6491		.byte	0,5,2
00000a8a 00000000         6492		.long	.LDWlin57
00000a8e 0b               6493		.byte	11
00000a8f 0b               6494		.byte	11
00000a90 000502           6495		.byte	0,5,2
00000a93 00000000         6496		.long	.LDWlin58
00000a97 0c               6497		.byte	12
00000a98 000502           6498		.byte	0,5,2
00000a9b 00000000         6499		.long	.LDWlin59
00000a9f 0c               6500		.byte	12
00000aa0 03               6501		.byte	3
00000aa1 04               6502		.byte	4
00000aa2 02               6503		.byte	2
00000aa3 00               6504		.byte	0
00000aa4 01               6505		.byte	1
00000aa5 000502           6506		.byte	0,5,2
00000aa8 00000000         6507		.long	.LDWlin60
00000aac 0b               6508		.byte	11
00000aad 0b               6509		.byte	11
00000aae 000502           6510		.byte	0,5,2
00000ab1 00000000         6511		.long	.LDWlin61
00000ab5 0c               6512		.byte	12
00000ab6 000502           6513		.byte	0,5,2
00000ab9 00000000         6514		.long	.LDWlin62
00000abd 0c               6515		.byte	12
00000abe 0d               6516		.byte	13
00000abf 0d               6517		.byte	13
00000ac0 02               6518		.byte	2
00000ac1 00               6519		.byte	0
00000ac2 03               6520		.byte	3
00000ac3 08               6521		.byte	8
00000ac4 02               6522		.byte	2
00000ac5 00               6523		.byte	0
00000ac6 01               6524		.byte	1
00000ac7 35               6525		.byte	53
00000ac8 000502           6526		.byte	0,5,2
00000acb 00000000         6527		.long	.LDWlin63
00000acf 0b               6528		.byte	11
00000ad0 0b               6529		.byte	11
00000ad1 000502           6530		.byte	0,5,2
00000ad4 00000000         6531		.long	.LDWlin64
00000ad8 0b               6532		.byte	11
00000ad9 0b               6533		.byte	11
00000ada 000502           6534		.byte	0,5,2
00000add 00000000         6535		.long	.LDWlin65
00000ae1 0b               6536		.byte	11
00000ae2 0c               6537		.byte	12
00000ae3 0c               6538		.byte	12
00000ae4 000502           6539		.byte	0,5,2

                                   Fri Apr 10 08:32:21 2020           Page 118
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
00000ae7 00000000         6540		.long	.LDWlin66
00000aeb 0b               6541		.byte	11
00000aec 02               6542		.byte	2
00000aed 00               6543		.byte	0
00000aee 0b               6544		.byte	11
00000aef 0d               6545		.byte	13
00000af0 0b               6546		.byte	11
00000af1 1c               6547		.byte	28
00000af2 000502           6548		.byte	0,5,2
00000af5 00000000         6549		.long	.LDWlin67
00000af9 03               6550		.byte	3
00000afa 09               6551		.byte	9
00000afb 02               6552		.byte	2
00000afc 00               6553		.byte	0
00000afd 01               6554		.byte	1
00000afe 02               6555		.byte	2
00000aff 00               6556		.byte	0
00000b00 03               6557		.byte	3
00000b01 0c               6558		.byte	12
00000b02 02               6559		.byte	2
00000b03 00               6560		.byte	0
00000b04 01               6561		.byte	1
00000b05 03               6562		.byte	3
00000b06 837c             6563		.byte	131,124
00000b08 02               6564		.byte	2
00000b09 14               6565		.byte	20
00000b0a 01               6566		.byte	1
00000b0b 06               6567		.byte	6
00000b0c 03               6568		.byte	3
00000b0d 0b               6569		.byte	11
00000b0e 02               6570		.byte	2
00000b0f 00               6571		.byte	0
00000b10 01               6572		.byte	1
00000b11 03               6573		.byte	3
00000b12 13               6574		.byte	19
00000b13 02               6575		.byte	2
00000b14 00               6576		.byte	0
00000b15 01               6577		.byte	1
00000b16 03               6578		.byte	3
00000b17 e500             6579		.byte	229,0
00000b19 02               6580		.byte	2
00000b1a 00               6581		.byte	0
00000b1b 01               6582		.byte	1
00000b1c 03               6583		.byte	3
00000b1d 30               6584		.byte	48
00000b1e 02               6585		.byte	2
00000b1f 00               6586		.byte	0
00000b20 01               6587		.byte	1
00000b21 03               6588		.byte	3
00000b22 cc00             6589		.byte	204,0
00000b24 02               6590		.byte	2
00000b25 00               6591		.byte	0
00000b26 01               6592		.byte	1
00000b27 03               6593		.byte	3
00000b28 9d01             6594		.byte	157,1
00000b2a 02               6595		.byte	2

                                   Fri Apr 10 08:32:21 2020           Page 119
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
00000b2b 00               6596		.byte	0
00000b2c 01               6597		.byte	1
00000b2d 03               6598		.byte	3
00000b2e ec00             6599		.byte	236,0
00000b30 02               6600		.byte	2
00000b31 00               6601		.byte	0
00000b32 01               6602		.byte	1
00000b33 03               6603		.byte	3
00000b34 bd7f             6604		.byte	189,127
00000b36 02               6605		.byte	2
00000b37 00               6606		.byte	0
00000b38 01               6607		.byte	1
00000b39 03               6608		.byte	3
00000b3a 76               6609		.byte	118
00000b3b 02               6610		.byte	2
00000b3c 00               6611		.byte	0
00000b3d 01               6612		.byte	1
00000b3e 03               6613		.byte	3
00000b3f 77               6614		.byte	119
00000b40 02               6615		.byte	2
00000b41 00               6616		.byte	0
00000b42 01               6617		.byte	1
00000b43 03               6618		.byte	3
00000b44 79               6619		.byte	121
00000b45 02               6620		.byte	2
00000b46 00               6621		.byte	0
00000b47 01               6622		.byte	1
00000b48 03               6623		.byte	3
00000b49 e67e             6624		.byte	230,126
00000b4b 02               6625		.byte	2
00000b4c 00               6626		.byte	0
00000b4d 01               6627		.byte	1
00000b4e 03               6628		.byte	3
00000b4f 74               6629		.byte	116
00000b50 02               6630		.byte	2
00000b51 00               6631		.byte	0
00000b52 01               6632		.byte	1
00000b53 03               6633		.byte	3
00000b54 bc7f             6634		.byte	188,127
00000b56 02               6635		.byte	2
00000b57 00               6636		.byte	0
00000b58 01               6637		.byte	1
00000b59 03               6638		.byte	3
00000b5a e77e             6639		.byte	231,126
00000b5c 02               6640		.byte	2
00000b5d 00               6641		.byte	0
00000b5e 01               6642		.byte	1
00000b5f 03               6643		.byte	3
00000b60 e400             6644		.byte	228,0
00000b62 02               6645		.byte	2
00000b63 00               6646		.byte	0
00000b64 01               6647		.byte	1
00000b65 03               6648		.byte	3
00000b66 41               6649		.byte	65
00000b67 02               6650		.byte	2
00000b68 00               6651		.byte	0

                                   Fri Apr 10 08:32:21 2020           Page 120
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
00000b69 01               6652		.byte	1
00000b6a 03               6653		.byte	3
00000b6b b203             6654		.byte	178,3
00000b6d 02               6655		.byte	2
00000b6e 00               6656		.byte	0
00000b6f 01               6657		.byte	1
00000b70 02               6658		.byte	2
00000b71 02               6659		.byte	2
00000b72 02               6660		.byte	2
00000b73 0c               6661		.byte	12
00000b74 000101           6662		.byte	0,1,1
                          6663		.section	.debug_info
                          6664	.LDW_5bae5f0:
00000a76 11               6665		.byte	17
00000a77 6461746100       6666		.strz	"data"
00000a7c aa08             6667		.byte	170,8
00000a7e 28               6668		.byte	40
00000a7f 01               6669		.byte	1
00000a80 00000000         6670		.long	.LDW_5bae500
00000a84 00               6671		.byte	0
00000a85 016f             6672		.byte	1,111
                          6673	
                          6674	.LDW_4a03508:
00000a87 1f               6675		.byte	31
00000a88 00000000         6676		.long	.LDW63
00000a8c 00000000         6677		.long	.LDW36
                          6678	
                          6679	.LDW_4a03418:
00000a90 1f               6680		.byte	31
00000a91 00000000         6681		.long	.LDW73
00000a95 00000000         6682		.long	.LDW26
                          6683	
                          6684	.LDW_4a03448:
00000a99 1f               6685		.byte	31
00000a9a 00000000         6686		.long	.LDW83
00000a9e 00000000         6687		.long	.LDW16
                          6688	
                          6689	.LDW_4a035f8:
00000aa2 1f               6690		.byte	31
00000aa3 00000000         6691		.long	.LDW93
00000aa7 00000000         6692		.long	.LDW24
                          6693	
                          6694	.LDW_4a03568:
00000aab 1f               6695		.byte	31
00000aac 00000000         6696		.long	.LDW04
00000ab0 00000000         6697		.long	.LDW14
                          6698	
                          6699	.LDW_5bae648:
00000ab4 06               6700		.byte	6
00000ab5 6900             6701		.strz	"i"
00000ab7 9409             6702		.byte	148,9
00000ab9 14               6703		.byte	20
00000aba 01               6704		.byte	1
00000abb 00000000         6705		.long	.LDW_4a4b800
00000abf 00               6706		.byte	0
00000ac0 00               6707		.byte	0

                                   Fri Apr 10 08:32:21 2020           Page 121
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
00000ac1 0150             6708		.byte	1,80
                          6709	
00000ac3 00               6710		.byte	0
                          6711	
00000ac4 00               6712		.byte	0
                          6713	
                          6714	.LDW_4a03538:
00000ac5 1f               6715		.byte	31
00000ac6 00000000         6716		.long	.LDW34
00000aca 00000000         6717		.long	.LDW64
                          6718	
                          6719	.LDW_5baea38:
00000ace 06               6720		.byte	6
00000acf 746d70444c00     6721		.strz	"tmpDL"
00000ad5 a709             6722		.byte	167,9
00000ad7 12               6723		.byte	18
00000ad8 01               6724		.byte	1
00000ad9 00000000         6725		.long	.LDW_4a4da08
00000add 00               6726		.byte	0
00000ade 00               6727		.byte	0
00000adf 0150             6728		.byte	1,80
                          6729	
                          6730	.LDW_4a03478:
00000ae1 1f               6731		.byte	31
00000ae2 00000000         6732		.long	.LDW44
00000ae6 00000000         6733		.long	.LDW54
                          6734	
                          6735	.LDW_5bae9e0:
00000aea 06               6736		.byte	6
00000aeb 6900             6737		.strz	"i"
00000aed 8f0a             6738		.byte	143,10
00000aef 14               6739		.byte	20
00000af0 01               6740		.byte	1
00000af1 00000000         6741		.long	.LDW_4a4b800
00000af5 00               6742		.byte	0
00000af6 00               6743		.byte	0
00000af7 0150             6744		.byte	1,80
                          6745	
00000af9 00               6746		.byte	0
                          6747	
00000afa 00               6748		.byte	0
                          6749	
                          6750	.LDW_4a03148:
00000afb 1f               6751		.byte	31
00000afc 00000000         6752		.long	.LDW74
00000b00 00000000         6753		.long	.LDW06
                          6754	
                          6755	.LDW_5bae988:
00000b04 06               6756		.byte	6
00000b05 6c6f635278446174 6757		.strz	"locRxDataLength"
00000b0d 614c656e67746800
00000b15 ad0a             6758		.byte	173,10
00000b17 1c               6759		.byte	28
00000b18 01               6760		.byte	1
00000b19 00000000         6761		.long	.LDW_5bae6c8
00000b1d 00               6762		.byte	0
00000b1e 00               6763		.byte	0

                                   Fri Apr 10 08:32:21 2020           Page 122
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
00000b1f 0153             6764		.byte	1,83
                          6765	
                          6766	.LDW_4a03178:
00000b21 1f               6767		.byte	31
00000b22 00000000         6768		.long	.LDW84
00000b26 00000000         6769		.long	.LDW95
                          6770	
                          6771	.LDW_4a03868:
00000b2a 1f               6772		.byte	31
00000b2b 00000000         6773		.long	.LDW94
00000b2f 00000000         6774		.long	.LDW85
                          6775	
                          6776	.LDW_4a03748:
00000b33 1f               6777		.byte	31
00000b34 00000000         6778		.long	.LDW05
00000b38 00000000         6779		.long	.LDW35
                          6780	
                          6781	.LDW_4a03778:
00000b3c 1f               6782		.byte	31
00000b3d 00000000         6783		.long	.LDW15
00000b41 00000000         6784		.long	.LDW25
                          6785	
                          6786	.LDW_5bae930:
00000b45 06               6787		.byte	6
00000b46 6900             6788		.strz	"i"
00000b48 e90a             6789		.byte	233,10
00000b4a 1a               6790		.byte	26
00000b4b 01               6791		.byte	1
00000b4c 00000000         6792		.long	.LDW_4a4b800
00000b50 00               6793		.byte	0
00000b51 00               6794		.byte	0
00000b52 0156             6795		.byte	1,86
                          6796	
00000b54 00               6797		.byte	0
                          6798	
00000b55 00               6799		.byte	0
                          6800	
                          6801	.LDW_4a036e8:
00000b56 1f               6802		.byte	31
00000b57 00000000         6803		.long	.LDW45
00000b5b 00000000         6804		.long	.LDW75
                          6805	
                          6806	.LDW_4a037d8:
00000b5f 1f               6807		.byte	31
00000b60 00000000         6808		.long	.LDW55
00000b64 00000000         6809		.long	.LDW65
                          6810	
                          6811	.LDW_5bae880:
00000b68 06               6812		.byte	6
00000b69 6900             6813		.strz	"i"
00000b6b 820b             6814		.byte	130,11
00000b6d 1a               6815		.byte	26
00000b6e 01               6816		.byte	1
00000b6f 00000000         6817		.long	.LDW_4a4b800
00000b73 00               6818		.byte	0
00000b74 00               6819		.byte	0

                                   Fri Apr 10 08:32:21 2020           Page 123
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
00000b75 0155             6820		.byte	1,85
                          6821	
00000b77 00               6822		.byte	0
                          6823	
00000b78 00               6824		.byte	0
                          6825	
00000b79 00               6826		.byte	0
                          6827	
00000b7a 00               6828		.byte	0
                          6829	
00000b7b 00               6830		.byte	0
                          6831	
00000b7c 00               6832		.byte	0
                          6833	
00000b7d 00               6834		.byte	0
                          6835	
00000b7e 00               6836		.byte	0
                          6837	
00000b7f 00               6838		.byte	0
                          6839	
                          6840	.LDW_5baeea8:
00000b80 15               6841		.byte	21
00000b81 46626c5470546173 6842		.strz	"FblTpTask"
00000b89 6b00            
00000b8b c40c             6843		.byte	196,12
00000b8d 06               6844		.byte	6
00000b8e 01               6845		.byte	1
00000b8f 00000000         6846		.long	FblTpTask
00000b93 00000000         6847		.long	__ghs_eofn_FblTpTask
00000b97 0151             6848		.byte	1,81
00000b99 808080e00f       6849		.byte	128,128,128,224,15
00000b9e 08               6850		.byte	8
00000b9f 00               6851		.byte	0
00000ba0 20               6852		.byte	32
00000ba1 00               6853		.byte	0
00000ba2 00               6854		.byte	0
00000ba3 00               6855		.byte	0
00000ba4 01               6856		.byte	1
00000ba5 01               6857		.byte	1
00000ba6 00               6858		.byte	0
00000ba7 01               6859		.byte	1
                          6860	
                          6861		.section	.debug_frame
                          6862	.LDW_5cc40e0:
00000180 00000014         6863		.long	.LDW_unq_18-.LDW_unq_17
                          6864	.LDW_unq_17:
00000184 00000000         6865		.long	.LDW_5d25e48
00000188 00000000         6866		.long	FblTpTask
0000018c 0000026e         6867		.long	__ghs_eofn_FblTpTask-FblTpTask
00000190 01               6868		.byte	1
00000191 00000000         6869		.long	.LDW56
00000195 00               6870		.byte	0
00000196 00               6871		.byte	0
00000197 00               6872		.byte	0
                          6873	.LDW_unq_18:
                          6874		.section	.debug_line
00000b77 000502           6875		.byte	0,5,2

                                   Fri Apr 10 08:32:21 2020           Page 124
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
00000b7a 00000000         6876		.long	FblTpTask
00000b7e 06               6877		.byte	6
00000b7f 03               6878		.byte	3
00000b80 c40c             6879		.byte	196,12
00000b82 02               6880		.byte	2
00000b83 00               6881		.byte	0
00000b84 01               6882		.byte	1
00000b85 03               6883		.byte	3
00000b86 08               6884		.byte	8
00000b87 02               6885		.byte	2
00000b88 0c               6886		.byte	12
00000b89 01               6887		.byte	1
00000b8a 000502           6888		.byte	0,5,2
00000b8d 00000000         6889		.long	.LDWlin68
00000b91 0b               6890		.byte	11
00000b92 0b               6891		.byte	11
00000b93 000502           6892		.byte	0,5,2
00000b96 00000000         6893		.long	.LDWlin69
00000b9a 0b               6894		.byte	11
00000b9b 0c               6895		.byte	12
00000b9c 53               6896		.byte	83
00000b9d 34               6897		.byte	52
00000b9e 000502           6898		.byte	0,5,2
00000ba1 00000000         6899		.long	.LDWlin70
00000ba5 0b               6900		.byte	11
00000ba6 0c               6901		.byte	12
00000ba7 000502           6902		.byte	0,5,2
00000baa 00000000         6903		.long	.LDWlin71
00000bae 0b               6904		.byte	11
00000baf 000502           6905		.byte	0,5,2
00000bb2 00000000         6906		.long	.LDWlin72
00000bb6 0b               6907		.byte	11
00000bb7 0c               6908		.byte	12
00000bb8 0b               6909		.byte	11
00000bb9 000502           6910		.byte	0,5,2
00000bbc 00000000         6911		.long	.LDWlin73
00000bc0 0b               6912		.byte	11
00000bc1 03               6913		.byte	3
00000bc2 04               6914		.byte	4
00000bc3 02               6915		.byte	2
00000bc4 00               6916		.byte	0
00000bc5 01               6917		.byte	1
00000bc6 2b               6918		.byte	43
00000bc7 02               6919		.byte	2
00000bc8 00               6920		.byte	0
00000bc9 0b               6921		.byte	11
00000bca 02               6922		.byte	2
00000bcb 00               6923		.byte	0
00000bcc 0b               6924		.byte	11
00000bcd 02               6925		.byte	2
00000bce 00               6926		.byte	0
00000bcf 0b               6927		.byte	11
00000bd0 02               6928		.byte	2
00000bd1 00               6929		.byte	0
00000bd2 0d               6930		.byte	13
00000bd3 000502           6931		.byte	0,5,2

                                   Fri Apr 10 08:32:21 2020           Page 125
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
00000bd6 00000000         6932		.long	.LDWlin74
00000bda 0b               6933		.byte	11
00000bdb 2b               6934		.byte	43
00000bdc 000502           6935		.byte	0,5,2
00000bdf 00000000         6936		.long	.LDWlin75
00000be3 0b               6937		.byte	11
00000be4 03               6938		.byte	3
00000be5 05               6939		.byte	5
00000be6 02               6940		.byte	2
00000be7 00               6941		.byte	0
00000be8 01               6942		.byte	1
00000be9 000502           6943		.byte	0,5,2
00000bec 00000000         6944		.long	.LDWlin76
00000bf0 0b               6945		.byte	11
00000bf1 0c               6946		.byte	12
00000bf2 13               6947		.byte	19
00000bf3 13               6948		.byte	19
00000bf4 000502           6949		.byte	0,5,2
00000bf7 00000000         6950		.long	.LDWlin77
00000bfb 03               6951		.byte	3
00000bfc 06               6952		.byte	6
00000bfd 02               6953		.byte	2
00000bfe 00               6954		.byte	0
00000bff 01               6955		.byte	1
00000c00 0c               6956		.byte	12
00000c01 2c               6957		.byte	44
00000c02 000502           6958		.byte	0,5,2
00000c05 00000000         6959		.long	.LDWlin78
00000c09 0b               6960		.byte	11
00000c0a 0b               6961		.byte	11
00000c0b 000502           6962		.byte	0,5,2
00000c0e 00000000         6963		.long	.LDWlin79
00000c12 0b               6964		.byte	11
00000c13 0b               6965		.byte	11
00000c14 000502           6966		.byte	0,5,2
00000c17 00000000         6967		.long	.LDWlin80
00000c1b 0b               6968		.byte	11
00000c1c 0b               6969		.byte	11
00000c1d 03               6970		.byte	3
00000c1e 05               6971		.byte	5
00000c1f 02               6972		.byte	2
00000c20 02               6973		.byte	2
00000c21 01               6974		.byte	1
00000c22 000502           6975		.byte	0,5,2
00000c25 00000000         6976		.long	.LDWlin81
00000c29 0b               6977		.byte	11
00000c2a 0b               6978		.byte	11
00000c2b 000502           6979		.byte	0,5,2
00000c2e 00000000         6980		.long	.LDWlin82
00000c32 0b               6981		.byte	11
00000c33 0b               6982		.byte	11
00000c34 03               6983		.byte	3
00000c35 0f               6984		.byte	15
00000c36 02               6985		.byte	2
00000c37 0e               6986		.byte	14
00000c38 01               6987		.byte	1

                                   Fri Apr 10 08:32:21 2020           Page 126
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
00000c39 0c               6988		.byte	12
00000c3a 0c               6989		.byte	12
00000c3b 02               6990		.byte	2
00000c3c 00               6991		.byte	0
00000c3d 0b               6992		.byte	11
00000c3e 02               6993		.byte	2
00000c3f 00               6994		.byte	0
00000c40 0d               6995		.byte	13
00000c41 000502           6996		.byte	0,5,2
00000c44 00000000         6997		.long	.LDWlin83
00000c48 0b               6998		.byte	11
00000c49 0c               6999		.byte	12
00000c4a 02               7000		.byte	2
00000c4b 00               7001		.byte	0
00000c4c 0b               7002		.byte	11
00000c4d 02               7003		.byte	2
00000c4e 00               7004		.byte	0
00000c4f 0b               7005		.byte	11
00000c50 02               7006		.byte	2
00000c51 00               7007		.byte	0
00000c52 03               7008		.byte	3
00000c53 04               7009		.byte	4
00000c54 02               7010		.byte	2
00000c55 00               7011		.byte	0
00000c56 01               7012		.byte	1
00000c57 000502           7013		.byte	0,5,2
00000c5a 00000000         7014		.long	.LDWlin84
00000c5e 0b               7015		.byte	11
00000c5f 0d               7016		.byte	13
00000c60 000502           7017		.byte	0,5,2
00000c63 00000000         7018		.long	.LDWlin85
00000c67 0b               7019		.byte	11
00000c68 0b               7020		.byte	11
00000c69 1b               7021		.byte	27
00000c6a 000502           7022		.byte	0,5,2
00000c6d 00000000         7023		.long	.LDWlin86
00000c71 0b               7024		.byte	11
00000c72 0c               7025		.byte	12
00000c73 0b               7026		.byte	11
00000c74 000502           7027		.byte	0,5,2
00000c77 00000000         7028		.long	.LDWlin87
00000c7b 0c               7029		.byte	12
00000c7c 000502           7030		.byte	0,5,2
00000c7f 00000000         7031		.long	.LDWlin88
00000c83 0b               7032		.byte	11
00000c84 02               7033		.byte	2
00000c85 00               7034		.byte	0
00000c86 0c               7035		.byte	12
00000c87 02               7036		.byte	2
00000c88 00               7037		.byte	0
00000c89 0d               7038		.byte	13
00000c8a 000502           7039		.byte	0,5,2
00000c8d 00000000         7040		.long	.LDWlin89
00000c91 0b               7041		.byte	11
00000c92 0b               7042		.byte	11
00000c93 24               7043		.byte	36

                                   Fri Apr 10 08:32:21 2020           Page 127
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
00000c94 000502           7044		.byte	0,5,2
00000c97 00000000         7045		.long	.LDWlin90
00000c9b 0b               7046		.byte	11
00000c9c 0b               7047		.byte	11
00000c9d 000502           7048		.byte	0,5,2
00000ca0 00000000         7049		.long	.LDWlin91
00000ca4 03               7050		.byte	3
00000ca5 df00             7051		.byte	223,0
00000ca7 02               7052		.byte	2
00000ca8 00               7053		.byte	0
00000ca9 01               7054		.byte	1
00000caa 02               7055		.byte	2
00000cab 00               7056		.byte	0
00000cac 0d               7057		.byte	13
00000cad 0b               7058		.byte	11
00000cae 0d               7059		.byte	13
00000caf 0b               7060		.byte	11
00000cb0 0d               7061		.byte	13
00000cb1 13               7062		.byte	19
00000cb2 13               7063		.byte	19
00000cb3 000502           7064		.byte	0,5,2
00000cb6 00000000         7065		.long	.LDWlin92
00000cba 0b               7066		.byte	11
00000cbb 000502           7067		.byte	0,5,2
00000cbe 00000000         7068		.long	.LDWlin93
00000cc2 03               7069		.byte	3
00000cc3 967f             7070		.byte	150,127
00000cc5 02               7071		.byte	2
00000cc6 00               7072		.byte	0
00000cc7 01               7073		.byte	1
00000cc8 0b               7074		.byte	11
00000cc9 000502           7075		.byte	0,5,2
00000ccc 00000000         7076		.long	.LDWlin94
00000cd0 0c               7077		.byte	12
00000cd1 13               7078		.byte	19
00000cd2 000502           7079		.byte	0,5,2
00000cd5 00000000         7080		.long	.LDWlin95
00000cd9 0c               7081		.byte	12
00000cda 0b               7082		.byte	11
00000cdb 0b               7083		.byte	11
00000cdc 54               7084		.byte	84
00000cdd ac               7085		.byte	172
00000cde 03               7086		.byte	3
00000cdf 04               7087		.byte	4
00000ce0 02               7088		.byte	2
00000ce1 06               7089		.byte	6
00000ce2 01               7090		.byte	1
00000ce3 06               7091		.byte	6
00000ce4 03               7092		.byte	3
00000ce5 29               7093		.byte	41
00000ce6 02               7094		.byte	2
00000ce7 00               7095		.byte	0
00000ce8 01               7096		.byte	1
00000ce9 03               7097		.byte	3
00000cea 5a               7098		.byte	90
00000ceb 02               7099		.byte	2

                                   Fri Apr 10 08:32:21 2020           Page 128
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
00000cec 00               7100		.byte	0
00000ced 01               7101		.byte	1
00000cee 03               7102		.byte	3
00000cef 7d               7103		.byte	125
00000cf0 02               7104		.byte	2
00000cf1 00               7105		.byte	0
00000cf2 01               7106		.byte	1
00000cf3 06               7107		.byte	6
00000cf4 000502           7108		.byte	0,5,2
00000cf7 00000000         7109		.long	.LDWlin96
00000cfb 0d               7110		.byte	13
00000cfc 000502           7111		.byte	0,5,2
00000cff 00000000         7112		.long	.LDWlin97
00000d03 0b               7113		.byte	11
00000d04 2b               7114		.byte	43
00000d05 03               7115		.byte	3
00000d06 7e               7116		.byte	126
00000d07 02               7117		.byte	2
00000d08 0c               7118		.byte	12
00000d09 01               7119		.byte	1
00000d0a 000502           7120		.byte	0,5,2
00000d0d 00000000         7121		.long	.LDWlin98
00000d11 0d               7122		.byte	13
00000d12 03               7123		.byte	3
00000d13 04               7124		.byte	4
00000d14 02               7125		.byte	2
00000d15 00               7126		.byte	0
00000d16 01               7127		.byte	1
00000d17 03               7128		.byte	3
00000d18 07               7129		.byte	7
00000d19 02               7130		.byte	2
00000d1a 06               7131		.byte	6
00000d1b 01               7132		.byte	1
00000d1c 02               7133		.byte	2
00000d1d 04               7134		.byte	4
00000d1e 000502           7135		.byte	0,5,2
00000d21 00000000         7136		.long	.LDWlin99
00000d25 0c               7137		.byte	12
00000d26 03               7138		.byte	3
00000d27 7e               7139		.byte	126
00000d28 02               7140		.byte	2
00000d29 08               7141		.byte	8
00000d2a 01               7142		.byte	1
00000d2b 000502           7143		.byte	0,5,2
00000d2e 00000000         7144		.long	.LDWlin100
00000d32 0d               7145		.byte	13
00000d33 03               7146		.byte	3
00000d34 05               7147		.byte	5
00000d35 02               7148		.byte	2
00000d36 00               7149		.byte	0
00000d37 01               7150		.byte	1
00000d38 43               7151		.byte	67
00000d39 13               7152		.byte	19
00000d3a 13               7153		.byte	19
00000d3b 000502           7154		.byte	0,5,2
00000d3e 00000000         7155		.long	.LDWlin101

                                   Fri Apr 10 08:32:21 2020           Page 129
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
00000d42 03               7156		.byte	3
00000d43 0d               7157		.byte	13
00000d44 02               7158		.byte	2
00000d45 00               7159		.byte	0
00000d46 01               7160		.byte	1
00000d47 0b               7161		.byte	11
00000d48 23               7162		.byte	35
00000d49 03               7163		.byte	3
00000d4a 7e               7164		.byte	126
00000d4b 02               7165		.byte	2
00000d4c 12               7166		.byte	18
00000d4d 01               7167		.byte	1
00000d4e 000502           7168		.byte	0,5,2
00000d51 00000000         7169		.long	.LDWlin102
00000d55 0d               7170		.byte	13
00000d56 03               7171		.byte	3
00000d57 04               7172		.byte	4
00000d58 02               7173		.byte	2
00000d59 00               7174		.byte	0
00000d5a 01               7175		.byte	1
00000d5b 03               7176		.byte	3
00000d5c 06               7177		.byte	6
00000d5d 02               7178		.byte	2
00000d5e 04               7179		.byte	4
00000d5f 01               7180		.byte	1
00000d60 4b               7181		.byte	75
00000d61 3b               7182		.byte	59
00000d62 000502           7183		.byte	0,5,2
00000d65 00000000         7184		.long	.LDWlin103
00000d69 03               7185		.byte	3
00000d6a 24               7186		.byte	36
00000d6b 02               7187		.byte	2
00000d6c 00               7188		.byte	0
00000d6d 01               7189		.byte	1
00000d6e 02               7190		.byte	2
00000d6f 00               7191		.byte	0
00000d70 0b               7192		.byte	11
00000d71 02               7193		.byte	2
00000d72 00               7194		.byte	0
00000d73 0b               7195		.byte	11
00000d74 02               7196		.byte	2
00000d75 00               7197		.byte	0
00000d76 0b               7198		.byte	11
00000d77 02               7199		.byte	2
00000d78 0c               7200		.byte	12
00000d79 000101           7201		.byte	0,1,1
                          7202		.section	.debug_info
                          7203	.LDW_4a03808:
00000ba8 1f               7204		.byte	31
00000ba9 00000000         7205		.long	.LDW46
00000bad 00000000         7206		.long	.LDW56
                          7207	
                          7208	.LDW_5baee00:
00000bb1 06               7209		.byte	6
00000bb2 69647800         7210		.strz	"idx"
00000bb6 c80c             7211		.byte	200,12

                                   Fri Apr 10 08:32:21 2020           Page 130
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
00000bb8 0c               7212		.byte	12
00000bb9 01               7213		.byte	1
00000bba 00000000         7214		.long	.LDW_4a4b800
00000bbe 00               7215		.byte	0
00000bbf 00               7216		.byte	0
00000bc0 0155             7217		.byte	1,85
                          7218	
00000bc2 00               7219		.byte	0
                          7220	
00000bc3 00               7221		.byte	0
                          7222	
                          7223	.LDW_5baef40:
00000bc4 15               7224		.byte	21
00000bc5 46626c5470436f6e 7225		.strz	"FblTpConfirmation"
00000bcd 6669726d6174696f
00000bd5 6e00            
00000bd7 c80e             7226		.byte	200,14
00000bd9 06               7227		.byte	6
00000bda 01               7228		.byte	1
00000bdb 00000000         7229		.long	FblTpConfirmation
00000bdf 00000000         7230		.long	__ghs_eofn_FblTpConfirmation
00000be3 0151             7231		.byte	1,81
00000be5 03               7232		.byte	3
00000be6 00               7233		.byte	0
00000be7 00               7234		.byte	0
00000be8 00               7235		.byte	0
00000be9 00               7236		.byte	0
00000bea 00               7237		.byte	0
00000beb 00               7238		.byte	0
00000bec 01               7239		.byte	1
00000bed 01               7240		.byte	1
00000bee 00               7241		.byte	0
00000bef 01               7242		.byte	1
                          7243	
                          7244		.section	.debug_frame
                          7245	.LDW_5cc3e60:
00000198 00000014         7246		.long	.LDW_unq_1a-.LDW_unq_19
                          7247	.LDW_unq_19:
0000019c 00000000         7248		.long	.LDW_5d25e48
000001a0 00000000         7249		.long	FblTpConfirmation
000001a4 000000aa         7250		.long	__ghs_eofn_FblTpConfirmation-FblTpConfirmation
000001a8 01               7251		.byte	1
000001a9 00000000         7252		.long	.LDW76
000001ad 00               7253		.byte	0
000001ae 00               7254		.byte	0
000001af 00               7255		.byte	0
                          7256	.LDW_unq_1a:
                          7257		.section	.debug_line
00000d7c 000502           7258		.byte	0,5,2
00000d7f 00000000         7259		.long	FblTpConfirmation
00000d83 06               7260		.byte	6
00000d84 03               7261		.byte	3
00000d85 d20e             7262		.byte	210,14
00000d87 02               7263		.byte	2
00000d88 00               7264		.byte	0
00000d89 01               7265		.byte	1
00000d8a 33               7266		.byte	51
00000d8b 1d               7267		.byte	29

                                   Fri Apr 10 08:32:21 2020           Page 131
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
00000d8c 000502           7268		.byte	0,5,2
00000d8f 00000000         7269		.long	.LDWlin104
00000d93 03               7270		.byte	3
00000d94 20               7271		.byte	32
00000d95 02               7272		.byte	2
00000d96 00               7273		.byte	0
00000d97 01               7274		.byte	1
00000d98 0b               7275		.byte	11
00000d99 0b               7276		.byte	11
00000d9a 000502           7277		.byte	0,5,2
00000d9d 00000000         7278		.long	.LDWlin105
00000da1 03               7279		.byte	3
00000da2 1b               7280		.byte	27
00000da3 02               7281		.byte	2
00000da4 00               7282		.byte	0
00000da5 01               7283		.byte	1
00000da6 0b               7284		.byte	11
00000da7 03               7285		.byte	3
00000da8 04               7286		.byte	4
00000da9 02               7287		.byte	2
00000daa 00               7288		.byte	0
00000dab 01               7289		.byte	1
00000dac 0b               7290		.byte	11
00000dad 03               7291		.byte	3
00000dae 04               7292		.byte	4
00000daf 02               7293		.byte	2
00000db0 00               7294		.byte	0
00000db1 01               7295		.byte	1
00000db2 02               7296		.byte	2
00000db3 00               7297		.byte	0
00000db4 03               7298		.byte	3
00000db5 05               7299		.byte	5
00000db6 02               7300		.byte	2
00000db7 00               7301		.byte	0
00000db8 01               7302		.byte	1
00000db9 02               7303		.byte	2
00000dba 00               7304		.byte	0
00000dbb 03               7305		.byte	3
00000dbc 04               7306		.byte	4
00000dbd 02               7307		.byte	2
00000dbe 00               7308		.byte	0
00000dbf 01               7309		.byte	1
00000dc0 03               7310		.byte	3
00000dc1 b97f             7311		.byte	185,127
00000dc3 02               7312		.byte	2
00000dc4 0a               7313		.byte	10
00000dc5 01               7314		.byte	1
00000dc6 0b               7315		.byte	11
00000dc7 03               7316		.byte	3
00000dc8 07               7317		.byte	7
00000dc9 02               7318		.byte	2
00000dca 00               7319		.byte	0
00000dcb 01               7320		.byte	1
00000dcc 03               7321		.byte	3
00000dcd 04               7322		.byte	4
00000dce 02               7323		.byte	2

                                   Fri Apr 10 08:32:21 2020           Page 132
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
00000dcf 0e               7324		.byte	14
00000dd0 01               7325		.byte	1
00000dd1 14               7326		.byte	20
00000dd2 0b               7327		.byte	11
00000dd3 0c               7328		.byte	12
00000dd4 43               7329		.byte	67
00000dd5 63               7330		.byte	99
00000dd6 03               7331		.byte	3
00000dd7 0a               7332		.byte	10
00000dd8 02               7333		.byte	2
00000dd9 02               7334		.byte	2
00000dda 01               7335		.byte	1
00000ddb 0b               7336		.byte	11
00000ddc 0d               7337		.byte	13
00000ddd 000502           7338		.byte	0,5,2
00000de0 00000000         7339		.long	.LDWlin106
00000de4 0b               7340		.byte	11
00000de5 0b               7341		.byte	11
00000de6 23               7342		.byte	35
00000de7 000502           7343		.byte	0,5,2
00000dea 00000000         7344		.long	.LDWlin107
00000dee 0b               7345		.byte	11
00000def 03               7346		.byte	3
00000df0 04               7347		.byte	4
00000df1 02               7348		.byte	2
00000df2 00               7349		.byte	0
00000df3 01               7350		.byte	1
00000df4 06               7351		.byte	6
00000df5 03               7352		.byte	3
00000df6 54               7353		.byte	84
00000df7 02               7354		.byte	2
00000df8 18               7355		.byte	24
00000df9 01               7356		.byte	1
00000dfa 06               7357		.byte	6
00000dfb 03               7358		.byte	3
00000dfc 2d               7359		.byte	45
00000dfd 02               7360		.byte	2
00000dfe 00               7361		.byte	0
00000dff 01               7362		.byte	1
00000e00 02               7363		.byte	2
00000e01 00               7364		.byte	0
00000e02 0b               7365		.byte	11
00000e03 02               7366		.byte	2
00000e04 00               7367		.byte	0
00000e05 0d               7368		.byte	13
00000e06 0b               7369		.byte	11
00000e07 0c               7370		.byte	12
00000e08 000502           7371		.byte	0,5,2
00000e0b 00000000         7372		.long	__ghs_eofn_FblTpConfirmation
00000e0f 0b               7373		.byte	11
00000e10 000101           7374		.byte	0,1,1
                          7375		.section	.debug_info
                          7376	.LDW_5bae8d8:
00000bf0 11               7377		.byte	17
00000bf1 74784f626a656374 7378		.strz	"txObject"
00000bf9 00              
00000bfa c80e             7379		.byte	200,14

                                   Fri Apr 10 08:32:21 2020           Page 133
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
00000bfc 2a               7380		.byte	42
00000bfd 01               7381		.byte	1
00000bfe 00000000         7382		.long	.LDW_5baeca0
00000c02 00               7383		.byte	0
00000c03 0153             7384		.byte	1,83
                          7385	
                          7386	.LDW_4a037a8:
00000c05 1f               7387		.byte	31
00000c06 00000000         7388		.long	.LDW66
00000c0a 00000000         7389		.long	.LDW76
                          7390	
                          7391	.LDW_5baeb40:
00000c0e 06               7392		.byte	6
00000c0f 636f6e66496e7453 7393		.strz	"confIntState"
00000c17 7461746500      
00000c1c cb0e             7394		.byte	203,14
00000c1e 0b               7395		.byte	11
00000c1f 01               7396		.byte	1
00000c20 00000000         7397		.long	.LDW_4a4b8b0
00000c24 00               7398		.byte	0
00000c25 00               7399		.byte	0
00000c26 0150             7400		.byte	1,80
                          7401	
00000c28 00               7402		.byte	0
                          7403	
00000c29 00               7404		.byte	0
                          7405	
00000c2a 00               7406		.byte	0
                          7407	
                          7408		.section	.debug_line
                          7409	.Ldw_line_end:
                          7410		.section	.debug_macinfo
00000000 01               7411		.byte	1
00000001 00               7412		.byte	0
00000002 5f5f4c494e455f5f 7413		.strz	"__LINE__"
0000000a 00              
0000000b 01               7414		.byte	1
0000000c 00               7415		.byte	0
0000000d 5f5f46494c455f5f 7416		.strz	"__FILE__"
00000015 00              
00000016 03               7417		.byte	3
00000017 00               7418		.byte	0
00000018 01               7419		.byte	1
00000019 03               7420		.byte	3
0000001a 60               7421		.byte	96
0000001b 02               7422		.byte	2
0000001c 01               7423		.byte	1
0000001d 4a               7424		.byte	74
0000001e 5f5f46424c5f494e 7425		.strz	"__FBL_INC_H__ "
00000026 435f485f5f2000  
0000002d 03               7426		.byte	3
0000002e 59               7427		.byte	89
0000002f 03               7428		.byte	3
00000030 01               7429		.byte	1
00000031 6a               7430		.byte	106
00000032 5f46424c54505f56 7431		.strz	"_FBLTP_VERSION 0x0321u"
0000003a 455253494f4e2030
00000042 78303332317500  
00000049 01               7432		.byte	1
0000004a 6b               7433		.byte	107
0000004b 5f46424c54505f52 7434		.strz	"_FBLTP_RELEASE_VERSION 0x00u"
00000053 454c454153455f56
0000005b 455253494f4e2030
00000063 7830307500      
00000068 04               7435		.byte	4

                                   Fri Apr 10 08:32:21 2020           Page 134
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
00000069 03               7436		.byte	3
0000006a 5a               7437		.byte	90
0000006b 04               7438		.byte	4
0000006c 01               7439		.byte	1
0000006d 30               7440		.byte	48
0000006e 5647454e5f47454e 7441		.strz	"VGEN_GENY "
00000076 592000          
00000079 01               7442		.byte	1
0000007a 4a               7443		.byte	74
0000007b 435f435055545950 7444		.strz	"C_CPUTYPE_32BIT "
00000083 455f333242495420
0000008b 00              
0000008c 01               7445		.byte	1
0000008d 54               7446		.byte	84
0000008e 435f435055545950 7447		.strz	"C_CPUTYPE_BIGENDIAN "
00000096 455f424947454e44
0000009e 49414e2000      
000000a3 01               7448		.byte	1
000000a4 59               7449		.byte	89
000000a5 435f435055545950 7450		.strz	"C_CPUTYPE_BITORDER_MSB2LSB "
000000ad 455f4249544f5244
000000b5 45525f4d5342324c
000000bd 53422000        
000000c1 01               7451		.byte	1
000000c2 63               7452		.byte	99
000000c3 565f454e41424c45 7453		.strz	"V_ENABLE_USE_DUMMY_STATEMENT "
000000cb 5f5553455f44554d
000000d3 4d595f5354415445
000000db 4d454e542000    
000000e1 01               7454		.byte	1
000000e2 8901             7455		.byte	137,1
000000e4 5647454e5f454e41 7456		.strz	"VGEN_ENABLE_CANFBL "
000000ec 424c455f43414e46
000000f4 424c2000        
000000f8 01               7457		.byte	1
000000f9 be01             7458		.byte	190,1
000000fb 565f434f4d505f47 7459		.strz	"V_COMP_GHS_MPC5700 "
00000103 48535f4d50433537
0000010b 30302000        
0000010f 01               7460		.byte	1
00000110 bf01             7461		.byte	191,1
00000112 565f4350555f4d50 7462		.strz	"V_CPU_MPC5700 "
0000011a 43353730302000  
00000121 01               7463		.byte	1
00000122 ca01             7464		.byte	202,1
00000124 4d414749435f4e55 7465		.strz	"MAGIC_NUMBER 312540478"
0000012c 4d42455220333132
00000134 35343034373800  
0000013b 04               7466		.byte	4
0000013c 03               7467		.byte	3
0000013d 5c               7468		.byte	92
0000013e 05               7469		.byte	5
0000013f 03               7470		.byte	3
00000140 31               7471		.byte	49
00000141 06               7472		.byte	6
00000142 03               7473		.byte	3
00000143 34               7474		.byte	52
00000144 07               7475		.byte	7
00000145 01               7476		.byte	1
00000146 8704             7477		.byte	135,4
00000148 565f4445465f5355 7478		.strz	"V_DEF_SUPPORTED_PLATFORM "
00000150 50504f525445445f
00000158 504c4154464f524d
00000160 2000            
00000162 01               7479		.byte	1
00000163 e104             7480		.byte	225,4
00000165 7675696e74782076 7481		.strz	"vuintx vuint32"
0000016d 75696e74333200  
00000174 01               7482		.byte	1
00000175 da06             7483		.byte	218,6
00000177 4c4f43414c5f494e 7484		.strz	"LOCAL_INLINE static inline"
0000017f 4c494e4520737461
00000187 74696320696e6c69
0000018f 6e6500          
00000192 01               7485		.byte	1
00000193 e406             7486		.byte	228,6
00000195 565f4d454d524f4d 7487		.strz	"V_MEMROM0 "
0000019d 302000          
000001a0 01               7488		.byte	1
000001a1 ec06             7489		.byte	236,6
000001a3 565f4d454d524f4d 7490		.strz	"V_MEMROM1 "
000001ab 312000          
000001ae 01               7491		.byte	1

                                   Fri Apr 10 08:32:21 2020           Page 135
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
000001af f006             7492		.byte	240,6
000001b1 565f4d454d524f4d 7493		.strz	"V_MEMROM1_FAR "
000001b9 315f4641522000  
000001c0 01               7494		.byte	1
000001c1 8007             7495		.byte	128,7
000001c3 565f4d454d524f4d 7496		.strz	"V_MEMROM2 const"
000001cb 3220636f6e737400
000001d3 01               7497		.byte	1
000001d4 8307             7498		.byte	131,7
000001d6 4d454d4f52595f52 7499		.strz	"MEMORY_ROM V_MEMROM2"
000001de 4f4d20565f4d454d
000001e6 524f4d3200      
000001eb 01               7500		.byte	1
000001ec 8a07             7501		.byte	138,7
000001ee 565f4d454d524f4d 7502		.strz	"V_MEMROM2_FAR const"
000001f6 325f46415220636f
000001fe 6e737400        
00000202 01               7503		.byte	1
00000203 9307             7504		.byte	147,7
00000205 565f4d454d524f4d 7505		.strz	"V_MEMROM3 "
0000020d 332000          
00000210 01               7506		.byte	1
00000211 9907             7507		.byte	153,7
00000213 565f4d454d52414d 7508		.strz	"V_MEMRAM0 "
0000021b 302000          
0000021e 01               7509		.byte	1
0000021f 9d07             7510		.byte	157,7
00000221 565f4d454d52414d 7511		.strz	"V_MEMRAM1_NEAR "
00000229 315f4e4541522000
00000231 01               7512		.byte	1
00000232 a107             7513		.byte	161,7
00000234 565f4d454d52414d 7514		.strz	"V_MEMRAM1 "
0000023c 312000          
0000023f 01               7515		.byte	1
00000240 ab07             7516		.byte	171,7
00000242 565f4d454d52414d 7517		.strz	"V_MEMRAM2_NEAR "
0000024a 325f4e4541522000
00000252 01               7518		.byte	1
00000253 ae07             7519		.byte	174,7
00000255 4d454d4f52595f4e 7520		.strz	"MEMORY_NEAR V_MEMRAM2_NEAR"
0000025d 45415220565f4d45
00000265 4d52414d325f4e45
0000026d 415200          
00000270 01               7521		.byte	1
00000271 b507             7522		.byte	181,7
00000273 565f4d454d52414d 7523		.strz	"V_MEMRAM2 "
0000027b 322000          
0000027e 01               7524		.byte	1
0000027f bf07             7525		.byte	191,7
00000281 565f4d454d52414d 7526		.strz	"V_MEMRAM2_FAR "
00000289 325f4641522000  
00000290 01               7527		.byte	1
00000291 c207             7528		.byte	194,7
00000293 4d454d4f52595f46 7529		.strz	"MEMORY_FAR V_MEMRAM2_FAR"
0000029b 415220565f4d454d
000002a3 52414d325f464152
000002ab 00              
000002ac 01               7530		.byte	1
000002ad cc07             7531		.byte	204,7
000002af 565f4d454d52414d 7532		.strz	"V_MEMRAM3 "
000002b7 332000          
000002ba 01               7533		.byte	1
000002bb fe07             7534		.byte	254,7
000002bd 4e554c4c20565f4e 7535		.strz	"NULL V_NULL"
000002c5 554c4c00        
000002c9 04               7536		.byte	4
000002ca 01               7537		.byte	1
000002cb 45               7538		.byte	69
000002cc 6b47454e79566572 7539		.strz	"kGENyVersionNumberOfBytes 10"
000002d4 73696f6e4e756d62
000002dc 65724f6642797465
000002e4 7320313000      
000002e9 04               7540		.byte	4
000002ea 04               7541		.byte	4
000002eb 03               7542		.byte	3
000002ec 60               7543		.byte	96
000002ed 08               7544		.byte	8
000002ee 03               7545		.byte	3
000002ef 44               7546		.byte	68
000002f0 09               7547		.byte	9

                                   Fri Apr 10 08:32:21 2020           Page 136
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
000002f1 03               7548		.byte	3
000002f2 55               7549		.byte	85
000002f3 0a               7550		.byte	10
000002f4 01               7551		.byte	1
000002f5 45               7552		.byte	69
000002f6 5f5f5345435f494e 7553		.strz	"__SEC_INC_H__ "
000002fe 435f485f5f2000  
00000305 03               7554		.byte	3
00000306 56               7555		.byte	86
00000307 0b               7556		.byte	11
00000308 01               7557		.byte	1
00000309 2f               7558		.byte	47
0000030a 5345435f434c4153 7559		.strz	"SEC_CLASS_DDD 0"
00000312 535f444444203000
0000031a 01               7560		.byte	1
0000031b 30               7561		.byte	48
0000031c 5345435f434c4153 7562		.strz	"SEC_CLASS_C 1"
00000324 535f43203100    
0000032a 01               7563		.byte	1
0000032b 31               7564		.byte	49
0000032c 5345435f434c4153 7565		.strz	"SEC_CLASS_CCC 2"
00000334 535f434343203200
0000033c 01               7566		.byte	1
0000033d 32               7567		.byte	50
0000033e 5345435f434c4153 7568		.strz	"SEC_CLASS_VENDOR 3"
00000346 535f56454e444f52
0000034e 203300          
00000351 01               7569		.byte	1
00000352 39               7570		.byte	57
00000353 5345435f52495045 7571		.strz	"SEC_RIPEMD160 0"
0000035b 4d44313630203000
00000363 01               7572		.byte	1
00000364 3a               7573		.byte	58
00000365 5345435f53484131 7574		.strz	"SEC_SHA1 1"
0000036d 203100          
00000370 01               7575		.byte	1
00000371 3b               7576		.byte	59
00000372 5345435f53484132 7577		.strz	"SEC_SHA256 2"
0000037a 3536203200      
0000037f 01               7578		.byte	1
00000380 44               7579		.byte	68
00000381 5345435f4b45595f 7580		.strz	"SEC_KEY_TIMEOUT 0"
00000389 54494d454f555420
00000391 3000            
00000393 01               7581		.byte	1
00000394 48               7582		.byte	72
00000395 5345435f48415348 7583		.strz	"SEC_HASH_ALGORITHM SEC_SHA1"
0000039d 5f414c474f524954
000003a5 484d205345435f53
000003ad 48413100        
000003b1 01               7584		.byte	1
000003b2 49               7585		.byte	73
000003b3 5345435f53454355 7586		.strz	"SEC_SECURITY_CLASS SEC_CLASS_DDD"
000003bb 524954595f434c41
000003c3 5353205345435f43
000003cb 4c4153535f444444
000003d3 00              
000003d4 01               7587		.byte	1
000003d5 4f               7588		.byte	79
000003d6 5345435f454e4142 7589		.strz	"SEC_ENABLE_VERIFICATION_KEY_INTERNAL "
000003de 4c455f5645524946
000003e6 49434154494f4e5f
000003ee 4b45595f494e5445
000003f6 524e414c2000    
000003fc 01               7590		.byte	1
000003fd 50               7591		.byte	80
000003fe 5345435f53495a45 7592		.strz	"SEC_SIZE_CHECKSUM_VENDOR 0"
00000406 5f434845434b5355
0000040e 4d5f56454e444f52
00000416 203000          
00000419 01               7593		.byte	1
0000041a 52               7594		.byte	82
0000041b 5345435f56455249 7595		.strz	"SEC_VERIFY_BYTES 64"
00000423 46595f4259544553
0000042b 20363400        
0000042f 01               7596		.byte	1
00000430 53               7597		.byte	83
00000431 5345435f454e4142 7598		.strz	"SEC_ENABLE_VERIFICATION_ADDRESS_LENGTH "
00000439 4c455f5645524946
00000441 49434154494f4e5f
00000449 414444524553535f
00000451 4c454e4754482000
00000459 01               7599		.byte	1
0000045a 54               7600		.byte	84
0000045b 5345435f454e4142 7601		.strz	"SEC_ENABLE_CRC_TOTAL "
00000463 4c455f4352435f54
0000046b 4f54414c2000    
00000471 01               7602		.byte	1
00000472 57               7603		.byte	87

                                   Fri Apr 10 08:32:21 2020           Page 137
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
00000473 5345435f5645525f 7604		.strz	"SEC_VER_SIG_OFFSET 0"
0000047b 5349475f4f464653
00000483 4554203000      
00000488 01               7605		.byte	1
00000489 58               7606		.byte	88
0000048a 5345435f5645525f 7607		.strz	"SEC_VER_CRC_OFFSET 0"
00000492 4352435f4f464653
0000049a 4554203000      
0000049f 04               7608		.byte	4
000004a0 03               7609		.byte	3
000004a1 59               7610		.byte	89
000004a2 0c               7611		.byte	12
000004a3 03               7612		.byte	3
000004a4 4d               7613		.byte	77
000004a5 0a               7614		.byte	10
000004a6 04               7615		.byte	4
000004a7 01               7616		.byte	1
000004a8 59               7617		.byte	89
000004a9 5345435f57415443 7618		.strz	"SEC_WATCHDOG_CYCLE_COUNT (0x20u)"
000004b1 48444f475f435943
000004b9 4c455f434f554e54
000004c1 2028307832307529
000004c9 00              
000004ca 01               7619		.byte	1
000004cb 60               7620		.byte	96
000004cc 5345435f454e4142 7621		.strz	"SEC_ENABLE_WORKSPACE_INTERNAL "
000004d4 4c455f574f524b53
000004dc 504143455f494e54
000004e4 45524e414c2000  
000004eb 01               7622		.byte	1
000004ec 66               7623		.byte	102
000004ed 5345435f43484543 7624		.strz	"SEC_CHECKSUM_TYPE_CRC 0u"
000004f5 4b53554d5f545950
000004fd 455f435243203075
00000505 00              
00000506 01               7625		.byte	1
00000507 6b               7626		.byte	107
00000508 5345435f43484543 7627		.strz	"SEC_CHECKSUM_TYPE_HASH (SEC_CHECKSUM_TYPE_CRC + 1u)"
00000510 4b53554d5f545950
00000518 455f484153482028
00000520 5345435f43484543
00000528 4b53554d5f545950
00000530 455f435243202b20
00000538 31752900        
0000053c 01               7628		.byte	1
0000053d 71               7629		.byte	113
0000053e 5345435f4d41435f 7630		.strz	"SEC_MAC_TYPE_HMAC 0u"
00000546 545950455f484d41
0000054e 4320307500      
00000553 01               7631		.byte	1
00000554 8601             7632		.byte	134,1
00000556 5345435f43524333 7633		.strz	"SEC_CRC32 0u"
0000055e 3220307500      
00000563 01               7634		.byte	1
00000564 8e01             7635		.byte	142,1
00000566 5345435f43524331 7636		.strz	"SEC_CRC16 (SEC_CRC32 + 1u)"
0000056e 3620285345435f43
00000576 52433332202b2031
0000057e 752900          
00000581 01               7637		.byte	1
00000582 ca01             7638		.byte	202,1
00000584 5345435f5349474e 7639		.strz	"SEC_SIGNATURE_SCHEME_RSA_V15 0u"
0000058c 41545552455f5343
00000594 48454d455f525341
0000059c 5f56313520307500
000005a4 01               7640		.byte	1
000005a5 e301             7641		.byte	227,1
000005a7 5345435f43414c4c 7642		.strz	"SEC_CALL_TYPE "
000005af 5f545950452000  
000005b6 04               7643		.byte	4
000005b7 03               7644		.byte	3
000005b8 5c               7645		.byte	92
000005b9 0d               7646		.byte	13
000005ba 03               7647		.byte	3
000005bb 2f               7648		.byte	47
000005bc 0e               7649		.byte	14
000005bd 04               7650		.byte	4
000005be 04               7651		.byte	4
000005bf 04               7652		.byte	4
000005c0 03               7653		.byte	3
000005c1 58               7654		.byte	88
000005c2 0f               7655		.byte	15
000005c3 01               7656		.byte	1
000005c4 6d               7657		.byte	109
000005c5 5345435f4352435f 7658		.strz	"SEC_CRC_TYPE SEC_CRC32"
000005cd 5459504520534543
000005d5 5f435243333200  
000005dc 01               7659		.byte	1

                                   Fri Apr 10 08:32:21 2020           Page 138
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
000005dd 78               7660		.byte	120
000005de 5345435f454e4142 7661		.strz	"SEC_ENABLE_CRC_TYPE_CRC32 "
000005e6 4c455f4352435f54
000005ee 5950455f43524333
000005f6 322000          
000005f9 04               7662		.byte	4
000005fa 03               7663		.byte	3
000005fb 59               7664		.byte	89
000005fc 10               7665		.byte	16
000005fd 03               7666		.byte	3
000005fe 55               7667		.byte	85
000005ff 11               7668		.byte	17
00000600 01               7669		.byte	1
00000601 3e               7670		.byte	62
00000602 5345435f53454544 7671		.strz	"SEC_SEED_LENGTH 8u"
0000060a 5f4c454e47544820
00000612 387500          
00000615 01               7672		.byte	1
00000616 40               7673		.byte	64
00000617 5345435f4b45595f 7674		.strz	"SEC_KEY_LENGTH 4u"
0000061f 4c454e4754482034
00000627 7500            
00000629 04               7675		.byte	4
0000062a 01               7676		.byte	1
0000062b 7e               7677		.byte	126
0000062c 5345435f50524e47 7678		.strz	"SEC_PRNG_LCG 0u"
00000634 5f4c434720307500
0000063c 01               7679		.byte	1
0000063d 8301             7680		.byte	131,1
0000063f 5345435f50524e47 7681		.strz	"SEC_PRNG_FIPS186 (SEC_PRNG_LCG + 1u)"
00000647 5f46495053313836
0000064f 20285345435f5052
00000657 4e475f4c4347202b
0000065f 2031752900      
00000664 01               7682		.byte	1
00000665 8901             7683		.byte	137,1
00000667 5345435f50524e47 7684		.strz	"SEC_PRNG SEC_PRNG_LCG"
0000066f 205345435f50524e
00000677 475f4c434700    
0000067d 04               7685		.byte	4
0000067e 03               7686		.byte	3
0000067f 5a               7687		.byte	90
00000680 12               7688		.byte	18
00000681 01               7689		.byte	1
00000682 ba01             7690		.byte	186,1
00000684 5345435f53454355 7691		.strz	"SEC_SECURITY_CLASS_VERIFY SEC_SECURITY_CLASS"
0000068c 524954595f434c41
00000694 53535f5645524946
0000069c 59205345435f5345
000006a4 4355524954595f43
000006ac 4c41535300      
000006b1 01               7692		.byte	1
000006b2 c001             7693		.byte	192,1
000006b4 5345435f53454355 7694		.strz	"SEC_SECURITY_CLASS_VERIFICATION SEC_SECURITY_CLASS"
000006bc 524954595f434c41
000006c4 53535f5645524946
000006cc 49434154494f4e20
000006d4 5345435f53454355
000006dc 524954595f434c41
000006e4 535300          
000006e7 01               7695		.byte	1
000006e8 c701             7696		.byte	199,1
000006ea 5345435f43484543 7697		.strz	"SEC_CHECKSUM_TYPE SEC_CHECKSUM_TYPE_CRC"
000006f2 4b53554d5f545950
000006fa 45205345435f4348
00000702 45434b53554d5f54
0000070a 5950455f43524300
00000712 01               7698		.byte	1
00000713 cd01             7699		.byte	205,1
00000715 5345435f4d41435f 7700		.strz	"SEC_MAC_TYPE SEC_MAC_TYPE_HMAC"
0000071d 5459504520534543
00000725 5f4d41435f545950
0000072d 455f484d414300  
00000734 01               7701		.byte	1
00000735 d301             7702		.byte	211,1
00000737 5345435f5349474e 7703		.strz	"SEC_SIGNATURE_SCHEME SEC_SIGNATURE_SCHEME_RSA_V15"
0000073f 41545552455f5343
00000747 48454d4520534543
0000074f 5f5349474e415455
00000757 52455f534348454d
0000075f 455f5253415f5631
00000767 3500            
00000769 01               7704		.byte	1
0000076a fd01             7705		.byte	253,1
0000076c 5345435f454e4142 7706		.strz	"SEC_ENABLE_SECURITY_CLASS_DDD "
00000774 4c455f5345435552
0000077c 4954595f434c4153
00000784 535f4444442000  
0000078b 01               7707		.byte	1
0000078c 8f02             7708		.byte	143,2
0000078e 5345435f454e4142 7709		.strz	"SEC_ENABLE_CHECKSUM_TYPE_CRC "
00000796 4c455f434845434b
0000079e 53554d5f54595045
000007a6 5f4352432000    
000007ac 01               7710		.byte	1
000007ad db02             7711		.byte	219,2
000007af 5345435f454e4142 7712		.strz	"SEC_ENABLE_VERIFY_CHECKSUM_CRC "
000007b7 4c455f5645524946
000007bf 595f434845434b53
000007c7 554d5f4352432000
000007cf 04               7713		.byte	4
000007d0 04               7714		.byte	4
000007d1 04               7715		.byte	4

                                   Fri Apr 10 08:32:21 2020           Page 139
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
000007d2 03               7716		.byte	3
000007d3 62               7717		.byte	98
000007d4 13               7718		.byte	19
000007d5 03               7719		.byte	3
000007d6 48               7720		.byte	72
000007d7 14               7721		.byte	20
000007d8 01               7722		.byte	1
000007d9 33               7723		.byte	51
000007da 46424c5f5553455f 7724		.strz	"FBL_USE_OWN_MEMCPY "
000007e2 4f574e5f4d454d43
000007ea 50592000        
000007ee 01               7725		.byte	1
000007ef 34               7726		.byte	52
000007f0 46424c5f57415443 7727		.strz	"FBL_WATCHDOG_ON "
000007f8 48444f475f4f4e20
00000800 00              
00000801 01               7728		.byte	1
00000802 35               7729		.byte	53
00000803 46424c5f57415443 7730		.strz	"FBL_WATCHDOG_TIME (1 / FBL_REPEAT_CALL_CYCLE)"
0000080b 48444f475f54494d
00000813 45202831202f2046
0000081b 424c5f5245504541
00000823 545f43414c4c5f43
0000082b 59434c452900    
00000831 01               7731		.byte	1
00000832 36               7732		.byte	54
00000833 46424c5f48454144 7733		.strz	"FBL_HEADER_ADDRESS 0xFC0400u"
0000083b 45525f4144445245
00000843 5353203078464330
0000084b 3430307500      
00000850 01               7734		.byte	1
00000851 37               7735		.byte	55
00000852 46424c5f454e4142 7736		.strz	"FBL_ENABLE_APPL_TASK "
0000085a 4c455f4150504c5f
00000862 5441534b2000    
00000868 01               7737		.byte	1
00000869 39               7738		.byte	57
0000086a 46424c5f44494147 7739		.strz	"FBL_DIAG_BUFFER_LENGTH 4095"
00000872 5f4255464645525f
0000087a 4c454e4754482034
00000882 30393500        
00000886 01               7740		.byte	1
00000887 3b               7741		.byte	59
00000888 46424c5f44494147 7742		.strz	"FBL_DIAG_TIME_P3MAX (2000 / FBL_REPEAT_CALL_CYCLE)"
00000890 5f54494d455f5033
00000898 4d41582028323030
000008a0 30202f2046424c5f
000008a8 5245504541545f43
000008b0 414c4c5f4359434c
000008b8 452900          
000008bb 01               7743		.byte	1
000008bc 3c               7744		.byte	60
000008bd 46424c5f454e4142 7745		.strz	"FBL_ENABLE_SLEEPMODE "
000008c5 4c455f534c454550
000008cd 4d4f44452000    
000008d3 01               7746		.byte	1
000008d4 3e               7747		.byte	62
000008d5 46424c5f454e4142 7748		.strz	"FBL_ENABLE_GAP_FILL "
000008dd 4c455f4741505f46
000008e5 494c4c2000      
000008ea 01               7749		.byte	1
000008eb 40               7750		.byte	64
000008ec 46424c5f454e4142 7751		.strz	"FBL_ENABLE_MULTIPLE_MEM_DEVICES "
000008f4 4c455f4d554c5449
000008fc 504c455f4d454d5f
00000904 4445564943455320
0000090c 00              
0000090d 01               7752		.byte	1
0000090e 41               7753		.byte	65
0000090f 46424c5f4d454d44 7754		.strz	"FBL_MEMDRV_SEGMENT_SIZE 8"
00000917 52565f5345474d45
0000091f 4e545f53495a4520
00000927 3800            
00000929 01               7755		.byte	1
0000092a 42               7756		.byte	66
0000092b 46424c5f454e4142 7757		.strz	"FBL_ENABLE_PRESENCE_PATTERN "
00000933 4c455f5052455345
0000093b 4e43455f50415454
00000943 45524e2000      
00000948 01               7758		.byte	1
00000949 43               7759		.byte	67
0000094a 46424c5f454e4142 7760		.strz	"FBL_ENABLE_FBL_START "
00000952 4c455f46424c5f53
0000095a 544152542000    
00000960 01               7761		.byte	1
00000961 45               7762		.byte	69
00000962 46424c5f44495341 7763		.strz	"FBL_DISABLE_USERSUBFUNCTION "
0000096a 424c455f55534552
00000972 53554246554e4354
0000097a 494f4e2000      
0000097f 01               7764		.byte	1
00000980 47               7765		.byte	71
00000981 46424c5f4d544142 7766		.strz	"FBL_MTAB_NO_OF_BLOCKS 2"
00000989 5f4e4f5f4f465f42
00000991 4c4f434b53203200
00000999 01               7767		.byte	1
0000099a 49               7768		.byte	73
0000099b 46424c5f44495341 7769		.strz	"FBL_DISABLE_DATA_PROCESSING "
000009a3 424c455f44415441
000009ab 5f50524f43455353
000009b3 494e472000      
000009b8 01               7770		.byte	1
000009b9 51               7771		.byte	81

                                   Fri Apr 10 08:32:21 2020           Page 140
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
000009ba 46424c5f454e4142 7772		.strz	"FBL_ENABLE_SYSTEM_CHECK "
000009c2 4c455f5359535445
000009ca 4d5f434845434b20
000009d2 00              
000009d3 01               7773		.byte	1
000009d4 52               7774		.byte	82
000009d5 46424c5f454e4142 7775		.strz	"FBL_ENABLE_DEBUG_STATUS "
000009dd 4c455f4445425547
000009e5 5f53544154555320
000009ed 00              
000009ee 01               7776		.byte	1
000009ef 53               7777		.byte	83
000009f0 46424c5f454e4142 7778		.strz	"FBL_ENABLE_ASSERTION "
000009f8 4c455f4153534552
00000a00 54494f4e2000    
00000a06 01               7779		.byte	1
00000a07 56               7780		.byte	86
00000a08 46424c5f4d454d5f 7781		.strz	"FBL_MEM_ENABLE_VERIFY_OUTPUT "
00000a10 454e41424c455f56
00000a18 45524946595f4f55
00000a20 545055542000    
00000a26 01               7782		.byte	1
00000a27 5f               7783		.byte	95
00000a28 464c4153485f5349 7784		.strz	"FLASH_SIZE 1536"
00000a30 5a45203135333600
00000a38 01               7785		.byte	1
00000a39 72               7786		.byte	114
00000a3a 53574d5f44415441 7787		.strz	"SWM_DATA_MAX_NOAR 8"
00000a42 5f4d41585f4e4f41
00000a4a 52203800        
00000a4e 01               7788		.byte	1
00000a4f 74               7789		.byte	116
00000a50 46424c5f454e4142 7790		.strz	"FBL_ENABLE_SEC_ACCESS_DELAY "
00000a58 4c455f5345435f41
00000a60 43434553535f4445
00000a68 4c41592000      
00000a6d 01               7791		.byte	1
00000a6e 8201             7792		.byte	130,1
00000a70 46424c5f454e4142 7793		.strz	"FBL_ENABLE_CAN_CONFIRMATION "
00000a78 4c455f43414e5f43
00000a80 4f4e4649524d4154
00000a88 494f4e2000      
00000a8d 01               7794		.byte	1
00000a8e 8301             7795		.byte	131,1
00000a90 46424c5f454e4142 7796		.strz	"FBL_ENABLE_SECMOD_VECTOR "
00000a98 4c455f5345434d4f
00000aa0 445f564543544f52
00000aa8 2000            
00000aaa 01               7797		.byte	1
00000aab 8501             7798		.byte	133,1
00000aad 46424c5f454e4142 7799		.strz	"FBL_ENABLE_WRAPPER_NV "
00000ab5 4c455f5752415050
00000abd 45525f4e562000  
00000ac4 01               7800		.byte	1
00000ac5 8d01             7801		.byte	141,1
00000ac7 46424c5f454e4142 7802		.strz	"FBL_ENABLE_APPL_STATE_TASK "
00000acf 4c455f4150504c5f
00000ad7 53544154455f5441
00000adf 534b2000        
00000ae3 01               7803		.byte	1
00000ae4 9001             7804		.byte	144,1
00000ae6 46424c5f454e4142 7805		.strz	"FBL_ENABLE_APPL_TIMER_TASK "
00000aee 4c455f4150504c5f
00000af6 54494d45525f5441
00000afe 534b2000        
00000b02 01               7806		.byte	1
00000b03 9901             7807		.byte	153,1
00000b05 46424c5f5346525f 7808		.strz	"FBL_SFR_SIU_TYPE 2u"
00000b0d 5349555f54595045
00000b15 20327500        
00000b19 01               7809		.byte	1
00000b1a 9f01             7810		.byte	159,1
00000b1c 46424c5f4d455f42 7811		.strz	"FBL_ME_BASE 0xFFFB8000ul"
00000b24 4153452030784646
00000b2c 464238303030756c
00000b34 00              
00000b35 01               7812		.byte	1
00000b36 a001             7813		.byte	160,1
00000b38 46424c5f434d555f 7814		.strz	"FBL_CMU_BASE 0xC3FE0100ul"
00000b40 4241534520307843
00000b48 3346453031303075
00000b50 6c00            
00000b52 01               7815		.byte	1
00000b53 a101             7816		.byte	161,1
00000b55 46424c5f434d555f 7817		.strz	"FBL_CMU_PLL_BASE 0xFFFB0200ul"
00000b5d 504c4c5f42415345
00000b65 2030784646464230
00000b6d 323030756c00    
00000b73 01               7818		.byte	1
00000b74 a201             7819		.byte	162,1
00000b76 46424c5f43474d5f 7820		.strz	"FBL_CGM_BASE 0xFFFB0000ul"
00000b7e 4241534520307846
00000b86 4646423030303075
00000b8e 6c00            
00000b90 01               7821		.byte	1
00000b91 a301             7822		.byte	163,1
00000b93 46424c5f52474d5f 7823		.strz	"FBL_RGM_BASE 0xFFFA8000ul"
00000b9b 4241534520307846
00000ba3 4646413830303075
00000bab 6c00            
00000bad 01               7824		.byte	1
00000bae a901             7825		.byte	169,1
00000bb0 46424c5f5346525f 7826		.strz	"FBL_SFR_BASE_ADRESSES_PRECONFIGURED "
00000bb8 424153455f414452
00000bc0 45535345535f5052
00000bc8 45434f4e46494755
00000bd0 5245442000      
00000bd5 04               7827		.byte	4

                                   Fri Apr 10 08:32:21 2020           Page 141
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
00000bd6 03               7828		.byte	3
00000bd7 5a               7829		.byte	90
00000bd8 15               7830		.byte	21
00000bd9 01               7831		.byte	1
00000bda 4b               7832		.byte	75
00000bdb 6b46626c53797341 7833		.strz	"kFblSysAssertParameterOutOfRange 0x50u"
00000be3 7373657274506172
00000beb 616d657465724f75
00000bf3 744f6652616e6765
00000bfb 20307835307500  
00000c02 03               7834		.byte	3
00000c03 54               7835		.byte	84
00000c04 16               7836		.byte	22
00000c05 04               7837		.byte	4
00000c06 01               7838		.byte	1
00000c07 5a               7839		.byte	90
00000c08 46424c5f4445434c 7840		.strz	"FBL_DECL_ASSERT_EXTENDED_INFO(n) n"
00000c10 5f4153534552545f
00000c18 455854454e444544
00000c20 5f494e464f286e29
00000c28 206e00          
00000c2b 01               7841		.byte	1
00000c2c 5b               7842		.byte	91
00000c2d 46424c5f55534544 7843		.strz	"FBL_USED_ASSERT_EXTENDED_INFO(n) (n)"
00000c35 5f4153534552545f
00000c3d 455854454e444544
00000c45 5f494e464f286e29
00000c4d 20286e2900      
00000c52 01               7844		.byte	1
00000c53 62               7845		.byte	98
00000c54 6173736572744662 7846		.strz	"assertFblInternal(p,e) if (!(p)) ApplFblFatalError(FBL_USED_ASSERT_EXTENDED_INFO(e))"
00000c5c 6c496e7465726e61
00000c64 6c28702c65292069
00000c6c 6620282128702929
00000c74 204170706c46626c
00000c7c 466174616c457272
00000c84 6f722846424c5f55
00000c8c 5345445f41535345
00000c94 52545f455854454e
00000c9c 4445445f494e464f
00000ca4 2865292900      
00000ca9 04               7847		.byte	4
00000caa 01               7848		.byte	1
00000cab 6c               7849		.byte	108
00000cac 46424c5f4445465f 7850		.strz	"FBL_DEF_ENABLE_NON_KB_MAIN "
00000cb4 454e41424c455f4e
00000cbc 4f4e5f4b425f4d41
00000cc4 494e2000        
00000cc8 01               7851		.byte	1
00000cc9 9501             7852		.byte	149,1
00000ccb 46424c5f52455045 7853		.strz	"FBL_REPEAT_CALL_CYCLE 1"
00000cd3 41545f43414c4c5f
00000cdb 4359434c45203100
00000ce3 01               7854		.byte	1
00000ce4 9a01             7855		.byte	154,1
00000ce6 46424c5f43414c4c 7856		.strz	"FBL_CALL_TYPE "
00000cee 5f545950452000  
00000cf5 01               7857		.byte	1
00000cf6 9e01             7858		.byte	158,1
00000cf8 565f43414c4c4241 7859		.strz	"V_CALLBACK_NEAR "
00000d00 434b5f4e45415220
00000d08 00              
00000d09 01               7860		.byte	1
00000d0a a101             7861		.byte	161,1
00000d0c 565f4150495f4e45 7862		.strz	"V_API_NEAR "
00000d14 41522000        
00000d18 01               7863		.byte	1
00000d19 d701             7864		.byte	215,1
00000d1b 46626c496e766572 7865		.strz	"FblInvert8Bit(x) ((vuint8) ((x) ^ ((vuint8)0xFFu)))"
00000d23 7438426974287829
00000d2b 2028287675696e74
00000d33 3829202828782920
00000d3b 5e2028287675696e
00000d43 7438293078464675
00000d4b 29292900        
00000d4f 01               7866		.byte	1
00000d50 8502             7867		.byte	133,2
00000d52 46424c5f53544154 7868		.strz	"FBL_STATE_BITS 32"
00000d5a 455f424954532033
00000d62 3200            
00000d64 01               7869		.byte	1
00000d65 9302             7870		.byte	147,2
00000d67 46424c5f53544154 7871		.strz	"FBL_STATE_INDEX(bit) ((bit) / FBL_STATE_BITS)"
00000d6f 455f494e44455828
00000d77 6269742920282862
00000d7f 697429202f204642
00000d87 4c5f53544154455f
00000d8f 424954532900    
00000d95 01               7872		.byte	1
00000d96 b002             7873		.byte	176,2
00000d98 4d454d53495a455f 7874		.strz	"MEMSIZE_OK "
00000da0 4f4b2000        
00000da4 04               7875		.byte	4
00000da5 03               7876		.byte	3
00000da6 68               7877		.byte	104
00000da7 17               7878		.byte	23
00000da8 01               7879		.byte	1
00000da9 3b               7880		.byte	59
00000daa 6b4e724f6656616c 7881		.strz	"kNrOfValidationBytes 1"
00000db2 69646174696f6e42
00000dba 79746573203100  
00000dc1 01               7882		.byte	1
00000dc2 5c               7883		.byte	92

                                   Fri Apr 10 08:32:21 2020           Page 142
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
00000dc3 46424c5f4c42545f 7884		.strz	"FBL_LBT_START_SEC_CONST "
00000dcb 53544152545f5345
00000dd3 435f434f4e535420
00000ddb 00              
00000ddc 03               7885		.byte	3
00000ddd 5d               7886		.byte	93
00000dde 18               7887		.byte	24
00000ddf 01               7888		.byte	1
00000de0 2b               7889		.byte	43
00000de1 46424c5f4d454d4d 7890		.strz	"FBL_MEMMAP_ERROR "
00000de9 41505f4552524f52
00000df1 2000            
00000df3 04               7891		.byte	4
00000df4 01               7892		.byte	1
00000df5 5f               7893		.byte	95
00000df6 46424c5f4c42545f 7894		.strz	"FBL_LBT_STOP_SEC_CONST "
00000dfe 53544f505f534543
00000e06 5f434f4e53542000
00000e0e 03               7895		.byte	3
00000e0f 60               7896		.byte	96
00000e10 18               7897		.byte	24
00000e11 01               7898		.byte	1
00000e12 2b               7899		.byte	43
00000e13 46424c5f4d454d4d 7900		.strz	"FBL_MEMMAP_ERROR "
00000e1b 41505f4552524f52
00000e23 2000            
00000e25 04               7901		.byte	4
00000e26 04               7902		.byte	4
00000e27 03               7903		.byte	3
00000e28 6e               7904		.byte	110
00000e29 19               7905		.byte	25
00000e2a 01               7906		.byte	1
00000e2b 54               7907		.byte	84
00000e2c 464c4153485f5345 7908		.strz	"FLASH_SEGMENT_SIZE 8u"
00000e34 474d454e545f5349
00000e3c 5a4520387500    
00000e42 04               7909		.byte	4
00000e43 03               7910		.byte	3
00000e44 6f               7911		.byte	111
00000e45 1a               7912		.byte	26
00000e46 04               7913		.byte	4
00000e47 03               7914		.byte	3
00000e48 75               7915		.byte	117
00000e49 1b               7916		.byte	27
00000e4a 01               7917		.byte	1
00000e4b 7c               7918		.byte	124
00000e4c 494e495457415443 7919		.strz	"INITWATCHDOG_START_SEC_CODE_EXPORT "
00000e54 48444f475f535441
00000e5c 52545f5345435f43
00000e64 4f44455f4558504f
00000e6c 52542000        
00000e70 03               7920		.byte	3
00000e71 7d               7921		.byte	125
00000e72 18               7922		.byte	24
00000e73 01               7923		.byte	1
00000e74 2b               7924		.byte	43
00000e75 46424c5f4d454d4d 7925		.strz	"FBL_MEMMAP_ERROR "
00000e7d 41505f4552524f52
00000e85 2000            
00000e87 04               7926		.byte	4
00000e88 01               7927		.byte	1
00000e89 8001             7928		.byte	128,1
00000e8b 494e495457415443 7929		.strz	"INITWATCHDOG_STOP_SEC_CODE_EXPORT "
00000e93 48444f475f53544f
00000e9b 505f5345435f434f
00000ea3 44455f4558504f52
00000eab 542000          
00000eae 03               7930		.byte	3
00000eaf 8101             7931		.byte	129,1
00000eb1 18               7932		.byte	24
00000eb2 01               7933		.byte	1
00000eb3 2b               7934		.byte	43
00000eb4 46424c5f4d454d4d 7935		.strz	"FBL_MEMMAP_ERROR "
00000ebc 41505f4552524f52
00000ec4 2000            
00000ec6 04               7936		.byte	4
00000ec7 01               7937		.byte	1
00000ec8 8301             7938		.byte	131,1
00000eca 4c4f4f4b464f5257 7939		.strz	"LOOKFORWATCHDOG_START_SEC_CODE_EXPORT "
00000ed2 41544348444f475f
00000eda 53544152545f5345
00000ee2 435f434f44455f45
00000eea 58504f52542000  

                                   Fri Apr 10 08:32:21 2020           Page 143
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
00000ef1 03               7940		.byte	3
00000ef2 8401             7941		.byte	132,1
00000ef4 18               7942		.byte	24
00000ef5 01               7943		.byte	1
00000ef6 2b               7944		.byte	43
00000ef7 46424c5f4d454d4d 7945		.strz	"FBL_MEMMAP_ERROR "
00000eff 41505f4552524f52
00000f07 2000            
00000f09 04               7946		.byte	4
00000f0a 01               7947		.byte	1
00000f0b 8801             7948		.byte	136,1
00000f0d 4c4f4f4b464f5257 7949		.strz	"LOOKFORWATCHDOG_STOP_SEC_CODE_EXPORT "
00000f15 41544348444f475f
00000f1d 53544f505f534543
00000f25 5f434f44455f4558
00000f2d 504f52542000    
00000f33 03               7950		.byte	3
00000f34 8901             7951		.byte	137,1
00000f36 18               7952		.byte	24
00000f37 01               7953		.byte	1
00000f38 2b               7954		.byte	43
00000f39 46424c5f4d454d4d 7955		.strz	"FBL_MEMMAP_ERROR "
00000f41 41505f4552524f52
00000f49 2000            
00000f4b 04               7956		.byte	4
00000f4c 01               7957		.byte	1
00000f4d 8b01             7958		.byte	139,1
00000f4f 4c4f4f4b464f5257 7959		.strz	"LOOKFORWATCHDOG_START_SEC_CODE_EXPORT "
00000f57 41544348444f475f
00000f5f 53544152545f5345
00000f67 435f434f44455f45
00000f6f 58504f52542000  
00000f76 03               7960		.byte	3
00000f77 8c01             7961		.byte	140,1
00000f79 18               7962		.byte	24
00000f7a 01               7963		.byte	1
00000f7b 2b               7964		.byte	43
00000f7c 46424c5f4d454d4d 7965		.strz	"FBL_MEMMAP_ERROR "
00000f84 41505f4552524f52
00000f8c 2000            
00000f8e 04               7966		.byte	4
00000f8f 01               7967		.byte	1
00000f90 9001             7968		.byte	144,1
00000f92 4c4f4f4b464f5257 7969		.strz	"LOOKFORWATCHDOG_STOP_SEC_CODE_EXPORT "
00000f9a 41544348444f475f
00000fa2 53544f505f534543
00000faa 5f434f44455f4558
00000fb2 504f52542000    
00000fb8 03               7970		.byte	3
00000fb9 9101             7971		.byte	145,1
00000fbb 18               7972		.byte	24
00000fbc 01               7973		.byte	1
00000fbd 2b               7974		.byte	43
00000fbe 46424c5f4d454d4d 7975		.strz	"FBL_MEMMAP_ERROR "
00000fc6 41505f4552524f52
00000fce 2000            
00000fd0 04               7976		.byte	4
00000fd1 04               7977		.byte	4
00000fd2 03               7978		.byte	3
00000fd3 76               7979		.byte	118
00000fd4 1c               7980		.byte	28
00000fd5 04               7981		.byte	4
00000fd6 03               7982		.byte	3
00000fd7 7e               7983		.byte	126
00000fd8 1d               7984		.byte	29
00000fd9 01               7985		.byte	1
00000fda ca01             7986		.byte	202,1
00000fdc 46424c5f4d41585f 7987		.strz	"FBL_MAX_SEGMENT_SIZE_MIO FBL_MEMDRV_SEGMENT_SIZE"
00000fe4 5345474d454e545f
00000fec 53495a455f4d494f
00000ff4 2046424c5f4d454d
00000ffc 4452565f5345474d
00001004 454e545f53495a45
0000100c 00              
0000100d 01               7988		.byte	1
0000100e e601             7989		.byte	230,1
00001010 46424c5f4d41585f 7990		.strz	"FBL_MAX_SEGMENT_SIZE FBL_MAX_SEGMENT_SIZE_MIO"
00001018 5345474d454e545f
00001020 53495a452046424c
00001028 5f4d41585f534547
00001030 4d454e545f53495a
00001038 455f4d494f00    
0000103e 01               7991		.byte	1
0000103f 8702             7992		.byte	135,2
00001041 46424c5f4d494f5f 7993		.strz	"FBL_MIO_DEFAULT_FCT_PTR "
00001049 44454641554c545f
00001051 4643545f50545220
00001059 00              
0000105a 01               7994		.byte	1
0000105b a002             7995		.byte	160,2

                                   Fri Apr 10 08:32:21 2020           Page 144
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
0000105d 46424c4d494f5f53 7996		.strz	"FBLMIO_START_SEC_CODE "
00001065 544152545f534543
0000106d 5f434f44452000  
00001074 03               7997		.byte	3
00001075 a102             7998		.byte	161,2
00001077 18               7999		.byte	24
00001078 01               8000		.byte	1
00001079 2b               8001		.byte	43
0000107a 46424c5f4d454d4d 8002		.strz	"FBL_MEMMAP_ERROR "
00001082 41505f4552524f52
0000108a 2000            
0000108c 04               8003		.byte	4
0000108d 01               8004		.byte	1
0000108e b102             8005		.byte	177,2
00001090 46424c4d494f5f53 8006		.strz	"FBLMIO_STOP_SEC_CODE "
00001098 544f505f5345435f
000010a0 434f44452000    
000010a6 03               8007		.byte	3
000010a7 b202             8008		.byte	178,2
000010a9 18               8009		.byte	24
000010aa 01               8010		.byte	1
000010ab 2b               8011		.byte	43
000010ac 46424c5f4d454d4d 8012		.strz	"FBL_MEMMAP_ERROR "
000010b4 41505f4552524f52
000010bc 2000            
000010be 04               8013		.byte	4
000010bf 04               8014		.byte	4
000010c0 03               8015		.byte	3
000010c1 7f               8016		.byte	127
000010c2 1e               8017		.byte	30
000010c3 01               8018		.byte	1
000010c4 66               8019		.byte	102
000010c5 46424c464c494f5f 8020		.strz	"FBLFLIO_FLASHCODE_START_SEC_VAR "
000010cd 464c415348434f44
000010d5 455f53544152545f
000010dd 5345435f56415220
000010e5 00              
000010e6 03               8021		.byte	3
000010e7 67               8022		.byte	103
000010e8 18               8023		.byte	24
000010e9 01               8024		.byte	1
000010ea 2b               8025		.byte	43
000010eb 46424c5f4d454d4d 8026		.strz	"FBL_MEMMAP_ERROR "
000010f3 41505f4552524f52
000010fb 2000            
000010fd 04               8027		.byte	4
000010fe 01               8028		.byte	1
000010ff 69               8029		.byte	105
00001100 46424c464c494f5f 8030		.strz	"FBLFLIO_FLASHCODE_STOP_SEC_VAR "
00001108 464c415348434f44
00001110 455f53544f505f53
00001118 45435f5641522000
00001120 03               8031		.byte	3
00001121 6a               8032		.byte	106
00001122 18               8033		.byte	24
00001123 01               8034		.byte	1
00001124 2b               8035		.byte	43
00001125 46424c5f4d454d4d 8036		.strz	"FBL_MEMMAP_ERROR "
0000112d 41505f4552524f52
00001135 2000            
00001137 04               8037		.byte	4
00001138 04               8038		.byte	4
00001139 03               8039		.byte	3
0000113a 8001             8040		.byte	128,1
0000113c 1f               8041		.byte	31
0000113d 04               8042		.byte	4
0000113e 03               8043		.byte	3
0000113f 8101             8044		.byte	129,1
00001141 20               8045		.byte	32
00001142 03               8046		.byte	3
00001143 2a               8047		.byte	42
00001144 02               8048		.byte	2
00001145 04               8049		.byte	4
00001146 03               8050		.byte	3
00001147 2b               8051		.byte	43

                                   Fri Apr 10 08:32:21 2020           Page 145
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
00001148 21               8052		.byte	33
00001149 01               8053		.byte	1
0000114a 49               8054		.byte	73
0000114b 45455044554d4d59 8055		.strz	"EEPDUMMY_FULL_START_SEC_CODE "
00001153 5f46554c4c5f5354
0000115b 4152545f5345435f
00001163 434f44452000    
00001169 03               8056		.byte	3
0000116a 4a               8057		.byte	74
0000116b 18               8058		.byte	24
0000116c 01               8059		.byte	1
0000116d 2b               8060		.byte	43
0000116e 46424c5f4d454d4d 8061		.strz	"FBL_MEMMAP_ERROR "
00001176 41505f4552524f52
0000117e 2000            
00001180 04               8062		.byte	4
00001181 01               8063		.byte	1
00001182 54               8064		.byte	84
00001183 45455044554d4d59 8065		.strz	"EEPDUMMY_FULL_STOP_SEC_CODE "
0000118b 5f46554c4c5f5354
00001193 4f505f5345435f43
0000119b 4f44452000      
000011a0 03               8066		.byte	3
000011a1 55               8067		.byte	85
000011a2 18               8068		.byte	24
000011a3 01               8069		.byte	1
000011a4 2b               8070		.byte	43
000011a5 46424c5f4d454d4d 8071		.strz	"FBL_MEMMAP_ERROR "
000011ad 41505f4552524f52
000011b5 2000            
000011b7 04               8072		.byte	4
000011b8 04               8073		.byte	4
000011b9 04               8074		.byte	4
000011ba 03               8075		.byte	3
000011bb 8401             8076		.byte	132,1
000011bd 22               8077		.byte	34
000011be 01               8078		.byte	1
000011bf 55               8079		.byte	85
000011c0 46424c5f4150504c 8080		.strz	"FBL_APPLVECT_START_SEC_CONST "
000011c8 564543545f535441
000011d0 52545f5345435f43
000011d8 4f4e53542000    
000011de 03               8081		.byte	3
000011df 56               8082		.byte	86
000011e0 18               8083		.byte	24
000011e1 01               8084		.byte	1
000011e2 2b               8085		.byte	43
000011e3 46424c5f4d454d4d 8086		.strz	"FBL_MEMMAP_ERROR "
000011eb 41505f4552524f52
000011f3 2000            
000011f5 04               8087		.byte	4
000011f6 01               8088		.byte	1
000011f7 5a               8089		.byte	90
000011f8 46424c5f4150504c 8090		.strz	"FBL_APPLVECT_STOP_SEC_CONST "
00001200 564543545f53544f
00001208 505f5345435f434f
00001210 4e53542000      
00001215 03               8091		.byte	3
00001216 5b               8092		.byte	91
00001217 18               8093		.byte	24
00001218 01               8094		.byte	1
00001219 2b               8095		.byte	43
0000121a 46424c5f4d454d4d 8096		.strz	"FBL_MEMMAP_ERROR "
00001222 41505f4552524f52
0000122a 2000            
0000122c 04               8097		.byte	4
0000122d 04               8098		.byte	4
0000122e 03               8099		.byte	3
0000122f 8801             8100		.byte	136,1
00001231 23               8101		.byte	35
00001232 03               8102		.byte	3
00001233 3c               8103		.byte	60
00001234 24               8104		.byte	36
00001235 01               8105		.byte	1
00001236 49               8106		.byte	73
00001237 46424c5f43414e5f 8107		.strz	"FBL_CAN_NUMBER_OF_RX_ID 2u"
0000123f 4e554d4245525f4f
00001247 465f52585f494420
0000124f 327500          

                                   Fri Apr 10 08:32:21 2020           Page 146
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
00001252 01               8108		.byte	1
00001253 4a               8109		.byte	74
00001254 46424c5f43414e5f 8110		.strz	"FBL_CAN_NUMBER_OF_RANGES 0u"
0000125c 4e554d4245525f4f
00001264 465f52414e474553
0000126c 20307500        
00001270 01               8111		.byte	1
00001271 4b               8112		.byte	75
00001272 46424c5f4e554d42 8113		.strz	"FBL_NUMBER_OF_RX_ID (FBL_CAN_NUMBER_OF_RX_ID + FBL_CAN_NUMBER_OF_RANGES)"
0000127a 45525f4f465f5258
00001282 5f4944202846424c
0000128a 5f43414e5f4e554d
00001292 4245525f4f465f52
0000129a 585f4944202b2046
000012a2 424c5f43414e5f4e
000012aa 554d4245525f4f46
000012b2 5f52414e47455329
000012ba 00              
000012bb 01               8114		.byte	1
000012bc 54               8115		.byte	84
000012bd 46424c5f4e554d42 8116		.strz	"FBL_NUMBER_OF_TX_ID 1u"
000012c5 45525f4f465f5458
000012cd 5f494420317500  
000012d4 01               8117		.byte	1
000012d5 57               8118		.byte	87
000012d6 46424c5f43575f43 8119		.strz	"FBL_CW_CFG_START_SEC_CONST "
000012de 46475f5354415254
000012e6 5f5345435f434f4e
000012ee 53542000        
000012f2 03               8120		.byte	3
000012f3 58               8121		.byte	88
000012f4 18               8122		.byte	24
000012f5 01               8123		.byte	1
000012f6 2b               8124		.byte	43
000012f7 46424c5f4d454d4d 8125		.strz	"FBL_MEMMAP_ERROR "
000012ff 41505f4552524f52
00001307 2000            
00001309 04               8126		.byte	4
0000130a 01               8127		.byte	1
0000130b 67               8128		.byte	103
0000130c 46424c5f43575f43 8129		.strz	"FBL_CW_CFG_STOP_SEC_CONST "
00001314 46475f53544f505f
0000131c 5345435f434f4e53
00001324 542000          
00001327 03               8130		.byte	3
00001328 68               8131		.byte	104
00001329 18               8132		.byte	24
0000132a 01               8133		.byte	1
0000132b 2b               8134		.byte	43
0000132c 46424c5f4d454d4d 8135		.strz	"FBL_MEMMAP_ERROR "
00001334 41505f4552524f52
0000133c 2000            
0000133e 04               8136		.byte	4
0000133f 01               8137		.byte	1
00001340 6d               8138		.byte	109
00001341 46424c5f43575f45 8139		.strz	"FBL_CW_ENABLE_PHYSICAL_REQUEST_HANDLER "
00001349 4e41424c455f5048
00001351 59534943414c5f52
00001359 4551554553545f48
00001361 414e444c45522000
00001369 01               8140		.byte	1
0000136a 6e               8141		.byte	110
0000136b 46424c5f43575f45 8142		.strz	"FBL_CW_ENABLE_FUNCTIONAL_REQUEST_HANDLER "
00001373 4e41424c455f4655
0000137b 4e4354494f4e414c
00001383 5f52455155455354
0000138b 5f48414e444c4552
00001393 2000            
00001395 04               8143		.byte	4
00001396 03               8144		.byte	3
00001397 4d               8145		.byte	77
00001398 25               8146		.byte	37
00001399 03               8147		.byte	3
0000139a 54               8148		.byte	84
0000139b 26               8149		.byte	38
0000139c 04               8150		.byte	4
0000139d 01               8151		.byte	1
0000139e 5f               8152		.byte	95
0000139f 46424c4452564341 8153		.strz	"FBLDRVCAN_REFERENCE_IMPLEMENTATION 0x0101u"
000013a7 4e5f524546455245
000013af 4e43455f494d504c
000013b7 454d454e54415449
000013bf 4f4e203078303130
000013c7 317500          
000013ca 01               8154		.byte	1
000013cb 74               8155		.byte	116
000013cc 4d554c5449504c45 8156		.strz	"MULTIPLE_RECEIVE_BUFFER "
000013d4 5f52454345495645
000013dc 5f42554646455220
000013e4 00              
000013e5 01               8157		.byte	1
000013e6 8d01             8158		.byte	141,1
000013e8 6b43616e4e6f436f 8159		.strz	"kCanNoCopyData 0x00"
000013f0 7079446174612030
000013f8 78303000        
000013fc 01               8160		.byte	1
000013fd 9902             8161		.byte	153,2
000013ff 6b46626c43616e4d 8162		.strz	"kFblCanMaxMB 16"
00001407 61784d4220313600
0000140f 01               8163		.byte	1

                                   Fri Apr 10 08:32:21 2020           Page 147
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
00001410 cd03             8164		.byte	205,3
00001412 46424c48575f5241 8165		.strz	"FBLHW_RAMCODE_START_SEC_CODE "
0000141a 4d434f44455f5354
00001422 4152545f5345435f
0000142a 434f44452000    
00001430 03               8166		.byte	3
00001431 ce03             8167		.byte	206,3
00001433 18               8168		.byte	24
00001434 01               8169		.byte	1
00001435 2b               8170		.byte	43
00001436 46424c5f4d454d4d 8171		.strz	"FBL_MEMMAP_ERROR "
0000143e 41505f4552524f52
00001446 2000            
00001448 04               8172		.byte	4
00001449 01               8173		.byte	1
0000144a d003             8174		.byte	208,3
0000144c 46424c48575f5241 8175		.strz	"FBLHW_RAMCODE_STOP_SEC_CODE "
00001454 4d434f44455f5354
0000145c 4f505f5345435f43
00001464 4f44452000      
00001469 03               8176		.byte	3
0000146a d103             8177		.byte	209,3
0000146c 18               8178		.byte	24
0000146d 01               8179		.byte	1
0000146e 2b               8180		.byte	43
0000146f 46424c5f4d454d4d 8181		.strz	"FBL_MEMMAP_ERROR "
00001477 41505f4552524f52
0000147f 2000            
00001481 04               8182		.byte	4
00001482 01               8183		.byte	1
00001483 d703             8184		.byte	215,3
00001485 46424c48575f5354 8185		.strz	"FBLHW_START_SEC_CODE "
0000148d 4152545f5345435f
00001495 434f44452000    
0000149b 03               8186		.byte	3
0000149c d803             8187		.byte	216,3
0000149e 18               8188		.byte	24
0000149f 01               8189		.byte	1
000014a0 2b               8190		.byte	43
000014a1 46424c5f4d454d4d 8191		.strz	"FBL_MEMMAP_ERROR "
000014a9 41505f4552524f52
000014b1 2000            
000014b3 04               8192		.byte	4
000014b4 01               8193		.byte	1
000014b5 da03             8194		.byte	218,3
000014b7 46424c48575f5354 8195		.strz	"FBLHW_STOP_SEC_CODE "
000014bf 4f505f5345435f43
000014c7 4f44452000      
000014cc 03               8196		.byte	3
000014cd db03             8197		.byte	219,3
000014cf 18               8198		.byte	24
000014d0 01               8199		.byte	1
000014d1 2b               8200		.byte	43
000014d2 46424c5f4d454d4d 8201		.strz	"FBL_MEMMAP_ERROR "
000014da 41505f4552524f52
000014e2 2000            
000014e4 04               8202		.byte	4
000014e5 01               8203		.byte	1
000014e6 df03             8204		.byte	223,3
000014e8 46424c48575f4642 8205		.strz	"FBLHW_FBLCANTRANSMITTED_START_SEC_CODE "
000014f0 4c43414e5452414e
000014f8 534d49545445445f
00001500 53544152545f5345
00001508 435f434f44452000
00001510 03               8206		.byte	3
00001511 e003             8207		.byte	224,3
00001513 18               8208		.byte	24
00001514 01               8209		.byte	1
00001515 2b               8210		.byte	43
00001516 46424c5f4d454d4d 8211		.strz	"FBL_MEMMAP_ERROR "
0000151e 41505f4552524f52
00001526 2000            
00001528 04               8212		.byte	4
00001529 01               8213		.byte	1
0000152a e203             8214		.byte	226,3
0000152c 46424c48575f4642 8215		.strz	"FBLHW_FBLCANTRANSMITTED_STOP_SEC_CODE "
00001534 4c43414e5452414e
0000153c 534d49545445445f
00001544 53544f505f534543
0000154c 5f434f44452000  
00001553 03               8216		.byte	3
00001554 e303             8217		.byte	227,3
00001556 18               8218		.byte	24
00001557 01               8219		.byte	1

                                   Fri Apr 10 08:32:21 2020           Page 148
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
00001558 2b               8220		.byte	43
00001559 46424c5f4d454d4d 8221		.strz	"FBL_MEMMAP_ERROR "
00001561 41505f4552524f52
00001569 2000            
0000156b 04               8222		.byte	4
0000156c 01               8223		.byte	1
0000156d e503             8224		.byte	229,3
0000156f 46424c48575f5354 8225		.strz	"FBLHW_START_SEC_CODE "
00001577 4152545f5345435f
0000157f 434f44452000    
00001585 03               8226		.byte	3
00001586 e603             8227		.byte	230,3
00001588 18               8228		.byte	24
00001589 01               8229		.byte	1
0000158a 2b               8230		.byte	43
0000158b 46424c5f4d454d4d 8231		.strz	"FBL_MEMMAP_ERROR "
00001593 41505f4552524f52
0000159b 2000            
0000159d 04               8232		.byte	4
0000159e 01               8233		.byte	1
0000159f e803             8234		.byte	232,3
000015a1 46424c48575f5354 8235		.strz	"FBLHW_STOP_SEC_CODE "
000015a9 4f505f5345435f43
000015b1 4f44452000      
000015b6 03               8236		.byte	3
000015b7 e903             8237		.byte	233,3
000015b9 18               8238		.byte	24
000015ba 01               8239		.byte	1
000015bb 2b               8240		.byte	43
000015bc 46424c5f4d454d4d 8241		.strz	"FBL_MEMMAP_ERROR "
000015c4 41505f4552524f52
000015cc 2000            
000015ce 04               8242		.byte	4
000015cf 01               8243		.byte	1
000015d0 f903             8244		.byte	249,3
000015d2 4d454d4350595f53 8245		.strz	"MEMCPY_START_SEC_CODE "
000015da 544152545f534543
000015e2 5f434f44452000  
000015e9 03               8246		.byte	3
000015ea fa03             8247		.byte	250,3
000015ec 18               8248		.byte	24
000015ed 01               8249		.byte	1
000015ee 2b               8250		.byte	43
000015ef 46424c5f4d454d4d 8251		.strz	"FBL_MEMMAP_ERROR "
000015f7 41505f4552524f52
000015ff 2000            
00001601 04               8252		.byte	4
00001602 01               8253		.byte	1
00001603 fd03             8254		.byte	253,3
00001605 4d454d4350595f53 8255		.strz	"MEMCPY_STOP_SEC_CODE "
0000160d 544f505f5345435f
00001615 434f44452000    
0000161b 03               8256		.byte	3
0000161c fe03             8257		.byte	254,3
0000161e 18               8258		.byte	24
0000161f 01               8259		.byte	1
00001620 2b               8260		.byte	43
00001621 46424c5f4d454d4d 8261		.strz	"FBL_MEMMAP_ERROR "
00001629 41505f4552524f52
00001631 2000            
00001633 04               8262		.byte	4
00001634 04               8263		.byte	4
00001635 03               8264		.byte	3
00001636 4e               8265		.byte	78
00001637 27               8266		.byte	39
00001638 01               8267		.byte	1
00001639 31               8268		.byte	49
0000163a 46424c5f54505f45 8269		.strz	"FBL_TP_ENABLE_TX_FRAME_PADDING "
00001642 4e41424c455f5458
0000164a 5f4652414d455f50
00001652 414444494e472000
0000165a 01               8270		.byte	1
0000165b 32               8271		.byte	50
0000165c 6b46626c54704669 8272		.strz	"kFblTpFillPattern 170"
00001664 6c6c506174746572
0000166c 6e2031373000    
00001672 01               8273		.byte	1
00001673 37               8274		.byte	55
00001674 46424c5f54505f45 8275		.strz	"FBL_TP_ENABLE_FLOW_STATE "
0000167c 4e41424c455f464c
00001684 4f575f5354415445
0000168c 2000            

                                   Fri Apr 10 08:32:21 2020           Page 149
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
0000168e 01               8276		.byte	1
0000168f 3b               8277		.byte	59
00001690 46424c5f54505f45 8278		.strz	"FBL_TP_ENABLE_ISO15765_2_2 "
00001698 4e41424c455f4953
000016a0 4f31353736355f32
000016a8 5f322000        
000016ac 01               8279		.byte	1
000016ad 3d               8280		.byte	61
000016ae 46424c5f54505f45 8281		.strz	"FBL_TP_ENABLE_FIX_RX_DLC_CHECK "
000016b6 4e41424c455f4649
000016be 585f52585f444c43
000016c6 5f434845434b2000
000016ce 01               8282		.byte	1
000016cf 3f               8283		.byte	63
000016d0 46424c5f54505f45 8284		.strz	"FBL_TP_ENABLE_INTERNAL_MEMCPY "
000016d8 4e41424c455f494e
000016e0 5445524e414c5f4d
000016e8 454d4350592000  
000016ef 01               8285		.byte	1
000016f0 40               8286		.byte	64
000016f1 547043616c6c4379 8287		.strz	"TpCallCycle 1"
000016f9 636c65203100    
000016ff 01               8288		.byte	1
00001700 41               8289		.byte	65
00001701 46424c5f54505f45 8290		.strz	"FBL_TP_ENABLE_CONFIRMATION_INTERRUPT "
00001709 4e41424c455f434f
00001711 4e4649524d415449
00001719 4f4e5f494e544552
00001721 525550542000    
00001727 01               8291		.byte	1
00001728 43               8292		.byte	67
00001729 6b46626c5470436f 8293		.strz	"kFblTpConfInterruptTimeout 70"
00001731 6e66496e74657272
00001739 75707454696d656f
00001741 757420373000    
00001747 01               8294		.byte	1
00001748 44               8295		.byte	68
00001749 6b46626c54705354 8296		.strz	"kFblTpSTMin 0"
00001751 4d696e203000    
00001757 01               8297		.byte	1
00001758 45               8298		.byte	69
00001759 6b46626c54705469 8299		.strz	"kFblTpTimeoutFC 150"
00001761 6d656f7574464320
00001769 31353000        
0000176d 01               8300		.byte	1
0000176e 46               8301		.byte	70
0000176f 6b46626c54705469 8302		.strz	"kFblTpTimeoutCF 150"
00001777 6d656f7574434620
0000177f 31353000        
00001783 01               8303		.byte	1
00001784 47               8304		.byte	71
00001785 6b46626c54705472 8305		.strz	"kFblTpTransmitCF 10"
0000178d 616e736d69744346
00001795 20313000        
00001799 01               8306		.byte	1
0000179a 48               8307		.byte	72
0000179b 6b46626c5470426c 8308		.strz	"kFblTpBlocksize 8"
000017a3 6f636b73697a6520
000017ab 3800            
000017ad 01               8309		.byte	1
000017ae 49               8310		.byte	73
000017af 6b46626c54704275 8311		.strz	"kFblTpBufferSize 4095"
000017b7 6666657253697a65
000017bf 203430393500    
000017c5 01               8312		.byte	1
000017c6 4a               8313		.byte	74
000017c7 5f5f4170706c4662 8314		.strz	"__ApplFblTpErrorIndication(i) FblCwTpErrorIndication(i)"
000017cf 6c54704572726f72
000017d7 496e646963617469
000017df 6f6e286929204662
000017e7 6c43775470457272
000017ef 6f72496e64696361
000017f7 74696f6e28692900
000017ff 01               8315		.byte	1
00001800 4b               8316		.byte	75
00001801 5f5f4170706c4662 8317		.strz	"__ApplFblTpDataInd(i) FblCwTpDataInd(i)"
00001809 6c54704461746149
00001811 6e64286929204662
00001819 6c43775470446174
00001821 61496e6428692900
00001829 01               8318		.byte	1
0000182a 4d               8319		.byte	77
0000182b 5f5f4170706c4662 8320		.strz	"__ApplFblTpConfirm(i) FblCwTpConfirmation(i)"
00001833 6c5470436f6e6669
0000183b 726d286929204662
00001843 6c43775470436f6e
0000184b 6669726d6174696f
00001853 6e28692900      
00001858 01               8321		.byte	1
00001859 50               8322		.byte	80
0000185a 5f5f4170706c4662 8323		.strz	"__ApplFblTpNotifyTx(i) "
00001862 6c54704e6f746966
0000186a 7954782869292000
00001872 01               8324		.byte	1
00001873 51               8325		.byte	81
00001874 5f5f4170706c4662 8326		.strz	"__ApplFblTpCanMessageTransmitted() "
0000187c 6c547043616e4d65
00001884 7373616765547261
0000188c 6e736d6974746564
00001894 28292000        
00001898 01               8327		.byte	1
00001899 52               8328		.byte	82
0000189a 5f5f4170706c4662 8329		.strz	"__ApplFblTpCanMessageReceived() "
000018a2 6c547043616e4d65
000018aa 7373616765526563
000018b2 6569766564282920
000018ba 00              
000018bb 01               8330		.byte	1
000018bc 53               8331		.byte	83

                                   Fri Apr 10 08:32:21 2020           Page 150
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
000018bd 5f5f4170706c4662 8332		.strz	"__ApplFblTpRxSF() FblCwTpRxStartIndication()"
000018c5 6c54705278534628
000018cd 292046626c437754
000018d5 7052785374617274
000018dd 496e646963617469
000018e5 6f6e282900      
000018ea 01               8333		.byte	1
000018eb 54               8334		.byte	84
000018ec 5f5f4170706c4662 8335		.strz	"__ApplFblTpRxFF() FblCwTpRxStartIndication()"
000018f4 6c54705278464628
000018fc 292046626c437754
00001904 7052785374617274
0000190c 496e646963617469
00001914 6f6e282900      
00001919 01               8336		.byte	1
0000191a 55               8337		.byte	85
0000191b 5f5f4170706c4662 8338		.strz	"__ApplFblTpRxCF() "
00001923 6c54705278434628
0000192b 292000          
0000192e 04               8339		.byte	4
0000192f 03               8340		.byte	3
00001930 4f               8341		.byte	79
00001931 28               8342		.byte	40
00001932 01               8343		.byte	1
00001933 6b               8344		.byte	107
00001934 46424c54505f4953 8345		.strz	"FBLTP_ISO_VERSION 0x0321u"
0000193c 4f5f56455253494f
00001944 4e20307830333231
0000194c 7500            
0000194e 01               8346		.byte	1
0000194f 6c               8347		.byte	108
00001950 46424c54505f4953 8348		.strz	"FBLTP_ISO_RELEASE_VERSION 0x00u"
00001958 4f5f52454c454153
00001960 455f56455253494f
00001968 4e20307830307500
00001970 01               8349		.byte	1
00001971 75               8350		.byte	117
00001972 6b54705375636365 8351		.strz	"kTpSuccess 0u"
0000197a 737320307500    
00001980 01               8352		.byte	1
00001981 76               8353		.byte	118
00001982 6b54704661696c65 8354		.strz	"kTpFailed 1u"
0000198a 6420317500      
0000198f 01               8355		.byte	1
00001990 77               8356		.byte	119
00001991 6b547043616e5478 8357		.strz	"kTpCanTxFailed 2u"
00001999 4661696c65642032
000019a1 7500            
000019a3 01               8358		.byte	1
000019a4 78               8359		.byte	120
000019a5 6b54704275737920 8360		.strz	"kTpBusy 3u"
000019ad 337500          
000019b0 01               8361		.byte	1
000019b1 7a               8362		.byte	122
000019b2 6b547054696d656f 8363		.strz	"kTpTimeoutFC 5u"
000019ba 7574464320357500
000019c2 01               8364		.byte	1
000019c3 7b               8365		.byte	123
000019c4 6b54704572725478 8366		.strz	"kTpErrTxFCNotExpected 9u"
000019cc 46434e6f74457870
000019d4 6563746564203975
000019dc 00              
000019dd 01               8367		.byte	1
000019de 7d               8368		.byte	125
000019df 6b54704572725478 8369		.strz	"kTpErrTxOverrun 15u"
000019e7 4f76657272756e20
000019ef 31357500        
000019f3 01               8370		.byte	1
000019f4 7e               8371		.byte	126
000019f5 6b54704572725478 8372		.strz	"kTpErrTxFSInvalid 16u"
000019fd 4653496e76616c69
00001a05 642031367500    
00001a0b 01               8373		.byte	1
00001a0c 8101             8374		.byte	129,1
00001a0e 6b54704572725278 8375		.strz	"kTpErrRxWrongSN 6u"
00001a16 57726f6e67534e20
00001a1e 367500          
00001a21 01               8376		.byte	1
00001a22 8201             8377		.byte	130,1
00001a24 6b54704572725278 8378		.strz	"kTpErrRxTimeout 7u"
00001a2c 54696d656f757420
00001a34 377500          
00001a37 01               8379		.byte	1
00001a38 8301             8380		.byte	131,1
00001a3a 6b54704572725278 8381		.strz	"kTpErrRxNotIdle 8u"
00001a42 4e6f7449646c6520
00001a4a 387500          
00001a4d 01               8382		.byte	1
00001a4e 8401             8383		.byte	132,1
00001a50 6b54704572725278 8384		.strz	"kTpErrRxCFNotExpected 10u"
00001a58 43464e6f74457870
00001a60 6563746564203130
00001a68 7500            
00001a6a 01               8385		.byte	1
00001a6b 8501             8386		.byte	133,1
00001a6d 6b54704572725278 8387		.strz	"kTpErrRxSFDL 11u"
00001a75 5346444c20313175
00001a7d 00              

                                   Fri Apr 10 08:32:21 2020           Page 151
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
00001a7e 01               8388		.byte	1
00001a7f b101             8389		.byte	177,1
00001a81 46424c54505f5241 8390		.strz	"FBLTP_RAMCODE_START_SEC_CODE "
00001a89 4d434f44455f5354
00001a91 4152545f5345435f
00001a99 434f44452000    
00001a9f 03               8391		.byte	3
00001aa0 b201             8392		.byte	178,1
00001aa2 18               8393		.byte	24
00001aa3 01               8394		.byte	1
00001aa4 2b               8395		.byte	43
00001aa5 46424c5f4d454d4d 8396		.strz	"FBL_MEMMAP_ERROR "
00001aad 41505f4552524f52
00001ab5 2000            
00001ab7 04               8397		.byte	4
00001ab8 01               8398		.byte	1
00001ab9 c301             8399		.byte	195,1
00001abb 46424c54505f5241 8400		.strz	"FBLTP_RAMCODE_STOP_SEC_CODE "
00001ac3 4d434f44455f5354
00001acb 4f505f5345435f43
00001ad3 4f44452000      
00001ad8 03               8401		.byte	3
00001ad9 c401             8402		.byte	196,1
00001adb 18               8403		.byte	24
00001adc 01               8404		.byte	1
00001add 2b               8405		.byte	43
00001ade 46424c5f4d454d4d 8406		.strz	"FBL_MEMMAP_ERROR "
00001ae6 41505f4552524f52
00001aee 2000            
00001af0 04               8407		.byte	4
00001af1 01               8408		.byte	1
00001af2 cf01             8409		.byte	207,1
00001af4 46626c5470536574 8410		.strz	"FblTpSetRxBS(newBS) { bRxBlockSize = (newBS); bRxBSCounter = (newBS); }"
00001afc 52784253286e6577
00001b04 425329207b206252
00001b0c 78426c6f636b5369
00001b14 7a65203d20286e65
00001b1c 774253293b206252
00001b24 784253436f756e74
00001b2c 6572203d20286e65
00001b34 774253293b207d00
00001b3c 01               8411		.byte	1
00001b3d d301             8412		.byte	211,1
00001b3f 46626c5470476574 8413		.strz	"FblTpGetRxBS() (bRxBlockSize)"
00001b47 5278425328292028
00001b4f 625278426c6f636b
00001b57 53697a652900    
00001b5d 01               8414		.byte	1
00001b5e d601             8415		.byte	214,1
00001b60 46626c5470536574 8416		.strz	"FblTpSetRxSTmin(newSTmin) (bRxSTmin = (newSTmin))"
00001b68 527853546d696e28
00001b70 6e657753546d696e
00001b78 2920286252785354
00001b80 6d696e203d20286e
00001b88 657753546d696e29
00001b90 2900            
00001b92 01               8417		.byte	1
00001b93 d701             8418		.byte	215,1
00001b95 46626c5470476574 8419		.strz	"FblTpGetRxSTmin() (bRxSTmin)"
00001b9d 527853546d696e28
00001ba5 2920286252785354
00001bad 6d696e2900      
00001bb2 04               8420		.byte	4
00001bb3 01               8421		.byte	1
00001bb4 a101             8422		.byte	161,1
00001bb6 6b46626c43616e54 8423		.strz	"kFblCanTxOk 0u"
00001bbe 784f6b20307500  
00001bc5 01               8424		.byte	1
00001bc6 b301             8425		.byte	179,1
00001bc8 747043616e547844 8426		.strz	"tpCanTxData fblCanTxObj[fblCwDiagTransmitObject].msgObject.DataFld"
00001bd0 6174612066626c43
00001bd8 616e54784f626a5b
00001be0 66626c4377446961
00001be8 675472616e736d69
00001bf0 744f626a6563745d
00001bf8 2e6d73674f626a65
00001c00 63742e4461746146
00001c08 6c6400          
00001c0b 01               8427		.byte	1
00001c0c b401             8428		.byte	180,1
00001c0e 6b46626c54705478 8429		.strz	"kFblTpTxHandle (&(fblCanTxObj[fblCwDiagTransmitObject]))"
00001c16 48616e646c652028
00001c1e 262866626c43616e
00001c26 54784f626a5b6662
00001c2e 6c43774469616754
00001c36 72616e736d69744f
00001c3e 626a6563745d2929
00001c46 00              
00001c47 01               8430		.byte	1
00001c48 c601             8431		.byte	198,1
00001c4a 46424c5f43575f46 8432		.strz	"FBL_CW_FULL_START_SEC_CODE "
00001c52 554c4c5f53544152
00001c5a 545f5345435f434f
00001c62 44452000        
00001c66 03               8433		.byte	3
00001c67 c701             8434		.byte	199,1
00001c69 18               8435		.byte	24
00001c6a 01               8436		.byte	1
00001c6b 2b               8437		.byte	43
00001c6c 46424c5f4d454d4d 8438		.strz	"FBL_MEMMAP_ERROR "
00001c74 41505f4552524f52
00001c7c 2000            
00001c7e 04               8439		.byte	4
00001c7f 01               8440		.byte	1
00001c80 cd01             8441		.byte	205,1
00001c82 46424c5f43575f54 8442		.strz	"FBL_CW_TASK_START_SEC_CODE "
00001c8a 41534b5f53544152
00001c92 545f5345435f434f
00001c9a 44452000        
00001c9e 03               8443		.byte	3

                                   Fri Apr 10 08:32:21 2020           Page 152
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
00001c9f ce01             8444		.byte	206,1
00001ca1 18               8445		.byte	24
00001ca2 01               8446		.byte	1
00001ca3 2b               8447		.byte	43
00001ca4 46424c5f4d454d4d 8448		.strz	"FBL_MEMMAP_ERROR "
00001cac 41505f4552524f52
00001cb4 2000            
00001cb6 04               8449		.byte	4
00001cb7 01               8450		.byte	1
00001cb8 d101             8451		.byte	209,1
00001cba 46424c5f43575f54 8452		.strz	"FBL_CW_TASK_STOP_SEC_CODE "
00001cc2 41534b5f53544f50
00001cca 5f5345435f434f44
00001cd2 452000          
00001cd5 03               8453		.byte	3
00001cd6 d201             8454		.byte	210,1
00001cd8 18               8455		.byte	24
00001cd9 01               8456		.byte	1
00001cda 2b               8457		.byte	43
00001cdb 46424c5f4d454d4d 8458		.strz	"FBL_MEMMAP_ERROR "
00001ce3 41505f4552524f52
00001ceb 2000            
00001ced 04               8459		.byte	4
00001cee 01               8460		.byte	1
00001cef fa01             8461		.byte	250,1
00001cf1 46424c5f43575f46 8462		.strz	"FBL_CW_FULL_STOP_SEC_CODE "
00001cf9 554c4c5f53544f50
00001d01 5f5345435f434f44
00001d09 452000          
00001d0c 03               8463		.byte	3
00001d0d fb01             8464		.byte	251,1
00001d0f 18               8465		.byte	24
00001d10 01               8466		.byte	1
00001d11 2b               8467		.byte	43
00001d12 46424c5f4d454d4d 8468		.strz	"FBL_MEMMAP_ERROR "
00001d1a 41505f4552524f52
00001d22 2000            
00001d24 04               8469		.byte	4
00001d25 04               8470		.byte	4
00001d26 03               8471		.byte	3
00001d27 8e01             8472		.byte	142,1
00001d29 29               8473		.byte	41
00001d2a 03               8474		.byte	3
00001d2b 39               8475		.byte	57
00001d2c 2a               8476		.byte	42
00001d2d 03               8477		.byte	3
00001d2e 3b               8478		.byte	59
00001d2f 2b               8479		.byte	43
00001d30 01               8480		.byte	1
00001d31 31               8481		.byte	49
00001d32 4e565f454e41424c 8482		.strz	"NV_ENABLE_ADDRESS_LOOKUP "
00001d3a 455f414444524553
00001d42 535f4c4f4f4b5550
00001d4a 2000            
00001d4c 01               8483		.byte	1
00001d4d 5f               8484		.byte	95
00001d4e 6b45657053697a65 8485		.strz	"kEepSizeValidityFlags 0x01u"
00001d56 56616c6964697479
00001d5e 466c616773203078
00001d66 30317500        
00001d6a 04               8486		.byte	4
00001d6b 04               8487		.byte	4
00001d6c 04               8488		.byte	4
00001d6d 03               8489		.byte	3
00001d6e 9501             8490		.byte	149,1
00001d70 2c               8491		.byte	44
00001d71 01               8492		.byte	1
00001d72 40               8493		.byte	64
00001d73 46424c5f4642545f 8494		.strz	"FBL_FBT_START_SEC_CONST "
00001d7b 53544152545f5345
00001d83 435f434f4e535420
00001d8b 00              
00001d8c 03               8495		.byte	3
00001d8d 41               8496		.byte	65
00001d8e 18               8497		.byte	24
00001d8f 01               8498		.byte	1
00001d90 2b               8499		.byte	43

                                   Fri Apr 10 08:32:21 2020           Page 153
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
00001d91 46424c5f4d454d4d 8500		.strz	"FBL_MEMMAP_ERROR "
00001d99 41505f4552524f52
00001da1 2000            
00001da3 04               8501		.byte	4
00001da4 01               8502		.byte	1
00001da5 47               8503		.byte	71
00001da6 46424c5f4642545f 8504		.strz	"FBL_FBT_STOP_SEC_CONST "
00001dae 53544f505f534543
00001db6 5f434f4e53542000
00001dbe 03               8505		.byte	3
00001dbf 48               8506		.byte	72
00001dc0 18               8507		.byte	24
00001dc1 01               8508		.byte	1
00001dc2 2b               8509		.byte	43
00001dc3 46424c5f4d454d4d 8510		.strz	"FBL_MEMMAP_ERROR "
00001dcb 41505f4552524f52
00001dd3 2000            
00001dd5 04               8511		.byte	4
00001dd6 04               8512		.byte	4
00001dd7 03               8513		.byte	3
00001dd8 a101             8514		.byte	161,1
00001dda 2d               8515		.byte	45
00001ddb 03               8516		.byte	3
00001ddc 4b               8517		.byte	75
00001ddd 2e               8518		.byte	46
00001dde 01               8519		.byte	1
00001ddf 56               8520		.byte	86
00001de0 46424c5f44494147 8521		.strz	"FBL_DIAG_ENABLE_CORE_SEGMENTHANDLING "
00001de8 5f454e41424c455f
00001df0 434f52455f534547
00001df8 4d454e5448414e44
00001e00 4c494e472000    
00001e06 01               8522		.byte	1
00001e07 61               8523		.byte	97
00001e08 6b44696167537461 8524		.strz	"kDiagStateIdxSecurityKeyAllowed (kDiagLastCoreStateIdx + 1u)"
00001e10 7465496478536563
00001e18 75726974794b6579
00001e20 416c6c6f77656420
00001e28 286b446961674c61
00001e30 7374436f72655374
00001e38 617465496478202b
00001e40 2031752900      
00001e45 01               8525		.byte	1
00001e46 62               8526		.byte	98
00001e47 6b44696167537461 8527		.strz	"kDiagStateIdxSecurityUnlock (kDiagStateIdxSecurityKeyAllowed + 1u)"
00001e4f 7465496478536563
00001e57 7572697479556e6c
00001e5f 6f636b20286b4469
00001e67 6167537461746549
00001e6f 6478536563757269
00001e77 74794b6579416c6c
00001e7f 6f776564202b2031
00001e87 752900          
00001e8a 01               8528		.byte	1
00001e8b 63               8529		.byte	99
00001e8c 6b44696167537461 8530		.strz	"kDiagStateIdxFingerprintValid (kDiagStateIdxSecurityUnlock + 1u)"
00001e94 746549647846696e
00001e9c 6765727072696e74
00001ea4 56616c696420286b
00001eac 4469616753746174
00001eb4 6549647853656375
00001ebc 72697479556e6c6f
00001ec4 636b202b20317529
00001ecc 00              
00001ecd 01               8531		.byte	1
00001ece 64               8532		.byte	100
00001ecf 6b44696167537461 8533		.strz	"kDiagStateIdxEraseSucceeded (kDiagStateIdxFingerprintValid + 1u)"
00001ed7 7465496478457261
00001edf 7365537563636565
00001ee7 64656420286b4469
00001eef 6167537461746549
00001ef7 647846696e676572
00001eff 7072696e7456616c
00001f07 6964202b20317529
00001f0f 00              
00001f10 01               8534		.byte	1
00001f11 65               8535		.byte	101
00001f12 6b44696167537461 8536		.strz	"kDiagStateIdxTransferDataAllowed (kDiagStateIdxEraseSucceeded + 1u)"
00001f1a 7465496478547261
00001f22 6e73666572446174
00001f2a 61416c6c6f776564
00001f32 20286b4469616753
00001f3a 7461746549647845
00001f42 7261736553756363
00001f4a 6565646564202b20
00001f52 31752900        
00001f56 01               8537		.byte	1
00001f57 66               8538		.byte	102
00001f58 6b44696167537461 8539		.strz	"kDiagStateIdxTransferDataSucceeded (kDiagStateIdxTransferDataAllowed + 1u)"
00001f60 7465496478547261
00001f68 6e73666572446174
00001f70 6153756363656564
00001f78 656420286b446961
00001f80 6753746174654964
00001f88 785472616e736665
00001f90 7244617461416c6c
00001f98 6f776564202b2031
00001fa0 752900          
00001fa3 01               8540		.byte	1
00001fa4 67               8541		.byte	103
00001fa5 6b44696167537461 8542		.strz	"kDiagStateIdxChecksumAllowed (kDiagStateIdxTransferDataSucceeded + 1u)"
00001fad 7465496478436865
00001fb5 636b73756d416c6c
00001fbd 6f77656420286b44
00001fc5 6961675374617465
00001fcd 4964785472616e73
00001fd5 6665724461746153
00001fdd 7563636565646564
00001fe5 202b2031752900  
00001fec 01               8543		.byte	1
00001fed 69               8544		.byte	105
00001fee 6b446961674c6173 8545		.strz	"kDiagLastOemStateIdx kDiagStateIdxChecksumAllowed"
00001ff6 744f656d53746174
00001ffe 65496478206b4469
00002006 6167537461746549
0000200e 6478436865636b73
00002016 756d416c6c6f7765
0000201e 6400            
00002020 04               8546		.byte	4
00002021 01               8547		.byte	1
00002022 5a               8548		.byte	90
00002023 6b4469616743616c 8549		.strz	"kDiagCallCycle 1u"
0000202b 6c4379636c652031
00002033 7500            
00002035 01               8550		.byte	1
00002036 7d               8551		.byte	125
00002037 6b44696167537461 8552		.strz	"kDiagStateIdxMemDriverInitialized 17u"
0000203f 74654964784d656d
00002047 447269766572496e
0000204f 697469616c697a65
00002057 642031377500    
0000205d 01               8553		.byte	1
0000205e 7f               8554		.byte	127
0000205f 6b446961674c6173 8555		.strz	"kDiagLastCoreStateIdx kDiagStateIdxMemDriverInitialized"
00002067 74436f7265537461
0000206f 7465496478206b44
00002077 6961675374617465
0000207f 4964784d656d4472
00002087 69766572496e6974
0000208f 69616c697a656400

                                   Fri Apr 10 08:32:21 2020           Page 154
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
00002097 01               8556		.byte	1
00002098 8201             8557		.byte	130,1
0000209a 6b446961674e756d 8558		.strz	"kDiagNumberOfStates ( kDiagLastOemStateIdx + 1u )"
000020a2 6265724f66537461
000020aa 7465732028206b44
000020b2 6961674c6173744f
000020ba 656d537461746549
000020c2 6478202b20317520
000020ca 2900            
000020cc 01               8559		.byte	1
000020cd 8301             8560		.byte	131,1
000020cf 6b446961674e756d 8561		.strz	"kDiagNumberOfDispatchStates kDiagNumberOfStates"
000020d7 6265724f66446973
000020df 7061746368537461
000020e7 746573206b446961
000020ef 674e756d6265724f
000020f7 6653746174657300
000020ff 01               8562		.byte	1
00002100 c801             8563		.byte	200,1
00002102 46424c5f44494147 8564		.strz	"FBL_DIAG_STATECHECK_ARRAYSIZE (((kDiagNumberOfDispatchStates - 1u) / FBL_STATE_BITS) + 1u)"
0000210a 5f53544154454348
00002112 45434b5f41525241
0000211a 5953495a45202828
00002122 286b446961674e75
0000212a 6d6265724f664469
00002132 7370617463685374
0000213a 61746573202d2031
00002142 7529202f2046424c
0000214a 5f53544154455f42
00002152 49545329202b2031
0000215a 752900          
0000215d 01               8565		.byte	1
0000215e ae02             8566		.byte	174,2
00002160 6b44696167457272 8567		.strz	"kDiagErrorNone 0x00u"
00002168 6f724e6f6e652030
00002170 7830307500      
00002175 01               8568		.byte	1
00002176 af02             8569		.byte	175,2
00002178 6b446961674e7263 8570		.strz	"kDiagNrcGeneralReject 0x10u"
00002180 47656e6572616c52
00002188 656a656374203078
00002190 31307500        
00002194 01               8571		.byte	1
00002195 b502             8572		.byte	181,2
00002197 6b446961674e7263 8573		.strz	"kDiagNrcConditionsNotCorrect 0x22u"
0000219f 436f6e646974696f
000021a7 6e734e6f74436f72
000021af 7265637420307832
000021b7 327500          
000021ba 01               8574		.byte	1
000021bb b602             8575		.byte	182,2
000021bd 6b446961674e7263 8576		.strz	"kDiagNrcRequestSequenceError 0x24u"
000021c5 5265717565737453
000021cd 657175656e636545
000021d5 72726f7220307832
000021dd 347500          
000021e0 01               8577		.byte	1
000021e1 b702             8578		.byte	183,2
000021e3 6b446961674e7263 8579		.strz	"kDiagNrcRequestOutOfRange 0x31u"
000021eb 526571756573744f
000021f3 75744f6652616e67
000021fb 6520307833317500
00002203 01               8580		.byte	1
00002204 bc02             8581		.byte	188,2
00002206 6b446961674e7263 8582		.strz	"kDiagNrcUploadDownloadNotAccepted 0x70u"
0000220e 55706c6f6164446f
00002216 776e6c6f61644e6f
0000221e 7441636365707465
00002226 6420307837307500
0000222e 01               8583		.byte	1
0000222f bd02             8584		.byte	189,2
00002231 6b446961674e7263 8585		.strz	"kDiagNrcTransferDataSuspended 0x71u"
00002239 5472616e73666572
00002241 4461746153757370
00002249 656e646564203078
00002251 37317500        
00002255 01               8586		.byte	1
00002256 be02             8587		.byte	190,2
00002258 6b446961674e7263 8588		.strz	"kDiagNrcGeneralProgrammingFailure 0x72u"
00002260 47656e6572616c50
00002268 726f6772616d6d69
00002270 6e674661696c7572
00002278 6520307837327500
00002280 01               8589		.byte	1
00002281 cf03             8590		.byte	207,3
00002283 46424c444941475f 8591		.strz	"FBLDIAG_RAMCODE_START_SEC_CODE "
0000228b 52414d434f44455f
00002293 53544152545f5345
0000229b 435f434f44452000
000022a3 03               8592		.byte	3
000022a4 d003             8593		.byte	208,3
000022a6 18               8594		.byte	24
000022a7 01               8595		.byte	1
000022a8 2b               8596		.byte	43
000022a9 46424c5f4d454d4d 8597		.strz	"FBL_MEMMAP_ERROR "
000022b1 41505f4552524f52
000022b9 2000            
000022bb 04               8598		.byte	4
000022bc 01               8599		.byte	1
000022bd dc03             8600		.byte	220,3
000022bf 46424c444941475f 8601		.strz	"FBLDIAG_RAMCODE_STOP_SEC_CODE "
000022c7 52414d434f44455f
000022cf 53544f505f534543
000022d7 5f434f44452000  
000022de 03               8602		.byte	3
000022df dd03             8603		.byte	221,3
000022e1 18               8604		.byte	24
000022e2 01               8605		.byte	1
000022e3 2b               8606		.byte	43
000022e4 46424c5f4d454d4d 8607		.strz	"FBL_MEMMAP_ERROR "
000022ec 41505f4552524f52
000022f4 2000            
000022f6 04               8608		.byte	4
000022f7 04               8609		.byte	4
000022f8 03               8610		.byte	3
000022f9 a301             8611		.byte	163,1

                                   Fri Apr 10 08:32:21 2020           Page 155
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
000022fb 2f               8612		.byte	47
000022fc 03               8613		.byte	3
000022fd b201             8614		.byte	178,1
000022ff 30               8615		.byte	48
00002300 01               8616		.byte	1
00002301 79               8617		.byte	121
00002302 46424c5f4d454d5f 8618		.strz	"FBL_MEM_BUFFER_SIZE FBL_DIAG_BUFFER_LENGTH"
0000230a 4255464645525f53
00002312 495a452046424c5f
0000231a 444941475f425546
00002322 4645525f4c454e47
0000232a 544800          
0000232d 01               8619		.byte	1
0000232e 7b               8620		.byte	123
0000232f 46424c5f4d454d5f 8621		.strz	"FBL_MEM_DEFAULT_PREAMBLE_LENGTH 2u"
00002337 44454641554c545f
0000233f 505245414d424c45
00002347 5f4c454e47544820
0000234f 327500          
00002352 01               8622		.byte	1
00002353 7d               8623		.byte	125
00002354 46424c5f4d454d5f 8624		.strz	"FBL_MEM_MAX_PREAMBLE_LENGTH 2u"
0000235c 4d41585f50524541
00002364 4d424c455f4c454e
0000236c 47544820327500  
00002373 01               8625		.byte	1
00002374 ad01             8626		.byte	173,1
00002376 5f5f4170706c4662 8627		.strz	"__ApplFblMemPreWrite() FblDiagMemPreWrite()"
0000237e 6c4d656d50726557
00002386 7269746528292046
0000238e 626c446961674d65
00002396 6d50726557726974
0000239e 65282900        
000023a2 01               8628		.byte	1
000023a3 ae01             8629		.byte	174,1
000023a5 5f5f4170706c4662 8630		.strz	"__ApplFblMemPostWrite() FblDiagMemPostWrite()"
000023ad 6c4d656d506f7374
000023b5 5772697465282920
000023bd 46626c446961674d
000023c5 656d506f73745772
000023cd 697465282900    
000023d3 01               8631		.byte	1
000023d4 b301             8632		.byte	179,1
000023d6 5f5f4170706c4662 8633		.strz	"__ApplFblMemPreErase() FblDiagMemPreWrite()"
000023de 6c4d656d50726545
000023e6 7261736528292046
000023ee 626c446961674d65
000023f6 6d50726557726974
000023fe 65282900        
00002402 01               8634		.byte	1
00002403 b401             8635		.byte	180,1
00002405 5f5f4170706c4662 8636		.strz	"__ApplFblMemPostErase() FblDiagMemPostWrite()"
0000240d 6c4d656d506f7374
00002415 4572617365282920
0000241d 46626c446961674d
00002425 656d506f73745772
0000242d 697465282900    
00002433 01               8637		.byte	1
00002434 bd01             8638		.byte	189,1
00002436 46424c5f4d454d5f 8639		.strz	"FBL_MEM_WD_TRIGGER_DEFAULT (FBL_NO_TRIGGER)"
0000243e 57445f5452494747
00002446 45525f4445464155
0000244e 4c54202846424c5f
00002456 4e4f5f5452494747
0000245e 45522900        
00002462 01               8640		.byte	1
00002463 c201             8641		.byte	194,1
00002465 46424c5f4d454d5f 8642		.strz	"FBL_MEM_TRIGGER_STATUS_OVERWRITE vuint8"
0000246d 545249474745525f
00002475 5354415455535f4f
0000247d 5645525752495445
00002485 207675696e743800
0000248d 01               8643		.byte	1
0000248e e601             8644		.byte	230,1
00002490 46424c5f4d454d5f 8645		.strz	"FBL_MEM_ENABLE_STATUS_OVERWRITE "
00002498 454e41424c455f53
000024a0 54415455535f4f56
000024a8 4552575249544520
000024b0 00              
000024b1 01               8646		.byte	1
000024b2 ef01             8647		.byte	239,1
000024b4 46424c5f4d454d5f 8648		.strz	"FBL_MEM_STATUS_Ok kDiagErrorNone"
000024bc 5354415455535f4f
000024c4 6b206b4469616745
000024cc 72726f724e6f6e65
000024d4 00              
000024d5 01               8649		.byte	1
000024d6 f001             8650		.byte	240,1
000024d8 46424c5f4d454d5f 8651		.strz	"FBL_MEM_STATUS_Failed kDiagNrcConditionsNotCorrect"
000024e0 5354415455535f46
000024e8 61696c6564206b44
000024f0 6961674e7263436f
000024f8 6e646974696f6e73
00002500 4e6f74436f727265
00002508 637400          
0000250b 01               8652		.byte	1
0000250c f201             8653		.byte	242,1
0000250e 46424c5f4d454d5f 8654		.strz	"FBL_MEM_STATUS_BlockEraseSequence kDiagNrcRequestSequenceError"
00002516 5354415455535f42
0000251e 6c6f636b45726173
00002526 6553657175656e63
0000252e 65206b446961674e
00002536 7263526571756573
0000253e 7453657175656e63
00002546 654572726f7200  
0000254d 01               8655		.byte	1
0000254e f401             8656		.byte	244,1
00002550 46424c5f4d454d5f 8657		.strz	"FBL_MEM_STATUS_BlockStartSequence kDiagNrcRequestSequenceError"
00002558 5354415455535f42
00002560 6c6f636b53746172
00002568 7453657175656e63
00002570 65206b446961674e
00002578 7263526571756573
00002580 7453657175656e63
00002588 654572726f7200  
0000258f 01               8658		.byte	1
00002590 f501             8659		.byte	245,1
00002592 46424c5f4d454d5f 8660		.strz	"FBL_MEM_STATUS_BlockStartParam kDiagNrcConditionsNotCorrect"
0000259a 5354415455535f42
000025a2 6c6f636b53746172
000025aa 74506172616d206b
000025b2 446961674e726343
000025ba 6f6e646974696f6e
000025c2 734e6f74436f7272
000025ca 65637400        
000025ce 01               8661		.byte	1
000025cf f701             8662		.byte	247,1
000025d1 46424c5f4d454d5f 8663		.strz	"FBL_MEM_STATUS_BlockEndSequence kDiagNrcRequestSequenceError"
000025d9 5354415455535f42
000025e1 6c6f636b456e6453
000025e9 657175656e636520
000025f1 6b446961674e7263
000025f9 5265717565737453
00002601 657175656e636545
00002609 72726f7200      
0000260e 01               8664		.byte	1
0000260f f801             8665		.byte	248,1
00002611 46424c5f4d454d5f 8666		.strz	"FBL_MEM_STATUS_BlockEndVerifyFinalize kDiagNrcGeneralProgrammingFailure"
00002619 5354415455535f42
00002621 6c6f636b456e6456
00002629 657269667946696e
00002631 616c697a65206b44
00002639 6961674e72634765
00002641 6e6572616c50726f
00002649 6772616d6d696e67
00002651 4661696c75726500
00002659 01               8667		.byte	1

                                   Fri Apr 10 08:32:21 2020           Page 156
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
0000265a fa01             8668		.byte	250,1
0000265c 46424c5f4d454d5f 8669		.strz	"FBL_MEM_STATUS_BlockVerifySequence kDiagNrcRequestSequenceError"
00002664 5354415455535f42
0000266c 6c6f636b56657269
00002674 667953657175656e
0000267c 6365206b44696167
00002684 4e72635265717565
0000268c 737453657175656e
00002694 63654572726f7200
0000269c 01               8670		.byte	1
0000269d fb01             8671		.byte	251,1
0000269f 46424c5f4d454d5f 8672		.strz	"FBL_MEM_STATUS_BlockVerifyInputVerify kDiagNrcGeneralReject"
000026a7 5354415455535f42
000026af 6c6f636b56657269
000026b7 6679496e70757456
000026bf 6572696679206b44
000026c7 6961674e72634765
000026cf 6e6572616c52656a
000026d7 65637400        
000026db 01               8673		.byte	1
000026dc fc01             8674		.byte	252,1
000026de 46424c5f4d454d5f 8675		.strz	"FBL_MEM_STATUS_BlockVerifyProcessedVerify kDiagNrcGeneralReject"
000026e6 5354415455535f42
000026ee 6c6f636b56657269
000026f6 667950726f636573
000026fe 7365645665726966
00002706 79206b446961674e
0000270e 726347656e657261
00002716 6c52656a65637400
0000271e 01               8676		.byte	1
0000271f fd01             8677		.byte	253,1
00002721 46424c5f4d454d5f 8678		.strz	"FBL_MEM_STATUS_BlockVerifyPipeVerify kDiagNrcGeneralReject"
00002729 5354415455535f42
00002731 6c6f636b56657269
00002739 6679506970655665
00002741 72696679206b4469
00002749 61674e726347656e
00002751 6572616c52656a65
00002759 637400          
0000275c 01               8679		.byte	1
0000275d fe01             8680		.byte	254,1
0000275f 46424c5f4d454d5f 8681		.strz	"FBL_MEM_STATUS_BlockVerifyOutputVerify kDiagNrcGeneralReject"
00002767 5354415455535f42
0000276f 6c6f636b56657269
00002777 66794f7574707574
0000277f 566572696679206b
00002787 446961674e726347
0000278f 656e6572616c5265
00002797 6a65637400      
0000279c 01               8682		.byte	1
0000279d 8002             8683		.byte	128,2
0000279f 46424c5f4d454d5f 8684		.strz	"FBL_MEM_STATUS_SegmentStartSequence kDiagNrcRequestSequenceError"
000027a7 5354415455535f53
000027af 65676d656e745374
000027b7 6172745365717565
000027bf 6e6365206b446961
000027c7 674e726352657175
000027cf 6573745365717565
000027d7 6e63654572726f72
000027df 00              
000027e0 01               8685		.byte	1
000027e1 8102             8686		.byte	129,2
000027e3 46424c5f4d454d5f 8687		.strz	"FBL_MEM_STATUS_SegmentStartDataProcInit kDiagNrcUploadDownloadNotAccepted"
000027eb 5354415455535f53
000027f3 65676d656e745374
000027fb 6172744461746150
00002803 726f63496e697420
0000280b 6b446961674e7263
00002813 55706c6f6164446f
0000281b 776e6c6f61644e6f
00002823 7441636365707465
0000282b 6400            
0000282d 01               8688		.byte	1
0000282e 8202             8689		.byte	130,2
00002830 46424c5f4d454d5f 8690		.strz	"FBL_MEM_STATUS_SegmentStartStreamOutInit kDiagNrcUploadDownloadNotAccepted"
00002838 5354415455535f53
00002840 65676d656e745374
00002848 6172745374726561
00002850 6d4f7574496e6974
00002858 206b446961674e72
00002860 6355706c6f616444
00002868 6f776e6c6f61644e
00002870 6f74416363657074
00002878 656400          
0000287b 01               8691		.byte	1
0000287c 8302             8692		.byte	131,2
0000287e 46424c5f4d454d5f 8693		.strz	"FBL_MEM_STATUS_SegmentStartVerifyInit kDiagNrcConditionsNotCorrect"
00002886 5354415455535f53
0000288e 65676d656e745374
00002896 6172745665726966
0000289e 79496e6974206b44
000028a6 6961674e7263436f
000028ae 6e646974696f6e73
000028b6 4e6f74436f727265
000028be 637400          
000028c1 01               8694		.byte	1
000028c2 8402             8695		.byte	132,2
000028c4 46424c5f4d454d5f 8696		.strz	"FBL_MEM_STATUS_SegmentStartVerifyCompute kDiagNrcGeneralProgrammingFailure"
000028cc 5354415455535f53
000028d4 65676d656e745374
000028dc 6172745665726966
000028e4 79436f6d70757465
000028ec 206b446961674e72
000028f4 6347656e6572616c
000028fc 50726f6772616d6d
00002904 696e674661696c75
0000290c 726500          
0000290f 01               8697		.byte	1
00002910 8502             8698		.byte	133,2
00002912 46424c5f4d454d5f 8699		.strz	"FBL_MEM_STATUS_SegmentStartSegmentCount kDiagNrcRequestOutOfRange"
0000291a 5354415455535f53
00002922 65676d656e745374
0000292a 6172745365676d65
00002932 6e74436f756e7420
0000293a 6b446961674e7263
00002942 526571756573744f
0000294a 75744f6652616e67
00002952 6500            
00002954 01               8700		.byte	1
00002955 8702             8701		.byte	135,2
00002957 46424c5f4d454d5f 8702		.strz	"FBL_MEM_STATUS_SegmentEndSequence kDiagNrcRequestSequenceError"
0000295f 5354415455535f53
00002967 65676d656e74456e
0000296f 6453657175656e63
00002977 65206b446961674e
0000297f 7263526571756573
00002987 7453657175656e63
0000298f 654572726f7200  
00002996 01               8703		.byte	1
00002997 8802             8704		.byte	136,2
00002999 46424c5f4d454d5f 8705		.strz	"FBL_MEM_STATUS_SegmentEndInsufficientData kDiagNrcRequestSequenceError"
000029a1 5354415455535f53
000029a9 65676d656e74456e
000029b1 64496e7375666669
000029b9 6369656e74446174
000029c1 61206b446961674e
000029c9 7263526571756573
000029d1 7453657175656e63
000029d9 654572726f7200  
000029e0 01               8706		.byte	1
000029e1 8902             8707		.byte	137,2
000029e3 46424c5f4d454d5f 8708		.strz	"FBL_MEM_STATUS_SegmentEndPost kDiagNrcConditionsNotCorrect"
000029eb 5354415455535f53
000029f3 65676d656e74456e
000029fb 64506f7374206b44
00002a03 6961674e7263436f
00002a0b 6e646974696f6e73
00002a13 4e6f74436f727265
00002a1b 637400          
00002a1e 01               8709		.byte	1
00002a1f 8b02             8710		.byte	139,2
00002a21 46424c5f4d454d5f 8711		.strz	"FBL_MEM_STATUS_DataIndSequence kDiagNrcRequestSequenceError"
00002a29 5354415455535f44
00002a31 617461496e645365
00002a39 7175656e6365206b
00002a41 446961674e726352
00002a49 6571756573745365
00002a51 7175656e63654572
00002a59 726f7200        
00002a5d 01               8712		.byte	1
00002a5e 8c02             8713		.byte	140,2
00002a60 46424c5f4d454d5f 8714		.strz	"FBL_MEM_STATUS_DataIndParam kDiagNrcGeneralProgrammingFailure"
00002a68 5354415455535f44
00002a70 617461496e645061
00002a78 72616d206b446961
00002a80 674e726347656e65
00002a88 72616c50726f6772
00002a90 616d6d696e674661
00002a98 696c75726500    
00002a9e 01               8715		.byte	1
00002a9f 8d02             8716		.byte	141,2
00002aa1 46424c5f4d454d5f 8717		.strz	"FBL_MEM_STATUS_DataIndOverflow kDiagNrcTransferDataSuspended"
00002aa9 5354415455535f44
00002ab1 617461496e644f76
00002ab9 6572666c6f77206b
00002ac1 446961674e726354
00002ac9 72616e7366657244
00002ad1 6174615375737065
00002ad9 6e64656400      
00002ade 01               8718		.byte	1
00002adf 8f02             8719		.byte	143,2
00002ae1 46424c5f4d454d5f 8720		.strz	"FBL_MEM_STATUS_DataProc kDiagNrcGeneralProgrammingFailure"
00002ae9 5354415455535f44
00002af1 61746150726f6320
00002af9 6b446961674e7263
00002b01 47656e6572616c50
00002b09 726f6772616d6d69
00002b11 6e674661696c7572
00002b19 6500            
00002b1b 01               8721		.byte	1
00002b1c 9002             8722		.byte	144,2
00002b1e 46424c5f4d454d5f 8723		.strz	"FBL_MEM_STATUS_DataProcConsume kDiagNrcGeneralProgrammingFailure"
00002b26 5354415455535f44
00002b2e 61746150726f6343
00002b36 6f6e73756d65206b
00002b3e 446961674e726347
00002b46 656e6572616c5072
00002b4e 6f6772616d6d696e
00002b56 674661696c757265
00002b5e 00              

                                   Fri Apr 10 08:32:21 2020           Page 157
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
00002b5f 01               8724		.byte	1
00002b60 9102             8725		.byte	145,2
00002b62 46424c5f4d454d5f 8726		.strz	"FBL_MEM_STATUS_DataProcDeinit kDiagNrcConditionsNotCorrect"
00002b6a 5354415455535f44
00002b72 61746150726f6344
00002b7a 65696e6974206b44
00002b82 6961674e7263436f
00002b8a 6e646974696f6e73
00002b92 4e6f74436f727265
00002b9a 637400          
00002b9d 01               8727		.byte	1
00002b9e 9302             8728		.byte	147,2
00002ba0 46424c5f4d454d5f 8729		.strz	"FBL_MEM_STATUS_StreamOutput kDiagNrcGeneralProgrammingFailure"
00002ba8 5354415455535f53
00002bb0 747265616d4f7574
00002bb8 707574206b446961
00002bc0 674e726347656e65
00002bc8 72616c50726f6772
00002bd0 616d6d696e674661
00002bd8 696c75726500    
00002bde 01               8730		.byte	1
00002bdf 9402             8731		.byte	148,2
00002be1 46424c5f4d454d5f 8732		.strz	"FBL_MEM_STATUS_StreamOutputConsume kDiagNrcGeneralProgrammingFailure"
00002be9 5354415455535f53
00002bf1 747265616d4f7574
00002bf9 707574436f6e7375
00002c01 6d65206b44696167
00002c09 4e726347656e6572
00002c11 616c50726f677261
00002c19 6d6d696e67466169
00002c21 6c75726500      
00002c26 01               8733		.byte	1
00002c27 9502             8734		.byte	149,2
00002c29 46424c5f4d454d5f 8735		.strz	"FBL_MEM_STATUS_StreamOutputOverflow kDiagNrcTransferDataSuspended"
00002c31 5354415455535f53
00002c39 747265616d4f7574
00002c41 7075744f76657266
00002c49 6c6f77206b446961
00002c51 674e72635472616e
00002c59 7366657244617461
00002c61 53757370656e6465
00002c69 6400            
00002c6b 01               8736		.byte	1
00002c6c 9602             8737		.byte	150,2
00002c6e 46424c5f4d454d5f 8738		.strz	"FBL_MEM_STATUS_StreamOutputDeinit kDiagNrcConditionsNotCorrect"
00002c76 5354415455535f53
00002c7e 747265616d4f7574
00002c86 7075744465696e69
00002c8e 74206b446961674e
00002c96 7263436f6e646974
00002c9e 696f6e734e6f7443
00002ca6 6f727265637400  
00002cad 01               8739		.byte	1
00002cae 9802             8740		.byte	152,2
00002cb0 46424c5f4d454d5f 8741		.strz	"FBL_MEM_STATUS_DriverResumeWrite kDiagNrcGeneralProgrammingFailure"
00002cb8 5354415455535f44
00002cc0 7269766572526573
00002cc8 756d655772697465
00002cd0 206b446961674e72
00002cd8 6347656e6572616c
00002ce0 50726f6772616d6d
00002ce8 696e674661696c75
00002cf0 726500          
00002cf3 01               8742		.byte	1
00002cf4 9902             8743		.byte	153,2
00002cf6 46424c5f4d454d5f 8744		.strz	"FBL_MEM_STATUS_DriverWrite kDiagNrcGeneralProgrammingFailure"
00002cfe 5354415455535f44
00002d06 7269766572577269
00002d0e 7465206b44696167
00002d16 4e726347656e6572
00002d1e 616c50726f677261
00002d26 6d6d696e67466169
00002d2e 6c75726500      
00002d33 01               8745		.byte	1
00002d34 9a02             8746		.byte	154,2
00002d36 46424c5f4d454d5f 8747		.strz	"FBL_MEM_STATUS_DriverErase kDiagNrcGeneralProgrammingFailure"
00002d3e 5354415455535f44
00002d46 7269766572457261
00002d4e 7365206b44696167
00002d56 4e726347656e6572
00002d5e 616c50726f677261
00002d66 6d6d696e67466169
00002d6e 6c75726500      
00002d73 01               8748		.byte	1
00002d74 9b02             8749		.byte	155,2
00002d76 46424c5f4d454d5f 8750		.strz	"FBL_MEM_STATUS_DriverRemainder kDiagNrcGeneralProgrammingFailure"
00002d7e 5354415455535f44
00002d86 726976657252656d
00002d8e 61696e646572206b
00002d96 446961674e726347
00002d9e 656e6572616c5072
00002da6 6f6772616d6d696e
00002dae 674661696c757265
00002db6 00              
00002db7 01               8751		.byte	1
00002db8 9c02             8752		.byte	156,2
00002dba 46424c5f4d454d5f 8753		.strz	"FBL_MEM_STATUS_DriverSuspendWrite kDiagNrcGeneralProgrammingFailure"
00002dc2 5354415455535f44
00002dca 7269766572537573
00002dd2 70656e6457726974
00002dda 65206b446961674e
00002de2 726347656e657261
00002dea 6c50726f6772616d
00002df2 6d696e674661696c
00002dfa 75726500        
00002dfe 01               8754		.byte	1
00002dff 9e02             8755		.byte	158,2
00002e01 46424c5f4d454d5f 8756		.strz	"FBL_MEM_STATUS_ProgramOverflow kDiagNrcTransferDataSuspended"
00002e09 5354415455535f50
00002e11 726f6772616d4f76
00002e19 6572666c6f77206b
00002e21 446961674e726354
00002e29 72616e7366657244
00002e31 6174615375737065
00002e39 6e64656400      
00002e3e 01               8757		.byte	1
00002e3f 9f02             8758		.byte	159,2
00002e41 46424c5f4d454d5f 8759		.strz	"FBL_MEM_STATUS_ProgramOutsideFbt kDiagNrcTransferDataSuspended"
00002e49 5354415455535f50
00002e51 726f6772616d4f75
00002e59 7473696465466274
00002e61 206b446961674e72
00002e69 635472616e736665
00002e71 7244617461537573
00002e79 70656e64656400  
00002e80 01               8760		.byte	1
00002e81 a002             8761		.byte	160,2
00002e83 46424c5f4d454d5f 8762		.strz	"FBL_MEM_STATUS_ProgramUnalignedAddress kDiagNrcGeneralProgrammingFailure"
00002e8b 5354415455535f50
00002e93 726f6772616d556e
00002e9b 616c69676e656441
00002ea3 646472657373206b
00002eab 446961674e726347
00002eb3 656e6572616c5072
00002ebb 6f6772616d6d696e
00002ec3 674661696c757265
00002ecb 00              
00002ecc 01               8763		.byte	1
00002ecd a102             8764		.byte	161,2
00002ecf 46424c5f4d454d5f 8765		.strz	"FBL_MEM_STATUS_ProgramDriverNotReady kDiagNrcRequestSequenceError"
00002ed7 5354415455535f50
00002edf 726f6772616d4472
00002ee7 697665724e6f7452
00002eef 65616479206b4469
00002ef7 61674e7263526571
00002eff 7565737453657175
00002f07 656e63654572726f
00002f0f 7200            
00002f11 01               8766		.byte	1
00002f12 a202             8767		.byte	162,2
00002f14 46424c5f4d454d5f 8768		.strz	"FBL_MEM_STATUS_ProgramPreWrite kDiagNrcGeneralProgrammingFailure"
00002f1c 5354415455535f50
00002f24 726f6772616d5072
00002f2c 655772697465206b
00002f34 446961674e726347
00002f3c 656e6572616c5072
00002f44 6f6772616d6d696e
00002f4c 674661696c757265
00002f54 00              
00002f55 01               8769		.byte	1
00002f56 a302             8770		.byte	163,2
00002f58 46424c5f4d454d5f 8771		.strz	"FBL_MEM_STATUS_ProgramPostWrite kDiagNrcGeneralProgrammingFailure"
00002f60 5354415455535f50
00002f68 726f6772616d506f
00002f70 7374577269746520
00002f78 6b446961674e7263
00002f80 47656e6572616c50
00002f88 726f6772616d6d69
00002f90 6e674661696c7572
00002f98 6500            
00002f9a 01               8772		.byte	1
00002f9b a502             8773		.byte	165,2
00002f9d 46424c5f4d454d5f 8774		.strz	"FBL_MEM_STATUS_EraseOutsideFbt kDiagNrcRequestOutOfRange"
00002fa5 5354415455535f45
00002fad 726173654f757473
00002fb5 696465466274206b
00002fbd 446961674e726352
00002fc5 6571756573744f75
00002fcd 744f6652616e6765
00002fd5 00              
00002fd6 01               8775		.byte	1
00002fd7 a602             8776		.byte	166,2
00002fd9 46424c5f4d454d5f 8777		.strz	"FBL_MEM_STATUS_EraseDriverNotReady kDiagNrcConditionsNotCorrect"
00002fe1 5354415455535f45
00002fe9 7261736544726976
00002ff1 65724e6f74526561
00002ff9 6479206b44696167
00003001 4e7263436f6e6469
00003009 74696f6e734e6f74
00003011 436f727265637400
00003019 01               8778		.byte	1
0000301a a702             8779		.byte	167,2

                                   Fri Apr 10 08:32:21 2020           Page 158
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
0000301c 46424c5f4d454d5f 8780		.strz	"FBL_MEM_STATUS_ErasePreErase kDiagNrcConditionsNotCorrect"
00003024 5354415455535f45
0000302c 7261736550726545
00003034 72617365206b4469
0000303c 61674e7263436f6e
00003044 646974696f6e734e
0000304c 6f74436f72726563
00003054 7400            
00003056 01               8781		.byte	1
00003057 a802             8782		.byte	168,2
00003059 46424c5f4d454d5f 8783		.strz	"FBL_MEM_STATUS_ErasePostErase kDiagNrcConditionsNotCorrect"
00003061 5354415455535f45
00003069 72617365506f7374
00003071 4572617365206b44
00003079 6961674e7263436f
00003081 6e646974696f6e73
00003089 4e6f74436f727265
00003091 637400          
00003094 01               8784		.byte	1
00003095 aa02             8785		.byte	170,2
00003097 46424c5f4d454d5f 8786		.strz	"FBL_MEM_STATUS_VerifyCompute kDiagNrcGeneralProgrammingFailure"
0000309f 5354415455535f56
000030a7 6572696679436f6d
000030af 70757465206b4469
000030b7 61674e726347656e
000030bf 6572616c50726f67
000030c7 72616d6d696e6746
000030cf 61696c75726500  
000030d6 01               8787		.byte	1
000030d7 ab02             8788		.byte	171,2
000030d9 46424c5f4d454d5f 8789		.strz	"FBL_MEM_STATUS_VerifyFinalize kDiagNrcGeneralProgrammingFailure"
000030e1 5354415455535f56
000030e9 657269667946696e
000030f1 616c697a65206b44
000030f9 6961674e72634765
00003101 6e6572616c50726f
00003109 6772616d6d696e67
00003111 4661696c75726500
00003119 01               8790		.byte	1
0000311a ad02             8791		.byte	173,2
0000311c 46424c5f4d454d5f 8792		.strz	"FBL_MEM_STATUS_PassThroughLocal kDiagNrcConditionsNotCorrect"
00003124 5354415455535f50
0000312c 6173735468726f75
00003134 67684c6f63616c20
0000313c 6b446961674e7263
00003144 436f6e646974696f
0000314c 6e734e6f74436f72
00003154 7265637400      
00003159 01               8793		.byte	1
0000315a ae02             8794		.byte	174,2
0000315c 46424c5f4d454d5f 8795		.strz	"FBL_MEM_STATUS_PassThroughRemote kDiagNrcConditionsNotCorrect"
00003164 5354415455535f50
0000316c 6173735468726f75
00003174 676852656d6f7465
0000317c 206b446961674e72
00003184 63436f6e64697469
0000318c 6f6e734e6f74436f
00003194 727265637400    
0000319a 01               8796		.byte	1
0000319b b302             8797		.byte	179,2
0000319d 46424c5f4d454d5f 8798		.strz	"FBL_MEM_ENABLE_EXT_STATUS "
000031a5 454e41424c455f45
000031ad 58545f5354415455
000031b5 532000          
000031b8 01               8799		.byte	1
000031b9 b602             8800		.byte	182,2
000031bb 46424c5f4d454d5f 8801		.strz	"FBL_MEM_EXT_STATUS_Ok(status) "
000031c3 4558545f53544154
000031cb 55535f4f6b287374
000031d3 61747573292000  
000031da 01               8802		.byte	1
000031db b702             8803		.byte	183,2
000031dd 46424c5f4d454d5f 8804		.strz	"FBL_MEM_EXT_STATUS_Failed(status) "
000031e5 4558545f53544154
000031ed 55535f4661696c65
000031f5 6428737461747573
000031fd 292000          
00003200 04               8805		.byte	4
00003201 01               8806		.byte	1
00003202 e901             8807		.byte	233,1
00003204 46424c5f4d454d5f 8808		.strz	"FBL_MEM_ENABLE_GAP_FILL "
0000320c 454e41424c455f47
00003214 41505f46494c4c20
0000321c 00              
0000321d 01               8809		.byte	1
0000321e f901             8810		.byte	249,1
00003220 46424c5f4d454d5f 8811		.strz	"FBL_MEM_ENABLE_SEGMENT_HANDLING "
00003228 454e41424c455f53
00003230 45474d454e545f48
00003238 414e444c494e4720
00003240 00              
00003241 01               8812		.byte	1
00003242 a902             8813		.byte	169,2
00003244 46424c5f4d454d5f 8814		.strz	"FBL_MEM_STATUS_NAME(name) kFblMemStatus_ ## name"
0000324c 5354415455535f4e
00003254 414d45286e616d65
0000325c 29206b46626c4d65
00003264 6d5374617475735f
0000326c 202323206e616d65
00003274 00              
00003275 01               8815		.byte	1
00003276 aa02             8816		.byte	170,2
00003278 46424c5f4d454d5f 8817		.strz	"FBL_MEM_STATUS_DEFINE(name) FBL_MEM_STATUS_ ## name"
00003280 5354415455535f44
00003288 4546494e45286e61
00003290 6d65292046424c5f
00003298 4d454d5f53544154
000032a0 55535f202323206e
000032a8 616d6500        
000032ac 01               8818		.byte	1
000032ad ae02             8819		.byte	174,2
000032af 46424c5f4d454d5f 8820		.strz	"FBL_MEM_STATUS_DEFINITION(name) FBL_MEM_STATUS_NAME(name) = FBL_MEM_STATUS_DEFINE(name)"
000032b7 5354415455535f44
000032bf 4546494e4954494f
000032c7 4e286e616d652920
000032cf 46424c5f4d454d5f
000032d7 5354415455535f4e
000032df 414d45286e616d65
000032e7 29203d2046424c5f
000032ef 4d454d5f53544154
000032f7 55535f444546494e
000032ff 45286e616d652900
00003307 01               8821		.byte	1
00003308 e006             8822		.byte	224,6
0000330a 46424c4c49425f4d 8823		.strz	"FBLLIB_MEM_RAMCODE_START_SEC_CODE_EXPORT "
00003312 454d5f52414d434f
0000331a 44455f5354415254
00003322 5f5345435f434f44
0000332a 455f4558504f5254
00003332 2000            
00003334 03               8824		.byte	3
00003335 e106             8825		.byte	225,6
00003337 18               8826		.byte	24
00003338 01               8827		.byte	1
00003339 2b               8828		.byte	43
0000333a 46424c5f4d454d4d 8829		.strz	"FBL_MEMMAP_ERROR "
00003342 41505f4552524f52
0000334a 2000            
0000334c 04               8830		.byte	4
0000334d 01               8831		.byte	1
0000334e e506             8832		.byte	229,6
00003350 46424c4c49425f4d 8833		.strz	"FBLLIB_MEM_RAMCODE_STOP_SEC_CODE_EXPORT "
00003358 454d5f52414d434f
00003360 44455f53544f505f
00003368 5345435f434f4445
00003370 5f4558504f525420
00003378 00              
00003379 03               8834		.byte	3
0000337a e606             8835		.byte	230,6

                                   Fri Apr 10 08:32:21 2020           Page 159
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
0000337c 18               8836		.byte	24
0000337d 01               8837		.byte	1
0000337e 2b               8838		.byte	43
0000337f 46424c5f4d454d4d 8839		.strz	"FBL_MEMMAP_ERROR "
00003387 41505f4552524f52
0000338f 2000            
00003391 04               8840		.byte	4
00003392 01               8841		.byte	1
00003393 f106             8842		.byte	241,6
00003395 46424c4c49425f4d 8843		.strz	"FBLLIB_MEM_START_SEC_VAR_EXPORT "
0000339d 454d5f5354415254
000033a5 5f5345435f564152
000033ad 5f4558504f525420
000033b5 00              
000033b6 03               8844		.byte	3
000033b7 f206             8845		.byte	242,6
000033b9 18               8846		.byte	24
000033ba 01               8847		.byte	1
000033bb 2b               8848		.byte	43
000033bc 46424c5f4d454d4d 8849		.strz	"FBL_MEMMAP_ERROR "
000033c4 41505f4552524f52
000033cc 2000            
000033ce 04               8850		.byte	4
000033cf 01               8851		.byte	1
000033d0 f606             8852		.byte	246,6
000033d2 46424c4c49425f4d 8853		.strz	"FBLLIB_MEM_STOP_SEC_VAR_EXPORT "
000033da 454d5f53544f505f
000033e2 5345435f5641525f
000033ea 4558504f52542000
000033f2 03               8854		.byte	3
000033f3 f706             8855		.byte	247,6
000033f5 18               8856		.byte	24
000033f6 01               8857		.byte	1
000033f7 2b               8858		.byte	43
000033f8 46424c5f4d454d4d 8859		.strz	"FBL_MEMMAP_ERROR "
00003400 41505f4552524f52
00003408 2000            
0000340a 04               8860		.byte	4
0000340b 04               8861		.byte	4
0000340c 03               8862		.byte	3
0000340d a901             8863		.byte	169,1
0000340f 31               8864		.byte	49
00003410 01               8865		.byte	1
00003411 ac02             8866		.byte	172,2
00003413 46424c41505f5241 8867		.strz	"FBLAP_RAMCODE_START_SEC_CODE_EXPORT "
0000341b 4d434f44455f5354
00003423 4152545f5345435f
0000342b 434f44455f455850
00003433 4f52542000      
00003438 03               8868		.byte	3
00003439 ad02             8869		.byte	173,2
0000343b 18               8870		.byte	24
0000343c 01               8871		.byte	1
0000343d 2b               8872		.byte	43
0000343e 46424c5f4d454d4d 8873		.strz	"FBL_MEMMAP_ERROR "
00003446 41505f4552524f52
0000344e 2000            
00003450 04               8874		.byte	4
00003451 01               8875		.byte	1
00003452 af02             8876		.byte	175,2
00003454 46424c41505f5241 8877		.strz	"FBLAP_RAMCODE_STOP_SEC_CODE_EXPORT "
0000345c 4d434f44455f5354
00003464 4f505f5345435f43
0000346c 4f44455f4558504f
00003474 52542000        
00003478 03               8878		.byte	3
00003479 b002             8879		.byte	176,2
0000347b 18               8880		.byte	24
0000347c 01               8881		.byte	1
0000347d 2b               8882		.byte	43
0000347e 46424c5f4d454d4d 8883		.strz	"FBL_MEMMAP_ERROR "
00003486 41505f4552524f52
0000348e 2000            
00003490 04               8884		.byte	4
00003491 04               8885		.byte	4
00003492 03               8886		.byte	3
00003493 aa01             8887		.byte	170,1
00003495 32               8888		.byte	50
00003496 01               8889		.byte	1
00003497 9402             8890		.byte	148,2
00003499 5744545249474745 8891		.strz	"WDTRIGGER_START_SEC_CODE_EXPORT "
000034a1 525f53544152545f
000034a9 5345435f434f4445
000034b1 5f4558504f525420
000034b9 00              

                                   Fri Apr 10 08:32:21 2020           Page 160
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
000034ba 03               8892		.byte	3
000034bb 9502             8893		.byte	149,2
000034bd 18               8894		.byte	24
000034be 01               8895		.byte	1
000034bf 2b               8896		.byte	43
000034c0 46424c5f4d454d4d 8897		.strz	"FBL_MEMMAP_ERROR "
000034c8 41505f4552524f52
000034d0 2000            
000034d2 04               8898		.byte	4
000034d3 01               8899		.byte	1
000034d4 9702             8900		.byte	151,2
000034d6 5744545249474745 8901		.strz	"WDTRIGGER_STOP_SEC_CODE_EXPORT "
000034de 525f53544f505f53
000034e6 45435f434f44455f
000034ee 4558504f52542000
000034f6 03               8902		.byte	3
000034f7 9802             8903		.byte	152,2
000034f9 18               8904		.byte	24
000034fa 01               8905		.byte	1
000034fb 2b               8906		.byte	43
000034fc 46424c5f4d454d4d 8907		.strz	"FBL_MEMMAP_ERROR "
00003504 41505f4552524f52
0000350c 2000            
0000350e 04               8908		.byte	4
0000350f 04               8909		.byte	4
00003510 03               8910		.byte	3
00003511 ab01             8911		.byte	171,1
00003513 33               8912		.byte	51
00003514 04               8913		.byte	4
00003515 03               8914		.byte	3
00003516 ac01             8915		.byte	172,1
00003518 34               8916		.byte	52
00003519 01               8917		.byte	1
0000351a f501             8918		.byte	245,1
0000351c 6b46626c50726573 8919		.strz	"kFblPresencePatternSize 4u"
00003524 656e636550617474
0000352c 65726e53697a6520
00003534 347500          
00003537 04               8920		.byte	4
00003538 03               8921		.byte	3
00003539 b201             8922		.byte	178,1
0000353b 35               8923		.byte	53
0000353c 01               8924		.byte	1
0000353d 47               8925		.byte	71
0000353e 6b46626c4d61696e 8926		.strz	"kFblMainNumberOfStates 7u"
00003546 4e756d6265724f66
0000354e 5374617465732037
00003556 7500            
00003558 01               8927		.byte	1
00003559 8701             8928		.byte	135,1
0000355b 6b46626c4e6f4f66 8929		.strz	"kFblNoOfMagicBytes 8u"
00003563 4d61676963427974
0000356b 657320387500    
00003571 01               8930		.byte	1
00003572 e501             8931		.byte	229,1
00003574 46424c4845414445 8932		.strz	"FBLHEADER_START_SEC_CONST "
0000357c 525f53544152545f
00003584 5345435f434f4e53
0000358c 542000          
0000358f 03               8933		.byte	3
00003590 e601             8934		.byte	230,1
00003592 18               8935		.byte	24
00003593 01               8936		.byte	1
00003594 2b               8937		.byte	43
00003595 46424c5f4d454d4d 8938		.strz	"FBL_MEMMAP_ERROR "
0000359d 41505f4552524f52
000035a5 2000            
000035a7 04               8939		.byte	4
000035a8 01               8940		.byte	1
000035a9 e801             8941		.byte	232,1
000035ab 46424c4845414445 8942		.strz	"FBLHEADER_STOP_SEC_CONST "
000035b3 525f53544f505f53
000035bb 45435f434f4e5354
000035c3 2000            
000035c5 03               8943		.byte	3
000035c6 e901             8944		.byte	233,1
000035c8 18               8945		.byte	24
000035c9 01               8946		.byte	1
000035ca 2b               8947		.byte	43

                                   Fri Apr 10 08:32:21 2020           Page 161
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
000035cb 46424c5f4d454d4d 8948		.strz	"FBL_MEMMAP_ERROR "
000035d3 41505f4552524f52
000035db 2000            
000035dd 04               8949		.byte	4
000035de 01               8950		.byte	1
000035df ec01             8951		.byte	236,1
000035e1 46424c5f4d41494e 8952		.strz	"FBL_MAIN_MAGICFLAG_START_SEC_VAR "
000035e9 5f4d41474943464c
000035f1 41475f5354415254
000035f9 5f5345435f564152
00003601 2000            
00003603 03               8953		.byte	3
00003604 ed01             8954		.byte	237,1
00003606 18               8955		.byte	24
00003607 01               8956		.byte	1
00003608 2b               8957		.byte	43
00003609 46424c5f4d454d4d 8958		.strz	"FBL_MEMMAP_ERROR "
00003611 41505f4552524f52
00003619 2000            
0000361b 04               8959		.byte	4
0000361c 01               8960		.byte	1
0000361d f301             8961		.byte	243,1
0000361f 46424c5f4d41494e 8962		.strz	"FBL_MAIN_MAGICFLAG_STOP_SEC_VAR "
00003627 5f4d41474943464c
0000362f 41475f53544f505f
00003637 5345435f56415220
0000363f 00              
00003640 03               8963		.byte	3
00003641 f401             8964		.byte	244,1
00003643 18               8965		.byte	24
00003644 01               8966		.byte	1
00003645 2b               8967		.byte	43
00003646 46424c5f4d454d4d 8968		.strz	"FBL_MEMMAP_ERROR "
0000364e 41505f4552524f52
00003656 2000            
00003658 04               8969		.byte	4
00003659 01               8970		.byte	1
0000365a fc01             8971		.byte	252,1
0000365c 46424c5f4d41494e 8972		.strz	"FBL_MAIN_FBLSTART_START_SEC_CODE "
00003664 5f46424c53544152
0000366c 545f53544152545f
00003674 5345435f434f4445
0000367c 2000            
0000367e 03               8973		.byte	3
0000367f fd01             8974		.byte	253,1
00003681 18               8975		.byte	24
00003682 01               8976		.byte	1
00003683 2b               8977		.byte	43
00003684 46424c5f4d454d4d 8978		.strz	"FBL_MEMMAP_ERROR "
0000368c 41505f4552524f52
00003694 2000            
00003696 04               8979		.byte	4
00003697 01               8980		.byte	1
00003698 8302             8981		.byte	131,2
0000369a 46424c5f4d41494e 8982		.strz	"FBL_MAIN_FBLSTART_STOP_SEC_CODE "
000036a2 5f46424c53544152
000036aa 545f53544f505f53
000036b2 45435f434f444520
000036ba 00              
000036bb 03               8983		.byte	3
000036bc 8402             8984		.byte	132,2
000036be 18               8985		.byte	24
000036bf 01               8986		.byte	1
000036c0 2b               8987		.byte	43
000036c1 46424c5f4d454d4d 8988		.strz	"FBL_MEMMAP_ERROR "
000036c9 41505f4552524f52
000036d1 2000            
000036d3 04               8989		.byte	4
000036d4 04               8990		.byte	4
000036d5 04               8991		.byte	4
000036d6 01               8992		.byte	1
000036d7 8c01             8993		.byte	140,1
000036d9 46424c54505f5052 8994		.strz	"FBLTP_PROCESSOR_OK "
000036e1 4f434553534f525f
000036e9 4f4b2000        
000036ed 01               8995		.byte	1
000036ee 8d01             8996		.byte	141,1
000036f0 6b436f70794e6f44 8997		.strz	"kCopyNoData kCanNoCopyData"
000036f8 617461206b43616e
00003700 4e6f436f70794461
00003708 746100          
0000370b 01               8998		.byte	1
0000370c 9b01             8999		.byte	155,1
0000370e 6b4c345f53696e67 9000		.strz	"kL4_SingleFrame 0x00u"
00003716 6c654672616d6520
0000371e 307830307500    
00003724 01               9001		.byte	1
00003725 9c01             9002		.byte	156,1
00003727 6b4c345f46697273 9003		.strz	"kL4_FirstFrame 0x10u"
0000372f 744672616d652030
00003737 7831307500      

                                   Fri Apr 10 08:32:21 2020           Page 162
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
0000373c 01               9004		.byte	1
0000373d 9d01             9005		.byte	157,1
0000373f 6b4c345f436f6e73 9006		.strz	"kL4_ConsecutiveFrame 0x20u"
00003747 6563757469766546
0000374f 72616d6520307832
00003757 307500          
0000375a 01               9007		.byte	1
0000375b 9e01             9008		.byte	158,1
0000375d 6b4c345f466c6f77 9009		.strz	"kL4_FlowControl 0x30u"
00003765 436f6e74726f6c20
0000376d 307833307500    
00003773 01               9010		.byte	1
00003774 9f01             9011		.byte	159,1
00003776 6b4c345f466c6f77 9012		.strz	"kL4_FlowStatus_Overrun 0x32u"
0000377e 5374617475735f4f
00003786 76657272756e2030
0000378e 7833327500      
00003793 01               9013		.byte	1
00003794 a201             9014		.byte	162,1
00003796 6b4c345f4672616d 9015		.strz	"kL4_FrameTypeMask 0xF0u"
0000379e 65547970654d6173
000037a6 6b20307846307500
000037ae 01               9016		.byte	1
000037af a401             9017		.byte	164,1
000037b1 6b4c345f534e4d61 9018		.strz	"kL4_SNMask 0x0Fu"
000037b9 736b203078304675
000037c1 00              
000037c2 01               9019		.byte	1
000037c3 a501             9020		.byte	165,1
000037c5 6b4c345f4d617853 9021		.strz	"kL4_MaxSN 0x0Fu"
000037cd 4e20307830467500
000037d5 01               9022		.byte	1
000037d6 a801             9023		.byte	168,1
000037d8 6b4c345f46464461 9024		.strz	"kL4_FFData 0x0Fu"
000037e0 7461203078304675
000037e8 00              
000037e9 01               9025		.byte	1
000037ea aa01             9026		.byte	170,1
000037ec 6b43616e4672616d 9027		.strz	"kCanFrameLength 8u"
000037f4 654c656e67746820
000037fc 387500          
000037ff 01               9028		.byte	1
00003800 ad01             9029		.byte	173,1
00003802 6b466c6f77537461 9030		.strz	"kFlowStateCTS 0x00u"
0000380a 7465435453203078
00003812 30307500        
00003816 01               9031		.byte	1
00003817 ae01             9032		.byte	174,1
00003819 6b466c6f77537461 9033		.strz	"kFlowStateWait 0x01u"
00003821 7465576169742030
00003829 7830317500      
0000382e 01               9034		.byte	1
0000382f af01             9035		.byte	175,1
00003831 6b466c6f77537461 9036		.strz	"kFlowStateOverrun 0x02u"
00003839 74654f7665727275
00003841 6e20307830327500
00003849 01               9037		.byte	1
0000384a b101             9038		.byte	177,1
0000384c 6b57616974466f72 9039		.strz	"kWaitForFFConfInterrupt 0x10u"
00003854 4646436f6e66496e
0000385c 7465727275707420
00003864 307831307500    
0000386a 01               9040		.byte	1
0000386b b201             9041		.byte	178,1
0000386d 6b57616974466f72 9042		.strz	"kWaitForCFConfInterrupt 0x20u"
00003875 4346436f6e66496e
0000387d 7465727275707420
00003885 307832307500    
0000388b 01               9043		.byte	1
0000388c b301             9044		.byte	179,1
0000388e 6b57616974466f72 9045		.strz	"kWaitForLastCFConfInterrupt 0x30u"
00003896 4c6173744346436f
0000389e 6e66496e74657272
000038a6 7570742030783330
000038ae 7500            
000038b0 01               9046		.byte	1
000038b1 b401             9047		.byte	180,1
000038b3 6b57616974466f72 9048		.strz	"kWaitForFCConfInterrupt 0x40u"
000038bb 4643436f6e66496e
000038c3 7465727275707420
000038cb 307834307500    
000038d1 01               9049		.byte	1
000038d2 b501             9050		.byte	181,1
000038d4 6b57616974466f72 9051		.strz	"kWaitForSFConfInterrupt 0x50u"
000038dc 5346436f6e66496e
000038e4 7465727275707420
000038ec 307835307500    
000038f2 01               9052		.byte	1
000038f3 b601             9053		.byte	182,1
000038f5 6b57616974466f72 9054		.strz	"kWaitForFCOverrunConfInterrupt 0x60u"
000038fd 46434f7665727275
00003905 6e436f6e66496e74
0000390d 6572727570742030
00003915 7836307500      
0000391a 01               9055		.byte	1
0000391b b701             9056		.byte	183,1
0000391d 6b57616974466f72 9057		.strz	"kWaitForFCWaitFrameConfInterrupt 0x70u"
00003925 4643576169744672
0000392d 616d65436f6e6649
00003935 6e74657272757074
0000393d 20307837307500  
00003944 01               9058		.byte	1
00003945 b801             9059		.byte	184,1

                                   Fri Apr 10 08:32:21 2020           Page 163
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
00003947 6b57616974466f72 9060		.strz	"kWaitForFCQueuedReqWaitFrameConfInterrupt 0x80u"
0000394f 4643517565756564
00003957 5265715761697446
0000395f 72616d65436f6e66
00003967 496e746572727570
0000396f 7420307838307500
00003977 01               9061		.byte	1
00003978 f101             9062		.byte	241,1
0000397a 6b54617267657442 9063		.strz	"kTargetByteOffset (0u)"
00003982 7974654f66667365
0000398a 74202830752900  
00003991 01               9064		.byte	1
00003992 f301             9065		.byte	243,1
00003994 6b54706369506f73 9066		.strz	"kTpciPos (0u + kTargetByteOffset)"
0000399c 20283075202b206b
000039a4 5461726765744279
000039ac 74654f6666736574
000039b4 2900            
000039b6 01               9067		.byte	1
000039b7 f401             9068		.byte	244,1
000039b9 6b4273506f732028 9069		.strz	"kBsPos (1u + kTargetByteOffset)"
000039c1 3175202b206b5461
000039c9 7267657442797465
000039d1 4f66667365742900
000039d9 01               9070		.byte	1
000039da f501             9071		.byte	245,1
000039dc 6b53546d696e506f 9072		.strz	"kSTminPos (2u + kTargetByteOffset)"
000039e4 7320283275202b20
000039ec 6b54617267657442
000039f4 7974654f66667365
000039fc 742900          
000039ff 01               9073		.byte	1
00003a00 f601             9074		.byte	246,1
00003a02 6b4c656e67746850 9075		.strz	"kLengthPos (1u + kTargetByteOffset)"
00003a0a 6f7320283175202b
00003a12 206b546172676574
00003a1a 427974654f666673
00003a22 65742900        
00003a26 01               9076		.byte	1
00003a27 f701             9077		.byte	247,1
00003a29 6b53464461746150 9078		.strz	"kSFDataPos (1u + kTargetByteOffset)"
00003a31 6f7320283175202b
00003a39 206b546172676574
00003a41 427974654f666673
00003a49 65742900        
00003a4d 01               9079		.byte	1
00003a4e f801             9080		.byte	248,1
00003a50 6b46464461746150 9081		.strz	"kFFDataPos (2u + kTargetByteOffset)"
00003a58 6f7320283275202b
00003a60 206b546172676574
00003a68 427974654f666673
00003a70 65742900        
00003a74 01               9082		.byte	1
00003a75 f901             9083		.byte	249,1
00003a77 6b43464461746150 9084		.strz	"kCFDataPos (1u + kTargetByteOffset)"
00003a7f 6f7320283175202b
00003a87 206b546172676574
00003a8f 427974654f666673
00003a97 65742900        
00003a9b 01               9085		.byte	1
00003a9c fc01             9086		.byte	252,1
00003a9e 747043616e527844 9087		.strz	"tpCanRxData data"
00003aa6 6174612064617461
00003aae 00              
00003aaf 01               9088		.byte	1
00003ab0 ff01             9089		.byte	255,1
00003ab2 545043495f427974 9090		.strz	"TPCI_Byte (tpCanRxData[kTpciPos])"
00003aba 652028747043616e
00003ac2 5278446174615b6b
00003aca 54706369506f735d
00003ad2 2900            
00003ad4 01               9091		.byte	1
00003ad5 8002             9092		.byte	128,2
00003ad7 444c5f4279746520 9093		.strz	"DL_Byte (tpCanRxData[kLengthPos])"
00003adf 28747043616e5278
00003ae7 446174615b6b4c65
00003aef 6e677468506f735d
00003af7 2900            
00003af9 01               9094		.byte	1
00003afa 8102             9095		.byte	129,2
00003afc 53546d696e5f4279 9096		.strz	"STmin_Byte (tpCanRxData[kSTminPos])"
00003b04 7465202874704361
00003b0c 6e5278446174615b
00003b14 6b53546d696e506f
00003b1c 735d2900        
00003b20 01               9097		.byte	1
00003b21 8402             9098		.byte	132,2
00003b23 6b5470534e537461 9099		.strz	"kTpSNStartValue 1u"
00003b2b 727456616c756520
00003b33 317500          
00003b36 01               9100		.byte	1
00003b37 e503             9101		.byte	229,3
00003b39 6b44656661756c74 9102		.strz	"kDefaultBS 8u"
00003b41 425320387500    
00003b47 01               9103		.byte	1
00003b48 eb03             9104		.byte	235,3
00003b4a 7478446174614275 9105		.strz	"txDataBuffer DiagBuffer"
00003b52 6666657220446961
00003b5a 6742756666657200
00003b62 01               9106		.byte	1
00003b63 ec03             9107		.byte	236,3
00003b65 7278446174614275 9108		.strz	"rxDataBuffer DiagBuffer"
00003b6d 6666657220446961
00003b75 6742756666657200
00003b7d 01               9109		.byte	1
00003b7e ef03             9110		.byte	239,3
00003b80 747844617461496e 9111		.strz	"txDataIndex gbTpTxDL"
00003b88 6465782067625470
00003b90 5478444c00      
00003b95 01               9112		.byte	1
00003b96 f003             9113		.byte	240,3
00003b98 7478534547206254 9114		.strz	"txSEG bTxSEG"
00003ba0 7853454700      
00003ba5 01               9115		.byte	1

                                   Fri Apr 10 08:32:21 2020           Page 164
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
00003ba6 f103             9116		.byte	241,3
00003ba8 7478534e20625478 9117		.strz	"txSN bTxSN"
00003bb0 534e00          
00003bb3 01               9118		.byte	1
00003bb4 f303             9119		.byte	243,3
00003bb6 727844617461496e 9120		.strz	"rxDataIndex gbTpRxDL"
00003bbe 6465782067625470
00003bc6 5278444c00      
00003bcb 01               9121		.byte	1
00003bcc f403             9122		.byte	244,3
00003bce 7278446174614c65 9123		.strz	"rxDataLength gbTpRxLength"
00003bd6 6e67746820676254
00003bde 7052784c656e6774
00003be6 6800            
00003be8 01               9124		.byte	1
00003be9 f503             9125		.byte	245,3
00003beb 7278534e20625278 9126		.strz	"rxSN bRxSN"
00003bf3 534e00          
00003bf6 01               9127		.byte	1
00003bf7 f803             9128		.byte	248,3
00003bf9 6b46626c54705354 9129		.strz	"kFblTpSTMinF1F9 1u"
00003c01 4d696e4631463920
00003c09 317500          
00003c0c 01               9130		.byte	1
00003c0d ff03             9131		.byte	255,3
00003c0f 6b53465f44617461 9132		.strz	"kSF_DataLength (7u - kTargetByteOffset)"
00003c17 4c656e6774682028
00003c1f 3775202d206b5461
00003c27 7267657442797465
00003c2f 4f66667365742900
00003c37 01               9133		.byte	1
00003c38 8004             9134		.byte	128,4
00003c3a 6b46465f44617461 9135		.strz	"kFF_DataLength (6u - kTargetByteOffset)"
00003c42 4c656e6774682028
00003c4a 3675202d206b5461
00003c52 7267657442797465
00003c5a 4f66667365742900
00003c62 01               9136		.byte	1
00003c63 8104             9137		.byte	129,4
00003c65 6b46435f44617461 9138		.strz	"kFC_DataLength (3u)"
00003c6d 4c656e6774682028
00003c75 33752900        
00003c79 01               9139		.byte	1
00003c7a 8204             9140		.byte	130,4
00003c7c 6b43465f44617461 9141		.strz	"kCF_DataLength (7u - kTargetByteOffset)"
00003c84 4c656e6774682028
00003c8c 3775202d206b5461
00003c94 7267657442797465
00003c9c 4f66667365742900
00003ca4 01               9142		.byte	1
00003ca5 8404             9143		.byte	132,4
00003ca7 6b436f6e66496e74 9144		.strz	"kConfInterruptTimeoutCounter (kFblTpConfInterruptTimeout / TpCallCycle)"
00003caf 6572727570745469
00003cb7 6d656f7574436f75
00003cbf 6e74657220286b46
00003cc7 626c5470436f6e66
00003ccf 496e746572727570
00003cd7 7454696d656f7574
00003cdf 202f20547043616c
00003ce7 6c4379636c652900
00003cef 01               9145		.byte	1
00003cf0 8904             9146		.byte	137,4
00003cf2 5365745761697446 9147		.strz	"SetWaitForFFConfInterrupt() { gTpConfState = kWaitForFFConfInterrupt; gTpConfTimer = kConfInterruptTimeoutCounter; }"
00003cfa 6f724646436f6e66
00003d02 496e746572727570
00003d0a 742829207b206754
00003d12 70436f6e66537461
00003d1a 7465203d206b5761
00003d22 6974466f72464643
00003d2a 6f6e66496e746572
00003d32 727570743b206754
00003d3a 70436f6e6654696d
00003d42 6572203d206b436f
00003d4a 6e66496e74657272
00003d52 75707454696d656f
00003d5a 7574436f756e7465
00003d62 723b207d00      
00003d67 01               9148		.byte	1
00003d68 8d04             9149		.byte	141,4
00003d6a 5365745761697446 9150		.strz	"SetWaitForCFConfInterrupt() { gTpConfState = kWaitForCFConfInterrupt; gTpConfTimer = kConfInterruptTimeoutCounter; }"
00003d72 6f724346436f6e66
00003d7a 496e746572727570
00003d82 742829207b206754
00003d8a 70436f6e66537461
00003d92 7465203d206b5761
00003d9a 6974466f72434643
00003da2 6f6e66496e746572
00003daa 727570743b206754
00003db2 70436f6e6654696d
00003dba 6572203d206b436f
00003dc2 6e66496e74657272
00003dca 75707454696d656f
00003dd2 7574436f756e7465
00003dda 723b207d00      
00003ddf 01               9151		.byte	1
00003de0 9104             9152		.byte	145,4
00003de2 5365745761697446 9153		.strz	"SetWaitForLastCFConfInterrupt() { gTpConfState = kWaitForLastCFConfInterrupt; gTpConfTimer = kConfInterruptTimeoutCounter; }"
00003dea 6f724c6173744346
00003df2 436f6e66496e7465
00003dfa 7272757074282920
00003e02 7b20675470436f6e
00003e0a 665374617465203d
00003e12 206b57616974466f
00003e1a 724c617374434643
00003e22 6f6e66496e746572
00003e2a 727570743b206754
00003e32 70436f6e6654696d
00003e3a 6572203d206b436f
00003e42 6e66496e74657272
00003e4a 75707454696d656f
00003e52 7574436f756e7465
00003e5a 723b207d00      
00003e5f 01               9154		.byte	1
00003e60 9504             9155		.byte	149,4
00003e62 5365745761697446 9156		.strz	"SetWaitForFCConfInterrupt() { gTpConfState = kWaitForFCConfInterrupt; gTpConfTimer = kConfInterruptTimeoutCounter; }"
00003e6a 6f724643436f6e66
00003e72 496e746572727570
00003e7a 742829207b206754
00003e82 70436f6e66537461
00003e8a 7465203d206b5761
00003e92 6974466f72464343
00003e9a 6f6e66496e746572
00003ea2 727570743b206754
00003eaa 70436f6e6654696d
00003eb2 6572203d206b436f
00003eba 6e66496e74657272
00003ec2 75707454696d656f
00003eca 7574436f756e7465
00003ed2 723b207d00      
00003ed7 01               9157		.byte	1
00003ed8 9904             9158		.byte	153,4
00003eda 5365745761697446 9159		.strz	"SetWaitForFCOverrunConfInterrupt() { gTpConfState = kWaitForFCOverrunConfInterrupt; gTpConfTimer = kConfInterruptTimeoutCounter; }"
00003ee2 6f7246434f766572
00003eea 72756e436f6e6649
00003ef2 6e74657272757074
00003efa 2829207b20675470
00003f02 436f6e6653746174
00003f0a 65203d206b576169
00003f12 74466f7246434f76
00003f1a 657272756e436f6e
00003f22 66496e7465727275
00003f2a 70743b2067547043
00003f32 6f6e6654696d6572
00003f3a 203d206b436f6e66
00003f42 496e746572727570
00003f4a 7454696d656f7574
00003f52 436f756e7465723b
00003f5a 207d00          
00003f5d 01               9160		.byte	1
00003f5e 9e04             9161		.byte	158,4
00003f60 5365745761697446 9162		.strz	"SetWaitForSFConfInterrupt() { gTpConfState = kWaitForSFConfInterrupt; gTpConfTimer = kConfInterruptTimeoutCounter; }"
00003f68 6f725346436f6e66
00003f70 496e746572727570
00003f78 742829207b206754
00003f80 70436f6e66537461
00003f88 7465203d206b5761
00003f90 6974466f72534643
00003f98 6f6e66496e746572
00003fa0 727570743b206754
00003fa8 70436f6e6654696d
00003fb0 6572203d206b436f
00003fb8 6e66496e74657272
00003fc0 75707454696d656f
00003fc8 7574436f756e7465
00003fd0 723b207d00      
00003fd5 01               9163		.byte	1
00003fd6 a904             9164		.byte	169,4
00003fd8 497357616974696e 9165		.strz	"IsWaitingForConfInterrupt() (0u != gTpConfState)"
00003fe0 67466f72436f6e66
00003fe8 496e746572727570
00003ff0 7428292028307520
00003ff8 213d20675470436f
00004000 6e66537461746529
00004008 00              
00004009 01               9166		.byte	1
0000400a aa04             9167		.byte	170,4
0000400c 476574436f6e6649 9168		.strz	"GetConfInterruptState() gTpConfState"
00004014 6e74657272757074
0000401c 5374617465282920
00004024 675470436f6e6653
0000402c 7461746500      
00004031 01               9169		.byte	1
00004032 ad04             9170		.byte	173,4
00004034 476574436f6e6649 9171		.strz	"GetConfInterruptTimer() gTpConfTimer"
0000403c 6e74657272757074
00004044 54696d6572282920
0000404c 675470436f6e6654
00004054 696d657200      

                                   Fri Apr 10 08:32:21 2020           Page 165
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
00004059 01               9172		.byte	1
0000405a af04             9173		.byte	175,4
0000405c 5265736574436f6e 9174		.strz	"ResetConfState() (gTpConfState = 0u)"
00004064 6653746174652829
0000406c 2028675470436f6e
00004074 665374617465203d
0000407c 2030752900      
00004081 01               9175		.byte	1
00004082 b004             9176		.byte	176,4
00004084 496e6974436f6e66 9177		.strz	"InitConfState() {gTpConfState = 0u; gTpConfTimer = 0u;}"
0000408c 5374617465282920
00004094 7b675470436f6e66
0000409c 5374617465203d20
000040a4 30753b2067547043
000040ac 6f6e6654696d6572
000040b4 203d2030753b7d00
000040bc 01               9178		.byte	1
000040bd b804             9179		.byte	184,4
000040bf 6b54696d656f7574 9180		.strz	"kTimeoutCF (kFblTpTimeoutCF / TpCallCycle)"
000040c7 434620286b46626c
000040cf 547054696d656f75
000040d7 744346202f205470
000040df 43616c6c4379636c
000040e7 652900          
000040ea 01               9181		.byte	1
000040eb b904             9182		.byte	185,4
000040ed 6b54696d656f7574 9183		.strz	"kTimeoutFC (kFblTpTimeoutFC / TpCallCycle)"
000040f5 464320286b46626c
000040fd 547054696d656f75
00004105 744643202f205470
0000410d 43616c6c4379636c
00004115 652900          
00004118 01               9184		.byte	1
00004119 c204             9185		.byte	194,4
0000411b 6b5472616e736d69 9186		.strz	"kTransmitCF (((kFblTpTransmitCF > TpCallCycle) ? kFblTpTransmitCF : TpCallCycle) / TpCallCycle)"
00004123 744346202828286b
0000412b 46626c5470547261
00004133 6e736d6974434620
0000413b 3e20547043616c6c
00004143 4379636c6529203f
0000414b 206b46626c547054
00004153 72616e736d697443
0000415b 46203a2054704361
00004163 6c6c4379636c6529
0000416b 202f20547043616c
00004173 6c4379636c652900
0000417b 01               9187		.byte	1
0000417c c404             9188		.byte	196,4
0000417e 6b54696d656f7574 9189		.strz	"kTimeoutFCDiagFF (kTimeoutFC + 1u)"
00004186 4643446961674646
0000418e 20286b54696d656f
00004196 75744643202b2031
0000419e 752900          
000041a1 01               9190		.byte	1
000041a2 c604             9191		.byte	198,4
000041a4 6b54696d65724f66 9192		.strz	"kTimerOff 0u"
000041ac 6620307500      
000041b1 01               9193		.byte	1
000041b2 cc04             9194		.byte	204,4
000041b4 5374617274527854 9195		.strz	"StartRxTimeoutCF(newVal,newState) { bRxTimer = (newVal); bTpRxState = (newState); }"
000041bc 696d656f75744346
000041c4 286e657756616c2c
000041cc 6e65775374617465
000041d4 29207b2062527854
000041dc 696d6572203d2028
000041e4 6e657756616c293b
000041ec 2062547052785374
000041f4 617465203d20286e
000041fc 6577537461746529
00004204 3b207d00        
00004208 01               9196		.byte	1
00004209 d004             9197		.byte	208,4
0000420b 5374617274547857 9198		.strz	"StartTxWaitForTxCF(newVal,newState) { bTxTimer = (newVal); bTpTxState = (newState); }"
00004213 616974466f725478
0000421b 4346286e65775661
00004223 6c2c6e6577537461
0000422b 746529207b206254
00004233 7854696d6572203d
0000423b 20286e657756616c
00004243 293b206254705478
0000424b 5374617465203d20
00004253 286e657753746174
0000425b 65293b207d00    
00004261 01               9199		.byte	1
00004262 d404             9200		.byte	212,4
00004264 5374617274547854 9201		.strz	"StartTxTimeoutFC(newVal,newState) { bTxTimer = (newVal); bTpTxState = (newState); }"
0000426c 696d656f75744643
00004274 286e657756616c2c
0000427c 6e65775374617465
00004284 29207b2062547854
0000428c 696d6572203d2028
00004294 6e657756616c293b
0000429c 2062547054785374
000042a4 617465203d20286e
000042ac 6577537461746529
000042b4 3b207d00        
000042b8 01               9202		.byte	1
000042b9 d904             9203		.byte	217,4
000042bb 53746f7054785469 9204		.strz	"StopTxTimer() (bTxTimer = kTimerOff)"
000042c3 6d65722829202862
000042cb 547854696d657220
000042d3 3d206b54696d6572
000042db 4f66662900      
000042e0 01               9205		.byte	1
000042e1 da04             9206		.byte	218,4
000042e3 53746f7052785469 9207		.strz	"StopRxTimer() (bRxTimer = kTimerOff)"
000042eb 6d65722829202862
000042f3 527854696d657220
000042fb 3d206b54696d6572
00004303 4f66662900      
00004308 01               9208		.byte	1
00004309 db04             9209		.byte	219,4
0000430b 547854696d657256 9210		.strz	"TxTimerValue() bTxTimer"
00004313 616c756528292062
0000431b 547854696d657200
00004323 01               9211		.byte	1
00004324 dc04             9212		.byte	220,4
00004326 446563547854696d 9213		.strz	"DecTxTimerValue() (bTxTimer--)"
0000432e 657256616c756528
00004336 2920286254785469
0000433e 6d65722d2d2900  
00004345 01               9214		.byte	1
00004346 de04             9215		.byte	222,4
00004348 527854696d657256 9216		.strz	"RxTimerValue() bRxTimer"
00004350 616c756528292062
00004358 527854696d657200
00004360 01               9217		.byte	1
00004361 df04             9218		.byte	223,4
00004363 446563527854696d 9219		.strz	"DecRxTimerValue() (bRxTimer--)"
0000436b 657256616c756528
00004373 2920286252785469
0000437b 6d65722d2d2900  
00004382 01               9220		.byte	1
00004383 e004             9221		.byte	224,4
00004385 536574527854696d 9222		.strz	"SetRxTimerValue(t) (bRxTimer = (t))"
0000438d 657256616c756528
00004395 7429202862527854
0000439d 696d6572203d2028
000043a5 74292900        
000043a9 01               9223		.byte	1
000043aa e604             9224		.byte	230,4
000043ac 7478476574537461 9225		.strz	"txGetState() bTpTxState"
000043b4 7465282920625470
000043bc 5478537461746500
000043c4 01               9226		.byte	1
000043c5 e704             9227		.byte	231,4

                                   Fri Apr 10 08:32:21 2020           Page 166
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
000043c7 7478536574537461 9228		.strz	"txSetState(newS) (bTpTxState = (newS))"
000043cf 7465286e65775329
000043d7 2028625470547853
000043df 74617465203d2028
000043e7 6e657753292900  
000043ee 01               9229		.byte	1
000043ef e904             9230		.byte	233,4
000043f1 7278476574537461 9231		.strz	"rxGetState() bTpRxState"
000043f9 7465282920625470
00004401 5278537461746500
00004409 01               9232		.byte	1
0000440a ea04             9233		.byte	234,4
0000440c 7278536574537461 9234		.strz	"rxSetState(newS) (bTpRxState = (newS))"
00004414 7465286e65775329
0000441c 2028625470527853
00004424 74617465203d2028
0000442c 6e657753292900  
00004433 01               9235		.byte	1
00004434 ec04             9236		.byte	236,4
00004436 7278476574534e28 9237		.strz	"rxGetSN() (rxSN & kL4_SNMask)"
0000443e 2920287278534e20
00004446 26206b4c345f534e
0000444e 4d61736b2900    
00004454 01               9238		.byte	1
00004455 ed04             9239		.byte	237,4
00004457 7278536574534e28 9240		.strz	"rxSetSN(newSN) (rxSN = (newSN))"
0000445f 6e6577534e292028
00004467 7278534e203d2028
0000446f 6e6577534e292900
00004477 01               9241		.byte	1
00004478 ef04             9242		.byte	239,4
0000447a 7278496e63534e28 9243		.strz	"rxIncSN() (rxSN++)"
00004482 2920287278534e2b
0000448a 2b2900          
0000448d 01               9244		.byte	1
0000448e f004             9245		.byte	240,4
00004490 7278526573657453 9246		.strz	"rxResetSN() (rxSN = 0u)"
00004498 4e28292028727853
000044a0 4e203d2030752900
000044a8 01               9247		.byte	1
000044a9 f904             9248		.byte	249,4
000044ab 547052784346466c 9249		.strz	"TpRxCFFlag 0x02u"
000044b3 6167203078303275
000044bb 00              
000044bc 01               9250		.byte	1
000044bd fa04             9251		.byte	250,4
000044bf 5365745278434646 9252		.strz	"SetRxCFFlag() (bStateFlags |= TpRxCFFlag)"
000044c7 6c61672829202862
000044cf 5374617465466c61
000044d7 6773207c3d205470
000044df 52784346466c6167
000044e7 2900            
000044e9 01               9253		.byte	1
000044ea fb04             9254		.byte	251,4
000044ec 4765745278434646 9255		.strz	"GetRxCFFlag() (TpRxCFFlag == (bStateFlags & TpRxCFFlag))"
000044f4 6c61672829202854
000044fc 7052784346466c61
00004504 67203d3d20286253
0000450c 74617465466c6167
00004514 7320262054705278
0000451c 4346466c61672929
00004524 00              
00004525 01               9256		.byte	1
00004526 fc04             9257		.byte	252,4
00004528 436c656172527843 9258		.strz	"ClearRxCFFlag() (bStateFlags &= FblInvert8Bit(TpRxCFFlag))"
00004530 46466c6167282920
00004538 2862537461746546
00004540 6c61677320263d20
00004548 46626c496e766572
00004550 7438426974285470
00004558 52784346466c6167
00004560 292900          
00004563 01               9259		.byte	1
00004564 8505             9260		.byte	133,5
00004566 5265736574537461 9261		.strz	"ResetStateFlags() (bStateFlags = 0u)"
0000456e 7465466c61677328
00004576 2920286253746174
0000457e 65466c616773203d
00004586 2030752900      
0000458b 01               9262		.byte	1
0000458c 9705             9263		.byte	151,5
0000458e 7478536574425328 9264		.strz	"txSetBS(newBS) (bTxBSCounter = (newBS))"
00004596 6e65774253292028
0000459e 6254784253436f75
000045a6 6e746572203d2028
000045ae 6e65774253292900
000045b6 01               9265		.byte	1
000045b7 9905             9266		.byte	153,5
000045b9 7478446563425343 9267		.strz	"txDecBSCnt() (bTxBSCounter--)"
000045c1 6e74282920286254
000045c9 784253436f756e74
000045d1 65722d2d2900    
000045d7 01               9268		.byte	1
000045d8 9a05             9269		.byte	154,5
000045da 7478436865636b42 9270		.strz	"txCheckBSCnt() (bTxBSCounter)"
000045e2 53436e7428292028
000045ea 6254784253436f75
000045f2 6e7465722900    
000045f8 01               9271		.byte	1
000045f9 9b05             9272		.byte	155,5
000045fb 7478436865636b42 9273		.strz	"txCheckBSZero() (bTxBSCounter)"
00004603 535a65726f282920
0000460b 286254784253436f
00004613 756e7465722900  
0000461a 01               9274		.byte	1
0000461b 9c05             9275		.byte	156,5
0000461d 7478436c65617242 9276		.strz	"txClearBS() (bTxBSCounter = 0u)"
00004625 5328292028625478
0000462d 4253436f756e7465
00004635 72203d2030752900
0000463d 01               9277		.byte	1
0000463e 9e05             9278		.byte	158,5
00004640 727852656c6f6164 9279		.strz	"rxReloadBSCnt() (bRxBSCounter = (bRxBlockSize))"
00004648 4253436e74282920
00004650 286252784253436f
00004658 756e746572203d20
00004660 28625278426c6f63
00004668 6b53697a65292900
00004670 01               9280		.byte	1
00004671 9f05             9281		.byte	159,5
00004673 7278446563425343 9282		.strz	"rxDecBSCnt() (bRxBSCounter--)"
0000467b 6e74282920286252
00004683 784253436f756e74
0000468b 65722d2d2900    
00004691 01               9283		.byte	1

                                   Fri Apr 10 08:32:21 2020           Page 167
                                   Fri Apr 10 08:32:20 2020   gh_00004l01.si
00004692 a005             9284		.byte	160,5
00004694 7278436865636b42 9285		.strz	"rxCheckBSCnt() (bRxBSCounter)"
0000469c 53436e7428292028
000046a4 6252784253436f75
000046ac 6e7465722900    
000046b2 01               9286		.byte	1
000046b3 a105             9287		.byte	161,5
000046b5 7278436865636b42 9288		.strz	"rxCheckBSZero() (bRxBSCounter)"
000046bd 535a65726f282920
000046c5 286252784253436f
000046cd 756e7465722900  
000046d4 01               9289		.byte	1
000046d5 ce05             9290		.byte	206,5
000046d7 46424c54505f5241 9291		.strz	"FBLTP_RAMCODE_START_SEC_CODE "
000046df 4d434f44455f5354
000046e7 4152545f5345435f
000046ef 434f44452000    
000046f5 03               9292		.byte	3
000046f6 cf05             9293		.byte	207,5
000046f8 18               9294		.byte	24
000046f9 01               9295		.byte	1
000046fa 2b               9296		.byte	43
000046fb 46424c5f4d454d4d 9297		.strz	"FBL_MEMMAP_ERROR "
00004703 41505f4552524f52
0000470b 2000            
0000470d 04               9298		.byte	4
0000470e 01               9299		.byte	1
0000470f d405             9300		.byte	212,5
00004711 46424c54505f5241 9301		.strz	"FBLTP_RAMCODE_STOP_SEC_CODE "
00004719 4d434f44455f5354
00004721 4f505f5345435f43
00004729 4f44452000      
0000472e 03               9302		.byte	3
0000472f d505             9303		.byte	213,5
00004731 18               9304		.byte	24
00004732 01               9305		.byte	1
00004733 2b               9306		.byte	43
00004734 46424c5f4d454d4d 9307		.strz	"FBL_MEMMAP_ERROR "
0000473c 41505f4552524f52
00004744 2000            
00004746 04               9308		.byte	4
00004747 01               9309		.byte	1
00004748 dc05             9310		.byte	220,5
0000474a 46424c54505f5241 9311		.strz	"FBLTP_RAMCODE_START_SEC_CODE "
00004752 4d434f44455f5354
0000475a 4152545f5345435f
00004762 434f44452000    
00004768 03               9312		.byte	3
00004769 dd05             9313		.byte	221,5
0000476b 18               9314		.byte	24
0000476c 01               9315		.byte	1
0000476d 2b               9316		.byte	43
0000476e 46424c5f4d454d4d 9317		.strz	"FBL_MEMMAP_ERROR "
00004776 41505f4552524f52
0000477e 2000            
00004780 04               9318		.byte	4
00004781 01               9319		.byte	1
00004782 ab0f             9320		.byte	171,15
00004784 46424c54505f5241 9321		.strz	"FBLTP_RAMCODE_STOP_SEC_CODE "
0000478c 4d434f44455f5354
00004794 4f505f5345435f43
0000479c 4f44452000      
000047a1 03               9322		.byte	3
000047a2 ac0f             9323		.byte	172,15
000047a4 18               9324		.byte	24
000047a5 01               9325		.byte	1
000047a6 2b               9326		.byte	43
000047a7 46424c5f4d454d4d 9327		.strz	"FBL_MEMMAP_ERROR "
000047af 41505f4552524f52
000047b7 2000            
000047b9 04               9328		.byte	4
000047ba 04               9329		.byte	4
000047bb 00               9330		.byte	0
                          9331		.section	.debug_abbrev
00000191 00               9332		.byte	0
                          9333		.section	.debug_info
                          9334	.Ldw_end:
