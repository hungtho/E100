
                                   Fri Apr 10 08:32:10 2020           Page 1
                                   Fri Apr 10 08:32:09 2020   gh_0000bi81.si
Command Line:   C:\ghs\comp_201754\asppc.exe -noundefined
                -stderr=err/fbl_flio_xd1.err -elf -b1 -I../../../bsw/_common
                -I../../../bsw/eep -I../../../bsw/fbl -I../../../bsw/flash
                -I../../../bsw/flash_xd1 -I../../../bsw/secmod
                -I../../../bsw/wrapnv -Ic:/ghs/comp_201754/ansi
                -Ic:/ghs/comp_201754/include/ppc -Ic:/ghs/comp_201754/src/libsys
                -Igendata -Iinclude -IC:\ghs\comp_201754\lib\ppc5514
                -cpu=ppc560xp
                -patch_dbo=C:\Vector\CBD1800772_D00_Mpc57xx\Demo\DemoFbl\Appl\obj\fbl_flio_xd1.dbo
                -source=fbl_flio_xd1.c -o obj\gh_0000bi81.o
                -list=lst/fbl_flio_xd1.lst
                C:\Users\owner\AppData\Local\Temp\gh_0000bi81.si
Source File:    C:\Users\owner\AppData\Local\Temp\gh_0000bi81.si
Directory:      C:\Vector\CBD1800772_D00_Mpc57xx\Demo\DemoFbl\Appl
Host OS:        Windows
AS: Copyright (C) 1983-2017 Green Hills Software.  All Rights Reserved.
Release: Compiler v2017.5.4
Build Directory: [Directory] COMP-VAL-WIN50:c:/autoval2/v2017.5-2017-10-03/win32-comp-ecom
Revision: [VCInfo] http://toolsvc/branches/release-branch-2017-5-comp/src@603870 (built by auto-compiler)
Revision Date: Wed Oct 04 11:30:08 2017

Release Date: Wed Oct 04 09:00:05 2017

                             1	#Driver Command: ccppc -DBRS_DERIVATIVE_SPC570S50 -DBRS_OSC_CLK=40
                             2	#		-DBRS_TIMEBASE_CLOCK=80 -DBRS_OS_USECASE_BRS
                             3	#		-DBRS_EVA_BOARD_DEFAULT -DBRS_PLATFORM_MPC57XX -DBRS_COMP_GHS
                             4	#		-DBRSHW_INSTRUCTION_SET_VLE -DBRS_CPU_STARTUP_ID=0
                             5	#		-object_dir=obj -list=lst/fbl_flio_xd1.lst
                             6	#		-stderr=err/fbl_flio_xd1.err -c -vle
                             7	#		-DC_ENABLE_INSTRUCTION_SET_VLE -D__vle --prototype_warnings
                             8	#		-Odebug -Osize -Ospace -G -dual_debug -nofloatio -cpu=ppc560xp
                             9	#		-noobj -DRAM_48K -inline_prologue -pragma_asm_inline -noSPE
                            10	#		--no_exceptions --no_commons -nokeeptempfiles -pnone
                            11	#		--incorrect_pragma_warnings --slash_comment --long_long
                            12	#		-preprocess_assembly_files -passsource -I../../../bsw/_common
                            13	#		-I../../../bsw/eep -I../../../bsw/fbl -I../../../bsw/flash
                            14	#		-I../../../bsw/flash_xd1 -I../../../bsw/secmod
                            15	#		-I../../../bsw/wrapnv -Ic:/ghs/comp_201754/ansi
                            16	#		-Ic:/ghs/comp_201754/include/ppc -Ic:/ghs/comp_201754/src/libsys
                            17	#		-Igendata -Iinclude ../../../BSW/Fbl/fbl_flio_xd1.c
                            18	#Source File:   ../../../BSW/Fbl/fbl_flio_xd1.c
                            19	#Directory:     C:\Vector\CBD1800772_D00_Mpc57xx\Demo\DemoFbl\Appl
                            20	#Compile Date:  Fri Apr 10 08:32:09 2020
                            21	#Host OS:       Win32
                            22	#Version:       C-POWERPC 2017.5.4 RELEASE VERSION
                            23	#Release:       Compiler v2017.5.4
                            24	#Revision Date: Wed Oct 04 11:39:37 2017
                            25	#Release Date:  Wed Oct 04 09:00:05 2017
                            26	# ecom  -g -w -OMS
                            27	
                            28	#1: /***********************************************************************************************************************
                            29	#2:  *  FILE DESCRIPTION
                            30	#3:  *  ------------------------------------------------------------------------------------------------------------------*/
                            31	#4: /** \file
                            32	#5:  *  \brief         Flash Driver wrapper for Freescale MPC57xx/ST SPC57x
                            33	#6:  *
                            34	#7:  *  --------------------------------------------------------------------------------------------------------------------
                            35	#8:  *  COPYRIGHT
                            36	#9:  *  --------------------------------------------------------------------------------------------------------------------
                            37	#10:  *  \par Copyright
                            38	#11:  *  \verbatim
                            39	#12:  *  Copyright (c) 2018 by Vector Informatik GmbH.                                                  All rights reserved.
                            40	#13:  *
                            41	#14:  *                This software is copyright protected and proprietary to Vector Informatik GmbH.

                                   Fri Apr 10 08:32:10 2020           Page 2
                                   Fri Apr 10 08:32:09 2020   gh_0000bi81.si
                            42	#15:  *                Vector Informatik GmbH grants to you only those rights as set out in the license conditions.
                            43	#16:  *                All other rights remain with Vector Informatik GmbH.
                            44	#17:  *  \endverbatim
                            45	#18:  */
                            46	#19: /**********************************************************************************************************************/
                            47	#21: /***********************************************************************************************************************
                            48	#22:  *  AUTHOR IDENTITY
                            49	#23:  *  --------------------------------------------------------------------------------------------------------------------
                            50	#24:  *  Name                          Initials      Company
                            51	#25:  *  --------------------------------------------------------------------------------------------------------------------
                            52	#26:  *  Achim Strobelt                Ach           Vector Informatik GmbH
                            53	#27:  *  Quetty Palacios               QPs           Vector Informatik GmbH
                            54	#28:  *  Marcel Viole                  MVi           Vector Informatik GmbH
                            55	#29:  *  Thomas Mueller                ThM           Vector Informatik GmbH
                            56	#30:  *  Marco Riedl                   Rie           Vector Informatik GmbH
                            57	#31:  *  Johannes Krimmel              KJs           Vector Informatik GmbH
                            58	#32:  *  Andreas Wenckebach            AWh           Vector Informatik GmbH
                            59	#33:  *  Dennis O'Donnell              Dod           Vector CANtech, Inc.
                            60	#34:  *  Matteo Trovo                  TMo           Vector Informatik GmbH
                            61	#35:  *  --------------------------------------------------------------------------------------------------------------------
                            62	#36:  *  REVISION HISTORY
                            63	#37:  *  --------------------------------------------------------------------------------------------------------------------
                            64	#38:  *  Version    Date        Author  Change Id        Description
                            65	#39:  *  --------------------------------------------------------------------------------------------------------------------
                            66	#40:  *  01.00.00   2013-07-05  Ach                      Initial version
                            67	#41:  *  01.01.00   2013-09-05  Ach     ESCAN00069405    Implement RCHW protection
                            68	#42:  *  01.02.00   2013-11-15  Ach     ESCAN00070397    Support second instance and data flash configuration
                            69	#43:  *  01.03.00   2014-02-28  QPs     ESCAN00073502    Support for MPC5748G derivative added
                            70	#44:  *                         MVi     ESCAN00073729    Added protection check for better error reporting
                            71	#45:  *  01.04.00   2014-05-09  Ach     ESCAN00075378    Support runtime selection of flash setup and MPC577xN/Cut 2
                            72	#46:  *  01.05.00   2014-05-13  Ach     ESCAN00075532    flashModuleSelect is not declared if flash setups are selected
                            73	#47:  *                                                   explicitly.
                            74	#48:  *  01.06.00   2014-07-17  Ach     ESCAN00075840    Support MPC577xC
                            75	#49:  *                                 ESCAN00075379    Move protection check to FblDrvFlash layer
                            76	#50:  *                                 ESCAN00076799    Add support for 577xM (Matterhorn)
                            77	#51:  *                                 ESCAN00076866    Writing of RCHWs cannot be enabled
                            78	#52:  *  01.07.00   2014-12-11  Ach     ESCAN00079411    Support SPC570S
                            79	#53:  *  01.08.00   2015-04-24  Ach     ESCAN00082598    Added FBL_ prefix to definitions
                            80	#54:  *  01.09.00   2016-01-26  Ach     ESCAN00083952    Compiler warning: Variable currentAddress is used before set
                            81	#55:  *                                 ESCAN00087630    Compiler warning: Variable "i" was declared but never referenced
                            82	#56:  *  01.10.00   2016-02-04  CB      ESCAN00088086    Added flash setup 7 for S32R
                            83	#57:  *  01.11.00   2016-03-23  ThM     ESCAN00089067    Added flash setup 8 for MPC574xK
                            84	#58:  *  01.12.00   2016-04-08  Rie     ESCAN00089146    Extended RCHW addresses for flash setup 2 for MPC5748G CUT2 (Calypso)
                            85	#59:  *                         KJs     ESCAN00089320    Support SPC58EC80/70
                            86	#60:  *  01.12.01   2016-05-02  Ach     ESCAN00089762    Do not accept RCHW write accesses with boot ID 0xA5
                            87	#61:  *  01.13.00   2016-06-23  Ach     ESCAN00090632    Support SPC582B60
                            88	#62:  *  01.14.00   2016-08-31  QPs     ESCAN00091686    Erase bit of flash block 3 for SPC58xx corrected
                            89	#63:  *                                 ESCAN00091702    Extension of block table to support memory partition 4 for SPC58XX
                            90	#64:  *  01.15.00   2016-12-10  Ach     ESCAN00093246    Rename defines to avoid collisions with MCAL
                            91	#65:  *  01.16.00   2017-03-16  Ach     ESCAN00094392    Move include of FlashRom image to header file
                            92	#66:  *  01.17.00   2017-04-03  Dod     ESCAN00094600    Support SPC58NE84
                            93	#67:  *  01.18.00   2017-04-13  Ach     ESCAN00094776    Support SPC574S (Flash Setup 10)
                            94	#68:  *  01.19.00   2017-08-12  Ach     ESCAN00096281    Support generic ECC safe read configuration switch
                            95	#69:  *  01.20.00   2017-11-08  Ach     ESCAN00096480    Support MPC5746R (Flash Setup 12)
                            96	#70:  *  01.21.00   2018-05-18  Ach     ESCAN00099445    Support SPC584B70 (Flash Setup 13)
                            97	#71:  *  01.21.01   2018-09-14  AWh     ESCAN00100743    FLASH_DRIVER_DEINIT is called unconditionally

                                   Fri Apr 10 08:32:10 2020           Page 3
                                   Fri Apr 10 08:32:09 2020   gh_0000bi81.si
                            98	#72:  *  01.21.02   2018-10-25  TMo     ESCAN00100923    Fixed SPC584B70 (Flash Setup 13)
                            99	#73:  **********************************************************************************************************************/
                           100	#75: /***********************************************************************************************************************
                           101	#76:  *  INCLUDES
                           102	#77:  **********************************************************************************************************************/
                           103	#79: #include "fbl_inc.h"
                           104	#81: /***********************************************************************************************************************
                           105	#82:  *  VERSION
                           106	#83:  **********************************************************************************************************************/
                           107	#85: #if ( FBLWRAPPERFLASH_XD1_MPC5700C55FMCHIS_VERSION != 0x0121u ) || \
                           108	#86:     ( FBLWRAPPERFLASH_XD1_MPC5700C55FMCHIS_RELEASE_VERSION != 0x02u )
                           109	#87: # error "Error in fbl_flio_xd1.c: Source and header file are inconsistent!"
                           110	#88: #endif
                           111	#89: #if ( FBLWRAPPERFLASH_XD1_MPC5700C55FMCHIS_VERSION != _FBLWRAPPERFLASH_XD1_HW_VERSION ) || \
                           112	#90:     ( FBLWRAPPERFLASH_XD1_MPC5700C55FMCHIS_RELEASE_VERSION != _FBLWRAPPERFLASH_XD1_HW_RELEASE_VERSION )
                           113	#91: # error "Error in fbl_flio_xd1.c: Source and v_ver.h are inconsistent!"
                           114	#92: #endif
                           115	#93: #if ( FBLDRVFLASH_XD1_MPC5700C55FMCHIS_VERSION < 0x0105u )
                           116	#94: # error "Error in fbl_flio_xd1.c: Incompatible FblDrvFlash used."
                           117	#95: #endif
                           118	#97: /***********************************************************************************************************************
                           119	#98:  *  DEFINES
                           120	#99:  **********************************************************************************************************************/
                           121	#101: /* Configuration options */
                           122	#102: #define kFblFlashSelectionAtRuntime -1
                           123	#104: /* Configure available flash setups */
                           124	#105: #if defined( FLASH_SETUP )
                           125	#106: # if( FLASH_SETUP == 0 )
                           126	#107: #  define FLASH_SETUP_0
                           127	#108: # elif( FLASH_SETUP == 1 )
                           128	#109: #  define FLASH_SETUP_1
                           129	#110: # elif( FLASH_SETUP == 2 )
                           130	#111: #  define FLASH_SETUP_2
                           131	#112: # elif( FLASH_SETUP == 3 )
                           132	#113: #  define FLASH_SETUP_3
                           133	#114: # elif( FLASH_SETUP == 4 )
                           134	#115: #  define FLASH_SETUP_4
                           135	#116: # elif( FLASH_SETUP == 5 )
                           136	#117: #  define FLASH_SETUP_5
                           137	#118: # elif( FLASH_SETUP == 6 )
                           138	#119: #  define FLASH_SETUP_6
                           139	#120: # elif( FLASH_SETUP == 7 )
                           140	#121: #  define FLASH_SETUP_7
                           141	#122: # elif( FLASH_SETUP == 8 )
                           142	#123: #  define FLASH_SETUP_8
                           143	#124: # elif( FLASH_SETUP == 9 )
                           144	#125: #  define FLASH_SETUP_9
                           145	#126: # elif( FLASH_SETUP == 10)
                           146	#127: #  define FLASH_SETUP_10
                           147	#128: # elif( FLASH_SETUP == 11)
                           148	#129: #  define FLASH_SETUP_11
                           149	#130: # elif( FLASH_SETUP == 12)
                           150	#131: #  define FLASH_SETUP_12
                           151	#132: # elif( FLASH_SETUP == 13)
                           152	#133: #  define FLASH_SETUP_13
                           153	#134: # elif( FLASH_SETUP == kFblFlashSelectionAtRuntime )

                                   Fri Apr 10 08:32:10 2020           Page 4
                                   Fri Apr 10 08:32:09 2020   gh_0000bi81.si
                           154	#135: #  define FLASH_SETUP_0
                           155	#136: #  define FLASH_SETUP_1
                           156	#137: #  define FLASH_SETUP_2
                           157	#138: #  define FLASH_SETUP_3
                           158	#139: #  define FLASH_SETUP_4
                           159	#140: #  define FLASH_SETUP_5
                           160	#141: #  define FLASH_SETUP_6
                           161	#142: #  define FLASH_SETUP_7
                           162	#143: #  define FLASH_SETUP_8
                           163	#144: #  define FLASH_SETUP_9
                           164	#145: #  define FLASH_SETUP_10
                           165	#146: #  define FLASH_SETUP_11
                           166	#147: #  define FLASH_SETUP_12
                           167	#148: #  define FLASH_SETUP_13
                           168	#149: #  define FLASH_SETUP_RUNTIME
                           169	#150: # else
                           170	#151: #  error "Please choose a known flash setup."
                           171	#152: # endif
                           172	#153: #else
                           173	#154: # error "Please choose a flash setup."
                           174	#155: #endif /* FLASH_SETUP */
                           175	#157: #if defined( FBL_ENABLE_USR_RREAD_SYNC )
                           176	#158: #else
                           177	#159: /* Compatibility switch for GENy */
                           178	#160: # if defined( FBL_ENABLE_DMA_FLASH_READ )
                           179	#161: #  define FBL_FLASH_ENABLE_ECC_SAFE_READ
                           180	#162: # endif /* FBL_ENABLE_DMA_FLASH_READ */
                           181	#164: # if defined( FBL_FLASH_ENABLE_ECC_SAFE_READ )
                           182	#165: #  define FBL_EDMA_CSR_START  0x0001u
                           183	#166: #  define FBL_EDMA_CSR_ACTIVE 0x0040u
                           184	#167: #  define FBL_EDMA_CSR_DONE   0x0080u
                           185	#168: #  if defined( FLASH_DMA_CHANNEL )
                           186	#169: #  else
                           187	#170: #   define FLASH_DMA_CHANNEL 0u
                           188	#171: #  endif
                           189	#172: # endif /* FBL_FLASH_ENABLE_ECC_SAFE_READ */
                           190	#173: #endif /* FBL_ENABLE_USR_RREAD_SYNC */
                           191	#175: /* Set default RCHW handling if not explicitly requested */
                           192	#176: #if defined( FBL_ENABLE_WRITE_RCHW ) || \
                           193	#177:     defined( FBL_DISABLE_WRITE_RCHW )
                           194	#178: #else
                           195	#179: # define FBL_DISABLE_WRITE_RCHW
                           196	#180: #endif
                           197	#182: /* Flash module register access macros */
                           198	#183: /** Access special function register of a flash module */ /* PRQA S 3453 1 */ /* MD_MSR_19.7 */
                           199	#184: #define FLASH_REG(a, b) *(volatile unsigned long *)((a) + (b))
                           200	#186: /* Macro to calculate array sizes */ /* PRQA S 3453 1 */ /* MD_MSR_19.7 */
                           201	#187: #define ARRAY_SIZE(a)  (sizeof(a)/sizeof((a)[0]))
                           202	#189: /* Block mask indices */
                           203	#190: #define kFlashSelectLowMid          0u             /**< Block mask index low/mid blocks */
                           204	#191: #define kFlashSelectHigh            1u             /**< Block mask index high blocks */
                           205	#192: #define kFlashSelectBig_0           2u             /**< Block mask index big blocks - first part */
                           206	#193: #define kFlashSelectBig_1           3u             /**< Block mask index big blocks - second part */
                           207	#194: #define kFlashSelectCount           4u             /**< Total count of block indices */
                           208	#196: #define kFlashAlignmentError        0x00ul         /**< Report alignment error */
                           209	#197: #define kFlashEraseAddressAligned   0x01ul         /**< Erase address aligned */

                                   Fri Apr 10 08:32:10 2020           Page 5
                                   Fri Apr 10 08:32:09 2020   gh_0000bi81.si
                           210	#198: #define kFlashEraseLengthAligned    0x02ul         /**< Erase length aligned */
                           211	#199: #define kFlashWriteAddressAligned   0x04ul         /**< Write address aligned */
                           212	#200: #define kFlashWriteLengthAligned    0x08ul         /**< Write length aligned */
                           213	#202: #define kFlashCheckAddress          0u             /**< Check state: Address */
                           214	#203: #define kFlashCheckLength           1u             /**< Check state: Length */
                           215	#204: #define kFlashStopCheck             2u             /**< Check state: Succeeded or Failed */
                           216	#206: #define kRchwMask                   0x00FF0000ul   /**< Mask of Boot ID in RCHW */
                           217	#207: #define kNrOfRchwValues             2u             /**< Number of known RCHW boot IDs */
                           218	#209: /* Size optimization if only one flash setup is used */
                           219	#210: #if defined( FLASH_SETUP_RUNTIME )
                           220	#211: #else
                           221	#212: # define kFblSingleFlashModule 0u
                           222	#213: #endif /* FLASH_SETUP_RUNTIME */
                           223	#215: /***********************************************************************************************************************
                           224	#216:  *  LOCAL DATA TYPES AND STRUCTURES
                           225	#217:  **********************************************************************************************************************/
                           226	#219: /** Describes one physical flash block */
                           227	#220: typedef struct tagC55fmcFlashBlock
                           228	#221: {
                           229	#222:    vuint32 startAddress;   /**< Start address of flash block */
                           230	#223:    vuint32 length;         /**< Length of flash block */
                           231	#224:    vuint32 count;          /**< Count of same flash blocks */
                           232	#225:    vuint32 bitMaskStart;   /**< Erase bit of flash block */
                           233	#226:    vuint32 bitMaskIndex;   /**< Bit mask selector */
                           234	#227: } tC55fmcFlashBlock;
                           235	#229: /** Describes one embedded flash memory module */
                           236	#230: typedef struct tagC55fmcFlashModule
                           237	#231: {
                           238	#232:    V_MEMROM1 tC55fmcFlashBlock V_MEMROM2 V_MEMROM3 * flashBlocks;    /**< Flash blocks assigned to flash module */
                           239	#233:    vuint32 flashBlockCount;                                          /**< Count of flash blocks */
                           240	#234:    vuint32 flashBaseAddress;                                         /**< Register base address */
                           241	#235:    vuint32 flashBigBlockSize;                                        /**< Size of big flash blocks (256K or 128K address space) */
                           242	#236:    vuint32 flashBigBlockFactor;                                      /**< Multiplication of big block count register value */
                           243	#237:    vuint32 flashSelectCount;                                         /**< Number of select registers */
                           244	#238:    V_MEMROM1 vuint32 V_MEMROM2 V_MEMROM3 * userProtectionBits;       /**< User protection bits of current flash module */
                           245	#239: #if defined( FBL_ENABLE_WRITE_RCHW )
                           246	#240: #else
                           247	#241:    V_MEMROM1 vuint32 V_MEMROM2 V_MEMROM3 * rchwPositions;            /**< Reset configuration halfword positions */
                           248	#242:    vuint32 rchwPositionCount;                                        /**< Number of RCHW start addresses */
                           249	#243: #endif /* FBL_ENABLE_WRITE_RCHW */
                           250	#244: } tC55fmcFlashModule;
                           251	#246: /***********************************************************************************************************************
                           252	#247:  *  GLOBAL DATA
                           253	#248:  **********************************************************************************************************************/
                           254	#251: /***********************************************************************************************************************
                           255	#252:  *  LOCAL DATA
                           256	#253:  **********************************************************************************************************************/
                           257	#255: /** Flash parameter structure - used to exchange data with flash driver */
                           258	#256: V_MEMRAM0 static V_MEMRAM1 tFlashParam_XD1 V_MEMRAM2 flashParam;
                           259	#258: /** Known RCHW marker values */
                           260	#259: V_MEMROM0 static V_MEMROM1 vuint32 V_MEMROM2 rchwValues[kNrOfRchwValues] = {0x005A0000ul, 0x00A50000ul};
                           261	#261: /* Flash module setups - derivative specific */
                           262	#262: #if defined( FLASH_SETUP_0 )
                           263	#263: /* Basic flash setup used by e.g. 5744P, 577xN Cut 1 */
                           264	#264: V_MEMROM0 static V_MEMROM1 tC55fmcFlashBlock V_MEMROM2 flashBlocks_0[] =
                           265	#265: {

                                   Fri Apr 10 08:32:10 2020           Page 6
                                   Fri Apr 10 08:32:09 2020   gh_0000bi81.si
                           266	#266:    {0x00800000ul, 0x00004000ul,  2ul, 0x00010000ul, kFlashSelectLowMid},   /*  16K *  2, Low Address space */
                           267	#267:    {0x00808000ul, 0x00008000ul,  2ul, 0x00000001ul, kFlashSelectLowMid},   /*  32K *  2, Mid Address space */
                           268	#268:    {0x00F98000ul, 0x00004000ul,  2ul, 0x00040000ul, kFlashSelectLowMid},   /*  16K *  2, Low Address space */
                           269	#269:    {0x00FA0000ul, 0x00010000ul,  6ul, 0x00000001ul, kFlashSelectHigh},     /*  64K *  6, High Address space */
                           270	#270:    {0x01000000ul, 0x00040000ul, 32ul, 0x00000001ul, kFlashSelectBig_0},    /* 256K * 32, 256K Address space */
                           271	#271:    {0x01800000ul, 0x00040000ul, 16ul, 0x00000001ul, kFlashSelectBig_1}     /* 256K * 16, 256K Address space */
                           272	#272: };
                           273	#273: # if defined( FBL_ENABLE_WRITE_RCHW )
                           274	#274: # else
                           275	#275: /* RCHW addresses */
                           276	#276: V_MEMROM0 static V_MEMROM1 vuint32 V_MEMROM2 rchwPositions_0[] =
                           277	#277: {
                           278	#278:    0x00F98000ul, 0x00F9C000ul, 0x00FA0000ul, 0x00FB0000ul,
                           279	#279:    0x01000000ul, 0x01040000ul, 0x01080000ul, 0x010C0000ul
                           280	#280: };
                           281	#281: # endif /* FBL_ENABLE_WRITE_RCHW */
                           282	#282:    /* Preselect lock bits for data flash (Eeprom emulation area) */
                           283	#283: #  if defined( FLASH_XD1_USER_PROTECTION_0 )
                           284	#284: #  else
                           285	#285: #   define FLASH_XD1_USER_PROTECTION_0 { 0xFFFCFFFCul, 0xFFFFFFFFul, 0xFFFFFFFFul, 0xFFFFFFFFul }
                           286	#286: #  endif /* FLASH_XD1_USER_PROTECTION_0 */
                           287	#288: /* Flash module settings */
                           288	#289: V_MEMROM0 static V_MEMROM1 vuint32 V_MEMROM2 flash_user_protection_0[4u] = FLASH_XD1_USER_PROTECTION_0;
                           289	#290: V_MEMROM0 static V_MEMROM1 tC55fmcFlashModule V_MEMROM2 flashModule_0 = { flashBlocks_0,
                           290	#291:                                                                           ARRAY_SIZE(flashBlocks_0),
                           291	#292:                                                                           FBL_FLASH_REG_0,
                           292	#293:                                                                           0x40000ul,
                           293	#294:                                                                           2ul,
                           294	#295:                                                                           4ul,
                           295	#296:                                                                           flash_user_protection_0,
                           296	#297: # if defined( FBL_ENABLE_WRITE_RCHW )
                           297	#298: # else
                           298	#299:                                                                           rchwPositions_0,
                           299	#300:                                                                           ARRAY_SIZE(rchwPositions_0)
                           300	#301: # endif /* FBL_ENABLE_WRITE_RCHW */
                           301	#302:                                                                          };
                           302	#303: #endif /* FLASH_SETUP_0 */
                           303	#304: #if defined( FLASH_SETUP_1 )
                           304	#305: /* Flash setup used by first 5744P samples - second 16K data flash block missing (e5076) */
                           305	#306: V_MEMROM0 static V_MEMROM1 tC55fmcFlashBlock V_MEMROM2 flashBlocks_1[] =
                           306	#307: {
                           307	#308:    {0x00800000ul, 0x00004000ul,  1ul, 0x00010000ul, kFlashSelectLowMid},   /*  16K *  1, Low Address space - second block missing due to e5076 */
                           308	#309:    {0x00804000ul, 0x00008000ul,  2ul, 0x00000001ul, kFlashSelectLowMid},   /*  32K *  2, Mid Address space */
                           309	#310:    {0x00F98000ul, 0x00004000ul,  2ul, 0x00040000ul, kFlashSelectLowMid},   /*  16K *  2, Low Address space */
                           310	#311:    {0x00FA0000ul, 0x00010000ul,  6ul, 0x00000001ul, kFlashSelectHigh},     /*  64K *  6, High Address space */
                           311	#312:    {0x01000000ul, 0x00040000ul, 32ul, 0x00000001ul, kFlashSelectBig_0},    /* 256K * 32, 256K Address space */
                           312	#313:    {0x01800000ul, 0x00040000ul, 16ul, 0x00000001ul, kFlashSelectBig_1}     /* 256K * 16, 256K Address space */
                           313	#314: };
                           314	#315: # if defined( FBL_ENABLE_WRITE_RCHW )
                           315	#316: # else
                           316	#317: /* RCHW addresses */
                           317	#318: V_MEMROM0 static V_MEMROM1 vuint32 V_MEMROM2 rchwPositions_1[] =
                           318	#319: {
                           319	#320:    0x00F98000ul, 0x00F9C000ul, 0x00FA0000ul, 0x00FB0000ul,
                           320	#321:    0x01000000ul, 0x01040000ul, 0x01080000ul, 0x010C0000ul
                           321	#322: };

                                   Fri Apr 10 08:32:10 2020           Page 7
                                   Fri Apr 10 08:32:09 2020   gh_0000bi81.si
                           322	#323: # endif /* FBL_ENABLE_WRITE_RCHW */
                           323	#324:    /* Preselect lock bits for data flash (Eeprom emulation area) */
                           324	#325: #  if defined( FLASH_XD1_USER_PROTECTION_1 )
                           325	#326: #  else
                           326	#327: #   define FLASH_XD1_USER_PROTECTION_1 { 0xFFFEFFFCul, 0xFFFFFFFFul, 0xFFFFFFFFul, 0xFFFFFFFFul }
                           327	#328: #  endif /* FLASH_XD1_USER_PROTECTION_1 */
                           328	#330: /* Flash module settings */
                           329	#331: V_MEMROM0 static V_MEMROM1 vuint32 V_MEMROM2 flash_user_protection_1[4u] = FLASH_XD1_USER_PROTECTION_1;
                           330	#332: V_MEMROM0 static V_MEMROM1 tC55fmcFlashModule V_MEMROM2 flashModule_1 = { flashBlocks_1,
                           331	#333:                                                                           ARRAY_SIZE(flashBlocks_1),
                           332	#334:                                                                           FBL_FLASH_REG_0,
                           333	#335:                                                                           0x40000ul,
                           334	#336:                                                                           2ul,
                           335	#337:                                                                           4ul,
                           336	#338:                                                                           flash_user_protection_1,
                           337	#339: # if defined( FBL_ENABLE_WRITE_RCHW )
                           338	#340: # else
                           339	#341:                                                                           rchwPositions_1,
                           340	#342:                                                                           ARRAY_SIZE(rchwPositions_1)
                           341	#343: # endif /* FBL_ENABLE_WRITE_RCHW */
                           342	#344:                                                                          };
                           343	#345: #endif /* FLASH_SETUP_1 */
                           344	#346: #if defined( FLASH_SETUP_2 )
                           345	#347: /* Flash setup used by 574xG samples */
                           346	#348: V_MEMROM0 static V_MEMROM1 tC55fmcFlashBlock V_MEMROM2 flashBlocks_2[] =
                           347	#349: {
                           348	#350:    {0x00400000ul, 0x00004000ul,  1ul, 0x80000000ul, kFlashSelectLowMid},   /*  16K *  1, UTest NVM Block */
                           349	#351:    {0x00404000ul, 0x00004000ul,  1ul, 0x00020000ul, kFlashSelectLowMid},   /*  16K *  1, BAF Block */
                           350	#352:    {0x00610000ul, 0x00010000ul,  1ul, 0x00800000ul, kFlashSelectLowMid},   /*  64K *  1, HSM Code Block 2 */
                           351	#353:    {0x00620000ul, 0x00010000ul,  1ul, 0x02000000ul, kFlashSelectLowMid},   /*  64K *  1, HSM Code Block 3 */
                           352	#354:    {0x00F80000ul, 0x00004000ul,  2ul, 0x00000001ul, kFlashSelectHigh},     /*  16K *  2, HSM Data */
                           353	#355:    {0x00F8C000ul, 0x00004000ul,  1ul, 0x00010000ul, kFlashSelectLowMid},   /*  16K *  1, Low Address space */
                           354	#356:    {0x00F90000ul, 0x00004000ul,  8ul, 0x00000001ul, kFlashSelectLowMid},   /*  16K *  8, Mid Address space */
                           355	#357:    {0x00FB0000ul, 0x00008000ul,  2ul, 0x00000100ul, kFlashSelectLowMid},   /*  32K *  2, Mid Address space */
                           356	#358:    {0x00FC0000ul, 0x00008000ul,  4ul, 0x00040000ul, kFlashSelectLowMid},   /*  32K *  4, Low Address space */
                           357	#359:    {0x00FE0000ul, 0x00010000ul,  1ul, 0x00400000ul, kFlashSelectLowMid},   /*  64K *  1, Low Address space */
                           358	#360:    {0x00FF0000ul, 0x00010000ul,  1ul, 0x01000000ul, kFlashSelectLowMid},   /*  64K *  1, Low Address space */
                           359	#361:    {0x01000000ul, 0x00040000ul, 32ul, 0x00000001ul, kFlashSelectBig_0},    /* 256K * 32, 256K Address space */
                           360	#362:    {0x01800000ul, 0x00040000ul, 16ul, 0x00000001ul, kFlashSelectBig_1}     /* 256K * 16, 256K Address space */
                           361	#363: };
                           362	#364: # if defined( FBL_ENABLE_WRITE_RCHW )
                           363	#365: # else
                           364	#366: /* RCHW addresses */
                           365	#367: V_MEMROM0 static V_MEMROM1 vuint32 V_MEMROM2 rchwPositions_2[] =
                           366	#368: {
                           367	#369:    0x00F8C000ul, 0x00F90000ul, 0x00F94000ul, 0x00F98000ul,
                           368	#370:    0x00F9C000ul, 0x00FA0000ul, 0x00FA4000ul, 0x00FA8000ul,
                           369	#371:    0x00FC0000ul, 0x00FD8000ul, 0x00FE0000ul
                           370	#372: };
                           371	#373: # endif /* FBL_ENABLE_WRITE_RCHW */
                           372	#374:    /* Preselect lock bits for data flash (Eeprom emulation area) */
                           373	#375: #  if defined( FLASH_XD1_USER_PROTECTION_2 )
                           374	#376: #  else
                           375	#377: #   define FLASH_XD1_USER_PROTECTION_2 { 0xFFFFFC00ul, 0xFFFFFFFFul, 0xFFFFFFFFul, 0xFFFFFFFFul }
                           376	#378: #  endif /* FLASH_XD1_USER_PROTECTION_2 */
                           377	#379: /* Flash module settings */

                                   Fri Apr 10 08:32:10 2020           Page 8
                                   Fri Apr 10 08:32:09 2020   gh_0000bi81.si
                           378	#380: V_MEMROM0 static V_MEMROM1 vuint32 V_MEMROM2 flash_user_protection_2[4u] = FLASH_XD1_USER_PROTECTION_2;
                           379	#381: V_MEMROM0 static V_MEMROM1 tC55fmcFlashModule V_MEMROM2 flashModule_2 = { flashBlocks_2,
                           380	#382:                                                                           ARRAY_SIZE(flashBlocks_2),
                           381	#383:                                                                           FBL_FLASH_REG_0,
                           382	#384:                                                                           0x40000ul,
                           383	#385:                                                                           2ul,
                           384	#386:                                                                           4ul,
                           385	#387:                                                                           flash_user_protection_2,
                           386	#388: # if defined( FBL_ENABLE_WRITE_RCHW )
                           387	#389: # else
                           388	#390:                                                                           rchwPositions_2,
                           389	#391:                                                                           ARRAY_SIZE(rchwPositions_2)
                           390	#392: # endif /* FBL_ENABLE_WRITE_RCHW */
                           391	#393:                                                                          };
                           392	#394: #endif /* FLASH_SETUP_2 */
                           393	#395: #if defined( FLASH_SETUP_3 )
                           394	#396: /* Flash setup used by 577xN/Cut2 samples */
                           395	#397: V_MEMROM0 static V_MEMROM1 tC55fmcFlashBlock V_MEMROM2 flashBlocks_3[] =
                           396	#398: {
                           397	#399:    {0x00800000ul, 0x00004000ul,  2ul, 0x00010000ul, kFlashSelectLowMid},   /*  16K * 2, eeprom block 0-1 */
                           398	#400:    {0x00808000ul, 0x00008000ul,  2ul, 0x00040000ul, kFlashSelectLowMid},   /*  32K * 2, eeprom block 2-3 */
                           399	#401:    {0x00F98000ul, 0x00004000ul,  2ul, 0x00000001ul, kFlashSelectLowMid},   /*  16K * 2, Mid Address space */
                           400	#402:    {0x00FA0000ul, 0x00010000ul,  6ul, 0x00000004ul, kFlashSelectLowMid},   /*  64K * 6, Mid Address space */
                           401	#403:    {0x01000000ul, 0x00040000ul, 32ul, 0x00000001ul, kFlashSelectBig_0},    /* 256K * 32, 256K Address space */
                           402	#404:    {0x01800000ul, 0x00040000ul, 16ul, 0x00000001ul, kFlashSelectBig_1}     /* 256K * 16, 256K Address space */
                           403	#405: };
                           404	#406: # if defined( FBL_ENABLE_WRITE_RCHW )
                           405	#407: # else
                           406	#408: /* RCHW addresses */
                           407	#409: V_MEMROM0 static V_MEMROM1 vuint32 V_MEMROM2 rchwPositions_3[] =
                           408	#410: {
                           409	#411:    0x00F98000ul, 0x00F9C000ul, 0x00FA0000ul, 0x00FB0000ul,
                           410	#412:    0x01000000ul, 0x01040000ul, 0x01080000ul, 0x010C0000ul
                           411	#413: };
                           412	#414: # endif /* FBL_ENABLE_WRITE_RCHW */
                           413	#415:    /* Preselect lock bits for data flash (Eeprom emulation area) */
                           414	#416: #  if defined( FLASH_XD1_USER_PROTECTION_3 )
                           415	#417: #  else
                           416	#418: #   define FLASH_XD1_USER_PROTECTION_3 { 0xFFF0FFFFul, 0xFFFFFFFFul, 0xFFFFFFFFul, 0xFFFFFFFFul }
                           417	#419: #  endif /* FLASH_XD1_USER_PROTECTION_3 */
                           418	#420: /* Flash module settings */
                           419	#421: V_MEMROM0 static V_MEMROM1 vuint32 V_MEMROM2 flash_user_protection_3[4u] = FLASH_XD1_USER_PROTECTION_3;
                           420	#422: V_MEMROM0 static V_MEMROM1 tC55fmcFlashModule V_MEMROM2 flashModule_3 = { flashBlocks_3,
                           421	#423:                                                                           ARRAY_SIZE(flashBlocks_3),
                           422	#424:                                                                           FBL_FLASH_REG_0,
                           423	#425:                                                                           0x40000ul,
                           424	#426:                                                                           2ul,
                           425	#427:                                                                           4ul,
                           426	#428:                                                                           flash_user_protection_3,
                           427	#429: # if defined( FBL_ENABLE_WRITE_RCHW )
                           428	#430: # else
                           429	#431:                                                                           rchwPositions_3,
                           430	#432:                                                                           ARRAY_SIZE(rchwPositions_3)
                           431	#433: # endif /* FBL_ENABLE_WRITE_RCHW */
                           432	#434:                                                                          };
                           433	#435: #endif /* FLASH_SETUP_3 */

                                   Fri Apr 10 08:32:10 2020           Page 9
                                   Fri Apr 10 08:32:09 2020   gh_0000bi81.si
                           434	#436: #if defined( FLASH_SETUP_4 )
                           435	#437: /* Flash setup used by 577xC samples */
                           436	#438: V_MEMROM0 static V_MEMROM1 tC55fmcFlashBlock V_MEMROM2 flashBlocks_4[] =
                           437	#439: {
                           438	#440:    {0x00000000ul, 0x00010000ul,  2ul, 0x00010000ul, kFlashSelectLowMid},   /*  64K * 2, Eeprom Data Block 0-1 */
                           439	#441:    {0x00020000ul, 0x00010000ul,  2ul, 0x00000001ul, kFlashSelectLowMid},   /*  64K * 2, Eeprom Data Block 2-3 */
                           440	#442:    {0x00600000ul, 0x00004000ul,  2ul, 0x00000001ul, kFlashSelectHigh},     /*  16K * 2, CSE Data Block 0-1 */
                           441	#443:    {0x00800000ul, 0x00040000ul, 32ul, 0x00000001ul, kFlashSelectBig_0}     /* 256K * 32, 256K Address space */
                           442	#444: };
                           443	#445: # if defined( FBL_ENABLE_WRITE_RCHW )
                           444	#446: # else
                           445	#447: /* RCHW addresses */
                           446	#448: V_MEMROM0 static V_MEMROM1 vuint32 V_MEMROM2 rchwPositions_4[] =
                           447	#449: {
                           448	#450:    0x00000000ul, 0x00010000ul, 0x00020000ul, 0x00030000ul, 0x00800000ul
                           449	#451: };
                           450	#452: # endif /* FBL_ENABLE_WRITE_RCHW */
                           451	#453:    /* Preselect lock bits for data flash (Eeprom emulation area) */
                           452	#454: #  if defined( FLASH_XD1_USER_PROTECTION_4 )
                           453	#455: #  else
                           454	#456: #   define FLASH_XD1_USER_PROTECTION_4 { 0xFFFCFFFCul, 0xFFFFFFFFul, 0xFFFFFFFFul, 0xFFFFFFFFul }
                           455	#457: #  endif /* FLASH_XD1_USER_PROTECTION_4 */
                           456	#458: /* Flash module settings */
                           457	#459: V_MEMROM0 static V_MEMROM1 vuint32 V_MEMROM2 flash_user_protection_4[4u] = FLASH_XD1_USER_PROTECTION_4;
                           458	#460: V_MEMROM0 static V_MEMROM1 tC55fmcFlashModule V_MEMROM2 flashModule_4 = { flashBlocks_4,
                           459	#461:                                                                           ARRAY_SIZE(flashBlocks_4),
                           460	#462:                                                                           FBL_FLASH_REG_0,
                           461	#463:                                                                           0x40000ul,
                           462	#464:                                                                           2ul,
                           463	#465:                                                                           3ul,
                           464	#466:                                                                           flash_user_protection_4,
                           465	#467: # if defined( FBL_ENABLE_WRITE_RCHW )
                           466	#468: # else
                           467	#469:                                                                           rchwPositions_4,
                           468	#470:                                                                           ARRAY_SIZE(rchwPositions_4)
                           469	#471: # endif /* FBL_ENABLE_WRITE_RCHW */
                           470	#472:                                                                          };
                           471	#473: #endif /* FLASH_SETUP_4 */
                           472	#474: #if defined( FLASH_SETUP_5 )
                           473	#475: /* Flash setup used by 577xM samples */
                           474	#476: V_MEMROM0 static V_MEMROM1 tC55fmcFlashBlock V_MEMROM2 flashBlocks_5[] =
                           475	#477: {
                           476	#478:    {0x00400000ul, 0x00004000ul,  1ul, 0x80000000ul, kFlashSelectLowMid},   /*  16K *  1, UTest NVM Block */
                           477	#479:    {0x00404000ul, 0x00004000ul,  1ul, 0x00010000ul, kFlashSelectLowMid},   /*  16K *  1, BAF Block */
                           478	#480:    {0x0060C000ul, 0x00004000ul,  1ul, 0x00200000ul, kFlashSelectLowMid},   /*  16K *  1, 1 * 16 KB secure code flash */
                           479	#481:    {0x00610000ul, 0x00010000ul,  2ul, 0x04000000ul, kFlashSelectLowMid},   /*  64K *  1, HSM Code Block 2, 3 */
                           480	#482:    {0x00680000ul, 0x00004000ul,  2ul, 0x00000001ul, kFlashSelectLowMid},   /*  16K *  2, HSM Data */
                           481	#483:    {0x00800000ul, 0x00010000ul,  8ul, 0x00000001ul, kFlashSelectHigh},     /*  64K *  8, Data Flash (Eeprom) */
                           482	#484:    {0x00FC0000ul, 0x00004000ul,  4ul, 0x00020000ul, kFlashSelectLowMid},   /*  16K *  4, Low Address space */
                           483	#485:    {0x00FD0000ul, 0x00008000ul,  2ul, 0x00400000ul, kFlashSelectLowMid},   /*  32K *  2, Low Address space */
                           484	#486:    {0x00FE0000ul, 0x00010000ul,  2ul, 0x01000000ul, kFlashSelectLowMid},   /*  64K *  2, Low Address space */
                           485	#487:    {0x01000000ul, 0x00040000ul, 32ul, 0x00000001ul, kFlashSelectBig_0},    /* 256K * 32, 256K Address space */
                           486	#488:    {0x01800000ul, 0x00040000ul, 16ul, 0x00000001ul, kFlashSelectBig_1}     /* 256K * 16, 256K Address space */
                           487	#489: };
                           488	#490: # if defined( FBL_ENABLE_WRITE_RCHW )
                           489	#491: # else

                                   Fri Apr 10 08:32:10 2020           Page 10
                                   Fri Apr 10 08:32:09 2020   gh_0000bi81.si
                           490	#492: /* RCHW addresses */
                           491	#493: V_MEMROM0 static V_MEMROM1 vuint32 V_MEMROM2 rchwPositions_5[] =
                           492	#494: {
                           493	#495:    0x00FC0000ul, 0x00FC4000ul, 0x00FC8000ul, 0x00FCC000ul,
                           494	#496:    0x01000000ul, 0x01040000ul, 0x01080000ul, 0x010C0000ul
                           495	#497: };
                           496	#498: # endif /* FBL_ENABLE_WRITE_RCHW */
                           497	#499:    /* Preselect lock bits for data flash (Eeprom emulation area) */
                           498	#500: #  if defined( FLASH_XD1_USER_PROTECTION_5 )
                           499	#501: #  else
                           500	#502: #   define FLASH_XD1_USER_PROTECTION_5 { 0xFFFFFFFFul, 0xFFFFFF00ul, 0xFFFFFFFFul, 0xFFFFFFFFul }
                           501	#503: #  endif /* FLASH_XD1_USER_PROTECTION_5 */
                           502	#504: /* Flash module settings */
                           503	#505: V_MEMROM0 static V_MEMROM1 vuint32 V_MEMROM2 flash_user_protection_5[4u] = FLASH_XD1_USER_PROTECTION_5;
                           504	#506: V_MEMROM0 static V_MEMROM1 tC55fmcFlashModule V_MEMROM2 flashModule_5 = { flashBlocks_5,
                           505	#507:                                                                           ARRAY_SIZE(flashBlocks_5),
                           506	#508:                                                                           FBL_FLASH_REG_0,
                           507	#509:                                                                           0x40000ul,
                           508	#510:                                                                           2ul,
                           509	#511:                                                                           4ul,
                           510	#512:                                                                           flash_user_protection_5,
                           511	#513: # if defined( FBL_ENABLE_WRITE_RCHW )
                           512	#514: # else
                           513	#515:                                                                           rchwPositions_5,
                           514	#516:                                                                           ARRAY_SIZE(rchwPositions_5)
                           515	#517: # endif /* FBL_ENABLE_WRITE_RCHW */
                           516	#518:                                                                          };
                           517	#519: #endif /* FLASH_SETUP_5 */
                           518	#520: #if defined( FLASH_SETUP_6 )
                           519	#521: /* Flash setup used by SPC570S samples */
                           520	#522: V_MEMROM0 static V_MEMROM1 tC55fmcFlashBlock V_MEMROM2 flashBlocks_6[] =
                           521	#523: {
                           522	#524:    {0x00800000ul, 0x00002000ul,  4ul, 0x00000001ul, kFlashSelectHigh},     /*   8K *  4, B1F0 - B1F3 */
                           523	#525:    {0x00FC0000ul, 0x00004000ul,  4ul, 0x00020000ul, kFlashSelectLowMid},   /*  16K *  4, B0F1 - B0F4 */
                           524	#526:    {0x00FD0000ul, 0x00008000ul,  2ul, 0x00200000ul, kFlashSelectLowMid},   /*  32K *  2, B0F5, B0F6 */
                           525	#527:    {0x00FE0000ul, 0x00010000ul,  2ul, 0x00800000ul, kFlashSelectLowMid},   /*  64K *  2, B0F7, B0F8 */
                           526	#528:    {0x01000000ul, 0x00020000ul, 32ul, 0x00000001ul, kFlashSelectBig_0}     /* 128K * 32, 128K Address space */
                           527	#529: };
                           528	#530: # if defined( FBL_ENABLE_WRITE_RCHW )
                           529	#531: # else
                           530	#532: /* RCHW addresses */
                           531	#533: V_MEMROM0 static V_MEMROM1 vuint32 V_MEMROM2 rchwPositions_6[] =
                           532	#534: {
                           533	#535:    0x00FC0000ul, 0x00FC4000ul, 0x00FC8000ul, 0x00FCC000ul,
                           534	#536:    0x01000000ul, 0x01020000ul, 0x00404000ul
                           535	#537: };
                           536	#538: # endif /* FBL_ENABLE_WRITE_RCHW */
                           537	#539:    /* Preselect lock bits for data flash (Eeprom emulation area) */
                           538	#540: #  if defined( FLASH_XD1_USER_PROTECTION_6 )
                           539	#541: #  else
                           540	#542: #   define FLASH_XD1_USER_PROTECTION_6 { 0xFFFFFFFFul, 0xFFFFFFF0ul, 0xFFFFFFFFul, 0xFFFFFFFFul }
                           541	#543: #  endif /* FLASH_XD1_USER_PROTECTION_6 */
                           542	#544: /* Flash module settings */
                           543	#545: V_MEMROM0 static V_MEMROM1 vuint32 V_MEMROM2 flash_user_protection_6[4u] = FLASH_XD1_USER_PROTECTION_6;
                           544	#546: V_MEMROM0 static V_MEMROM1 tC55fmcFlashModule V_MEMROM2 flashModule_6 = { flashBlocks_6,
                           545	#547:                                                                           ARRAY_SIZE(flashBlocks_6),

                                   Fri Apr 10 08:32:10 2020           Page 11
                                   Fri Apr 10 08:32:09 2020   gh_0000bi81.si
                           546	#548:                                                                           FBL_FLASH_REG_0,
                           547	#549:                                                                           0x20000ul,
                           548	#550:                                                                           1ul,
                           549	#551:                                                                           3ul,
                           550	#552:                                                                           flash_user_protection_6,
                           551	#553: # if defined( FBL_ENABLE_WRITE_RCHW )
                           552	#554: # else
                           553	#555:                                                                           rchwPositions_6,
                           554	#556:                                                                           ARRAY_SIZE(rchwPositions_6)
                           555	#557: # endif /* FBL_ENABLE_WRITE_RCHW */
                           556	#558:                                                                          };
                           557	#559: #endif /* FLASH_SETUP_6 */
                           558	#560: #if defined( FLASH_SETUP_7 )
                           559	#561: /* Flash setup used by S32R samples */
                           560	#562: V_MEMROM0 static V_MEMROM1 tC55fmcFlashBlock V_MEMROM2 flashBlocks_7[] =
                           561	#563: {
                           562	#564:    {0x00800000ul, 0x00004000ul,  1ul, 0x00010000ul, kFlashSelectLowMid},   /*  16K * 1, eeprom block 0 */
                           563	#565:    {0x00804000ul, 0x00004000ul,  1ul, 0x00040000ul, kFlashSelectLowMid},   /*  16K * 1, eeprom block 2 */
                           564	#566:    {0x00808000ul, 0x00004000ul,  1ul, 0x00020000ul, kFlashSelectLowMid},   /*  16K * 1, eeprom block 1 */
                           565	#567:    {0x0080C000ul, 0x00004000ul,  1ul, 0x00080000ul, kFlashSelectLowMid},   /*  16K * 1, eeprom block 3 */
                           566	#568:    {0x00A00000ul, 0x00004000ul,  2ul, 0x00000001ul, kFlashSelectHigh},     /*  16K * 2, CSE2 High Address Space */
                           567	#569:    {0x00F98000ul, 0x00004000ul,  2ul, 0x00000001ul, kFlashSelectLowMid},   /*  16K * 2, Mid Address space */
                           568	#570:    {0x00FA0000ul, 0x00010000ul,  6ul, 0x00000004ul, kFlashSelectLowMid},   /*  64K * 6, Mid Address space */
                           569	#571:    {0x01000000ul, 0x00040000ul, 32ul, 0x00000001ul, kFlashSelectBig_0},    /* 256K * 32, 256K Address space */
                           570	#572:    {0x01800000ul, 0x00040000ul, 16ul, 0x00000001ul, kFlashSelectBig_1}     /* 256K * 16, 256K Address space */
                           571	#573: };
                           572	#574: # if defined( FBL_ENABLE_WRITE_RCHW )
                           573	#575: # else
                           574	#576: /* RCHW addresses */
                           575	#577: V_MEMROM0 static V_MEMROM1 vuint32 V_MEMROM2 rchwPositions_7[] =
                           576	#578: {
                           577	#579:    0x00F98000ul, 0x00F9C000ul, 0x00FA0000ul, 0x00FB0000ul,
                           578	#580:    0x01000000ul, 0x01040000ul, 0x01080000ul, 0x010C0000ul
                           579	#581: };
                           580	#582: # endif /* FBL_ENABLE_WRITE_RCHW */
                           581	#583:    /* Preselect lock bits for data flash (Eeprom emulation area) */
                           582	#584: #  if defined( FLASH_XD1_USER_PROTECTION_7 )
                           583	#585: #  else
                           584	#586: #   define FLASH_XD1_USER_PROTECTION_7 { 0xFFF0FFFFul, 0xFFFFFFFFul, 0xFFFFFFFFul, 0xFFFFFFFFul }
                           585	#587: #  endif /* FLASH_XD1_USER_PROTECTION_7 */
                           586	#588: /* Flash module settings */
                           587	#589: V_MEMROM0 static V_MEMROM1 vuint32 V_MEMROM2 flash_user_protection_7[4u] = FLASH_XD1_USER_PROTECTION_7;
                           588	#590: V_MEMROM0 static V_MEMROM1 tC55fmcFlashModule V_MEMROM2 flashModule_7 = { flashBlocks_7,
                           589	#591:                                                                           ARRAY_SIZE(flashBlocks_7),
                           590	#592:                                                                           FBL_FLASH_REG_0,
                           591	#593:                                                                           0x40000ul,
                           592	#594:                                                                           2ul,
                           593	#595:                                                                           4ul,
                           594	#596:                                                                           flash_user_protection_7,
                           595	#597: # if defined( FBL_ENABLE_WRITE_RCHW )
                           596	#598: # else
                           597	#599:                                                                           rchwPositions_7,
                           598	#600:                                                                           ARRAY_SIZE(rchwPositions_7)
                           599	#601: # endif /* FBL_ENABLE_WRITE_RCHW */
                           600	#602:                                                                          };
                           601	#603: #endif /* FLASH_SETUP_7 */

                                   Fri Apr 10 08:32:10 2020           Page 12
                                   Fri Apr 10 08:32:09 2020   gh_0000bi81.si
                           602	#604: #if defined( FLASH_SETUP_8 )
                           603	#605: /* Flash setup used by 574Kxx samples */
                           604	#606: V_MEMROM0 static V_MEMROM1 tC55fmcFlashBlock V_MEMROM2 flashBlocks_8[] =
                           605	#607: {
                           606	#608:    {0x00800000ul, 0x00004000ul,  4ul, 0x00000001ul, kFlashSelectHigh},     /*  16K *  4, EEPROM Block */
                           607	#609:    {0x00FC0000ul, 0x00004000ul,  4ul, 0x00020000ul, kFlashSelectLowMid},   /*  16K *  4, Low Address space */
                           608	#610:    {0x00FD0000ul, 0x00008000ul,  2ul, 0x00200000ul, kFlashSelectLowMid},   /*  32K *  2, Low Address space */
                           609	#611:    {0x00FE0000ul, 0x00010000ul,  2ul, 0x00800000ul, kFlashSelectLowMid},   /*  64K *  2, Low Address space */
                           610	#612:    {0x01000000ul, 0x00040000ul, 32ul, 0x00000001ul, kFlashSelectBig_0}     /* 256K *  32, 256K Address space */
                           611	#613: };
                           612	#614: # if defined( FBL_ENABLE_WRITE_RCHW )
                           613	#615: # else
                           614	#616: /* RCHW addresses */
                           615	#617: V_MEMROM0 static V_MEMROM1 vuint32 V_MEMROM2 rchwPositions_8[] =
                           616	#618: {
                           617	#619:    0x00FC0000ul, 0x00FC4000ul, 0x00FC8000ul, 0x00FCC000ul,
                           618	#620:    0x01000000ul, 0x01040000ul, 0x01080000ul, 0x010C0000ul
                           619	#621: };
                           620	#622: # endif /* FBL_ENABLE_WRITE_RCHW */
                           621	#623:    /* Preselect lock bits for data flash (Eeprom emulation area) */
                           622	#624: #  if defined( FLASH_XD1_USER_PROTECTION_8 )
                           623	#625: #  else
                           624	#626: #   define FLASH_XD1_USER_PROTECTION_8 { 0xFFFFFFFFul, 0xFFFFFFF0ul, 0xFFFFFFFFul, 0xFFFFFFFFul }
                           625	#627: #  endif /* FLASH_XD1_USER_PROTECTION_8 */
                           626	#628: /* Flash module settings */
                           627	#629: V_MEMROM0 static V_MEMROM1 vuint32 V_MEMROM2 flash_user_protection_8[4u] = FLASH_XD1_USER_PROTECTION_8;
                           628	#630: V_MEMROM0 static V_MEMROM1 tC55fmcFlashModule V_MEMROM2 flashModule_8 = { flashBlocks_8,
                           629	#631:                                                                           ARRAY_SIZE(flashBlocks_8),
                           630	#632:                                                                           FBL_FLASH_REG_0,
                           631	#633:                                                                           0x40000ul,
                           632	#634:                                                                           1ul,
                           633	#635:                                                                           3ul,
                           634	#636:                                                                           flash_user_protection_8,
                           635	#637: # if defined( FBL_ENABLE_WRITE_RCHW )
                           636	#638: # else
                           637	#639:                                                                           rchwPositions_8,
                           638	#640:                                                                           ARRAY_SIZE(rchwPositions_8)
                           639	#641: # endif /* FBL_ENABLE_WRITE_RCHW */
                           640	#642:                                                                          };
                           641	#643: #endif /* FLASH_SETUP_8 */
                           642	#644: #if defined( FLASH_SETUP_9 )
                           643	#645: /* Flash setup used by SPC58EC80/70 */
                           644	#646: V_MEMROM0 static V_MEMROM1 tC55fmcFlashBlock V_MEMROM2 flashBlocks_9[] =
                           645	#647: {
                           646	#648:    {0x0060C000ul, 0x00004000ul,  1ul, 0x00200000ul, kFlashSelectLowMid},   /*  16K *  1, 1 * 16 KB secure code flash */
                           647	#649:    {0x00610000ul, 0x00010000ul,  2ul, 0x04000000ul, kFlashSelectLowMid},   /*  64K *  1, HSM Code Block 2, 3 */
                           648	#650:    {0x00680000ul, 0x00004000ul,  2ul, 0x00000001ul, kFlashSelectLowMid},   /*  16K *  2, HSM Data */
                           649	#651:    {0x00800000ul, 0x00008000ul,  4ul, 0x00000001ul, kFlashSelectHigh},     /*  32K *  4, Data Flash (Eeprom) */
                           650	#652:    {0x00FC0000ul, 0x00004000ul,  1ul, 0x00080000ul, kFlashSelectLowMid},   /*  16K *  1, Low Address space  */
                           651	#653:    {0x00FC4000ul, 0x00004000ul,  1ul, 0x00020000ul, kFlashSelectLowMid},   /*  16K *  1, Low Address space  */
                           652	#654:    {0x00FC8000ul, 0x00004000ul,  1ul, 0x00100000ul, kFlashSelectLowMid},   /*  16K *  1, Low Address space  */
                           653	#655:    {0x00FCC000ul, 0x00004000ul,  1ul, 0x00040000ul, kFlashSelectLowMid},   /*  16K *  1, Low Address space  */
                           654	#656:    {0x00FD0000ul, 0x00008000ul,  2ul, 0x00400000ul, kFlashSelectLowMid},   /*  32K *  2, Low Address space  */
                           655	#657:    {0x00FE0000ul, 0x00010000ul,  2ul, 0x01000000ul, kFlashSelectLowMid},   /*  64K *  2, Low Address space  */
                           656	#658:    {0x01000000ul, 0x00020000ul,  2ul, 0x00000001ul, kFlashSelectBig_0},    /* 128K *  2, 256K Address space */
                           657	#659:    {0x01040000ul, 0x00040000ul, 22ul, 0x00000004ul, kFlashSelectBig_0}     /* 256K * 22, 256K Address space */

                                   Fri Apr 10 08:32:10 2020           Page 13
                                   Fri Apr 10 08:32:09 2020   gh_0000bi81.si
                           658	#660: };
                           659	#661: # if defined( FBL_ENABLE_WRITE_RCHW )
                           660	#662: # else
                           661	#663: /* RCHW addresses */
                           662	#664: V_MEMROM0 static V_MEMROM1 vuint32 V_MEMROM2 rchwPositions_9[] =
                           663	#665: {
                           664	#666:    0x00FC0000ul, 0x00FC4000ul, 0x00FC8000ul, 0x00FCC000ul,
                           665	#667:    0x01000000ul, 0x01020000ul
                           666	#668: };
                           667	#669: # endif /* FBL_ENABLE_WRITE_RCHW */
                           668	#670:    /* Preselect lock bits for data flash (Eeprom emulation area) */
                           669	#671: #  if defined( FLASH_XD1_USER_PROTECTION_9 )
                           670	#672: #  else
                           671	#673: #   define FLASH_XD1_USER_PROTECTION_9 { 0xFFFFFFFFul, 0xFFFFFFF0ul, 0xFFFFFFFFul, 0xFFFFFFFFul }
                           672	#674: #  endif /* FLASH_XD1_USER_PROTECTION_9 */
                           673	#675: /* Flash module settings */
                           674	#676: V_MEMROM0 static V_MEMROM1 vuint32 V_MEMROM2 flash_user_protection_9[4u] = FLASH_XD1_USER_PROTECTION_9;
                           675	#677: V_MEMROM0 static V_MEMROM1 tC55fmcFlashModule V_MEMROM2 flashModule_9 = { flashBlocks_9,
                           676	#678:                                                                           ARRAY_SIZE(flashBlocks_9),
                           677	#679:                                                                           FBL_FLASH_REG_0,
                           678	#680:                                                                           0x40000ul,
                           679	#681:                                                                           1ul,
                           680	#682:                                                                           4ul,
                           681	#683:                                                                           flash_user_protection_9,
                           682	#684: # if defined( FBL_ENABLE_WRITE_RCHW )
                           683	#685: # else
                           684	#686:                                                                           rchwPositions_9,
                           685	#687:                                                                           ARRAY_SIZE(rchwPositions_9)
                           686	#688: # endif /* FBL_ENABLE_WRITE_RCHW */
                           687	#689:                                                                          };
                           688	#690: #endif /* FLASH_SETUP_9 */
                           689	#691: #if defined( FLASH_SETUP_10 )
                           690	#692: /* Flash setup used by SPC582B60, SPC574S */
                           691	#693: V_MEMROM0 static V_MEMROM1 tC55fmcFlashBlock V_MEMROM2 flashBlocks_10[] =
                           692	#694: {
                           693	#695:    {0x00800000ul, 0x00004000ul,  4ul, 0x00000001ul, kFlashSelectHigh},     /*  16K *  4, Data flash (Eeprom) */
                           694	#696:    {0x00FC0000ul, 0x00004000ul,  4ul, 0x00020000ul, kFlashSelectLowMid},   /*  16K *  4, Low Address space   */
                           695	#697:    {0x00FD0000ul, 0x00008000ul,  2ul, 0x00200000ul, kFlashSelectLowMid},   /*  32K *  2, Low Address space   */
                           696	#698:    {0x00FE0000ul, 0x00010000ul,  2ul, 0x00800000ul, kFlashSelectLowMid},   /*  64K *  2, Low Address space   */
                           697	#699:    {0x01000000ul, 0x00020000ul,  6ul, 0x00000001ul, kFlashSelectBig_0}     /* 128K *  6, 256K Address space  */
                           698	#700: };
                           699	#701: # if defined( FBL_ENABLE_WRITE_RCHW )
                           700	#702: # else
                           701	#703: /* RCHW addresses */
                           702	#704: V_MEMROM0 static V_MEMROM1 vuint32 V_MEMROM2 rchwPositions_10[] =
                           703	#705: {
                           704	#706:    0x00FC0000ul, 0x00FC4000ul, 0x00FC8000ul, 0x00FCC000ul,
                           705	#707:    0x01000000ul, 0x01020000ul, 0x01040000ul
                           706	#708: };
                           707	#709: # endif /* FBL_ENABLE_WRITE_RCHW */
                           708	#710:    /* Preselect lock bits for data flash (Eeprom emulation area) */
                           709	#711: #  if defined( FLASH_XD1_USER_PROTECTION_10 )
                           710	#712: #  else
                           711	#713: #   define FLASH_XD1_USER_PROTECTION_10 { 0xFFFFFFFFul, 0xFFFFFFF0ul, 0xFFFFFFFFul, 0xFFFFFFFFul }
                           712	#714: #  endif /* FLASH_XD1_USER_PROTECTION_10 */
                           713	#715: /* Flash module settings */

                                   Fri Apr 10 08:32:10 2020           Page 14
                                   Fri Apr 10 08:32:09 2020   gh_0000bi81.si
                           714	#716: V_MEMROM0 static V_MEMROM1 vuint32 V_MEMROM2 flash_user_protection_10[4u] = FLASH_XD1_USER_PROTECTION_10;
                           715	#717: V_MEMROM0 static V_MEMROM1 tC55fmcFlashModule V_MEMROM2 flashModule_10 = { flashBlocks_10,
                           716	#718:                                                                           ARRAY_SIZE(flashBlocks_10),
                           717	#719:                                                                           FBL_FLASH_REG_0,
                           718	#720:                                                                           0x20000ul,
                           719	#721:                                                                           1ul,
                           720	#722:                                                                           4ul,
                           721	#723:                                                                           flash_user_protection_10,
                           722	#724: # if defined( FBL_ENABLE_WRITE_RCHW )
                           723	#725: # else
                           724	#726:                                                                           rchwPositions_10,
                           725	#727:                                                                           ARRAY_SIZE(rchwPositions_10)
                           726	#728: # endif /* FBL_ENABLE_WRITE_RCHW */
                           727	#729:                                                                          };
                           728	#730: #endif /* FLASH_SETUP_10 */
                           729	#731: #if defined( FLASH_SETUP_11 )
                           730	#732: /* Flash setup used by SPC58NE84 */
                           731	#733: V_MEMROM0 static V_MEMROM1 tC55fmcFlashBlock V_MEMROM2 flashBlocks_11[] =
                           732	#734: {
                           733	#735:    {0x0060C000ul, 0x00004000ul,  1ul, 0x00200000ul, kFlashSelectLowMid},   /*  16K *  1, 1 * 16 KB secure code flash */
                           734	#736:    {0x00610000ul, 0x00010000ul,  2ul, 0x04000000ul, kFlashSelectLowMid},   /*  64K *  1, HSM Code Block 2, 3 */
                           735	#737:    {0x00680000ul, 0x00004000ul,  2ul, 0x00000001ul, kFlashSelectLowMid},   /*  16K *  2, HSM Data */
                           736	#738:    {0x00800000ul, 0x00010000ul,  4ul, 0x00000001ul, kFlashSelectHigh},     /*  64K *  4, Data Flash (Eeprom) */
                           737	#739:    {0x00FC0000ul, 0x00004000ul,  1ul, 0x00080000ul, kFlashSelectLowMid},   /*  16K *  1, Low Address space  */
                           738	#740:    {0x00FC4000ul, 0x00004000ul,  1ul, 0x00020000ul, kFlashSelectLowMid},   /*  16K *  1, Low Address space  */
                           739	#741:    {0x00FC8000ul, 0x00004000ul,  1ul, 0x00100000ul, kFlashSelectLowMid},   /*  16K *  1, Low Address space  */
                           740	#742:    {0x00FCC000ul, 0x00004000ul,  1ul, 0x00040000ul, kFlashSelectLowMid},   /*  16K *  1, Low Address space  */
                           741	#743:    {0x00FD0000ul, 0x00008000ul,  2ul, 0x00400000ul, kFlashSelectLowMid},   /*  32K *  2, Low Address space  */
                           742	#744:    {0x00FE0000ul, 0x00010000ul,  2ul, 0x01000000ul, kFlashSelectLowMid},   /*  64K *  2, Low Address space  */
                           743	#745:    {0x01000000ul, 0x00020000ul,  2ul, 0x00000001ul, kFlashSelectBig_0},    /* 128K *  2, 256K Address space */
                           744	#746:    {0x01040000ul, 0x00040000ul, 22ul, 0x00000004ul, kFlashSelectBig_0}     /* 256K * 22, 256K Address space */
                           745	#747: };
                           746	#748: # if defined( FBL_ENABLE_WRITE_RCHW )
                           747	#749: # else
                           748	#750: /* RCHW addresses */
                           749	#751: V_MEMROM0 static V_MEMROM1 vuint32 V_MEMROM2 rchwPositions_11[] =
                           750	#752: {
                           751	#753:    0x00FC0000ul, 0x00FC4000ul, 0x00FC8000ul, 0x00FCC000ul,
                           752	#754:    0x01000000ul, 0x01020000ul
                           753	#755: };
                           754	#756: # endif /* FBL_ENABLE_WRITE_RCHW */
                           755	#757:    /* Preselect lock bits for data flash (Eeprom emulation area) */
                           756	#758: #  if defined( FLASH_XD1_USER_PROTECTION_11 )
                           757	#759: #  else
                           758	#760: #   define FLASH_XD1_USER_PROTECTION_11 { 0xFFFFFFFFul, 0xFFFFFFF0ul, 0xFFFFFFFFul, 0xFFFFFFFFul }
                           759	#761: #  endif /* FLASH_XD1_USER_PROTECTION_11 */
                           760	#762: /* Flash module settings */
                           761	#763: V_MEMROM0 static V_MEMROM1 vuint32 V_MEMROM2 flash_user_protection_11[4u] = FLASH_XD1_USER_PROTECTION_11;
                           762	#764: V_MEMROM0 static V_MEMROM1 tC55fmcFlashModule V_MEMROM2 flashModule_11 = { flashBlocks_11,
                           763	#765:                                                                           ARRAY_SIZE(flashBlocks_11),
                           764	#766:                                                                           FBL_FLASH_REG_0,
                           765	#767:                                                                           0x40000ul,
                           766	#768:                                                                           1ul,
                           767	#769:                                                                           4ul,
                           768	#770:                                                                           flash_user_protection_11,
                           769	#771: # if defined( FBL_ENABLE_WRITE_RCHW )

                                   Fri Apr 10 08:32:10 2020           Page 15
                                   Fri Apr 10 08:32:09 2020   gh_0000bi81.si
                           770	#772: # else
                           771	#773:                                                                           rchwPositions_11,
                           772	#774:                                                                           ARRAY_SIZE(rchwPositions_11)
                           773	#775: # endif /* FBL_ENABLE_WRITE_RCHW */
                           774	#776:                                                                          };
                           775	#777: #endif /* FLASH_SETUP_11 */
                           776	#778: #if defined( FLASH_SETUP_12 )
                           777	#779: /* Flash setup used by MPC5746R */
                           778	#780: V_MEMROM0 static V_MEMROM1 tC55fmcFlashBlock V_MEMROM2 flashBlocks_12[] =
                           779	#781: {
                           780	#782:    { 0x00800000ul, 0x00004000ul, 8ul, 0x00000001ul, kFlashSelectLowMid },  /* 16 K * 8, EEPROM, Low address space */
                           781	#783:    { 0x00820000ul, 0x00010000ul, 2ul, 0x00000100ul, kFlashSelectLowMid },  /* 64 K * 2, EEPROM, Low address space */
                           782	#784:    { 0x00F9C000ul, 0x00004000ul, 1ul, 0x00200000ul, kFlashSelectLowMid },  /* 16 K * 1 , Low address space */
                           783	#785:    { 0x00FA0000ul, 0x00004000ul, 4ul, 0x00020000ul, kFlashSelectLowMid },  /* 16 K * 4, Low address space */
                           784	#786:    { 0x00FB0000ul, 0x00008000ul, 2ul, 0x00400000ul, kFlashSelectLowMid },  /* 32 K * 2, Low address space */
                           785	#787:    { 0x00FC0000ul, 0x00010000ul, 4ul, 0x01000000ul, kFlashSelectLowMid },  /* 64 K * 4, Low address space */
                           786	#788:    { 0x01000000ul, 0x00040000ul, 3ul, 0x00000001ul, kFlashSelectBig_0 },   /* 256K * 3, 256K address space */
                           787	#789:    { 0x010C0000ul, 0x00040000ul, 3ul, 0x00000080ul, kFlashSelectBig_0 },   /* 256K * 3, 256K address space */
                           788	#790:    { 0x01180000ul, 0x00040000ul, 4ul, 0x00000008ul, kFlashSelectBig_0 },   /* 256K * 4, 256K address space */
                           789	#791:    { 0x01280000ul, 0x00040000ul, 4ul, 0x00000400ul, kFlashSelectBig_0 }    /* 256K * 4, 256K address space */
                           790	#792: };
                           791	#793: # if defined( FBL_ENABLE_WRITE_RCHW )
                           792	#794: # else
                           793	#795: /* RCHW addresses */
                           794	#796: V_MEMROM0 static V_MEMROM1 vuint32 V_MEMROM2 rchwPositions_12[] =
                           795	#797: {
                           796	#798:    0x00F9C000ul, 0x00FA0000ul, 0x00FA4000ul, 0x00FA8000ul,
                           797	#799:    0x01000000ul, 0x01040000ul, 0x01080000ul, 0x010C0000ul
                           798	#800: };
                           799	#801: # endif /* FBL_ENABLE_WRITE_RCHW */
                           800	#802:    /* Preselect lock bits for data flash (Eeprom emulation area) */
                           801	#803: #  if defined( FLASH_XD1_USER_PROTECTION_12 )
                           802	#804: #  else
                           803	#805: #   define FLASH_XD1_USER_PROTECTION_12 { 0xFFFFFC00ul, 0xFFFFFFFFul, 0xFFFFFFFFul, 0xFFFFFFFFul }
                           804	#806: #  endif /* FLASH_XD1_USER_PROTECTION_12 */
                           805	#807: /* Flash module settings */
                           806	#808: V_MEMROM0 static V_MEMROM1 vuint32 V_MEMROM2 flash_user_protection_12[4u] = FLASH_XD1_USER_PROTECTION_12;
                           807	#809: V_MEMROM0 static V_MEMROM1 tC55fmcFlashModule V_MEMROM2 flashModule_12 = { flashBlocks_12,
                           808	#810:                                                                            ARRAY_SIZE(flashBlocks_12),
                           809	#811:                                                                            FBL_FLASH_REG_0,
                           810	#812:                                                                            0x40000ul,
                           811	#813:                                                                            2ul,
                           812	#814:                                                                            4ul,
                           813	#815:                                                                            flash_user_protection_12,
                           814	#816: # if defined( FBL_ENABLE_WRITE_RCHW )
                           815	#817: # else
                           816	#818:                                                                            rchwPositions_12,
                           817	#819:                                                                            ARRAY_SIZE(rchwPositions_12)
                           818	#820: # endif /* FBL_ENABLE_WRITE_RCHW */
                           819	#821: };
                           820	#822: #endif /* FLASH_SETUP_12 */
                           821	#823: #if defined( FLASH_SETUP_13 )
                           822	#824: /* Flash setup used by SPC584B70 */
                           823	#825: V_MEMROM0 static V_MEMROM1 tC55fmcFlashBlock V_MEMROM2 flashBlocks_13[] =
                           824	#826: {
                           825	#827:    { 0x0060C000ul, 0x00004000ul, 1ul, 0x00080000ul, kFlashSelectLowMid },  /* 16K  * 1,  HSM Code, Low address space */

                                   Fri Apr 10 08:32:10 2020           Page 16
                                   Fri Apr 10 08:32:09 2020   gh_0000bi81.si
                           826	#828:    { 0x00610000ul, 0x00020000ul, 1ul, 0x00800000ul, kFlashSelectLowMid },  /* 128K * 1,  HSM Code, Low address space */
                           827	#829:    { 0x00680000ul, 0x00004000ul, 2ul, 0x00000001ul, kFlashSelectLowMid },  /* 16K  * 2,  HSM EEPROM, Mid address space */
                           828	#830:    { 0x00800000ul, 0x00004000ul, 4ul, 0x00000001ul, kFlashSelectHigh },    /* 16K  * 4,  EEPROM, High address space */
                           829	#831:    { 0x00FC0000ul, 0x00004000ul, 2ul, 0x00020000ul, kFlashSelectLowMid },  /* 16K  * 2,  Low address space */
                           830	#832:    { 0x00FC8000ul, 0x00008000ul, 3ul, 0x00100000ul, kFlashSelectLowMid },  /* 32K  * 3,  Low address space */
                           831	#833:    { 0x00FE0000ul, 0x00020000ul, 1ul, 0x00000001ul, kFlashSelectBig_0 },   /* 128K * 1,  256K address space  */
                           832	#834:    { 0x01000000ul, 0x00040000ul, 7ul, 0x00000002ul, kFlashSelectBig_0 },   /* 256K * 7,  256K address space  */
                           833	#835: };
                           834	#836: # if defined( FBL_ENABLE_WRITE_RCHW )
                           835	#837: # else
                           836	#838: /* RCHW addresses */
                           837	#839: V_MEMROM0 static V_MEMROM1 vuint32 V_MEMROM2 rchwPositions_13[] =
                           838	#840: {
                           839	#841:    0x00FC0000ul, 0x00FC4000ul, 0x00FC8000ul, 0x00FD0000ul,
                           840	#842:    0x00FE0000ul, 0x01000000ul
                           841	#843: };
                           842	#844: # endif /* FBL_ENABLE_WRITE_RCHW */
                           843	#845:    /* Preselect lock bits for data flash (Eeprom emulation area) */
                           844	#846: #  if defined( FLASH_XD1_USER_PROTECTION_13 )
                           845	#847: #  else
                           846	#848: #   define FLASH_XD1_USER_PROTECTION_13 { 0xFFFFFFFFul, 0xFFFFFFF0ul, 0xFFFFFFFFul, 0xFFFFFFFFul }
                           847	#849: #  endif /* FLASH_XD1_USER_PROTECTION_13 */
                           848	#850: /* Flash module settings */
                           849	#851: V_MEMROM0 static V_MEMROM1 vuint32 V_MEMROM2 flash_user_protection_13[4u] = FLASH_XD1_USER_PROTECTION_13;
                           850	#852: V_MEMROM0 static V_MEMROM1 tC55fmcFlashModule V_MEMROM2 flashModule_13 = { flashBlocks_13,
                           851	#853:                                                                            ARRAY_SIZE(flashBlocks_13),
                           852	#854:                                                                            FBL_FLASH_REG_0,
                           853	#855:                                                                            0x40000ul,
                           854	#856:                                                                            1ul,
                           855	#857:                                                                            4ul,
                           856	#858:                                                                            flash_user_protection_13,
                           857	#859: # if defined( FBL_ENABLE_WRITE_RCHW )
                           858	#860: # else
                           859	#861:                                                                            rchwPositions_13,
                           860	#862:                                                                            ARRAY_SIZE(rchwPositions_13)
                           861	#863: # endif /* FBL_ENABLE_WRITE_RCHW */
                           862	#864: };
                           863	#865: #endif /* FLASH_SETUP_13 */
                           864	#867: /** Flash module list: 1 member if a static configuration is selected, several
                           865	#868:     if runtime configuration is selected. */
                           866	#869: V_MEMROM0 static V_MEMROM1 tC55fmcFlashModule V_MEMROM2 V_MEMROM3 * V_MEMROM1 V_MEMROM2 flashModule[] =
                           867	#870: {
                           868	#871: #if defined( FLASH_SETUP_0 )
                           869	#872:    &flashModule_0
                           870	#873: #endif /* FLASH_SETUP_0 */
                           871	#874: #if defined( FLASH_SETUP_RUNTIME )
                           872	#875:    ,
                           873	#876: #endif /* FLASH_SETUP_RUNTIME */
                           874	#877: #if defined( FLASH_SETUP_1 )
                           875	#878:    &flashModule_1
                           876	#879: #endif /* FLASH_SETUP_1 */
                           877	#880: #if defined( FLASH_SETUP_RUNTIME )
                           878	#881:    ,
                           879	#882: #endif /* FLASH_SETUP_RUNTIME */
                           880	#883: #if defined( FLASH_SETUP_2 )
                           881	#884:    &flashModule_2

                                   Fri Apr 10 08:32:10 2020           Page 17
                                   Fri Apr 10 08:32:09 2020   gh_0000bi81.si
                           882	#885: #endif /* FLASH_SETUP_2 */
                           883	#886: #if defined( FLASH_SETUP_RUNTIME )
                           884	#887:    ,
                           885	#888: #endif /* FLASH_SETUP_RUNTIME */
                           886	#889: #if defined( FLASH_SETUP_3 )
                           887	#890:    &flashModule_3
                           888	#891: #endif /* FLASH_SETUP_3 */
                           889	#892: #if defined( FLASH_SETUP_RUNTIME )
                           890	#893:    ,
                           891	#894: #endif /* FLASH_SETUP_RUNTIME */
                           892	#895: #if defined( FLASH_SETUP_4 )
                           893	#896:    &flashModule_4
                           894	#897: #endif /* FLASH_SETUP_4 */
                           895	#898: #if defined( FLASH_SETUP_RUNTIME )
                           896	#899:    ,
                           897	#900: #endif /* FLASH_SETUP_RUNTIME */
                           898	#901: #if defined( FLASH_SETUP_5 )
                           899	#902:    &flashModule_5
                           900	#903: #endif /* FLASH_SETUP_5 */
                           901	#904: #if defined( FLASH_SETUP_RUNTIME )
                           902	#905:    ,
                           903	#906: #endif /* FLASH_SETUP_RUNTIME */
                           904	#907: #if defined( FLASH_SETUP_6 )
                           905	#908:    &flashModule_6
                           906	#909: #endif /* FLASH_SETUP_6 */
                           907	#910: #if defined( FLASH_SETUP_RUNTIME )
                           908	#911:    ,
                           909	#912: #endif /* FLASH_SETUP_RUNTIME */
                           910	#913: #if defined( FLASH_SETUP_7 )
                           911	#914:    &flashModule_7
                           912	#915: #endif /* FLASH_SETUP_7 */
                           913	#916: #if defined( FLASH_SETUP_RUNTIME )
                           914	#917:    ,
                           915	#918: #endif /* FLASH_SETUP_RUNTIME */
                           916	#919: #if defined( FLASH_SETUP_8 )
                           917	#920:    &flashModule_8
                           918	#921: #endif /* FLASH_SETUP_8 */
                           919	#922: #if defined( FLASH_SETUP_RUNTIME )
                           920	#923:    ,
                           921	#924: #endif /* FLASH_SETUP_RUNTIME */
                           922	#925: #if defined( FLASH_SETUP_9 )
                           923	#926:    &flashModule_9
                           924	#927: #endif /* FLASH_SETUP_9 */
                           925	#928: #if defined( FLASH_SETUP_RUNTIME )
                           926	#929:    ,
                           927	#930: #endif /* FLASH_SETUP_RUNTIME */
                           928	#931: #if defined( FLASH_SETUP_10 )
                           929	#932:    &flashModule_10
                           930	#933: #endif /* FLASH_SETUP_10 */
                           931	#934: #if defined( FLASH_SETUP_RUNTIME )
                           932	#935:    ,
                           933	#936: #endif /* FLASH_SETUP_RUNTIME */
                           934	#937: #if defined( FLASH_SETUP_11 )
                           935	#938:    &flashModule_11
                           936	#939: #endif /* FLASH_SETUP_11 */
                           937	#940: #if defined( FLASH_SETUP_RUNTIME )

                                   Fri Apr 10 08:32:10 2020           Page 18
                                   Fri Apr 10 08:32:09 2020   gh_0000bi81.si
                           938	#941:    ,
                           939	#942: #endif /* FLASH_SETUP_RUNTIME */
                           940	#943: #if defined( FLASH_SETUP_12 )
                           941	#944:    &flashModule_12
                           942	#945: #endif
                           943	#946: #if defined( FLASH_SETUP_13 )
                           944	#947:    &flashModule_13
                           945	#948: #endif
                           946	#949: };
                           947	#951: /** Currently used flash module */
                           948	#952: V_MEMRAM0 static V_MEMROM1 tC55fmcFlashModule V_MEMROM2 V_MEMROM3 * V_MEMRAM1 V_MEMRAM2 flashModuleSelect;
                           949	#954: /***********************************************************************************************************************
                           950	#955:  *  LOCAL FUNCTION PROTOTYPES
                           951	#956:  **********************************************************************************************************************/
                           952	#958: static vuint32 getNumberOfFlashBlocks( const tC55fmcFlashModule * pFlashModule, const tC55fmcFlashBlock * pFlashBlock );
                           953	#959: static vuint32 checkAddress( vuint32 * flashBlockMask, tFblLength length, tFblAddress address );
                           954	#960: #if defined( FBL_ENABLE_WRITE_RCHW )
                           955	#961: #else
                           956	#962: static tFlashAddress_XD1 checkForRchwBootId( tFblLength length, tFblAddress address, vuint32 * pData );
                           957	#963: #endif /* FBL_ENABLE_WRITE_RCHW */
                           958	#965: /***********************************************************************************************************************
                           959	#966:  *   LOCAL FUNCTIONS
                           960	#967:  **********************************************************************************************************************/
                           961	#969: /***********************************************************************************************************************
                           962	#970:  *  getNumberOfFlashBlocks
                           963	#971:  **********************************************************************************************************************/
                           964	#972: /*! \brief       Computes number of flash blocks to be processed
                           965	#973:  *  \details     This function corrects the number of flashable blocks depending on
                           966	#974:  *               the MECR register of the flash module.
                           967	#975:  *  \param[in]   pFlashModule Flash module configuration
                           968	#976:  *  \param[in]   pFlashBlock Flash block configuration
                           969	#977:  *  \return      Number of flashable blocks for current implementation
                           970	#978:  **********************************************************************************************************************/
                           971		.section ".vletext", "vax"
                           972		.vle
                           973		.vle
                           974	..bof.C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_flio_xd1...43.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl..5E8FB079..0::
                           975		.align	1
                           976	..gh.f.p.4.a.1.r.0.e.0:
                           977		.type	..gh.f.p.4.a.1.r.0.e.0,@object
                           978		.size	..gh.f.p.4.a.1.r.0.e.0,0
                           979		.global	getNumberOfFlashBlocks..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_flio_xd1.
                           980	getNumberOfFlashBlocks..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_flio_xd1.:
                           981	getNumberOfFlashBlocks:
00000000 0137              982		se_mr	r7, r3
                           983	#	    .bf
                           984	.LDW01:
                           985	#979: static vuint32 getNumberOfFlashBlocks( const tC55fmcFlashModule * pFlashModule, const tC55fmcFlashBlock * pFlashBlock )
                           986	#980: {
                           987	#981:    vuint32 result;
                           988	#983:    /* Due to bit mask length, only 32 flash blocks can be addressed */
                           989	#984:    result = 32ul;
00000002 c404              990		se_lwz	r0, 16(r4)
                           991	#986:    /* Calculate maximum number of flash blocks for current iteration step */
                           992	#987:    switch (pFlashBlock->bitMaskIndex)
00000004 4a03              993		se_li	r3, 32

                                   Fri Apr 10 08:32:10 2020           Page 19
                                   Fri Apr 10 08:32:09 2020   gh_0000bi81.si
00000006 2210              994		se_cmpli	r0, 2
00000008 e400              995		se_blt	.L11
0000000a e600              996		se_beq	.L7
0000000c 2220              997		se_cmpli	r0, 3
0000000e e600              998		se_beq	.L8
                           999	.L9:
                          1000	#1016:             }
                          1001	#1017:             else
                          1002	#1018:             {
                          1003	#1019:                /* Second big mask does not include any flash blocks */
                          1004	#1020:                result = 0ul;
                          1005	#1021:             }
                          1006	#1022:          }
                          1007	#1023:          else
                          1008	#1024:          {
                          1009	#1025:             /* Only 3 or less select masks available. */
                          1010	#1026:             result = 0ul;
                          1011	#1027:          }
                          1012	#1028:          break;
                          1013	#1029:       }
                          1014	#1030:       default:
                          1015	#1031:       {
                          1016	#1032:          /* Error - unknown flash block type */
                          1017	#1033:          result = 0ul;
                          1018	#line1033
                          1019	..lin.e23f74c6..f923b00f.0_1::
                          1020	.LDWlin1:
00000010 4803             1021		se_li	r3, 0
00000012 e800             1022		se_b	.L11
                          1023	.L7:
                          1024	#988:    {
                          1025	#989:       /* Low/Mid: Table is assumed to be correct */
                          1026	#990:       case kFlashSelectLowMid:
                          1027	#991:       {
                          1028	#992:          break;
                          1029	#993:       }
                          1030	#994:       /* High: Table is assumed to be correct */
                          1031	#995:       case kFlashSelectHigh:
                          1032	#996:       {
                          1033	#997:          break;
                          1034	#998:       }
                          1035	#999:       case kFlashSelectBig_0:
                          1036	#1000:       {
                          1037	#1001:          /* Correct big block erase count to real value */
                          1038	#1002:          /* PRQA S 0303 1 */ /* MD_FblFlioMpc57xx_0303 */
                          1039	#1003:          result = ((FLASH_REG(pFlashModule->flashBaseAddress, FBL_FLASH_MCRE_OFFSET_XD1) & 0x1F000000ul) >> 24u) * pFlashModule->flashBigBlockFactor;
                          1040	#line1003
                          1041	..lin.e23f74c6..f923b00f.0_2::
                          1042	.LDWlin2:
00000014 c267             1043		se_lwz	r6, 8(r7)
00000016 c206             1044		se_lwz	r0, 8(r6)
00000018 c437             1045		se_lwz	r3, 16(r7)
0000001a 740046ff         1046		extrwi	r0, r0, 5, 3
0000001e 0503             1047		se_mullw	r3, r0
                          1048	#1004:          break;
00000020 e800             1049		se_b	.L11

                                   Fri Apr 10 08:32:10 2020           Page 20
                                   Fri Apr 10 08:32:09 2020   gh_0000bi81.si
                          1050	.L8:
                          1051	#1005:       }
                          1052	#1006:       case kFlashSelectBig_1:
                          1053	#1007:       {
                          1054	#1008:          if (pFlashModule->flashSelectCount > kFlashSelectBig_0)
                          1055	#line1008
                          1056	..lin.e23f74c6..f923b00f.0_3::
                          1057	.LDWlin3:
00000022 c507             1058		se_lwz	r0, 20(r7)
00000024 2210             1059		se_cmpli	r0, 2
00000026 e100             1060		se_ble	.L9
                          1061	#1009:          {
                          1062	#1010:             /* PRQA S 0303 1 */ /* MD_FblFlioMpc57xx_0303 */
                          1063	#1011:             if (((FLASH_REG(pFlashModule->flashBaseAddress, FBL_FLASH_MCRE_OFFSET_XD1) & 0x1F000000ul) >> 23u) > 32ul)
                          1064	#line1011
                          1065	..lin.e23f74c6..f923b00f.0_4::
                          1066	.LDWlin4:
00000028 c277             1067		se_lwz	r7, 8(r7)
0000002a c207             1068		se_lwz	r0, 8(r7)
0000002c 74004ebd         1069		e_rlwinm	r0, r0, 9, 26, 30
00000030 23f0             1070		se_cmpli	r0, 32
00000032 e100             1071		se_ble	.L9
                          1072	#1012:             {
                          1073	#1013:                /* Second mask includes flash blocks if more than 32 flash blocks are present */
                          1074	#1014:                /* PRQA S 0303 1 */ /* MD_FblFlioMpc57xx_0303 */
                          1075	#1015:                result = ((FLASH_REG(pFlashModule->flashBaseAddress, FBL_FLASH_MCRE_OFFSET_XD1) & 0x1F000000ul) >> 23u) - 32ul;
                          1076	#line1015
                          1077	..lin.e23f74c6..f923b00f.0_5::
                          1078	.LDWlin5:
00000034 c207             1079		se_lwz	r0, 8(r7)
00000036 74034ebd         1080		e_rlwinm	r3, r0, 9, 26, 30
0000003a 25f3             1081		se_subi	r3, 32
                          1082	.L11:
                          1083	#1034:       }
                          1084	#1035:    }
                          1085	#1037:    /* If not all flash blocks from the table exist, reduce iteration count */
                          1086	#1038:    if (result > pFlashBlock->count)
0000003c c204             1087		se_lwz	r0, 8(r4)
0000003e 0d03             1088		se_cmpl	r3, r0
00000040 e100             1089		se_ble	.L2
                          1090	#1039:    {
                          1091	#1040:       result = pFlashBlock->count;
                          1092	#line1040
                          1093	..lin.e23f74c6..f923b00f.0_6::
                          1094	.LDWlin6:
00000042 0103             1095		se_mr	r3, r0
                          1096	#1041:    }
                          1097	#1043:    return result;
                          1098	.L2:
                          1099	#	    .ef
                          1100	.LDW11:
00000044 0004             1101		se_blr
                          1102	__ghs_eofn_getNumberOfFlashBlocks:
                          1103		.type	getNumberOfFlashBlocks,@function
                          1104		.size	getNumberOfFlashBlocks,$-getNumberOfFlashBlocks
                          1105		.type	getNumberOfFlashBlocks..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_flio_xd1.,@function

                                   Fri Apr 10 08:32:10 2020           Page 21
                                   Fri Apr 10 08:32:09 2020   gh_0000bi81.si
                          1106		.size	getNumberOfFlashBlocks..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_flio_xd1.,$-getNumberOfFlashBlocks..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_flio_xd1.
                          1107		.align	1
                          1108	
                          1109	#function:			getNumberOfFlashBlocks
                          1110	#stack frame size:		0
                          1111	#
                          1112	#result	r3	local
                          1113	
                          1114	#pFlashModule	r7	param
                          1115	#pFlashBlock	r4	param
                          1116	
                          1117		.data
                          1118		.section ".vletext", "vax"
                          1119		.vle
                          1120		.vle
                          1121	
                          1122	#1044: }
                          1123	
                          1124	#1046: /***********************************************************************************************************************
                          1125	#1047:  *  checkAddress
                          1126	#1048:  **********************************************************************************************************************/
                          1127	#1049: /*! \brief       Computes flash block bit mask and checks address alignment
                          1128	#1050:  *  \details     This function computes the flash block bit mask of a given start address and length.
                          1129	#1051:  *               Additionally, the address and length alignments for erase and write requests are checked.
                          1130	#1052:  *               Please note: If address and range include a gap in flash memory, the bit mask won't be processed
                          1131	#1053:  *               and alignment checks will fail.
                          1132	#1054:  *  \param[out]  flashBlockMask Flash block bit mask
                          1133	#1055:  *  \param[in]   length Length of flash range
                          1134	#1056:  *  \param[in]   address Start address of flash range
                          1135	#1057:  *  \return      Reports if alignment requirements where met or not.
                          1136	#1058:  **********************************************************************************************************************/
                          1137		.align	1
                          1138		.align	1
                          1139		.align	1
                          1140	..gh.f.p.5.a.1.r.0.e.1:
                          1141		.type	..gh.f.p.5.a.1.r.0.e.1,@object
                          1142		.size	..gh.f.p.5.a.1.r.0.e.1,0
                          1143		.global	checkAddress..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_flio_xd1.
                          1144	checkAddress..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_flio_xd1.:
                          1145	checkAddress:
00000046 182106c8         1146		e_stwu	sp, -56(sp)
0000004a 0080             1147		se_mflr	r0
0000004c 1aa1090c         1148		e_stmw	r21, 12(sp)
00000050 df01             1149		se_stw	r0, 60(sp)
00000052 023e             1150		se_mtar	r22, r3
00000054 015e             1151		se_mr	r30, r5
                          1152	#	    .bf
                          1153	.LDW21:
                          1154	#1059: static vuint32 checkAddress( vuint32 * flashBlockMask, IO_SizeType length, IO_PositionType address )
                          1155	#1060: {
                          1156	#1061:    vuint32 i, j;
                          1157	#1063:    tFlashAddress_XD1 currentAddress;
                          1158	#1064:    tFlashLength_XD1 currentLength;
                          1159	#1065:    vuint32 maxIterationFlashBlocks;
                          1160	#1066:    vuint32 result;
                          1161	#1067:    vuint32 iterationState;

                                   Fri Apr 10 08:32:10 2020           Page 22
                                   Fri Apr 10 08:32:09 2020   gh_0000bi81.si
                          1162	#1069:    /* Initialize variables */
                          1163	#1070:    result = kFlashAlignmentError;
00000056 480d             1164		se_li	r29, 0
                          1165	#1071:    iterationState = kFlashCheckAddress;
00000058 01da             1166		se_mr	r26, r29
                          1167	#1072:    currentLength = length;
0000005a 01af             1168		se_mr	r31, r26
                          1169	#1073:    currentAddress = 0ul;
0000005c 01fb             1170		se_mr	r27, r31
                          1171	#1075:    for (i = 0u; i < kFlashSelectCount; i++)
0000005e 014c             1172		se_mr	r28, r4
                          1173	.L175:
                          1174	#1076:    {
                          1175	#1077:       flashBlockMask[i] = 0x00ul;
00000060 7f671070         1176		e_slwi	r7, r27, 2
00000064 7fe7b12e         1177		stwx	r31, r7, r22
00000068 200b             1178		se_addi	r27, 1
0000006a 223b             1179		se_cmpli	r27, 4
0000006c e400             1180		se_blt	.L175
                          1181	#1078:    }
                          1182	#1080:    /* Iterate over flash blocks */
                          1183	#1081:    i = 0u;
                          1184	#line1081
                          1185	..lin.e23f74c6..54579149.0_7::
                          1186	.LDWlin7:
0000006e 480b             1187		se_li	r27, 0
                          1188	#1082:    while ((iterationState != kFlashStopCheck) && (i < flashModuleSelect->flashBlockCount))
00000070 e800             1189		se_b	.L176
                          1190	.L178:
                          1191	#1083:    {
                          1192	#1084:       /* Prepare variables for a set of flash blocks */
                          1193	#1085:       j = 0u;
                          1194	#line1085
                          1195	..lin.e23f74c6..54579149.0_8::
                          1196	.LDWlin8:
00000072 c043             1197		se_lwz	r4, 0(r3)
                          1198	#1086:       if (iterationState == kFlashCheckAddress)
00000074 4808             1199		se_li	r24, 0
00000076 1afba014         1200		e_mulli	r23, r27, 20
0000007a 7c04b86e         1201		lwzux	r0, r4, r23
0000007e 2a0a             1202		se_cmpi	r26, 0
00000080 e200             1203		se_bne	.L179
                          1204	#1087:       {
                          1205	#1088:          currentAddress = flashModuleSelect->flashBlocks[i].startAddress;
00000082 010f             1206		se_mr	r31, r0
00000084 e800             1207		se_b	.L181
                          1208	.L179:
                          1209	#1089:       }
                          1210	#1090:       else
                          1211	#1091:       {
                          1212	#1092:          /* Check for gap after start address was verified */
                          1213	#1093:          if (currentAddress != flashModuleSelect->flashBlocks[i].startAddress)
00000086 0d0f             1214		se_cmpl	r31, r0
00000088 e600             1215		se_beq	.L181
                          1216	#1094:          {
                          1217	#1095:             /* Gap included - stop iteration */

                                   Fri Apr 10 08:32:10 2020           Page 23
                                   Fri Apr 10 08:32:09 2020   gh_0000bi81.si
                          1218	#1096:             result &= FblInvert32Bit(kFlashWriteLengthAligned | kFlashEraseLengthAligned);
                          1219	#line1096
                          1220	..lin.e23f74c6..54579149.0_9::
                          1221	.LDWlin9:
0000008a 482a             1222		se_li	r26, 2
                          1223	#1097:             iterationState = kFlashStopCheck;
0000008c 1bbdc4f5         1224		e_andi	r29, r29, -11
                          1225	.L181:
                          1226	#1098:          }
                          1227	#1099:       }
                          1228	#1101:       /* Check for maximum number of blocks */
                          1229	#1102:       maxIterationFlashBlocks = getNumberOfFlashBlocks(flashModuleSelect, &(flashModuleSelect->flashBlocks[i]));
00000090 e900             1230		se_bl	getNumberOfFlashBlocks
00000092 023d             1231		se_mtar	r21, r3
                          1232	#1104:       while ((iterationState != kFlashStopCheck) && (j < maxIterationFlashBlocks))
                          1233	#line1104
                          1234	..lin.e23f74c6..54579149.0_10::
                          1235	.LDWlin10:
00000094 e800             1236		se_b	.L184
                          1237	.L186:
                          1238	#1105:       {
                          1239	#1106:          (void)FblLookForWatchdog();
                          1240	#line1106
                          1241	..lin.e23f74c6..54579149.0_11::
                          1242	.LDWlin11:
00000096 78000001         1243		e_bl	FblLookForWatchdog
                          1244	#1108:          /* First step: Check if start address is aligned correctly */
                          1245	#1109:          if (iterationState == kFlashCheckAddress)
0000009a 2a0a             1246		se_cmpi	r26, 0
0000009c e200             1247		se_bne	.L187
                          1248	#1110:          {
                          1249	#1111:             /* Check if address is located in a flash block */
                          1250	#1112:             if (   (address >= currentAddress)
                          1251	#line1112
                          1252	..lin.e23f74c6..54579149.0_12::
                          1253	.LDWlin12:
0000009e 0dfe             1254		se_cmpl	r30, r31
000000a0 e400             1255		se_blt	.L189
000000a2 c079             1256		se_lwz	r7, 0(r25)
000000a4 c077             1257		se_lwz	r7, 0(r7)
000000a6 7ce7ba14         1258		add	r7, r7, r23
000000aa c177             1259		se_lwz	r7, 4(r7)
000000ac 7c1ff050         1260		subf	r0, r31, r30
000000b0 0d70             1261		se_cmpl	r0, r7
000000b2 e000             1262		se_bge	.L189
                          1263	#1113:                 && ((address -currentAddress) < (flashModuleSelect->flashBlocks[i].length))
                          1264	#1114:                )
                          1265	#1115:             {
                          1266	#1116:                /* Address located within a flash block - check length next */
                          1267	#1117:                iterationState = kFlashCheckLength;
                          1268	#line1117
                          1269	..lin.e23f74c6..54579149.0_13::
                          1270	.LDWlin13:
000000b4 481a             1271		se_li	r26, 1
                          1272	#1119:                /* Check if address is aligned to a flash block start address */
                          1273	#1120:                if (address == currentAddress)

                                   Fri Apr 10 08:32:10 2020           Page 24
                                   Fri Apr 10 08:32:09 2020   gh_0000bi81.si
000000b6 0dfe             1274		se_cmpl	r30, r31
000000b8 e200             1275		se_bne	.L192
                          1276	#1121:                {
                          1277	#1122:                   result |= kFlashEraseAddressAligned;
                          1278	#line1122
                          1279	..lin.e23f74c6..54579149.0_14::
                          1280	.LDWlin14:
000000ba 65fd             1281		se_bseti	r29, 31
                          1282	.L192:
                          1283	#1123:                }
                          1284	#1124:                /* Check if address is aligned to flash segment size */
                          1285	#1125:                if ((address & (FLASH_XD1_SEGMENT_SIZE - 1)) == 0x00ul)
000000bc 1bc0c807         1286		e_andi.	r0, r30, 7
000000c0 e200             1287		se_bne	.L194
                          1288	#1126:                {
                          1289	#1127:                   result |= kFlashWriteAddressAligned;
                          1290	#line1127
                          1291	..lin.e23f74c6..54579149.0_15::
                          1292	.LDWlin15:
000000c2 65dd             1293		se_bseti	r29, 29
                          1294	.L194:
                          1295	#1128:                }
                          1296	#1129:                /* Check if length matches write requirements. This has to be done only once. */
                          1297	#1130:                if ((currentLength & (FLASH_XD1_SEGMENT_SIZE - 1)) == 0x00ul)
000000c4 1b80c807         1298		e_andi.	r0, r28, 7
000000c8 e200             1299		se_bne	.L203
                          1300	#1131:                {
                          1301	#1132:                   result |= kFlashWriteLengthAligned;
                          1302	#line1132
                          1303	..lin.e23f74c6..54579149.0_16::
                          1304	.LDWlin16:
000000ca 65cd             1305		se_bseti	r29, 28
000000cc e800             1306		se_b	.L187
                          1307	.L189:
                          1308	#1133:                }
                          1309	#1134:             }
                          1310	#1135:             else if (address > currentAddress)
                          1311	#line1135
                          1312	..lin.e23f74c6..54579149.0_17::
                          1313	.LDWlin17:
000000ce 0dfe             1314		se_cmpl	r30, r31
000000d0 e100             1315		se_ble	.L199
                          1316	#1136:             {
                          1317	#1137:                /* Erase address behind current address - proceed to next flash block */
                          1318	#1138:                currentAddress += flashModuleSelect->flashBlocks[i].length;
                          1319	#line1138
                          1320	..lin.e23f74c6..54579149.0_18::
                          1321	.LDWlin18:
000000d2 c009             1322		se_lwz	r0, 0(r25)
000000d4 c070             1323		se_lwz	r7, 0(r0)
000000d6 7ce7ba14         1324		add	r7, r7, r23
000000da c107             1325		se_lwz	r0, 4(r7)
000000dc 040f             1326		se_add	r31, r0
                          1327	.L187:
                          1328	#1145:             }
                          1329	#1146:          }

                                   Fri Apr 10 08:32:10 2020           Page 25
                                   Fri Apr 10 08:32:09 2020   gh_0000bi81.si
                          1330	#1148:          /* Second step: Check if length is aligned correctly */
                          1331	#1149:          if (iterationState == kFlashCheckLength)
000000de 2a1a             1332		se_cmpi	r26, 1
000000e0 e200             1333		se_bne	.L202
                          1334	.L203:
                          1335	#1150:          {
                          1336	#1151:             /* Calculate bit mask for erase/lock */
                          1337	#1152:             flashBlockMask[flashModuleSelect->flashBlocks[i].bitMaskIndex] |= (vuint32)(flashModuleSelect->flashBlocks[i].bitMaskStart << j);
                          1338	#line1152
                          1339	..lin.e23f74c6..54579149.0_19::
                          1340	.LDWlin19:
000000e2 c039             1341		se_lwz	r3, 0(r25)
000000e4 c043             1342		se_lwz	r4, 0(r3)
000000e6 7c84ba14         1343		add	r4, r4, r23
000000ea c404             1344		se_lwz	r0, 16(r4)
000000ec c364             1345		se_lwz	r6, 12(r4)
000000ee 6c20             1346		se_slwi	r0, 2
000000f0 7c160214         1347		add	r0, r22, r0
000000f4 c070             1348		se_lwz	r7, 0(r0)
000000f6 4286             1349		se_slw	r6, r24
000000f8 4467             1350		se_or	r7, r6
000000fa d070             1351		se_stw	r7, 0(r0)
                          1352	#1154:             /* Check if erase length is at least currently selected block */
                          1353	#1155:             if (currentLength >= flashModuleSelect->flashBlocks[i].length)
000000fc c104             1354		se_lwz	r0, 4(r4)
000000fe 0d0c             1355		se_cmpl	r28, r0
00000100 e400             1356		se_blt	.L204
                          1357	#1156:             {
                          1358	#1157:                /* Decrement length */
                          1359	#1158:                currentLength -= flashModuleSelect->flashBlocks[i].length;
                          1360	#line1158
                          1361	..lin.e23f74c6..54579149.0_20::
                          1362	.LDWlin20:
00000102 060c             1363		se_sub	r28, r0
                          1364	#1159:                /* Increment start address */
                          1365	#1160:                currentAddress += flashModuleSelect->flashBlocks[i].length;
00000104 040f             1366		se_add	r31, r0
00000106 e800             1367		se_b	.L206
                          1368	.L199:
                          1369	#1139:             }
                          1370	#1140:             else
                          1371	#1141:             {
                          1372	#1142:                /* Current address behind request - address failure */
                          1373	#1143:                iterationState = kFlashStopCheck;
                          1374	#1144:                result = kFlashAlignmentError;
                          1375	#line1144
                          1376	..lin.e23f74c6..54579149.0_21::
                          1377	.LDWlin21:
00000108 480d             1378		se_li	r29, 0
0000010a e800             1379		se_b	.L598
                          1380	.L204:
                          1381	#1161:             }
                          1382	#1162:             /* Check if write length crosses block boundary */
                          1383	#1163:             else if (((currentAddress + flashModuleSelect->flashBlocks[i].length) - address) < currentLength)
                          1384	#line1163
                          1385	..lin.e23f74c6..54579149.0_22::

                                   Fri Apr 10 08:32:10 2020           Page 26
                                   Fri Apr 10 08:32:09 2020   gh_0000bi81.si
                          1386	.LDWlin22:
0000010c 04f0             1387		se_add	r0, r31
0000010e 7cfe0050         1388		subf	r7, r30, r0
00000112 0dc7             1389		se_cmpl	r7, r28
00000114 e000             1390		se_bge	.L207
                          1391	#1164:             {
                          1392	#1165:                /* Process remaining length in current block */
                          1393	#1166:                currentLength -= ((currentAddress + flashModuleSelect->flashBlocks[i].length) - address);
                          1394	#line1166
                          1395	..lin.e23f74c6..54579149.0_23::
                          1396	.LDWlin23:
00000116 7ce0f050         1397		subf	r7, r0, r30
0000011a 047c             1398		se_add	r28, r7
                          1399	#1167:                currentAddress = (currentAddress + flashModuleSelect->flashBlocks[i].length);
0000011c 010f             1400		se_mr	r31, r0
0000011e e800             1401		se_b	.L206
                          1402	.L207:
                          1403	#1168:             }
                          1404	#1169:             else
                          1405	#1170:             {
                          1406	#1171:                /* Flash block shorter than actual selected flash block - stop further processing */
                          1407	#1172:                iterationState = kFlashStopCheck;
                          1408	#line1172
                          1409	..lin.e23f74c6..54579149.0_24::
                          1410	.LDWlin24:
00000120 482a             1411		se_li	r26, 2
                          1412	.L206:
                          1413	#1173:             }
                          1414	#1174:             /* Check if length is aligned to the end of a flash block */
                          1415	#1175:             if (currentLength == 0x00ul)
00000122 2a0c             1416		se_cmpi	r28, 0
00000124 e200             1417		se_bne	.L202
                          1418	#1176:             {
                          1419	#1177:                /* Length matches - erase can be executed */
                          1420	#1178:                iterationState = kFlashStopCheck;
                          1421	#1179:                result |= kFlashEraseLengthAligned;
                          1422	#line1179
                          1423	..lin.e23f74c6..54579149.0_25::
                          1424	.LDWlin25:
00000126 65ed             1425		se_bseti	r29, 30
                          1426	.L598:
00000128 482a             1427		se_li	r26, 2
                          1428	.L202:
                          1429	#1180:             }
                          1430	#1181:          }
                          1431	#1183:          /* Prepare next flash block */
                          1432	#1184:          j++;
0000012a 2008             1433		se_addi	r24, 1
                          1434	.L184:
0000012c 2a2a             1435		se_cmpi	r26, 2
0000012e e600             1436		se_beq	.L185
00000130 7c18a840         1437		cmplw	r24, r21
00000134 e400             1438		se_blt	.L186
                          1439	.L185:
                          1440	#1185:       }
                          1441	#1186:       /* Prepare next flash block */

                                   Fri Apr 10 08:32:10 2020           Page 27
                                   Fri Apr 10 08:32:09 2020   gh_0000bi81.si
                          1442	#1187:       i++;
                          1443	#line1187
                          1444	..lin.e23f74c6..54579149.0_26::
                          1445	.LDWlin26:
00000136 200b             1446		se_addi	r27, 1
                          1447	.L176:
00000138 2a2a             1448		se_cmpi	r26, 2
0000013a e600             1449		se_beq	.L177
0000013c 7320e000         1450		e_lis	r25, %hiadj(flashModuleSelect)
00000140 1f390000         1451		e_add16i	r25, r25, %lo(flashModuleSelect)
00000144 c039             1452		se_lwz	r3, 0(r25)
00000146 c103             1453		se_lwz	r0, 4(r3)
00000148 0d0b             1454		se_cmpl	r27, r0
0000014a e400             1455		se_blt	.L178
                          1456	.L177:
                          1457	#1188:    }
                          1458	#1190:    return result;
                          1459	#line1190
                          1460	..lin.e23f74c6..54579149.0_27::
                          1461	.LDWlin27:
0000014c 01d3             1462		se_mr	r3, r29
                          1463	#	    .ef
                          1464	.LDW31:
0000014e cf01             1465		se_lwz	r0, 60(sp)
00000150 1aa1080c         1466		e_lmw	r21, 12(sp)
00000154 18218038         1467		e_addi	sp, sp, 56
00000158 0090             1468		se_mtlr	r0
0000015a 0004             1469		se_blr
                          1470	__ghs_eofn_checkAddress:
                          1471		.type	checkAddress,@function
                          1472		.size	checkAddress,$-checkAddress
                          1473		.type	checkAddress..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_flio_xd1.,@function
                          1474		.size	checkAddress..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_flio_xd1.,$-checkAddress..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_flio_xd1.
                          1475		.align	1
                          1476	
                          1477	#function:			checkAddress
                          1478	#stack frame size:		56
                          1479	#link area offset:		0
                          1480	#local storage area offset:	12
                          1481	#gpr save area offset:		12
                          1482	#
                          1483	#i	r27	local
                          1484	#j	r24	local
                          1485	#currentAddress	r31	local
                          1486	#currentLength	r28	local
                          1487	#maxIterationFlashBlocks	r21	local
                          1488	#result	r29	local
                          1489	#iterationState	r26	local
                          1490	
                          1491	#flashBlockMask	r22	param
                          1492	#length	r4	param
                          1493	#address	r30	param
                          1494	
                          1495		.section ".bss","awb"
                          1496		.align	2
                          1497		.global	flashModuleSelect..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_flio_xd1.

                                   Fri Apr 10 08:32:10 2020           Page 28
                                   Fri Apr 10 08:32:09 2020   gh_0000bi81.si
                          1498	flashModuleSelect..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_flio_xd1.:
00000000                  1499	flashModuleSelect:	.space	4
                          1500		.type	flashModuleSelect..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_flio_xd1.,@object
                          1501		.size	flashModuleSelect..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_flio_xd1.,4
                          1502		.type	flashModuleSelect,@object
                          1503		.size	flashModuleSelect,4
                          1504		.global	flashParam..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_flio_xd1.
                          1505	flashParam..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_flio_xd1.:
00000004                  1506	flashParam:	.space	52
                          1507		.type	flashParam..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_flio_xd1.,@object
                          1508		.size	flashParam..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_flio_xd1.,52
                          1509		.type	flashParam,@object
                          1510		.size	flashParam,52
                          1511		.data
                          1512		.section ".vletext", "vax"
                          1513		.vle
                          1514		.vle
                          1515	
                          1516	#1191: }
                          1517	
                          1518	#1193: #if defined( FBL_ENABLE_WRITE_RCHW )
                          1519	#1194: #else
                          1520	#1195: /***********************************************************************************************************************
                          1521	#1196:  *  checkForRchwBootId
                          1522	#1197:  **********************************************************************************************************************/
                          1523	#1198: /*! \brief       Checks if data contains a valid RCHW
                          1524	#1199:  *  \details     This function checks if the data submitted to the flash driver
                          1525	#1200:  *               contains a valid RCHW. If a valid RCHW is found, the flash sequence
                          1526	#1201:  *               is aborted to avoid changes in the ECU's startup.
                          1527	#1202:  *  \param[in]   length Length of data
                          1528	#1203:  *  \param[in]   address Target address
                          1529	#1204:  *  \param[in]   pData RAM buffer of data to be flashed
                          1530	#1205:  *  \return      Address of failure, 0 if OK
                          1531	#1206:  **********************************************************************************************************************/
                          1532	#1207: static tFlashAddress_XD1 checkForRchwBootId( tFblLength length, tFblAddress address, vuint32 * pData )
                          1533	#1208: {
                          1534	#1209:    vuint32 i, j;
                          1535	#1210:    tFlashAddress_XD1 result;
                          1536	#1212:    /* Initialize variables */
                          1537	#1213:    result = 0ul;
                          1538	#1215:    /* Loop over known RCHW positions */
                          1539	#1216:    for (i = 0ul; i < flashModuleSelect->rchwPositionCount; i++)
                          1540	#1217:    {
                          1541	#1218:       /* Check if RCHW lies within flash request area */
                          1542	#1219:       if (   (flashModuleSelect->rchwPositions[i] >= address)
                          1543	#1220:           && ((flashModuleSelect->rchwPositions[i] - address) < length)
                          1544	#1221:          )
                          1545	#1222:       {
                          1546	#1223:          for (j = 0u; j < kNrOfRchwValues; j++)
                          1547	#1224:          {
                          1548	#1225:             if (rchwValues[j] == (pData[flashModuleSelect->rchwPositions[i] - address] & kRchwMask))
                          1549	#1226:             {
                          1550	#1227:                /* RCHW Boot ID found - report position to stop flashing */
                          1551	#1228:                result = flashModuleSelect->rchwPositions[i];
                          1552	#1229:             }
                          1553	#1230:          }

                                   Fri Apr 10 08:32:10 2020           Page 29
                                   Fri Apr 10 08:32:09 2020   gh_0000bi81.si
                          1554	#1231:       }
                          1555	#1232:    }
                          1556	#1234:    return result;
                          1557	#1235: }
                          1558	#1236: #endif /* FBL_ENABLE_WRITE_RCHW */
                          1559	#1238: /***********************************************************************************************************************
                          1560	#1239:  *  GLOBAL FUNCTIONS
                          1561	#1240:  **********************************************************************************************************************/
                          1562	#1242: /***********************************************************************************************************************
                          1563	#1243:  *  Flash_XD1Driver_InitSync
                          1564	#1244:  **********************************************************************************************************************/
                          1565	#1245: /*! \brief       Initializes the flash driver
                          1566	#1246:  *  \details     This function copies the flash driver to RAM if it is stored in a ROM image and calls the
                          1567	#1247:  *               initialization routine in RAM.
                          1568	#1248:  *  \pre         Flash driver has to be copied to RAM if a downloadable flash driver is used.
                          1569	#1249:  *  \param[in]   address Unused parameter to implement HIS interface.
                          1570	#1250:  *  \return      Reports if initialization was successful or not.
                          1571	#1251:  **********************************************************************************************************************/
                          1572		.align	1
                          1573		.align	1
                          1574		.align	1
                          1575	..gh.f.p.3.a.1.r.0.e.2:
                          1576		.type	..gh.f.p.3.a.1.r.0.e.2,@object
                          1577		.size	..gh.f.p.3.a.1.r.0.e.2,0
                          1578		.global	Flash_XD1Driver_InitSync
                          1579	Flash_XD1Driver_InitSync:
0000015c 0080             1580		se_mflr	r0
0000015e 182106f0         1581		e_stwu	sp, -16(sp)
00000162 d501             1582		se_stw	r0, 20(sp)
00000164 d3f1             1583		se_stw	r31, 12(sp)
                          1584	#	    .bf
                          1585	.LDW41:
00000166 70e0e000         1586		e_lis	r7, %hiadj(flashModule)
0000016a 50e70000         1587		e_lwz	r7, %lo(flashModule)(r7)
                          1588	#1252: IO_ErrorType Flash_XD1Driver_InitSync( void * address )
                          1589	#1253: {
                          1590	#1254: #if defined( FLASH_SETUP_RUNTIME )
                          1591	#1255:    vuint32 flashIndex;
                          1592	#1256: #endif /* FLASH_SETUP_RUNTIME */
                          1593	#1259: #if defined( V_ENABLE_USE_DUMMY_STATEMENT )
                          1594	#1260:    (void)address; /* PRQA S 3112 */ /* MD_FblFlioMpc57xx_3112 */
                          1595	#1261: #endif /* V_ENABLE_USE_DUMMY_STATEMENT */
                          1596	#1263: #if defined( FLASH_SETUP_RUNTIME )
                          1597	#1264:    flashIndex = ApplFblSelectFlashSetup();
                          1598	#1265: # if( FBL_PROJECT_STATE == FBL_INTEGRATION)
                          1599	#1266:    if (flashIndex >= ARRAY_SIZE(flashModule))
                          1600	#1267:    {
                          1601	#1268:       while (1)
                          1602	#1269:       {
                          1603	#1270:          ;
                          1604	#1271:       }
                          1605	#1272:    }
                          1606	#1273: # endif
                          1607	#1274:    flashModuleSelect = flashModule[flashIndex];
                          1608	#1275: #else
                          1609	#1276:    flashModuleSelect = flashModule[kFblSingleFlashModule];

                                   Fri Apr 10 08:32:10 2020           Page 30
                                   Fri Apr 10 08:32:09 2020   gh_0000bi81.si
0000016e 7000e000         1610		e_lis	r0, %hiadj(FblLookForWatchdog)
00000172 73e0e000         1611		e_lis	r31, %hiadj(flashParam)
                          1612	#1277: #endif /* FLASH_SETUP_RUNTIME */
                          1613	#1280:    /* Initialize flash parameter structure */
                          1614	#1281:    flashParam.wdTriggerFct = FblLookForWatchdog;
00000176 1fff0000         1615		e_add16i	r31, r31, %lo(flashParam)
0000017a 70c0e000         1616		e_lis	r6, %hiadj(flashModuleSelect)
0000017e 54e60000         1617		e_stw	r7, %lo(flashModuleSelect)(r6)
00000182 4816             1618		se_li	r6, 1
00000184 1c000000         1619		e_add16i	r0, r0, %lo(FblLookForWatchdog)
                          1620	#1282:    flashParam.reserved1 = 0x00u;
00000188 d50f             1621		se_stw	r0, 20(r31)
0000018a 4800             1622		se_li	r0, 0
                          1623	#1283:    flashParam.reserved2 = 0x00u;
0000018c 930f             1624		se_stb	r0, 3(r31)
                          1625	#1284:    flashParam.errorCode = kFlashOk_XD1;
0000018e 926f             1626		se_stb	r6, 2(r31)
                          1627	#1285:    /* Version variables are preset with version of compile time flash driver */
                          1628	#1286:    flashParam.majorVersion = FLASH_DRIVER_XD1_VERSION_MAJOR;
00000190 4866             1629		se_li	r6, 6
00000192 916f             1630		se_stb	r6, 1(r31)
                          1631	#1287:    flashParam.minorVersion = FLASH_DRIVER_XD1_VERSION_MINOR;
00000194 c567             1632		se_lwz	r6, 20(r7)
00000196 d96f             1633		se_stw	r6, 36(r31)
                          1634	#1288:    flashParam.patchLevel = FLASH_DRIVER_XD1_VERSION_PATCH;
00000198 c667             1635		se_lwz	r6, 24(r7)
                          1636	#1289:    /* MPC specific data */
                          1637	#1290:    flashParam.selectCount = flashModuleSelect->flashSelectCount;
0000019a b30f             1638		se_sth	r0, 6(r31)
0000019c b20f             1639		se_sth	r0, 4(r31)
                          1640	#1291:    flashParam.protectSelect = flashModuleSelect->userProtectionBits;
0000019e 900f             1641		se_stb	r0, 0(r31)
000001a0 da6f             1642		se_stw	r6, 40(r31)
                          1643	#1292:    flashParam.blockSelect = V_NULL;
000001a2 db0f             1644		se_stw	r0, 44(r31)
                          1645	#1293:    flashParam.registerBase = flashModuleSelect->flashBaseAddress;
000001a4 c207             1646		se_lwz	r0, 8(r7)
000001a6 dc0f             1647		se_stw	r0, 48(r31)
                          1648	#1295:    /* Call init routine of flash driver */
                          1649	#1296:    ExpFlash_XD1Init(&flashParam);
000001a8 01f3             1650		se_mr	r3, r31
000001aa 78000001         1651		e_bl	ExpFlash_XD1Init
                          1652	#1298:    return flashParam.errorCode;
000001ae a23f             1653		se_lhz	r3, 4(r31)
                          1654	#	    .ef
                          1655	.LDW51:
000001b0 c501             1656		se_lwz	r0, 20(sp)
000001b2 c3f1             1657		se_lwz	r31, 12(sp)
000001b4 20f1             1658		se_addi	sp, 16
000001b6 0090             1659		se_mtlr	r0
000001b8 0004             1660		se_blr
                          1661		.global	__ghs_eofn_Flash_XD1Driver_InitSync
                          1662	__ghs_eofn_Flash_XD1Driver_InitSync:
                          1663		.type	Flash_XD1Driver_InitSync,@function
                          1664		.size	Flash_XD1Driver_InitSync,$-Flash_XD1Driver_InitSync
                          1665		.align	1

                                   Fri Apr 10 08:32:10 2020           Page 31
                                   Fri Apr 10 08:32:09 2020   gh_0000bi81.si
                          1666	
                          1667	#function:			Flash_XD1Driver_InitSync
                          1668	#stack frame size:		16
                          1669	#link area offset:		0
                          1670	#local storage area offset:	12
                          1671	#gpr save area offset:		12
                          1672	#
                          1673	
                          1674	#address	none	param
                          1675	
                          1676		.section ".rodata","a"
                          1677		.align	2
                          1678		.global	flashModule..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_flio_xd1.
                          1679	flashModule..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_flio_xd1.:
                          1680	flashModule:
00000000 00000000         1681		.long	flashModule_6
                          1682		.type	flashModule..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_flio_xd1.,@object
                          1683		.size	flashModule..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_flio_xd1.,4
                          1684		.type	flashModule,@object
                          1685		.size	flashModule,4
                          1686		.global	flashModule_6..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_flio_xd1.
                          1687	flashModule_6..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_flio_xd1.:
                          1688	flashModule_6:
00000004 00000000         1689		.long	flashBlocks_6
00000008 00000005         1690		.byte	0,0,0,5
0000000c fffe0000         1691		.byte	255,254,0,0
00000010 00020000         1692		.byte	0,2,0,0
00000014 00000001         1693		.byte	0,0,0,1
00000018 00000003         1694		.byte	0,0,0,3
0000001c 00000000         1695		.long	flash_user_protection_6
                          1696		.type	flashModule_6..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_flio_xd1.,@object
                          1697		.size	flashModule_6..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_flio_xd1.,28
                          1698		.type	flashModule_6,@object
                          1699		.size	flashModule_6,28
                          1700		.global	flashBlocks_6..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_flio_xd1.
                          1701	flashBlocks_6..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_flio_xd1.:
00000020 00800000         1702	flashBlocks_6:	.byte	0,128,0,0
00000024 00002000         1703		.byte	0,0,32,0
00000028 00000004         1704		.byte	0,0,0,4
0000002c 00000001         1705		.byte	0,0,0,1
00000030 00000001         1706		.byte	0,0,0,1
00000034 00fc0000         1707		.byte	0,252,0,0
00000038 00004000         1708		.byte	0,0,64,0
0000003c 00000004         1709		.byte	0,0,0,4
00000040 00020000         1710		.byte	0,2,0,0
00000044 00000000         1711		.space	4
00000048 00fd0000         1712		.byte	0,253,0,0
0000004c 00008000         1713		.byte	0,0,128,0
00000050 00000002         1714		.byte	0,0,0,2
00000054 00200000         1715		.byte	0,32,0,0
00000058 00000000         1716		.space	4
0000005c 00fe0000         1717		.byte	0,254,0,0
00000060 00010000         1718		.byte	0,1,0,0
00000064 00000002         1719		.byte	0,0,0,2
00000068 00800000         1720		.byte	0,128,0,0
0000006c 00000000         1721		.space	4

                                   Fri Apr 10 08:32:10 2020           Page 32
                                   Fri Apr 10 08:32:09 2020   gh_0000bi81.si
00000070 01000000         1722		.byte	1,0,0,0
00000074 00020000         1723		.byte	0,2,0,0
00000078 00000020         1724		.byte	0,0,0,32
0000007c 00000001         1725		.byte	0,0,0,1
00000080 00000002         1726		.byte	0,0,0,2
                          1727		.type	flashBlocks_6..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_flio_xd1.,@object
                          1728		.size	flashBlocks_6..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_flio_xd1.,100
                          1729		.type	flashBlocks_6,@object
                          1730		.size	flashBlocks_6,100
                          1731		.global	flash_user_protection_6..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_flio_xd1.
                          1732	flash_user_protection_6..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_flio_xd1.:
00000084 ffffffff         1733	flash_user_protection_6:	.byte	255,255,255,255
00000088 fffffff0         1734		.byte	255,255,255,240
0000008c ffffffff         1735		.byte	255,255,255,255
00000090 ffffffff         1736		.byte	255,255,255,255
                          1737		.type	flash_user_protection_6..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_flio_xd1.,@object
                          1738		.size	flash_user_protection_6..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_flio_xd1.,16
                          1739		.type	flash_user_protection_6,@object
                          1740		.size	flash_user_protection_6,16
                          1741		.data
                          1742		.section ".vletext", "vax"
                          1743		.vle
                          1744		.vle
                          1745	
                          1746	#1299: }
                          1747	
                          1748	#1301: /***********************************************************************************************************************
                          1749	#1302:  *  Flash_XD1Driver_DeinitSync
                          1750	#1303:  **********************************************************************************************************************/
                          1751	#1304: /*! \brief       Deinitializes the flash driver
                          1752	#1305:  *  \details     This function calls the deinitialization routine in RAM and removes the flash driver
                          1753	#1306:  *               from the RAM buffer.
                          1754	#1307:  *  \pre         Flash driver is initialized.
                          1755	#1308:  *  \param[in]   address Unused parameter to implement HIS interface.
                          1756	#1309:  *  \return      Reports if deinitialization was successful or not.
                          1757	#1310:  **********************************************************************************************************************/
                          1758		.align	1
                          1759		.align	1
                          1760	..gh.f.p.3.a.1.r.0.e.3:
                          1761		.type	..gh.f.p.3.a.1.r.0.e.3,@object
                          1762		.size	..gh.f.p.3.a.1.r.0.e.3,0
                          1763		.global	Flash_XD1Driver_DeinitSync
                          1764	Flash_XD1Driver_DeinitSync:
000001ba 182106f0         1765		e_stwu	sp, -16(sp)
000001be 0080             1766		se_mflr	r0
000001c0 d3f1             1767		se_stw	r31, 12(sp)
000001c2 d501             1768		se_stw	r0, 20(sp)
                          1769	#	    .bf
                          1770	.LDW61:
                          1771	#1311: IO_ErrorType Flash_XD1Driver_DeinitSync( void * address )
                          1772	#1312: {
                          1773	#1314: #if defined( V_ENABLE_USE_DUMMY_STATEMENT )
                          1774	#1315:    (void)address; /* PRQA S 3112 */ /* MD_FblFlioMpc57xx_3112 */
                          1775	#1316: #endif /* V_ENABLE_USE_DUMMY_STATEMENT */
                          1776	#1318:    ExpFlash_XD1Deinit(&flashParam);
000001c4 73e0e000         1777		e_lis	r31, %hiadj(flashParam)

                                   Fri Apr 10 08:32:10 2020           Page 33
                                   Fri Apr 10 08:32:09 2020   gh_0000bi81.si
000001c8 1fff0000         1778		e_add16i	r31, r31, %lo(flashParam)
000001cc 01f3             1779		se_mr	r3, r31
000001ce 78000001         1780		e_bl	ExpFlash_XD1Deinit
                          1781	#1320:    return flashParam.errorCode;
000001d2 a23f             1782		se_lhz	r3, 4(r31)
                          1783	#	    .ef
                          1784	.LDW71:
000001d4 c501             1785		se_lwz	r0, 20(sp)
000001d6 c3f1             1786		se_lwz	r31, 12(sp)
000001d8 20f1             1787		se_addi	sp, 16
000001da 0090             1788		se_mtlr	r0
000001dc 0004             1789		se_blr
                          1790		.global	__ghs_eofn_Flash_XD1Driver_DeinitSync
                          1791	__ghs_eofn_Flash_XD1Driver_DeinitSync:
                          1792		.type	Flash_XD1Driver_DeinitSync,@function
                          1793		.size	Flash_XD1Driver_DeinitSync,$-Flash_XD1Driver_DeinitSync
                          1794		.align	1
                          1795	
                          1796	#function:			Flash_XD1Driver_DeinitSync
                          1797	#stack frame size:		16
                          1798	#link area offset:		0
                          1799	#local storage area offset:	12
                          1800	#gpr save area offset:		12
                          1801	#
                          1802	
                          1803	#address	none	param
                          1804	
                          1805		.data
                          1806		.section ".vletext", "vax"
                          1807		.vle
                          1808		.vle
                          1809	
                          1810	#1321: }
                          1811	
                          1812	#1323: /***********************************************************************************************************************
                          1813	#1324:  *  Flash_XD1Driver_RWriteSync
                          1814	#1325:  **********************************************************************************************************************/
                          1815	#1326: /*! \brief       Writes data to flash memory.
                          1816	#1327:  *  \details     This function programs flash memory by calling the flash driver routine stored in RAM.
                          1817	#1328:  *  \pre         Flash driver is initialized, memory to be programmed is erased.
                          1818	#1329:  *  \param[in]   writeBuffer Pointer to input data buffer.
                          1819	#1330:  *  \param[in]   writeLength Data length.
                          1820	#1331:  *  \param[in]   writeAddress Write target address ( in flash memory ).
                          1821	#1332:  *  \return      Reports write success or error code.
                          1822	#1333:  **********************************************************************************************************************/
                          1823		.align	1
                          1824		.align	1
                          1825	..gh.f.p.5.a.1.r.0.e.4:
                          1826		.type	..gh.f.p.5.a.1.r.0.e.4,@object
                          1827		.size	..gh.f.p.5.a.1.r.0.e.4,0
                          1828		.global	Flash_XD1Driver_RWriteSync
                          1829	Flash_XD1Driver_RWriteSync:
000001de 182106d8         1830		e_stwu	sp, -40(sp)
000001e2 0080             1831		se_mflr	r0
000001e4 1b810918         1832		e_stmw	r28, 24(sp)
000001e8 db01             1833		se_stw	r0, 44(sp)

                                   Fri Apr 10 08:32:10 2020           Page 34
                                   Fri Apr 10 08:32:09 2020   gh_0000bi81.si
000001ea 013d             1834		se_mr	r29, r3
                          1835	#	    .bf
                          1836	.LDW81:
                          1837	#1334: IO_ErrorType Flash_XD1Driver_RWriteSync( IO_MemPtrType writeBuffer, IO_SizeType writeLength, IO_PositionType writeAddress )
                          1838	#1335: {
                          1839	#1336:    vuint32 writeAlignment;
                          1840	#1337:    vuint32 flashBlockMask[kFlashSelectCount];
                          1841	#1339:    /* Check write addresses and calculate block masks */
                          1842	#1340:    writeAlignment = checkAddress(flashBlockMask, writeLength, writeAddress);
000001ec 014c             1843		se_mr	r28, r4
000001ee 015e             1844		se_mr	r30, r5
000001f0 18618008         1845		e_addi	r3, sp, 8
000001f4 78000001         1846		se_bl	checkAddress
                          1847	#1342:    /* Check if write alignment is correct */
                          1848	#1343:    if ((writeAlignment & kFlashWriteAddressAligned) == 0x00ul)
                          1849	#line1343
                          1850	..lin.e23f74c6..9b5a65c4.0_28::
                          1851	.LDWlin28:
000001f8 73e0e000         1852		e_lis	r31, %hiadj(flashParam)
000001fc 1fff0000         1853		e_add16i	r31, r31, %lo(flashParam)
00000200 67d3             1854		se_btsti	r3, 29
00000202 e200             1855		se_bne	.L885
                          1856	#1344:    {
                          1857	#1345:       /* Address alignment is not correct */
                          1858	#1346:       flashParam.errorCode= kFlashWriteInvalidAddr_XD1;
00000204 4e40             1859		se_li	r0, 100
                          1860	#1347:       flashParam.errorAddress = writeAddress;
                          1861	#line1347
                          1862	..lin.e23f74c6..9b5a65c4.0_29::
                          1863	.LDWlin29:
00000206 e800             1864		se_b	.L1000
                          1865	.L885:
                          1866	#1348:    }
                          1867	#1349:    else if ((writeAlignment & kFlashWriteLengthAligned) == 0x00ul)
00000208 67c3             1868		se_btsti	r3, 28
0000020a e200             1869		se_bne	.L888
                          1870	.L889:
                          1871	#1350:    {
                          1872	#1351:       /* Size alignment is not correct */
                          1873	#1352:       flashParam.errorCode = kFlashWriteInvalidSize_XD1;
0000020c 4e50             1874		se_li	r0, 101
                          1875	.L1000:
0000020e d8ef             1876		se_stw	r30, 32(r31)
                          1877	#1353:       flashParam.errorAddress = writeAddress;
                          1878	#line1353
                          1879	..lin.e23f74c6..9b5a65c4.0_30::
                          1880	.LDWlin30:
00000210 b20f             1881		se_sth	r0, 4(r31)
00000212 e800             1882		se_b	.L887
                          1883	.L888:
                          1884	#1354:    }
                          1885	#1355:    else
                          1886	#1356:    {
                          1887	#1357: #if defined( FBL_ENABLE_WRITE_RCHW )
                          1888	#1358: #else
                          1889	#1359:       /* Check for RCHW in data */

                                   Fri Apr 10 08:32:10 2020           Page 35
                                   Fri Apr 10 08:32:09 2020   gh_0000bi81.si
                          1890	#1360:       flashParam.errorAddress = checkForRchwBootId((tFblLength)writeLength, (tFblAddress)writeAddress, (vuint32*)writeBuffer);
                          1891	#1361:       if (0ul != flashParam.errorAddress)
                          1892	#1362:       {
                          1893	#1363:          /* Unallowed RCHW detected - stop flash sequence */
                          1894	#1364:          flashParam.errorCode = kFlashWriteInvalidData_XD1;
                          1895	#1365:       }
                          1896	#1366:       else
                          1897	#1367: #endif /* FBL_ENABLE_WRITE_RCHW */
                          1898	#1368:       {
                          1899	#1369:          /* Prepare actual write request to driver */
                          1900	#1370:          flashParam.address = writeAddress;
00000214 d2ef             1901		se_stw	r30, 8(r31)
                          1902	#1371:          flashParam.length = writeLength;
                          1903	#line1371
                          1904	..lin.e23f74c6..9b5a65c4.0_31::
                          1905	.LDWlin31:
00000216 d3cf             1906		se_stw	r28, 12(r31)
                          1907	#1372:          flashParam.data = (tFlashData_XD1*)writeBuffer;
00000218 d4df             1908		se_stw	r29, 16(r31)
                          1909	#1373:          flashParam.blockSelect = flashBlockMask;
0000021a 18018008         1910		e_addi	r0, sp, 8
0000021e db0f             1911		se_stw	r0, 44(r31)
                          1912	#1375:          /* Call write routine of flash driver */
                          1913	#1376:          ExpFlash_XD1Write(&flashParam);
00000220 01f3             1914		se_mr	r3, r31
00000222 78000001         1915		e_bl	ExpFlash_XD1Write
                          1916	.L887:
                          1917	#1377:       }
                          1918	#1378:    }
                          1919	#1380:    return flashParam.errorCode;
00000226 a23f             1920		se_lhz	r3, 4(r31)
                          1921	#	    .ef
                          1922	.LDW91:
00000228 cb01             1923		se_lwz	r0, 44(sp)
0000022a 1b810818         1924		e_lmw	r28, 24(sp)
0000022e 18218028         1925		e_addi	sp, sp, 40
00000232 0090             1926		se_mtlr	r0
00000234 0004             1927		se_blr
                          1928		.global	__ghs_eofn_Flash_XD1Driver_RWriteSync
                          1929	__ghs_eofn_Flash_XD1Driver_RWriteSync:
                          1930		.type	Flash_XD1Driver_RWriteSync,@function
                          1931		.size	Flash_XD1Driver_RWriteSync,$-Flash_XD1Driver_RWriteSync
                          1932		.align	1
                          1933	
                          1934	#function:			Flash_XD1Driver_RWriteSync
                          1935	#stack frame size:		40
                          1936	#link area offset:		0
                          1937	#local storage area offset:	8
                          1938	#gpr save area offset:		24
                          1939	#
                          1940	#writeAlignment	r3	local
                          1941	#flashBlockMask	8(sp)	local
                          1942	
                          1943	#writeBuffer	r29	param
                          1944	#writeLength	r28	param
                          1945	#writeAddress	r30	param

                                   Fri Apr 10 08:32:10 2020           Page 36
                                   Fri Apr 10 08:32:09 2020   gh_0000bi81.si
                          1946	
                          1947		.data
                          1948		.section ".vletext", "vax"
                          1949		.vle
                          1950		.vle
                          1951	
                          1952	#1381: }
                          1953	
                          1954	#1383: /***********************************************************************************************************************
                          1955	#1384:  *  Flash_XD1Driver_REraseSync
                          1956	#1385:  **********************************************************************************************************************/
                          1957	#1386: /*! \brief       Erases area in flash memory.
                          1958	#1387:  *  \details     This function erases one or more logical sectors in flash memory.
                          1959	#1388:  *  \pre         Flash driver is initialized.
                          1960	#1389:  *  \param[in]   eraseLength Length of memory to be erased. The length has to be aligned to the length
                          1961	#1390:  *               of one or more flash sectors. The flash area has to be contiguous - gaps in must not
                          1962	#1391:  *               be included.
                          1963	#1392:  *  \param[in]   eraseAddress Start address of erase area. The start address has to be the start
                          1964	#1393:  *               address of a logical flash sector.
                          1965	#1394:  *  \return      Reports erase success or error code.
                          1966	#1395:  **********************************************************************************************************************/
                          1967		.align	1
                          1968		.align	1
                          1969	..gh.f.p.4.a.1.r.0.e.5:
                          1970		.type	..gh.f.p.4.a.1.r.0.e.5,@object
                          1971		.size	..gh.f.p.4.a.1.r.0.e.5,0
                          1972		.global	Flash_XD1Driver_REraseSync
                          1973	Flash_XD1Driver_REraseSync:
00000236 182106e0         1974		e_stwu	sp, -32(sp)
0000023a 0080             1975		se_mflr	r0
0000023c 1bc10918         1976		e_stmw	r30, 24(sp)
00000240 d901             1977		se_stw	r0, 36(sp)
00000242 014e             1978		se_mr	r30, r4
                          1979	#	    .bf
                          1980	.LDW02:
                          1981	#1396: IO_ErrorType Flash_XD1Driver_REraseSync( IO_SizeType eraseLength, IO_PositionType eraseAddress )
                          1982	#1397: {
                          1983	#1398:    vuint32 eraseAlignment;
                          1984	#1399:    vuint32 flashBlockMask[kFlashSelectCount];
                          1985	#1401:    /* Check erase addresses and calculate block masks */
                          1986	#1402:    eraseAlignment = checkAddress(flashBlockMask, eraseLength, eraseAddress);
00000244 0145             1987		se_mr	r5, r4
00000246 0134             1988		se_mr	r4, r3
00000248 18618008         1989		e_addi	r3, sp, 8
0000024c 78000001         1990		se_bl	checkAddress
                          1991	#1404:    /* Check if erase alignment is correct */
                          1992	#1405:    if ((eraseAlignment & kFlashEraseAddressAligned) == 0x00ul)
                          1993	#line1405
                          1994	..lin.e23f74c6..736509.0_32::
                          1995	.LDWlin32:
00000250 73e0e000         1996		e_lis	r31, %hiadj(flashParam)
00000254 1fff0000         1997		e_add16i	r31, r31, %lo(flashParam)
00000258 67f3             1998		se_btsti	r3, 31
0000025a e200             1999		se_bne	.L1003
                          2000	#1406:    {
                          2001	#1407:       /* Address alignment is not correct */

                                   Fri Apr 10 08:32:10 2020           Page 37
                                   Fri Apr 10 08:32:09 2020   gh_0000bi81.si
                          2002	#1408:       flashParam.errorCode = kFlashEraseInvalidAddr_XD1;
0000025c 4c40             2003		se_li	r0, 68
                          2004	#1409:       flashParam.errorAddress = eraseAddress;
                          2005	#line1409
                          2006	..lin.e23f74c6..736509.0_33::
                          2007	.LDWlin33:
0000025e e800             2008		se_b	.L1112
                          2009	.L1003:
                          2010	#1410:    }
                          2011	#1411:    else if ((eraseAlignment & kFlashEraseLengthAligned) == 0x00ul)
00000260 67e3             2012		se_btsti	r3, 30
00000262 e200             2013		se_bne	.L1006
                          2014	.L1007:
                          2015	#1412:    {
                          2016	#1413:       /* Size alignment is not correct */
                          2017	#1414:       flashParam.errorCode = kFlashEraseInvalidSize_XD1;
00000264 4c50             2018		se_li	r0, 69
                          2019	.L1112:
00000266 d8ef             2020		se_stw	r30, 32(r31)
                          2021	#1415:       flashParam.errorAddress = eraseAddress;
                          2022	#line1415
                          2023	..lin.e23f74c6..736509.0_34::
                          2024	.LDWlin34:
00000268 b20f             2025		se_sth	r0, 4(r31)
0000026a e800             2026		se_b	.L1005
                          2027	.L1006:
                          2028	#1416:    }
                          2029	#1417:    else
                          2030	#1418:    {
                          2031	#1419:       /* Prepare actual erase request to driver */
                          2032	#1420:       flashParam.blockSelect = flashBlockMask;
0000026c 18018008         2033		e_addi	r0, sp, 8
00000270 db0f             2034		se_stw	r0, 44(r31)
                          2035	#1421:       flashParam.address = eraseAddress;
                          2036	#line1421
                          2037	..lin.e23f74c6..736509.0_35::
                          2038	.LDWlin35:
00000272 d2ef             2039		se_stw	r30, 8(r31)
                          2040	#1423:       /* Call erase routine of flash driver */
                          2041	#1424:       ExpFlash_XD1Erase(&flashParam);
00000274 01f3             2042		se_mr	r3, r31
00000276 78000001         2043		e_bl	ExpFlash_XD1Erase
                          2044	.L1005:
                          2045	#1425:    }
                          2046	#1427:    return flashParam.errorCode;
0000027a a23f             2047		se_lhz	r3, 4(r31)
                          2048	#	    .ef
                          2049	.LDW12:
0000027c c901             2050		se_lwz	r0, 36(sp)
0000027e 1bc10818         2051		e_lmw	r30, 24(sp)
00000282 21f1             2052		se_addi	sp, 32
00000284 0090             2053		se_mtlr	r0
00000286 0004             2054		se_blr
                          2055		.global	__ghs_eofn_Flash_XD1Driver_REraseSync
                          2056	__ghs_eofn_Flash_XD1Driver_REraseSync:
                          2057		.type	Flash_XD1Driver_REraseSync,@function

                                   Fri Apr 10 08:32:10 2020           Page 38
                                   Fri Apr 10 08:32:09 2020   gh_0000bi81.si
                          2058		.size	Flash_XD1Driver_REraseSync,$-Flash_XD1Driver_REraseSync
                          2059		.align	1
                          2060	
                          2061	#function:			Flash_XD1Driver_REraseSync
                          2062	#stack frame size:		32
                          2063	#link area offset:		0
                          2064	#local storage area offset:	8
                          2065	#gpr save area offset:		24
                          2066	#
                          2067	#eraseAlignment	r3	local
                          2068	#flashBlockMask	8(sp)	local
                          2069	
                          2070	#eraseLength	r3	param
                          2071	#eraseAddress	r30	param
                          2072	
                          2073		.data
                          2074		.section ".vletext", "vax"
                          2075		.vle
                          2076		.vle
                          2077	
                          2078	#1428: }
                          2079	
                          2080	#1430: #if defined( FBL_ENABLE_USR_RREAD_SYNC )
                          2081	#1431: #else
                          2082	#1432: /***********************************************************************************************************************
                          2083	#1433:  *  Flash_XD1Driver_RReadSync
                          2084	#1434:  **********************************************************************************************************************/
                          2085	#1435: /*! \brief       Reads data from flash memory.
                          2086	#1436:  *  \details     This function reads data from flash memory. It can be configured to report ECC errors to the
                          2087	#1437:  *               calling function.
                          2088	#1438:  *  \param[out]  readBuffer Pointer to read target buffer. The buffer size must be at least readLength Bytes.
                          2089	#1439:  *  \param[in]   readLength Size of data to be read.
                          2090	#1440:  *  \param[in]   readAddress Start address of data to be read.
                          2091	#1441:  *  \return      Reports read success or error code.
                          2092	#1442:  **********************************************************************************************************************/
                          2093		.align	1
                          2094		.align	1
                          2095	..gh.f.p.5.a.1.r.0.e.6:
                          2096		.type	..gh.f.p.5.a.1.r.0.e.6,@object
                          2097		.size	..gh.f.p.5.a.1.r.0.e.6,0
                          2098		.global	Flash_XD1Driver_RReadSync
                          2099	Flash_XD1Driver_RReadSync:
00000288 182106f0         2100		e_stwu	sp, -16(sp)
0000028c 1bc10908         2101		e_stmw	r30, 8(sp)
00000290 0080             2102		se_mflr	r0
00000292 d501             2103		se_stw	r0, 20(sp)
                          2104	#	    .bf
                          2105	.LDW22:
00000294 70e0e000         2106		e_lis	r7, %hiadj(flashModule)
00000298 50e70000         2107		e_lwz	r7, %lo(flashModule)(r7)
                          2108	#1443: IO_ErrorType Flash_XD1Driver_RReadSync( IO_MemPtrType readBuffer, IO_SizeType readLength, IO_PositionType readAddress )
                          2109	#1444: {
                          2110	#1445: # if defined( FLASH_SETUP_RUNTIME )
                          2111	#1446:    vuint32 flashIndex;
                          2112	#1447: # endif /* FLASH_SETUP_RUNTIME */
                          2113	#1449: # if defined( FBL_FLASH_ENABLE_ECC_SAFE_READ )

                                   Fri Apr 10 08:32:10 2020           Page 39
                                   Fri Apr 10 08:32:09 2020   gh_0000bi81.si
                          2114	#1450:    IO_ErrorType result;
                          2115	#1452: #  if defined( FLASH_SETUP_RUNTIME )
                          2116	#1453:    flashIndex = ApplFblSelectFlashSetup();
                          2117	#1454: #   if( FBL_PROJECT_STATE == FBL_INTEGRATION)
                          2118	#1455:    if (flashIndex >= ARRAY_SIZE(flashModule))
                          2119	#1456:    {
                          2120	#1457:       while (1)
                          2121	#1458:       {
                          2122	#1459:          ;
                          2123	#1460:       }
                          2124	#1461:    }
                          2125	#1462: #   endif
                          2126	#1463:    flashModuleSelect = flashModule[flashIndex];
                          2127	#1464: #  else
                          2128	#1465:    flashModuleSelect = flashModule[kFblSingleFlashModule];
0000029c 73c0e000         2129		e_lis	r30, %hiadj(flashModuleSelect)
000002a0 1fde0000         2130		e_add16i	r30, r30, %lo(flashModuleSelect)
000002a4 d07e             2131		se_stw	r7, 0(r30)
                          2132	#1466: #  endif /* FLASH_SETUP_RUNTIME */
                          2133	#1468:    /* PRQA S 0303 TAG_RReadSync */ /* MD_FblFlioMpc57xx_0303 */
                          2134	#1469:    /* Clear ECC error detect register in flash module */
                          2135	#1470:    FLASH_REG(flashModuleSelect->flashBaseAddress, FBL_FLASH_MCR_OFFSET_XD1) |= FBL_FLASH_MCR_EER_XD1;
000002a6 c277             2136		se_lwz	r7, 8(r7)
000002a8 c007             2137		se_lwz	r0, 0(r7)
000002aa 73ffe40a         2138		e_lis	r31, 64522
000002ae 1bff8110         2139		e_addi	r31, r31, 4096
                          2140	#1472:    /* Configure DMA transfer */
                          2141	#1473:    FBL_EDMA_TCD_SADDR(FLASH_DMA_CHANNEL) = readAddress;
000002b2 6500             2142		se_bseti	r0, 16
000002b4 d007             2143		se_stw	r0, 0(r7)
000002b6 d05f             2144		se_stw	r5, 0(r31)
                          2145	#1474:    FBL_EDMA_TCD_ATTR(FLASH_DMA_CHANNEL) = 0x00ul; /* SMOD disabled, 8 Bit source access,
000002b8 4807             2146		se_li	r7, 0
000002ba b27f             2147		se_sth	r7, 4(r31)
                          2148	#1475:                                                      DMOD disabled, 8 Bit target access */
                          2149	#1476:    FBL_EDMA_TCD_SOFF(FLASH_DMA_CHANNEL) = 1; /* 1 Byte to be copied each cycle */
000002bc 4810             2150		se_li	r0, 1
000002be b30f             2151		se_sth	r0, 6(r31)
                          2152	#1477:    FBL_EDMA_TCD_NBYTES(FLASH_DMA_CHANNEL) = readLength;
000002c0 d24f             2153		se_stw	r4, 8(r31)
                          2154	#1478:    FBL_EDMA_TCD_SLAST(FLASH_DMA_CHANNEL) = 0u;
000002c2 d37f             2155		se_stw	r7, 12(r31)
                          2156	#1479:    FBL_EDMA_TCD_DADDR(FLASH_DMA_CHANNEL) = (vuint32)readBuffer;
000002c4 d43f             2157		se_stw	r3, 16(r31)
                          2158	#1480:    FBL_EDMA_TCD_CITER(FLASH_DMA_CHANNEL) = 0x0001u; /* Disable channel-to-channel linking,
000002c6 ba0f             2159		se_sth	r0, 20(r31)
                          2160	#1481:                                                        one DMA request to be processed */
                          2161	#1482:    FBL_EDMA_TCD_DOFF(FLASH_DMA_CHANNEL) = 1; /* 1 Byte to be copied each cycle */
000002c8 bb0f             2162		se_sth	r0, 22(r31)
                          2163	#1483:    FBL_EDMA_TCD_DLASTSGA(FLASH_DMA_CHANNEL) = 0;
000002ca d67f             2164		se_stw	r7, 24(r31)
                          2165	#1484:    FBL_EDMA_TCD_BITER(FLASH_DMA_CHANNEL) = 0x0001u; /* Disable channel-to-channel linking,
000002cc be0f             2166		se_sth	r0, 28(r31)
                          2167	#1485:                                                        on DMA request to be processed */
                          2168	#1486:    FBL_EDMA_TCD_CSR(FLASH_DMA_CHANNEL) = 0x0001u; /* Start eDMA request */
000002ce bf0f             2169		se_sth	r0, 30(r31)

                                   Fri Apr 10 08:32:10 2020           Page 40
                                   Fri Apr 10 08:32:09 2020   gh_0000bi81.si
                          2170	#1488:    /* Poll to wait for end of DMA transfer */
                          2171	#1489:    while ((FBL_EDMA_TCD_CSR(FLASH_DMA_CHANNEL) & (FBL_EDMA_CSR_START | FBL_EDMA_CSR_ACTIVE)) != 0x0000u)
000002d0 e800             2172		se_b	.L1115
                          2173	.L1117:
                          2174	#1490:    {
                          2175	#1491:       (void)FblLookForWatchdog();
                          2176	#line1491
                          2177	..lin.e23f74c6..a1307355.0_36::
                          2178	.LDWlin36:
000002d2 78000001         2179		e_bl	FblLookForWatchdog
                          2180	.L1115:
000002d6 af0f             2181		se_lhz	r0, 30(r31)
000002d8 7000c841         2182		e_and2i.	r0, 65
000002dc e200             2183		se_bne	.L1117
                          2184	#1492:    }
                          2185	#1494:    /* Evaluate eDMA and ECC status */
                          2186	#1495:    if (   ((FBL_EDMA_TCD_CSR(FLASH_DMA_CHANNEL) & FBL_EDMA_CSR_DONE) == FBL_EDMA_CSR_DONE)
                          2187	#line1495
                          2188	..lin.e23f74c6..a1307355.0_37::
                          2189	.LDWlin37:
000002de af0f             2190		se_lhz	r0, 30(r31)
000002e0 6780             2191		se_btsti	r0, 24
000002e2 e600             2192		se_beq	.L1118
000002e4 c07e             2193		se_lwz	r7, 0(r30)
000002e6 c207             2194		se_lwz	r0, 8(r7)
000002e8 c000             2195		se_lwz	r0, 0(r0)
000002ea 7010c800         2196		e_and2i.	r0, 32768
000002ee e600             2197		se_beq	.L1486
                          2198	#1496:        && ((FLASH_REG(flashModuleSelect->flashBaseAddress, FBL_FLASH_MCR_OFFSET_XD1) & FBL_FLASH_MCR_EER_XD1) != FBL_FLASH_MCR_EER_XD1))
                          2199	#1497:    {
                          2200	#1498:       result = IO_E_OK;
                          2201	.L1118:
                          2202	#1499:    }
                          2203	#1500:    else
                          2204	#1501:    {
                          2205	#1502:       /* Clear error flag */
                          2206	#1503:       FLASH_REG(flashModuleSelect->flashBaseAddress, FBL_FLASH_MCR_OFFSET_XD1) |= FBL_FLASH_MCR_EER_XD1;
                          2207	#line1503
                          2208	..lin.e23f74c6..a1307355.0_38::
                          2209	.LDWlin38:
000002f0 c07e             2210		se_lwz	r7, 0(r30)
000002f2 c277             2211		se_lwz	r7, 8(r7)
000002f4 c007             2212		se_lwz	r0, 0(r7)
000002f6 6500             2213		se_bseti	r0, 16
000002f8 d007             2214		se_stw	r0, 0(r7)
                          2215	#1505:       /* Read error detected */
                          2216	#1506:       flashParam.errorCode = kFlashFailed_XD1;
000002fa 4810             2217		se_li	r0, 1
000002fc 70e0e000         2218		e_lis	r7, %hiadj(flashParam+4)
00000300 5c070000         2219		e_sth	r0, %lo(flashParam+4)(r7)
                          2220	.L1486:
                          2221	#1507:       result = IO_E_NOT_OK;
00000304 0103             2222		se_mr	r3, r0
                          2223	#1508:    }
                          2224	#1510:    /* PRQA L:TAG_RReadSync */
                          2225	#1512:    return result;

                                   Fri Apr 10 08:32:10 2020           Page 41
                                   Fri Apr 10 08:32:09 2020   gh_0000bi81.si
                          2226	.L1113:
                          2227	#	    .ef
                          2228	.LDW32:
00000306 c501             2229		se_lwz	r0, 20(sp)
00000308 1bc10808         2230		e_lmw	r30, 8(sp)
0000030c 20f1             2231		se_addi	sp, 16
0000030e 0090             2232		se_mtlr	r0
00000310 0004             2233		se_blr
                          2234		.global	__ghs_eofn_Flash_XD1Driver_RReadSync
                          2235	__ghs_eofn_Flash_XD1Driver_RReadSync:
                          2236		.type	Flash_XD1Driver_RReadSync,@function
                          2237		.size	Flash_XD1Driver_RReadSync,$-Flash_XD1Driver_RReadSync
                          2238		.align	1
                          2239	
                          2240	#function:			Flash_XD1Driver_RReadSync
                          2241	#stack frame size:		16
                          2242	#link area offset:		0
                          2243	#local storage area offset:	8
                          2244	#gpr save area offset:		8
                          2245	#
                          2246	#result	r3	local
                          2247	
                          2248	#readBuffer	r3	param
                          2249	#readLength	r4	param
                          2250	#readAddress	r5	param
                          2251	
                          2252		.data
                          2253		.section ".vletext", "vax"
                          2254		.vle
                          2255		.vle
                          2256	
                          2257	#1513: # else
                          2258	#1514:    /* Read flash with plain memcpy */
                          2259	#1515:    (void)MEMCPY((IO_U8 *)readBuffer, (IO_U8 *)readAddress, (IO_SizeType)readLength);
                          2260	#1517:    return IO_E_OK;
                          2261	#1518: # endif /* FBL_FLASH_ENABLE_ECC_SAFE_READ */
                          2262	#1519: }
                          2263	
                          2264	#1520: #endif /* FBL_ENABLE_USR_RREAD_SYNC */
                          2265	#1522: /***********************************************************************************************************************
                          2266	#1523:  *  Flash_XD1Driver_GetVersionOfDriver
                          2267	#1524:  **********************************************************************************************************************/
                          2268	#1525: /*! \brief       Reports the flash driver version.
                          2269	#1526:  *  \details     This function reads the flash driver version and reports it to the application. Depending on the
                          2270	#1527:  *               initialization state of the driver, the following data is reported:
                          2271	#1528:  *               - Flash driver version which was used to build the Bootloader if no driver has been downloaded yet.
                          2272	#1529:  *               - Actual flash driver version if the flash driver has been downloaded.
                          2273	#1530:  *  \return      BCD coded version of flash driver.
                          2274	#1531:  **********************************************************************************************************************/
                          2275		.align	1
                          2276		.align	1
                          2277	..gh.f.p.0.a.1.r.0.e.7:
                          2278		.type	..gh.f.p.0.a.1.r.0.e.7,@object
                          2279		.size	..gh.f.p.0.a.1.r.0.e.7,0
                          2280		.global	Flash_XD1Driver_GetVersionOfDriver
                          2281	Flash_XD1Driver_GetVersionOfDriver:

                                   Fri Apr 10 08:32:10 2020           Page 42
                                   Fri Apr 10 08:32:09 2020   gh_0000bi81.si
                          2282	#	    .bf
                          2283	.LDW42:
                          2284	#1532: IO_U32 Flash_XD1Driver_GetVersionOfDriver( void )
                          2285	#1533: {
                          2286	#1534:    IO_U32 returnValue;
                          2287	#1535:    /* Flash driver not present or signature mismatch: return built-in version */
                          2288	#1536:    returnValue = (IO_U32)(((IO_U32)FLASH_DRIVER_XD1_VERSION_MAJOR << 16u) | \
                          2289	#1537:                           ((IO_U32)FLASH_DRIVER_XD1_VERSION_MINOR <<  8u) | \
                          2290	#1538:                           ((IO_U32)FLASH_DRIVER_XD1_VERSION_PATCH));
                          2291	#1540:    return returnValue;
00000312 70600e00         2292		e_li	r3, 67072
                          2293	#	    .ef
                          2294	.LDW52:
00000316 0004             2295		se_blr
                          2296		.global	__ghs_eofn_Flash_XD1Driver_GetVersionOfDriver
                          2297	__ghs_eofn_Flash_XD1Driver_GetVersionOfDriver:
                          2298		.type	Flash_XD1Driver_GetVersionOfDriver,@function
                          2299		.size	Flash_XD1Driver_GetVersionOfDriver,$-Flash_XD1Driver_GetVersionOfDriver
                          2300		.align	1
                          2301	
                          2302	#function:			Flash_XD1Driver_GetVersionOfDriver
                          2303	#stack frame size:		0
                          2304	#
                          2305	
                          2306		.data
                          2307		.section ".vletext", "vax"
                          2308		.vle
                          2309		.vle
                          2310	
                          2311	#1541: }
                          2312		.align	1
                          2313	#flashParam	flashParam	static
                          2314	#flashBlocks_6	flashBlocks_6	static
                          2315	#flash_user_protection_6	flash_user_protection_6	static
                          2316	#flashModule_6	flashModule_6	static
                          2317	#flashModule	flashModule	static
                          2318	#flashModuleSelect	flashModuleSelect	static
                          2319	
                          2320		.data
                          2321		.note ".PPC.EMB.apuinfo",""
00000000 00000008         2322		.long	0x00000008
00000004 00000004         2323		.long	4
00000008 00000002         2324		.long	0x00000002
                          2325		# "APUinfo\000"
0000000c 41505569         2326		.byte	65,80,85,105
00000010 6e666f00         2327		.byte	110,102,111,0
00000014 01040001         2328		.long	0x01040001
                          2329		.ghsnote version,20
                          2330		.ghsnote tools,3
                          2331		.ghsnote options,644
                          2332		.section ".vletext", "vax"
                          2333		.vle
                          2334		.vle
                          2335		.align	1
                          2336	..eof.C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_flio_xd1...43.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl..5E8FB079..0::
                          2337		.section	.debug_info

                                   Fri Apr 10 08:32:10 2020           Page 43
                                   Fri Apr 10 08:32:09 2020   gh_0000bi81.si
                          2338	.Ldw_begin:
00000000 00000d4f         2339		.long	.Ldw_end-.Ldw_begin-4
00000004 0002             2340		.byte	0,2
00000006 00000000         2341		.long	.Ldw_abbr_begin
0000000a 04               2342		.byte	4
                          2343		.section	.debug_abbrev
                          2344	.Ldw_abbr_begin:
                          2345		.section	.debug_info
0000000b 01               2346		.byte	1
0000000c 00000000         2347		.long	..bof.C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_flio_xd1...43.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl..5E8FB079..0
00000010 00000000         2348		.long	..eof.C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_flio_xd1...43.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl..5E8FB079..0
00000014 2e2e2f2e2e2f2e2e 2349		.strz	"../../../BSW/Fbl/fbl_flio_xd1.c"
0000001c 2f4253572f46626c
00000024 2f66626c5f666c69
0000002c 6f5f7864312e6300
00000034 433a5c566563746f 2350		.strz	"C:\\Vector\\CBD1800772_D00_Mpc57xx\\Demo\\DemoFbl\\Appl"
0000003c 725c434244313830
00000044 303737325f443030
0000004c 5f4d706335377878
00000054 5c44656d6f5c4465
0000005c 6d6f46626c5c4170
00000064 706c00          
00000067 4748532043203230 2351		.strz	"GHS C 2017.5.4 [dual]"
0000006f 31372e352e34205b
00000077 6475616c5d00    
0000007d 0001             2352		.byte	0,1
0000007f 00000000         2353		.long	.Ldw_line_begin
00000083 00000000         2354		.long	.Ldw_macinfo_begin
00000087 00               2355		.byte	0
                          2356	
                          2357		.section	.debug_abbrev
00000000 01               2358		.byte	1
00000001 11               2359		.byte	17
00000002 01               2360		.byte	1
00000003 1101             2361		.byte	17,1
00000005 1201             2362		.byte	18,1
00000007 0308             2363		.byte	3,8
00000009 1b08             2364		.byte	27,8
0000000b 2508             2365		.byte	37,8
0000000d 1305             2366		.byte	19,5
0000000f 1006             2367		.byte	16,6
00000011 4306             2368		.byte	67,6
00000013 420b             2369		.byte	66,11
00000015 0000             2370		.byte	0,0
                          2371	
                          2372		.section	.debug_line
                          2373	.Ldw_line_begin:
00000000 00000940         2374		.long	.Ldw_line_end-.Ldw_line_begin-4
00000004 0002             2375		.byte	0,2
00000006 000005f5         2376		.long	.Ldw_lpro_end-.Ldw_lpro_begin
                          2377	.Ldw_lpro_begin:
0000000a 01               2378		.byte	1
0000000b 00               2379		.byte	0
0000000c 00               2380		.byte	0
0000000d 04               2381		.byte	4
0000000e 0a               2382		.byte	10
0000000f 000101           2383		.byte	0,1,1
00000012 010100           2384		.byte	1,1,0
00000015 000001           2385		.byte	0,0,1
00000018 00               2386		.byte	0
00000019 2e2e2f2e2e2f2e2e 2387		.strz	"../../../BSW/Fbl/fbl_flio_xd1.c"
00000021 2f4253572f46626c
00000029 2f66626c5f666c69
00000031 6f5f7864312e6300
00000039 000000           2388		.byte	0,0,0
0000003c 696e636c7564655c 2389		.strz	"include\\fbl_inc.h"
00000044 66626c5f696e632e
0000004c 6800            
0000004e 000000           2390		.byte	0,0,0
00000051 2e2e2f2e2e2f2e2e 2391		.strz	"../../../bsw/fbl/v_ver.h"
00000059 2f6273772f66626c
00000061 2f765f7665722e68
00000069 00              
0000006a 000000           2392		.byte	0,0,0
0000006d 67656e646174615c 2393		.strz	"gendata\\v_cfg.h"
00000075 765f6366672e6800

                                   Fri Apr 10 08:32:10 2020           Page 44
                                   Fri Apr 10 08:32:09 2020   gh_0000bi81.si
0000007d 000000           2394		.byte	0,0,0
00000080 67656e646174615c 2395		.strz	"gendata\\v_inc.h"
00000088 765f696e632e6800
00000090 000000           2396		.byte	0,0,0
00000093 67656e646174615c 2397		.strz	"gendata\\v_par.h"
0000009b 765f7061722e6800
000000a3 000000           2398		.byte	0,0,0
000000a6 2e2e2f2e2e2f2e2e 2399		.strz	"../../../bsw/_common/v_def.h"
000000ae 2f6273772f5f636f
000000b6 6d6d6f6e2f765f64
000000be 65662e6800      
000000c3 000000           2400		.byte	0,0,0
000000c6 2e2e2f2e2e2f2e2e 2401		.strz	"../../../bsw/secmod/SecM.h"
000000ce 2f6273772f736563
000000d6 6d6f642f5365634d
000000de 2e6800          
000000e1 000000           2402		.byte	0,0,0
000000e4 2e2e2f2e2e2f2e2e 2403		.strz	"../../../bsw/secmod/Sec.h"
000000ec 2f6273772f736563
000000f4 6d6f642f5365632e
000000fc 6800            
000000fe 000000           2404		.byte	0,0,0
00000101 2e2e2f2e2e2f2e2e 2405		.strz	"../../../bsw/secmod/Sec_Inc.h"
00000109 2f6273772f736563
00000111 6d6f642f5365635f
00000119 496e632e6800    
0000011f 000000           2406		.byte	0,0,0
00000122 67656e646174615c 2407		.strz	"gendata\\SecM_cfg.h"
0000012a 5365634d5f636667
00000132 2e6800          
00000135 000000           2408		.byte	0,0,0
00000138 2e2e2f2e2e2f2e2e 2409		.strz	"../../../bsw/secmod/Sec_Types.h"
00000140 2f6273772f736563
00000148 6d6f642f5365635f
00000150 54797065732e6800
00000158 000000           2410		.byte	0,0,0
0000015b 67656e646174615c 2411		.strz	"gendata\\SecMPar.h"
00000163 5365634d5061722e
0000016b 6800            
0000016d 000000           2412		.byte	0,0,0
00000170 2e2e2f2e2e2f2e2e 2413		.strz	"../../../bsw/secmod/SecM_inc.h"
00000178 2f6273772f736563
00000180 6d6f642f5365634d
00000188 5f696e632e6800  
0000018f 000000           2414		.byte	0,0,0
00000192 2e2e2f2e2e2f2e2e 2415		.strz	"../../../bsw/secmod/Sec_Crc.h"
0000019a 2f6273772f736563
000001a2 6d6f642f5365635f
000001aa 4372632e6800    
000001b0 000000           2416		.byte	0,0,0
000001b3 2e2e2f2e2e2f2e2e 2417		.strz	"../../../bsw/secmod/Sec_SeedKey.h"
000001bb 2f6273772f736563
000001c3 6d6f642f5365635f
000001cb 536565644b65792e
000001d3 6800            
000001d5 000000           2418		.byte	0,0,0
000001d8 696e636c7564655c 2419		.strz	"include\\Sec_SeedKey_Cfg.h"
000001e0 5365635f53656564
000001e8 4b65795f4366672e
000001f0 6800            
000001f2 000000           2420		.byte	0,0,0
000001f5 2e2e2f2e2e2f2e2e 2421		.strz	"../../../bsw/secmod/Sec_Verification.h"
000001fd 2f6273772f736563
00000205 6d6f642f5365635f
0000020d 5665726966696361
00000215 74696f6e2e6800  
0000021c 000000           2422		.byte	0,0,0
0000021f 2e2e2f2e2e2f2e2e 2423		.strz	"../../../bsw/fbl/fbl_def.h"
00000227 2f6273772f66626c
0000022f 2f66626c5f646566
00000237 2e6800          
0000023a 000000           2424		.byte	0,0,0
0000023d 67656e646174615c 2425		.strz	"gendata\\fbl_cfg.h"
00000245 66626c5f6366672e
0000024d 6800            
0000024f 000000           2426		.byte	0,0,0
00000252 2e2e2f2e2e2f2e2e 2427		.strz	"../../../bsw/fbl/fbl_assert.h"
0000025a 2f6273772f66626c
00000262 2f66626c5f617373
0000026a 6572742e6800    
00000270 000000           2428		.byte	0,0,0
00000273 2e2e2f2e2e2f2e2e 2429		.strz	"../../../bsw/fbl/fbl_assert_oem.h"
0000027b 2f6273772f66626c
00000283 2f66626c5f617373
0000028b 6572745f6f656d2e
00000293 6800            
00000295 000000           2430		.byte	0,0,0
00000298 67656e646174615c 2431		.strz	"gendata\\fbl_mtab.h"
000002a0 66626c5f6d746162
000002a8 2e6800          
000002ab 000000           2432		.byte	0,0,0
000002ae 696e636c7564655c 2433		.strz	"include\\MemMap.h"
000002b6 4d656d4d61702e68
000002be 00              
000002bf 000000           2434		.byte	0,0,0
000002c2 2e2e2f2e2e2f2e2e 2435		.strz	"../../../bsw/flash/flashdrv.h"
000002ca 2f6273772f666c61
000002d2 73682f666c617368
000002da 6472762e6800    
000002e0 000000           2436		.byte	0,0,0
000002e3 2e2e2f2e2e2f2e2e 2437		.strz	"../../../bsw/flash_xd1/flashdrv_xd1.h"
000002eb 2f6273772f666c61
000002f3 73685f7864312f66
000002fb 6c6173686472765f
00000303 7864312e6800    
00000309 000000           2438		.byte	0,0,0
0000030c 2e2e2f2e2e2f2e2e 2439		.strz	"../../../bsw/fbl/fbl_wd.h"
00000314 2f6273772f66626c
0000031c 2f66626c5f77642e
00000324 6800            
00000326 000000           2440		.byte	0,0,0
00000329 2e2e2f2e2e2f2e2e 2441		.strz	"../../../bsw/fbl/iotypes.h"
00000331 2f6273772f66626c
00000339 2f696f7479706573
00000341 2e6800          
00000344 000000           2442		.byte	0,0,0
00000347 2e2e2f2e2e2f2e2e 2443		.strz	"../../../bsw/fbl/fbl_mio.h"
0000034f 2f6273772f66626c
00000357 2f66626c5f6d696f
0000035f 2e6800          
00000362 000000           2444		.byte	0,0,0
00000365 2e2e2f2e2e2f2e2e 2445		.strz	"../../../bsw/fbl/fbl_flio.h"
0000036d 2f6273772f66626c
00000375 2f66626c5f666c69
0000037d 6f2e6800        
00000381 000000           2446		.byte	0,0,0
00000384 2e2e2f2e2e2f2e2e 2447		.strz	"../../../bsw/fbl/fbl_flio_xd1.h"
0000038c 2f6273772f66626c
00000394 2f66626c5f666c69
0000039c 6f5f7864312e6800
000003a4 000000           2448		.byte	0,0,0
000003a7 2e2e2f2e2e2f2e2e 2449		.strz	"../../../bsw/eep/EepInc.h"
000003af 2f6273772f656570
000003b7 2f456570496e632e
000003bf 6800            

                                   Fri Apr 10 08:32:10 2020           Page 45
                                   Fri Apr 10 08:32:09 2020   gh_0000bi81.si
000003c1 000000           2450		.byte	0,0,0
000003c4 2e2e2f2e2e2f2e2e 2451		.strz	"../../../bsw/eep/EepIO.h"
000003cc 2f6273772f656570
000003d4 2f456570494f2e68
000003dc 00              
000003dd 000000           2452		.byte	0,0,0
000003e0 2e2e2f2e2e2f2e2e 2453		.strz	"../../../bsw/fbl/applvect.h"
000003e8 2f6273772f66626c
000003f0 2f6170706c766563
000003f8 742e6800        
000003fc 000000           2454		.byte	0,0,0
000003ff 2e2e2f2e2e2f2e2e 2455		.strz	"../../../bsw/fbl/fbl_cw.h"
00000407 2f6273772f66626c
0000040f 2f66626c5f63772e
00000417 6800            
00000419 000000           2456		.byte	0,0,0
0000041c 67656e646174615c 2457		.strz	"gendata\\fbl_cw_cfg.h"
00000424 66626c5f63775f63
0000042c 66672e6800      
00000431 000000           2458		.byte	0,0,0
00000434 2e2e2f2e2e2f2e2e 2459		.strz	"../../../bsw/fbl/fbl_hw.h"
0000043c 2f6273772f66626c
00000444 2f66626c5f68772e
0000044c 6800            
0000044e 000000           2460		.byte	0,0,0
00000451 2e2e2f2e2e2f2e2e 2461		.strz	"../../../bsw/fbl/fbl_sfr.h"
00000459 2f6273772f66626c
00000461 2f66626c5f736672
00000469 2e6800          
0000046c 000000           2462		.byte	0,0,0
0000046f 67656e646174615c 2463		.strz	"gendata\\ftp_cfg.h"
00000477 6674705f6366672e
0000047f 6800            
00000481 000000           2464		.byte	0,0,0
00000484 2e2e2f2e2e2f2e2e 2465		.strz	"../../../bsw/fbl/fbl_tp.h"
0000048c 2f6273772f66626c
00000494 2f66626c5f74702e
0000049c 6800            
0000049e 000000           2466		.byte	0,0,0
000004a1 696e636c7564655c 2467		.strz	"include\\WrapNv_inc.h"
000004a9 577261704e765f69
000004b1 6e632e6800      
000004b6 000000           2468		.byte	0,0,0
000004b9 2e2e2f2e2e2f2e2e 2469		.strz	"../../../bsw/wrapnv/WrapNv.h"
000004c1 2f6273772f777261
000004c9 706e762f57726170
000004d1 4e762e6800      
000004d6 000000           2470		.byte	0,0,0
000004d9 67656e646174615c 2471		.strz	"gendata\\WrapNv_cfg.h"
000004e1 577261704e765f63
000004e9 66672e6800      
000004ee 000000           2472		.byte	0,0,0
000004f1 67656e646174615c 2473		.strz	"gendata\\fbl_apfb.h"
000004f9 66626c5f61706662
00000501 2e6800          
00000504 000000           2474		.byte	0,0,0
00000507 2e2e2f2e2e2f2e2e 2475		.strz	"../../../bsw/fbl/fbl_diag.h"
0000050f 2f6273772f66626c
00000517 2f66626c5f646961
0000051f 672e6800        
00000523 000000           2476		.byte	0,0,0
00000526 2e2e2f2e2e2f2e2e 2477		.strz	"../../../bsw/fbl/fbl_diag_oem.h"
0000052e 2f6273772f66626c
00000536 2f66626c5f646961
0000053e 675f6f656d2e6800
00000546 000000           2478		.byte	0,0,0
00000549 2e2e2f2e2e2f2e2e 2479		.strz	"../../../bsw/fbl/fbl_mem.h"
00000551 2f6273772f66626c
00000559 2f66626c5f6d656d
00000561 2e6800          
00000564 000000           2480		.byte	0,0,0
00000567 2e2e2f2e2e2f2e2e 2481		.strz	"../../../bsw/fbl/fbl_mem_oem.h"
0000056f 2f6273772f66626c
00000577 2f66626c5f6d656d
0000057f 5f6f656d2e6800  
00000586 000000           2482		.byte	0,0,0
00000589 696e636c7564655c 2483		.strz	"include\\fbl_ap.h"
00000591 66626c5f61702e68
00000599 00              
0000059a 000000           2484		.byte	0,0,0
0000059d 696e636c7564655c 2485		.strz	"include\\fbl_apwd.h"
000005a5 66626c5f61707764
000005ad 2e6800          
000005b0 000000           2486		.byte	0,0,0
000005b3 696e636c7564655c 2487		.strz	"include\\fbl_apdi.h"
000005bb 66626c5f61706469
000005c3 2e6800          
000005c6 000000           2488		.byte	0,0,0
000005c9 696e636c7564655c 2489		.strz	"include\\fbl_apnv.h"
000005d1 66626c5f61706e76
000005d9 2e6800          
000005dc 000000           2490		.byte	0,0,0
000005df 2e2e2f2e2e2f2e2e 2491		.strz	"../../../bsw/fbl/fbl_main.h"
000005e7 2f6273772f66626c
000005ef 2f66626c5f6d6169
000005f7 6e2e6800        
000005fb 000000           2492		.byte	0,0,0
000005fe 00               2493		.byte	0
                          2494	.Ldw_lpro_end:
                          2495		.section	.debug_macinfo
                          2496	.Ldw_macinfo_begin:
                          2497		.section	.debug_frame
                          2498	.LDW_5dc26d0:
00000000 0000008c         2499		.long	.LDW_unq_2-.LDW_unq_1
                          2500	.LDW_unq_1:
00000004 ffffffff         2501		.byte	255,255,255,255
00000008 01               2502		.byte	1
00000009 00               2503		.byte	0
0000000a 01               2504		.byte	1
0000000b 01               2505		.byte	1

                                   Fri Apr 10 08:32:10 2020           Page 46
                                   Fri Apr 10 08:32:09 2020   gh_0000bi81.si
0000000c 6c               2506		.byte	108
0000000d 0c               2507		.byte	12
0000000e 01               2508		.byte	1
0000000f 00               2509		.byte	0
00000010 07               2510		.byte	7
00000011 00               2511		.byte	0
00000012 07               2512		.byte	7
00000013 01               2513		.byte	1
00000014 07               2514		.byte	7
00000015 02               2515		.byte	2
00000016 07               2516		.byte	7
00000017 03               2517		.byte	3
00000018 07               2518		.byte	7
00000019 04               2519		.byte	4
0000001a 07               2520		.byte	7
0000001b 05               2521		.byte	5
0000001c 07               2522		.byte	7
0000001d 06               2523		.byte	6
0000001e 07               2524		.byte	7
0000001f 07               2525		.byte	7
00000020 07               2526		.byte	7
00000021 08               2527		.byte	8
00000022 07               2528		.byte	7
00000023 09               2529		.byte	9
00000024 07               2530		.byte	7
00000025 0a               2531		.byte	10
00000026 07               2532		.byte	7
00000027 0b               2533		.byte	11
00000028 07               2534		.byte	7
00000029 0c               2535		.byte	12
0000002a 07               2536		.byte	7
0000002b 0d               2537		.byte	13
0000002c 07               2538		.byte	7
0000002d 0e               2539		.byte	14
0000002e 07               2540		.byte	7
0000002f 0f               2541		.byte	15
00000030 07               2542		.byte	7
00000031 10               2543		.byte	16
00000032 07               2544		.byte	7
00000033 11               2545		.byte	17
00000034 07               2546		.byte	7
00000035 12               2547		.byte	18
00000036 07               2548		.byte	7
00000037 13               2549		.byte	19
00000038 07               2550		.byte	7
00000039 14               2551		.byte	20
0000003a 07               2552		.byte	7
0000003b 15               2553		.byte	21
0000003c 07               2554		.byte	7
0000003d 16               2555		.byte	22
0000003e 07               2556		.byte	7
0000003f 17               2557		.byte	23
00000040 07               2558		.byte	7
00000041 18               2559		.byte	24
00000042 07               2560		.byte	7
00000043 19               2561		.byte	25

                                   Fri Apr 10 08:32:10 2020           Page 47
                                   Fri Apr 10 08:32:09 2020   gh_0000bi81.si
00000044 07               2562		.byte	7
00000045 1a               2563		.byte	26
00000046 07               2564		.byte	7
00000047 1b               2565		.byte	27
00000048 07               2566		.byte	7
00000049 1c               2567		.byte	28
0000004a 07               2568		.byte	7
0000004b 1d               2569		.byte	29
0000004c 07               2570		.byte	7
0000004d 1e               2571		.byte	30
0000004e 07               2572		.byte	7
0000004f 1f               2573		.byte	31
00000050 07               2574		.byte	7
00000051 20               2575		.byte	32
00000052 07               2576		.byte	7
00000053 21               2577		.byte	33
00000054 07               2578		.byte	7
00000055 22               2579		.byte	34
00000056 07               2580		.byte	7
00000057 23               2581		.byte	35
00000058 07               2582		.byte	7
00000059 24               2583		.byte	36
0000005a 07               2584		.byte	7
0000005b 25               2585		.byte	37
0000005c 07               2586		.byte	7
0000005d 26               2587		.byte	38
0000005e 07               2588		.byte	7
0000005f 27               2589		.byte	39
00000060 07               2590		.byte	7
00000061 28               2591		.byte	40
00000062 07               2592		.byte	7
00000063 29               2593		.byte	41
00000064 07               2594		.byte	7
00000065 2a               2595		.byte	42
00000066 07               2596		.byte	7
00000067 2b               2597		.byte	43
00000068 07               2598		.byte	7
00000069 2c               2599		.byte	44
0000006a 07               2600		.byte	7
0000006b 2d               2601		.byte	45
0000006c 07               2602		.byte	7
0000006d 2e               2603		.byte	46
0000006e 07               2604		.byte	7
0000006f 2f               2605		.byte	47
00000070 07               2606		.byte	7
00000071 30               2607		.byte	48
00000072 07               2608		.byte	7
00000073 31               2609		.byte	49
00000074 07               2610		.byte	7
00000075 32               2611		.byte	50
00000076 07               2612		.byte	7
00000077 33               2613		.byte	51
00000078 07               2614		.byte	7
00000079 34               2615		.byte	52
0000007a 07               2616		.byte	7
0000007b 35               2617		.byte	53

                                   Fri Apr 10 08:32:10 2020           Page 48
                                   Fri Apr 10 08:32:09 2020   gh_0000bi81.si
0000007c 07               2618		.byte	7
0000007d 36               2619		.byte	54
0000007e 07               2620		.byte	7
0000007f 37               2621		.byte	55
00000080 07               2622		.byte	7
00000081 38               2623		.byte	56
00000082 07               2624		.byte	7
00000083 39               2625		.byte	57
00000084 07               2626		.byte	7
00000085 3a               2627		.byte	58
00000086 07               2628		.byte	7
00000087 3b               2629		.byte	59
00000088 07               2630		.byte	7
00000089 3c               2631		.byte	60
0000008a 07               2632		.byte	7
0000008b 3d               2633		.byte	61
0000008c 07               2634		.byte	7
0000008d 3e               2635		.byte	62
0000008e 07               2636		.byte	7
0000008f 3f               2637		.byte	63
                          2638	.LDW_unq_2:
                          2639		.section	.debug_info
                          2640	.LDW_4a5c560:
00000088 27               2641		.byte	39
00000089 756e7369676e6564 2642		.strz	"unsigned long"
00000091 206c6f6e6700    
00000097 07               2643		.byte	7
00000098 04               2644		.byte	4
                          2645	
                          2646		.section	.debug_abbrev
00000017 27               2647		.byte	39
00000018 24               2648		.byte	36
00000019 00               2649		.byte	0
0000001a 0308             2650		.byte	3,8
0000001c 3e0b             2651		.byte	62,11
0000001e 0b0b             2652		.byte	11,11
00000020 0000             2653		.byte	0,0
                          2654	
                          2655		.section	.debug_info
                          2656	.LDW_4a9da68:
00000099 2b               2657		.byte	43
0000009a 00000000         2658		.long	.LDW_4a9da10
                          2659	
                          2660		.section	.debug_abbrev
00000022 2b               2661		.byte	43
00000023 26               2662		.byte	38
00000024 00               2663		.byte	0
00000025 4910             2664		.byte	73,16
00000027 0000             2665		.byte	0,0
                          2666	
                          2667		.section	.debug_info
                          2668	.LDW_4a5c758:
0000009e 31               2669		.byte	49
0000009f 00000000         2670		.long	.LDW_4a9da68
                          2671	
                          2672		.section	.debug_abbrev
00000029 31               2673		.byte	49

                                   Fri Apr 10 08:32:10 2020           Page 49
                                   Fri Apr 10 08:32:09 2020   gh_0000bi81.si
0000002a 0f               2674		.byte	15
0000002b 00               2675		.byte	0
0000002c 4910             2676		.byte	73,16
0000002e 0000             2677		.byte	0,0
                          2678	
                          2679		.section	.debug_info
                          2680	.LDW_4a9a530:
000000a3 2b               2681		.byte	43
000000a4 00000000         2682		.long	.LDW_4a9a4d8
                          2683	
                          2684	.LDW_4a5ca68:
000000a8 31               2685		.byte	49
000000a9 00000000         2686		.long	.LDW_4a9a530
                          2687	
                          2688	.LDW_4a5c720:
000000ad 46               2689		.byte	70
000000ae 00000000         2690		.long	.LDW_4a9ef90
000000b2 01               2691		.byte	1
                          2692	
                          2693		.section	.debug_abbrev
00000030 46               2694		.byte	70
00000031 15               2695		.byte	21
00000032 01               2696		.byte	1
00000033 4910             2697		.byte	73,16
00000035 270c             2698		.byte	39,12
00000037 0000             2699		.byte	0,0
                          2700	
                          2701		.section	.debug_info
                          2702	.LDW_4a53860:
000000b3 14               2703		.byte	20
000000b4 00000000         2704		.long	.LDW_4a5c758
000000b8 00               2705		.byte	0
                          2706	
                          2707		.section	.debug_abbrev
00000039 14               2708		.byte	20
0000003a 05               2709		.byte	5
0000003b 00               2710		.byte	0
0000003c 4910             2711		.byte	73,16
0000003e 4b0c             2712		.byte	75,12
00000040 0000             2713		.byte	0,0
                          2714	
                          2715		.section	.debug_info
                          2716	.LDW_4a53710:
000000b9 14               2717		.byte	20
000000ba 00000000         2718		.long	.LDW_4a5ca68
000000be 00               2719		.byte	0
                          2720	
000000bf 00               2721		.byte	0
                          2722	
                          2723	.LDW_4a5c4f0:
000000c0 31               2724		.byte	49
000000c1 00000000         2725		.long	.LDW_4a9ef90
                          2726	
                          2727	.LDW_4a5ca30:
000000c5 46               2728		.byte	70
000000c6 00000000         2729		.long	.LDW_4a9ef90

                                   Fri Apr 10 08:32:10 2020           Page 50
                                   Fri Apr 10 08:32:09 2020   gh_0000bi81.si
000000ca 01               2730		.byte	1
                          2731	
                          2732	.LDW_4a532f0:
000000cb 14               2733		.byte	20
000000cc 00000000         2734		.long	.LDW_4a5c4f0
000000d0 00               2735		.byte	0
                          2736	
                          2737	.LDW_4a53650:
000000d1 14               2738		.byte	20
000000d2 00000000         2739		.long	.LDW_4a9a728
000000d6 00               2740		.byte	0
                          2741	
                          2742	.LDW_4a53260:
000000d7 14               2743		.byte	20
000000d8 00000000         2744		.long	.LDW_4a9a780
000000dc 00               2745		.byte	0
                          2746	
000000dd 00               2747		.byte	0
                          2748	
                          2749	.LDW_4a5c9f8:
000000de 27               2750		.byte	39
000000df 756e7369676e6564 2751		.strz	"unsigned short"
000000e7 2073686f727400  
000000ee 07               2752		.byte	7
000000ef 02               2753		.byte	2
                          2754	
                          2755	.LDW_4a5caa0:
000000f0 27               2756		.byte	39
000000f1 766f69642a00     2757		.strz	"void*"
000000f7 01               2758		.byte	1
000000f8 04               2759		.byte	4
                          2760	
                          2761	.LDW_4a5c8e0:
000000f9 46               2762		.byte	70
000000fa 00000000         2763		.long	.LDW_5bc5148
000000fe 01               2764		.byte	1
                          2765	
                          2766	.LDW_4a53530:
000000ff 14               2767		.byte	20
00000100 00000000         2768		.long	.LDW_4a5caa0
00000104 00               2769		.byte	0
                          2770	
00000105 00               2771		.byte	0
                          2772	
                          2773	.LDW_4a5c3d8:
00000106 46               2774		.byte	70
00000107 00000000         2775		.long	.LDW_5bc5148
0000010b 01               2776		.byte	1
                          2777	
                          2778	.LDW_4a53320:
0000010c 14               2779		.byte	20
0000010d 00000000         2780		.long	.LDW_4a5caa0
00000111 00               2781		.byte	0
                          2782	
00000112 00               2783		.byte	0
                          2784	
                          2785	.LDW_4a5c448:

                                   Fri Apr 10 08:32:10 2020           Page 51
                                   Fri Apr 10 08:32:09 2020   gh_0000bi81.si
00000113 27               2786		.byte	39
00000114 756e7369676e6564 2787		.strz	"unsigned char"
0000011c 206368617200    
00000122 08               2788		.byte	8
00000123 01               2789		.byte	1
                          2790	
                          2791	.LDW_4a5c480:
00000124 31               2792		.byte	49
00000125 00000000         2793		.long	.LDW_5bc4f90
                          2794	
                          2795	.LDW_4a5c410:
00000129 46               2796		.byte	70
0000012a 00000000         2797		.long	.LDW_5bc5148
0000012e 01               2798		.byte	1
                          2799	
                          2800	.LDW_4a53470:
0000012f 14               2801		.byte	20
00000130 00000000         2802		.long	.LDW_5bc4fe8
00000134 00               2803		.byte	0
                          2804	
                          2805	.LDW_4a534a0:
00000135 14               2806		.byte	20
00000136 00000000         2807		.long	.LDW_4a9a728
0000013a 00               2808		.byte	0
                          2809	
                          2810	.LDW_4a53380:
0000013b 14               2811		.byte	20
0000013c 00000000         2812		.long	.LDW_4a9a780
00000140 00               2813		.byte	0
                          2814	
00000141 00               2815		.byte	0
                          2816	
                          2817	.LDW_4a5c4b8:
00000142 27               2818		.byte	39
00000143 696e7400         2819		.strz	"int"
00000147 05               2820		.byte	5
00000148 04               2821		.byte	4
                          2822	
                          2823	.LDW_5bc5728:
00000149 3c               2824		.byte	60
0000014a 00               2825		.byte	0
0000014b 10               2826		.byte	16
0000014c 00000000         2827		.long	.LDW_4a9ef90
                          2828	
                          2829		.section	.debug_abbrev
00000042 3c               2830		.byte	60
00000043 01               2831		.byte	1
00000044 01               2832		.byte	1
00000045 090b             2833		.byte	9,11
00000047 0b0f             2834		.byte	11,15
00000049 4910             2835		.byte	73,16
0000004b 0000             2836		.byte	0,0
                          2837	
                          2838		.section	.debug_info
00000150 34               2839		.byte	52
00000151 00000000         2840		.long	.LDW_4a5c4b8
00000155 04               2841		.byte	4

                                   Fri Apr 10 08:32:10 2020           Page 52
                                   Fri Apr 10 08:32:09 2020   gh_0000bi81.si
00000156 00               2842		.byte	0
00000157 03               2843		.byte	3
                          2844	
                          2845		.section	.debug_abbrev
0000004d 34               2846		.byte	52
0000004e 21               2847		.byte	33
0000004f 00               2848		.byte	0
00000050 4910             2849		.byte	73,16
00000052 0b0f             2850		.byte	11,15
00000054 220d             2851		.byte	34,13
00000056 2f0d             2852		.byte	47,13
00000058 0000             2853		.byte	0,0
                          2854	
                          2855		.section	.debug_info
00000158 00               2856		.byte	0
                          2857	
                          2858	.LDW_4a5c790:
00000159 46               2859		.byte	70
0000015a 00000000         2860		.long	.LDW_5bc5148
0000015e 01               2861		.byte	1
                          2862	
                          2863	.LDW_4a53560:
0000015f 14               2864		.byte	20
00000160 00000000         2865		.long	.LDW_4a9a728
00000164 00               2866		.byte	0
                          2867	
                          2868	.LDW_4a535f0:
00000165 14               2869		.byte	20
00000166 00000000         2870		.long	.LDW_4a9a780
0000016a 00               2871		.byte	0
                          2872	
0000016b 00               2873		.byte	0
                          2874	
                          2875	.LDW_5bc5848:
0000016c 3c               2876		.byte	60
0000016d 00               2877		.byte	0
0000016e 10               2878		.byte	16
0000016f 00000000         2879		.long	.LDW_4a9ef90
                          2880	
00000173 34               2881		.byte	52
00000174 00000000         2882		.long	.LDW_4a5c4b8
00000178 04               2883		.byte	4
00000179 00               2884		.byte	0
0000017a 03               2885		.byte	3
                          2886	
0000017b 00               2887		.byte	0
                          2888	
                          2889	.LDW_4a5c608:
0000017c 46               2890		.byte	70
0000017d 00000000         2891		.long	.LDW_5bc5148
00000181 01               2892		.byte	1
                          2893	
                          2894	.LDW_4a534d0:
00000182 14               2895		.byte	20
00000183 00000000         2896		.long	.LDW_5bc4fe8
00000187 00               2897		.byte	0

                                   Fri Apr 10 08:32:10 2020           Page 53
                                   Fri Apr 10 08:32:09 2020   gh_0000bi81.si
                          2898	
                          2899	.LDW_4a53500:
00000188 14               2900		.byte	20
00000189 00000000         2901		.long	.LDW_4a9a728
0000018d 00               2902		.byte	0
                          2903	
                          2904	.LDW_4a53140:
0000018e 14               2905		.byte	20
0000018f 00000000         2906		.long	.LDW_4a9a780
00000193 00               2907		.byte	0
                          2908	
00000194 00               2909		.byte	0
                          2910	
                          2911	.LDW_4a5c7c8:
00000195 46               2912		.byte	70
00000196 00000000         2913		.long	.LDW_5c5e4c0
0000019a 01               2914		.byte	1
                          2915	
0000019b 00               2916		.byte	0
                          2917	
                          2918	.LDW_4a5c678:
0000019c 27               2919		.byte	39
0000019d 73686f727400     2920		.strz	"short"
000001a3 05               2921		.byte	5
000001a4 02               2922		.byte	2
                          2923	
                          2924	.LDW_4a5c800:
000001a5 27               2925		.byte	39
000001a6 6c6f6e6700       2926		.strz	"long"
000001ab 05               2927		.byte	5
000001ac 04               2928		.byte	4
                          2929	
                          2930	.LDW_5d78190:
000001ad 2b               2931		.byte	43
000001ae 00000000         2932		.long	.LDW_4a5c560
                          2933	
                          2934	.LDW_5c8dd18:
000001b2 31               2935		.byte	49
000001b3 00000000         2936		.long	.LDW_5d78190
                          2937	
                          2938	.LDW_5dea240:
000001b7 31               2939		.byte	49
000001b8 00000000         2940		.long	.LDW_4a5c560
                          2941	
                          2942	.LDW_5dea4a8:
000001bc 31               2943		.byte	49
000001bd 00000000         2944		.long	.LDW_5d788c8
                          2945	
                          2946	.LDW_5dea438:
000001c1 46               2947		.byte	70
000001c2 00000000         2948		.long	.LDW_4a5c448
000001c6 01               2949		.byte	1
                          2950	
000001c7 00               2951		.byte	0
                          2952	
                          2953	.LDW_5dea160:

                                   Fri Apr 10 08:32:10 2020           Page 54
                                   Fri Apr 10 08:32:09 2020   gh_0000bi81.si
000001c8 31               2954		.byte	49
000001c9 00000000         2955		.long	.LDW_5dea438
                          2956	
                          2957	.LDW_5c8dfd8:
000001cd 3c               2958		.byte	60
000001ce 00               2959		.byte	0
000001cf 04               2960		.byte	4
000001d0 00000000         2961		.long	.LDW_5d788c8
                          2962	
000001d4 34               2963		.byte	52
000001d5 00000000         2964		.long	.LDW_4a5c4b8
000001d9 04               2965		.byte	4
000001da 00               2966		.byte	0
000001db 03               2967		.byte	3
                          2968	
000001dc 00               2969		.byte	0
                          2970	
                          2971	.LDW_5c8e060:
000001dd 3c               2972		.byte	60
000001de 00               2973		.byte	0
000001df 04               2974		.byte	4
000001e0 00000000         2975		.long	.LDW_5d788c8
                          2976	
000001e4 34               2977		.byte	52
000001e5 00000000         2978		.long	.LDW_4a5c4b8
000001e9 04               2979		.byte	4
000001ea 00               2980		.byte	0
000001eb 03               2981		.byte	3
                          2982	
000001ec 00               2983		.byte	0
                          2984	
                          2985	.LDW_5dea0b8:
000001ed 31               2986		.byte	49
000001ee 00000000         2987		.long	.LDW_5d787c0
                          2988	
                          2989	.LDW_5deb1f0:
000001f2 2b               2990		.byte	43
000001f3 00000000         2991		.long	.LDW_4a9ef90
                          2992	
                          2993	.LDW_5dea470:
000001f7 31               2994		.byte	49
000001f8 00000000         2995		.long	.LDW_5deb1f0
                          2996	
                          2997	.LDW_5deb850:
000001fc 3c               2998		.byte	60
000001fd 00               2999		.byte	0
000001fe 64               3000		.byte	100
000001ff 00000000         3001		.long	.LDW_4a9a530
                          3002	
00000203 34               3003		.byte	52
00000204 00000000         3004		.long	.LDW_4a5c4b8
00000208 04               3005		.byte	4
00000209 00               3006		.byte	0
0000020a 04               3007		.byte	4
                          3008	
0000020b 00               3009		.byte	0

                                   Fri Apr 10 08:32:10 2020           Page 55
                                   Fri Apr 10 08:32:09 2020   gh_0000bi81.si
                          3010	
                          3011	.LDW_5debeb0:
0000020c 3c               3012		.byte	60
0000020d 00               3013		.byte	0
0000020e 10               3014		.byte	16
0000020f 00000000         3015		.long	.LDW_5deb1f0
                          3016	
00000213 34               3017		.byte	52
00000214 00000000         3018		.long	.LDW_4a5c4b8
00000218 04               3019		.byte	4
00000219 00               3020		.byte	0
0000021a 03               3021		.byte	3
                          3022	
0000021b 00               3023		.byte	0
                          3024	
                          3025	.LDW_5d7b2f8:
0000021c 2b               3026		.byte	43
0000021d 00000000         3027		.long	.LDW_4a5c758
                          3028	
                          3029	.LDW_5deb8d8:
00000221 3c               3030		.byte	60
00000222 00               3031		.byte	0
00000223 04               3032		.byte	4
00000224 00000000         3033		.long	.LDW_5d7b2f8
                          3034	
00000228 34               3035		.byte	52
00000229 00000000         3036		.long	.LDW_4a5c4b8
0000022d 04               3037		.byte	4
0000022e 00               3038		.byte	0
0000022f 00               3039		.byte	0
                          3040	
00000230 00               3041		.byte	0
                          3042	
                          3043	.LDW_5dee988:
00000231 47               3044		.byte	71
00000232 01               3045		.byte	1
                          3046	
                          3047		.section	.debug_abbrev
0000005a 47               3048		.byte	71
0000005b 15               3049		.byte	21
0000005c 01               3050		.byte	1
0000005d 270c             3051		.byte	39,12
0000005f 0000             3052		.byte	0,0
                          3053	
                          3054		.section	.debug_info
                          3055	.LDW_5d7c0d8:
00000233 14               3056		.byte	20
00000234 00000000         3057		.long	.LDW_5dea0b8
00000238 00               3058		.byte	0
                          3059	
00000239 00               3060		.byte	0
                          3061	
                          3062	.LDW_5deec60:
0000023a 47               3063		.byte	71
0000023b 01               3064		.byte	1
                          3065	

                                   Fri Apr 10 08:32:10 2020           Page 56
                                   Fri Apr 10 08:32:09 2020   gh_0000bi81.si
                          3066	.LDW_5d7c2b8:
0000023c 14               3067		.byte	20
0000023d 00000000         3068		.long	.LDW_5dea0b8
00000241 00               3069		.byte	0
                          3070	
00000242 00               3071		.byte	0
                          3072	
                          3073	.LDW_5deec98:
00000243 47               3074		.byte	71
00000244 01               3075		.byte	1
                          3076	
                          3077	.LDW_5d7c138:
00000245 14               3078		.byte	20
00000246 00000000         3079		.long	.LDW_5dea0b8
0000024a 00               3080		.byte	0
                          3081	
0000024b 00               3082		.byte	0
                          3083	
                          3084	.LDW_5deecd0:
0000024c 47               3085		.byte	71
0000024d 01               3086		.byte	1
                          3087	
                          3088	.LDW_5d7c0a8:
0000024e 14               3089		.byte	20
0000024f 00000000         3090		.long	.LDW_5dea0b8
00000253 00               3091		.byte	0
                          3092	
00000254 00               3093		.byte	0
                          3094	
                          3095	.LDW_5deefa8:
00000255 46               3096		.byte	70
00000256 00000000         3097		.long	.LDW_5bc4f90
0000025a 01               3098		.byte	1
                          3099	
0000025b 00               3100		.byte	0
                          3101	
                          3102	.LDW_5d7db68:
0000025c 27               3103		.byte	39
0000025d 756e7369676e6564 3104		.strz	"unsigned int"
00000265 20696e7400      
0000026a 07               3105		.byte	7
0000026b 04               3106		.byte	4
                          3107	
                          3108	.LDW_5bc4f90:
0000026c 2a               3109		.byte	42
0000026d 7675696e743800   3110		.strz	"vuint8"
00000274 9b04             3111		.byte	155,4
00000276 18               3112		.byte	24
00000277 07               3113		.byte	7
00000278 00000000         3114		.long	.LDW_4a5c448
                          3115	
                          3116		.section	.debug_abbrev
00000061 2a               3117		.byte	42
00000062 16               3118		.byte	22
00000063 00               3119		.byte	0
00000064 0308             3120		.byte	3,8
00000066 3b0f             3121		.byte	59,15

                                   Fri Apr 10 08:32:10 2020           Page 57
                                   Fri Apr 10 08:32:09 2020   gh_0000bi81.si
00000068 390f             3122		.byte	57,15
0000006a 3a0f             3123		.byte	58,15
0000006c 4910             3124		.byte	73,16
0000006e 0000             3125		.byte	0,0
                          3126	
                          3127		.section	.debug_info
                          3128	.LDW_5bc5098:
0000027c 2a               3129		.byte	42
0000027d 7675696e74313600 3130		.strz	"vuint16"
00000285 a604             3131		.byte	166,4
00000287 18               3132		.byte	24
00000288 07               3133		.byte	7
00000289 00000000         3134		.long	.LDW_4a5c9f8
                          3135	
                          3136	.LDW_5c5e6d0:
0000028d 2a               3137		.byte	42
0000028e 7673696e74313600 3138		.strz	"vsint16"
00000296 ab04             3139		.byte	171,4
00000298 18               3140		.byte	24
00000299 07               3141		.byte	7
0000029a 00000000         3142		.long	.LDW_4a5c678
                          3143	
                          3144	.LDW_4a9ef90:
0000029e 2a               3145		.byte	42
0000029f 7675696e74333200 3146		.strz	"vuint32"
000002a7 b204             3147		.byte	178,4
000002a9 18               3148		.byte	24
000002aa 07               3149		.byte	7
000002ab 00000000         3150		.long	.LDW_4a5c560
                          3151	
                          3152	.LDW_5c5e1a8:
000002af 2a               3153		.byte	42
000002b0 7673696e74333200 3154		.strz	"vsint32"
000002b8 b704             3155		.byte	183,4
000002ba 18               3156		.byte	24
000002bb 07               3157		.byte	7
000002bc 00000000         3158		.long	.LDW_4a5c800
                          3159	
                          3160	.LDW_5d788c8:
000002c0 2a               3161		.byte	42
000002c1 74466c6173684461 3162		.strz	"tFlashData_XD1"
000002c9 74615f58443100  
000002d0 9501             3163		.byte	149,1
000002d2 18               3164		.byte	24
000002d3 1a               3165		.byte	26
000002d4 00000000         3166		.long	.LDW_4a5c448
                          3167	
                          3168	.LDW_5bc4dd8:
000002d8 2a               3169		.byte	42
000002d9 74466c6173684164 3170		.strz	"tFlashAddress_XD1"
000002e1 64726573735f5844
000002e9 3100            
000002eb 9601             3171		.byte	150,1
000002ed 18               3172		.byte	24
000002ee 1a               3173		.byte	26
000002ef 00000000         3174		.long	.LDW_4a5c560
                          3175	
                          3176	.LDW_5bc53b0:
000002f3 2a               3177		.byte	42

                                   Fri Apr 10 08:32:10 2020           Page 58
                                   Fri Apr 10 08:32:09 2020   gh_0000bi81.si
000002f4 74466c6173684c65 3178		.strz	"tFlashLength_XD1"
000002fc 6e6774685f584431
00000304 00              
00000305 9701             3179		.byte	151,1
00000307 18               3180		.byte	24
00000308 1a               3181		.byte	26
00000309 00000000         3182		.long	.LDW_4a5c560
                          3183	
                          3184	.LDW_5d786b8:
0000030d 2a               3185		.byte	42
0000030e 74466c6173684572 3186		.strz	"tFlashErrorCode_XD1"
00000316 726f72436f64655f
0000031e 58443100        
00000322 9801             3187		.byte	152,1
00000324 18               3188		.byte	24
00000325 1a               3189		.byte	26
00000326 00000000         3190		.long	.LDW_4a5c9f8
                          3191	
                          3192	.LDW_5d789d0:
0000032a 42               3193		.byte	66
0000032b 746167466c617368 3194		.strz	"tagFlashParam_XD1"
00000333 506172616d5f5844
0000033b 3100            
0000033d 9b01             3195		.byte	155,1
0000033f 10               3196		.byte	16
00000340 1a               3197		.byte	26
00000341 34               3198		.byte	52
00000342 01               3199		.byte	1
                          3200	
                          3201		.section	.debug_abbrev
00000070 42               3202		.byte	66
00000071 13               3203		.byte	19
00000072 01               3204		.byte	1
00000073 0308             3205		.byte	3,8
00000075 3b0f             3206		.byte	59,15
00000077 390f             3207		.byte	57,15
00000079 3a0f             3208		.byte	58,15
0000007b 0b0f             3209		.byte	11,15
0000007d 320b             3210		.byte	50,11
0000007f 0000             3211		.byte	0,0
                          3212	
                          3213		.section	.debug_info
                          3214	.LDW_5d79250:
00000343 25               3215		.byte	37
00000344 70617463684c6576 3216		.strz	"patchLevel"
0000034c 656c00          
0000034f 9e01             3217		.byte	158,1
00000351 19               3218		.byte	25
00000352 1a               3219		.byte	26
00000353 00000000         3220		.long	.LDW_4a5c448
00000357 0223             3221		.byte	2,35
00000359 00               3222		.byte	0
0000035a 01               3223		.byte	1
                          3224	
                          3225		.section	.debug_abbrev
00000081 25               3226		.byte	37
00000082 0d               3227		.byte	13
00000083 00               3228		.byte	0
00000084 0308             3229		.byte	3,8
00000086 3b0f             3230		.byte	59,15
00000088 390f             3231		.byte	57,15
0000008a 3a0f             3232		.byte	58,15
0000008c 4910             3233		.byte	73,16

                                   Fri Apr 10 08:32:10 2020           Page 59
                                   Fri Apr 10 08:32:09 2020   gh_0000bi81.si
0000008e 380a             3234		.byte	56,10
00000090 320b             3235		.byte	50,11
00000092 0000             3236		.byte	0,0
                          3237	
                          3238		.section	.debug_info
                          3239	.LDW_5d79298:
0000035b 25               3240		.byte	37
0000035c 6d696e6f72566572 3241		.strz	"minorVersion"
00000364 73696f6e00      
00000369 9f01             3242		.byte	159,1
0000036b 19               3243		.byte	25
0000036c 1a               3244		.byte	26
0000036d 00000000         3245		.long	.LDW_4a5c448
00000371 0223             3246		.byte	2,35
00000373 01               3247		.byte	1
00000374 01               3248		.byte	1
                          3249	
                          3250	.LDW_5d78d88:
00000375 25               3251		.byte	37
00000376 6d616a6f72566572 3252		.strz	"majorVersion"
0000037e 73696f6e00      
00000383 a001             3253		.byte	160,1
00000385 19               3254		.byte	25
00000386 1a               3255		.byte	26
00000387 00000000         3256		.long	.LDW_4a5c448
0000038b 0223             3257		.byte	2,35
0000038d 02               3258		.byte	2
0000038e 01               3259		.byte	1
                          3260	
                          3261	.LDW_5d78b00:
0000038f 25               3262		.byte	37
00000390 7265736572766564 3263		.strz	"reserved1"
00000398 3100            
0000039a a101             3264		.byte	161,1
0000039c 19               3265		.byte	25
0000039d 1a               3266		.byte	26
0000039e 00000000         3267		.long	.LDW_4a5c448
000003a2 0223             3268		.byte	2,35
000003a4 03               3269		.byte	3
000003a5 01               3270		.byte	1
                          3271	
                          3272	.LDW_5d78e18:
000003a6 25               3273		.byte	37
000003a7 6572726f72436f64 3274		.strz	"errorCode"
000003af 6500            
000003b1 a401             3275		.byte	164,1
000003b3 1d               3276		.byte	29
000003b4 1a               3277		.byte	26
000003b5 00000000         3278		.long	.LDW_5d786b8
000003b9 0223             3279		.byte	2,35
000003bb 04               3280		.byte	4
000003bc 01               3281		.byte	1
                          3282	
                          3283	.LDW_5d79328:
000003bd 25               3284		.byte	37
000003be 7265736572766564 3285		.strz	"reserved2"
000003c6 3200            
000003c8 a501             3286		.byte	165,1
000003ca 19               3287		.byte	25
000003cb 1a               3288		.byte	26
000003cc 00000000         3289		.long	.LDW_4a5c9f8

                                   Fri Apr 10 08:32:10 2020           Page 60
                                   Fri Apr 10 08:32:09 2020   gh_0000bi81.si
000003d0 0223             3290		.byte	2,35
000003d2 06               3291		.byte	6
000003d3 01               3292		.byte	1
                          3293	
                          3294	.LDW_5d78ea8:
000003d4 25               3295		.byte	37
000003d5 6164647265737300 3296		.strz	"address"
000003dd a801             3297		.byte	168,1
000003df 1d               3298		.byte	29
000003e0 1a               3299		.byte	26
000003e1 00000000         3300		.long	.LDW_5bc4dd8
000003e5 0223             3301		.byte	2,35
000003e7 08               3302		.byte	8
000003e8 01               3303		.byte	1
                          3304	
                          3305	.LDW_5d78ab8:
000003e9 25               3306		.byte	37
000003ea 6c656e67746800   3307		.strz	"length"
000003f1 a901             3308		.byte	169,1
000003f3 1d               3309		.byte	29
000003f4 1a               3310		.byte	26
000003f5 00000000         3311		.long	.LDW_5bc53b0
000003f9 0223             3312		.byte	2,35
000003fb 0c               3313		.byte	12
000003fc 01               3314		.byte	1
                          3315	
                          3316	.LDW_5d78bd8:
000003fd 25               3317		.byte	37
000003fe 6461746100       3318		.strz	"data"
00000403 aa01             3319		.byte	170,1
00000405 1d               3320		.byte	29
00000406 1a               3321		.byte	26
00000407 00000000         3322		.long	.LDW_5dea4a8
0000040b 0223             3323		.byte	2,35
0000040d 10               3324		.byte	16
0000040e 01               3325		.byte	1
                          3326	
                          3327	.LDW_5d78c68:
0000040f 25               3328		.byte	37
00000410 7764547269676765 3329		.strz	"wdTriggerFct"
00000418 7246637400      
0000041d ad01             3330		.byte	173,1
0000041f 1c               3331		.byte	28
00000420 1a               3332		.byte	26
00000421 00000000         3333		.long	.LDW_5dea160
00000425 0223             3334		.byte	2,35
00000427 14               3335		.byte	20
00000428 01               3336		.byte	1
                          3337	
                          3338	.LDW_5d79058:
00000429 25               3339		.byte	37
0000042a 696e74656e646564 3340		.strz	"intendedData"
00000432 4461746100      
00000437 b001             3341		.byte	176,1
00000439 1d               3342		.byte	29
0000043a 1a               3343		.byte	26
0000043b 00000000         3344		.long	.LDW_5c8dfd8
0000043f 0223             3345		.byte	2,35

                                   Fri Apr 10 08:32:10 2020           Page 61
                                   Fri Apr 10 08:32:09 2020   gh_0000bi81.si
00000441 18               3346		.byte	24
00000442 01               3347		.byte	1
                          3348	
                          3349	.LDW_5d78cb0:
00000443 25               3350		.byte	37
00000444 61637475616c4461 3351		.strz	"actualData"
0000044c 746100          
0000044f b101             3352		.byte	177,1
00000451 1d               3353		.byte	29
00000452 1a               3354		.byte	26
00000453 00000000         3355		.long	.LDW_5c8e060
00000457 0223             3356		.byte	2,35
00000459 1c               3357		.byte	28
0000045a 01               3358		.byte	1
                          3359	
                          3360	.LDW_5d78ef0:
0000045b 25               3361		.byte	37
0000045c 6572726f72416464 3362		.strz	"errorAddress"
00000464 7265737300      
00000469 b201             3363		.byte	178,1
0000046b 1d               3364		.byte	29
0000046c 1a               3365		.byte	26
0000046d 00000000         3366		.long	.LDW_5bc4dd8
00000471 0223             3367		.byte	2,35
00000473 20               3368		.byte	32
00000474 01               3369		.byte	1
                          3370	
                          3371	.LDW_5d78f80:
00000475 25               3372		.byte	37
00000476 73656c656374436f 3373		.strz	"selectCount"
0000047e 756e7400        
00000482 b501             3374		.byte	181,1
00000484 19               3375		.byte	25
00000485 1a               3376		.byte	26
00000486 00000000         3377		.long	.LDW_4a5c560
0000048a 0223             3378		.byte	2,35
0000048c 24               3379		.byte	36
0000048d 01               3380		.byte	1
                          3381	
                          3382	.LDW_5d78d40:
0000048e 25               3383		.byte	37
0000048f 70726f7465637453 3384		.strz	"protectSelect"
00000497 656c65637400    
0000049d b601             3385		.byte	182,1
0000049f 19               3386		.byte	25
000004a0 1a               3387		.byte	26
000004a1 00000000         3388		.long	.LDW_5c8dd18
000004a5 0223             3389		.byte	2,35
000004a7 28               3390		.byte	40
000004a8 01               3391		.byte	1
                          3392	
                          3393	.LDW_5d78cf8:
000004a9 25               3394		.byte	37
000004aa 626c6f636b53656c 3395		.strz	"blockSelect"
000004b2 65637400        
000004b6 b701             3396		.byte	183,1
000004b8 19               3397		.byte	25
000004b9 1a               3398		.byte	26
000004ba 00000000         3399		.long	.LDW_5dea240
000004be 0223             3400		.byte	2,35
000004c0 2c               3401		.byte	44

                                   Fri Apr 10 08:32:10 2020           Page 62
                                   Fri Apr 10 08:32:09 2020   gh_0000bi81.si
000004c1 01               3402		.byte	1
                          3403	
                          3404	.LDW_5d790a0:
000004c2 25               3405		.byte	37
000004c3 7265676973746572 3406		.strz	"registerBase"
000004cb 4261736500      
000004d0 b801             3407		.byte	184,1
000004d2 19               3408		.byte	25
000004d3 1a               3409		.byte	26
000004d4 00000000         3410		.long	.LDW_4a5c560
000004d8 0223             3411		.byte	2,35
000004da 30               3412		.byte	48
000004db 01               3413		.byte	1
                          3414	
000004dc 00               3415		.byte	0
                          3416	
                          3417	.LDW_5d787c0:
000004dd 2a               3418		.byte	42
000004de 74466c6173685061 3419		.strz	"tFlashParam_XD1"
000004e6 72616d5f58443100
000004ee ba01             3420		.byte	186,1
000004f0 03               3421		.byte	3
000004f1 1a               3422		.byte	26
000004f2 00000000         3423		.long	.LDW_5d789d0
                          3424	
                          3425	.LDW_5c5e4c0:
000004f6 2a               3426		.byte	42
000004f7 494f5f55333200   3427		.strz	"IO_U32"
000004fe 57               3428		.byte	87
000004ff 13               3429		.byte	19
00000500 1c               3430		.byte	28
00000501 00000000         3431		.long	.LDW_4a9ef90
                          3432	
                          3433	.LDW_4a9a728:
00000505 2a               3434		.byte	42
00000506 494f5f53697a6554 3435		.strz	"IO_SizeType"
0000050e 79706500        
00000512 5e               3436		.byte	94
00000513 13               3437		.byte	19
00000514 1c               3438		.byte	28
00000515 00000000         3439		.long	.LDW_4a9ef90
                          3440	
                          3441	.LDW_4a9a780:
00000519 2a               3442		.byte	42
0000051a 494f5f506f736974 3443		.strz	"IO_PositionType"
00000522 696f6e5479706500
0000052a 5f               3444		.byte	95
0000052b 13               3445		.byte	19
0000052c 1c               3446		.byte	28
0000052d 00000000         3447		.long	.LDW_4a9ef90
                          3448	
                          3449	.LDW_5bc5148:
00000531 2a               3450		.byte	42
00000532 494f5f4572726f72 3451		.strz	"IO_ErrorType"
0000053a 5479706500      
0000053f 65               3452		.byte	101
00000540 13               3453		.byte	19
00000541 1c               3454		.byte	28
00000542 00000000         3455		.long	.LDW_5bc5098
                          3456	
                          3457	.LDW_5bc4fe8:

                                   Fri Apr 10 08:32:10 2020           Page 63
                                   Fri Apr 10 08:32:09 2020   gh_0000bi81.si
00000546 2a               3458		.byte	42
00000547 494f5f4d656d5074 3459		.strz	"IO_MemPtrType"
0000054f 725479706500    
00000555 66               3460		.byte	102
00000556 13               3461		.byte	19
00000557 1c               3462		.byte	28
00000558 00000000         3463		.long	.LDW_4a5c480
                          3464	
                          3465	.LDW_4a9a480:
0000055c 42               3466		.byte	66
0000055d 746167433535666d 3467		.strz	"tagC55fmcFlashBlock"
00000565 63466c617368426c
0000056d 6f636b00        
00000571 dc01             3468		.byte	220,1
00000573 10               3469		.byte	16
00000574 01               3470		.byte	1
00000575 14               3471		.byte	20
00000576 01               3472		.byte	1
                          3473	
                          3474	.LDW_5df0f90:
00000577 25               3475		.byte	37
00000578 7374617274416464 3476		.strz	"startAddress"
00000580 7265737300      
00000585 de01             3477		.byte	222,1
00000587 0c               3478		.byte	12
00000588 01               3479		.byte	1
00000589 00000000         3480		.long	.LDW_4a9ef90
0000058d 0223             3481		.byte	2,35
0000058f 00               3482		.byte	0
00000590 01               3483		.byte	1
                          3484	
                          3485	.LDW_5df0e70:
00000591 25               3486		.byte	37
00000592 6c656e67746800   3487		.strz	"length"
00000599 df01             3488		.byte	223,1
0000059b 0c               3489		.byte	12
0000059c 01               3490		.byte	1
0000059d 00000000         3491		.long	.LDW_4a9ef90
000005a1 0223             3492		.byte	2,35
000005a3 04               3493		.byte	4
000005a4 01               3494		.byte	1
                          3495	
                          3496	.LDW_5df0fd8:
000005a5 25               3497		.byte	37
000005a6 636f756e7400     3498		.strz	"count"
000005ac e001             3499		.byte	224,1
000005ae 0c               3500		.byte	12
000005af 01               3501		.byte	1
000005b0 00000000         3502		.long	.LDW_4a9ef90
000005b4 0223             3503		.byte	2,35
000005b6 08               3504		.byte	8
000005b7 01               3505		.byte	1
                          3506	
                          3507	.LDW_5df10b0:
000005b8 25               3508		.byte	37
000005b9 6269744d61736b53 3509		.strz	"bitMaskStart"
000005c1 7461727400      
000005c6 e101             3510		.byte	225,1
000005c8 0c               3511		.byte	12
000005c9 01               3512		.byte	1
000005ca 00000000         3513		.long	.LDW_4a9ef90

                                   Fri Apr 10 08:32:10 2020           Page 64
                                   Fri Apr 10 08:32:09 2020   gh_0000bi81.si
000005ce 0223             3514		.byte	2,35
000005d0 0c               3515		.byte	12
000005d1 01               3516		.byte	1
                          3517	
                          3518	.LDW_5df0a38:
000005d2 25               3519		.byte	37
000005d3 6269744d61736b49 3520		.strz	"bitMaskIndex"
000005db 6e64657800      
000005e0 e201             3521		.byte	226,1
000005e2 0c               3522		.byte	12
000005e3 01               3523		.byte	1
000005e4 00000000         3524		.long	.LDW_4a9ef90
000005e8 0223             3525		.byte	2,35
000005ea 10               3526		.byte	16
000005eb 01               3527		.byte	1
                          3528	
000005ec 00               3529		.byte	0
                          3530	
                          3531	.LDW_4a9a4d8:
000005ed 2a               3532		.byte	42
000005ee 74433535666d6346 3533		.strz	"tC55fmcFlashBlock"
000005f6 6c617368426c6f63
000005fe 6b00            
00000600 e301             3534		.byte	227,1
00000602 03               3535		.byte	3
00000603 01               3536		.byte	1
00000604 00000000         3537		.long	.LDW_4a9a480
                          3538	
                          3539	.LDW_4a9b9b0:
00000608 42               3540		.byte	66
00000609 746167433535666d 3541		.strz	"tagC55fmcFlashModule"
00000611 63466c6173684d6f
00000619 64756c6500      
0000061e e601             3542		.byte	230,1
00000620 10               3543		.byte	16
00000621 01               3544		.byte	1
00000622 1c               3545		.byte	28
00000623 01               3546		.byte	1
                          3547	
                          3548	.LDW_5df0888:
00000624 25               3549		.byte	37
00000625 666c617368426c6f 3550		.strz	"flashBlocks"
0000062d 636b7300        
00000631 e801             3551		.byte	232,1
00000633 36               3552		.byte	54
00000634 01               3553		.byte	1
00000635 00000000         3554		.long	.LDW_4a5ca68
00000639 0223             3555		.byte	2,35
0000063b 00               3556		.byte	0
0000063c 01               3557		.byte	1
                          3558	
                          3559	.LDW_5df08d0:
0000063d 25               3560		.byte	37
0000063e 666c617368426c6f 3561		.strz	"flashBlockCount"
00000646 636b436f756e7400
0000064e e901             3562		.byte	233,1
00000650 0c               3563		.byte	12
00000651 01               3564		.byte	1
00000652 00000000         3565		.long	.LDW_4a9ef90
00000656 0223             3566		.byte	2,35
00000658 04               3567		.byte	4
00000659 01               3568		.byte	1
                          3569	

                                   Fri Apr 10 08:32:10 2020           Page 65
                                   Fri Apr 10 08:32:09 2020   gh_0000bi81.si
                          3570	.LDW_5df0f00:
0000065a 25               3571		.byte	37
0000065b 666c617368426173 3572		.strz	"flashBaseAddress"
00000663 6541646472657373
0000066b 00              
0000066c ea01             3573		.byte	234,1
0000066e 0c               3574		.byte	12
0000066f 01               3575		.byte	1
00000670 00000000         3576		.long	.LDW_4a9ef90
00000674 0223             3577		.byte	2,35
00000676 08               3578		.byte	8
00000677 01               3579		.byte	1
                          3580	
                          3581	.LDW_5df10f8:
00000678 25               3582		.byte	37
00000679 666c617368426967 3583		.strz	"flashBigBlockSize"
00000681 426c6f636b53697a
00000689 6500            
0000068b eb01             3584		.byte	235,1
0000068d 0c               3585		.byte	12
0000068e 01               3586		.byte	1
0000068f 00000000         3587		.long	.LDW_4a9ef90
00000693 0223             3588		.byte	2,35
00000695 0c               3589		.byte	12
00000696 01               3590		.byte	1
                          3591	
                          3592	.LDW_5df09f0:
00000697 25               3593		.byte	37
00000698 666c617368426967 3594		.strz	"flashBigBlockFactor"
000006a0 426c6f636b466163
000006a8 746f7200        
000006ac ec01             3595		.byte	236,1
000006ae 0c               3596		.byte	12
000006af 01               3597		.byte	1
000006b0 00000000         3598		.long	.LDW_4a9ef90
000006b4 0223             3599		.byte	2,35
000006b6 10               3600		.byte	16
000006b7 01               3601		.byte	1
                          3602	
                          3603	.LDW_5df0960:
000006b8 25               3604		.byte	37
000006b9 666c61736853656c 3605		.strz	"flashSelectCount"
000006c1 656374436f756e74
000006c9 00              
000006ca ed01             3606		.byte	237,1
000006cc 0c               3607		.byte	12
000006cd 01               3608		.byte	1
000006ce 00000000         3609		.long	.LDW_4a9ef90
000006d2 0223             3610		.byte	2,35
000006d4 14               3611		.byte	20
000006d5 01               3612		.byte	1
                          3613	
                          3614	.LDW_5df0a80:
000006d6 25               3615		.byte	37
000006d7 7573657250726f74 3616		.strz	"userProtectionBits"
000006df 656374696f6e4269
000006e7 747300          
000006ea ee01             3617		.byte	238,1
000006ec 2c               3618		.byte	44
000006ed 01               3619		.byte	1
000006ee 00000000         3620		.long	.LDW_5dea470
000006f2 0223             3621		.byte	2,35
000006f4 18               3622		.byte	24
000006f5 01               3623		.byte	1
                          3624	
000006f6 00               3625		.byte	0

                                   Fri Apr 10 08:32:10 2020           Page 66
                                   Fri Apr 10 08:32:09 2020   gh_0000bi81.si
                          3626	
                          3627	.LDW_4a9da10:
000006f7 2a               3628		.byte	42
000006f8 74433535666d6346 3629		.strz	"tC55fmcFlashModule"
00000700 6c6173684d6f6475
00000708 6c6500          
0000070b f401             3630		.byte	244,1
0000070d 03               3631		.byte	3
0000070e 01               3632		.byte	1
0000070f 00000000         3633		.long	.LDW_4a9b9b0
                          3634	
                          3635	.LDW_5d7b5b8:
00000713 06               3636		.byte	6
00000714 666c617368506172 3637		.strz	"flashParam"
0000071c 616d00          
0000071f 8002             3638		.byte	128,2
00000721 36               3639		.byte	54
00000722 01               3640		.byte	1
00000723 00000000         3641		.long	.LDW_5d787c0
00000727 00               3642		.byte	0
00000728 00               3643		.byte	0
00000729 0503             3644		.byte	5,3
0000072b 00000000         3645		.long	flashParam..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_flio_xd1.
                          3646	
                          3647		.section	.debug_abbrev
00000094 06               3648		.byte	6
00000095 34               3649		.byte	52
00000096 00               3650		.byte	0
00000097 0308             3651		.byte	3,8
00000099 3b0f             3652		.byte	59,15
0000009b 390f             3653		.byte	57,15
0000009d 3a0f             3654		.byte	58,15
0000009f 4910             3655		.byte	73,16
000000a1 3f0c             3656		.byte	63,12
000000a3 3c0c             3657		.byte	60,12
000000a5 020a             3658		.byte	2,10
000000a7 0000             3659		.byte	0,0
                          3660	
                          3661		.section	.debug_info
                          3662	.LDW_5d7b140:
0000072f 06               3663		.byte	6
00000730 666c617368426c6f 3664		.strz	"flashBlocks_6"
00000738 636b735f3600    
0000073e 8a04             3665		.byte	138,4
00000740 38               3666		.byte	56
00000741 01               3667		.byte	1
00000742 00000000         3668		.long	.LDW_5deb850
00000746 00               3669		.byte	0
00000747 00               3670		.byte	0
00000748 0503             3671		.byte	5,3
0000074a 00000000         3672		.long	flashBlocks_6..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_flio_xd1.
                          3673	
                          3674	.LDW_5d7af30:
0000074e 06               3675		.byte	6
0000074f 666c6173685f7573 3676		.strz	"flash_user_protection_6"
00000757 65725f70726f7465
0000075f 6374696f6e5f3600
00000767 a104             3677		.byte	161,4
00000769 2e               3678		.byte	46
0000076a 01               3679		.byte	1
0000076b 00000000         3680		.long	.LDW_5debeb0
0000076f 00               3681		.byte	0

                                   Fri Apr 10 08:32:10 2020           Page 67
                                   Fri Apr 10 08:32:09 2020   gh_0000bi81.si
00000770 00               3682		.byte	0
00000771 0503             3683		.byte	5,3
00000773 00000000         3684		.long	flash_user_protection_6..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_flio_xd1.
                          3685	
                          3686	.LDW_5d7ae28:
00000777 06               3687		.byte	6
00000778 666c6173684d6f64 3688		.strz	"flashModule_6"
00000780 756c655f3600    
00000786 a204             3689		.byte	162,4
00000788 39               3690		.byte	57
00000789 01               3691		.byte	1
0000078a 00000000         3692		.long	.LDW_4a9da68
0000078e 00               3693		.byte	0
0000078f 00               3694		.byte	0
00000790 0503             3695		.byte	5,3
00000792 00000000         3696		.long	flashModule_6..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_flio_xd1.
                          3697	
                          3698	.LDW_5d7b4b0:
00000796 06               3699		.byte	6
00000797 666c6173684d6f64 3700		.strz	"flashModule"
0000079f 756c6500        
000007a3 e506             3701		.byte	229,6
000007a5 59               3702		.byte	89
000007a6 01               3703		.byte	1
000007a7 00000000         3704		.long	.LDW_5deb8d8
000007ab 00               3705		.byte	0
000007ac 00               3706		.byte	0
000007ad 0503             3707		.byte	5,3
000007af 00000000         3708		.long	flashModule..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_flio_xd1.
                          3709	
                          3710	.LDW_5d7b718:
000007b3 06               3711		.byte	6
000007b4 666c6173684d6f64 3712		.strz	"flashModuleSelect"
000007bc 756c6553656c6563
000007c4 7400            
000007c6 b807             3713		.byte	184,7
000007c8 59               3714		.byte	89
000007c9 01               3715		.byte	1
000007ca 00000000         3716		.long	.LDW_4a5c758
000007ce 00               3717		.byte	0
000007cf 00               3718		.byte	0
000007d0 0503             3719		.byte	5,3
000007d2 00000000         3720		.long	flashModuleSelect..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_flio_xd1.
                          3721	
                          3722	.LDW_5d7d440:
000007d6 17               3723		.byte	23
000007d7 457870466c617368 3724		.strz	"ExpFlash_XD1Init"
000007df 5f584431496e6974
000007e7 00              
000007e8 c601             3725		.byte	198,1
000007ea 0d               3726		.byte	13
000007eb 1a               3727		.byte	26
000007ec 01               3728		.byte	1
000007ed 00               3729		.byte	0
000007ee 01               3730		.byte	1
000007ef 01               3731		.byte	1
000007f0 00               3732		.byte	0
000007f1 01               3733		.byte	1
                          3734	
                          3735		.section	.debug_abbrev
000000a9 17               3736		.byte	23
000000aa 2e               3737		.byte	46

                                   Fri Apr 10 08:32:10 2020           Page 68
                                   Fri Apr 10 08:32:09 2020   gh_0000bi81.si
000000ab 01               3738		.byte	1
000000ac 0308             3739		.byte	3,8
000000ae 3b0f             3740		.byte	59,15
000000b0 390f             3741		.byte	57,15
000000b2 3a0f             3742		.byte	58,15
000000b4 3c0c             3743		.byte	60,12
000000b6 200b             3744		.byte	32,11
000000b8 3f0c             3745		.byte	63,12
000000ba 320b             3746		.byte	50,11
000000bc 4c0b             3747		.byte	76,11
000000be 270c             3748		.byte	39,12
000000c0 0000             3749		.byte	0,0
                          3750	
                          3751		.section	.debug_info
000007f2 00               3752		.byte	0
                          3753	
                          3754	.LDW_5d7ca28:
000007f3 17               3755		.byte	23
000007f4 457870466c617368 3756		.strz	"ExpFlash_XD1Deinit"
000007fc 5f5844314465696e
00000804 697400          
00000807 c701             3757		.byte	199,1
00000809 0d               3758		.byte	13
0000080a 1a               3759		.byte	26
0000080b 01               3760		.byte	1
0000080c 00               3761		.byte	0
0000080d 01               3762		.byte	1
0000080e 01               3763		.byte	1
0000080f 00               3764		.byte	0
00000810 01               3765		.byte	1
                          3766	
00000811 00               3767		.byte	0
                          3768	
                          3769	.LDW_5d7d0b0:
00000812 17               3770		.byte	23
00000813 457870466c617368 3771		.strz	"ExpFlash_XD1Erase"
0000081b 5f58443145726173
00000823 6500            
00000825 c801             3772		.byte	200,1
00000827 0d               3773		.byte	13
00000828 1a               3774		.byte	26
00000829 01               3775		.byte	1
0000082a 00               3776		.byte	0
0000082b 01               3777		.byte	1
0000082c 01               3778		.byte	1
0000082d 00               3779		.byte	0
0000082e 01               3780		.byte	1
                          3781	
0000082f 00               3782		.byte	0
                          3783	
                          3784	.LDW_5d7cac0:
00000830 17               3785		.byte	23
00000831 457870466c617368 3786		.strz	"ExpFlash_XD1Write"
00000839 5f58443157726974
00000841 6500            
00000843 c901             3787		.byte	201,1
00000845 0d               3788		.byte	13
00000846 1a               3789		.byte	26
00000847 01               3790		.byte	1
00000848 00               3791		.byte	0
00000849 01               3792		.byte	1
0000084a 01               3793		.byte	1

                                   Fri Apr 10 08:32:10 2020           Page 69
                                   Fri Apr 10 08:32:09 2020   gh_0000bi81.si
0000084b 00               3794		.byte	0
0000084c 01               3795		.byte	1
                          3796	
0000084d 00               3797		.byte	0
                          3798	
                          3799	.LDW_5d7cbf0:
0000084e 18               3800		.byte	24
0000084f 46626c4c6f6f6b46 3801		.strz	"FblLookForWatchdog"
00000857 6f72576174636864
0000085f 6f6700          
00000862 8e01             3802		.byte	142,1
00000864 13               3803		.byte	19
00000865 1b               3804		.byte	27
00000866 00000000         3805		.long	.LDW_5bc4f90
0000086a 01               3806		.byte	1
0000086b 00               3807		.byte	0
0000086c 01               3808		.byte	1
0000086d 01               3809		.byte	1
0000086e 00               3810		.byte	0
0000086f 01               3811		.byte	1
                          3812	
                          3813		.section	.debug_abbrev
000000c2 18               3814		.byte	24
000000c3 2e               3815		.byte	46
000000c4 01               3816		.byte	1
000000c5 0308             3817		.byte	3,8
000000c7 3b0f             3818		.byte	59,15
000000c9 390f             3819		.byte	57,15
000000cb 3a0f             3820		.byte	58,15
000000cd 4910             3821		.byte	73,16
000000cf 3c0c             3822		.byte	60,12
000000d1 200b             3823		.byte	32,11
000000d3 3f0c             3824		.byte	63,12
000000d5 320b             3825		.byte	50,11
000000d7 4c0b             3826		.byte	76,11
000000d9 270c             3827		.byte	39,12
000000db 0000             3828		.byte	0,0
                          3829	
                          3830		.section	.debug_info
00000870 00               3831		.byte	0
                          3832	
                          3833	.LDW_4a9a588:
00000871 16               3834		.byte	22
00000872 6765744e756d6265 3835		.strz	"getNumberOfFlashBlocks"
0000087a 724f66466c617368
00000882 426c6f636b7300  
00000889 d307             3836		.byte	211,7
0000088b 10               3837		.byte	16
0000088c 01               3838		.byte	1
0000088d 00000000         3839		.long	.LDW_4a9ef90
00000891 00000000         3840		.long	getNumberOfFlashBlocks..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_flio_xd1.
00000895 00000000         3841		.long	__ghs_eofn_getNumberOfFlashBlocks
00000899 0151             3842		.byte	1,81
0000089b 03               3843		.byte	3
0000089c 00               3844		.byte	0
0000089d 00               3845		.byte	0
0000089e 00               3846		.byte	0
0000089f 00               3847		.byte	0
000008a0 00               3848		.byte	0
000008a1 00               3849		.byte	0

                                   Fri Apr 10 08:32:10 2020           Page 70
                                   Fri Apr 10 08:32:09 2020   gh_0000bi81.si
000008a2 00               3850		.byte	0
000008a3 01               3851		.byte	1
000008a4 00               3852		.byte	0
000008a5 01               3853		.byte	1
                          3854	
                          3855		.section	.debug_abbrev
000000dd 16               3856		.byte	22
000000de 2e               3857		.byte	46
000000df 01               3858		.byte	1
000000e0 0308             3859		.byte	3,8
000000e2 3b0f             3860		.byte	59,15
000000e4 390f             3861		.byte	57,15
000000e6 3a0f             3862		.byte	58,15
000000e8 4910             3863		.byte	73,16
000000ea 1101             3864		.byte	17,1
000000ec 1201             3865		.byte	18,1
000000ee 400a             3866		.byte	64,10
000000f0 8341             3867		.byte	131,65
000000f2 0f               3868		.byte	15
000000f3 8741             3869		.byte	135,65
000000f5 0d               3870		.byte	13
000000f6 8541             3871		.byte	133,65
000000f8 0f               3872		.byte	15
000000f9 8641             3873		.byte	134,65
000000fb 0d               3874		.byte	13
000000fc 9241             3875		.byte	146,65
000000fe 0f               3876		.byte	15
000000ff 3c0c             3877		.byte	60,12
00000101 200b             3878		.byte	32,11
00000103 3f0c             3879		.byte	63,12
00000105 320b             3880		.byte	50,11
00000107 4c0b             3881		.byte	76,11
00000109 270c             3882		.byte	39,12
0000010b 0000             3883		.byte	0,0
                          3884	
                          3885		.section	.debug_frame
                          3886	.LDW_5df0180:
00000090 00000014         3887		.long	.LDW_unq_4-.LDW_unq_3
                          3888	.LDW_unq_3:
00000094 00000000         3889		.long	.LDW_5dc26d0
00000098 00000000         3890		.long	getNumberOfFlashBlocks..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_flio_xd1.
0000009c 00000046         3891		.long	__ghs_eofn_getNumberOfFlashBlocks-getNumberOfFlashBlocks..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_flio_xd1.
000000a0 01               3892		.byte	1
000000a1 00000000         3893		.long	.LDW11
000000a5 00               3894		.byte	0
000000a6 00               3895		.byte	0
000000a7 00               3896		.byte	0
                          3897	.LDW_unq_4:
                          3898		.section	.debug_line
000005ff 000502           3899		.byte	0,5,2
00000602 00000000         3900		.long	getNumberOfFlashBlocks..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_flio_xd1.
00000606 06               3901		.byte	6
00000607 03               3902		.byte	3
00000608 d307             3903		.byte	211,7
0000060a 02               3904		.byte	2
0000060b 00               3905		.byte	0

                                   Fri Apr 10 08:32:10 2020           Page 71
                                   Fri Apr 10 08:32:09 2020   gh_0000bi81.si
0000060c 01               3906		.byte	1
0000060d 03               3907		.byte	3
0000060e 04               3908		.byte	4
0000060f 02               3909		.byte	2
00000610 02               3910		.byte	2
00000611 01               3911		.byte	1
00000612 15               3912		.byte	21
00000613 06               3913		.byte	6
00000614 000502           3914		.byte	0,5,2
00000617 00000000         3915		.long	.LDWlin1
0000061b 03               3916		.byte	3
0000061c 21               3917		.byte	33
0000061d 02               3918		.byte	2
0000061e 00               3919		.byte	0
0000061f 01               3920		.byte	1
00000620 03               3921		.byte	3
00000621 06               3922		.byte	6
00000622 02               3923		.byte	2
00000623 00               3924		.byte	0
00000624 01               3925		.byte	1
00000625 06               3926		.byte	6
00000626 0b               3927		.byte	11
00000627 02               3928		.byte	2
00000628 00               3929		.byte	0
00000629 0d               3930		.byte	13
0000062a 02               3931		.byte	2
0000062b 00               3932		.byte	0
0000062c 0d               3933		.byte	13
0000062d 14               3934		.byte	20
0000062e 000502           3935		.byte	0,5,2
00000631 00000000         3936		.long	.LDWlin2
00000635 03               3937		.byte	3
00000636 54               3938		.byte	84
00000637 02               3939		.byte	2
00000638 00               3940		.byte	0
00000639 01               3941		.byte	1
0000063a 03               3942		.byte	3
0000063b 04               3943		.byte	4
0000063c 02               3944		.byte	2
0000063d 00               3945		.byte	0
0000063e 01               3946		.byte	1
0000063f 0b               3947		.byte	11
00000640 0d               3948		.byte	13
00000641 0b               3949		.byte	11
00000642 0d               3950		.byte	13
00000643 3b               3951		.byte	59
00000644 000502           3952		.byte	0,5,2
00000647 00000000         3953		.long	.LDWlin3
0000064b 0c               3954		.byte	12
0000064c 0b               3955		.byte	11
0000064d 0b               3956		.byte	11
0000064e 000502           3957		.byte	0,5,2
00000651 00000000         3958		.long	.LDWlin4
00000655 0b               3959		.byte	11
00000656 0c               3960		.byte	12
00000657 000502           3961		.byte	0,5,2

                                   Fri Apr 10 08:32:10 2020           Page 72
                                   Fri Apr 10 08:32:09 2020   gh_0000bi81.si
0000065a 00000000         3962		.long	.LDWlin5
0000065e 0b               3963		.byte	11
0000065f 0d               3964		.byte	13
00000660 03               3965		.byte	3
00000661 14               3966		.byte	20
00000662 02               3967		.byte	2
00000663 08               3968		.byte	8
00000664 01               3969		.byte	1
00000665 0d               3970		.byte	13
00000666 000502           3971		.byte	0,5,2
00000669 00000000         3972		.long	.LDWlin6
0000066d 0b               3973		.byte	11
0000066e 0b               3974		.byte	11
0000066f 13               3975		.byte	19
00000670 02               3976		.byte	2
00000671 00               3977		.byte	0
00000672 0c               3978		.byte	12
00000673 02               3979		.byte	2
00000674 02               3980		.byte	2
00000675 000101           3981		.byte	0,1,1
                          3982		.section	.debug_info
                          3983	.LDW_4a9a620:
000008a6 11               3984		.byte	17
000008a7 70466c6173684d6f 3985		.strz	"pFlashModule"
000008af 64756c6500      
000008b4 d307             3986		.byte	211,7
000008b6 43               3987		.byte	67
000008b7 01               3988		.byte	1
000008b8 00000000         3989		.long	.LDW_4a5c758
000008bc 00               3990		.byte	0
000008bd 0157             3991		.byte	1,87
                          3992	
                          3993		.section	.debug_abbrev
0000010d 11               3994		.byte	17
0000010e 05               3995		.byte	5
0000010f 00               3996		.byte	0
00000110 0308             3997		.byte	3,8
00000112 3b0f             3998		.byte	59,15
00000114 390f             3999		.byte	57,15
00000116 3a0f             4000		.byte	58,15
00000118 4910             4001		.byte	73,16
0000011a 4b0c             4002		.byte	75,12
0000011c 020a             4003		.byte	2,10
0000011e 0000             4004		.byte	0,0
                          4005	
                          4006		.section	.debug_info
                          4007	.LDW_4a9a678:
000008bf 11               4008		.byte	17
000008c0 70466c617368426c 4009		.strz	"pFlashBlock"
000008c8 6f636b00        
000008cc d307             4010		.byte	211,7
000008ce 6b               4011		.byte	107
000008cf 01               4012		.byte	1
000008d0 00000000         4013		.long	.LDW_4a5ca68
000008d4 00               4014		.byte	0
000008d5 0154             4015		.byte	1,84
                          4016	
                          4017	.LDW_4a537d0:

                                   Fri Apr 10 08:32:10 2020           Page 73
                                   Fri Apr 10 08:32:09 2020   gh_0000bi81.si
000008d7 1f               4018		.byte	31
000008d8 00000000         4019		.long	.LDW01
000008dc 00000000         4020		.long	.LDW11
                          4021	
                          4022		.section	.debug_abbrev
00000120 1f               4023		.byte	31
00000121 0b               4024		.byte	11
00000122 01               4025		.byte	1
00000123 1101             4026		.byte	17,1
00000125 1201             4027		.byte	18,1
00000127 0000             4028		.byte	0,0
                          4029	
                          4030		.section	.debug_info
                          4031	.LDW_4a9a6d0:
000008e0 06               4032		.byte	6
000008e1 726573756c7400   4033		.strz	"result"
000008e8 d507             4034		.byte	213,7
000008ea 0c               4035		.byte	12
000008eb 01               4036		.byte	1
000008ec 00000000         4037		.long	.LDW_4a9ef90
000008f0 00               4038		.byte	0
000008f1 00               4039		.byte	0
000008f2 0153             4040		.byte	1,83
                          4041	
000008f4 00               4042		.byte	0
                          4043	
000008f5 00               4044		.byte	0
                          4045	
                          4046	.LDW_4a9a7d8:
000008f6 16               4047		.byte	22
000008f7 636865636b416464 4048		.strz	"checkAddress"
000008ff 7265737300      
00000904 a308             4049		.byte	163,8
00000906 10               4050		.byte	16
00000907 01               4051		.byte	1
00000908 00000000         4052		.long	.LDW_4a9ef90
0000090c 00000000         4053		.long	checkAddress..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_flio_xd1.
00000910 00000000         4054		.long	__ghs_eofn_checkAddress
00000914 0151             4055		.byte	1,81
00000916 808080ff0f       4056		.byte	128,128,128,255,15
0000091b 0c               4057		.byte	12
0000091c 00               4058		.byte	0
0000091d 38               4059		.byte	56
0000091e 00               4060		.byte	0
0000091f 00               4061		.byte	0
00000920 00               4062		.byte	0
00000921 00               4063		.byte	0
00000922 01               4064		.byte	1
00000923 00               4065		.byte	0
00000924 01               4066		.byte	1
                          4067	
                          4068		.section	.debug_frame
                          4069	.LDW_5df0100:
000000a8 00000014         4070		.long	.LDW_unq_6-.LDW_unq_5
                          4071	.LDW_unq_5:
000000ac 00000000         4072		.long	.LDW_5dc26d0
000000b0 00000000         4073		.long	checkAddress..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_flio_xd1.

                                   Fri Apr 10 08:32:10 2020           Page 74
                                   Fri Apr 10 08:32:09 2020   gh_0000bi81.si
000000b4 00000116         4074		.long	__ghs_eofn_checkAddress-checkAddress..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_flio_xd1.
000000b8 01               4075		.byte	1
000000b9 00000000         4076		.long	.LDW31
000000bd 00               4077		.byte	0
000000be 00               4078		.byte	0
000000bf 00               4079		.byte	0
                          4080	.LDW_unq_6:
                          4081		.section	.debug_line
00000678 000502           4082		.byte	0,5,2
0000067b 00000000         4083		.long	checkAddress..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_flio_xd1.
0000067f 06               4084		.byte	6
00000680 03               4085		.byte	3
00000681 a308             4086		.byte	163,8
00000683 02               4087		.byte	2
00000684 00               4088		.byte	0
00000685 01               4089		.byte	1
00000686 03               4090		.byte	3
00000687 0a               4091		.byte	10
00000688 02               4092		.byte	2
00000689 10               4093		.byte	16
0000068a 01               4094		.byte	1
0000068b 13               4095		.byte	19
0000068c 13               4096		.byte	19
0000068d 13               4097		.byte	19
0000068e 14               4098		.byte	20
0000068f 02               4099		.byte	2
00000690 02               4100		.byte	2
00000691 0c               4101		.byte	12
00000692 03               4102		.byte	3
00000693 7e               4103		.byte	126
00000694 02               4104		.byte	2
00000695 08               4105		.byte	8
00000696 01               4106		.byte	1
00000697 000502           4107		.byte	0,5,2
0000069a 00000000         4108		.long	.LDWlin7
0000069e 0d               4109		.byte	13
0000069f 0d               4110		.byte	13
000006a0 13               4111		.byte	19
000006a1 000502           4112		.byte	0,5,2
000006a4 00000000         4113		.long	.LDWlin8
000006a8 0d               4114		.byte	13
000006a9 13               4115		.byte	19
000006aa 06               4116		.byte	6
000006ab 03               4117		.byte	3
000006ac 07               4118		.byte	7
000006ad 02               4119		.byte	2
000006ae 00               4120		.byte	0
000006af 01               4121		.byte	1
000006b0 03               4122		.byte	3
000006b1 7b               4123		.byte	123
000006b2 02               4124		.byte	2
000006b3 00               4125		.byte	0
000006b4 01               4126		.byte	1
000006b5 03               4127		.byte	3
000006b6 7e               4128		.byte	126
000006b7 02               4129		.byte	2

                                   Fri Apr 10 08:32:10 2020           Page 75
                                   Fri Apr 10 08:32:09 2020   gh_0000bi81.si
000006b8 00               4130		.byte	0
000006b9 01               4131		.byte	1
000006ba 06               4132		.byte	6
000006bb 000502           4133		.byte	0,5,2
000006be 00000000         4134		.long	.LDWlin9
000006c2 03               4135		.byte	3
000006c3 08               4136		.byte	8
000006c4 02               4137		.byte	2
000006c5 00               4138		.byte	0
000006c6 01               4139		.byte	1
000006c7 0c               4140		.byte	12
000006c8 13               4141		.byte	19
000006c9 1b               4142		.byte	27
000006ca 02               4143		.byte	2
000006cb 00               4144		.byte	0
000006cc 0b               4145		.byte	11
000006cd 02               4146		.byte	2
000006ce 00               4147		.byte	0
000006cf 0d               4148		.byte	13
000006d0 000502           4149		.byte	0,5,2
000006d3 00000000         4150		.long	.LDWlin10
000006d7 0c               4151		.byte	12
000006d8 000502           4152		.byte	0,5,2
000006db 00000000         4153		.long	.LDWlin11
000006df 0c               4154		.byte	12
000006e0 1d               4155		.byte	29
000006e1 000502           4156		.byte	0,5,2
000006e4 00000000         4157		.long	.LDWlin12
000006e8 0b               4158		.byte	11
000006e9 0c               4159		.byte	12
000006ea 000502           4160		.byte	0,5,2
000006ed 00000000         4161		.long	.LDWlin13
000006f1 0d               4162		.byte	13
000006f2 0c               4163		.byte	12
000006f3 15               4164		.byte	21
000006f4 000502           4165		.byte	0,5,2
000006f7 00000000         4166		.long	.LDWlin14
000006fb 0b               4167		.byte	11
000006fc 0b               4168		.byte	11
000006fd 13               4169		.byte	19
000006fe 02               4170		.byte	2
000006ff 00               4171		.byte	0
00000700 0c               4172		.byte	12
00000701 000502           4173		.byte	0,5,2
00000704 00000000         4174		.long	.LDWlin15
00000708 0b               4175		.byte	11
00000709 0b               4176		.byte	11
0000070a 13               4177		.byte	19
0000070b 02               4178		.byte	2
0000070c 00               4179		.byte	0
0000070d 0c               4180		.byte	12
0000070e 000502           4181		.byte	0,5,2
00000711 00000000         4182		.long	.LDWlin16
00000715 0b               4183		.byte	11
00000716 0b               4184		.byte	11
00000717 000502           4185		.byte	0,5,2

                                   Fri Apr 10 08:32:10 2020           Page 76
                                   Fri Apr 10 08:32:09 2020   gh_0000bi81.si
0000071a 00000000         4186		.long	.LDWlin17
0000071e 0b               4187		.byte	11
0000071f 02               4188		.byte	2
00000720 00               4189		.byte	0
00000721 0b               4190		.byte	11
00000722 0b               4191		.byte	11
00000723 000502           4192		.byte	0,5,2
00000726 00000000         4193		.long	.LDWlin18
0000072a 0b               4194		.byte	11
0000072b 0c               4195		.byte	12
0000072c 03               4196		.byte	3
0000072d 07               4197		.byte	7
0000072e 02               4198		.byte	2
0000072f 0c               4199		.byte	12
00000730 01               4200		.byte	1
00000731 02               4201		.byte	2
00000732 00               4202		.byte	0
00000733 0b               4203		.byte	11
00000734 02               4204		.byte	2
00000735 00               4205		.byte	0
00000736 0d               4206		.byte	13
00000737 000502           4207		.byte	0,5,2
0000073a 00000000         4208		.long	.LDWlin19
0000073e 0b               4209		.byte	11
0000073f 0c               4210		.byte	12
00000740 75               4211		.byte	117
00000741 000502           4212		.byte	0,5,2
00000744 00000000         4213		.long	.LDWlin20
00000748 0b               4214		.byte	11
00000749 0c               4215		.byte	12
0000074a 14               4216		.byte	20
0000074b 000502           4217		.byte	0,5,2
0000074e 00000000         4218		.long	.LDWlin21
00000752 03               4219		.byte	3
00000753 6b               4220		.byte	107
00000754 02               4221		.byte	2
00000755 00               4222		.byte	0
00000756 01               4223		.byte	1
00000757 0c               4224		.byte	12
00000758 0d               4225		.byte	13
00000759 000502           4226		.byte	0,5,2
0000075c 00000000         4227		.long	.LDWlin22
00000760 03               4228		.byte	3
00000761 11               4229		.byte	17
00000762 02               4230		.byte	2
00000763 00               4231		.byte	0
00000764 01               4232		.byte	1
00000765 0c               4233		.byte	12
00000766 000502           4234		.byte	0,5,2
00000769 00000000         4235		.long	.LDWlin23
0000076d 0b               4236		.byte	11
0000076e 0c               4237		.byte	12
0000076f 23               4238		.byte	35
00000770 000502           4239		.byte	0,5,2
00000773 00000000         4240		.long	.LDWlin24
00000777 0b               4241		.byte	11

                                   Fri Apr 10 08:32:10 2020           Page 77
                                   Fri Apr 10 08:32:09 2020   gh_0000bi81.si
00000778 0c               4242		.byte	12
00000779 0c               4243		.byte	12
0000077a 13               4244		.byte	19
0000077b 02               4245		.byte	2
0000077c 00               4246		.byte	0
0000077d 0c               4247		.byte	12
0000077e 000502           4248		.byte	0,5,2
00000781 00000000         4249		.long	.LDWlin25
00000785 0b               4250		.byte	11
00000786 0d               4251		.byte	13
00000787 1b               4252		.byte	27
00000788 02               4253		.byte	2
00000789 00               4254		.byte	0
0000078a 0b               4255		.byte	11
0000078b 02               4256		.byte	2
0000078c 00               4257		.byte	0
0000078d 0d               4258		.byte	13
0000078e 03               4259		.byte	3
0000078f b07f             4260		.byte	176,127
00000791 02               4261		.byte	2
00000792 02               4262		.byte	2
00000793 01               4263		.byte	1
00000794 000502           4264		.byte	0,5,2
00000797 00000000         4265		.long	.LDWlin26
0000079b 03               4266		.byte	3
0000079c d100             4267		.byte	209,0
0000079e 02               4268		.byte	2
0000079f 00               4269		.byte	0
000007a0 01               4270		.byte	1
000007a1 0c               4271		.byte	12
000007a2 03               4272		.byte	3
000007a3 977f             4273		.byte	151,127
000007a5 02               4274		.byte	2
000007a6 02               4275		.byte	2
000007a7 01               4276		.byte	1
000007a8 000502           4277		.byte	0,5,2
000007ab 00000000         4278		.long	.LDWlin27
000007af 03               4279		.byte	3
000007b0 ea00             4280		.byte	234,0
000007b2 02               4281		.byte	2
000007b3 00               4282		.byte	0
000007b4 01               4283		.byte	1
000007b5 0c               4284		.byte	12
000007b6 06               4285		.byte	6
000007b7 02               4286		.byte	2
000007b8 02               4287		.byte	2
000007b9 02               4288		.byte	2
000007ba 0e               4289		.byte	14
000007bb 000101           4290		.byte	0,1,1
                          4291		.section	.debug_info
                          4292	.LDW_4a9a870:
00000925 11               4293		.byte	17
00000926 666c617368426c6f 4294		.strz	"flashBlockMask"
0000092e 636b4d61736b00  
00000935 a308             4295		.byte	163,8
00000937 28               4296		.byte	40
00000938 01               4297		.byte	1

                                   Fri Apr 10 08:32:10 2020           Page 78
                                   Fri Apr 10 08:32:09 2020   gh_0000bi81.si
00000939 00000000         4298		.long	.LDW_4a5c4f0
0000093d 00               4299		.byte	0
0000093e 0166             4300		.byte	1,102
                          4301	
                          4302	.LDW_5bc4ca8:
00000940 11               4303		.byte	17
00000941 6c656e67746800   4304		.strz	"length"
00000948 a308             4305		.byte	163,8
0000094a 44               4306		.byte	68
0000094b 01               4307		.byte	1
0000094c 00000000         4308		.long	.LDW_4a9a728
00000950 00               4309		.byte	0
00000951 0154             4310		.byte	1,84
                          4311	
                          4312	.LDW_5bc4d00:
00000953 11               4313		.byte	17
00000954 6164647265737300 4314		.strz	"address"
0000095c a308             4315		.byte	163,8
0000095e 5c               4316		.byte	92
0000095f 01               4317		.byte	1
00000960 00000000         4318		.long	.LDW_4a9a780
00000964 00               4319		.byte	0
00000965 016e             4320		.byte	1,110
                          4321	
                          4322	.LDW_4a536e0:
00000967 1f               4323		.byte	31
00000968 00000000         4324		.long	.LDW21
0000096c 00000000         4325		.long	.LDW31
                          4326	
                          4327	.LDW_5bc4f38:
00000970 06               4328		.byte	6
00000971 6900             4329		.strz	"i"
00000973 a508             4330		.byte	165,8
00000975 0c               4331		.byte	12
00000976 01               4332		.byte	1
00000977 00000000         4333		.long	.LDW_4a9ef90
0000097b 00               4334		.byte	0
0000097c 00               4335		.byte	0
0000097d 016b             4336		.byte	1,107
                          4337	
                          4338	.LDW_5bc50f0:
0000097f 06               4339		.byte	6
00000980 6a00             4340		.strz	"j"
00000982 a508             4341		.byte	165,8
00000984 0f               4342		.byte	15
00000985 01               4343		.byte	1
00000986 00000000         4344		.long	.LDW_4a9ef90
0000098a 00               4345		.byte	0
0000098b 00               4346		.byte	0
0000098c 0168             4347		.byte	1,104
                          4348	
                          4349	.LDW_5bc52a8:
0000098e 06               4350		.byte	6
0000098f 63757272656e7441 4351		.strz	"currentAddress"
00000997 64647265737300  
0000099e a708             4352		.byte	167,8
000009a0 16               4353		.byte	22

                                   Fri Apr 10 08:32:10 2020           Page 79
                                   Fri Apr 10 08:32:09 2020   gh_0000bi81.si
000009a1 01               4354		.byte	1
000009a2 00000000         4355		.long	.LDW_5bc4dd8
000009a6 00               4356		.byte	0
000009a7 00               4357		.byte	0
000009a8 016f             4358		.byte	1,111
                          4359	
                          4360	.LDW_5bc4e30:
000009aa 06               4361		.byte	6
000009ab 63757272656e744c 4362		.strz	"currentLength"
000009b3 656e67746800    
000009b9 a808             4363		.byte	168,8
000009bb 15               4364		.byte	21
000009bc 01               4365		.byte	1
000009bd 00000000         4366		.long	.LDW_5bc53b0
000009c1 00               4367		.byte	0
000009c2 00               4368		.byte	0
000009c3 016c             4369		.byte	1,108
                          4370	
                          4371	.LDW_5bc4e88:
000009c5 06               4372		.byte	6
000009c6 6d61784974657261 4373		.strz	"maxIterationFlashBlocks"
000009ce 74696f6e466c6173
000009d6 68426c6f636b7300
000009de a908             4374		.byte	169,8
000009e0 0c               4375		.byte	12
000009e1 01               4376		.byte	1
000009e2 00000000         4377		.long	.LDW_4a9ef90
000009e6 00               4378		.byte	0
000009e7 00               4379		.byte	0
000009e8 0165             4380		.byte	1,101
                          4381	
                          4382	.LDW_5bc4d80:
000009ea 06               4383		.byte	6
000009eb 726573756c7400   4384		.strz	"result"
000009f2 aa08             4385		.byte	170,8
000009f4 0c               4386		.byte	12
000009f5 01               4387		.byte	1
000009f6 00000000         4388		.long	.LDW_4a9ef90
000009fa 00               4389		.byte	0
000009fb 00               4390		.byte	0
000009fc 016d             4391		.byte	1,109
                          4392	
                          4393	.LDW_5bc4ee0:
000009fe 06               4394		.byte	6
000009ff 697465726174696f 4395		.strz	"iterationState"
00000a07 6e537461746500  
00000a0e ab08             4396		.byte	171,8
00000a10 0c               4397		.byte	12
00000a11 01               4398		.byte	1
00000a12 00000000         4399		.long	.LDW_4a9ef90
00000a16 00               4400		.byte	0
00000a17 00               4401		.byte	0
00000a18 016a             4402		.byte	1,106
                          4403	
00000a1a 00               4404		.byte	0
                          4405	
00000a1b 00               4406		.byte	0
                          4407	
                          4408	.LDW_5bc5560:
00000a1c 16               4409		.byte	22

                                   Fri Apr 10 08:32:10 2020           Page 80
                                   Fri Apr 10 08:32:09 2020   gh_0000bi81.si
00000a1d 466c6173685f5844 4410		.strz	"Flash_XD1Driver_InitSync"
00000a25 314472697665725f
00000a2d 496e697453796e63
00000a35 00              
00000a36 e409             4411		.byte	228,9
00000a38 0e               4412		.byte	14
00000a39 01               4413		.byte	1
00000a3a 00000000         4414		.long	.LDW_5bc5148
00000a3e 00000000         4415		.long	Flash_XD1Driver_InitSync
00000a42 00000000         4416		.long	__ghs_eofn_Flash_XD1Driver_InitSync
00000a46 0151             4417		.byte	1,81
00000a48 8080808008       4418		.byte	128,128,128,128,8
00000a4d 0c               4419		.byte	12
00000a4e 00               4420		.byte	0
00000a4f 10               4421		.byte	16
00000a50 00               4422		.byte	0
00000a51 00               4423		.byte	0
00000a52 00               4424		.byte	0
00000a53 01               4425		.byte	1
00000a54 01               4426		.byte	1
00000a55 00               4427		.byte	0
00000a56 01               4428		.byte	1
                          4429	
                          4430		.section	.debug_frame
                          4431	.LDW_5df0600:
000000c0 00000014         4432		.long	.LDW_unq_8-.LDW_unq_7
                          4433	.LDW_unq_7:
000000c4 00000000         4434		.long	.LDW_5dc26d0
000000c8 00000000         4435		.long	Flash_XD1Driver_InitSync
000000cc 0000005e         4436		.long	__ghs_eofn_Flash_XD1Driver_InitSync-Flash_XD1Driver_InitSync
000000d0 01               4437		.byte	1
000000d1 00000000         4438		.long	.LDW51
000000d5 00               4439		.byte	0
000000d6 00               4440		.byte	0
000000d7 00               4441		.byte	0
                          4442	.LDW_unq_8:
                          4443		.section	.debug_line
000007be 000502           4444		.byte	0,5,2
000007c1 00000000         4445		.long	Flash_XD1Driver_InitSync
000007c5 06               4446		.byte	6
000007c6 03               4447		.byte	3
000007c7 e409             4448		.byte	228,9
000007c9 02               4449		.byte	2
000007ca 00               4450		.byte	0
000007cb 01               4451		.byte	1
000007cc 02               4452		.byte	2
000007cd 0a               4453		.byte	10
000007ce 03               4454		.byte	3
000007cf 17               4455		.byte	23
000007d0 02               4456		.byte	2
000007d1 08               4457		.byte	8
000007d2 01               4458		.byte	1
000007d3 03               4459		.byte	3
000007d4 05               4460		.byte	5
000007d5 02               4461		.byte	2
000007d6 08               4462		.byte	8
000007d7 01               4463		.byte	1
000007d8 53               4464		.byte	83
000007d9 1b               4465		.byte	27

                                   Fri Apr 10 08:32:10 2020           Page 81
                                   Fri Apr 10 08:32:09 2020   gh_0000bi81.si
000007da 13               4466		.byte	19
000007db 14               4467		.byte	20
000007dc 1b               4468		.byte	27
000007dd 1b               4469		.byte	27
000007de 14               4470		.byte	20
000007df 1b               4471		.byte	27
000007e0 1b               4472		.byte	27
000007e1 13               4473		.byte	19
000007e2 1d               4474		.byte	29
000007e3 24               4475		.byte	36
000007e4 06               4476		.byte	6
000007e5 02               4477		.byte	2
000007e6 02               4478		.byte	2
000007e7 02               4479		.byte	2
000007e8 0a               4480		.byte	10
000007e9 000101           4481		.byte	0,1,1
                          4482		.section	.debug_info
                          4483	.LDW_5bc51a0:
00000a57 11               4484		.byte	17
00000a58 6164647265737300 4485		.strz	"address"
00000a60 e409             4486		.byte	228,9
00000a62 2f               4487		.byte	47
00000a63 01               4488		.byte	1
00000a64 00000000         4489		.long	.LDW_4a5caa0
00000a68 00               4490		.byte	0
00000a69 0153             4491		.byte	1,83
                          4492	
                          4493	.LDW_4a536b0:
00000a6b 1f               4494		.byte	31
00000a6c 00000000         4495		.long	.LDW41
00000a70 00000000         4496		.long	.LDW51
                          4497	
00000a74 00               4498		.byte	0
                          4499	
00000a75 00               4500		.byte	0
                          4501	
                          4502	.LDW_5bc55f8:
00000a76 16               4503		.byte	22
00000a77 466c6173685f5844 4504		.strz	"Flash_XD1Driver_DeinitSync"
00000a7f 314472697665725f
00000a87 4465696e69745379
00000a8f 6e6300          
00000a92 9f0a             4505		.byte	159,10
00000a94 0e               4506		.byte	14
00000a95 01               4507		.byte	1
00000a96 00000000         4508		.long	.LDW_5bc5148
00000a9a 00000000         4509		.long	Flash_XD1Driver_DeinitSync
00000a9e 00000000         4510		.long	__ghs_eofn_Flash_XD1Driver_DeinitSync
00000aa2 0151             4511		.byte	1,81
00000aa4 8080808008       4512		.byte	128,128,128,128,8
00000aa9 0c               4513		.byte	12
00000aaa 00               4514		.byte	0
00000aab 10               4515		.byte	16
00000aac 00               4516		.byte	0
00000aad 00               4517		.byte	0
00000aae 00               4518		.byte	0
00000aaf 01               4519		.byte	1
00000ab0 01               4520		.byte	1
00000ab1 00               4521		.byte	0

                                   Fri Apr 10 08:32:10 2020           Page 82
                                   Fri Apr 10 08:32:09 2020   gh_0000bi81.si
00000ab2 01               4522		.byte	1
                          4523	
                          4524		.section	.debug_frame
                          4525	.LDW_5df06c0:
000000d8 00000014         4526		.long	.LDW_unq_a-.LDW_unq_9
                          4527	.LDW_unq_9:
000000dc 00000000         4528		.long	.LDW_5dc26d0
000000e0 00000000         4529		.long	Flash_XD1Driver_DeinitSync
000000e4 00000024         4530		.long	__ghs_eofn_Flash_XD1Driver_DeinitSync-Flash_XD1Driver_DeinitSync
000000e8 01               4531		.byte	1
000000e9 00000000         4532		.long	.LDW71
000000ed 00               4533		.byte	0
000000ee 00               4534		.byte	0
000000ef 00               4535		.byte	0
                          4536	.LDW_unq_a:
                          4537		.section	.debug_line
000007ec 000502           4538		.byte	0,5,2
000007ef 00000000         4539		.long	Flash_XD1Driver_DeinitSync
000007f3 06               4540		.byte	6
000007f4 03               4541		.byte	3
000007f5 9f0a             4542		.byte	159,10
000007f7 02               4543		.byte	2
000007f8 00               4544		.byte	0
000007f9 01               4545		.byte	1
000007fa 03               4546		.byte	3
000007fb 06               4547		.byte	6
000007fc 02               4548		.byte	2
000007fd 0a               4549		.byte	10
000007fe 01               4550		.byte	1
000007ff 44               4551		.byte	68
00000800 06               4552		.byte	6
00000801 02               4553		.byte	2
00000802 02               4554		.byte	2
00000803 02               4555		.byte	2
00000804 0a               4556		.byte	10
00000805 000101           4557		.byte	0,1,1
                          4558		.section	.debug_info
                          4559	.LDW_5bc5408:
00000ab3 11               4560		.byte	17
00000ab4 6164647265737300 4561		.strz	"address"
00000abc 9f0a             4562		.byte	159,10
00000abe 31               4563		.byte	49
00000abf 01               4564		.byte	1
00000ac0 00000000         4565		.long	.LDW_4a5caa0
00000ac4 00               4566		.byte	0
00000ac5 0153             4567		.byte	1,83
                          4568	
                          4569	.LDW_4a53110:
00000ac7 1f               4570		.byte	31
00000ac8 00000000         4571		.long	.LDW61
00000acc 00000000         4572		.long	.LDW71
                          4573	
00000ad0 00               4574		.byte	0
                          4575	
00000ad1 00               4576		.byte	0
                          4577	

                                   Fri Apr 10 08:32:10 2020           Page 83
                                   Fri Apr 10 08:32:09 2020   gh_0000bi81.si
                          4578	.LDW_5bc5690:
00000ad2 16               4579		.byte	22
00000ad3 466c6173685f5844 4580		.strz	"Flash_XD1Driver_RWriteSync"
00000adb 314472697665725f
00000ae3 5257726974655379
00000aeb 6e6300          
00000aee b60a             4581		.byte	182,10
00000af0 0e               4582		.byte	14
00000af1 01               4583		.byte	1
00000af2 00000000         4584		.long	.LDW_5bc5148
00000af6 00000000         4585		.long	Flash_XD1Driver_RWriteSync
00000afa 00000000         4586		.long	__ghs_eofn_Flash_XD1Driver_RWriteSync
00000afe 0151             4587		.byte	1,81
00000b00 808080800f       4588		.byte	128,128,128,128,15
00000b05 18               4589		.byte	24
00000b06 00               4590		.byte	0
00000b07 28               4591		.byte	40
00000b08 00               4592		.byte	0
00000b09 00               4593		.byte	0
00000b0a 00               4594		.byte	0
00000b0b 01               4595		.byte	1
00000b0c 01               4596		.byte	1
00000b0d 00               4597		.byte	0
00000b0e 01               4598		.byte	1
                          4599	
                          4600		.section	.debug_frame
                          4601	.LDW_5df0640:
000000f0 00000014         4602		.long	.LDW_unq_c-.LDW_unq_b
                          4603	.LDW_unq_b:
000000f4 00000000         4604		.long	.LDW_5dc26d0
000000f8 00000000         4605		.long	Flash_XD1Driver_RWriteSync
000000fc 00000058         4606		.long	__ghs_eofn_Flash_XD1Driver_RWriteSync-Flash_XD1Driver_RWriteSync
00000100 01               4607		.byte	1
00000101 00000000         4608		.long	.LDW91
00000105 00               4609		.byte	0
00000106 00               4610		.byte	0
00000107 00               4611		.byte	0
                          4612	.LDW_unq_c:
                          4613		.section	.debug_line
00000808 000502           4614		.byte	0,5,2
0000080b 00000000         4615		.long	Flash_XD1Driver_RWriteSync
0000080f 06               4616		.byte	6
00000810 03               4617		.byte	3
00000811 b60a             4618		.byte	182,10
00000813 02               4619		.byte	2
00000814 00               4620		.byte	0
00000815 01               4621		.byte	1
00000816 03               4622		.byte	3
00000817 05               4623		.byte	5
00000818 02               4624		.byte	2
00000819 0e               4625		.byte	14
0000081a 01               4626		.byte	1
0000081b 000502           4627		.byte	0,5,2
0000081e 00000000         4628		.long	.LDWlin28
00000822 0d               4629		.byte	13
00000823 06               4630		.byte	6
00000824 03               4631		.byte	3
00000825 06               4632		.byte	6
00000826 02               4633		.byte	2

                                   Fri Apr 10 08:32:10 2020           Page 84
                                   Fri Apr 10 08:32:09 2020   gh_0000bi81.si
00000827 08               4634		.byte	8
00000828 01               4635		.byte	1
00000829 03               4636		.byte	3
0000082a 15               4637		.byte	21
0000082b 02               4638		.byte	2
0000082c 00               4639		.byte	0
0000082d 01               4640		.byte	1
0000082e 03               4641		.byte	3
0000082f 6e               4642		.byte	110
00000830 02               4643		.byte	2
00000831 00               4644		.byte	0
00000832 01               4645		.byte	1
00000833 03               4646		.byte	3
00000834 7a               4647		.byte	122
00000835 02               4648		.byte	2
00000836 00               4649		.byte	0
00000837 01               4650		.byte	1
00000838 03               4651		.byte	3
00000839 7d               4652		.byte	125
0000083a 02               4653		.byte	2
0000083b 00               4654		.byte	0
0000083c 01               4655		.byte	1
0000083d 06               4656		.byte	6
0000083e 000502           4657		.byte	0,5,2
00000841 00000000         4658		.long	.LDWlin29
00000845 03               4659		.byte	3
00000846 04               4660		.byte	4
00000847 02               4661		.byte	2
00000848 00               4662		.byte	0
00000849 01               4663		.byte	1
0000084a 000502           4664		.byte	0,5,2
0000084d 00000000         4665		.long	.LDWlin30
00000851 03               4666		.byte	3
00000852 06               4667		.byte	6
00000853 02               4668		.byte	2
00000854 00               4669		.byte	0
00000855 01               4670		.byte	1
00000856 000502           4671		.byte	0,5,2
00000859 00000000         4672		.long	.LDWlin31
0000085d 03               4673		.byte	3
0000085e 12               4674		.byte	18
0000085f 02               4675		.byte	2
00000860 00               4676		.byte	0
00000861 01               4677		.byte	1
00000862 13               4678		.byte	19
00000863 13               4679		.byte	19
00000864 25               4680		.byte	37
00000865 24               4681		.byte	36
00000866 02               4682		.byte	2
00000867 00               4683		.byte	0
00000868 0c               4684		.byte	12
00000869 06               4685		.byte	6
0000086a 02               4686		.byte	2
0000086b 02               4687		.byte	2
0000086c 02               4688		.byte	2
0000086d 0e               4689		.byte	14

                                   Fri Apr 10 08:32:10 2020           Page 85
                                   Fri Apr 10 08:32:09 2020   gh_0000bi81.si
0000086e 000101           4690		.byte	0,1,1
                          4691		.section	.debug_info
                          4692	.LDW_5bc54b8:
00000b0f 11               4693		.byte	17
00000b10 7772697465427566 4694		.strz	"writeBuffer"
00000b18 66657200        
00000b1c b60a             4695		.byte	182,10
00000b1e 38               4696		.byte	56
00000b1f 01               4697		.byte	1
00000b20 00000000         4698		.long	.LDW_5bc4fe8
00000b24 00               4699		.byte	0
00000b25 016d             4700		.byte	1,109
                          4701	
                          4702	.LDW_5bc51f8:
00000b27 11               4703		.byte	17
00000b28 77726974654c656e 4704		.strz	"writeLength"
00000b30 67746800        
00000b34 b60a             4705		.byte	182,10
00000b36 51               4706		.byte	81
00000b37 01               4707		.byte	1
00000b38 00000000         4708		.long	.LDW_4a9a728
00000b3c 00               4709		.byte	0
00000b3d 016c             4710		.byte	1,108
                          4711	
                          4712	.LDW_5bc5040:
00000b3f 11               4713		.byte	17
00000b40 7772697465416464 4714		.strz	"writeAddress"
00000b48 7265737300      
00000b4d b60a             4715		.byte	182,10
00000b4f 6e               4716		.byte	110
00000b50 01               4717		.byte	1
00000b51 00000000         4718		.long	.LDW_4a9a780
00000b55 00               4719		.byte	0
00000b56 016e             4720		.byte	1,110
                          4721	
                          4722	.LDW_4a53680:
00000b58 1f               4723		.byte	31
00000b59 00000000         4724		.long	.LDW81
00000b5d 00000000         4725		.long	.LDW91
                          4726	
                          4727	.LDW_5bc5250:
00000b61 06               4728		.byte	6
00000b62 7772697465416c69 4729		.strz	"writeAlignment"
00000b6a 676e6d656e7400  
00000b71 b80a             4730		.byte	184,10
00000b73 0c               4731		.byte	12
00000b74 01               4732		.byte	1
00000b75 00000000         4733		.long	.LDW_4a9ef90
00000b79 00               4734		.byte	0
00000b7a 00               4735		.byte	0
00000b7b 0153             4736		.byte	1,83
                          4737	
                          4738	.LDW_5bc5460:
00000b7d 06               4739		.byte	6
00000b7e 666c617368426c6f 4740		.strz	"flashBlockMask"
00000b86 636b4d61736b00  
00000b8d b90a             4741		.byte	185,10
00000b8f 0c               4742		.byte	12
00000b90 01               4743		.byte	1
00000b91 00000000         4744		.long	.LDW_5bc5728
00000b95 00               4745		.byte	0

                                   Fri Apr 10 08:32:10 2020           Page 86
                                   Fri Apr 10 08:32:09 2020   gh_0000bi81.si
00000b96 00               4746		.byte	0
00000b97 0271             4747		.byte	2,113
00000b99 08               4748		.byte	8
                          4749	
00000b9a 00               4750		.byte	0
                          4751	
00000b9b 00               4752		.byte	0
                          4753	
                          4754	.LDW_5bc57b0:
00000b9c 16               4755		.byte	22
00000b9d 466c6173685f5844 4756		.strz	"Flash_XD1Driver_REraseSync"
00000ba5 314472697665725f
00000bad 5245726173655379
00000bb5 6e6300          
00000bb8 f40a             4757		.byte	244,10
00000bba 0e               4758		.byte	14
00000bbb 01               4759		.byte	1
00000bbc 00000000         4760		.long	.LDW_5bc5148
00000bc0 00000000         4761		.long	Flash_XD1Driver_REraseSync
00000bc4 00000000         4762		.long	__ghs_eofn_Flash_XD1Driver_REraseSync
00000bc8 0151             4763		.byte	1,81
00000bca 808080800c       4764		.byte	128,128,128,128,12
00000bcf 18               4765		.byte	24
00000bd0 00               4766		.byte	0
00000bd1 20               4767		.byte	32
00000bd2 00               4768		.byte	0
00000bd3 00               4769		.byte	0
00000bd4 00               4770		.byte	0
00000bd5 01               4771		.byte	1
00000bd6 01               4772		.byte	1
00000bd7 00               4773		.byte	0
00000bd8 01               4774		.byte	1
                          4775	
                          4776		.section	.debug_frame
                          4777	.LDW_5df0700:
00000108 00000014         4778		.long	.LDW_unq_e-.LDW_unq_d
                          4779	.LDW_unq_d:
0000010c 00000000         4780		.long	.LDW_5dc26d0
00000110 00000000         4781		.long	Flash_XD1Driver_REraseSync
00000114 00000052         4782		.long	__ghs_eofn_Flash_XD1Driver_REraseSync-Flash_XD1Driver_REraseSync
00000118 01               4783		.byte	1
00000119 00000000         4784		.long	.LDW12
0000011d 00               4785		.byte	0
0000011e 00               4786		.byte	0
0000011f 00               4787		.byte	0
                          4788	.LDW_unq_e:
                          4789		.section	.debug_line
00000871 000502           4790		.byte	0,5,2
00000874 00000000         4791		.long	Flash_XD1Driver_REraseSync
00000878 06               4792		.byte	6
00000879 03               4793		.byte	3
0000087a f40a             4794		.byte	244,10
0000087c 02               4795		.byte	2
0000087d 00               4796		.byte	0
0000087e 01               4797		.byte	1
0000087f 03               4798		.byte	3
00000880 05               4799		.byte	5
00000881 02               4800		.byte	2
00000882 0e               4801		.byte	14

                                   Fri Apr 10 08:32:10 2020           Page 87
                                   Fri Apr 10 08:32:09 2020   gh_0000bi81.si
00000883 01               4802		.byte	1
00000884 000502           4803		.byte	0,5,2
00000887 00000000         4804		.long	.LDWlin32
0000088b 0d               4805		.byte	13
0000088c 06               4806		.byte	6
0000088d 03               4807		.byte	3
0000088e 06               4808		.byte	6
0000088f 02               4809		.byte	2
00000890 08               4810		.byte	8
00000891 01               4811		.byte	1
00000892 03               4812		.byte	3
00000893 09               4813		.byte	9
00000894 02               4814		.byte	2
00000895 00               4815		.byte	0
00000896 01               4816		.byte	1
00000897 03               4817		.byte	3
00000898 7a               4818		.byte	122
00000899 02               4819		.byte	2
0000089a 00               4820		.byte	0
0000089b 01               4821		.byte	1
0000089c 03               4822		.byte	3
0000089d 7a               4823		.byte	122
0000089e 02               4824		.byte	2
0000089f 00               4825		.byte	0
000008a0 01               4826		.byte	1
000008a1 03               4827		.byte	3
000008a2 7d               4828		.byte	125
000008a3 02               4829		.byte	2
000008a4 00               4830		.byte	0
000008a5 01               4831		.byte	1
000008a6 06               4832		.byte	6
000008a7 000502           4833		.byte	0,5,2
000008aa 00000000         4834		.long	.LDWlin33
000008ae 03               4835		.byte	3
000008af 04               4836		.byte	4
000008b0 02               4837		.byte	2
000008b1 00               4838		.byte	0
000008b2 01               4839		.byte	1
000008b3 000502           4840		.byte	0,5,2
000008b6 00000000         4841		.long	.LDWlin34
000008ba 03               4842		.byte	3
000008bb 06               4843		.byte	6
000008bc 02               4844		.byte	2
000008bd 00               4845		.byte	0
000008be 01               4846		.byte	1
000008bf 000502           4847		.byte	0,5,2
000008c2 00000000         4848		.long	.LDWlin35
000008c6 03               4849		.byte	3
000008c7 06               4850		.byte	6
000008c8 02               4851		.byte	2
000008c9 00               4852		.byte	0
000008ca 01               4853		.byte	1
000008cb 15               4854		.byte	21
000008cc 23               4855		.byte	35
000008cd 02               4856		.byte	2
000008ce 00               4857		.byte	0

                                   Fri Apr 10 08:32:10 2020           Page 88
                                   Fri Apr 10 08:32:09 2020   gh_0000bi81.si
000008cf 0c               4858		.byte	12
000008d0 06               4859		.byte	6
000008d1 02               4860		.byte	2
000008d2 02               4861		.byte	2
000008d3 02               4862		.byte	2
000008d4 0c               4863		.byte	12
000008d5 000101           4864		.byte	0,1,1
                          4865		.section	.debug_info
                          4866	.LDW_5bc5300:
00000bd9 11               4867		.byte	17
00000bda 65726173654c656e 4868		.strz	"eraseLength"
00000be2 67746800        
00000be6 f40a             4869		.byte	244,10
00000be8 36               4870		.byte	54
00000be9 01               4871		.byte	1
00000bea 00000000         4872		.long	.LDW_4a9a728
00000bee 00               4873		.byte	0
00000bef 0153             4874		.byte	1,83
                          4875	
                          4876	.LDW_5bc5358:
00000bf1 11               4877		.byte	17
00000bf2 6572617365416464 4878		.strz	"eraseAddress"
00000bfa 7265737300      
00000bff f40a             4879		.byte	244,10
00000c01 53               4880		.byte	83
00000c02 01               4881		.byte	1
00000c03 00000000         4882		.long	.LDW_4a9a780
00000c07 00               4883		.byte	0
00000c08 016e             4884		.byte	1,110
                          4885	
                          4886	.LDW_4a53230:
00000c0a 1f               4887		.byte	31
00000c0b 00000000         4888		.long	.LDW02
00000c0f 00000000         4889		.long	.LDW12
                          4890	
                          4891	.LDW_5c5e468:
00000c13 06               4892		.byte	6
00000c14 6572617365416c69 4893		.strz	"eraseAlignment"
00000c1c 676e6d656e7400  
00000c23 f60a             4894		.byte	246,10
00000c25 0c               4895		.byte	12
00000c26 01               4896		.byte	1
00000c27 00000000         4897		.long	.LDW_4a9ef90
00000c2b 00               4898		.byte	0
00000c2c 00               4899		.byte	0
00000c2d 0153             4900		.byte	1,83
                          4901	
                          4902	.LDW_5c5e570:
00000c2f 06               4903		.byte	6
00000c30 666c617368426c6f 4904		.strz	"flashBlockMask"
00000c38 636b4d61736b00  
00000c3f f70a             4905		.byte	247,10
00000c41 0c               4906		.byte	12
00000c42 01               4907		.byte	1
00000c43 00000000         4908		.long	.LDW_5bc5848
00000c47 00               4909		.byte	0
00000c48 00               4910		.byte	0
00000c49 0271             4911		.byte	2,113
00000c4b 08               4912		.byte	8
                          4913	

                                   Fri Apr 10 08:32:10 2020           Page 89
                                   Fri Apr 10 08:32:09 2020   gh_0000bi81.si
00000c4c 00               4914		.byte	0
                          4915	
00000c4d 00               4916		.byte	0
                          4917	
                          4918	.LDW_5bc5a70:
00000c4e 16               4919		.byte	22
00000c4f 466c6173685f5844 4920		.strz	"Flash_XD1Driver_RReadSync"
00000c57 314472697665725f
00000c5f 525265616453796e
00000c67 6300            
00000c69 a30b             4921		.byte	163,11
00000c6b 0e               4922		.byte	14
00000c6c 01               4923		.byte	1
00000c6d 00000000         4924		.long	.LDW_5bc5148
00000c71 00000000         4925		.long	Flash_XD1Driver_RReadSync
00000c75 00000000         4926		.long	__ghs_eofn_Flash_XD1Driver_RReadSync
00000c79 0151             4927		.byte	1,81
00000c7b 808080800c       4928		.byte	128,128,128,128,12
00000c80 08               4929		.byte	8
00000c81 00               4930		.byte	0
00000c82 10               4931		.byte	16
00000c83 00               4932		.byte	0
00000c84 00               4933		.byte	0
00000c85 00               4934		.byte	0
00000c86 01               4935		.byte	1
00000c87 01               4936		.byte	1
00000c88 00               4937		.byte	0
00000c89 01               4938		.byte	1
                          4939	
                          4940		.section	.debug_frame
                          4941	.LDW_5df0780:
00000120 00000014         4942		.long	.LDW_unq_10-.LDW_unq_f
                          4943	.LDW_unq_f:
00000124 00000000         4944		.long	.LDW_5dc26d0
00000128 00000000         4945		.long	Flash_XD1Driver_RReadSync
0000012c 0000008a         4946		.long	__ghs_eofn_Flash_XD1Driver_RReadSync-Flash_XD1Driver_RReadSync
00000130 01               4947		.byte	1
00000131 00000000         4948		.long	.LDW32
00000135 00               4949		.byte	0
00000136 00               4950		.byte	0
00000137 00               4951		.byte	0
                          4952	.LDW_unq_10:
                          4953		.section	.debug_line
000008d8 000502           4954		.byte	0,5,2
000008db 00000000         4955		.long	Flash_XD1Driver_RReadSync
000008df 06               4956		.byte	6
000008e0 03               4957		.byte	3
000008e1 a30b             4958		.byte	163,11
000008e3 02               4959		.byte	2
000008e4 00               4960		.byte	0
000008e5 01               4961		.byte	1
000008e6 02               4962		.byte	2
000008e7 0c               4963		.byte	12
000008e8 03               4964		.byte	3
000008e9 15               4965		.byte	21
000008ea 02               4966		.byte	2
000008eb 08               4967		.byte	8
000008ec 01               4968		.byte	1
000008ed 03               4969		.byte	3

                                   Fri Apr 10 08:32:10 2020           Page 90
                                   Fri Apr 10 08:32:09 2020   gh_0000bi81.si
000008ee 05               4970		.byte	5
000008ef 02               4971		.byte	2
000008f0 0a               4972		.byte	10
000008f1 01               4973		.byte	1
000008f2 3d               4974		.byte	61
000008f3 23               4975		.byte	35
000008f4 1c               4976		.byte	28
000008f5 1b               4977		.byte	27
000008f6 13               4978		.byte	19
000008f7 13               4979		.byte	19
000008f8 13               4980		.byte	19
000008f9 14               4981		.byte	20
000008fa 13               4982		.byte	19
000008fb 13               4983		.byte	19
000008fc 14               4984		.byte	20
000008fd 15               4985		.byte	21
000008fe 000502           4986		.byte	0,5,2
00000901 00000000         4987		.long	.LDWlin36
00000905 0c               4988		.byte	12
00000906 03               4989		.byte	3
00000907 7e               4990		.byte	126
00000908 02               4991		.byte	2
00000909 04               4992		.byte	4
0000090a 01               4993		.byte	1
0000090b 000502           4994		.byte	0,5,2
0000090e 00000000         4995		.long	.LDWlin37
00000912 0d               4996		.byte	13
00000913 0d               4997		.byte	13
00000914 000502           4998		.byte	0,5,2
00000917 00000000         4999		.long	.LDWlin38
0000091b 0c               5000		.byte	12
0000091c 0c               5001		.byte	12
0000091d 0c               5002		.byte	12
0000091e 0c               5003		.byte	12
0000091f 35               5004		.byte	53
00000920 33               5005		.byte	51
00000921 13               5006		.byte	19
00000922 02               5007		.byte	2
00000923 00               5008		.byte	0
00000924 03               5009		.byte	3
00000925 04               5010		.byte	4
00000926 02               5011		.byte	2
00000927 00               5012		.byte	0
00000928 01               5013		.byte	1
00000929 02               5014		.byte	2
0000092a 0c               5015		.byte	12
0000092b 000101           5016		.byte	0,1,1
                          5017		.section	.debug_info
                          5018	.LDW_5c5ec50:
00000c8a 11               5019		.byte	17
00000c8b 7265616442756666 5020		.strz	"readBuffer"
00000c93 657200          
00000c96 a30b             5021		.byte	163,11
00000c98 37               5022		.byte	55
00000c99 01               5023		.byte	1
00000c9a 00000000         5024		.long	.LDW_5bc4fe8
00000c9e 00               5025		.byte	0

                                   Fri Apr 10 08:32:10 2020           Page 91
                                   Fri Apr 10 08:32:09 2020   gh_0000bi81.si
00000c9f 0153             5026		.byte	1,83
                          5027	
                          5028	.LDW_5c5e3b8:
00000ca1 11               5029		.byte	17
00000ca2 726561644c656e67 5030		.strz	"readLength"
00000caa 746800          
00000cad a30b             5031		.byte	163,11
00000caf 4f               5032		.byte	79
00000cb0 01               5033		.byte	1
00000cb1 00000000         5034		.long	.LDW_4a9a728
00000cb5 00               5035		.byte	0
00000cb6 0154             5036		.byte	1,84
                          5037	
                          5038	.LDW_5c5e410:
00000cb8 11               5039		.byte	17
00000cb9 7265616441646472 5040		.strz	"readAddress"
00000cc1 65737300        
00000cc5 a30b             5041		.byte	163,11
00000cc7 6b               5042		.byte	107
00000cc8 01               5043		.byte	1
00000cc9 00000000         5044		.long	.LDW_4a9a780
00000ccd 00               5045		.byte	0
00000cce 0155             5046		.byte	1,85
                          5047	
                          5048	.LDW_4a53590:
00000cd0 1f               5049		.byte	31
00000cd1 00000000         5050		.long	.LDW22
00000cd5 00000000         5051		.long	.LDW32
                          5052	
                          5053	.LDW_5c5e678:
00000cd9 06               5054		.byte	6
00000cda 726573756c7400   5055		.strz	"result"
00000ce1 aa0b             5056		.byte	170,11
00000ce3 11               5057		.byte	17
00000ce4 01               5058		.byte	1
00000ce5 00000000         5059		.long	.LDW_5bc5148
00000ce9 00               5060		.byte	0
00000cea 00               5061		.byte	0
00000ceb 0153             5062		.byte	1,83
                          5063	
00000ced 00               5064		.byte	0
                          5065	
00000cee 00               5066		.byte	0
                          5067	
                          5068	.LDW_5bc5b08:
00000cef 16               5069		.byte	22
00000cf0 466c6173685f5844 5070		.strz	"Flash_XD1Driver_GetVersionOfDriver"
00000cf8 314472697665725f
00000d00 4765745665727369
00000d08 6f6e4f6644726976
00000d10 657200          
00000d13 fc0b             5071		.byte	252,11
00000d15 08               5072		.byte	8
00000d16 01               5073		.byte	1
00000d17 00000000         5074		.long	.LDW_5c5e4c0
00000d1b 00000000         5075		.long	Flash_XD1Driver_GetVersionOfDriver
00000d1f 00000000         5076		.long	__ghs_eofn_Flash_XD1Driver_GetVersionOfDriver
00000d23 0151             5077		.byte	1,81
00000d25 03               5078		.byte	3
00000d26 00               5079		.byte	0
00000d27 00               5080		.byte	0
00000d28 00               5081		.byte	0

                                   Fri Apr 10 08:32:10 2020           Page 92
                                   Fri Apr 10 08:32:09 2020   gh_0000bi81.si
00000d29 00               5082		.byte	0
00000d2a 00               5083		.byte	0
00000d2b 00               5084		.byte	0
00000d2c 01               5085		.byte	1
00000d2d 01               5086		.byte	1
00000d2e 00               5087		.byte	0
00000d2f 01               5088		.byte	1
                          5089	
                          5090		.section	.debug_frame
                          5091	.LDW_5df0800:
00000138 00000014         5092		.long	.LDW_unq_12-.LDW_unq_11
                          5093	.LDW_unq_11:
0000013c 00000000         5094		.long	.LDW_5dc26d0
00000140 00000000         5095		.long	Flash_XD1Driver_GetVersionOfDriver
00000144 00000006         5096		.long	__ghs_eofn_Flash_XD1Driver_GetVersionOfDriver-Flash_XD1Driver_GetVersionOfDriver
00000148 01               5097		.byte	1
00000149 00000000         5098		.long	.LDW52
0000014d 00               5099		.byte	0
0000014e 00               5100		.byte	0
0000014f 00               5101		.byte	0
                          5102	.LDW_unq_12:
                          5103		.section	.debug_line
0000092e 000502           5104		.byte	0,5,2
00000931 00000000         5105		.long	Flash_XD1Driver_GetVersionOfDriver
00000935 06               5106		.byte	6
00000936 03               5107		.byte	3
00000937 830c             5108		.byte	131,12
00000939 02               5109		.byte	2
0000093a 00               5110		.byte	0
0000093b 01               5111		.byte	1
0000093c 06               5112		.byte	6
0000093d 02               5113		.byte	2
0000093e 04               5114		.byte	4
0000093f 02               5115		.byte	2
00000940 02               5116		.byte	2
00000941 000101           5117		.byte	0,1,1
                          5118		.section	.debug_info
                          5119	.LDW_4a53170:
00000d30 1f               5120		.byte	31
00000d31 00000000         5121		.long	.LDW42
00000d35 00000000         5122		.long	.LDW52
                          5123	
                          5124	.LDW_5c5e938:
00000d39 07               5125		.byte	7
00000d3a 72657475726e5661 5126		.strz	"returnValue"
00000d42 6c756500        
00000d46 fe0b             5127		.byte	254,11
00000d48 0b               5128		.byte	11
00000d49 01               5129		.byte	1
00000d4a 00000000         5130		.long	.LDW_5c5e4c0
00000d4e 00               5131		.byte	0
00000d4f 00               5132		.byte	0
                          5133	
                          5134		.section	.debug_abbrev
00000129 07               5135		.byte	7
0000012a 34               5136		.byte	52
0000012b 00               5137		.byte	0

                                   Fri Apr 10 08:32:10 2020           Page 93
                                   Fri Apr 10 08:32:09 2020   gh_0000bi81.si
0000012c 0308             5138		.byte	3,8
0000012e 3b0f             5139		.byte	59,15
00000130 390f             5140		.byte	57,15
00000132 3a0f             5141		.byte	58,15
00000134 4910             5142		.byte	73,16
00000136 3f0c             5143		.byte	63,12
00000138 3c0c             5144		.byte	60,12
0000013a 0000             5145		.byte	0,0
                          5146	
                          5147		.section	.debug_info
00000d50 00               5148		.byte	0
                          5149	
00000d51 00               5150		.byte	0
                          5151	
00000d52 00               5152		.byte	0
                          5153	
                          5154		.section	.debug_line
                          5155	.Ldw_line_end:
                          5156		.section	.debug_macinfo
00000000 01               5157		.byte	1
00000001 00               5158		.byte	0
00000002 5f5f4c494e455f5f 5159		.strz	"__LINE__"
0000000a 00              
0000000b 01               5160		.byte	1
0000000c 00               5161		.byte	0
0000000d 5f5f46494c455f5f 5162		.strz	"__FILE__"
00000015 00              
00000016 03               5163		.byte	3
00000017 00               5164		.byte	0
00000018 01               5165		.byte	1
00000019 03               5166		.byte	3
0000001a 4f               5167		.byte	79
0000001b 02               5168		.byte	2
0000001c 01               5169		.byte	1
0000001d 4a               5170		.byte	74
0000001e 5f5f46424c5f494e 5171		.strz	"__FBL_INC_H__ "
00000026 435f485f5f2000  
0000002d 03               5172		.byte	3
0000002e 59               5173		.byte	89
0000002f 03               5174		.byte	3
00000030 01               5175		.byte	1
00000031 7c               5176		.byte	124
00000032 5f46424c57524150 5177		.strz	"_FBLWRAPPERFLASH_XD1_HW_VERSION 0x0121u"
0000003a 504552464c415348
00000042 5f5844315f48575f
0000004a 56455253494f4e20
00000052 3078303132317500
0000005a 01               5178		.byte	1
0000005b 7d               5179		.byte	125
0000005c 5f46424c57524150 5180		.strz	"_FBLWRAPPERFLASH_XD1_HW_RELEASE_VERSION 0x02u"
00000064 504552464c415348
0000006c 5f5844315f48575f
00000074 52454c454153455f
0000007c 56455253494f4e20
00000084 307830327500    
0000008a 04               5181		.byte	4
0000008b 03               5182		.byte	3
0000008c 5a               5183		.byte	90
0000008d 04               5184		.byte	4
0000008e 01               5185		.byte	1
0000008f 30               5186		.byte	48
00000090 5647454e5f47454e 5187		.strz	"VGEN_GENY "
00000098 592000          
0000009b 01               5188		.byte	1
0000009c 4a               5189		.byte	74
0000009d 435f435055545950 5190		.strz	"C_CPUTYPE_32BIT "
000000a5 455f333242495420
000000ad 00              
000000ae 01               5191		.byte	1
000000af 54               5192		.byte	84
000000b0 435f435055545950 5193		.strz	"C_CPUTYPE_BIGENDIAN "
000000b8 455f424947454e44
000000c0 49414e2000      

                                   Fri Apr 10 08:32:10 2020           Page 94
                                   Fri Apr 10 08:32:09 2020   gh_0000bi81.si
000000c5 01               5194		.byte	1
000000c6 59               5195		.byte	89
000000c7 435f435055545950 5196		.strz	"C_CPUTYPE_BITORDER_MSB2LSB "
000000cf 455f4249544f5244
000000d7 45525f4d5342324c
000000df 53422000        
000000e3 01               5197		.byte	1
000000e4 63               5198		.byte	99
000000e5 565f454e41424c45 5199		.strz	"V_ENABLE_USE_DUMMY_STATEMENT "
000000ed 5f5553455f44554d
000000f5 4d595f5354415445
000000fd 4d454e542000    
00000103 01               5200		.byte	1
00000104 8901             5201		.byte	137,1
00000106 5647454e5f454e41 5202		.strz	"VGEN_ENABLE_CANFBL "
0000010e 424c455f43414e46
00000116 424c2000        
0000011a 01               5203		.byte	1
0000011b be01             5204		.byte	190,1
0000011d 565f434f4d505f47 5205		.strz	"V_COMP_GHS_MPC5700 "
00000125 48535f4d50433537
0000012d 30302000        
00000131 01               5206		.byte	1
00000132 bf01             5207		.byte	191,1
00000134 565f4350555f4d50 5208		.strz	"V_CPU_MPC5700 "
0000013c 43353730302000  
00000143 01               5209		.byte	1
00000144 ca01             5210		.byte	202,1
00000146 4d414749435f4e55 5211		.strz	"MAGIC_NUMBER 312540478"
0000014e 4d42455220333132
00000156 35343034373800  
0000015d 04               5212		.byte	4
0000015e 03               5213		.byte	3
0000015f 5c               5214		.byte	92
00000160 05               5215		.byte	5
00000161 03               5216		.byte	3
00000162 31               5217		.byte	49
00000163 06               5218		.byte	6
00000164 03               5219		.byte	3
00000165 34               5220		.byte	52
00000166 07               5221		.byte	7
00000167 01               5222		.byte	1
00000168 8704             5223		.byte	135,4
0000016a 565f4445465f5355 5224		.strz	"V_DEF_SUPPORTED_PLATFORM "
00000172 50504f525445445f
0000017a 504c4154464f524d
00000182 2000            
00000184 01               5225		.byte	1
00000185 e104             5226		.byte	225,4
00000187 7675696e74782076 5227		.strz	"vuintx vuint32"
0000018f 75696e74333200  
00000196 01               5228		.byte	1
00000197 da06             5229		.byte	218,6
00000199 4c4f43414c5f494e 5230		.strz	"LOCAL_INLINE static inline"
000001a1 4c494e4520737461
000001a9 74696320696e6c69
000001b1 6e6500          
000001b4 01               5231		.byte	1
000001b5 e406             5232		.byte	228,6
000001b7 565f4d454d524f4d 5233		.strz	"V_MEMROM0 "
000001bf 302000          
000001c2 01               5234		.byte	1
000001c3 ec06             5235		.byte	236,6
000001c5 565f4d454d524f4d 5236		.strz	"V_MEMROM1 "
000001cd 312000          
000001d0 01               5237		.byte	1
000001d1 f006             5238		.byte	240,6
000001d3 565f4d454d524f4d 5239		.strz	"V_MEMROM1_FAR "
000001db 315f4641522000  
000001e2 01               5240		.byte	1
000001e3 8007             5241		.byte	128,7
000001e5 565f4d454d524f4d 5242		.strz	"V_MEMROM2 const"
000001ed 3220636f6e737400
000001f5 01               5243		.byte	1
000001f6 8307             5244		.byte	131,7
000001f8 4d454d4f52595f52 5245		.strz	"MEMORY_ROM V_MEMROM2"
00000200 4f4d20565f4d454d
00000208 524f4d3200      
0000020d 01               5246		.byte	1
0000020e 8a07             5247		.byte	138,7
00000210 565f4d454d524f4d 5248		.strz	"V_MEMROM2_FAR const"
00000218 325f46415220636f
00000220 6e737400        
00000224 01               5249		.byte	1

                                   Fri Apr 10 08:32:10 2020           Page 95
                                   Fri Apr 10 08:32:09 2020   gh_0000bi81.si
00000225 9307             5250		.byte	147,7
00000227 565f4d454d524f4d 5251		.strz	"V_MEMROM3 "
0000022f 332000          
00000232 01               5252		.byte	1
00000233 9907             5253		.byte	153,7
00000235 565f4d454d52414d 5254		.strz	"V_MEMRAM0 "
0000023d 302000          
00000240 01               5255		.byte	1
00000241 9d07             5256		.byte	157,7
00000243 565f4d454d52414d 5257		.strz	"V_MEMRAM1_NEAR "
0000024b 315f4e4541522000
00000253 01               5258		.byte	1
00000254 a107             5259		.byte	161,7
00000256 565f4d454d52414d 5260		.strz	"V_MEMRAM1 "
0000025e 312000          
00000261 01               5261		.byte	1
00000262 ab07             5262		.byte	171,7
00000264 565f4d454d52414d 5263		.strz	"V_MEMRAM2_NEAR "
0000026c 325f4e4541522000
00000274 01               5264		.byte	1
00000275 ae07             5265		.byte	174,7
00000277 4d454d4f52595f4e 5266		.strz	"MEMORY_NEAR V_MEMRAM2_NEAR"
0000027f 45415220565f4d45
00000287 4d52414d325f4e45
0000028f 415200          
00000292 01               5267		.byte	1
00000293 b507             5268		.byte	181,7
00000295 565f4d454d52414d 5269		.strz	"V_MEMRAM2 "
0000029d 322000          
000002a0 01               5270		.byte	1
000002a1 bf07             5271		.byte	191,7
000002a3 565f4d454d52414d 5272		.strz	"V_MEMRAM2_FAR "
000002ab 325f4641522000  
000002b2 01               5273		.byte	1
000002b3 c207             5274		.byte	194,7
000002b5 4d454d4f52595f46 5275		.strz	"MEMORY_FAR V_MEMRAM2_FAR"
000002bd 415220565f4d454d
000002c5 52414d325f464152
000002cd 00              
000002ce 01               5276		.byte	1
000002cf cc07             5277		.byte	204,7
000002d1 565f4d454d52414d 5278		.strz	"V_MEMRAM3 "
000002d9 332000          
000002dc 01               5279		.byte	1
000002dd f907             5280		.byte	249,7
000002df 565f4e554c4c2028 5281		.strz	"V_NULL ((void*)0)"
000002e7 28766f69642a2930
000002ef 2900            
000002f1 01               5282		.byte	1
000002f2 fe07             5283		.byte	254,7
000002f4 4e554c4c20565f4e 5284		.strz	"NULL V_NULL"
000002fc 554c4c00        
00000300 04               5285		.byte	4
00000301 01               5286		.byte	1
00000302 45               5287		.byte	69
00000303 6b47454e79566572 5288		.strz	"kGENyVersionNumberOfBytes 10"
0000030b 73696f6e4e756d62
00000313 65724f6642797465
0000031b 7320313000      
00000320 04               5289		.byte	4
00000321 04               5290		.byte	4
00000322 03               5291		.byte	3
00000323 60               5292		.byte	96
00000324 08               5293		.byte	8
00000325 03               5294		.byte	3
00000326 44               5295		.byte	68
00000327 09               5296		.byte	9
00000328 03               5297		.byte	3
00000329 55               5298		.byte	85
0000032a 0a               5299		.byte	10
0000032b 01               5300		.byte	1
0000032c 45               5301		.byte	69
0000032d 5f5f5345435f494e 5302		.strz	"__SEC_INC_H__ "
00000335 435f485f5f2000  
0000033c 03               5303		.byte	3
0000033d 56               5304		.byte	86
0000033e 0b               5305		.byte	11

                                   Fri Apr 10 08:32:10 2020           Page 96
                                   Fri Apr 10 08:32:09 2020   gh_0000bi81.si
0000033f 01               5306		.byte	1
00000340 2f               5307		.byte	47
00000341 5345435f434c4153 5308		.strz	"SEC_CLASS_DDD 0"
00000349 535f444444203000
00000351 01               5309		.byte	1
00000352 30               5310		.byte	48
00000353 5345435f434c4153 5311		.strz	"SEC_CLASS_C 1"
0000035b 535f43203100    
00000361 01               5312		.byte	1
00000362 31               5313		.byte	49
00000363 5345435f434c4153 5314		.strz	"SEC_CLASS_CCC 2"
0000036b 535f434343203200
00000373 01               5315		.byte	1
00000374 32               5316		.byte	50
00000375 5345435f434c4153 5317		.strz	"SEC_CLASS_VENDOR 3"
0000037d 535f56454e444f52
00000385 203300          
00000388 01               5318		.byte	1
00000389 39               5319		.byte	57
0000038a 5345435f52495045 5320		.strz	"SEC_RIPEMD160 0"
00000392 4d44313630203000
0000039a 01               5321		.byte	1
0000039b 3a               5322		.byte	58
0000039c 5345435f53484131 5323		.strz	"SEC_SHA1 1"
000003a4 203100          
000003a7 01               5324		.byte	1
000003a8 3b               5325		.byte	59
000003a9 5345435f53484132 5326		.strz	"SEC_SHA256 2"
000003b1 3536203200      
000003b6 01               5327		.byte	1
000003b7 44               5328		.byte	68
000003b8 5345435f4b45595f 5329		.strz	"SEC_KEY_TIMEOUT 0"
000003c0 54494d454f555420
000003c8 3000            
000003ca 01               5330		.byte	1
000003cb 48               5331		.byte	72
000003cc 5345435f48415348 5332		.strz	"SEC_HASH_ALGORITHM SEC_SHA1"
000003d4 5f414c474f524954
000003dc 484d205345435f53
000003e4 48413100        
000003e8 01               5333		.byte	1
000003e9 49               5334		.byte	73
000003ea 5345435f53454355 5335		.strz	"SEC_SECURITY_CLASS SEC_CLASS_DDD"
000003f2 524954595f434c41
000003fa 5353205345435f43
00000402 4c4153535f444444
0000040a 00              
0000040b 01               5336		.byte	1
0000040c 4f               5337		.byte	79
0000040d 5345435f454e4142 5338		.strz	"SEC_ENABLE_VERIFICATION_KEY_INTERNAL "
00000415 4c455f5645524946
0000041d 49434154494f4e5f
00000425 4b45595f494e5445
0000042d 524e414c2000    
00000433 01               5339		.byte	1
00000434 50               5340		.byte	80
00000435 5345435f53495a45 5341		.strz	"SEC_SIZE_CHECKSUM_VENDOR 0"
0000043d 5f434845434b5355
00000445 4d5f56454e444f52
0000044d 203000          
00000450 01               5342		.byte	1
00000451 52               5343		.byte	82
00000452 5345435f56455249 5344		.strz	"SEC_VERIFY_BYTES 64"
0000045a 46595f4259544553
00000462 20363400        
00000466 01               5345		.byte	1
00000467 53               5346		.byte	83
00000468 5345435f454e4142 5347		.strz	"SEC_ENABLE_VERIFICATION_ADDRESS_LENGTH "
00000470 4c455f5645524946
00000478 49434154494f4e5f
00000480 414444524553535f
00000488 4c454e4754482000
00000490 01               5348		.byte	1
00000491 54               5349		.byte	84
00000492 5345435f454e4142 5350		.strz	"SEC_ENABLE_CRC_TOTAL "
0000049a 4c455f4352435f54
000004a2 4f54414c2000    
000004a8 01               5351		.byte	1
000004a9 57               5352		.byte	87
000004aa 5345435f5645525f 5353		.strz	"SEC_VER_SIG_OFFSET 0"
000004b2 5349475f4f464653
000004ba 4554203000      
000004bf 01               5354		.byte	1
000004c0 58               5355		.byte	88
000004c1 5345435f5645525f 5356		.strz	"SEC_VER_CRC_OFFSET 0"
000004c9 4352435f4f464653
000004d1 4554203000      
000004d6 04               5357		.byte	4
000004d7 03               5358		.byte	3
000004d8 59               5359		.byte	89
000004d9 0c               5360		.byte	12
000004da 03               5361		.byte	3

                                   Fri Apr 10 08:32:10 2020           Page 97
                                   Fri Apr 10 08:32:09 2020   gh_0000bi81.si
000004db 4d               5362		.byte	77
000004dc 0a               5363		.byte	10
000004dd 04               5364		.byte	4
000004de 01               5365		.byte	1
000004df 59               5366		.byte	89
000004e0 5345435f57415443 5367		.strz	"SEC_WATCHDOG_CYCLE_COUNT (0x20u)"
000004e8 48444f475f435943
000004f0 4c455f434f554e54
000004f8 2028307832307529
00000500 00              
00000501 01               5368		.byte	1
00000502 60               5369		.byte	96
00000503 5345435f454e4142 5370		.strz	"SEC_ENABLE_WORKSPACE_INTERNAL "
0000050b 4c455f574f524b53
00000513 504143455f494e54
0000051b 45524e414c2000  
00000522 01               5371		.byte	1
00000523 66               5372		.byte	102
00000524 5345435f43484543 5373		.strz	"SEC_CHECKSUM_TYPE_CRC 0u"
0000052c 4b53554d5f545950
00000534 455f435243203075
0000053c 00              
0000053d 01               5374		.byte	1
0000053e 6b               5375		.byte	107
0000053f 5345435f43484543 5376		.strz	"SEC_CHECKSUM_TYPE_HASH (SEC_CHECKSUM_TYPE_CRC + 1u)"
00000547 4b53554d5f545950
0000054f 455f484153482028
00000557 5345435f43484543
0000055f 4b53554d5f545950
00000567 455f435243202b20
0000056f 31752900        
00000573 01               5377		.byte	1
00000574 71               5378		.byte	113
00000575 5345435f4d41435f 5379		.strz	"SEC_MAC_TYPE_HMAC 0u"
0000057d 545950455f484d41
00000585 4320307500      
0000058a 01               5380		.byte	1
0000058b 8601             5381		.byte	134,1
0000058d 5345435f43524333 5382		.strz	"SEC_CRC32 0u"
00000595 3220307500      
0000059a 01               5383		.byte	1
0000059b 8e01             5384		.byte	142,1
0000059d 5345435f43524331 5385		.strz	"SEC_CRC16 (SEC_CRC32 + 1u)"
000005a5 3620285345435f43
000005ad 52433332202b2031
000005b5 752900          
000005b8 01               5386		.byte	1
000005b9 ca01             5387		.byte	202,1
000005bb 5345435f5349474e 5388		.strz	"SEC_SIGNATURE_SCHEME_RSA_V15 0u"
000005c3 41545552455f5343
000005cb 48454d455f525341
000005d3 5f56313520307500
000005db 01               5389		.byte	1
000005dc e301             5390		.byte	227,1
000005de 5345435f43414c4c 5391		.strz	"SEC_CALL_TYPE "
000005e6 5f545950452000  
000005ed 04               5392		.byte	4
000005ee 03               5393		.byte	3
000005ef 5c               5394		.byte	92
000005f0 0d               5395		.byte	13
000005f1 03               5396		.byte	3
000005f2 2f               5397		.byte	47
000005f3 0e               5398		.byte	14
000005f4 04               5399		.byte	4
000005f5 04               5400		.byte	4
000005f6 04               5401		.byte	4
000005f7 03               5402		.byte	3
000005f8 58               5403		.byte	88
000005f9 0f               5404		.byte	15
000005fa 01               5405		.byte	1
000005fb 6d               5406		.byte	109
000005fc 5345435f4352435f 5407		.strz	"SEC_CRC_TYPE SEC_CRC32"
00000604 5459504520534543
0000060c 5f435243333200  
00000613 01               5408		.byte	1
00000614 78               5409		.byte	120
00000615 5345435f454e4142 5410		.strz	"SEC_ENABLE_CRC_TYPE_CRC32 "
0000061d 4c455f4352435f54
00000625 5950455f43524333
0000062d 322000          
00000630 04               5411		.byte	4
00000631 03               5412		.byte	3
00000632 59               5413		.byte	89
00000633 10               5414		.byte	16
00000634 03               5415		.byte	3
00000635 55               5416		.byte	85
00000636 11               5417		.byte	17

                                   Fri Apr 10 08:32:10 2020           Page 98
                                   Fri Apr 10 08:32:09 2020   gh_0000bi81.si
00000637 01               5418		.byte	1
00000638 3e               5419		.byte	62
00000639 5345435f53454544 5420		.strz	"SEC_SEED_LENGTH 8u"
00000641 5f4c454e47544820
00000649 387500          
0000064c 01               5421		.byte	1
0000064d 40               5422		.byte	64
0000064e 5345435f4b45595f 5423		.strz	"SEC_KEY_LENGTH 4u"
00000656 4c454e4754482034
0000065e 7500            
00000660 04               5424		.byte	4
00000661 01               5425		.byte	1
00000662 7e               5426		.byte	126
00000663 5345435f50524e47 5427		.strz	"SEC_PRNG_LCG 0u"
0000066b 5f4c434720307500
00000673 01               5428		.byte	1
00000674 8301             5429		.byte	131,1
00000676 5345435f50524e47 5430		.strz	"SEC_PRNG_FIPS186 (SEC_PRNG_LCG + 1u)"
0000067e 5f46495053313836
00000686 20285345435f5052
0000068e 4e475f4c4347202b
00000696 2031752900      
0000069b 01               5431		.byte	1
0000069c 8901             5432		.byte	137,1
0000069e 5345435f50524e47 5433		.strz	"SEC_PRNG SEC_PRNG_LCG"
000006a6 205345435f50524e
000006ae 475f4c434700    
000006b4 04               5434		.byte	4
000006b5 03               5435		.byte	3
000006b6 5a               5436		.byte	90
000006b7 12               5437		.byte	18
000006b8 01               5438		.byte	1
000006b9 ba01             5439		.byte	186,1
000006bb 5345435f53454355 5440		.strz	"SEC_SECURITY_CLASS_VERIFY SEC_SECURITY_CLASS"
000006c3 524954595f434c41
000006cb 53535f5645524946
000006d3 59205345435f5345
000006db 4355524954595f43
000006e3 4c41535300      
000006e8 01               5441		.byte	1
000006e9 c001             5442		.byte	192,1
000006eb 5345435f53454355 5443		.strz	"SEC_SECURITY_CLASS_VERIFICATION SEC_SECURITY_CLASS"
000006f3 524954595f434c41
000006fb 53535f5645524946
00000703 49434154494f4e20
0000070b 5345435f53454355
00000713 524954595f434c41
0000071b 535300          
0000071e 01               5444		.byte	1
0000071f c701             5445		.byte	199,1
00000721 5345435f43484543 5446		.strz	"SEC_CHECKSUM_TYPE SEC_CHECKSUM_TYPE_CRC"
00000729 4b53554d5f545950
00000731 45205345435f4348
00000739 45434b53554d5f54
00000741 5950455f43524300
00000749 01               5447		.byte	1
0000074a cd01             5448		.byte	205,1
0000074c 5345435f4d41435f 5449		.strz	"SEC_MAC_TYPE SEC_MAC_TYPE_HMAC"
00000754 5459504520534543
0000075c 5f4d41435f545950
00000764 455f484d414300  
0000076b 01               5450		.byte	1
0000076c d301             5451		.byte	211,1
0000076e 5345435f5349474e 5452		.strz	"SEC_SIGNATURE_SCHEME SEC_SIGNATURE_SCHEME_RSA_V15"
00000776 41545552455f5343
0000077e 48454d4520534543
00000786 5f5349474e415455
0000078e 52455f534348454d
00000796 455f5253415f5631
0000079e 3500            
000007a0 01               5453		.byte	1
000007a1 fd01             5454		.byte	253,1
000007a3 5345435f454e4142 5455		.strz	"SEC_ENABLE_SECURITY_CLASS_DDD "
000007ab 4c455f5345435552
000007b3 4954595f434c4153
000007bb 535f4444442000  
000007c2 01               5456		.byte	1
000007c3 8f02             5457		.byte	143,2
000007c5 5345435f454e4142 5458		.strz	"SEC_ENABLE_CHECKSUM_TYPE_CRC "
000007cd 4c455f434845434b
000007d5 53554d5f54595045
000007dd 5f4352432000    
000007e3 01               5459		.byte	1
000007e4 db02             5460		.byte	219,2
000007e6 5345435f454e4142 5461		.strz	"SEC_ENABLE_VERIFY_CHECKSUM_CRC "
000007ee 4c455f5645524946
000007f6 595f434845434b53
000007fe 554d5f4352432000
00000806 04               5462		.byte	4
00000807 04               5463		.byte	4
00000808 04               5464		.byte	4
00000809 03               5465		.byte	3
0000080a 62               5466		.byte	98
0000080b 13               5467		.byte	19
0000080c 03               5468		.byte	3
0000080d 48               5469		.byte	72
0000080e 14               5470		.byte	20
0000080f 01               5471		.byte	1
00000810 33               5472		.byte	51
00000811 46424c5f5553455f 5473		.strz	"FBL_USE_OWN_MEMCPY "
00000819 4f574e5f4d454d43
00000821 50592000        

                                   Fri Apr 10 08:32:10 2020           Page 99
                                   Fri Apr 10 08:32:09 2020   gh_0000bi81.si
00000825 01               5474		.byte	1
00000826 34               5475		.byte	52
00000827 46424c5f57415443 5476		.strz	"FBL_WATCHDOG_ON "
0000082f 48444f475f4f4e20
00000837 00              
00000838 01               5477		.byte	1
00000839 35               5478		.byte	53
0000083a 46424c5f57415443 5479		.strz	"FBL_WATCHDOG_TIME (1 / FBL_REPEAT_CALL_CYCLE)"
00000842 48444f475f54494d
0000084a 45202831202f2046
00000852 424c5f5245504541
0000085a 545f43414c4c5f43
00000862 59434c452900    
00000868 01               5480		.byte	1
00000869 36               5481		.byte	54
0000086a 46424c5f48454144 5482		.strz	"FBL_HEADER_ADDRESS 0xFC0400u"
00000872 45525f4144445245
0000087a 5353203078464330
00000882 3430307500      
00000887 01               5483		.byte	1
00000888 37               5484		.byte	55
00000889 46424c5f454e4142 5485		.strz	"FBL_ENABLE_APPL_TASK "
00000891 4c455f4150504c5f
00000899 5441534b2000    
0000089f 01               5486		.byte	1
000008a0 39               5487		.byte	57
000008a1 46424c5f44494147 5488		.strz	"FBL_DIAG_BUFFER_LENGTH 4095"
000008a9 5f4255464645525f
000008b1 4c454e4754482034
000008b9 30393500        
000008bd 01               5489		.byte	1
000008be 3b               5490		.byte	59
000008bf 46424c5f44494147 5491		.strz	"FBL_DIAG_TIME_P3MAX (2000 / FBL_REPEAT_CALL_CYCLE)"
000008c7 5f54494d455f5033
000008cf 4d41582028323030
000008d7 30202f2046424c5f
000008df 5245504541545f43
000008e7 414c4c5f4359434c
000008ef 452900          
000008f2 01               5492		.byte	1
000008f3 3c               5493		.byte	60
000008f4 46424c5f454e4142 5494		.strz	"FBL_ENABLE_SLEEPMODE "
000008fc 4c455f534c454550
00000904 4d4f44452000    
0000090a 01               5495		.byte	1
0000090b 3e               5496		.byte	62
0000090c 46424c5f454e4142 5497		.strz	"FBL_ENABLE_GAP_FILL "
00000914 4c455f4741505f46
0000091c 494c4c2000      
00000921 01               5498		.byte	1
00000922 40               5499		.byte	64
00000923 46424c5f454e4142 5500		.strz	"FBL_ENABLE_MULTIPLE_MEM_DEVICES "
0000092b 4c455f4d554c5449
00000933 504c455f4d454d5f
0000093b 4445564943455320
00000943 00              
00000944 01               5501		.byte	1
00000945 41               5502		.byte	65
00000946 46424c5f4d454d44 5503		.strz	"FBL_MEMDRV_SEGMENT_SIZE 8"
0000094e 52565f5345474d45
00000956 4e545f53495a4520
0000095e 3800            
00000960 01               5504		.byte	1
00000961 42               5505		.byte	66
00000962 46424c5f454e4142 5506		.strz	"FBL_ENABLE_PRESENCE_PATTERN "
0000096a 4c455f5052455345
00000972 4e43455f50415454
0000097a 45524e2000      
0000097f 01               5507		.byte	1
00000980 43               5508		.byte	67
00000981 46424c5f454e4142 5509		.strz	"FBL_ENABLE_FBL_START "
00000989 4c455f46424c5f53
00000991 544152542000    
00000997 01               5510		.byte	1
00000998 45               5511		.byte	69
00000999 46424c5f44495341 5512		.strz	"FBL_DISABLE_USERSUBFUNCTION "
000009a1 424c455f55534552
000009a9 53554246554e4354
000009b1 494f4e2000      
000009b6 01               5513		.byte	1
000009b7 47               5514		.byte	71
000009b8 46424c5f4d544142 5515		.strz	"FBL_MTAB_NO_OF_BLOCKS 2"
000009c0 5f4e4f5f4f465f42
000009c8 4c4f434b53203200
000009d0 01               5516		.byte	1
000009d1 49               5517		.byte	73
000009d2 46424c5f44495341 5518		.strz	"FBL_DISABLE_DATA_PROCESSING "
000009da 424c455f44415441
000009e2 5f50524f43455353
000009ea 494e472000      
000009ef 01               5519		.byte	1
000009f0 51               5520		.byte	81
000009f1 46424c5f454e4142 5521		.strz	"FBL_ENABLE_SYSTEM_CHECK "
000009f9 4c455f5359535445
00000a01 4d5f434845434b20
00000a09 00              
00000a0a 01               5522		.byte	1
00000a0b 52               5523		.byte	82
00000a0c 46424c5f454e4142 5524		.strz	"FBL_ENABLE_DEBUG_STATUS "
00000a14 4c455f4445425547
00000a1c 5f53544154555320
00000a24 00              
00000a25 01               5525		.byte	1
00000a26 53               5526		.byte	83
00000a27 46424c5f454e4142 5527		.strz	"FBL_ENABLE_ASSERTION "
00000a2f 4c455f4153534552
00000a37 54494f4e2000    
00000a3d 01               5528		.byte	1
00000a3e 56               5529		.byte	86

                                   Fri Apr 10 08:32:10 2020           Page 100
                                   Fri Apr 10 08:32:09 2020   gh_0000bi81.si
00000a3f 46424c5f4d454d5f 5530		.strz	"FBL_MEM_ENABLE_VERIFY_OUTPUT "
00000a47 454e41424c455f56
00000a4f 45524946595f4f55
00000a57 545055542000    
00000a5d 01               5531		.byte	1
00000a5e 5f               5532		.byte	95
00000a5f 464c4153485f5349 5533		.strz	"FLASH_SIZE 1536"
00000a67 5a45203135333600
00000a6f 01               5534		.byte	1
00000a70 61               5535		.byte	97
00000a71 46424c5f454e4142 5536		.strz	"FBL_ENABLE_DMA_FLASH_READ "
00000a79 4c455f444d415f46
00000a81 4c4153485f524541
00000a89 442000          
00000a8c 01               5537		.byte	1
00000a8d 62               5538		.byte	98
00000a8e 46424c5f464c4153 5539		.strz	"FBL_FLASH_REG_0 0xFFFE0000u"
00000a96 485f5245475f3020
00000a9e 3078464646453030
00000aa6 30307500        
00000aaa 01               5540		.byte	1
00000aab 63               5541		.byte	99
00000aac 464c4153485f5345 5542		.strz	"FLASH_SETUP 6"
00000ab4 545550203600    
00000aba 01               5543		.byte	1
00000abb 72               5544		.byte	114
00000abc 53574d5f44415441 5545		.strz	"SWM_DATA_MAX_NOAR 8"
00000ac4 5f4d41585f4e4f41
00000acc 52203800        
00000ad0 01               5546		.byte	1
00000ad1 74               5547		.byte	116
00000ad2 46424c5f454e4142 5548		.strz	"FBL_ENABLE_SEC_ACCESS_DELAY "
00000ada 4c455f5345435f41
00000ae2 43434553535f4445
00000aea 4c41592000      
00000aef 01               5549		.byte	1
00000af0 8001             5550		.byte	128,1
00000af2 46424c5f454e4142 5551		.strz	"FBL_ENABLE_WRITE_RCHW "
00000afa 4c455f5752495445
00000b02 5f524348572000  
00000b09 01               5552		.byte	1
00000b0a 8201             5553		.byte	130,1
00000b0c 46424c5f454e4142 5554		.strz	"FBL_ENABLE_CAN_CONFIRMATION "
00000b14 4c455f43414e5f43
00000b1c 4f4e4649524d4154
00000b24 494f4e2000      
00000b29 01               5555		.byte	1
00000b2a 8301             5556		.byte	131,1
00000b2c 46424c5f454e4142 5557		.strz	"FBL_ENABLE_SECMOD_VECTOR "
00000b34 4c455f5345434d4f
00000b3c 445f564543544f52
00000b44 2000            
00000b46 01               5558		.byte	1
00000b47 8501             5559		.byte	133,1
00000b49 46424c5f454e4142 5560		.strz	"FBL_ENABLE_WRAPPER_NV "
00000b51 4c455f5752415050
00000b59 45525f4e562000  
00000b60 01               5561		.byte	1
00000b61 8d01             5562		.byte	141,1
00000b63 46424c5f454e4142 5563		.strz	"FBL_ENABLE_APPL_STATE_TASK "
00000b6b 4c455f4150504c5f
00000b73 53544154455f5441
00000b7b 534b2000        
00000b7f 01               5564		.byte	1
00000b80 9001             5565		.byte	144,1
00000b82 46424c5f454e4142 5566		.strz	"FBL_ENABLE_APPL_TIMER_TASK "
00000b8a 4c455f4150504c5f
00000b92 54494d45525f5441
00000b9a 534b2000        
00000b9e 01               5567		.byte	1
00000b9f 9901             5568		.byte	153,1
00000ba1 46424c5f5346525f 5569		.strz	"FBL_SFR_SIU_TYPE 2u"
00000ba9 5349555f54595045
00000bb1 20327500        
00000bb5 01               5570		.byte	1
00000bb6 9f01             5571		.byte	159,1
00000bb8 46424c5f4d455f42 5572		.strz	"FBL_ME_BASE 0xFFFB8000ul"
00000bc0 4153452030784646
00000bc8 464238303030756c
00000bd0 00              
00000bd1 01               5573		.byte	1
00000bd2 a001             5574		.byte	160,1
00000bd4 46424c5f434d555f 5575		.strz	"FBL_CMU_BASE 0xC3FE0100ul"
00000bdc 4241534520307843
00000be4 3346453031303075
00000bec 6c00            
00000bee 01               5576		.byte	1
00000bef a101             5577		.byte	161,1
00000bf1 46424c5f434d555f 5578		.strz	"FBL_CMU_PLL_BASE 0xFFFB0200ul"
00000bf9 504c4c5f42415345
00000c01 2030784646464230
00000c09 323030756c00    
00000c0f 01               5579		.byte	1
00000c10 a201             5580		.byte	162,1
00000c12 46424c5f43474d5f 5581		.strz	"FBL_CGM_BASE 0xFFFB0000ul"
00000c1a 4241534520307846
00000c22 4646423030303075
00000c2a 6c00            
00000c2c 01               5582		.byte	1
00000c2d a301             5583		.byte	163,1
00000c2f 46424c5f52474d5f 5584		.strz	"FBL_RGM_BASE 0xFFFA8000ul"
00000c37 4241534520307846
00000c3f 4646413830303075
00000c47 6c00            
00000c49 01               5585		.byte	1

                                   Fri Apr 10 08:32:10 2020           Page 101
                                   Fri Apr 10 08:32:09 2020   gh_0000bi81.si
00000c4a a601             5586		.byte	166,1
00000c4c 46424c5f45444d41 5587		.strz	"FBL_EDMA_BASE 0xFC0A0000ul"
00000c54 5f42415345203078
00000c5c 4643304130303030
00000c64 756c00          
00000c67 01               5588		.byte	1
00000c68 a901             5589		.byte	169,1
00000c6a 46424c5f5346525f 5590		.strz	"FBL_SFR_BASE_ADRESSES_PRECONFIGURED "
00000c72 424153455f414452
00000c7a 45535345535f5052
00000c82 45434f4e46494755
00000c8a 5245442000      
00000c8f 04               5591		.byte	4
00000c90 03               5592		.byte	3
00000c91 5a               5593		.byte	90
00000c92 15               5594		.byte	21
00000c93 03               5595		.byte	3
00000c94 54               5596		.byte	84
00000c95 16               5597		.byte	22
00000c96 04               5598		.byte	4
00000c97 01               5599		.byte	1
00000c98 5a               5600		.byte	90
00000c99 46424c5f4445434c 5601		.strz	"FBL_DECL_ASSERT_EXTENDED_INFO(n) n"
00000ca1 5f4153534552545f
00000ca9 455854454e444544
00000cb1 5f494e464f286e29
00000cb9 206e00          
00000cbc 04               5602		.byte	4
00000cbd 01               5603		.byte	1
00000cbe 6c               5604		.byte	108
00000cbf 46424c5f4445465f 5605		.strz	"FBL_DEF_ENABLE_NON_KB_MAIN "
00000cc7 454e41424c455f4e
00000ccf 4f4e5f4b425f4d41
00000cd7 494e2000        
00000cdb 01               5606		.byte	1
00000cdc 9501             5607		.byte	149,1
00000cde 46424c5f52455045 5608		.strz	"FBL_REPEAT_CALL_CYCLE 1"
00000ce6 41545f43414c4c5f
00000cee 4359434c45203100
00000cf6 01               5609		.byte	1
00000cf7 9a01             5610		.byte	154,1
00000cf9 46424c5f43414c4c 5611		.strz	"FBL_CALL_TYPE "
00000d01 5f545950452000  
00000d08 01               5612		.byte	1
00000d09 9e01             5613		.byte	158,1
00000d0b 565f43414c4c4241 5614		.strz	"V_CALLBACK_NEAR "
00000d13 434b5f4e45415220
00000d1b 00              
00000d1c 01               5615		.byte	1
00000d1d a101             5616		.byte	161,1
00000d1f 565f4150495f4e45 5617		.strz	"V_API_NEAR "
00000d27 41522000        
00000d2b 01               5618		.byte	1
00000d2c d901             5619		.byte	217,1
00000d2e 46626c496e766572 5620		.strz	"FblInvert32Bit(x) ((vuint32)((x) ^ ((vuint32)0xFFFFFFFFul)))"
00000d36 7433324269742878
00000d3e 292028287675696e
00000d46 7433322928287829
00000d4e 205e202828767569
00000d56 6e74333229307846
00000d5e 4646464646464675
00000d66 6c29292900      
00000d6b 01               5621		.byte	1
00000d6c 8502             5622		.byte	133,2
00000d6e 46424c5f53544154 5623		.strz	"FBL_STATE_BITS 32"
00000d76 455f424954532033
00000d7e 3200            
00000d80 01               5624		.byte	1
00000d81 9302             5625		.byte	147,2
00000d83 46424c5f53544154 5626		.strz	"FBL_STATE_INDEX(bit) ((bit) / FBL_STATE_BITS)"
00000d8b 455f494e44455828
00000d93 6269742920282862
00000d9b 697429202f204642
00000da3 4c5f53544154455f
00000dab 424954532900    
00000db1 01               5627		.byte	1
00000db2 b002             5628		.byte	176,2
00000db4 4d454d53495a455f 5629		.strz	"MEMSIZE_OK "
00000dbc 4f4b2000        
00000dc0 04               5630		.byte	4
00000dc1 03               5631		.byte	3
00000dc2 68               5632		.byte	104
00000dc3 17               5633		.byte	23
00000dc4 01               5634		.byte	1
00000dc5 3b               5635		.byte	59
00000dc6 6b4e724f6656616c 5636		.strz	"kNrOfValidationBytes 1"
00000dce 69646174696f6e42
00000dd6 79746573203100  
00000ddd 01               5637		.byte	1
00000dde 5c               5638		.byte	92
00000ddf 46424c5f4c42545f 5639		.strz	"FBL_LBT_START_SEC_CONST "
00000de7 53544152545f5345
00000def 435f434f4e535420
00000df7 00              
00000df8 03               5640		.byte	3
00000df9 5d               5641		.byte	93

                                   Fri Apr 10 08:32:10 2020           Page 102
                                   Fri Apr 10 08:32:09 2020   gh_0000bi81.si
00000dfa 18               5642		.byte	24
00000dfb 01               5643		.byte	1
00000dfc 2b               5644		.byte	43
00000dfd 46424c5f4d454d4d 5645		.strz	"FBL_MEMMAP_ERROR "
00000e05 41505f4552524f52
00000e0d 2000            
00000e0f 04               5646		.byte	4
00000e10 01               5647		.byte	1
00000e11 5f               5648		.byte	95
00000e12 46424c5f4c42545f 5649		.strz	"FBL_LBT_STOP_SEC_CONST "
00000e1a 53544f505f534543
00000e22 5f434f4e53542000
00000e2a 03               5650		.byte	3
00000e2b 60               5651		.byte	96
00000e2c 18               5652		.byte	24
00000e2d 01               5653		.byte	1
00000e2e 2b               5654		.byte	43
00000e2f 46424c5f4d454d4d 5655		.strz	"FBL_MEMMAP_ERROR "
00000e37 41505f4552524f52
00000e3f 2000            
00000e41 04               5656		.byte	4
00000e42 04               5657		.byte	4
00000e43 03               5658		.byte	3
00000e44 6e               5659		.byte	110
00000e45 19               5660		.byte	25
00000e46 01               5661		.byte	1
00000e47 54               5662		.byte	84
00000e48 464c4153485f5345 5663		.strz	"FLASH_SEGMENT_SIZE 8u"
00000e50 474d454e545f5349
00000e58 5a4520387500    
00000e5e 04               5664		.byte	4
00000e5f 03               5665		.byte	3
00000e60 6f               5666		.byte	111
00000e61 1a               5667		.byte	26
00000e62 01               5668		.byte	1
00000e63 2f               5669		.byte	47
00000e64 46424c445256464c 5670		.strz	"FBLDRVFLASH_XD1_MPC5700C55FMCHIS_VERSION 0x0106u"
00000e6c 4153485f5844315f
00000e74 4d50433537303043
00000e7c 3535464d43484953
00000e84 5f56455253494f4e
00000e8c 2030783031303675
00000e94 00              
00000e95 01               5671		.byte	1
00000e96 30               5672		.byte	48
00000e97 46424c445256464c 5673		.strz	"FBLDRVFLASH_XD1_MPC5700C55FMCHIS_RELEASE_VERSION 0x00u"
00000e9f 4153485f5844315f
00000ea7 4d50433537303043
00000eaf 3535464d43484953
00000eb7 5f52454c45415345
00000ebf 5f56455253494f4e
00000ec7 20307830307500  
00000ece 01               5674		.byte	1
00000ecf 3c               5675		.byte	60
00000ed0 464c4153485f4452 5676		.strz	"FLASH_DRIVER_XD1_VERSION_MAJOR ((FBLDRVFLASH_XD1_MPC5700C55FMCHIS_VERSION >> 8) & 0xffu)"
00000ed8 495645525f584431
00000ee0 5f56455253494f4e
00000ee8 5f4d414a4f522028
00000ef0 2846424c44525646
00000ef8 4c4153485f584431
00000f00 5f4d504335373030
00000f08 433535464d434849
00000f10 535f56455253494f
00000f18 4e203e3e20382920
00000f20 2620307866667529
00000f28 00              
00000f29 01               5677		.byte	1
00000f2a 3d               5678		.byte	61
00000f2b 464c4153485f4452 5679		.strz	"FLASH_DRIVER_XD1_VERSION_MINOR (FBLDRVFLASH_XD1_MPC5700C55FMCHIS_VERSION & 0xffu)"
00000f33 495645525f584431
00000f3b 5f56455253494f4e
00000f43 5f4d494e4f522028
00000f4b 46424c445256464c
00000f53 4153485f5844315f
00000f5b 4d50433537303043
00000f63 3535464d43484953
00000f6b 5f56455253494f4e
00000f73 2026203078666675
00000f7b 2900            
00000f7d 01               5680		.byte	1
00000f7e 3e               5681		.byte	62
00000f7f 464c4153485f4452 5682		.strz	"FLASH_DRIVER_XD1_VERSION_PATCH FBLDRVFLASH_XD1_MPC5700C55FMCHIS_RELEASE_VERSION"
00000f87 495645525f584431
00000f8f 5f56455253494f4e
00000f97 5f50415443482046
00000f9f 424c445256464c41
00000fa7 53485f5844315f4d
00000faf 5043353730304335
00000fb7 35464d434849535f
00000fbf 52454c454153455f
00000fc7 56455253494f4e00
00000fcf 01               5683		.byte	1
00000fd0 54               5684		.byte	84
00000fd1 464c4153485f5844 5685		.strz	"FLASH_XD1_SEGMENT_SIZE 8u"
00000fd9 315f5345474d454e
00000fe1 545f53495a452038
00000fe9 7500            
00000feb 01               5686		.byte	1
00000fec 5c               5687		.byte	92
00000fed 6b466c6173684663 5688		.strz	"kFlashFctErase_XD1 0x40u"
00000ff5 7445726173655f58
00000ffd 4431203078343075
00001005 00              
00001006 01               5689		.byte	1
00001007 5d               5690		.byte	93
00001008 6b466c6173684663 5691		.strz	"kFlashFctWrite_XD1 0x60u"
00001010 7457726974655f58
00001018 4431203078363075
00001020 00              
00001021 01               5692		.byte	1
00001022 60               5693		.byte	96
00001023 6b466c6173684f6b 5694		.strz	"kFlashOk_XD1 0x00u"
0000102b 5f58443120307830
00001033 307500          
00001036 01               5695		.byte	1
00001037 61               5696		.byte	97
00001038 6b466c6173684661 5697		.strz	"kFlashFailed_XD1 0x01u"
00001040 696c65645f584431
00001048 20307830317500  

                                   Fri Apr 10 08:32:10 2020           Page 103
                                   Fri Apr 10 08:32:09 2020   gh_0000bi81.si
0000104f 01               5698		.byte	1
00001050 64               5699		.byte	100
00001051 6b466c617368496e 5700		.strz	"kFlashInvalidAddress_XD1 0x04u"
00001059 76616c6964416464
00001061 726573735f584431
00001069 20307830347500  
00001070 01               5701		.byte	1
00001071 65               5702		.byte	101
00001072 6b466c617368496e 5703		.strz	"kFlashInvalidSize_XD1 0x05u"
0000107a 76616c696453697a
00001082 655f584431203078
0000108a 30357500        
0000108e 01               5704		.byte	1
0000108f 74               5705		.byte	116
00001090 6b466c6173684572 5706		.strz	"kFlashEraseInvalidAddr_XD1 (kFlashFctErase_XD1 | kFlashInvalidAddress_XD1)"
00001098 617365496e76616c
000010a0 6964416464725f58
000010a8 443120286b466c61
000010b0 7368466374457261
000010b8 73655f584431207c
000010c0 206b466c61736849
000010c8 6e76616c69644164
000010d0 64726573735f5844
000010d8 312900          
000010db 01               5707		.byte	1
000010dc 75               5708		.byte	117
000010dd 6b466c6173684572 5709		.strz	"kFlashEraseInvalidSize_XD1 (kFlashFctErase_XD1 | kFlashInvalidSize_XD1)"
000010e5 617365496e76616c
000010ed 696453697a655f58
000010f5 443120286b466c61
000010fd 7368466374457261
00001105 73655f584431207c
0000110d 206b466c61736849
00001115 6e76616c69645369
0000111d 7a655f5844312900
00001125 01               5710		.byte	1
00001126 7b               5711		.byte	123
00001127 6b466c6173685772 5712		.strz	"kFlashWriteInvalidAddr_XD1 (kFlashFctWrite_XD1 | kFlashInvalidAddress_XD1)"
0000112f 697465496e76616c
00001137 6964416464725f58
0000113f 443120286b466c61
00001147 7368466374577269
0000114f 74655f584431207c
00001157 206b466c61736849
0000115f 6e76616c69644164
00001167 64726573735f5844
0000116f 312900          
00001172 01               5713		.byte	1
00001173 7c               5714		.byte	124
00001174 6b466c6173685772 5715		.strz	"kFlashWriteInvalidSize_XD1 (kFlashFctWrite_XD1 | kFlashInvalidSize_XD1)"
0000117c 697465496e76616c
00001184 696453697a655f58
0000118c 443120286b466c61
00001194 7368466374577269
0000119c 74655f584431207c
000011a4 206b466c61736849
000011ac 6e76616c69645369
000011b4 7a655f5844312900
000011bc 01               5716		.byte	1
000011bd 8101             5717		.byte	129,1
000011bf 46424c5f464c4153 5718		.strz	"FBL_FLASH_MCR_OFFSET_XD1 0x00ul"
000011c7 485f4d43525f4f46
000011cf 465345545f584431
000011d7 2030783030756c00
000011df 01               5719		.byte	1
000011e0 8201             5720		.byte	130,1
000011e2 46424c5f464c4153 5721		.strz	"FBL_FLASH_MCRE_OFFSET_XD1 0x08ul"
000011ea 485f4d4352455f4f
000011f2 46465345545f5844
000011fa 312030783038756c
00001202 00              
00001203 01               5722		.byte	1
00001204 8f01             5723		.byte	143,1
00001206 46424c5f464c4153 5724		.strz	"FBL_FLASH_MCR_EER_XD1 0x00008000ul"
0000120e 485f4d43525f4545
00001216 525f584431203078
0000121e 3030303038303030
00001226 756c00          
00001229 04               5725		.byte	4
0000122a 03               5726		.byte	3
0000122b 75               5727		.byte	117
0000122c 1b               5728		.byte	27
0000122d 01               5729		.byte	1
0000122e 7c               5730		.byte	124
0000122f 494e495457415443 5731		.strz	"INITWATCHDOG_START_SEC_CODE_EXPORT "
00001237 48444f475f535441
0000123f 52545f5345435f43
00001247 4f44455f4558504f
0000124f 52542000        
00001253 03               5732		.byte	3
00001254 7d               5733		.byte	125
00001255 18               5734		.byte	24
00001256 01               5735		.byte	1
00001257 2b               5736		.byte	43
00001258 46424c5f4d454d4d 5737		.strz	"FBL_MEMMAP_ERROR "
00001260 41505f4552524f52
00001268 2000            
0000126a 04               5738		.byte	4
0000126b 01               5739		.byte	1
0000126c 8001             5740		.byte	128,1
0000126e 494e495457415443 5741		.strz	"INITWATCHDOG_STOP_SEC_CODE_EXPORT "
00001276 48444f475f53544f
0000127e 505f5345435f434f
00001286 44455f4558504f52
0000128e 542000          
00001291 03               5742		.byte	3
00001292 8101             5743		.byte	129,1
00001294 18               5744		.byte	24
00001295 01               5745		.byte	1
00001296 2b               5746		.byte	43
00001297 46424c5f4d454d4d 5747		.strz	"FBL_MEMMAP_ERROR "
0000129f 41505f4552524f52
000012a7 2000            
000012a9 04               5748		.byte	4
000012aa 01               5749		.byte	1
000012ab 8301             5750		.byte	131,1
000012ad 4c4f4f4b464f5257 5751		.strz	"LOOKFORWATCHDOG_START_SEC_CODE_EXPORT "
000012b5 41544348444f475f
000012bd 53544152545f5345
000012c5 435f434f44455f45
000012cd 58504f52542000  
000012d4 03               5752		.byte	3
000012d5 8401             5753		.byte	132,1

                                   Fri Apr 10 08:32:10 2020           Page 104
                                   Fri Apr 10 08:32:09 2020   gh_0000bi81.si
000012d7 18               5754		.byte	24
000012d8 01               5755		.byte	1
000012d9 2b               5756		.byte	43
000012da 46424c5f4d454d4d 5757		.strz	"FBL_MEMMAP_ERROR "
000012e2 41505f4552524f52
000012ea 2000            
000012ec 04               5758		.byte	4
000012ed 01               5759		.byte	1
000012ee 8801             5760		.byte	136,1
000012f0 4c4f4f4b464f5257 5761		.strz	"LOOKFORWATCHDOG_STOP_SEC_CODE_EXPORT "
000012f8 41544348444f475f
00001300 53544f505f534543
00001308 5f434f44455f4558
00001310 504f52542000    
00001316 03               5762		.byte	3
00001317 8901             5763		.byte	137,1
00001319 18               5764		.byte	24
0000131a 01               5765		.byte	1
0000131b 2b               5766		.byte	43
0000131c 46424c5f4d454d4d 5767		.strz	"FBL_MEMMAP_ERROR "
00001324 41505f4552524f52
0000132c 2000            
0000132e 04               5768		.byte	4
0000132f 01               5769		.byte	1
00001330 8b01             5770		.byte	139,1
00001332 4c4f4f4b464f5257 5771		.strz	"LOOKFORWATCHDOG_START_SEC_CODE_EXPORT "
0000133a 41544348444f475f
00001342 53544152545f5345
0000134a 435f434f44455f45
00001352 58504f52542000  
00001359 03               5772		.byte	3
0000135a 8c01             5773		.byte	140,1
0000135c 18               5774		.byte	24
0000135d 01               5775		.byte	1
0000135e 2b               5776		.byte	43
0000135f 46424c5f4d454d4d 5777		.strz	"FBL_MEMMAP_ERROR "
00001367 41505f4552524f52
0000136f 2000            
00001371 04               5778		.byte	4
00001372 01               5779		.byte	1
00001373 9001             5780		.byte	144,1
00001375 4c4f4f4b464f5257 5781		.strz	"LOOKFORWATCHDOG_STOP_SEC_CODE_EXPORT "
0000137d 41544348444f475f
00001385 53544f505f534543
0000138d 5f434f44455f4558
00001395 504f52542000    
0000139b 03               5782		.byte	3
0000139c 9101             5783		.byte	145,1
0000139e 18               5784		.byte	24
0000139f 01               5785		.byte	1
000013a0 2b               5786		.byte	43
000013a1 46424c5f4d454d4d 5787		.strz	"FBL_MEMMAP_ERROR "
000013a9 41505f4552524f52
000013b1 2000            
000013b3 04               5788		.byte	4
000013b4 04               5789		.byte	4
000013b5 03               5790		.byte	3
000013b6 76               5791		.byte	118
000013b7 1c               5792		.byte	28
000013b8 01               5793		.byte	1
000013b9 4d               5794		.byte	77
000013ba 494f5f455f4f4b20 5795		.strz	"IO_E_OK ((vuint8)0x00u)"
000013c2 28287675696e7438
000013ca 2930783030752900
000013d2 01               5796		.byte	1
000013d3 4e               5797		.byte	78
000013d4 494f5f455f4e4f54 5798		.strz	"IO_E_NOT_OK ((vuint8)0x01u)"
000013dc 5f4f4b2028287675
000013e4 696e743829307830
000013ec 31752900        
000013f0 04               5799		.byte	4
000013f1 03               5800		.byte	3
000013f2 7e               5801		.byte	126
000013f3 1d               5802		.byte	29
000013f4 01               5803		.byte	1
000013f5 ca01             5804		.byte	202,1
000013f7 46424c5f4d41585f 5805		.strz	"FBL_MAX_SEGMENT_SIZE_MIO FBL_MEMDRV_SEGMENT_SIZE"
000013ff 5345474d454e545f
00001407 53495a455f4d494f
0000140f 2046424c5f4d454d
00001417 4452565f5345474d
0000141f 454e545f53495a45
00001427 00              
00001428 01               5806		.byte	1
00001429 e601             5807		.byte	230,1
0000142b 46424c5f4d41585f 5808		.strz	"FBL_MAX_SEGMENT_SIZE FBL_MAX_SEGMENT_SIZE_MIO"
00001433 5345474d454e545f
0000143b 53495a452046424c
00001443 5f4d41585f534547
0000144b 4d454e545f53495a
00001453 455f4d494f00    
00001459 01               5809		.byte	1

                                   Fri Apr 10 08:32:10 2020           Page 105
                                   Fri Apr 10 08:32:09 2020   gh_0000bi81.si
0000145a 8702             5810		.byte	135,2
0000145c 46424c5f4d494f5f 5811		.strz	"FBL_MIO_DEFAULT_FCT_PTR "
00001464 44454641554c545f
0000146c 4643545f50545220
00001474 00              
00001475 01               5812		.byte	1
00001476 a002             5813		.byte	160,2
00001478 46424c4d494f5f53 5814		.strz	"FBLMIO_START_SEC_CODE "
00001480 544152545f534543
00001488 5f434f44452000  
0000148f 03               5815		.byte	3
00001490 a102             5816		.byte	161,2
00001492 18               5817		.byte	24
00001493 01               5818		.byte	1
00001494 2b               5819		.byte	43
00001495 46424c5f4d454d4d 5820		.strz	"FBL_MEMMAP_ERROR "
0000149d 41505f4552524f52
000014a5 2000            
000014a7 04               5821		.byte	4
000014a8 01               5822		.byte	1
000014a9 b102             5823		.byte	177,2
000014ab 46424c4d494f5f53 5824		.strz	"FBLMIO_STOP_SEC_CODE "
000014b3 544f505f5345435f
000014bb 434f44452000    
000014c1 03               5825		.byte	3
000014c2 b202             5826		.byte	178,2
000014c4 18               5827		.byte	24
000014c5 01               5828		.byte	1
000014c6 2b               5829		.byte	43
000014c7 46424c5f4d454d4d 5830		.strz	"FBL_MEMMAP_ERROR "
000014cf 41505f4552524f52
000014d7 2000            
000014d9 04               5831		.byte	4
000014da 04               5832		.byte	4
000014db 03               5833		.byte	3
000014dc 7f               5834		.byte	127
000014dd 1e               5835		.byte	30
000014de 01               5836		.byte	1
000014df 66               5837		.byte	102
000014e0 46424c464c494f5f 5838		.strz	"FBLFLIO_FLASHCODE_START_SEC_VAR "
000014e8 464c415348434f44
000014f0 455f53544152545f
000014f8 5345435f56415220
00001500 00              
00001501 03               5839		.byte	3
00001502 67               5840		.byte	103
00001503 18               5841		.byte	24
00001504 01               5842		.byte	1
00001505 2b               5843		.byte	43
00001506 46424c5f4d454d4d 5844		.strz	"FBL_MEMMAP_ERROR "
0000150e 41505f4552524f52
00001516 2000            
00001518 04               5845		.byte	4
00001519 01               5846		.byte	1
0000151a 69               5847		.byte	105
0000151b 46424c464c494f5f 5848		.strz	"FBLFLIO_FLASHCODE_STOP_SEC_VAR "
00001523 464c415348434f44
0000152b 455f53544f505f53
00001533 45435f5641522000
0000153b 03               5849		.byte	3
0000153c 6a               5850		.byte	106
0000153d 18               5851		.byte	24
0000153e 01               5852		.byte	1
0000153f 2b               5853		.byte	43
00001540 46424c5f4d454d4d 5854		.strz	"FBL_MEMMAP_ERROR "
00001548 41505f4552524f52
00001550 2000            
00001552 04               5855		.byte	4
00001553 04               5856		.byte	4
00001554 03               5857		.byte	3
00001555 8001             5858		.byte	128,1
00001557 1f               5859		.byte	31
00001558 01               5860		.byte	1
00001559 56               5861		.byte	86
0000155a 46424c5752415050 5862		.strz	"FBLWRAPPERFLASH_XD1_MPC5700C55FMCHIS_VERSION 0x0121u"
00001562 4552464c4153485f
0000156a 5844315f4d504335
00001572 373030433535464d
0000157a 434849535f564552
00001582 53494f4e20307830
0000158a 3132317500      
0000158f 01               5863		.byte	1
00001590 57               5864		.byte	87
00001591 46424c5752415050 5865		.strz	"FBLWRAPPERFLASH_XD1_MPC5700C55FMCHIS_RELEASE_VERSION 0x02u"
00001599 4552464c4153485f
000015a1 5844315f4d504335
000015a9 373030433535464d
000015b1 434849535f52454c
000015b9 454153455f564552
000015c1 53494f4e20307830
000015c9 327500          

                                   Fri Apr 10 08:32:10 2020           Page 106
                                   Fri Apr 10 08:32:09 2020   gh_0000bi81.si
000015cc 04               5866		.byte	4
000015cd 03               5867		.byte	3
000015ce 8101             5868		.byte	129,1
000015d0 20               5869		.byte	32
000015d1 03               5870		.byte	3
000015d2 2a               5871		.byte	42
000015d3 02               5872		.byte	2
000015d4 04               5873		.byte	4
000015d5 03               5874		.byte	3
000015d6 2b               5875		.byte	43
000015d7 21               5876		.byte	33
000015d8 01               5877		.byte	1
000015d9 49               5878		.byte	73
000015da 45455044554d4d59 5879		.strz	"EEPDUMMY_FULL_START_SEC_CODE "
000015e2 5f46554c4c5f5354
000015ea 4152545f5345435f
000015f2 434f44452000    
000015f8 03               5880		.byte	3
000015f9 4a               5881		.byte	74
000015fa 18               5882		.byte	24
000015fb 01               5883		.byte	1
000015fc 2b               5884		.byte	43
000015fd 46424c5f4d454d4d 5885		.strz	"FBL_MEMMAP_ERROR "
00001605 41505f4552524f52
0000160d 2000            
0000160f 04               5886		.byte	4
00001610 01               5887		.byte	1
00001611 54               5888		.byte	84
00001612 45455044554d4d59 5889		.strz	"EEPDUMMY_FULL_STOP_SEC_CODE "
0000161a 5f46554c4c5f5354
00001622 4f505f5345435f43
0000162a 4f44452000      
0000162f 03               5890		.byte	3
00001630 55               5891		.byte	85
00001631 18               5892		.byte	24
00001632 01               5893		.byte	1
00001633 2b               5894		.byte	43
00001634 46424c5f4d454d4d 5895		.strz	"FBL_MEMMAP_ERROR "
0000163c 41505f4552524f52
00001644 2000            
00001646 04               5896		.byte	4
00001647 04               5897		.byte	4
00001648 04               5898		.byte	4
00001649 03               5899		.byte	3
0000164a 8401             5900		.byte	132,1
0000164c 22               5901		.byte	34
0000164d 01               5902		.byte	1
0000164e 55               5903		.byte	85
0000164f 46424c5f4150504c 5904		.strz	"FBL_APPLVECT_START_SEC_CONST "
00001657 564543545f535441
0000165f 52545f5345435f43
00001667 4f4e53542000    
0000166d 03               5905		.byte	3
0000166e 56               5906		.byte	86
0000166f 18               5907		.byte	24
00001670 01               5908		.byte	1
00001671 2b               5909		.byte	43
00001672 46424c5f4d454d4d 5910		.strz	"FBL_MEMMAP_ERROR "
0000167a 41505f4552524f52
00001682 2000            
00001684 04               5911		.byte	4
00001685 01               5912		.byte	1
00001686 5a               5913		.byte	90
00001687 46424c5f4150504c 5914		.strz	"FBL_APPLVECT_STOP_SEC_CONST "
0000168f 564543545f53544f
00001697 505f5345435f434f
0000169f 4e53542000      
000016a4 03               5915		.byte	3
000016a5 5b               5916		.byte	91
000016a6 18               5917		.byte	24
000016a7 01               5918		.byte	1
000016a8 2b               5919		.byte	43
000016a9 46424c5f4d454d4d 5920		.strz	"FBL_MEMMAP_ERROR "
000016b1 41505f4552524f52
000016b9 2000            
000016bb 04               5921		.byte	4

                                   Fri Apr 10 08:32:10 2020           Page 107
                                   Fri Apr 10 08:32:09 2020   gh_0000bi81.si
000016bc 04               5922		.byte	4
000016bd 03               5923		.byte	3
000016be 8801             5924		.byte	136,1
000016c0 23               5925		.byte	35
000016c1 03               5926		.byte	3
000016c2 3c               5927		.byte	60
000016c3 24               5928		.byte	36
000016c4 01               5929		.byte	1
000016c5 49               5930		.byte	73
000016c6 46424c5f43414e5f 5931		.strz	"FBL_CAN_NUMBER_OF_RX_ID 2u"
000016ce 4e554d4245525f4f
000016d6 465f52585f494420
000016de 327500          
000016e1 01               5932		.byte	1
000016e2 4a               5933		.byte	74
000016e3 46424c5f43414e5f 5934		.strz	"FBL_CAN_NUMBER_OF_RANGES 0u"
000016eb 4e554d4245525f4f
000016f3 465f52414e474553
000016fb 20307500        
000016ff 01               5935		.byte	1
00001700 4b               5936		.byte	75
00001701 46424c5f4e554d42 5937		.strz	"FBL_NUMBER_OF_RX_ID (FBL_CAN_NUMBER_OF_RX_ID + FBL_CAN_NUMBER_OF_RANGES)"
00001709 45525f4f465f5258
00001711 5f4944202846424c
00001719 5f43414e5f4e554d
00001721 4245525f4f465f52
00001729 585f4944202b2046
00001731 424c5f43414e5f4e
00001739 554d4245525f4f46
00001741 5f52414e47455329
00001749 00              
0000174a 01               5938		.byte	1
0000174b 54               5939		.byte	84
0000174c 46424c5f4e554d42 5940		.strz	"FBL_NUMBER_OF_TX_ID 1u"
00001754 45525f4f465f5458
0000175c 5f494420317500  
00001763 01               5941		.byte	1
00001764 57               5942		.byte	87
00001765 46424c5f43575f43 5943		.strz	"FBL_CW_CFG_START_SEC_CONST "
0000176d 46475f5354415254
00001775 5f5345435f434f4e
0000177d 53542000        
00001781 03               5944		.byte	3
00001782 58               5945		.byte	88
00001783 18               5946		.byte	24
00001784 01               5947		.byte	1
00001785 2b               5948		.byte	43
00001786 46424c5f4d454d4d 5949		.strz	"FBL_MEMMAP_ERROR "
0000178e 41505f4552524f52
00001796 2000            
00001798 04               5950		.byte	4
00001799 01               5951		.byte	1
0000179a 67               5952		.byte	103
0000179b 46424c5f43575f43 5953		.strz	"FBL_CW_CFG_STOP_SEC_CONST "
000017a3 46475f53544f505f
000017ab 5345435f434f4e53
000017b3 542000          
000017b6 03               5954		.byte	3
000017b7 68               5955		.byte	104
000017b8 18               5956		.byte	24
000017b9 01               5957		.byte	1
000017ba 2b               5958		.byte	43
000017bb 46424c5f4d454d4d 5959		.strz	"FBL_MEMMAP_ERROR "
000017c3 41505f4552524f52
000017cb 2000            
000017cd 04               5960		.byte	4
000017ce 01               5961		.byte	1
000017cf 6d               5962		.byte	109
000017d0 46424c5f43575f45 5963		.strz	"FBL_CW_ENABLE_PHYSICAL_REQUEST_HANDLER "
000017d8 4e41424c455f5048
000017e0 59534943414c5f52
000017e8 4551554553545f48
000017f0 414e444c45522000
000017f8 01               5964		.byte	1
000017f9 6e               5965		.byte	110
000017fa 46424c5f43575f45 5966		.strz	"FBL_CW_ENABLE_FUNCTIONAL_REQUEST_HANDLER "
00001802 4e41424c455f4655
0000180a 4e4354494f4e414c
00001812 5f52455155455354
0000181a 5f48414e444c4552
00001822 2000            
00001824 04               5967		.byte	4
00001825 03               5968		.byte	3
00001826 4d               5969		.byte	77
00001827 25               5970		.byte	37
00001828 03               5971		.byte	3
00001829 54               5972		.byte	84
0000182a 26               5973		.byte	38
0000182b 01               5974		.byte	1
0000182c 55               5975		.byte	85
0000182d 46424c5f494f5328 5976		.strz	"FBL_IOS(type,base,offset) (*((volatile type *)((base) + (offset))))"
00001835 747970652c626173
0000183d 652c6f6666736574
00001845 2920282a2828766f
0000184d 6c6174696c652074
00001855 797065202a292828
0000185d 6261736529202b20
00001865 286f666673657429
0000186d 29292900        
00001871 01               5977		.byte	1

                                   Fri Apr 10 08:32:10 2020           Page 108
                                   Fri Apr 10 08:32:09 2020   gh_0000bi81.si
00001872 d901             5978		.byte	217,1
00001874 46424c5f45444d41 5979		.strz	"FBL_EDMA_TCD_SADDR(x) FBL_IOS(vuint32, FBL_EDMA_BASE, 0x1000ul + ((x) * 0x20ul))"
0000187c 5f5443445f534144
00001884 4452287829204642
0000188c 4c5f494f53287675
00001894 696e7433322c2046
0000189c 424c5f45444d415f
000018a4 424153452c203078
000018ac 31303030756c202b
000018b4 2028287829202a20
000018bc 30783230756c2929
000018c4 00              
000018c5 01               5980		.byte	1
000018c6 da01             5981		.byte	218,1
000018c8 46424c5f45444d41 5982		.strz	"FBL_EDMA_TCD_ATTR(x) FBL_IOS(vuint16, FBL_EDMA_BASE, 0x1004ul + ((x) * 0x20ul))"
000018d0 5f5443445f415454
000018d8 522878292046424c
000018e0 5f494f5328767569
000018e8 6e7431362c204642
000018f0 4c5f45444d415f42
000018f8 4153452c20307831
00001900 303034756c202b20
00001908 28287829202a2030
00001910 783230756c292900
00001918 01               5983		.byte	1
00001919 db01             5984		.byte	219,1
0000191b 46424c5f45444d41 5985		.strz	"FBL_EDMA_TCD_SOFF(x) FBL_IOS(vsint16, FBL_EDMA_BASE, 0x1006ul + ((x) * 0x20ul))"
00001923 5f5443445f534f46
0000192b 462878292046424c
00001933 5f494f5328767369
0000193b 6e7431362c204642
00001943 4c5f45444d415f42
0000194b 4153452c20307831
00001953 303036756c202b20
0000195b 28287829202a2030
00001963 783230756c292900
0000196b 01               5986		.byte	1
0000196c dc01             5987		.byte	220,1
0000196e 46424c5f45444d41 5988		.strz	"FBL_EDMA_TCD_NBYTES(x) FBL_IOS(vuint32, FBL_EDMA_BASE, 0x1008ul + ((x) * 0x20ul))"
00001976 5f5443445f4e4259
0000197e 5445532878292046
00001986 424c5f494f532876
0000198e 75696e7433322c20
00001996 46424c5f45444d41
0000199e 5f424153452c2030
000019a6 7831303038756c20
000019ae 2b2028287829202a
000019b6 2030783230756c29
000019be 2900            
000019c0 01               5989		.byte	1
000019c1 dd01             5990		.byte	221,1
000019c3 46424c5f45444d41 5991		.strz	"FBL_EDMA_TCD_SLAST(x) FBL_IOS(vuint32, FBL_EDMA_BASE, 0x100Cul + ((x) * 0x20ul))"
000019cb 5f5443445f534c41
000019d3 5354287829204642
000019db 4c5f494f53287675
000019e3 696e7433322c2046
000019eb 424c5f45444d415f
000019f3 424153452c203078
000019fb 31303043756c202b
00001a03 2028287829202a20
00001a0b 30783230756c2929
00001a13 00              
00001a14 01               5992		.byte	1
00001a15 de01             5993		.byte	222,1
00001a17 46424c5f45444d41 5994		.strz	"FBL_EDMA_TCD_DADDR(x) FBL_IOS(vuint32, FBL_EDMA_BASE, 0x1010ul + ((x) * 0x20ul))"
00001a1f 5f5443445f444144
00001a27 4452287829204642
00001a2f 4c5f494f53287675
00001a37 696e7433322c2046
00001a3f 424c5f45444d415f
00001a47 424153452c203078
00001a4f 31303130756c202b
00001a57 2028287829202a20
00001a5f 30783230756c2929
00001a67 00              
00001a68 01               5995		.byte	1
00001a69 df01             5996		.byte	223,1
00001a6b 46424c5f45444d41 5997		.strz	"FBL_EDMA_TCD_CITER(x) FBL_IOS(vuint16, FBL_EDMA_BASE, 0x1014ul + ((x) * 0x20ul))"
00001a73 5f5443445f434954
00001a7b 4552287829204642
00001a83 4c5f494f53287675
00001a8b 696e7431362c2046
00001a93 424c5f45444d415f
00001a9b 424153452c203078
00001aa3 31303134756c202b
00001aab 2028287829202a20
00001ab3 30783230756c2929
00001abb 00              
00001abc 01               5998		.byte	1
00001abd e001             5999		.byte	224,1
00001abf 46424c5f45444d41 6000		.strz	"FBL_EDMA_TCD_DOFF(x) FBL_IOS(vsint16, FBL_EDMA_BASE, 0x1016ul + ((x) * 0x20ul))"
00001ac7 5f5443445f444f46
00001acf 462878292046424c
00001ad7 5f494f5328767369
00001adf 6e7431362c204642
00001ae7 4c5f45444d415f42
00001aef 4153452c20307831
00001af7 303136756c202b20
00001aff 28287829202a2030
00001b07 783230756c292900
00001b0f 01               6001		.byte	1
00001b10 e101             6002		.byte	225,1
00001b12 46424c5f45444d41 6003		.strz	"FBL_EDMA_TCD_DLASTSGA(x) FBL_IOS(vsint32, FBL_EDMA_BASE, 0x1018ul + ((x) * 0x20ul))"
00001b1a 5f5443445f444c41
00001b22 5354534741287829
00001b2a 2046424c5f494f53
00001b32 287673696e743332
00001b3a 2c2046424c5f4544
00001b42 4d415f424153452c
00001b4a 2030783130313875
00001b52 6c202b2028287829
00001b5a 202a203078323075
00001b62 6c292900        
00001b66 01               6004		.byte	1
00001b67 e201             6005		.byte	226,1
00001b69 46424c5f45444d41 6006		.strz	"FBL_EDMA_TCD_BITER(x) FBL_IOS(vuint16, FBL_EDMA_BASE, 0x101Cul + ((x) * 0x20ul))"
00001b71 5f5443445f424954
00001b79 4552287829204642
00001b81 4c5f494f53287675
00001b89 696e7431362c2046
00001b91 424c5f45444d415f
00001b99 424153452c203078
00001ba1 31303143756c202b
00001ba9 2028287829202a20
00001bb1 30783230756c2929
00001bb9 00              
00001bba 01               6007		.byte	1
00001bbb e301             6008		.byte	227,1
00001bbd 46424c5f45444d41 6009		.strz	"FBL_EDMA_TCD_CSR(x) FBL_IOS(vuint16, FBL_EDMA_BASE, 0x101Eul + ((x) * 0x20ul))"
00001bc5 5f5443445f435352
00001bcd 2878292046424c5f
00001bd5 494f53287675696e
00001bdd 7431362c2046424c
00001be5 5f45444d415f4241
00001bed 53452c2030783130
00001bf5 3145756c202b2028
00001bfd 287829202a203078
00001c05 3230756c292900  
00001c0c 04               6010		.byte	4
00001c0d 01               6011		.byte	1
00001c0e 74               6012		.byte	116
00001c0f 4d554c5449504c45 6013		.strz	"MULTIPLE_RECEIVE_BUFFER "
00001c17 5f52454345495645
00001c1f 5f42554646455220
00001c27 00              
00001c28 01               6014		.byte	1
00001c29 9902             6015		.byte	153,2
00001c2b 6b46626c43616e4d 6016		.strz	"kFblCanMaxMB 16"
00001c33 61784d4220313600
00001c3b 01               6017		.byte	1
00001c3c cd03             6018		.byte	205,3
00001c3e 46424c48575f5241 6019		.strz	"FBLHW_RAMCODE_START_SEC_CODE "
00001c46 4d434f44455f5354
00001c4e 4152545f5345435f
00001c56 434f44452000    
00001c5c 03               6020		.byte	3
00001c5d ce03             6021		.byte	206,3
00001c5f 18               6022		.byte	24
00001c60 01               6023		.byte	1
00001c61 2b               6024		.byte	43
00001c62 46424c5f4d454d4d 6025		.strz	"FBL_MEMMAP_ERROR "
00001c6a 41505f4552524f52
00001c72 2000            
00001c74 04               6026		.byte	4
00001c75 01               6027		.byte	1
00001c76 d003             6028		.byte	208,3
00001c78 46424c48575f5241 6029		.strz	"FBLHW_RAMCODE_STOP_SEC_CODE "
00001c80 4d434f44455f5354
00001c88 4f505f5345435f43
00001c90 4f44452000      
00001c95 03               6030		.byte	3
00001c96 d103             6031		.byte	209,3
00001c98 18               6032		.byte	24
00001c99 01               6033		.byte	1

                                   Fri Apr 10 08:32:10 2020           Page 109
                                   Fri Apr 10 08:32:09 2020   gh_0000bi81.si
00001c9a 2b               6034		.byte	43
00001c9b 46424c5f4d454d4d 6035		.strz	"FBL_MEMMAP_ERROR "
00001ca3 41505f4552524f52
00001cab 2000            
00001cad 04               6036		.byte	4
00001cae 01               6037		.byte	1
00001caf d703             6038		.byte	215,3
00001cb1 46424c48575f5354 6039		.strz	"FBLHW_START_SEC_CODE "
00001cb9 4152545f5345435f
00001cc1 434f44452000    
00001cc7 03               6040		.byte	3
00001cc8 d803             6041		.byte	216,3
00001cca 18               6042		.byte	24
00001ccb 01               6043		.byte	1
00001ccc 2b               6044		.byte	43
00001ccd 46424c5f4d454d4d 6045		.strz	"FBL_MEMMAP_ERROR "
00001cd5 41505f4552524f52
00001cdd 2000            
00001cdf 04               6046		.byte	4
00001ce0 01               6047		.byte	1
00001ce1 da03             6048		.byte	218,3
00001ce3 46424c48575f5354 6049		.strz	"FBLHW_STOP_SEC_CODE "
00001ceb 4f505f5345435f43
00001cf3 4f44452000      
00001cf8 03               6050		.byte	3
00001cf9 db03             6051		.byte	219,3
00001cfb 18               6052		.byte	24
00001cfc 01               6053		.byte	1
00001cfd 2b               6054		.byte	43
00001cfe 46424c5f4d454d4d 6055		.strz	"FBL_MEMMAP_ERROR "
00001d06 41505f4552524f52
00001d0e 2000            
00001d10 04               6056		.byte	4
00001d11 01               6057		.byte	1
00001d12 df03             6058		.byte	223,3
00001d14 46424c48575f4642 6059		.strz	"FBLHW_FBLCANTRANSMITTED_START_SEC_CODE "
00001d1c 4c43414e5452414e
00001d24 534d49545445445f
00001d2c 53544152545f5345
00001d34 435f434f44452000
00001d3c 03               6060		.byte	3
00001d3d e003             6061		.byte	224,3
00001d3f 18               6062		.byte	24
00001d40 01               6063		.byte	1
00001d41 2b               6064		.byte	43
00001d42 46424c5f4d454d4d 6065		.strz	"FBL_MEMMAP_ERROR "
00001d4a 41505f4552524f52
00001d52 2000            
00001d54 04               6066		.byte	4
00001d55 01               6067		.byte	1
00001d56 e203             6068		.byte	226,3
00001d58 46424c48575f4642 6069		.strz	"FBLHW_FBLCANTRANSMITTED_STOP_SEC_CODE "
00001d60 4c43414e5452414e
00001d68 534d49545445445f
00001d70 53544f505f534543
00001d78 5f434f44452000  
00001d7f 03               6070		.byte	3
00001d80 e303             6071		.byte	227,3
00001d82 18               6072		.byte	24
00001d83 01               6073		.byte	1
00001d84 2b               6074		.byte	43
00001d85 46424c5f4d454d4d 6075		.strz	"FBL_MEMMAP_ERROR "
00001d8d 41505f4552524f52
00001d95 2000            
00001d97 04               6076		.byte	4
00001d98 01               6077		.byte	1
00001d99 e503             6078		.byte	229,3
00001d9b 46424c48575f5354 6079		.strz	"FBLHW_START_SEC_CODE "
00001da3 4152545f5345435f
00001dab 434f44452000    
00001db1 03               6080		.byte	3
00001db2 e603             6081		.byte	230,3
00001db4 18               6082		.byte	24
00001db5 01               6083		.byte	1
00001db6 2b               6084		.byte	43
00001db7 46424c5f4d454d4d 6085		.strz	"FBL_MEMMAP_ERROR "
00001dbf 41505f4552524f52
00001dc7 2000            
00001dc9 04               6086		.byte	4
00001dca 01               6087		.byte	1
00001dcb e803             6088		.byte	232,3
00001dcd 46424c48575f5354 6089		.strz	"FBLHW_STOP_SEC_CODE "
00001dd5 4f505f5345435f43
00001ddd 4f44452000      

                                   Fri Apr 10 08:32:10 2020           Page 110
                                   Fri Apr 10 08:32:09 2020   gh_0000bi81.si
00001de2 03               6090		.byte	3
00001de3 e903             6091		.byte	233,3
00001de5 18               6092		.byte	24
00001de6 01               6093		.byte	1
00001de7 2b               6094		.byte	43
00001de8 46424c5f4d454d4d 6095		.strz	"FBL_MEMMAP_ERROR "
00001df0 41505f4552524f52
00001df8 2000            
00001dfa 04               6096		.byte	4
00001dfb 01               6097		.byte	1
00001dfc f903             6098		.byte	249,3
00001dfe 4d454d4350595f53 6099		.strz	"MEMCPY_START_SEC_CODE "
00001e06 544152545f534543
00001e0e 5f434f44452000  
00001e15 03               6100		.byte	3
00001e16 fa03             6101		.byte	250,3
00001e18 18               6102		.byte	24
00001e19 01               6103		.byte	1
00001e1a 2b               6104		.byte	43
00001e1b 46424c5f4d454d4d 6105		.strz	"FBL_MEMMAP_ERROR "
00001e23 41505f4552524f52
00001e2b 2000            
00001e2d 04               6106		.byte	4
00001e2e 01               6107		.byte	1
00001e2f fd03             6108		.byte	253,3
00001e31 4d454d4350595f53 6109		.strz	"MEMCPY_STOP_SEC_CODE "
00001e39 544f505f5345435f
00001e41 434f44452000    
00001e47 03               6110		.byte	3
00001e48 fe03             6111		.byte	254,3
00001e4a 18               6112		.byte	24
00001e4b 01               6113		.byte	1
00001e4c 2b               6114		.byte	43
00001e4d 46424c5f4d454d4d 6115		.strz	"FBL_MEMMAP_ERROR "
00001e55 41505f4552524f52
00001e5d 2000            
00001e5f 04               6116		.byte	4
00001e60 04               6117		.byte	4
00001e61 03               6118		.byte	3
00001e62 4e               6119		.byte	78
00001e63 27               6120		.byte	39
00001e64 01               6121		.byte	1
00001e65 3b               6122		.byte	59
00001e66 46424c5f54505f45 6123		.strz	"FBL_TP_ENABLE_ISO15765_2_2 "
00001e6e 4e41424c455f4953
00001e76 4f31353736355f32
00001e7e 5f322000        
00001e82 01               6124		.byte	1
00001e83 41               6125		.byte	65
00001e84 46424c5f54505f45 6126		.strz	"FBL_TP_ENABLE_CONFIRMATION_INTERRUPT "
00001e8c 4e41424c455f434f
00001e94 4e4649524d415449
00001e9c 4f4e5f494e544552
00001ea4 525550542000    
00001eaa 04               6127		.byte	4
00001eab 03               6128		.byte	3
00001eac 4f               6129		.byte	79
00001ead 28               6130		.byte	40
00001eae 01               6131		.byte	1
00001eaf b101             6132		.byte	177,1
00001eb1 46424c54505f5241 6133		.strz	"FBLTP_RAMCODE_START_SEC_CODE "
00001eb9 4d434f44455f5354
00001ec1 4152545f5345435f
00001ec9 434f44452000    
00001ecf 03               6134		.byte	3
00001ed0 b201             6135		.byte	178,1
00001ed2 18               6136		.byte	24
00001ed3 01               6137		.byte	1
00001ed4 2b               6138		.byte	43
00001ed5 46424c5f4d454d4d 6139		.strz	"FBL_MEMMAP_ERROR "
00001edd 41505f4552524f52
00001ee5 2000            
00001ee7 04               6140		.byte	4
00001ee8 01               6141		.byte	1
00001ee9 c301             6142		.byte	195,1
00001eeb 46424c54505f5241 6143		.strz	"FBLTP_RAMCODE_STOP_SEC_CODE "
00001ef3 4d434f44455f5354
00001efb 4f505f5345435f43
00001f03 4f44452000      
00001f08 03               6144		.byte	3
00001f09 c401             6145		.byte	196,1

                                   Fri Apr 10 08:32:10 2020           Page 111
                                   Fri Apr 10 08:32:09 2020   gh_0000bi81.si
00001f0b 18               6146		.byte	24
00001f0c 01               6147		.byte	1
00001f0d 2b               6148		.byte	43
00001f0e 46424c5f4d454d4d 6149		.strz	"FBL_MEMMAP_ERROR "
00001f16 41505f4552524f52
00001f1e 2000            
00001f20 04               6150		.byte	4
00001f21 04               6151		.byte	4
00001f22 01               6152		.byte	1
00001f23 c601             6153		.byte	198,1
00001f25 46424c5f43575f46 6154		.strz	"FBL_CW_FULL_START_SEC_CODE "
00001f2d 554c4c5f53544152
00001f35 545f5345435f434f
00001f3d 44452000        
00001f41 03               6155		.byte	3
00001f42 c701             6156		.byte	199,1
00001f44 18               6157		.byte	24
00001f45 01               6158		.byte	1
00001f46 2b               6159		.byte	43
00001f47 46424c5f4d454d4d 6160		.strz	"FBL_MEMMAP_ERROR "
00001f4f 41505f4552524f52
00001f57 2000            
00001f59 04               6161		.byte	4
00001f5a 01               6162		.byte	1
00001f5b cd01             6163		.byte	205,1
00001f5d 46424c5f43575f54 6164		.strz	"FBL_CW_TASK_START_SEC_CODE "
00001f65 41534b5f53544152
00001f6d 545f5345435f434f
00001f75 44452000        
00001f79 03               6165		.byte	3
00001f7a ce01             6166		.byte	206,1
00001f7c 18               6167		.byte	24
00001f7d 01               6168		.byte	1
00001f7e 2b               6169		.byte	43
00001f7f 46424c5f4d454d4d 6170		.strz	"FBL_MEMMAP_ERROR "
00001f87 41505f4552524f52
00001f8f 2000            
00001f91 04               6171		.byte	4
00001f92 01               6172		.byte	1
00001f93 d101             6173		.byte	209,1
00001f95 46424c5f43575f54 6174		.strz	"FBL_CW_TASK_STOP_SEC_CODE "
00001f9d 41534b5f53544f50
00001fa5 5f5345435f434f44
00001fad 452000          
00001fb0 03               6175		.byte	3
00001fb1 d201             6176		.byte	210,1
00001fb3 18               6177		.byte	24
00001fb4 01               6178		.byte	1
00001fb5 2b               6179		.byte	43
00001fb6 46424c5f4d454d4d 6180		.strz	"FBL_MEMMAP_ERROR "
00001fbe 41505f4552524f52
00001fc6 2000            
00001fc8 04               6181		.byte	4
00001fc9 01               6182		.byte	1
00001fca fa01             6183		.byte	250,1
00001fcc 46424c5f43575f46 6184		.strz	"FBL_CW_FULL_STOP_SEC_CODE "
00001fd4 554c4c5f53544f50
00001fdc 5f5345435f434f44
00001fe4 452000          
00001fe7 03               6185		.byte	3
00001fe8 fb01             6186		.byte	251,1
00001fea 18               6187		.byte	24
00001feb 01               6188		.byte	1
00001fec 2b               6189		.byte	43
00001fed 46424c5f4d454d4d 6190		.strz	"FBL_MEMMAP_ERROR "
00001ff5 41505f4552524f52
00001ffd 2000            
00001fff 04               6191		.byte	4
00002000 04               6192		.byte	4
00002001 03               6193		.byte	3
00002002 8e01             6194		.byte	142,1
00002004 29               6195		.byte	41
00002005 03               6196		.byte	3
00002006 39               6197		.byte	57
00002007 2a               6198		.byte	42
00002008 03               6199		.byte	3
00002009 3b               6200		.byte	59
0000200a 2b               6201		.byte	43

                                   Fri Apr 10 08:32:10 2020           Page 112
                                   Fri Apr 10 08:32:09 2020   gh_0000bi81.si
0000200b 01               6202		.byte	1
0000200c 31               6203		.byte	49
0000200d 4e565f454e41424c 6204		.strz	"NV_ENABLE_ADDRESS_LOOKUP "
00002015 455f414444524553
0000201d 535f4c4f4f4b5550
00002025 2000            
00002027 01               6205		.byte	1
00002028 5f               6206		.byte	95
00002029 6b45657053697a65 6207		.strz	"kEepSizeValidityFlags 0x01u"
00002031 56616c6964697479
00002039 466c616773203078
00002041 30317500        
00002045 04               6208		.byte	4
00002046 04               6209		.byte	4
00002047 04               6210		.byte	4
00002048 03               6211		.byte	3
00002049 9501             6212		.byte	149,1
0000204b 2c               6213		.byte	44
0000204c 01               6214		.byte	1
0000204d 40               6215		.byte	64
0000204e 46424c5f4642545f 6216		.strz	"FBL_FBT_START_SEC_CONST "
00002056 53544152545f5345
0000205e 435f434f4e535420
00002066 00              
00002067 03               6217		.byte	3
00002068 41               6218		.byte	65
00002069 18               6219		.byte	24
0000206a 01               6220		.byte	1
0000206b 2b               6221		.byte	43
0000206c 46424c5f4d454d4d 6222		.strz	"FBL_MEMMAP_ERROR "
00002074 41505f4552524f52
0000207c 2000            
0000207e 04               6223		.byte	4
0000207f 01               6224		.byte	1
00002080 47               6225		.byte	71
00002081 46424c5f4642545f 6226		.strz	"FBL_FBT_STOP_SEC_CONST "
00002089 53544f505f534543
00002091 5f434f4e53542000
00002099 03               6227		.byte	3
0000209a 48               6228		.byte	72
0000209b 18               6229		.byte	24
0000209c 01               6230		.byte	1
0000209d 2b               6231		.byte	43
0000209e 46424c5f4d454d4d 6232		.strz	"FBL_MEMMAP_ERROR "
000020a6 41505f4552524f52
000020ae 2000            
000020b0 04               6233		.byte	4
000020b1 04               6234		.byte	4
000020b2 03               6235		.byte	3
000020b3 a101             6236		.byte	161,1
000020b5 2d               6237		.byte	45
000020b6 03               6238		.byte	3
000020b7 4b               6239		.byte	75
000020b8 2e               6240		.byte	46
000020b9 01               6241		.byte	1
000020ba 56               6242		.byte	86
000020bb 46424c5f44494147 6243		.strz	"FBL_DIAG_ENABLE_CORE_SEGMENTHANDLING "
000020c3 5f454e41424c455f
000020cb 434f52455f534547
000020d3 4d454e5448414e44
000020db 4c494e472000    
000020e1 01               6244		.byte	1
000020e2 61               6245		.byte	97
000020e3 6b44696167537461 6246		.strz	"kDiagStateIdxSecurityKeyAllowed (kDiagLastCoreStateIdx + 1u)"
000020eb 7465496478536563
000020f3 75726974794b6579
000020fb 416c6c6f77656420
00002103 286b446961674c61
0000210b 7374436f72655374
00002113 617465496478202b
0000211b 2031752900      
00002120 01               6247		.byte	1
00002121 62               6248		.byte	98
00002122 6b44696167537461 6249		.strz	"kDiagStateIdxSecurityUnlock (kDiagStateIdxSecurityKeyAllowed + 1u)"
0000212a 7465496478536563
00002132 7572697479556e6c
0000213a 6f636b20286b4469
00002142 6167537461746549
0000214a 6478536563757269
00002152 74794b6579416c6c
0000215a 6f776564202b2031
00002162 752900          
00002165 01               6250		.byte	1
00002166 63               6251		.byte	99
00002167 6b44696167537461 6252		.strz	"kDiagStateIdxFingerprintValid (kDiagStateIdxSecurityUnlock + 1u)"
0000216f 746549647846696e
00002177 6765727072696e74
0000217f 56616c696420286b
00002187 4469616753746174
0000218f 6549647853656375
00002197 72697479556e6c6f
0000219f 636b202b20317529
000021a7 00              
000021a8 01               6253		.byte	1
000021a9 64               6254		.byte	100
000021aa 6b44696167537461 6255		.strz	"kDiagStateIdxEraseSucceeded (kDiagStateIdxFingerprintValid + 1u)"
000021b2 7465496478457261
000021ba 7365537563636565
000021c2 64656420286b4469
000021ca 6167537461746549
000021d2 647846696e676572
000021da 7072696e7456616c
000021e2 6964202b20317529
000021ea 00              
000021eb 01               6256		.byte	1
000021ec 65               6257		.byte	101

                                   Fri Apr 10 08:32:10 2020           Page 113
                                   Fri Apr 10 08:32:09 2020   gh_0000bi81.si
000021ed 6b44696167537461 6258		.strz	"kDiagStateIdxTransferDataAllowed (kDiagStateIdxEraseSucceeded + 1u)"
000021f5 7465496478547261
000021fd 6e73666572446174
00002205 61416c6c6f776564
0000220d 20286b4469616753
00002215 7461746549647845
0000221d 7261736553756363
00002225 6565646564202b20
0000222d 31752900        
00002231 01               6259		.byte	1
00002232 66               6260		.byte	102
00002233 6b44696167537461 6261		.strz	"kDiagStateIdxTransferDataSucceeded (kDiagStateIdxTransferDataAllowed + 1u)"
0000223b 7465496478547261
00002243 6e73666572446174
0000224b 6153756363656564
00002253 656420286b446961
0000225b 6753746174654964
00002263 785472616e736665
0000226b 7244617461416c6c
00002273 6f776564202b2031
0000227b 752900          
0000227e 01               6262		.byte	1
0000227f 67               6263		.byte	103
00002280 6b44696167537461 6264		.strz	"kDiagStateIdxChecksumAllowed (kDiagStateIdxTransferDataSucceeded + 1u)"
00002288 7465496478436865
00002290 636b73756d416c6c
00002298 6f77656420286b44
000022a0 6961675374617465
000022a8 4964785472616e73
000022b0 6665724461746153
000022b8 7563636565646564
000022c0 202b2031752900  
000022c7 01               6265		.byte	1
000022c8 69               6266		.byte	105
000022c9 6b446961674c6173 6267		.strz	"kDiagLastOemStateIdx kDiagStateIdxChecksumAllowed"
000022d1 744f656d53746174
000022d9 65496478206b4469
000022e1 6167537461746549
000022e9 6478436865636b73
000022f1 756d416c6c6f7765
000022f9 6400            
000022fb 04               6268		.byte	4
000022fc 01               6269		.byte	1
000022fd 5a               6270		.byte	90
000022fe 6b4469616743616c 6271		.strz	"kDiagCallCycle 1u"
00002306 6c4379636c652031
0000230e 7500            
00002310 01               6272		.byte	1
00002311 7d               6273		.byte	125
00002312 6b44696167537461 6274		.strz	"kDiagStateIdxMemDriverInitialized 17u"
0000231a 74654964784d656d
00002322 447269766572496e
0000232a 697469616c697a65
00002332 642031377500    
00002338 01               6275		.byte	1
00002339 7f               6276		.byte	127
0000233a 6b446961674c6173 6277		.strz	"kDiagLastCoreStateIdx kDiagStateIdxMemDriverInitialized"
00002342 74436f7265537461
0000234a 7465496478206b44
00002352 6961675374617465
0000235a 4964784d656d4472
00002362 69766572496e6974
0000236a 69616c697a656400
00002372 01               6278		.byte	1
00002373 8201             6279		.byte	130,1
00002375 6b446961674e756d 6280		.strz	"kDiagNumberOfStates ( kDiagLastOemStateIdx + 1u )"
0000237d 6265724f66537461
00002385 7465732028206b44
0000238d 6961674c6173744f
00002395 656d537461746549
0000239d 6478202b20317520
000023a5 2900            
000023a7 01               6281		.byte	1
000023a8 8301             6282		.byte	131,1
000023aa 6b446961674e756d 6283		.strz	"kDiagNumberOfDispatchStates kDiagNumberOfStates"
000023b2 6265724f66446973
000023ba 7061746368537461
000023c2 746573206b446961
000023ca 674e756d6265724f
000023d2 6653746174657300
000023da 01               6284		.byte	1
000023db c801             6285		.byte	200,1
000023dd 46424c5f44494147 6286		.strz	"FBL_DIAG_STATECHECK_ARRAYSIZE (((kDiagNumberOfDispatchStates - 1u) / FBL_STATE_BITS) + 1u)"
000023e5 5f53544154454348
000023ed 45434b5f41525241
000023f5 5953495a45202828
000023fd 286b446961674e75
00002405 6d6265724f664469
0000240d 7370617463685374
00002415 61746573202d2031
0000241d 7529202f2046424c
00002425 5f53544154455f42
0000242d 49545329202b2031
00002435 752900          
00002438 01               6287		.byte	1
00002439 ae02             6288		.byte	174,2
0000243b 6b44696167457272 6289		.strz	"kDiagErrorNone 0x00u"
00002443 6f724e6f6e652030
0000244b 7830307500      
00002450 01               6290		.byte	1
00002451 af02             6291		.byte	175,2
00002453 6b446961674e7263 6292		.strz	"kDiagNrcGeneralReject 0x10u"
0000245b 47656e6572616c52
00002463 656a656374203078
0000246b 31307500        
0000246f 01               6293		.byte	1
00002470 b502             6294		.byte	181,2
00002472 6b446961674e7263 6295		.strz	"kDiagNrcConditionsNotCorrect 0x22u"
0000247a 436f6e646974696f
00002482 6e734e6f74436f72
0000248a 7265637420307832
00002492 327500          
00002495 01               6296		.byte	1
00002496 b602             6297		.byte	182,2
00002498 6b446961674e7263 6298		.strz	"kDiagNrcRequestSequenceError 0x24u"
000024a0 5265717565737453
000024a8 657175656e636545
000024b0 72726f7220307832
000024b8 347500          
000024bb 01               6299		.byte	1
000024bc b702             6300		.byte	183,2
000024be 6b446961674e7263 6301		.strz	"kDiagNrcRequestOutOfRange 0x31u"
000024c6 526571756573744f
000024ce 75744f6652616e67
000024d6 6520307833317500
000024de 01               6302		.byte	1
000024df bc02             6303		.byte	188,2
000024e1 6b446961674e7263 6304		.strz	"kDiagNrcUploadDownloadNotAccepted 0x70u"
000024e9 55706c6f6164446f
000024f1 776e6c6f61644e6f
000024f9 7441636365707465
00002501 6420307837307500
00002509 01               6305		.byte	1
0000250a bd02             6306		.byte	189,2
0000250c 6b446961674e7263 6307		.strz	"kDiagNrcTransferDataSuspended 0x71u"
00002514 5472616e73666572
0000251c 4461746153757370
00002524 656e646564203078
0000252c 37317500        
00002530 01               6308		.byte	1
00002531 be02             6309		.byte	190,2
00002533 6b446961674e7263 6310		.strz	"kDiagNrcGeneralProgrammingFailure 0x72u"
0000253b 47656e6572616c50
00002543 726f6772616d6d69
0000254b 6e674661696c7572
00002553 6520307837327500
0000255b 01               6311		.byte	1
0000255c cf03             6312		.byte	207,3
0000255e 46424c444941475f 6313		.strz	"FBLDIAG_RAMCODE_START_SEC_CODE "
00002566 52414d434f44455f
0000256e 53544152545f5345
00002576 435f434f44452000

                                   Fri Apr 10 08:32:10 2020           Page 114
                                   Fri Apr 10 08:32:09 2020   gh_0000bi81.si
0000257e 03               6314		.byte	3
0000257f d003             6315		.byte	208,3
00002581 18               6316		.byte	24
00002582 01               6317		.byte	1
00002583 2b               6318		.byte	43
00002584 46424c5f4d454d4d 6319		.strz	"FBL_MEMMAP_ERROR "
0000258c 41505f4552524f52
00002594 2000            
00002596 04               6320		.byte	4
00002597 01               6321		.byte	1
00002598 dc03             6322		.byte	220,3
0000259a 46424c444941475f 6323		.strz	"FBLDIAG_RAMCODE_STOP_SEC_CODE "
000025a2 52414d434f44455f
000025aa 53544f505f534543
000025b2 5f434f44452000  
000025b9 03               6324		.byte	3
000025ba dd03             6325		.byte	221,3
000025bc 18               6326		.byte	24
000025bd 01               6327		.byte	1
000025be 2b               6328		.byte	43
000025bf 46424c5f4d454d4d 6329		.strz	"FBL_MEMMAP_ERROR "
000025c7 41505f4552524f52
000025cf 2000            
000025d1 04               6330		.byte	4
000025d2 04               6331		.byte	4
000025d3 03               6332		.byte	3
000025d4 a301             6333		.byte	163,1
000025d6 2f               6334		.byte	47
000025d7 03               6335		.byte	3
000025d8 b201             6336		.byte	178,1
000025da 30               6337		.byte	48
000025db 01               6338		.byte	1
000025dc 79               6339		.byte	121
000025dd 46424c5f4d454d5f 6340		.strz	"FBL_MEM_BUFFER_SIZE FBL_DIAG_BUFFER_LENGTH"
000025e5 4255464645525f53
000025ed 495a452046424c5f
000025f5 444941475f425546
000025fd 4645525f4c454e47
00002605 544800          
00002608 01               6341		.byte	1
00002609 7b               6342		.byte	123
0000260a 46424c5f4d454d5f 6343		.strz	"FBL_MEM_DEFAULT_PREAMBLE_LENGTH 2u"
00002612 44454641554c545f
0000261a 505245414d424c45
00002622 5f4c454e47544820
0000262a 327500          
0000262d 01               6344		.byte	1
0000262e 7d               6345		.byte	125
0000262f 46424c5f4d454d5f 6346		.strz	"FBL_MEM_MAX_PREAMBLE_LENGTH 2u"
00002637 4d41585f50524541
0000263f 4d424c455f4c454e
00002647 47544820327500  
0000264e 01               6347		.byte	1
0000264f ad01             6348		.byte	173,1
00002651 5f5f4170706c4662 6349		.strz	"__ApplFblMemPreWrite() FblDiagMemPreWrite()"
00002659 6c4d656d50726557
00002661 7269746528292046
00002669 626c446961674d65
00002671 6d50726557726974
00002679 65282900        
0000267d 01               6350		.byte	1
0000267e ae01             6351		.byte	174,1
00002680 5f5f4170706c4662 6352		.strz	"__ApplFblMemPostWrite() FblDiagMemPostWrite()"
00002688 6c4d656d506f7374
00002690 5772697465282920
00002698 46626c446961674d
000026a0 656d506f73745772
000026a8 697465282900    
000026ae 01               6353		.byte	1
000026af b301             6354		.byte	179,1
000026b1 5f5f4170706c4662 6355		.strz	"__ApplFblMemPreErase() FblDiagMemPreWrite()"
000026b9 6c4d656d50726545
000026c1 7261736528292046
000026c9 626c446961674d65
000026d1 6d50726557726974
000026d9 65282900        
000026dd 01               6356		.byte	1
000026de b401             6357		.byte	180,1
000026e0 5f5f4170706c4662 6358		.strz	"__ApplFblMemPostErase() FblDiagMemPostWrite()"
000026e8 6c4d656d506f7374
000026f0 4572617365282920
000026f8 46626c446961674d
00002700 656d506f73745772
00002708 697465282900    
0000270e 01               6359		.byte	1
0000270f bd01             6360		.byte	189,1
00002711 46424c5f4d454d5f 6361		.strz	"FBL_MEM_WD_TRIGGER_DEFAULT (FBL_NO_TRIGGER)"
00002719 57445f5452494747
00002721 45525f4445464155
00002729 4c54202846424c5f
00002731 4e4f5f5452494747
00002739 45522900        
0000273d 01               6362		.byte	1
0000273e c201             6363		.byte	194,1
00002740 46424c5f4d454d5f 6364		.strz	"FBL_MEM_TRIGGER_STATUS_OVERWRITE vuint8"
00002748 545249474745525f
00002750 5354415455535f4f
00002758 5645525752495445
00002760 207675696e743800
00002768 01               6365		.byte	1
00002769 e601             6366		.byte	230,1
0000276b 46424c5f4d454d5f 6367		.strz	"FBL_MEM_ENABLE_STATUS_OVERWRITE "
00002773 454e41424c455f53
0000277b 54415455535f4f56
00002783 4552575249544520
0000278b 00              
0000278c 01               6368		.byte	1
0000278d ef01             6369		.byte	239,1

                                   Fri Apr 10 08:32:10 2020           Page 115
                                   Fri Apr 10 08:32:09 2020   gh_0000bi81.si
0000278f 46424c5f4d454d5f 6370		.strz	"FBL_MEM_STATUS_Ok kDiagErrorNone"
00002797 5354415455535f4f
0000279f 6b206b4469616745
000027a7 72726f724e6f6e65
000027af 00              
000027b0 01               6371		.byte	1
000027b1 f001             6372		.byte	240,1
000027b3 46424c5f4d454d5f 6373		.strz	"FBL_MEM_STATUS_Failed kDiagNrcConditionsNotCorrect"
000027bb 5354415455535f46
000027c3 61696c6564206b44
000027cb 6961674e7263436f
000027d3 6e646974696f6e73
000027db 4e6f74436f727265
000027e3 637400          
000027e6 01               6374		.byte	1
000027e7 f201             6375		.byte	242,1
000027e9 46424c5f4d454d5f 6376		.strz	"FBL_MEM_STATUS_BlockEraseSequence kDiagNrcRequestSequenceError"
000027f1 5354415455535f42
000027f9 6c6f636b45726173
00002801 6553657175656e63
00002809 65206b446961674e
00002811 7263526571756573
00002819 7453657175656e63
00002821 654572726f7200  
00002828 01               6377		.byte	1
00002829 f401             6378		.byte	244,1
0000282b 46424c5f4d454d5f 6379		.strz	"FBL_MEM_STATUS_BlockStartSequence kDiagNrcRequestSequenceError"
00002833 5354415455535f42
0000283b 6c6f636b53746172
00002843 7453657175656e63
0000284b 65206b446961674e
00002853 7263526571756573
0000285b 7453657175656e63
00002863 654572726f7200  
0000286a 01               6380		.byte	1
0000286b f501             6381		.byte	245,1
0000286d 46424c5f4d454d5f 6382		.strz	"FBL_MEM_STATUS_BlockStartParam kDiagNrcConditionsNotCorrect"
00002875 5354415455535f42
0000287d 6c6f636b53746172
00002885 74506172616d206b
0000288d 446961674e726343
00002895 6f6e646974696f6e
0000289d 734e6f74436f7272
000028a5 65637400        
000028a9 01               6383		.byte	1
000028aa f701             6384		.byte	247,1
000028ac 46424c5f4d454d5f 6385		.strz	"FBL_MEM_STATUS_BlockEndSequence kDiagNrcRequestSequenceError"
000028b4 5354415455535f42
000028bc 6c6f636b456e6453
000028c4 657175656e636520
000028cc 6b446961674e7263
000028d4 5265717565737453
000028dc 657175656e636545
000028e4 72726f7200      
000028e9 01               6386		.byte	1
000028ea f801             6387		.byte	248,1
000028ec 46424c5f4d454d5f 6388		.strz	"FBL_MEM_STATUS_BlockEndVerifyFinalize kDiagNrcGeneralProgrammingFailure"
000028f4 5354415455535f42
000028fc 6c6f636b456e6456
00002904 657269667946696e
0000290c 616c697a65206b44
00002914 6961674e72634765
0000291c 6e6572616c50726f
00002924 6772616d6d696e67
0000292c 4661696c75726500
00002934 01               6389		.byte	1
00002935 fa01             6390		.byte	250,1
00002937 46424c5f4d454d5f 6391		.strz	"FBL_MEM_STATUS_BlockVerifySequence kDiagNrcRequestSequenceError"
0000293f 5354415455535f42
00002947 6c6f636b56657269
0000294f 667953657175656e
00002957 6365206b44696167
0000295f 4e72635265717565
00002967 737453657175656e
0000296f 63654572726f7200
00002977 01               6392		.byte	1
00002978 fb01             6393		.byte	251,1
0000297a 46424c5f4d454d5f 6394		.strz	"FBL_MEM_STATUS_BlockVerifyInputVerify kDiagNrcGeneralReject"
00002982 5354415455535f42
0000298a 6c6f636b56657269
00002992 6679496e70757456
0000299a 6572696679206b44
000029a2 6961674e72634765
000029aa 6e6572616c52656a
000029b2 65637400        
000029b6 01               6395		.byte	1
000029b7 fc01             6396		.byte	252,1
000029b9 46424c5f4d454d5f 6397		.strz	"FBL_MEM_STATUS_BlockVerifyProcessedVerify kDiagNrcGeneralReject"
000029c1 5354415455535f42
000029c9 6c6f636b56657269
000029d1 667950726f636573
000029d9 7365645665726966
000029e1 79206b446961674e
000029e9 726347656e657261
000029f1 6c52656a65637400
000029f9 01               6398		.byte	1
000029fa fd01             6399		.byte	253,1
000029fc 46424c5f4d454d5f 6400		.strz	"FBL_MEM_STATUS_BlockVerifyPipeVerify kDiagNrcGeneralReject"
00002a04 5354415455535f42
00002a0c 6c6f636b56657269
00002a14 6679506970655665
00002a1c 72696679206b4469
00002a24 61674e726347656e
00002a2c 6572616c52656a65
00002a34 637400          
00002a37 01               6401		.byte	1
00002a38 fe01             6402		.byte	254,1
00002a3a 46424c5f4d454d5f 6403		.strz	"FBL_MEM_STATUS_BlockVerifyOutputVerify kDiagNrcGeneralReject"
00002a42 5354415455535f42
00002a4a 6c6f636b56657269
00002a52 66794f7574707574
00002a5a 566572696679206b
00002a62 446961674e726347
00002a6a 656e6572616c5265
00002a72 6a65637400      
00002a77 01               6404		.byte	1
00002a78 8002             6405		.byte	128,2
00002a7a 46424c5f4d454d5f 6406		.strz	"FBL_MEM_STATUS_SegmentStartSequence kDiagNrcRequestSequenceError"
00002a82 5354415455535f53
00002a8a 65676d656e745374
00002a92 6172745365717565
00002a9a 6e6365206b446961
00002aa2 674e726352657175
00002aaa 6573745365717565
00002ab2 6e63654572726f72
00002aba 00              
00002abb 01               6407		.byte	1
00002abc 8102             6408		.byte	129,2
00002abe 46424c5f4d454d5f 6409		.strz	"FBL_MEM_STATUS_SegmentStartDataProcInit kDiagNrcUploadDownloadNotAccepted"
00002ac6 5354415455535f53
00002ace 65676d656e745374
00002ad6 6172744461746150
00002ade 726f63496e697420
00002ae6 6b446961674e7263
00002aee 55706c6f6164446f
00002af6 776e6c6f61644e6f
00002afe 7441636365707465
00002b06 6400            
00002b08 01               6410		.byte	1
00002b09 8202             6411		.byte	130,2
00002b0b 46424c5f4d454d5f 6412		.strz	"FBL_MEM_STATUS_SegmentStartStreamOutInit kDiagNrcUploadDownloadNotAccepted"
00002b13 5354415455535f53
00002b1b 65676d656e745374
00002b23 6172745374726561
00002b2b 6d4f7574496e6974
00002b33 206b446961674e72
00002b3b 6355706c6f616444
00002b43 6f776e6c6f61644e
00002b4b 6f74416363657074
00002b53 656400          
00002b56 01               6413		.byte	1
00002b57 8302             6414		.byte	131,2
00002b59 46424c5f4d454d5f 6415		.strz	"FBL_MEM_STATUS_SegmentStartVerifyInit kDiagNrcConditionsNotCorrect"
00002b61 5354415455535f53
00002b69 65676d656e745374
00002b71 6172745665726966
00002b79 79496e6974206b44
00002b81 6961674e7263436f
00002b89 6e646974696f6e73
00002b91 4e6f74436f727265
00002b99 637400          
00002b9c 01               6416		.byte	1
00002b9d 8402             6417		.byte	132,2
00002b9f 46424c5f4d454d5f 6418		.strz	"FBL_MEM_STATUS_SegmentStartVerifyCompute kDiagNrcGeneralProgrammingFailure"
00002ba7 5354415455535f53
00002baf 65676d656e745374
00002bb7 6172745665726966
00002bbf 79436f6d70757465
00002bc7 206b446961674e72
00002bcf 6347656e6572616c
00002bd7 50726f6772616d6d
00002bdf 696e674661696c75
00002be7 726500          
00002bea 01               6419		.byte	1
00002beb 8502             6420		.byte	133,2
00002bed 46424c5f4d454d5f 6421		.strz	"FBL_MEM_STATUS_SegmentStartSegmentCount kDiagNrcRequestOutOfRange"
00002bf5 5354415455535f53
00002bfd 65676d656e745374
00002c05 6172745365676d65
00002c0d 6e74436f756e7420
00002c15 6b446961674e7263
00002c1d 526571756573744f
00002c25 75744f6652616e67
00002c2d 6500            
00002c2f 01               6422		.byte	1
00002c30 8702             6423		.byte	135,2
00002c32 46424c5f4d454d5f 6424		.strz	"FBL_MEM_STATUS_SegmentEndSequence kDiagNrcRequestSequenceError"
00002c3a 5354415455535f53
00002c42 65676d656e74456e
00002c4a 6453657175656e63
00002c52 65206b446961674e
00002c5a 7263526571756573
00002c62 7453657175656e63
00002c6a 654572726f7200  
00002c71 01               6425		.byte	1

                                   Fri Apr 10 08:32:10 2020           Page 116
                                   Fri Apr 10 08:32:09 2020   gh_0000bi81.si
00002c72 8802             6426		.byte	136,2
00002c74 46424c5f4d454d5f 6427		.strz	"FBL_MEM_STATUS_SegmentEndInsufficientData kDiagNrcRequestSequenceError"
00002c7c 5354415455535f53
00002c84 65676d656e74456e
00002c8c 64496e7375666669
00002c94 6369656e74446174
00002c9c 61206b446961674e
00002ca4 7263526571756573
00002cac 7453657175656e63
00002cb4 654572726f7200  
00002cbb 01               6428		.byte	1
00002cbc 8902             6429		.byte	137,2
00002cbe 46424c5f4d454d5f 6430		.strz	"FBL_MEM_STATUS_SegmentEndPost kDiagNrcConditionsNotCorrect"
00002cc6 5354415455535f53
00002cce 65676d656e74456e
00002cd6 64506f7374206b44
00002cde 6961674e7263436f
00002ce6 6e646974696f6e73
00002cee 4e6f74436f727265
00002cf6 637400          
00002cf9 01               6431		.byte	1
00002cfa 8b02             6432		.byte	139,2
00002cfc 46424c5f4d454d5f 6433		.strz	"FBL_MEM_STATUS_DataIndSequence kDiagNrcRequestSequenceError"
00002d04 5354415455535f44
00002d0c 617461496e645365
00002d14 7175656e6365206b
00002d1c 446961674e726352
00002d24 6571756573745365
00002d2c 7175656e63654572
00002d34 726f7200        
00002d38 01               6434		.byte	1
00002d39 8c02             6435		.byte	140,2
00002d3b 46424c5f4d454d5f 6436		.strz	"FBL_MEM_STATUS_DataIndParam kDiagNrcGeneralProgrammingFailure"
00002d43 5354415455535f44
00002d4b 617461496e645061
00002d53 72616d206b446961
00002d5b 674e726347656e65
00002d63 72616c50726f6772
00002d6b 616d6d696e674661
00002d73 696c75726500    
00002d79 01               6437		.byte	1
00002d7a 8d02             6438		.byte	141,2
00002d7c 46424c5f4d454d5f 6439		.strz	"FBL_MEM_STATUS_DataIndOverflow kDiagNrcTransferDataSuspended"
00002d84 5354415455535f44
00002d8c 617461496e644f76
00002d94 6572666c6f77206b
00002d9c 446961674e726354
00002da4 72616e7366657244
00002dac 6174615375737065
00002db4 6e64656400      
00002db9 01               6440		.byte	1
00002dba 8f02             6441		.byte	143,2
00002dbc 46424c5f4d454d5f 6442		.strz	"FBL_MEM_STATUS_DataProc kDiagNrcGeneralProgrammingFailure"
00002dc4 5354415455535f44
00002dcc 61746150726f6320
00002dd4 6b446961674e7263
00002ddc 47656e6572616c50
00002de4 726f6772616d6d69
00002dec 6e674661696c7572
00002df4 6500            
00002df6 01               6443		.byte	1
00002df7 9002             6444		.byte	144,2
00002df9 46424c5f4d454d5f 6445		.strz	"FBL_MEM_STATUS_DataProcConsume kDiagNrcGeneralProgrammingFailure"
00002e01 5354415455535f44
00002e09 61746150726f6343
00002e11 6f6e73756d65206b
00002e19 446961674e726347
00002e21 656e6572616c5072
00002e29 6f6772616d6d696e
00002e31 674661696c757265
00002e39 00              
00002e3a 01               6446		.byte	1
00002e3b 9102             6447		.byte	145,2
00002e3d 46424c5f4d454d5f 6448		.strz	"FBL_MEM_STATUS_DataProcDeinit kDiagNrcConditionsNotCorrect"
00002e45 5354415455535f44
00002e4d 61746150726f6344
00002e55 65696e6974206b44
00002e5d 6961674e7263436f
00002e65 6e646974696f6e73
00002e6d 4e6f74436f727265
00002e75 637400          
00002e78 01               6449		.byte	1
00002e79 9302             6450		.byte	147,2
00002e7b 46424c5f4d454d5f 6451		.strz	"FBL_MEM_STATUS_StreamOutput kDiagNrcGeneralProgrammingFailure"
00002e83 5354415455535f53
00002e8b 747265616d4f7574
00002e93 707574206b446961
00002e9b 674e726347656e65
00002ea3 72616c50726f6772
00002eab 616d6d696e674661
00002eb3 696c75726500    
00002eb9 01               6452		.byte	1
00002eba 9402             6453		.byte	148,2
00002ebc 46424c5f4d454d5f 6454		.strz	"FBL_MEM_STATUS_StreamOutputConsume kDiagNrcGeneralProgrammingFailure"
00002ec4 5354415455535f53
00002ecc 747265616d4f7574
00002ed4 707574436f6e7375
00002edc 6d65206b44696167
00002ee4 4e726347656e6572
00002eec 616c50726f677261
00002ef4 6d6d696e67466169
00002efc 6c75726500      
00002f01 01               6455		.byte	1
00002f02 9502             6456		.byte	149,2
00002f04 46424c5f4d454d5f 6457		.strz	"FBL_MEM_STATUS_StreamOutputOverflow kDiagNrcTransferDataSuspended"
00002f0c 5354415455535f53
00002f14 747265616d4f7574
00002f1c 7075744f76657266
00002f24 6c6f77206b446961
00002f2c 674e72635472616e
00002f34 7366657244617461
00002f3c 53757370656e6465
00002f44 6400            
00002f46 01               6458		.byte	1
00002f47 9602             6459		.byte	150,2
00002f49 46424c5f4d454d5f 6460		.strz	"FBL_MEM_STATUS_StreamOutputDeinit kDiagNrcConditionsNotCorrect"
00002f51 5354415455535f53
00002f59 747265616d4f7574
00002f61 7075744465696e69
00002f69 74206b446961674e
00002f71 7263436f6e646974
00002f79 696f6e734e6f7443
00002f81 6f727265637400  
00002f88 01               6461		.byte	1
00002f89 9802             6462		.byte	152,2
00002f8b 46424c5f4d454d5f 6463		.strz	"FBL_MEM_STATUS_DriverResumeWrite kDiagNrcGeneralProgrammingFailure"
00002f93 5354415455535f44
00002f9b 7269766572526573
00002fa3 756d655772697465
00002fab 206b446961674e72
00002fb3 6347656e6572616c
00002fbb 50726f6772616d6d
00002fc3 696e674661696c75
00002fcb 726500          
00002fce 01               6464		.byte	1
00002fcf 9902             6465		.byte	153,2
00002fd1 46424c5f4d454d5f 6466		.strz	"FBL_MEM_STATUS_DriverWrite kDiagNrcGeneralProgrammingFailure"
00002fd9 5354415455535f44
00002fe1 7269766572577269
00002fe9 7465206b44696167
00002ff1 4e726347656e6572
00002ff9 616c50726f677261
00003001 6d6d696e67466169
00003009 6c75726500      
0000300e 01               6467		.byte	1
0000300f 9a02             6468		.byte	154,2
00003011 46424c5f4d454d5f 6469		.strz	"FBL_MEM_STATUS_DriverErase kDiagNrcGeneralProgrammingFailure"
00003019 5354415455535f44
00003021 7269766572457261
00003029 7365206b44696167
00003031 4e726347656e6572
00003039 616c50726f677261
00003041 6d6d696e67466169
00003049 6c75726500      
0000304e 01               6470		.byte	1
0000304f 9b02             6471		.byte	155,2
00003051 46424c5f4d454d5f 6472		.strz	"FBL_MEM_STATUS_DriverRemainder kDiagNrcGeneralProgrammingFailure"
00003059 5354415455535f44
00003061 726976657252656d
00003069 61696e646572206b
00003071 446961674e726347
00003079 656e6572616c5072
00003081 6f6772616d6d696e
00003089 674661696c757265
00003091 00              
00003092 01               6473		.byte	1
00003093 9c02             6474		.byte	156,2
00003095 46424c5f4d454d5f 6475		.strz	"FBL_MEM_STATUS_DriverSuspendWrite kDiagNrcGeneralProgrammingFailure"
0000309d 5354415455535f44
000030a5 7269766572537573
000030ad 70656e6457726974
000030b5 65206b446961674e
000030bd 726347656e657261
000030c5 6c50726f6772616d
000030cd 6d696e674661696c
000030d5 75726500        
000030d9 01               6476		.byte	1
000030da 9e02             6477		.byte	158,2
000030dc 46424c5f4d454d5f 6478		.strz	"FBL_MEM_STATUS_ProgramOverflow kDiagNrcTransferDataSuspended"
000030e4 5354415455535f50
000030ec 726f6772616d4f76
000030f4 6572666c6f77206b
000030fc 446961674e726354
00003104 72616e7366657244
0000310c 6174615375737065
00003114 6e64656400      
00003119 01               6479		.byte	1
0000311a 9f02             6480		.byte	159,2
0000311c 46424c5f4d454d5f 6481		.strz	"FBL_MEM_STATUS_ProgramOutsideFbt kDiagNrcTransferDataSuspended"
00003124 5354415455535f50
0000312c 726f6772616d4f75
00003134 7473696465466274
0000313c 206b446961674e72
00003144 635472616e736665
0000314c 7244617461537573
00003154 70656e64656400  

                                   Fri Apr 10 08:32:10 2020           Page 117
                                   Fri Apr 10 08:32:09 2020   gh_0000bi81.si
0000315b 01               6482		.byte	1
0000315c a002             6483		.byte	160,2
0000315e 46424c5f4d454d5f 6484		.strz	"FBL_MEM_STATUS_ProgramUnalignedAddress kDiagNrcGeneralProgrammingFailure"
00003166 5354415455535f50
0000316e 726f6772616d556e
00003176 616c69676e656441
0000317e 646472657373206b
00003186 446961674e726347
0000318e 656e6572616c5072
00003196 6f6772616d6d696e
0000319e 674661696c757265
000031a6 00              
000031a7 01               6485		.byte	1
000031a8 a102             6486		.byte	161,2
000031aa 46424c5f4d454d5f 6487		.strz	"FBL_MEM_STATUS_ProgramDriverNotReady kDiagNrcRequestSequenceError"
000031b2 5354415455535f50
000031ba 726f6772616d4472
000031c2 697665724e6f7452
000031ca 65616479206b4469
000031d2 61674e7263526571
000031da 7565737453657175
000031e2 656e63654572726f
000031ea 7200            
000031ec 01               6488		.byte	1
000031ed a202             6489		.byte	162,2
000031ef 46424c5f4d454d5f 6490		.strz	"FBL_MEM_STATUS_ProgramPreWrite kDiagNrcGeneralProgrammingFailure"
000031f7 5354415455535f50
000031ff 726f6772616d5072
00003207 655772697465206b
0000320f 446961674e726347
00003217 656e6572616c5072
0000321f 6f6772616d6d696e
00003227 674661696c757265
0000322f 00              
00003230 01               6491		.byte	1
00003231 a302             6492		.byte	163,2
00003233 46424c5f4d454d5f 6493		.strz	"FBL_MEM_STATUS_ProgramPostWrite kDiagNrcGeneralProgrammingFailure"
0000323b 5354415455535f50
00003243 726f6772616d506f
0000324b 7374577269746520
00003253 6b446961674e7263
0000325b 47656e6572616c50
00003263 726f6772616d6d69
0000326b 6e674661696c7572
00003273 6500            
00003275 01               6494		.byte	1
00003276 a502             6495		.byte	165,2
00003278 46424c5f4d454d5f 6496		.strz	"FBL_MEM_STATUS_EraseOutsideFbt kDiagNrcRequestOutOfRange"
00003280 5354415455535f45
00003288 726173654f757473
00003290 696465466274206b
00003298 446961674e726352
000032a0 6571756573744f75
000032a8 744f6652616e6765
000032b0 00              
000032b1 01               6497		.byte	1
000032b2 a602             6498		.byte	166,2
000032b4 46424c5f4d454d5f 6499		.strz	"FBL_MEM_STATUS_EraseDriverNotReady kDiagNrcConditionsNotCorrect"
000032bc 5354415455535f45
000032c4 7261736544726976
000032cc 65724e6f74526561
000032d4 6479206b44696167
000032dc 4e7263436f6e6469
000032e4 74696f6e734e6f74
000032ec 436f727265637400
000032f4 01               6500		.byte	1
000032f5 a702             6501		.byte	167,2
000032f7 46424c5f4d454d5f 6502		.strz	"FBL_MEM_STATUS_ErasePreErase kDiagNrcConditionsNotCorrect"
000032ff 5354415455535f45
00003307 7261736550726545
0000330f 72617365206b4469
00003317 61674e7263436f6e
0000331f 646974696f6e734e
00003327 6f74436f72726563
0000332f 7400            
00003331 01               6503		.byte	1
00003332 a802             6504		.byte	168,2
00003334 46424c5f4d454d5f 6505		.strz	"FBL_MEM_STATUS_ErasePostErase kDiagNrcConditionsNotCorrect"
0000333c 5354415455535f45
00003344 72617365506f7374
0000334c 4572617365206b44
00003354 6961674e7263436f
0000335c 6e646974696f6e73
00003364 4e6f74436f727265
0000336c 637400          
0000336f 01               6506		.byte	1
00003370 aa02             6507		.byte	170,2
00003372 46424c5f4d454d5f 6508		.strz	"FBL_MEM_STATUS_VerifyCompute kDiagNrcGeneralProgrammingFailure"
0000337a 5354415455535f56
00003382 6572696679436f6d
0000338a 70757465206b4469
00003392 61674e726347656e
0000339a 6572616c50726f67
000033a2 72616d6d696e6746
000033aa 61696c75726500  
000033b1 01               6509		.byte	1
000033b2 ab02             6510		.byte	171,2
000033b4 46424c5f4d454d5f 6511		.strz	"FBL_MEM_STATUS_VerifyFinalize kDiagNrcGeneralProgrammingFailure"
000033bc 5354415455535f56
000033c4 657269667946696e
000033cc 616c697a65206b44
000033d4 6961674e72634765
000033dc 6e6572616c50726f
000033e4 6772616d6d696e67
000033ec 4661696c75726500
000033f4 01               6512		.byte	1
000033f5 ad02             6513		.byte	173,2
000033f7 46424c5f4d454d5f 6514		.strz	"FBL_MEM_STATUS_PassThroughLocal kDiagNrcConditionsNotCorrect"
000033ff 5354415455535f50
00003407 6173735468726f75
0000340f 67684c6f63616c20
00003417 6b446961674e7263
0000341f 436f6e646974696f
00003427 6e734e6f74436f72
0000342f 7265637400      
00003434 01               6515		.byte	1
00003435 ae02             6516		.byte	174,2
00003437 46424c5f4d454d5f 6517		.strz	"FBL_MEM_STATUS_PassThroughRemote kDiagNrcConditionsNotCorrect"
0000343f 5354415455535f50
00003447 6173735468726f75
0000344f 676852656d6f7465
00003457 206b446961674e72
0000345f 63436f6e64697469
00003467 6f6e734e6f74436f
0000346f 727265637400    
00003475 01               6518		.byte	1
00003476 b302             6519		.byte	179,2
00003478 46424c5f4d454d5f 6520		.strz	"FBL_MEM_ENABLE_EXT_STATUS "
00003480 454e41424c455f45
00003488 58545f5354415455
00003490 532000          
00003493 01               6521		.byte	1
00003494 b602             6522		.byte	182,2
00003496 46424c5f4d454d5f 6523		.strz	"FBL_MEM_EXT_STATUS_Ok(status) "
0000349e 4558545f53544154
000034a6 55535f4f6b287374
000034ae 61747573292000  
000034b5 01               6524		.byte	1
000034b6 b702             6525		.byte	183,2
000034b8 46424c5f4d454d5f 6526		.strz	"FBL_MEM_EXT_STATUS_Failed(status) "
000034c0 4558545f53544154
000034c8 55535f4661696c65
000034d0 6428737461747573
000034d8 292000          
000034db 04               6527		.byte	4
000034dc 01               6528		.byte	1
000034dd e901             6529		.byte	233,1
000034df 46424c5f4d454d5f 6530		.strz	"FBL_MEM_ENABLE_GAP_FILL "
000034e7 454e41424c455f47
000034ef 41505f46494c4c20
000034f7 00              
000034f8 01               6531		.byte	1
000034f9 f901             6532		.byte	249,1
000034fb 46424c5f4d454d5f 6533		.strz	"FBL_MEM_ENABLE_SEGMENT_HANDLING "
00003503 454e41424c455f53
0000350b 45474d454e545f48
00003513 414e444c494e4720
0000351b 00              
0000351c 01               6534		.byte	1
0000351d a902             6535		.byte	169,2
0000351f 46424c5f4d454d5f 6536		.strz	"FBL_MEM_STATUS_NAME(name) kFblMemStatus_ ## name"
00003527 5354415455535f4e
0000352f 414d45286e616d65
00003537 29206b46626c4d65
0000353f 6d5374617475735f
00003547 202323206e616d65
0000354f 00              
00003550 01               6537		.byte	1

                                   Fri Apr 10 08:32:10 2020           Page 118
                                   Fri Apr 10 08:32:09 2020   gh_0000bi81.si
00003551 aa02             6538		.byte	170,2
00003553 46424c5f4d454d5f 6539		.strz	"FBL_MEM_STATUS_DEFINE(name) FBL_MEM_STATUS_ ## name"
0000355b 5354415455535f44
00003563 4546494e45286e61
0000356b 6d65292046424c5f
00003573 4d454d5f53544154
0000357b 55535f202323206e
00003583 616d6500        
00003587 01               6540		.byte	1
00003588 ae02             6541		.byte	174,2
0000358a 46424c5f4d454d5f 6542		.strz	"FBL_MEM_STATUS_DEFINITION(name) FBL_MEM_STATUS_NAME(name) = FBL_MEM_STATUS_DEFINE(name)"
00003592 5354415455535f44
0000359a 4546494e4954494f
000035a2 4e286e616d652920
000035aa 46424c5f4d454d5f
000035b2 5354415455535f4e
000035ba 414d45286e616d65
000035c2 29203d2046424c5f
000035ca 4d454d5f53544154
000035d2 55535f444546494e
000035da 45286e616d652900
000035e2 01               6543		.byte	1
000035e3 e006             6544		.byte	224,6
000035e5 46424c4c49425f4d 6545		.strz	"FBLLIB_MEM_RAMCODE_START_SEC_CODE_EXPORT "
000035ed 454d5f52414d434f
000035f5 44455f5354415254
000035fd 5f5345435f434f44
00003605 455f4558504f5254
0000360d 2000            
0000360f 03               6546		.byte	3
00003610 e106             6547		.byte	225,6
00003612 18               6548		.byte	24
00003613 01               6549		.byte	1
00003614 2b               6550		.byte	43
00003615 46424c5f4d454d4d 6551		.strz	"FBL_MEMMAP_ERROR "
0000361d 41505f4552524f52
00003625 2000            
00003627 04               6552		.byte	4
00003628 01               6553		.byte	1
00003629 e506             6554		.byte	229,6
0000362b 46424c4c49425f4d 6555		.strz	"FBLLIB_MEM_RAMCODE_STOP_SEC_CODE_EXPORT "
00003633 454d5f52414d434f
0000363b 44455f53544f505f
00003643 5345435f434f4445
0000364b 5f4558504f525420
00003653 00              
00003654 03               6556		.byte	3
00003655 e606             6557		.byte	230,6
00003657 18               6558		.byte	24
00003658 01               6559		.byte	1
00003659 2b               6560		.byte	43
0000365a 46424c5f4d454d4d 6561		.strz	"FBL_MEMMAP_ERROR "
00003662 41505f4552524f52
0000366a 2000            
0000366c 04               6562		.byte	4
0000366d 01               6563		.byte	1
0000366e f106             6564		.byte	241,6
00003670 46424c4c49425f4d 6565		.strz	"FBLLIB_MEM_START_SEC_VAR_EXPORT "
00003678 454d5f5354415254
00003680 5f5345435f564152
00003688 5f4558504f525420
00003690 00              
00003691 03               6566		.byte	3
00003692 f206             6567		.byte	242,6
00003694 18               6568		.byte	24
00003695 01               6569		.byte	1
00003696 2b               6570		.byte	43
00003697 46424c5f4d454d4d 6571		.strz	"FBL_MEMMAP_ERROR "
0000369f 41505f4552524f52
000036a7 2000            
000036a9 04               6572		.byte	4
000036aa 01               6573		.byte	1
000036ab f606             6574		.byte	246,6
000036ad 46424c4c49425f4d 6575		.strz	"FBLLIB_MEM_STOP_SEC_VAR_EXPORT "
000036b5 454d5f53544f505f
000036bd 5345435f5641525f
000036c5 4558504f52542000
000036cd 03               6576		.byte	3
000036ce f706             6577		.byte	247,6
000036d0 18               6578		.byte	24
000036d1 01               6579		.byte	1
000036d2 2b               6580		.byte	43
000036d3 46424c5f4d454d4d 6581		.strz	"FBL_MEMMAP_ERROR "
000036db 41505f4552524f52
000036e3 2000            
000036e5 04               6582		.byte	4
000036e6 04               6583		.byte	4
000036e7 03               6584		.byte	3
000036e8 a901             6585		.byte	169,1
000036ea 31               6586		.byte	49
000036eb 01               6587		.byte	1
000036ec ac02             6588		.byte	172,2
000036ee 46424c41505f5241 6589		.strz	"FBLAP_RAMCODE_START_SEC_CODE_EXPORT "
000036f6 4d434f44455f5354
000036fe 4152545f5345435f
00003706 434f44455f455850
0000370e 4f52542000      
00003713 03               6590		.byte	3
00003714 ad02             6591		.byte	173,2
00003716 18               6592		.byte	24
00003717 01               6593		.byte	1

                                   Fri Apr 10 08:32:10 2020           Page 119
                                   Fri Apr 10 08:32:09 2020   gh_0000bi81.si
00003718 2b               6594		.byte	43
00003719 46424c5f4d454d4d 6595		.strz	"FBL_MEMMAP_ERROR "
00003721 41505f4552524f52
00003729 2000            
0000372b 04               6596		.byte	4
0000372c 01               6597		.byte	1
0000372d af02             6598		.byte	175,2
0000372f 46424c41505f5241 6599		.strz	"FBLAP_RAMCODE_STOP_SEC_CODE_EXPORT "
00003737 4d434f44455f5354
0000373f 4f505f5345435f43
00003747 4f44455f4558504f
0000374f 52542000        
00003753 03               6600		.byte	3
00003754 b002             6601		.byte	176,2
00003756 18               6602		.byte	24
00003757 01               6603		.byte	1
00003758 2b               6604		.byte	43
00003759 46424c5f4d454d4d 6605		.strz	"FBL_MEMMAP_ERROR "
00003761 41505f4552524f52
00003769 2000            
0000376b 04               6606		.byte	4
0000376c 04               6607		.byte	4
0000376d 03               6608		.byte	3
0000376e aa01             6609		.byte	170,1
00003770 32               6610		.byte	50
00003771 01               6611		.byte	1
00003772 9402             6612		.byte	148,2
00003774 5744545249474745 6613		.strz	"WDTRIGGER_START_SEC_CODE_EXPORT "
0000377c 525f53544152545f
00003784 5345435f434f4445
0000378c 5f4558504f525420
00003794 00              
00003795 03               6614		.byte	3
00003796 9502             6615		.byte	149,2
00003798 18               6616		.byte	24
00003799 01               6617		.byte	1
0000379a 2b               6618		.byte	43
0000379b 46424c5f4d454d4d 6619		.strz	"FBL_MEMMAP_ERROR "
000037a3 41505f4552524f52
000037ab 2000            
000037ad 04               6620		.byte	4
000037ae 01               6621		.byte	1
000037af 9702             6622		.byte	151,2
000037b1 5744545249474745 6623		.strz	"WDTRIGGER_STOP_SEC_CODE_EXPORT "
000037b9 525f53544f505f53
000037c1 45435f434f44455f
000037c9 4558504f52542000
000037d1 03               6624		.byte	3
000037d2 9802             6625		.byte	152,2
000037d4 18               6626		.byte	24
000037d5 01               6627		.byte	1
000037d6 2b               6628		.byte	43
000037d7 46424c5f4d454d4d 6629		.strz	"FBL_MEMMAP_ERROR "
000037df 41505f4552524f52
000037e7 2000            
000037e9 04               6630		.byte	4
000037ea 04               6631		.byte	4
000037eb 03               6632		.byte	3
000037ec ab01             6633		.byte	171,1
000037ee 33               6634		.byte	51
000037ef 04               6635		.byte	4
000037f0 03               6636		.byte	3
000037f1 ac01             6637		.byte	172,1
000037f3 34               6638		.byte	52
000037f4 01               6639		.byte	1
000037f5 f501             6640		.byte	245,1
000037f7 6b46626c50726573 6641		.strz	"kFblPresencePatternSize 4u"
000037ff 656e636550617474
00003807 65726e53697a6520
0000380f 347500          
00003812 04               6642		.byte	4
00003813 03               6643		.byte	3
00003814 b201             6644		.byte	178,1
00003816 35               6645		.byte	53
00003817 01               6646		.byte	1
00003818 47               6647		.byte	71
00003819 6b46626c4d61696e 6648		.strz	"kFblMainNumberOfStates 7u"
00003821 4e756d6265724f66
00003829 5374617465732037
00003831 7500            
00003833 01               6649		.byte	1

                                   Fri Apr 10 08:32:10 2020           Page 120
                                   Fri Apr 10 08:32:09 2020   gh_0000bi81.si
00003834 8701             6650		.byte	135,1
00003836 6b46626c4e6f4f66 6651		.strz	"kFblNoOfMagicBytes 8u"
0000383e 4d61676963427974
00003846 657320387500    
0000384c 01               6652		.byte	1
0000384d e501             6653		.byte	229,1
0000384f 46424c4845414445 6654		.strz	"FBLHEADER_START_SEC_CONST "
00003857 525f53544152545f
0000385f 5345435f434f4e53
00003867 542000          
0000386a 03               6655		.byte	3
0000386b e601             6656		.byte	230,1
0000386d 18               6657		.byte	24
0000386e 01               6658		.byte	1
0000386f 2b               6659		.byte	43
00003870 46424c5f4d454d4d 6660		.strz	"FBL_MEMMAP_ERROR "
00003878 41505f4552524f52
00003880 2000            
00003882 04               6661		.byte	4
00003883 01               6662		.byte	1
00003884 e801             6663		.byte	232,1
00003886 46424c4845414445 6664		.strz	"FBLHEADER_STOP_SEC_CONST "
0000388e 525f53544f505f53
00003896 45435f434f4e5354
0000389e 2000            
000038a0 03               6665		.byte	3
000038a1 e901             6666		.byte	233,1
000038a3 18               6667		.byte	24
000038a4 01               6668		.byte	1
000038a5 2b               6669		.byte	43
000038a6 46424c5f4d454d4d 6670		.strz	"FBL_MEMMAP_ERROR "
000038ae 41505f4552524f52
000038b6 2000            
000038b8 04               6671		.byte	4
000038b9 01               6672		.byte	1
000038ba ec01             6673		.byte	236,1
000038bc 46424c5f4d41494e 6674		.strz	"FBL_MAIN_MAGICFLAG_START_SEC_VAR "
000038c4 5f4d41474943464c
000038cc 41475f5354415254
000038d4 5f5345435f564152
000038dc 2000            
000038de 03               6675		.byte	3
000038df ed01             6676		.byte	237,1
000038e1 18               6677		.byte	24
000038e2 01               6678		.byte	1
000038e3 2b               6679		.byte	43
000038e4 46424c5f4d454d4d 6680		.strz	"FBL_MEMMAP_ERROR "
000038ec 41505f4552524f52
000038f4 2000            
000038f6 04               6681		.byte	4
000038f7 01               6682		.byte	1
000038f8 f301             6683		.byte	243,1
000038fa 46424c5f4d41494e 6684		.strz	"FBL_MAIN_MAGICFLAG_STOP_SEC_VAR "
00003902 5f4d41474943464c
0000390a 41475f53544f505f
00003912 5345435f56415220
0000391a 00              
0000391b 03               6685		.byte	3
0000391c f401             6686		.byte	244,1
0000391e 18               6687		.byte	24
0000391f 01               6688		.byte	1
00003920 2b               6689		.byte	43
00003921 46424c5f4d454d4d 6690		.strz	"FBL_MEMMAP_ERROR "
00003929 41505f4552524f52
00003931 2000            
00003933 04               6691		.byte	4
00003934 01               6692		.byte	1
00003935 fc01             6693		.byte	252,1
00003937 46424c5f4d41494e 6694		.strz	"FBL_MAIN_FBLSTART_START_SEC_CODE "
0000393f 5f46424c53544152
00003947 545f53544152545f
0000394f 5345435f434f4445
00003957 2000            
00003959 03               6695		.byte	3
0000395a fd01             6696		.byte	253,1
0000395c 18               6697		.byte	24
0000395d 01               6698		.byte	1
0000395e 2b               6699		.byte	43
0000395f 46424c5f4d454d4d 6700		.strz	"FBL_MEMMAP_ERROR "
00003967 41505f4552524f52
0000396f 2000            
00003971 04               6701		.byte	4
00003972 01               6702		.byte	1
00003973 8302             6703		.byte	131,2
00003975 46424c5f4d41494e 6704		.strz	"FBL_MAIN_FBLSTART_STOP_SEC_CODE "
0000397d 5f46424c53544152
00003985 545f53544f505f53
0000398d 45435f434f444520
00003995 00              
00003996 03               6705		.byte	3

                                   Fri Apr 10 08:32:10 2020           Page 121
                                   Fri Apr 10 08:32:09 2020   gh_0000bi81.si
00003997 8402             6706		.byte	132,2
00003999 18               6707		.byte	24
0000399a 01               6708		.byte	1
0000399b 2b               6709		.byte	43
0000399c 46424c5f4d454d4d 6710		.strz	"FBL_MEMMAP_ERROR "
000039a4 41505f4552524f52
000039ac 2000            
000039ae 04               6711		.byte	4
000039af 04               6712		.byte	4
000039b0 04               6713		.byte	4
000039b1 01               6714		.byte	1
000039b2 77               6715		.byte	119
000039b3 464c4153485f5345 6716		.strz	"FLASH_SETUP_6 "
000039bb 5455505f362000  
000039c2 01               6717		.byte	1
000039c3 a101             6718		.byte	161,1
000039c5 46424c5f464c4153 6719		.strz	"FBL_FLASH_ENABLE_ECC_SAFE_READ "
000039cd 485f454e41424c45
000039d5 5f4543435f534146
000039dd 455f524541442000
000039e5 01               6720		.byte	1
000039e6 a501             6721		.byte	165,1
000039e8 46424c5f45444d41 6722		.strz	"FBL_EDMA_CSR_START 0x0001u"
000039f0 5f4353525f535441
000039f8 5254203078303030
00003a00 317500          
00003a03 01               6723		.byte	1
00003a04 a601             6724		.byte	166,1
00003a06 46424c5f45444d41 6725		.strz	"FBL_EDMA_CSR_ACTIVE 0x0040u"
00003a0e 5f4353525f414354
00003a16 4956452030783030
00003a1e 34307500        
00003a22 01               6726		.byte	1
00003a23 a701             6727		.byte	167,1
00003a25 46424c5f45444d41 6728		.strz	"FBL_EDMA_CSR_DONE 0x0080u"
00003a2d 5f4353525f444f4e
00003a35 4520307830303830
00003a3d 7500            
00003a3f 01               6729		.byte	1
00003a40 aa01             6730		.byte	170,1
00003a42 464c4153485f444d 6731		.strz	"FLASH_DMA_CHANNEL 0u"
00003a4a 415f4348414e4e45
00003a52 4c20307500      
00003a57 01               6732		.byte	1
00003a58 b801             6733		.byte	184,1
00003a5a 464c4153485f5245 6734		.strz	"FLASH_REG(a,b) *(volatile unsigned long *)((a) + (b))"
00003a62 4728612c6229202a
00003a6a 28766f6c6174696c
00003a72 6520756e7369676e
00003a7a 6564206c6f6e6720
00003a82 2a2928286129202b
00003a8a 202862292900    
00003a90 01               6735		.byte	1
00003a91 bb01             6736		.byte	187,1
00003a93 41525241595f5349 6737		.strz	"ARRAY_SIZE(a) (sizeof(a)/sizeof((a)[0]))"
00003a9b 5a45286129202873
00003aa3 697a656f66286129
00003aab 2f73697a656f6628
00003ab3 2861295b305d2929
00003abb 00              
00003abc 01               6738		.byte	1
00003abd be01             6739		.byte	190,1
00003abf 6b466c6173685365 6740		.strz	"kFlashSelectLowMid 0u"
00003ac7 6c6563744c6f774d
00003acf 696420307500    
00003ad5 01               6741		.byte	1
00003ad6 bf01             6742		.byte	191,1
00003ad8 6b466c6173685365 6743		.strz	"kFlashSelectHigh 1u"
00003ae0 6c65637448696768
00003ae8 20317500        
00003aec 01               6744		.byte	1
00003aed c001             6745		.byte	192,1
00003aef 6b466c6173685365 6746		.strz	"kFlashSelectBig_0 2u"
00003af7 6c6563744269675f
00003aff 3020327500      
00003b04 01               6747		.byte	1
00003b05 c101             6748		.byte	193,1
00003b07 6b466c6173685365 6749		.strz	"kFlashSelectBig_1 3u"
00003b0f 6c6563744269675f
00003b17 3120337500      
00003b1c 01               6750		.byte	1
00003b1d c201             6751		.byte	194,1
00003b1f 6b466c6173685365 6752		.strz	"kFlashSelectCount 4u"
00003b27 6c656374436f756e
00003b2f 7420347500      
00003b34 01               6753		.byte	1
00003b35 c401             6754		.byte	196,1
00003b37 6b466c617368416c 6755		.strz	"kFlashAlignmentError 0x00ul"
00003b3f 69676e6d656e7445
00003b47 72726f7220307830
00003b4f 30756c00        
00003b53 01               6756		.byte	1
00003b54 c501             6757		.byte	197,1
00003b56 6b466c6173684572 6758		.strz	"kFlashEraseAddressAligned 0x01ul"
00003b5e 6173654164647265
00003b66 7373416c69676e65
00003b6e 642030783031756c
00003b76 00              
00003b77 01               6759		.byte	1
00003b78 c601             6760		.byte	198,1
00003b7a 6b466c6173684572 6761		.strz	"kFlashEraseLengthAligned 0x02ul"
00003b82 6173654c656e6774
00003b8a 68416c69676e6564
00003b92 2030783032756c00

                                   Fri Apr 10 08:32:10 2020           Page 122
                                   Fri Apr 10 08:32:09 2020   gh_0000bi81.si
00003b9a 01               6762		.byte	1
00003b9b c701             6763		.byte	199,1
00003b9d 6b466c6173685772 6764		.strz	"kFlashWriteAddressAligned 0x04ul"
00003ba5 6974654164647265
00003bad 7373416c69676e65
00003bb5 642030783034756c
00003bbd 00              
00003bbe 01               6765		.byte	1
00003bbf c801             6766		.byte	200,1
00003bc1 6b466c6173685772 6767		.strz	"kFlashWriteLengthAligned 0x08ul"
00003bc9 6974654c656e6774
00003bd1 68416c69676e6564
00003bd9 2030783038756c00
00003be1 01               6768		.byte	1
00003be2 ca01             6769		.byte	202,1
00003be4 6b466c6173684368 6770		.strz	"kFlashCheckAddress 0u"
00003bec 65636b4164647265
00003bf4 737320307500    
00003bfa 01               6771		.byte	1
00003bfb cb01             6772		.byte	203,1
00003bfd 6b466c6173684368 6773		.strz	"kFlashCheckLength 1u"
00003c05 65636b4c656e6774
00003c0d 6820317500      
00003c12 01               6774		.byte	1
00003c13 cc01             6775		.byte	204,1
00003c15 6b466c6173685374 6776		.strz	"kFlashStopCheck 2u"
00003c1d 6f70436865636b20
00003c25 327500          
00003c28 01               6777		.byte	1
00003c29 cf01             6778		.byte	207,1
00003c2b 6b4e724f66526368 6779		.strz	"kNrOfRchwValues 2u"
00003c33 7756616c75657320
00003c3b 327500          
00003c3e 01               6780		.byte	1
00003c3f d401             6781		.byte	212,1
00003c41 6b46626c53696e67 6782		.strz	"kFblSingleFlashModule 0u"
00003c49 6c65466c6173684d
00003c51 6f64756c65203075
00003c59 00              
00003c5a 01               6783		.byte	1
00003c5b 9e04             6784		.byte	158,4
00003c5d 464c4153485f5844 6785		.strz	"FLASH_XD1_USER_PROTECTION_6 { 0xFFFFFFFFul, 0xFFFFFFF0ul, 0xFFFFFFFFul, 0xFFFFFFFFul }"
00003c65 315f555345525f50
00003c6d 524f54454354494f
00003c75 4e5f36207b203078
00003c7d 4646464646464646
00003c85 756c2c2030784646
00003c8d 464646464630756c
00003c95 2c20307846464646
00003c9d 46464646756c2c20
00003ca5 3078464646464646
00003cad 4646756c207d00  
00003cb4 04               6786		.byte	4
00003cb5 00               6787		.byte	0
                          6788		.section	.debug_abbrev
0000013c 00               6789		.byte	0
                          6790		.section	.debug_info
                          6791	.Ldw_end:
