
                                   Fri Apr 10 08:32:15 2020           Page 1
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
Command Line:   C:\ghs\comp_201754\asppc.exe -noundefined -stderr=err/fbl_mem.err
                -elf -b1 -I../../../bsw/_common -I../../../bsw/eep
                -I../../../bsw/fbl -I../../../bsw/flash -I../../../bsw/flash_xd1
                -I../../../bsw/secmod -I../../../bsw/wrapnv
                -Ic:/ghs/comp_201754/ansi -Ic:/ghs/comp_201754/include/ppc
                -Ic:/ghs/comp_201754/src/libsys -Igendata -Iinclude
                -IC:\ghs\comp_201754\lib\ppc5514 -cpu=ppc560xp
                -patch_dbo=C:\Vector\CBD1800772_D00_Mpc57xx\Demo\DemoFbl\Appl\obj\fbl_mem.dbo
                -source=fbl_mem.c -o obj\gh_00008cc1.o -list=lst/fbl_mem.lst
                C:\Users\owner\AppData\Local\Temp\gh_00008cc1.si
Source File:    C:\Users\owner\AppData\Local\Temp\gh_00008cc1.si
Directory:      C:\Vector\CBD1800772_D00_Mpc57xx\Demo\DemoFbl\Appl
Host OS:        Windows
AS: Copyright (C) 1983-2017 Green Hills Software.  All Rights Reserved.
Release: Compiler v2017.5.4
Build Directory: [Directory] COMP-VAL-WIN50:c:/autoval2/v2017.5-2017-10-03/win32-comp-ecom
Revision: [VCInfo] http://toolsvc/branches/release-branch-2017-5-comp/src@603870 (built by auto-compiler)
Revision Date: Wed Oct 04 11:30:08 2017

Release Date: Wed Oct 04 09:00:05 2017

                             1	#Driver Command: ccppc -DBRS_DERIVATIVE_SPC570S50 -DBRS_OSC_CLK=40
                             2	#		-DBRS_TIMEBASE_CLOCK=80 -DBRS_OS_USECASE_BRS
                             3	#		-DBRS_EVA_BOARD_DEFAULT -DBRS_PLATFORM_MPC57XX -DBRS_COMP_GHS
                             4	#		-DBRSHW_INSTRUCTION_SET_VLE -DBRS_CPU_STARTUP_ID=0
                             5	#		-object_dir=obj -list=lst/fbl_mem.lst -stderr=err/fbl_mem.err -c
                             6	#		-vle -DC_ENABLE_INSTRUCTION_SET_VLE -D__vle --prototype_warnings
                             7	#		-Odebug -Osize -Ospace -G -dual_debug -nofloatio -cpu=ppc560xp
                             8	#		-noobj -DRAM_48K -inline_prologue -pragma_asm_inline -noSPE
                             9	#		--no_exceptions --no_commons -nokeeptempfiles -pnone
                            10	#		--incorrect_pragma_warnings --slash_comment --long_long
                            11	#		-preprocess_assembly_files -passsource -I../../../bsw/_common
                            12	#		-I../../../bsw/eep -I../../../bsw/fbl -I../../../bsw/flash
                            13	#		-I../../../bsw/flash_xd1 -I../../../bsw/secmod
                            14	#		-I../../../bsw/wrapnv -Ic:/ghs/comp_201754/ansi
                            15	#		-Ic:/ghs/comp_201754/include/ppc -Ic:/ghs/comp_201754/src/libsys
                            16	#		-Igendata -Iinclude ../../../BSW/Fbl/fbl_mem.c
                            17	#Source File:   ../../../BSW/Fbl/fbl_mem.c
                            18	#Directory:     C:\Vector\CBD1800772_D00_Mpc57xx\Demo\DemoFbl\Appl
                            19	#Compile Date:  Fri Apr 10 08:32:14 2020
                            20	#Host OS:       Win32
                            21	#Version:       C-POWERPC 2017.5.4 RELEASE VERSION
                            22	#Release:       Compiler v2017.5.4
                            23	#Revision Date: Wed Oct 04 11:39:37 2017
                            24	#Release Date:  Wed Oct 04 09:00:05 2017
                            25	# ecom  -g -w -OMS
                            26	
                            27	#1: /***********************************************************************************************************************
                            28	#2:  *  FILE DESCRIPTION
                            29	#3:  *  ------------------------------------------------------------------------------------------------------------------*/
                            30	#4: /** \file
                            31	#5:  *  \brief        Library containing common functionality for memory programming:
                            32	#6:  *                - Erase of memory region
                            33	#7:  *                - Data processing (e.g. decryption and decompression)
                            34	#8:  *                - Segmentation and alignment
                            35	#9:  *                - Signature / checksum verification over RAM and ROM contents
                            36	#10:  *                - Pipelined programming
                            37	#11:  *
                            38	#12:  *                Used by OEM dependent diagnostics to program incoming download data.
                            39	#13:  *
                            40	#14:  *  --------------------------------------------------------------------------------------------------------------------
                            41	#15:  *  COPYRIGHT
                            42	#16:  *  --------------------------------------------------------------------------------------------------------------------
                            43	#17:  *  \par Copyright

                                   Fri Apr 10 08:32:15 2020           Page 2
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                            44	#18:  *  \verbatim
                            45	#19:  *  Copyright (c) 2018 by Vector Informatik GmbH.                                                  All rights reserved.
                            46	#20:  *
                            47	#21:  *                This software is copyright protected and proprietary to Vector Informatik GmbH.
                            48	#22:  *                Vector Informatik GmbH grants to you only those rights as set out in the license conditions.
                            49	#23:  *                All other rights remain with Vector Informatik GmbH.
                            50	#24:  *  \endverbatim
                            51	#25:  */
                            52	#26: /**********************************************************************************************************************/
                            53	#28: /***********************************************************************************************************************
                            54	#29:  *  AUTHOR IDENTITY
                            55	#30:  *  --------------------------------------------------------------------------------------------------------------------
                            56	#31:  *  Name                          Initials      Company
                            57	#32:  *  --------------------------------------------------------------------------------------------------------------------
                            58	#33:  *  Joern Herwig                  JHg           Vector Informatik GmbH
                            59	#34:  *  Achim Strobelt                Ach           Vector Informatik GmbH
                            60	#35:  *  Alexander Starke              ASe           Vector Informatik GmbH
                            61	#36:  *  Ralf Haegenlaeuer             HRf           Vector Informatik GmbH
                            62	#37:  *  --------------------------------------------------------------------------------------------------------------------
                            63	#38:  *  REVISION HISTORY
                            64	#39:  *  --------------------------------------------------------------------------------------------------------------------
                            65	#40:  *  Version    Date        Author  Change Id        Description
                            66	#41:  *  --------------------------------------------------------------------------------------------------------------------
                            67	#42:  *  01.00.00   2012-03-23  JHg     -                Initial release
                            68	#43:  *  01.00.01   2012-03-26  JHg     -                Added description to file header
                            69	#44:  *                                 -                Added unsigned qualifier to constants
                            70	#45:  *  01.01.00   2012-04-05  JHg     ESCAN00057963    Initialization of return value in segment end indication when
                            71	#46:  *                                                   remainder handling is disabled
                            72	#47:  *                                                  Changes and optimizations after code review
                            73	#48:  *  01.02.00   2012-04-27  JHg     ESCAN00058452    Added support for processed length
                            74	#49:  *                                 ESCAN00058621    Added __ApplFblMemCopyBuffer
                            75	#50:  *  01.03.00   2012-06-22  JHg     ESCAN00059475    Restore preamble in segment end indication
                            76	#51:  *                                 ESCAN00059477    Restore default preamble offset in segment end indication
                            77	#52:  *                                                  Disable remainder handling for volatile memory
                            78	#53:  *                                                  Check for potential buffer overflow in FblMemGetActiveBuffer
                            79	#54:  *  01.04.00   2013-02-01  JHg     ESCAN00064290    Extensions for multi processor systems (pass-through)
                            80	#55:  *                                                   Rework of block start indication interface
                            81	#56:  *                                                   Pass additional info in structure
                            82	#57:  *                         JHg     ESCAN00064292    Added block erase
                            83	#58:  *                         JHg     ESCAN00064296    Preamble length switchable at runtime
                            84	#59:  *                         JHg     ESCAN00064301    Added signature verification on ROM contents
                            85	#60:  *                                                   Rework of block verify interface
                            86	#61:  *                                                   Keep track of segment history (structure provided externally)
                            87	#62:  *                                                   Extended pass-through interface for BlockVerify to pass
                            88	#63:  *                                                   user-specific information
                            89	#64:  *                         JHg     ESCAN00061335    Accept buffer offsets differing from constant preamble length
                            90	#65:  *                                                   in data indication
                            91	#66:  *                         JHg     ESCAN00064333    Differentiate watchdog trigger w/ and w/o status
                            92	#67:  *                         JHg     ESCAN00061764    Rework of function return paths
                            93	#68:  *                         JHg     ESCAN00061814    Encapsulate FblMemQueuePrepend with FBL_ENABLE_DATA_PROCESSING
                            94	#69:  *                         JHg     ESCAN00064338    Added post handler for SegmentEndIndication
                            95	#70:  *                         Ach     ESCAN00062919    Adapted comments to use Doxygen
                            96	#71:  *                         JHg     ESCAN00064334    Added interface to remap error codes to OEM dependent value
                            97	#72:  *                         JHg     ESCAN00064339    Segmented data processing: data produced during one cycle may be
                            98	#73:  *                                                   smaller than buffer size
                            99	#74:  *                         JHg     ESCAN00064330    Explicit resume of suspended operation

                                   Fri Apr 10 08:32:15 2020           Page 3
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                           100	#75:  *                                                   Added state "suspend pending"
                           101	#76:  *                         JHg     ESCAN00064343    Added support for multiple input sources
                           102	#77:  *                         JHg     ESCAN00064543    Release active buffer in case of failed processing
                           103	#78:  *                         JHg     ESCAN00064720    Replaced __ApplFblMemCheckDfi by __ApplFblMemIsDataProcessingRequired
                           104	#79:  *  01.05.00   2013-04-10  JHg     ESCAN00064871    Reserve space for remainder data to be programmed
                           105	#80:  *                         JHg     ESCAN00064890    Move processing queue handle to global context
                           106	#81:  *                         JHg     -                Minor fixes
                           107	#82:  *                         JHg     ESCAN00065830    Encapsulate setting of gProgContext
                           108	#83:  *                         JHg     ESCAN00066375    Restore original data after programming padded buffer
                           109	#84:  *                                                  Relocate buffer offset or search matching input buffer
                           110	#85:  *                         JHg     ESCAN00066377    Encapsulate erase functionality
                           111	#86:  *                         JHg     ESCAN00066379    Added interface version compatibility check
                           112	#87:  *                         JHg     ESCAN00066380    Exported FblMemInit
                           113	#88:  *  01.06.00   2013-07-22  ASe     ESCAN00066743    Fixed compiler warning regarding gProgContext
                           114	#89:  *                         JHg     ESCAN00067433    Added FblMemDeinit
                           115	#90:  *                         JHg     ESCAN00068321    Force response pending for erase operation
                           116	#91:  *                         JHg     ESCAN00069161    Added pipelined verification
                           117	#92:  *                                                   Rework of block start and verify interface
                           118	#93:  *                                                   Changed processing queue from FIFO to priority queue
                           119	#94:  *                                                   Added jobs for finalization of data processing and remainder
                           120	#95:  *                                                   General refactoring
                           121	#96:  *                         JHg     ESCAN00069190    Rework suspend operation
                           122	#97:  *  01.07.00   2013-08-16  JHg     ESCAN00069507    Corrected input type of FblMemSetInteger
                           123	#98:  *                         JHg     ESCAN00069803    Enable/disable verification at run-time
                           124	#99:  *                         JHg     ESCAN00069781    Corrected net size of data processing buffer
                           125	#100:  *                                                   Added canary word to detect buffer overflows
                           126	#101:  *                         JHg     ESCAN00069797    Set low priority of data processing equal to input priority
                           127	#102:  *                         JHg     ESCAN00069843    Limit restoring of data after padding to segmented input use-case
                           128	#103:  *                                                   Use dedicated buffer to store temporary data
                           129	#104:  *  02.00.00   2013-12-12  JHg     ESCAN00069945    Encapsulate write finalization entry in gLengthLimits
                           130	#105:  *                         JHg     ESCAN00072568    Perform input verification initialization on first segment start
                           131	#106:  *                         JHg     ESCAN00071344    Processed length: Limit programming to area defined by block
                           132	#107:  *                         JHg     -                Additional canary word in front of buffer
                           133	#108:  *                         JHg     ESCAN00072569    Raised major version to match API version
                           134	#109:  *                         JHg     ESCAN00072156    Encapsulation of FblMemGetSpecificRemainder
                           135	#110:  *                         JHg     ESCAN00072570    Removed encapsulation of gProgContext
                           136	#111:  *                         JHg     ESCAN00072631    Set programming state to pending in FblMemProgramBuffer
                           137	#112:  *  02.01.00   2014-03-12  JHg     ESCAN00073504    No changes
                           138	#113:  *                         JHg     ESCAN00074066    Explicitly resume operation for finalization of pipelined verification
                           139	#114:  *  02.02.00   2014-05-09  JHg     ESCAN00075225    Restore default input offset for RAM data
                           140	#115:  *                         JHg     -                Remove explicit memory qualifiers from __ApplFblMemCopyBuffer
                           141	#116:  *  03.00.00   2015-03-03  JHg     ESCAN00076591    Added support for external stream output
                           142	#117:  *                         JHg     ESCAN00077689    Finalize data processing when remainder handling is disabled
                           143	#118:  *                                 -                Support combination of stream output and pipelined verification
                           144	#119:  *                         JHg     ESCAN00077891    Added job for handling of segment address (pipelined verification)
                           145	#120:  *                         JHg     ESCAN00081491    Added support for resumable programming
                           146	#121:  *                         JHg     ESCAN00081494    Added support for verification on processed input data
                           147	#122:  *                         JHg     ESCAN00081493    Added selective pipelined programming (forced flush when disabled)
                           148	#123:  *  03.01.00   2015-04-23  JHg     ESCAN00082572    Introduced job class for handling of pipelined queues
                           149	#124:  *                         JHg     ESCAN00082605    Added support for reporting of progress information
                           150	#125:  *                         JHg     ESCAN00082606    Added support for gap fill (requires ordered segments)
                           151	#126:  *  03.01.01   2015-04-27  JHg     ESCAN00082700    Removed assertion for consumed buffer in FblProcessJob
                           152	#127:  *  03.01.02   2015-05-27  JHg     ESCAN00083138    Reworked padding byte handling and gap fill calculations
                           153	#128:  *  03.01.03   2015-06-13  JHg     ESCAN00083358    Don't update position after hashing of segment address (pipelined verification)
                           154	#129:  *                         JHg     ESCAN00083390    Update buffer size of pipelined verification read jobs
                           155	#130:  *                         JHg     ESCAN00083391    Unconditionally unblock pipelined verification queue when

                                   Fri Apr 10 08:32:15 2020           Page 4
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                           156	#131:  *                                                   FBL_MEM_ENABLE_VERIFY_PIPELINED_ADDRESS_LENGTH is enabled
                           157	#132:  *                         JHg     ESCAN00083392    Pass correct block length to output verification
                           158	#133:  *  03.02.00   2015-07-21  JHg     ESCAN00084101    Unconditionally limit write length for
                           159	#134:  *                                                   FBL_ENABLE_ADAPTIVE_DATA_TRANSFER_RCRRP
                           160	#135:  *                         JHg     ESCAN00084102    No changes
                           161	#136:  *  03.02.01   2015-08-19  JHg     ESCAN00084279    Re-initialize data processing on snapshot restoration
                           162	#137:  *                         JHg     ESCAN00084559    Clear write remainder on snapshot creation
                           163	#138:  *                         JHg     ESCAN00084560    Force finalization when programming unprocessed data
                           164	#139:  *  03.02.02   2015-09-04  JHg     ESCAN00084994    Postpone remainder handling after checkpoint indication
                           165	#140:  *  04.00.00   2015-09-17  JHg     ESCAN00085249    Support combination of input and processed verification
                           166	#141:  *                         JHg     ESCAN00085250    Run-time decision whether address and length info is included in verification
                           167	#142:  *                         JHg     ESCAN00085251    Pass external segment info to __ApplFblMemIsPipelinedProgrammingDisabled
                           168	#143:  *  04.01.00   2016-04-01  JHg     ESCAN00087997    Rx interrupt: Critical section around crucial accesses to programming state
                           169	#144:  *                         JHg     ESCAN00088935    Corrected segment info pointer passed to __ApplFblMemIsPipelinedProgrammingDisabled
                           170	#145:  *  04.02.00   2016-10-06  JHg     ESCAN00090120    Changed segmentIndex parameter of FblMemPrepareVerifyPipeJob to vuintx type
                           171	#146:  *                         HRf     ESCAN00091253    Change allowed state when all data has been processed within the
                           172	#147:  *                                                   last chunk of data
                           173	#148:  *  04.02.01   2017-05-31  JHg     ESCAN00094695    Explicitly align gRemainderBuffer
                           174	#149:  *                         JHg     ESCAN00095201    Limit data processing input to less than 64 kB
                           175	#150:  *                         JHg     ESCAN00095356    Disable length check in FblMemDataIndication when stream output is active
                           176	#151:  *  04.03.00   2017-07-26  JHg     ESCAN00095772    Disable remainder handling for processed input data
                           177	#152:  *                         JHg     ESCAN00095774    Added FblMemFlushInputData
                           178	#153:  *                         JHg     ESCAN00095683    Place FblMemResumeIndication in RAMCODE section
                           179	#154:  *                         JHg     ESCAN00096075    Re-initialize input verification routines on snapshot restoration
                           180	#155:  *  04.03.01   2017-08-07  JHg     ESCAN00096209    Only update running input data length when data is unprocessed
                           181	#156:  *  04.04.00   2018-08-22  JHg     ESCAN00100464    Only store segments in snapshot when BlockStartIndication was executed before
                           182	#157:  *                         JHg     ESCAN00097115    Increase gap fill buffer to maximum segment size when necessary
                           183	#158:  *                         JHg     ESCAN00100482    Added hook __ApplFblMemConditionCheck before and after memory operations
                           184	#159:  **********************************************************************************************************************/
                           185	#161: /***********************************************************************************************************************
                           186	#162:  *  INCLUDES
                           187	#163:  **********************************************************************************************************************/
                           188	#165: #include "fbl_inc.h"
                           189	#166: #include "fbl_mem.h"
                           190	#168: /***********************************************************************************************************************
                           191	#169:  *  VERSION
                           192	#170:  **********************************************************************************************************************/
                           193	#172: #if ( FBLLIB_MEM_VERSION != 0x0404u ) || \
                           194	#173:     ( FBLLIB_MEM_RELEASE_VERSION != 0x00u )
                           195	#174: # error "Error in fbl_mem.c: Source and Header file are inconsistent!"
                           196	#175: #endif
                           197	#177: #if ( FBLLIB_MEM_VERSION != _FBLLIB_MEM_VERSION ) || \
                           198	#178:     ( FBLLIB_MEM_RELEASE_VERSION != _FBLLIB_MEM_RELEASE_VERSION )
                           199	#179: # error "Error in fbl_mem.c: Source and v_ver.h are inconsistent!"
                           200	#180: #endif
                           201	#182: /* Interface version compatibility check */
                           202	#183: #if defined( FBL_MEM_API_REFERENCE_VERSION_MAJOR ) && \
                           203	#184:     defined( FBL_MEM_API_REFERENCE_VERSION_MINOR )
                           204	#185: #else
                           205	#186: #  error "Error in fbl_mem.c: Interface version requirements not defined!"
                           206	#187: #endif
                           207	#189: #if ( FBL_MEM_API_REFERENCE_VERSION_MAJOR != FBL_MEM_API_VERSION_MAJOR) || \
                           208	#190:     ( FBL_MEM_API_REFERENCE_VERSION_MINOR > FBL_MEM_API_VERSION_MINOR)
                           209	#191: # error "Error in fbl_mem.c: Interface version compatibility check failed!"
                           210	#192: #endif
                           211	#194: /***********************************************************************************************************************

                                   Fri Apr 10 08:32:15 2020           Page 5
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                           212	#195:  *  DEFINES
                           213	#196:  **********************************************************************************************************************/
                           214	#198: /* PRQA S 3458 TAG_FblMem_3458_1 */ /* MD_MSR_19.4 */
                           215	#199: /* PRQA S 3453 TAG_FblMem_3453_1 */ /* MD_MSR_19.7 */
                           216	#201: /** Internal maximum segment size */
                           217	#202: #define FBL_MEM_SEGMENT_SIZE              FBL_MAX_SEGMENT_SIZE
                           218	#204: /*-- Remap configuration switches--------------------------------------------*/
                           219	#206: #if defined( FBL_ENABLE_UNALIGNED_DATA_TRANSFER )
                           220	#207: /** Input buffer changed after data indication: Store and restore preamble */
                           221	#208: # define FBL_MEM_ENABLE_PREAMBLE_HANDLING
                           222	#209: #endif /* FBL_ENABLE_PIPELINED_PROGRAMMING || FBL_ENABLE_UNALIGNED_DATA_TRANSFER */
                           223	#211: #if defined( FBL_ENABLE_DATA_PROCESSING ) || \
                           224	#212:     defined( FBL_ENABLE_UNALIGNED_DATA_TRANSFER )
                           225	#213: /* No remainder handling necessary for single byte segments */
                           226	#214: # if ( FBL_MEM_SEGMENT_SIZE > 1u )
                           227	#215: /** Programming may result in remainder which has to be stored for next cycle */
                           228	#216: #  define FBL_MEM_ENABLE_REMAINDER_HANDLING
                           229	#217: # endif /* FBL_MEM_SEGMENT_SIZE > 1u */
                           230	#218: #endif /* FBL_ENABLE_DATA_PROCESSING || FBL_ENABLE_UNALIGNED_DATA_TRANSFER */
                           231	#220: #if defined( FBL_ENABLE_ADAPTIVE_DATA_TRANSFER_RCRRP )
                           232	#221: /** Split buffer operations (write, data processing, verification and pass-through) into smaller pieces */
                           233	#222: # define FBL_MEM_ENABLE_SEGMENTATION
                           234	#223: #endif /* FBL_ENABLE_PIPELINED_PROGRAMMING || FBL_ENABLE_ADAPTIVE_DATA_TRANSFER_RCRRP */
                           235	#225: #if defined( FBL_ENABLE_PROCESSED_DATA_LENGTH )
                           236	#226: /** Keep track of running remaining length of input data */
                           237	#227: #  define FBL_MEM_ENABLE_INPUT_LENGTH
                           238	#228: #endif /* FBL_ENABLE_PIPELINED_PROGRAMMING || FBL_ENABLE_PROCESSED_DATA_LENGTH */
                           239	#231: #if defined( FBL_MEM_WRITE_SEGMENTATION )
                           240	#232: #else
                           241	#233: /** Set segmentation to default value */
                           242	#234: # define FBL_MEM_WRITE_SEGMENTATION    (FBL_MEM_BUFFER_SIZE + FBL_MEM_SEGMENT_SIZE)
                           243	#235: #endif /* FBL_MEM_WRITE_SEGMENTATION */
                           244	#237: #if defined( FBL_ENABLE_DATA_PROCESSING )
                           245	#238: # if defined( FBL_MEM_ENABLE_SEGMENTATION )
                           246	#239: #  define FBL_MEM_INTERNAL_PROC_SEGMENTATION       FBL_MEM_PROC_SEGMENTATION
                           247	#240: #  if ( FBL_MEM_INTERNAL_PROC_SEGMENTATION == FBL_MEM_PROC_BUFFER_SIZE)
                           248	#241: /* Segmented processing enabled, but data processing segmentation matches buffer size */
                           249	#242: #  else
                           250	#243: /* Split data processing into smaller pieces */
                           251	#244: #   define FBL_MEM_ENABLE_PROC_SEGMENTATION
                           252	#245: #  endif
                           253	#246: # else
                           254	#247: /* Fill data processing buffer at once */
                           255	#248: #  define FBL_MEM_INTERNAL_PROC_SEGMENTATION       FBL_MEM_PROC_BUFFER_SIZE
                           256	#249: # endif /* FBL_MEM_ENABLE_SEGMENTATION */
                           257	#250: #endif /* FBL_ENABLE_DATA_PROCESSING */
                           258	#253: #if defined( FBL_MEM_ENABLE_VERIFY_STREAM )  || \
                           259	#254:     defined( FBL_MEM_ENABLE_VERIFY_OUTPUT )
                           260	#255: /** Verification is active */
                           261	#256: # define FBL_MEM_ENABLE_VERIFICATION
                           262	#257: #endif /* FBL_MEM_ENABLE_VERIFY_STREAM | FBL_MEM_ENABLE_VERIFY_OUTPUT */
                           263	#259: #if defined( FBL_MEM_VERIFY_SEGMENTATION )
                           264	#260: # if defined( FBL_MEM_VERIFY_INPUT_SEGMENTATION )
                           265	#261: # else
                           266	#262: /** Set input verification length to common segmentation length */
                           267	#263: #  define FBL_MEM_VERIFY_INPUT_SEGMENTATION        FBL_MEM_VERIFY_SEGMENTATION

                                   Fri Apr 10 08:32:15 2020           Page 6
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                           268	#264: # endif /* FBL_MEM_VERIFY_INPUT_SEGMENTATION */
                           269	#265: # if defined( FBL_MEM_VERIFY_PIPELINED_SEGMENTATION )
                           270	#266: # else
                           271	#267: /** Set pipelined verification length to common segmentation length */
                           272	#268: #  define FBL_MEM_VERIFY_PIPELINED_SEGMENTATION    FBL_MEM_VERIFY_SEGMENTATION
                           273	#269: # endif /* FBL_MEM_VERIFY_PIPELINED_SEGMENTATION */
                           274	#270: #endif /* FBL_MEM_VERIFY_SEGMENTATION */
                           275	#272: #if defined( FBL_MEM_VERIFY_INPUT_SEGMENTATION )
                           276	#273: #else
                           277	#274: /** Set input verification length to default value */
                           278	#275: # define FBL_MEM_VERIFY_INPUT_SEGMENTATION         64u
                           279	#276: #endif /* FBL_MEM_VERIFY_INPUT_SEGMENTATION */
                           280	#278: #if defined( FBL_MEM_VERIFY_PIPELINED_SEGMENTATION )
                           281	#279: #else
                           282	#280: /** Set pipelined verification length to default value */
                           283	#281: # define FBL_MEM_VERIFY_PIPELINED_SEGMENTATION     64u
                           284	#282: #endif /* FBL_MEM_VERIFY_PIPELINED_SEGMENTATION */
                           285	#285: /** Response pending handling */
                           286	#286: # define FBL_MEM_ENABLE_RESPONSE_PENDING
                           287	#288: /** Flush input data in data indication function */
                           288	#289: # define FBL_MEM_ENABLE_INPUT_DATA_FLUSH
                           289	#291: #if defined( FBL_MEM_ENABLE_GAP_FILL )
                           290	#292: # if defined( FBL_MEM_GAP_FILL_SEGMENTATION )
                           291	#293: # else
                           292	#294: /* Buffer size for gap fill function */
                           293	#295: #  if defined( FBL_MEM_WRITE_SEGMENTATION )
                           294	#296: #   if (FBL_MEM_SEGMENT_SIZE > FBL_MEM_WRITE_SEGMENTATION)
                           295	#297: #    define FBL_MEM_GAP_FILL_SEGMENTATION          FBL_MEM_SEGMENT_SIZE
                           296	#298: #   else
                           297	#299: #    define FBL_MEM_GAP_FILL_SEGMENTATION          FBL_MEM_WRITE_SEGMENTATION
                           298	#300: #   endif
                           299	#301: #  else
                           300	#302: #   define FBL_MEM_GAP_FILL_SEGMENTATION           FBL_MEM_SEGMENT_SIZE
                           301	#303: #  endif /* FBL_MEM_WRITE_SEGMENTATION */
                           302	#304: # endif /* FBL_MEM_GAP_FILL_SEGMENTATION */
                           303	#305: #endif /* FBL_MEM_ENABLE_GAP_FILL */
                           304	#307: #if defined( FBL_MEM_ENABLE_PROGRESS_INFO )
                           305	#308: # if defined( FBL_MEM_PROGRESS_ERASE )
                           306	#309: # else
                           307	#310: /** Progress percentage of erase operation */
                           308	#311: #  define FBL_MEM_PROGRESS_ERASE                   10u
                           309	#312: # endif /* FBL_MEM_PROGRESS_ERASE */
                           310	#313: # if defined( FBL_MEM_PROGRESS_VERIFY )
                           311	#314: # else
                           312	#315: /** Progress percentage of final verify operation */
                           313	#316: #  define FBL_MEM_PROGRESS_VERIFY                  10u
                           314	#317: # endif /* FBL_MEM_PROGRESS_VERIFY */
                           315	#318: # if defined( FBL_MEM_PROGRESS_INITIAL )
                           316	#319: # else
                           317	#320: /** Initial progress value of overall progress and partial progress */
                           318	#321: #  define FBL_MEM_PROGRESS_INITIAL                 0u
                           319	#322: # endif /* FBL_MEM_PROGRESS_INITIAL */
                           320	#323: # if defined( FBL_MEM_PROGRESS_COMPLETE )
                           321	#324: # else
                           322	#325: /** Final progress value of overall progress and partial progress */
                           323	#326: #  define FBL_MEM_PROGRESS_COMPLETE                100u

                                   Fri Apr 10 08:32:15 2020           Page 7
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                           324	#327: # endif /* FBL_MEM_PROGRESS_COMPLETE */
                           325	#328: # if defined( FBL_MEM_PROGRESS_PROGRAM )
                           326	#329: # else
                           327	#330: /** Progress percentage of program operation */
                           328	#331: #  define FBL_MEM_PROGRESS_PROGRAM     (FBL_MEM_PROGRESS_COMPLETE - FBL_MEM_PROGRESS_ERASE - FBL_MEM_PROGRESS_VERIFY)
                           329	#332: # endif /* FBL_MEM_PROGRESS_PROGRAM */
                           330	#333: # if defined( FBL_MEM_PROGRESS_THRESHOLD_BYTES )
                           331	#334: # else
                           332	#335: /** Threshold for consecutive calls to reporting callback (in bytes) */
                           333	#336: #  define FBL_MEM_PROGRESS_THRESHOLD_BYTES         1024u
                           334	#337: # endif /* FBL_MEM_PROGRESS_THRESHOLD_BYTES */
                           335	#338: # if defined( FBL_MEM_PROGRESS_THRESHOLD_PERCENTAGE )
                           336	#339: # else
                           337	#340: /** Threshold for consecutive calls to reporting callback (in percentage points) */
                           338	#341: #  define FBL_MEM_PROGRESS_THRESHOLD_PERCENTAGE    5u
                           339	#342: # endif /* FBL_MEM_PROGRESS_THRESHOLD_PERCENTAGE */
                           340	#343: #endif /* FBL_MEM_ENABLE_PROGRESS_INFO */
                           341	#345: /*-- Processing queue -------------------------------------------------------*/
                           342	#346: /* Number of input buffers */
                           343	#347: /** Single buffer use-case */
                           344	#348: # define FBL_MEM_QUEUE_ENTRIES_INPUT               1u
                           345	#349: /** Actual buffer count
                           346	#350:  *  Input queue shared amongst all input sources */
                           347	#351: #define FBL_MEM_BUFFER_COUNT_INPUT                 ((FBL_MEM_QUEUE_ENTRIES_INPUT + FBL_MEM_SOURCE_COUNT) - 1u)
                           348	#353: # define FBL_MEM_QUEUE_ENTRIES_VERIFY_INPUT        0u
                           349	#355: # define FBL_MEM_QUEUE_ENTRIES_VERIFY_PROCESSED    0u
                           350	#357: # define FBL_MEM_QUEUE_ENTRIES_VERIFY_PIPE         0u
                           351	#359: #if defined( FBL_ENABLE_DATA_PROCESSING )
                           352	#360: /** Reserve entries for write and finalization jobs */
                           353	#361: # define FBL_MEM_QUEUE_ENTRIES_DATA_PROC           2u
                           354	#362: #else
                           355	#363: # define FBL_MEM_QUEUE_ENTRIES_DATA_PROC           0u
                           356	#364: #endif /* FBL_ENABLE_DATA_PROCESSING */
                           357	#366: #if defined( FBL_MEM_ENABLE_STREAM_OUTPUT )
                           358	#367: /** Reserve entries for write and finalization jobs */
                           359	#368: # define FBL_MEM_QUEUE_ENTRIES_STREAM_OUTPUT       2u
                           360	#369: #else
                           361	#370: # define FBL_MEM_QUEUE_ENTRIES_STREAM_OUTPUT       0u
                           362	#371: #endif /* FBL_MEM_ENABLE_STREAM_OUTPUT */
                           363	#373: #if defined( FBL_MEM_ENABLE_REMAINDER_HANDLING )
                           364	#374: /** Reserve entry for write remainder finalization
                           365	#375:   * Only added in case processing queue already used */
                           366	#376: # define FBL_MEM_QUEUE_ENTRIES_REMAINDER           1u
                           367	#377: #else
                           368	#378: # define FBL_MEM_QUEUE_ENTRIES_REMAINDER           0u
                           369	#379: #endif /* FBL_MEM_ENABLE_REMAINDER_HANDLING */
                           370	#381: # define FBL_MEM_QUEUE_ENTRIES_CHECKPOINT          0u
                           371	#383: #if defined( FBL_MEM_ENABLE_GAP_FILL )
                           372	#384: /** Reserve entry for gap fill */
                           373	#385: # define FBL_MEM_QUEUE_ENTRIES_GAP_FILL            1u
                           374	#386: #else
                           375	#387: # define FBL_MEM_QUEUE_ENTRIES_GAP_FILL            0u
                           376	#388: #endif /* FBL_MEM_ENABLE_GAP_FILL */
                           377	#390: /** Total number of processing queue entries */
                           378	#391: #define FBL_MEM_QUEUE_ENTRIES_PROCESSING  \
                           379	#392:    ( FBL_MEM_QUEUE_ENTRIES_VERIFY_INPUT + FBL_MEM_QUEUE_ENTRIES_VERIFY_PROCESSED + FBL_MEM_QUEUE_ENTRIES_DATA_PROC   \

                                   Fri Apr 10 08:32:15 2020           Page 8
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                           380	#393:      + FBL_MEM_QUEUE_ENTRIES_STREAM_OUTPUT + FBL_MEM_QUEUE_ENTRIES_INPUT + FBL_MEM_QUEUE_ENTRIES_VERIFY_PIPE         \
                           381	#394:      + FBL_MEM_QUEUE_ENTRIES_CHECKPOINT + FBL_MEM_QUEUE_ENTRIES_GAP_FILL )
                           382	#396: #if ( FBL_MEM_QUEUE_ENTRIES_PROCESSING > 1u )
                           383	#397: /** Activate processing queue */
                           384	#398: # define FBL_MEM_ENABLE_PROC_QUEUE
                           385	#399: /** Add remainder handling to processing queue */
                           386	#400: # define FBL_MEM_QUEUE_ENTRIES_TOTAL               (FBL_MEM_QUEUE_ENTRIES_PROCESSING + FBL_MEM_QUEUE_ENTRIES_REMAINDER)
                           387	#401: #else
                           388	#402: /** Single buffer use-case: no processing queue required */
                           389	#403: # define FBL_MEM_DISABLE_PROC_QUEUE
                           390	#404: #endif /* FBL_MEM_QUEUE_ENTRIES_PROCESSING > 1u */
                           391	#406: #if defined( FBL_MEM_ENABLE_REMAINDER_HANDLING )
                           392	#407: # if defined( FBL_MEM_ENABLE_PROC_QUEUE )
                           393	#408: # else
                           394	#409: /** Update single write job to trigger remainder flush */
                           395	#410: #  define FBL_MEM_ENABLE_REMAINDER_HANDLING_SINGLE_JOB
                           396	#411: # endif /* FBL_MEM_ENABLE_PROC_QUEUE */
                           397	#412: #endif /* FBL_MEM_ENABLE_REMAINDER_HANDLING */
                           398	#414: #if defined( FBL_MEM_ENABLE_PROC_QUEUE )
                           399	#415: /* Processing queue specific */
                           400	#417: /** Reserve two entries in data structure for explicit free and used head */
                           401	#418: # define FBL_MEM_RESERVED_QUEUE_ENTRIES         2u
                           402	#419: /* Handles for free and used head */
                           403	#420: # define FBL_MEM_QUEUE_HANDLE_HEAD_USED         0u
                           404	#421: # define FBL_MEM_QUEUE_HANDLE_HEAD_FREE         1u
                           405	#422: /* Start handle for actual entries */
                           406	#423: # define FBL_MEM_QUEUE_HANDLE_ENTRY_OFFSET      2u
                           407	#425: /** Size of data structure for processing queue  */
                           408	#426: # define FBL_MEM_QUEUE_SIZE_PROCESSING          (FBL_MEM_RESERVED_QUEUE_ENTRIES + FBL_MEM_QUEUE_ENTRIES_TOTAL)
                           409	#428: /*
                           410	#429:    Access macros to check for empty queues
                           411	#430:    A queue is empty if the head references itself (cyclic double linked list)
                           412	#431: */
                           413	#432: # define FblMemQueueIsEmpty(queue)              (FBL_MEM_QUEUE_HANDLE_HEAD_USED == (queue)[FBL_MEM_QUEUE_HANDLE_HEAD_USED].next)
                           414	#433: # define FblMemQueueIsFull(queue)               (FBL_MEM_QUEUE_HANDLE_HEAD_FREE == (queue)[FBL_MEM_QUEUE_HANDLE_HEAD_FREE].next)
                           415	#435: /* Access macros to get handle of first entry */
                           416	#436: # define FblMemQueueGetFirstUsedHandle(queue)   ((queue)[FBL_MEM_QUEUE_HANDLE_HEAD_USED].next)
                           417	#437: # define FblMemQueueGetLastUsedHandle(queue)    ((queue)[FBL_MEM_QUEUE_HANDLE_HEAD_USED].prev)
                           418	#438: # define FblMemQueueGetFirstFreeHandle(queue)   ((queue)[FBL_MEM_QUEUE_HANDLE_HEAD_FREE].next)
                           419	#440: /** Access macro to entry using handle */
                           420	#441: # define FblMemQueueGetEntry(queue, handle)     ((queue)[handle])
                           421	#442: /* Access macros to get first or last entry */
                           422	#443: # define FblMemQueueGetFirstUsedEntry(queue)    (FblMemQueueGetEntry((queue), FblMemQueueGetFirstUsedHandle(queue)))
                           423	#444: # define FblMemQueueGetLastUsedEntry(queue)     (FblMemQueueGetEntry((queue), FblMemQueueGetLastUsedHandle(queue)))
                           424	#445: # define FblMemQueueGetFirstFreeEntry(queue)    (FblMemQueueGetEntry((queue), FblMemQueueGetFirstFreeHandle(queue)))
                           425	#446: #endif /* FBL_MEM_ENABLE_PROC_QUEUE */
                           426	#448: /* Default priorities for queue entries */
                           427	#449: # define FBL_MEM_QUEUE_PRIO_LOWEST              0x00u
                           428	#450: # define FBL_MEM_QUEUE_PRIO_HIGHEST             0xFFu
                           429	#452: /** Null queue entry pointer */
                           430	#453: # define FBL_MEM_QUEUE_NULL                     ((V_MEMRAM1 tFblMemQueueEntry V_MEMRAM2 V_MEMRAM3 *)V_NULL)
                           431	#454: /** Null job pointer */
                           432	#455: # define FBL_MEM_JOB_NULL                       ((V_MEMRAM1 tFblMemJob V_MEMRAM2 V_MEMRAM3 *)V_NULL)
                           433	#457: /** Remap fill buffer for single input buffer use-case */
                           434	#458: # define FblMemGetPendingInputJob()             (&FBL_MEM_INPUT_JOB[0])
                           435	#460: /*-- Verification -----------------------------------------------------------*/

                                   Fri Apr 10 08:32:15 2020           Page 9
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                           436	#461: /** Null verification status pointer */
                           437	#462: #define FBL_MEM_VERIFY_STATUS_NULL              ((V_MEMRAM1 tFblMemVerifyStatus V_MEMRAM2 V_MEMRAM3 *)V_NULL)
                           438	#463: #if defined( FBL_MEM_ENABLE_VERIFY_STREAM )
                           439	#464: /** Null input verification function pointer (use of 0 avoid cast from pointer to object) */
                           440	#465: # define FBL_MEM_VERIFY_FCT_INPUT_NULL          ((tFblMemVerifyFctInput)0)
                           441	#466: #endif /* FBL_MEM_ENABLE_VERIFY_STREAM */
                           442	#467: #if defined( FBL_MEM_ENABLE_VERIFY_OUTPUT )
                           443	#468: /** Null input verification function pointer (use of 0 avoid cast from pointer to object) */
                           444	#469: # define FBL_MEM_VERIFY_FCT_OUTPUT_NULL         ((tFblMemVerifyFctOutput)0)
                           445	#470: #endif /* FBL_MEM_ENABLE_VERIFY_OUTPUT */
                           446	#472: /*-- Segment and platform alignment -----------------------------------------*/
                           447	#474: /** Calculate remainder for given address range and segment size */
                           448	#475: #define FblMemGetRemainder(address, length, segSize)  ((tFblLength)(((address) + (tFblAddress)(length)) & ((tFblAddress)(segSize) - 1u)))
                           449	#476: /** Remainder for global segment size */
                           450	#477: #define FblMemGetGlobalRemainder(address, length)     FblMemGetRemainder((address), (length), FBL_MEM_SEGMENT_SIZE)
                           451	#478: /* Use global or device specific segment size for remainder determination? */
                           452	#479: # if defined( FBL_ENABLE_MULTIPLE_MEM_DEVICES ) && \
                           453	#480:      defined( FBL_MEM_ENABLE_REMAINDER_HANDLING )
                           454	#481: #  define FblMemGetWriteRemainder(address, length)    FblMemGetSpecificRemainder((address), (length))
                           455	#482: # else
                           456	#483: /** Only one device present, global remainder equals device specific remainder */
                           457	#484: #  define FblMemGetWriteRemainder(address, length)    FblMemGetGlobalRemainder((address), (length))
                           458	#485: # endif /* FBL_ENABLE_MULTIPLE_MEM_DEVICES || FBL_MEM_ENABLE_REMAINDER_HANDLING */
                           459	#487: /* Buffer padding for potential write remainder */
                           460	#488: #if defined( FBL_MEM_ENABLE_REMAINDER_HANDLING )
                           461	#489: /* Reserve space for remainder from previous cycle and one for buffer padding for last write */
                           462	#490: # define FBL_MEM_REMAINDER_PADDING        (FBL_MEM_SEGMENT_SIZE - 1u)
                           463	#491: /* Reserve space for buffer padding of last write */
                           464	#492: # define FBL_MEM_WRITE_PADDING            (FBL_MEM_SEGMENT_SIZE - 1u)
                           465	#493: #else
                           466	#494: # define FBL_MEM_REMAINDER_PADDING        0u
                           467	#495: # define FBL_MEM_WRITE_PADDING            0u
                           468	#496: #endif /* FBL_MEM_ENABLE_REMAINDER_HANDLING */
                           469	#498: #define FBL_MEM_TOTAL_PADDING             (FBL_MEM_REMAINDER_PADDING + FBL_MEM_WRITE_PADDING)
                           470	#500: #if defined( FBL_ENABLE_SYSTEM_CHECK )
                           471	#501: /** Magic value of "canary" word used to detect buffer overflows (ASCII "Bird") */
                           472	#502: # define FBL_MEM_CANARY_VALUE       0x42697264ul
                           473	#503: #endif /* FBL_ENABLE_SYSTEM_CHECK */
                           474	#505: #if defined( C_CPUTYPE_32BIT ) || \
                           475	#506:     defined( C_CPUTYPE_16BIT )
                           476	#507: # define FBL_MEM_PLATFORM_ALIGN        4u
                           477	#508: # define FBL_MEM_PLATFORM_ALIGN_MASK   0x03u
                           478	#509: #else /* C_CPUTYPE_8BIT */
                           479	#510: # define FBL_MEM_PLATFORM_ALIGN        1u
                           480	#511: # define FBL_MEM_PLATFORM_ALIGN_MASK   0x00u
                           481	#512: #endif /* C_CPUTYPE_32BIT || C_CPUTYPE_16BIT */
                           482	#514: #if defined( FBL_ENABLE_SYSTEM_CHECK )
                           483	#515: /** Macro to generate basic data type including buffer alignment to platform requirements */
                           484	#516: # define FBL_MEM_ALIGNED_BUFFER_TYPE(size)                                 \
                           485	#517:    struct                                                                  \
                           486	#518:    {                                                                       \
                           487	#519:       /** Magic value of "canary" word used to detect buffer overflows */  \
                           488	#520:       vuint32  canaryFront;                                                \
                           489	#521:       /** Reserve buffer for configured size and potential alignment */    \
                           490	#522:       vuint8   data[size];                                                 \
                           491	#523:       /** Magic value of "canary" word used to detect buffer overflows */  \

                                   Fri Apr 10 08:32:15 2020           Page 10
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                           492	#524:       vuint32  canaryBack;                                                 \
                           493	#525:    } /* PRQA S 3412 */ /* MD_FblMem_3412 */
                           494	#526: #else
                           495	#527: /* Force alignment to 32 bit boundary (if required by platform) */
                           496	#528: # if defined( C_CPUTYPE_32BIT ) || \
                           497	#529:      defined( C_CPUTYPE_16BIT )
                           498	#530: /** Macro to generate basic data type including buffer alignment to platform requirements */
                           499	#531: #  define FBL_MEM_ALIGNED_BUFFER_TYPE(size)                                \
                           500	#532:    struct                                                                  \
                           501	#533:    {                                                                       \
                           502	#534:       vuint32  alignDummy;                                                 \
                           503	#535:       /** Reserve buffer for configured size and potential alignment */    \
                           504	#536:       vuint8   data[size];                                                 \
                           505	#537:    } /* PRQA S 3412 */ /* MD_FblMem_3412 */
                           506	#538: # else /* C_CPUTYPE_8BIT */
                           507	#539: /** Macro to generate basic data type including buffer alignment to platform requirements */
                           508	#540: #  define FBL_MEM_ALIGNED_BUFFER_TYPE(size)                                \
                           509	#541:    struct                                                                  \
                           510	#542:    {                                                                       \
                           511	#543:       /** Reserve buffer for configured size and potential alignment */    \
                           512	#544:       vuint8   data[size];                                                 \
                           513	#545:    } /* PRQA S 3412 */ /* MD_FblMem_3412 */
                           514	#546: # endif /* C_CPUTYPE_32BIT || C_CPUTYPE_16BIT */
                           515	#547: #endif /* FBL_ENABLE_SYSTEM_CHECK */
                           516	#549: /** Round length up to next multiple of alignment */
                           517	#550: #define FBL_MEM_LENGTH_ALIGN(length, align)  (((((length) - 1u) / (align)) + 1u) * (align))
                           518	#552: /** Align space used by preamble to multiple of platform requirement */
                           519	#553: #define FBL_MEM_PREAMBLE_ALIGN(length)       FBL_MEM_LENGTH_ALIGN((length), FBL_MEM_PLATFORM_ALIGN)
                           520	#554: /** As preamble always lies within the actual buffer it can be subtracted from the total length */
                           521	#555: #define FBL_MEM_PREAMBLE_OFFSET(length)      (FBL_MEM_PREAMBLE_ALIGN(length) - (length))
                           522	#556: /** Padded buffer size for input buffers (including maximum platform alignment) */
                           523	#557: #define FBL_MEM_PADDED_BUFFER_SIZE           (FBL_MEM_BUFFER_SIZE + (FBL_MEM_PLATFORM_ALIGN - 1u) + FBL_MEM_TOTAL_PADDING)
                           524	#558: #if defined( FBL_ENABLE_DATA_PROCESSING )
                           525	#559: /** Padded buffer size for data processing buffers */
                           526	#560: # define FBL_MEM_PADDED_PROC_BUFFER_SIZE     (FBL_MEM_PROC_BUFFER_SIZE + FBL_MEM_TOTAL_PADDING)
                           527	#561: #endif /* FBL_ENABLE_DATA_PROCESSING */
                           528	#563: #if defined( FBL_MEM_ENABLE_MULTI_SOURCE )
                           529	#564: /** Dynamic input source */
                           530	#565: # define FBL_MEM_ACTIVE_SOURCE               gActiveSource
                           531	#566: #else
                           532	#567: /** Fixed input source */
                           533	#568: # define FBL_MEM_ACTIVE_SOURCE               0u
                           534	#569: # if defined( FBL_MEM_SOURCE_COUNT )
                           535	#570: # else
                           536	#571: /** Set input source count if not already defined*/
                           537	#572: #  define FBL_MEM_SOURCE_COUNT               1u
                           538	#573: # endif
                           539	#574: #endif /* FBL_MEM_ENABLE_MULTI_SOURCE */
                           540	#576: #if defined( FBL_MEM_ENABLE_DYNAMIC_PREAMBLE_LENGTH )
                           541	#577: /** Dynamic preamble length stored per input source */
                           542	#578: # define FBL_MEM_PREAMBLE_LENGTH             gPreambleLength[FBL_MEM_ACTIVE_SOURCE]
                           543	#579: #else
                           544	#580: /** Fixed preamble length */
                           545	#581: # define FBL_MEM_PREAMBLE_LENGTH             FBL_MEM_DEFAULT_PREAMBLE_LENGTH
                           546	#582: #endif /* FBL_MEM_ENABLE_DYNAMIC_PREAMBLE_LENGTH */
                           547	#584: /** Substitution macro to access input buffers depending on active input source */

                                   Fri Apr 10 08:32:15 2020           Page 11
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                           548	#585: #define FBL_MEM_INPUT_JOB                    gInputJobs[FBL_MEM_ACTIVE_SOURCE]
                           549	#587: /** Helper macro to get number of array entries */
                           550	#588: #define FBL_MEM_ARRAY_SIZE(arr)              (sizeof(arr) / sizeof((arr)[0]))
                           551	#591: #if defined( FBL_MEM_ENABLE_SEGMENTATION ) 
                           552	#592: # if defined( FBL_ENABLE_ADAPTIVE_DATA_TRANSFER_RCRRP )
                           553	#593: /** Unconditionally limited for proper RCR-RP handling */
                           554	#594: #  define FBL_MEM_FINALIZE_UNLIMITED_MODE    kFblMemOperationMode_Unconditional
                           555	#595: # else
                           556	#596: /** Write complete remaining data at once during finalization */
                           557	#597: #  define FBL_MEM_FINALIZE_UNLIMITED_MODE    kFblMemOperationMode_Finalize
                           558	#598: # endif /* FBL_ENABLE_ADAPTIVE_DATA_TRANSFER_RCRRP */
                           559	#599: #else
                           560	#600: /** Do not limit input length, process complete buffer */
                           561	#601: # define FblMemLimitLength(inputLen, type, finalize)     (inputLen)
                           562	#602: #endif /* FBL_MEM_ENABLE_SEGMENTATION || FBL_MEM_ENABLE_VERIFY_PIPELINED */
                           563	#604: #if defined( __ApplFblMemCopyBuffer )
                           564	#605: #else
                           565	#606: /** Copy input buffer to destination address */
                           566	#607: # define __ApplFblMemCopyBuffer(address, data, length)   (void)MEMCPY((address), (data), (length))
                           567	#608: #endif /* __ApplFblMemCopyBuffer */
                           568	#610: /** Null buffer pointer */
                           569	#611: # define FBL_MEM_BUFFER_NULL                 ((tFblMemRamData)V_NULL)
                           570	#613: /*-- Indication function order ----------------------------------------------*/
                           571	#614: /*
                           572	#615:    Allowed indication order:
                           573	#617:        Init(PowerOn)
                           574	#618:              |
                           575	#619:    +-------->+--------+
                           576	#620:    |         V        |
                           577	#621:    | +-> BlockErase   |
                           578	#622:    | +-------+        |
                           579	#623:    |         V        |
                           580	#624:    |     BlockStart <-+
                           581	#625:    |         |
                           582	#626:    |         V
                           583	#627:    |    SegmentStart <-+
                           584	#628:    |         |         |
                           585	#629:    |         V         |
                           586	#630:    |   +-> Data        |
                           587	#631:    |   +-----+         |
                           588	#632:    |         V         |
                           589	#633:    |     SegmentEnd    |
                           590	#634:    |         +---------+
                           591	#635:    |         V
                           592	#636:    |      BlockEnd
                           593	#637:    |         |
                           594	#638:    |         V
                           595	#639:    |    BlockVerify <-+
                           596	#640:    |         |        |
                           597	#641:    +---------+--------+
                           598	#642: */
                           599	#644: /* Bitmasks for allowed states */
                           600	#645: #define FBL_MEM_ALLOWED_NONE           0x00u
                           601	#646: #define FBL_MEM_ALLOWED_BLOCK_START    0x01u
                           602	#647: #define FBL_MEM_ALLOWED_SEGMENT_START  0x02u
                           603	#648: #define FBL_MEM_ALLOWED_DATA_IND       0x04u

                                   Fri Apr 10 08:32:15 2020           Page 12
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                           604	#649: #define FBL_MEM_ALLOWED_SEGMENT_END    0x08u
                           605	#650: #define FBL_MEM_ALLOWED_BLOCK_END      0x10u
                           606	#651: #define FBL_MEM_ALLOWED_BLOCK_VERIFY   0x20u
                           607	#652: #define FBL_MEM_ALLOWED_BLOCK_ERASE    0x40u
                           608	#654: /* Access macros for handling of allowed states */
                           609	#655: /** Reset all states */
                           610	#656: #define FblMemResetAllowed()           (FblMemSetAllowed(FBL_MEM_ALLOWED_NONE))
                           611	#657: /** Set states according to bitmask (overwriting previous settings) */
                           612	#658: # define FblMemSetAllowed(mask)        (gAllowedInd = (tFblMemAllowedInd)(mask))
                           613	#659: /** Add states according to bitmask (previous settings unchanged) */
                           614	#660: # define FblMemAddAllowed(mask)        (gAllowedInd |= (tFblMemAllowedInd)(mask))
                           615	#661: /** Clear states according to bitmask */
                           616	#662: #define FblMemClrAllowed(mask)         (gAllowedInd &= FblInvertBits(mask, tFblMemAllowedInd))
                           617	#663: /** Check for required states against bitmask */
                           618	#664: #define FblMemIsAllowed(mask)          ((gAllowedInd & (tFblMemAllowedInd)(mask)) == (tFblMemAllowedInd)(mask))
                           619	#665: /** Check if any of the required states is currently allowed */
                           620	#666: #define FblMemIsAnyAllowed(mask)       ((gAllowedInd & (tFblMemAllowedInd)(mask)) != (tFblMemAllowedInd)(FBL_MEM_ALLOWED_NONE))
                           621	#668: /*-- Error handling ---------------------------------------------------------*/
                           622	#669: /** Dummy value for errors without extended status */
                           623	#670: #define FBL_MEM_EXT_STATUS_NONE        0x00u
                           624	#671: /** Remap errors without extended status to common macro */
                           625	#672: #define FBL_MEM_SET_STATUS(status, var)            FBL_MEM_SET_EXT_STATUS(status, FBL_MEM_EXT_STATUS_NONE, var)
                           626	#673: /* Extended status configured? */
                           627	#674: #if defined( FBL_MEM_ENABLE_EXT_STATUS )
                           628	#675: /** Set error code and additionally pass info extended error macro */
                           629	#676: # define FBL_MEM_SET_EXT_STATUS(status, ext, var)  {                                      \
                           630	#677:                                                       FBL_MEM_EXT_STATUS_ ## status(ext); \
                           631	#678:                                                       (var) = kFblMemStatus_ ## status;   \
                           632	#679:                                                    } /* PRQA S 0342 */ /* MD_FblMem_0342 */ /* PRQA S 0881 */ /* MD_FblMem_0881 */
                           633	#680: /** Pass extended info without setting error code */
                           634	#681: # define FBL_MEM_SET_EXT_INFO(type, info)          FBL_MEM_EXT_STATUS_ ## type(info) /* PRQA S 0342 */ /* MD_FblMem_0342 */
                           635	#682: #else
                           636	#683: /* Set error code, no extended status */
                           637	#684: # define FBL_MEM_SET_EXT_STATUS(status, ext, var)  (var) = kFblMemStatus_ ## status /* PRQA S 0342 */ /* MD_FblMem_0342 */
                           638	#685: # define FBL_MEM_SET_EXT_INFO(type, info)
                           639	#686: #endif /* FBL_MEM_ENABLE_EXT_STATUS */
                           640	#689: /** Assertion codes */
                           641	#690: #define kFblMemAssertParameterOutOfRange     0x01u
                           642	#691: #define kFblMemAssertUserResultOutOfRange    0x02u
                           643	#693: /*-- Critical sections ------------------------------------------------------*/
                           644	#694: /* Allow override in configuration */
                           645	#695: #if defined( __ApplFblMemEnterCriticalSection )
                           646	#696: #else
                           647	#697: /** Enter critical section: Do nothing in default configuration */
                           648	#698: # define __ApplFblMemEnterCriticalSection()
                           649	#699: #endif /* __ApplFblMemEnterCriticalSection */
                           650	#701: /* Allow override in configuration */
                           651	#702: #if defined( __ApplFblMemLeaveCriticalSection )
                           652	#703: #else
                           653	#704: /** Leave critical section: Do nothing in default configuration */
                           654	#705: # define __ApplFblMemLeaveCriticalSection()
                           655	#706: #endif /* __ApplFblMemLeaveCriticalSection */
                           656	#708: /* PRQA L:TAG_FblMem_3458_1 */
                           657	#709: /* PRQA L:TAG_FblMem_3453_1 */
                           658	#711: /***********************************************************************************************************************
                           659	#712:  *  TYPEDEFS

                                   Fri Apr 10 08:32:15 2020           Page 13
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                           660	#713:  **********************************************************************************************************************/
                           661	#715: /*-- Indication function order ----------------------------------------------*/
                           662	#716: /** States for indication order */
                           663	#717: typedef vuintx tFblMemAllowedInd;
                           664	#719: /*-- Buffer handling --------------------------------------------------------*/
                           665	#720: /** Job types */
                           666	#721: typedef enum
                           667	#722: {
                           668	#723:    kFblMemJobType_InputWrite = 0u      /**< Input buffer, write through without any data processing         */
                           669	#724: #if defined( FBL_MEM_ENABLE_REMAINDER_HANDLING )
                           670	#725:    , kFblMemJobType_WriteFinalize      /**< Trigger programming of write remainder                          */
                           671	#726: #endif /* FBL_MEM_ENABLE_REMAINDER_HANDLING */
                           672	#727: #if defined( FBL_ENABLE_DATA_PROCESSING )
                           673	#728:    , kFblMemJobType_ProcInput          /**< Input buffer, process data before writing                       */
                           674	#729:    , kFblMemJobType_ProcWrite          /**< Write buffer for processed data                                 */
                           675	#730:    , kFblMemJobType_ProcFinalize       /**< Trigger for data processing finalization                        */
                           676	#731: #endif /* FBL_ENABLE_DATA_PROCESSING */
                           677	#732: #if defined( FBL_MEM_ENABLE_STREAM_OUTPUT )
                           678	#733:    , kFblMemJobType_StreamInput        /**< Input buffer, pass to stream output                             */
                           679	#734:    , kFblMemJobType_StreamProc         /**< Pass processed data to stream output                            */
                           680	#735:    , kFblMemJobType_StreamFinalize     /**< Trigger for data processing finalization                        */
                           681	#736: #endif /* FBL_MEM_ENABLE_STREAM_OUTPUT */
                           682	#737: #if defined( FBL_MEM_ENABLE_GAP_FILL )
                           683	#738:    , kFblMemJobType_GapFill            /**< Fill gaps between programmed segments                           */
                           684	#739: #endif /* FBL_MEM_ENABLE_GAP_FILL */
                           685	#740:    , kFblMemJobType_Max
                           686	#741: } tFblMemJobType;
                           687	#743: /** Job class, initiate special handling on completion */
                           688	#745: /** Flag to indicate finalization to subfunction */
                           689	#746: typedef enum
                           690	#747: {
                           691	#748:    kFblMemOperationMode_Normal = 0u,   /**< Normal operation, job complete as soon as "used" member reaches zero */
                           692	#749:    kFblMemOperationMode_Finalize,      /**< Finalize operation */
                           693	#750:    kFblMemOperationMode_Unconditional  /**< Job unconditionally completed after first run */
                           694	#751: } tFblMemOperationMode;
                           695	#753: /** Aligned input buffer type */
                           696	#754: typedef FBL_MEM_ALIGNED_BUFFER_TYPE(FBL_MEM_PADDED_BUFFER_SIZE)      tFblMemInputBuffer;
                           697	#755: #if defined( FBL_ENABLE_DATA_PROCESSING )
                           698	#756: /** Aligned buffer type for data processing */
                           699	#757: typedef FBL_MEM_ALIGNED_BUFFER_TYPE(FBL_MEM_PADDED_PROC_BUFFER_SIZE) tFblMemProcBuffer;
                           700	#758: #endif /* FBL_ENABLE_DATA_PROCESSING */
                           701	#759: #if defined( FBL_MEM_ENABLE_GAP_FILL )
                           702	#760: /** Aligned buffer type for gap fill */
                           703	#761: typedef FBL_MEM_ALIGNED_BUFFER_TYPE(FBL_MEM_GAP_FILL_SEGMENTATION)   tFblMemGapFillBuffer;
                           704	#762: #endif /* FBL_MEM_ENABLE_GAP_FILL */
                           705	#763: #if defined( FBL_MEM_ENABLE_REMAINDER_HANDLING )
                           706	#764: /** Aligned buffer type for remainder handling */
                           707	#765: typedef FBL_MEM_ALIGNED_BUFFER_TYPE(FBL_MEM_SEGMENT_SIZE)            tFblMemRemainderBuffer;
                           708	#766: #endif /* FBL_MEM_ENABLE_REMAINDER_HANDLING */
                           709	#768: /** Job information */
                           710	#769: typedef struct
                           711	#770: {
                           712	#771:    tFblMemRamData       buffer;           /**< Pointer to referenced buffer                        */
                           713	#772:    tFblLength           totalSize;        /**< Total size of referenced buffer                     */
                           714	#773:    tFblLength           netSize;          /**< Size actually usable for input data                 */
                           715	#774:    tFblLength           offset;           /**< Offset of actual buffer content                     */

                                   Fri Apr 10 08:32:15 2020           Page 14
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                           716	#775:    tFblLength           position;         /**< Current position in buffer                          */
                           717	#776:    tFblLength           used;             /**< Current data length                                 */
                           718	#777: #if defined( FBL_MEM_ENABLE_GAP_FILL )
                           719	#778:    tFblAddress          baseAddress;      /**< Memory base address                                 */
                           720	#779: #endif /* FBL_MEM_ENABLE_VERIFY_PIPELINED || FBL_MEM_ENABLE_RESUMABLE_PROGRAMMING || FBL_MEM_ENABLE_GAP_FILL */
                           721	#780:    tFblMemJobType       type;             /**< Job type                                            */
                           722	#781:    tFblMemOperationMode completion;       /**< Handling of job completion                          */
                           723	#782:    vuintx               segmentIndex;     /**< Index of segment associated with job                */
                           724	#783: } tFblMemJob;
                           725	#785: /** Module internal segment information */
                           726	#786: typedef struct
                           727	#787: {
                           728	#788:    tFblMemSegmentInfo   input;            /**< Input segment information               */
                           729	#789:    /* Internal attributes */
                           730	#790:    tFblAddress          writeAddress;     /**< Current address                         */
                           731	#791:    tFblLength           writeRemainder;   /**< Unwritten remainder                     */
                           732	#792:    tFblLength           writeLength;      /**< Remaining length                        */
                           733	#793: #if defined( FBL_ENABLE_PROCESSED_DATA_LENGTH )
                           734	#794:    tFblLength           writtenLength;    /**< Total written length                    */
                           735	#795: #endif /* FBL_ENABLE_PROCESSED_DATA_LENGTH */
                           736	#796: #if defined( FBL_ENABLE_UNALIGNED_DATA_TRANSFER )
                           737	#797:    tFblLength           inputAddress;     /**< Running address of input data           */
                           738	#798: #endif /* FBL_ENABLE_UNALIGNED_DATA_TRANSFER */
                           739	#799: #if defined( FBL_MEM_ENABLE_INPUT_LENGTH )
                           740	#800:    tFblLength           inputLength;      /**< Running remaining length of input data  */
                           741	#801: #endif /* FBL_MEM_ENABLE_INPUT_LENGTH */
                           742	#802: #if defined( FBL_ENABLE_DATA_PROCESSING ) || \
                           743	#803:     defined( FBL_MEM_ENABLE_STREAM_OUTPUT ) || \
                           744	#804:     defined( FBL_MEM_ENABLE_REMAINDER_HANDLING )
                           745	#805:    tFblMemJobType       jobType;          /**< Remember input job types                */
                           746	#806: #endif /* FBL_ENABLE_DATA_PROCESSING || FBL_MEM_ENABLE_STREAM_OUTPUT || FBL_MEM_ENABLE_PASSTHROUGH || FBL_MEM_ENABLE_REMAINDER_HANDLING */
                           747	#807:    vuintx               ownIndex;         /**< Index of segment                        */
                           748	#808:    vuintx               nextIndex;        /**< Index of next segment                   */
                           749	#809: } tFblMemSegmentInternal;
                           750	#811: /*-- Processing queue -------------------------------------------------------*/
                           751	#812: /** Priority of queue entry */
                           752	#813: typedef vuint8 tFblMemQueuePrio;
                           753	#815: /** Job priorities */
                           754	#816: typedef enum
                           755	#817: {
                           756	#818:    kFblMemJobPrio_Lowest               = FBL_MEM_QUEUE_PRIO_LOWEST,  /**< Lowest job priority */
                           757	#819:    kFblMemJobPrio_Write,                                                   /**< Helper entry for flushing of all pending write jobs */
                           758	#820: #if defined( FBL_MEM_ENABLE_GAP_FILL )
                           759	#821:    kFblMemJobPrio_GapFill,                                                 /**< Fill gaps between programmed segments */
                           760	#822: #endif /* FBL_MEM_ENABLE_GAP_FILL */
                           761	#823: #if defined( FBL_MEM_ENABLE_REMAINDER_HANDLING )
                           762	#824:    kFblMemJobPrio_WriteFinalize,                                           /**< Finalize remainder write */
                           763	#825: #endif /* FBL_MEM_ENABLE_REMAINDER_HANDLING */
                           764	#826: #if defined( FBL_ENABLE_DATA_PROCESSING )
                           765	#827:    kFblMemJobPrio_ProcFinalize,                                            /**< Finalization of data processing */
                           766	#828: #endif /* FBL_ENABLE_DATA_PROCESSING */
                           767	#829: #if defined( FBL_MEM_ENABLE_STREAM_OUTPUT )
                           768	#830:    kFblMemJobPrio_StreamFinalize,                                          /**< Finalization of stream output */
                           769	#831: #endif /* FBL_MEM_ENABLE_STREAM_OUTPUT */
                           770	#832:    kFblMemJobPrio_Input,                                                   /**< Not actually used, but acts as a common priority
                           771	#833:                                                                             *   for all input jobs */

                                   Fri Apr 10 08:32:15 2020           Page 15
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                           772	#834:    kFblMemJobPrio_InputWrite           = kFblMemJobPrio_Input,             /**< Input: Write through */
                           773	#835: #if defined( FBL_MEM_ENABLE_STREAM_OUTPUT )
                           774	#836:    kFblMemJobPrio_StreamInput          = kFblMemJobPrio_Input,             /**< Input: Stream output */
                           775	#837:    kFblMemJobPrio_StreamProcLow        = kFblMemJobPrio_Input,             /**< Stream output of processed data, low priority
                           776	#838:                                                                             *   used when processing is split into smaller pieces
                           777	#839:                                                                             *   Prevent overtaking by following input jobs */
                           778	#840: #endif /* FBL_MEM_ENABLE_STREAM_OUTPUT */
                           779	#841: #if defined( FBL_ENABLE_DATA_PROCESSING )
                           780	#842:    kFblMemJobPrio_ProcInput            = kFblMemJobPrio_Input,             /**< Input: Data processing */
                           781	#843:    kFblMemJobPrio_ProcWriteLow         = kFblMemJobPrio_Input,             /**< Write operation of data processing, low priority
                           782	#844:                                                                             *   used when processing is split into smaller pieces
                           783	#845:                                                                             *   Prevent overtaking by following input jobs */
                           784	#846:    kFblMemJobPrio_ProcWriteHigh,                                           /**< Write operation of data processing, high priority
                           785	#847:                                                                             *   used to flush buffer */
                           786	#848: #endif /* FBL_ENABLE_DATA_PROCESSING */
                           787	#849: #if defined( FBL_MEM_ENABLE_STREAM_OUTPUT )
                           788	#850:    kFblMemJobPrio_StreamProcHigh,                                          /**< Stream output of processed data, high priority
                           789	#851:                                                                             *   used to flush buffer */
                           790	#852: #endif /* FBL_MEM_ENABLE_STREAM_OUTPUT */
                           791	#853:    kFblMemJobPrio_Highest              = FBL_MEM_QUEUE_PRIO_HIGHEST        /**< Highest job priority */ /* PRQA S 0723 */ /* MD_FblMem_0723 */
                           792	#854: } tFblMemJobPrio; /* PRQA S 3205 */ /* MD_FblMem_3205 */
                           793	#856: #if defined( FBL_MEM_ENABLE_PROC_QUEUE )
                           794	#857: /** Handle for queue entry */
                           795	#858: typedef vuintx tFblMemQueueHandle;
                           796	#860: /** Queue entry */
                           797	#861: typedef struct
                           798	#862: {
                           799	#863:    V_MEMRAM1 tFblMemJob V_MEMRAM2 V_MEMRAM3 *   job;     /**< Associated job */
                           800	#864:    tFblMemQueuePrio                             prio;    /**< Entry priority */
                           801	#865:    tFblMemQueueHandle                           prev;    /**< Handle of previous queue entry */
                           802	#866:    tFblMemQueueHandle                           next;    /**< Handle of next queue entry */
                           803	#867: } tFblMemQueueEntry;
                           804	#868: #endif /* FBL_MEM_ENABLE_PROC_QUEUE */
                           805	#870: #if defined( FBL_MEM_ENABLE_SEGMENTATION ) 
                           806	#871: /** Limitation of processed length per cycle */
                           807	#872: typedef struct
                           808	#873: {
                           809	#874:    tFblLength           limit;            /**< Length limit, 0 equals unlimited */
                           810	#875:    tFblMemOperationMode unlimitedMode;    /**< Operation mode which returns unlimited length */
                           811	#876: } tFblMemLengthLimit;
                           812	#877: #endif /* FBL_MEM_ENABLE_SEGMENTATION || FBL_MEM_ENABLE_VERIFY_PIPELINED */
                           813	#879: /*-- Pipelined programming --------------------------------------------------*/
                           814	#881: /*-- Progress information ---------------------------------------------------*/
                           815	#882: #if defined( FBL_MEM_ENABLE_PROGRESS_INFO )
                           816	#883: /** Progress reporting state */
                           817	#884: typedef enum
                           818	#885: {
                           819	#886:    kFblMemProgressState_Disabled,   /**< Disable progress reporting */
                           820	#887:    kFblMemProgressState_Enabled     /**< Enable progress reporting */
                           821	#888: } tFblMemProgressState;
                           822	#890: /** Internal progress information */
                           823	#891: typedef struct
                           824	#892: {
                           825	#893:    vuint32 target;            /**< Expected maximum value of partial operation in arbitrary unit (e.g. bytes) */
                           826	#894:    vuint8  totalOffset;       /**< Percentage offset of total operation for current operation type */
                           827	#895:    vuint8  totalPercentage;   /**< Percentage contribution to total operation of current operation type */

                                   Fri Apr 10 08:32:15 2020           Page 16
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                           828	#896: } tFblMemProgressInfoInternal;
                           829	#897: #endif /* FBL_MEM_ENABLE_PROGRESS_INFO */
                           830	#899: /*-- Resumable programming --------------------------------------------------*/
                           831	#901: /*-- Error handling ---------------------------------------------------------*/
                           832	#903: /***********************************************************************************************************************
                           833	#904:  *  GLOBAL DATA
                           834	#905:  **********************************************************************************************************************/
                           835	#907: # define FBLLIB_MEM_START_SEC_VAR
                           836	#908: # include "MemMap.h"  /* PRQA S 5087 */ /* MD_MSR_19.1 */
                           837	#910: /** State of programming operation */
                           838	#911: V_MEMRAM0        V_MEMRAM1 tFblMemProgState        V_MEMRAM2 fblMemProgState; /* PRQA S 1504 */ /* MD_FblMem_1504 */
                           839	#913: /***********************************************************************************************************************
                           840	#914:  *  LOCAL DATA
                           841	#915:  **********************************************************************************************************************/
                           842	#917: /* PRQA S 3218 TAG_FblMem_3218 */ /* MD_FblMem_3218 */
                           843	#919: /** States for indication order */
                           844	#920: V_MEMRAM0 static V_MEMRAM1 tFblMemAllowedInd       V_MEMRAM2 gAllowedInd;
                           845	#921: /** Error status for programming operations (potentially ran in background) */
                           846	#922: V_MEMRAM0 static V_MEMRAM1 tFblMemStatus           V_MEMRAM2 gErrorStatus;
                           847	#925: #if defined( FBL_MEM_ENABLE_GLOBAL_BLOCK_INFO )
                           848	#926: /** Block information */
                           849	#927: V_MEMRAM0 static V_MEMRAM1 tFblMemBlockInfo        V_MEMRAM2 gBlockInfo;
                           850	#928: #endif /* FBL_MEM_ENABLE_GLOBAL_BLOCK_INFO */
                           851	#930: /** Segment information */
                           852	#931: V_MEMRAM0 static V_MEMRAM1 tFblMemSegmentInternal  V_MEMRAM2 gSegInfo;
                           853	#933: #if defined( FBL_MEM_ENABLE_MULTI_SOURCE )
                           854	#934: /** Active input source */
                           855	#935: V_MEMRAM0 static V_MEMRAM1 tFblMemInputSource      V_MEMRAM2 gActiveSource;
                           856	#936: #endif
                           857	#938: #if defined( FBL_MEM_ENABLE_DYNAMIC_PREAMBLE_LENGTH )
                           858	#939: /** Preamble length stored per input source */
                           859	#940: V_MEMRAM0 static V_MEMRAM1 tFblLength              V_MEMRAM2 gPreambleLength[FBL_MEM_SOURCE_COUNT];
                           860	#941: #endif /* FBL_MEM_ENABLE_DYNAMIC_PREAMBLE_LENGTH */
                           861	#943: #if defined( FBL_MEM_ENABLE_PREAMBLE_HANDLING )
                           862	#944: /** Temporary buffer for storage of preamble */
                           863	#945: V_MEMRAM0 static V_MEMRAM1 vuint8                  V_MEMRAM2 gPreambleBuffer[FBL_MEM_MAX_PREAMBLE_LENGTH];
                           864	#946: #endif /* FBL_MEM_ENABLE_PREAMBLE_HANDLING */
                           865	#948: #if defined( FBL_MEM_ENABLE_REMAINDER_HANDLING )
                           866	#949: /** Temporary buffer for write remainder */
                           867	#950: V_MEMRAM0 static V_MEMRAM1 tFblMemRemainderBuffer  V_MEMRAM2 gRemainderBuffer;
                           868	#951: #endif /* FBL_MEM_ENABLE_REMAINDER_HANDLING */
                           869	#952: #if defined( FBL_MEM_ENABLE_SEGMENTED_INPUT_BUFFER )
                           870	#953: /** Temporary buffer for data overwritten by buffer padding */
                           871	#954: V_MEMRAM0 static V_MEMRAM1 vuint8                  V_MEMRAM2 gPaddingBuffer[FBL_MEM_SEGMENT_SIZE];
                           872	#955: #endif /* FBL_MEM_ENABLE_SEGMENTED_INPUT_BUFFER */
                           873	#957: /*-- Input buffers ----------------------------------------------------------*/
                           874	#958: /** Data buffer(s) */
                           875	#959: V_MEMRAM0 static V_MEMRAM1 tFblMemInputBuffer      V_MEMRAM2 gBasicInputBuffer[FBL_MEM_BUFFER_COUNT_INPUT];
                           876	#960: /** Input jobs */
                           877	#961: V_MEMRAM0 static V_MEMRAM1 tFblMemJob              V_MEMRAM2 gInputJobs[FBL_MEM_SOURCE_COUNT][FBL_MEM_QUEUE_ENTRIES_INPUT];
                           878	#963: #if defined( FBL_MEM_ENABLE_REMAINDER_HANDLING )
                           879	#964: /** Write finalization job */
                           880	#965: V_MEMRAM0 static V_MEMRAM1 tFblMemJob              V_MEMRAM2 gWriteFinalizeJob;
                           881	#966: #endif /* FBL_MEM_ENABLE_REMAINDER_HANDLING */
                           882	#968: /*-- On-the-fly verification ------------------------------------------------*/
                           883	#972: #if defined( FBL_ENABLE_DATA_PROCESSING )

                                   Fri Apr 10 08:32:15 2020           Page 17
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                           884	#973: /*-- Data processing --------------------------------------------------------*/
                           885	#974: V_MEMRAM0 static V_MEMRAM1 tProcParam              V_MEMRAM2 gProcParam;
                           886	#975: /* Data processing jobs */
                           887	#976: V_MEMRAM0 static V_MEMRAM1 tFblMemJob              V_MEMRAM2 gProcWriteJob;
                           888	#977: V_MEMRAM0 static V_MEMRAM1 tFblMemJob              V_MEMRAM2 gProcFinalizeJob;
                           889	#978: /* Data processing buffer */
                           890	#979: V_MEMRAM0 static V_MEMRAM1 tFblMemProcBuffer       V_MEMRAM2 gProcBuffer;
                           891	#981: # if defined( FBL_MEM_ENABLE_PROC_SEGMENTATION )
                           892	#982: /** Handle of data processing write job in processing queue
                           893	#983:     Defined globally as information has to be persistent across multiple calls of FblMemProcessJob */
                           894	#984: V_MEMRAM0 static V_MEMRAM1 tFblMemQueueHandle      V_MEMRAM2 gProcHandle;
                           895	#985: # endif /* FBL_MEM_ENABLE_PROC_SEGMENTATION */
                           896	#986: #endif /* FBL_ENABLE_DATA_PROCESSING */
                           897	#988: #if defined( FBL_MEM_ENABLE_STREAM_OUTPUT )
                           898	#989: /*-- Stream output ----------------------------------------------------------*/
                           899	#990: V_MEMRAM0 static V_MEMRAM1 tFblMemStreamProcessing V_MEMRAM2 gStreamParam;
                           900	#991: /* Stream output jobs */
                           901	#992: # if defined( FBL_ENABLE_DATA_PROCESSING )
                           902	#993: V_MEMRAM0 static V_MEMRAM1 tFblMemJob              V_MEMRAM2 gStreamProcJob;
                           903	#994: # endif /* FBL_ENABLE_DATA_PROCESSING */
                           904	#995: V_MEMRAM0 static V_MEMRAM1 tFblMemJob              V_MEMRAM2 gStreamFinalizeJob;
                           905	#996: #endif /* FBL_MEM_ENABLE_STREAM_OUTPUT */
                           906	#999: #if defined( FBL_MEM_ENABLE_GAP_FILL )
                           907	#1000: V_MEMRAM0 static V_MEMRAM1 tFblMemJob              V_MEMRAM2 gGapFillJob;
                           908	#1001: V_MEMRAM0 static V_MEMRAM1 tFblMemGapFillBuffer    V_MEMRAM2 gGapFillBuffer;
                           909	#1002: #endif /* FBL_MEM_ENABLE_GAP_FILL */
                           910	#1004: #if defined( FBL_MEM_ENABLE_PROGRESS_INFO )
                           911	#1005: /*-- Progress information ---------------------------------------------------*/
                           912	#1006: /** Current progress information */
                           913	#1007: V_MEMRAM0 static V_MEMRAM1 tFblMemProgressInfo           V_MEMRAM2 gProgressInfo;
                           914	#1008: /** Previously reported progress information */
                           915	#1009: V_MEMRAM0 static V_MEMRAM1 tFblMemProgressInfo           V_MEMRAM2 gPrevProgressInfo;
                           916	#1011: /** Explicitely enable or disable reporting of erase progress */
                           917	#1012: V_MEMRAM0 static V_MEMRAM1 tFblMemProgressState          V_MEMRAM2 gProgressState;
                           918	#1014: /** Internal progress information (current percentage contribution, target value) */
                           919	#1015: V_MEMRAM0 static V_MEMRAM1 tFblMemProgressInfoInternal   V_MEMRAM2 gProgressInfoInternal;
                           920	#1016: /** Value of progress remainder during previous update  */
                           921	#1017: V_MEMRAM0 static V_MEMRAM1 vuint32                       V_MEMRAM2 gProgressPrevRemainder;
                           922	#1018: #endif /* FBL_MEM_ENABLE_PROGRESS_INFO */
                           923	#1020: #if defined( FBL_MEM_ENABLE_PROC_QUEUE )
                           924	#1021: /*-- Processing queue -------------------------------------------------------*/
                           925	#1022: /** Processing queue */
                           926	#1023: V_MEMRAM0 static V_MEMRAM1 tFblMemQueueEntry       V_MEMRAM2 gProcessingQueue[FBL_MEM_QUEUE_SIZE_PROCESSING];
                           927	#1024: #endif /* FBL_MEM_ENABLE_PROC_QUEUE */
                           928	#1026: # define FBLLIB_MEM_STOP_SEC_VAR
                           929	#1027: # include "MemMap.h"  /* PRQA S 5087 */ /* MD_MSR_19.1 */
                           930	#1029: # define FBLLIB_MEM_START_SEC_CONST
                           931	#1030: # include "MemMap.h"  /* PRQA S 5087 */ /* MD_MSR_19.1 */
                           932	#1032: #if defined( FBL_MEM_ENABLE_PROC_QUEUE )
                           933	#1033: /** Mapping of priorities to job types
                           934	#1034:   * Has to be same order as tFblMemJobType */
                           935	#1035: V_MEMROM0 static V_MEMROM1 tFblMemQueuePrio V_MEMROM2 gJobPrio[] =
                           936	#1036: {
                           937	#1037:    kFblMemJobPrio_InputWrite                       /**< InputWrite */
                           938	#1038: #if defined( FBL_MEM_ENABLE_REMAINDER_HANDLING )
                           939	#1039:    , kFblMemJobPrio_WriteFinalize                  /**< WriteFinalize */

                                   Fri Apr 10 08:32:15 2020           Page 18
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                           940	#1040: #endif /* FBL_MEM_ENABLE_REMAINDER_HANDLING */
                           941	#1041: # if defined( FBL_ENABLE_DATA_PROCESSING )
                           942	#1042:    , kFblMemJobPrio_ProcInput                      /**< ProcInput */
                           943	#1043: #  if defined( FBL_MEM_ENABLE_PROC_SEGMENTATION )
                           944	#1044:    , kFblMemJobPrio_ProcWriteLow                   /**< ProcWrite, low priority when processing is split into smaller pieces */
                           945	#1045:    /* kFblMemJobPrio_ProcWriteHigh not explicitely mapped as it is not used when inserting job,
                           946	#1046:     * but only when temporarily updating the priority because of a full processing buffer */
                           947	#1047: #  else
                           948	#1048:    , kFblMemJobPrio_ProcWriteHigh                  /**< ProcWrite, high priority used to flush buffer */
                           949	#1049:    /* kFblMemJobPrio_ProcWriteLow not used */
                           950	#1050: #  endif /* FBL_MEM_ENABLE_PROC_SEGMENTATION */
                           951	#1051:    , kFblMemJobPrio_ProcFinalize                   /**< ProcFinalize */
                           952	#1052: # endif /* FBL_ENABLE_DATA_PROCESSING */
                           953	#1053: #if defined( FBL_MEM_ENABLE_STREAM_OUTPUT )
                           954	#1054:    , kFblMemJobPrio_StreamInput                    /**< StreamInput */
                           955	#1055: # if defined( FBL_MEM_ENABLE_PROC_SEGMENTATION )
                           956	#1056:    , kFblMemJobPrio_StreamProcLow                  /**< StreamProc, low priority when processing is split into smaller pieces */
                           957	#1057:    /* kFblMemJobPrio_StreamProcHigh not explicitely mapped as it is not used when inserting job,
                           958	#1058:     * but only when temporarily updating the priority because of a full processing buffer */
                           959	#1059: # else
                           960	#1060:    , kFblMemJobPrio_StreamProcHigh                 /**< StreamProc, high priority used to flush buffer */
                           961	#1061:    /* kFblMemJobPrio_StreamProcLow not used */
                           962	#1062: # endif /* FBL_MEM_ENABLE_PROC_SEGMENTATION */
                           963	#1063:    , kFblMemJobPrio_StreamFinalize                 /**< StreamFinalize */
                           964	#1064: #endif /* FBL_MEM_ENABLE_STREAM_OUTPUT */
                           965	#1065: #if defined( FBL_MEM_ENABLE_GAP_FILL )
                           966	#1066:    ,kFblMemJobPrio_GapFill                         /**< GapFill */
                           967	#1067: #endif /* FBL_MEM_ENABLE_GAP_FILL */
                           968	#1068:    , kFblMemJobPrio_Lowest                         /**< Concluding entry */
                           969	#1069: };
                           970	#1070: #endif /* FBL_MEM_ENABLE_PROC_QUEUE */
                           971	#1072: #if defined( FBL_MEM_ENABLE_SEGMENTATION ) 
                           972	#1073: /** Limitation of processed length per cycle
                           973	#1074:   * Has to be same order as tFblMemJobType */
                           974	#1075: V_MEMROM0 static V_MEMROM1 tFblMemLengthLimit V_MEMROM2 gLengthLimits[] =
                           975	#1076: {
                           976	#1077:    { FBL_MEM_WRITE_SEGMENTATION, FBL_MEM_FINALIZE_UNLIMITED_MODE }                     /**< InputWrite */
                           977	#1078: # if defined( FBL_MEM_ENABLE_REMAINDER_HANDLING )
                           978	#1079:    , { 0u, kFblMemOperationMode_Normal }                                               /**< WriteFinalize, no actual input data */
                           979	#1080: # endif /* FBL_MEM_ENABLE_REMAINDER_HANDLING */
                           980	#1081: # if defined( FBL_ENABLE_DATA_PROCESSING )
                           981	#1082:    , { 0xFFFFu, kFblMemOperationMode_Unconditional }                                   /**< ProcInput, limited to 16 bit */
                           982	#1083:    , { FBL_MEM_WRITE_SEGMENTATION, FBL_MEM_FINALIZE_UNLIMITED_MODE }                   /**< ProcWrite */
                           983	#1084:    , { 0u, kFblMemOperationMode_Normal }                                               /**< ProcFinalize, no actual input data */
                           984	#1085: # endif /* FBL_ENABLE_DATA_PROCESSING */
                           985	#1086: # if defined( FBL_MEM_ENABLE_STREAM_OUTPUT )
                           986	#1087:    , { FBL_MEM_WRITE_SEGMENTATION, FBL_MEM_FINALIZE_UNLIMITED_MODE }                   /**< StreamInput */
                           987	#1088:    , { FBL_MEM_WRITE_SEGMENTATION, FBL_MEM_FINALIZE_UNLIMITED_MODE }                   /**< StreamProc */
                           988	#1089:    , { 0u, kFblMemOperationMode_Normal }                                               /**< StreamFinalize, no actual input data */
                           989	#1090: # endif /* FBL_MEM_ENABLE_STREAM_OUTPUT */
                           990	#1091: #if defined( FBL_MEM_ENABLE_GAP_FILL )
                           991	#1092:    , { 0u, kFblMemOperationMode_Normal }                                               /**< GapFill, limit applied in job processing */
                           992	#1093: #endif /* FBL_MEM_ENABLE_GAP_FILL */
                           993	#1094:    , { 0u, kFblMemOperationMode_Normal }                                               /**< Concluding entry */
                           994	#1095: };
                           995	#1096: #endif /* FBL_MEM_ENABLE_SEGMENTATION || FBL_MEM_ENABLE_VERIFY_PIPELINED */

                                   Fri Apr 10 08:32:15 2020           Page 19
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                           996	#1098: /*-- Error handling ---------------------------------------------------------*/
                           997	#1100: /* PRQA L:TAG_FblMem_3218 */
                           998	#1102: # define FBLLIB_MEM_STOP_SEC_CONST
                           999	#1103: # include "MemMap.h"  /* PRQA S 5087 */ /* MD_MSR_19.1 */
                          1000	#1105: /***********************************************************************************************************************
                          1001	#1106:  *  LOCAL FUNCTION PROTOTYPES
                          1002	#1107:  **********************************************************************************************************************/
                          1003	#1109: static tFblMemTriggerStatus FblMemTriggerWatchdogExt( void );
                          1004	#1110: static void FblMemTriggerWatchdog( void );
                          1005	#1111: #if defined( FBL_MEM_ENABLE_RESPONSE_PENDING )
                          1006	#1112: static void FblMemResponsePending( void );
                          1007	#1113: #endif /* FBL_MEM_ENABLE_RESPONSE_PENDING */
                          1008	#1115: static void FblMemInitInputQueue( void );
                          1009	#1116: static void FblMemInitStates( void );
                          1010	#1117: static tFblMemRamData FblMemInitInternal( void );
                          1011	#1118: static tFblMemStatus FblMemQueueBuffer( tFblMemConstRamData buffer, tFblLength offset, tFblLength length );
                          1012	#1119: static void FblMemProcessQueue( tFblMemOperationMode mode );
                          1013	#1120: static void FblMemFlushQueueByPrio( tFblMemQueuePrio prio );
                          1014	#1121: #if defined( FBL_MEM_ENABLE_VERIFY_STREAM )
                          1015	#1122: static tFblMemStatus FblMemVerifyInput( V_MEMRAM1 tFblMemVerifyRoutineInput V_MEMRAM2 V_MEMRAM3 * routine,
                          1016	#1123:    const V_MEMRAM1 tFblMemVerifyData V_MEMRAM2 V_MEMRAM3 * data, vuint8 state,
                          1017	#1124:    V_MEMRAM1 tFblMemVerifyStatus V_MEMRAM2 V_MEMRAM3 * result );
                          1018	#1125: static tFblMemStatus FblMemInitVerifyInput( void );
                          1019	#1126: #endif /* FBL_MEM_ENABLE_VERIFY_STREAM */
                          1020	#1127: static tFblMemStatus FblMemProcessJob( V_MEMRAM1 tFblMemJob V_MEMRAM2 V_MEMRAM3 * activeJob, tFblMemOperationMode mode );
                          1021	#1128: static tFblMemStatus FblMemProgramStream( const V_MEMRAM1 tFblMemJob V_MEMRAM2 V_MEMRAM3 * programJob,
                          1022	#1129:    V_MEMRAM1 tFblLength V_MEMRAM2 V_MEMRAM3 * programLength, tFblMemOperationMode mode );
                          1023	#1130: static tFblLength FblMemPadLength( tFblAddress address, tFblLength length );
                          1024	#1131: static tFblLength FblMemPadBuffer( tFblAddress address, tFblLength length, tFblMemRamData data );
                          1025	#1132: #if defined( FBL_MEM_ENABLE_SEGMENTED_INPUT_BUFFER )
                          1026	#1133: static void FblMemUnpadBuffer( tFblMemRamData data, tFblLength padLen );
                          1027	#1134: #endif /* FBL_MEM_ENABLE_SEGMENTED_INPUT_BUFFER */
                          1028	#1135: static tFblMemStatus FblMemCopyBuffer( tFblAddress programAddress,
                          1029	#1136:    const V_MEMRAM1 tFblLength V_MEMRAM2 V_MEMRAM3 * programLength, tFblMemConstRamData programData );
                          1030	#1137: static tFblMemStatus FblMemEraseRegionInternal( tFblAddress eraseAddress, tFblLength eraseLength ); /* PRQA S 1505 */ /* MD_FblMem_1505 */
                          1031	#1138: static tFblMemStatus FblMemProgramBufferInternal( tFblAddress programAddress, /* PRQA S 1505 */ /* MD_FblMem_1505 */
                          1032	#1139:    V_MEMRAM1 tFblLength V_MEMRAM2 V_MEMRAM3 * programLength, tFblMemRamData programData,
                          1033	#1140:    tFblMemProgState checkPointState );
                          1034	#1141: # if defined( FBL_ENABLE_MULTIPLE_MEM_DEVICES ) && \
                          1035	#1142:      defined( FBL_MEM_ENABLE_REMAINDER_HANDLING )
                          1036	#1143: static tFblLength FblMemGetSpecificRemainder( tFblAddress address, tFblLength length );
                          1037	#1144: # endif /* FBL_ENABLE_MULTIPLE_MEM_DEVICES && FBL_MEM_ENABLE_REMAINDER_HANDLING */
                          1038	#1146: #if defined( FBL_MEM_ENABLE_SEGMENTED_INPUT_BUFFER )
                          1039	#1147: static tFblMemStatus FblMemRelocateBufferOffset( V_MEMRAM1 tFblMemJob V_MEMRAM2 V_MEMRAM3 * activeJob,
                          1040	#1148:    tFblMemConstRamData buffer, tFblLength offset, tFblLength length );
                          1041	#1149: #endif /* FBL_MEM_ENABLE_SEGMENTED_INPUT_BUFFER */
                          1042	#1151: #if defined( FBL_MEM_ENABLE_SEGMENTATION ) 
                          1043	#1152: static tFblLength FblMemLimitLength( tFblLength inputLen, tFblMemJobType type, tFblMemOperationMode mode );
                          1044	#1153: #endif /* FBL_MEM_ENABLE_SEGMENTATION || FBL_MEM_ENABLE_VERIFY_PIPELINED */
                          1045	#1155: #if defined( FBL_MEM_ENABLE_PREAMBLE_HANDLING )
                          1046	#1156: static void FblMemStorePreamble( void );
                          1047	#1157: static void FblMemRestorePreamble( void );
                          1048	#1158: #endif /* FBL_MEM_ENABLE_PREAMBLE_HANDLING */
                          1049	#1160: static tFblResult FblMemCheckAllowed( tFblMemAllowedInd check, tFblMemAllowedInd clear );
                          1050	#1161: static tFblMemRamData FblMemGetBuffer( const V_MEMRAM1 tFblMemJob V_MEMRAM2 V_MEMRAM3 * job );
                          1051	#1162: #if defined( FBL_ENABLE_SYSTEM_CHECK )

                                   Fri Apr 10 08:32:15 2020           Page 20
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          1052	#1163: static void FblMemInitBufferIntegrity( void );
                          1053	#1164: static tFblMemStatus FblMemVerifyBufferIntegrity( void );
                          1054	#1165: #endif /* FBL_ENABLE_SYSTEM_CHECK */
                          1055	#1167: #if defined( FBL_MEM_ENABLE_PROC_QUEUE )
                          1056	#1168: static void FblMemQueueInit( V_MEMRAM1 tFblMemQueueEntry V_MEMRAM2 V_MEMRAM3 * queue, tFblMemQueueHandle length );
                          1057	#1170: static tFblMemQueueHandle FblMemQueueMove( V_MEMRAM1 tFblMemQueueEntry V_MEMRAM2 V_MEMRAM3 * queue,
                          1058	#1171:    tFblMemQueueHandle handle, tFblMemQueueHandle prevNew );
                          1059	#1173: static tFblMemQueueHandle FblMemQueueRemove( V_MEMRAM1 tFblMemQueueEntry V_MEMRAM2 V_MEMRAM3 * queue,
                          1060	#1174:    tFblMemQueueHandle handle );
                          1061	#1175: static tFblMemQueueHandle FblMemQueuePrioUpdate( V_MEMRAM1 tFblMemQueueEntry V_MEMRAM2 V_MEMRAM3 * queue,
                          1062	#1176:    tFblMemQueueHandle handle, tFblMemQueuePrio prio );
                          1063	#1177: static tFblMemQueueHandle FblMemQueuePrioInsert( V_MEMRAM1 tFblMemQueueEntry V_MEMRAM2 V_MEMRAM3 * queue,
                          1064	#1178:    tFblMemQueuePrio prio, V_MEMRAM1 tFblMemJob V_MEMRAM2 V_MEMRAM3 * job );
                          1065	#1179: static tFblMemQueueHandle FblMemQueueDefaultPrioInsert( V_MEMRAM1 tFblMemQueueEntry V_MEMRAM2 V_MEMRAM3 * queue,
                          1066	#1180:    V_MEMRAM1 tFblMemJob V_MEMRAM2 V_MEMRAM3 * job, vuintx segmentIndex );
                          1067	#1181: #endif /* FBL_MEM_ENABLE_PROC_QUEUE */
                          1068	#1184: static void FblMemInitJob( V_MEMRAM1 tFblMemJob V_MEMRAM2 V_MEMRAM3 * job, tFblMemRamData buffer,
                          1069	#1185:    tFblLength size, tFblMemJobType type );
                          1070	#1188: #if defined( FBL_MEM_ENABLE_PROGRESS_INFO )
                          1071	#1189: static vuint8 FblMemCalculateProgress( vuint32 current, vuint32 total, vuint8 percentage );
                          1072	#1190: static void FblMemInitProgress( void );
                          1073	#1191: static void FblMemReportProgress( void );
                          1074	#1192: static void FblMemSetupProgress( tFblMemProgressType type, tFblAddress logicalAddress, vuint32 segmentCount,
                          1075	#1193:    vuint8 totalOffset, vuint8 totalPercentage, vuint32 target );
                          1076	#1194: static void FblMemOffsetProgress( vuint32 totalDone, vuint32 totalTarget );
                          1077	#1195: static void FblMemUpdateProgress( vuint32 remainder );
                          1078	#1196: static void FblMemConcludeProgress( void );
                          1079	#1197: # if defined( FBL_MEM_ENABLE_VERIFY_OUTPUT )
                          1080	#1198: #  if defined( FBL_MEM_ENABLE_SWITCH_READMEMORY_PARAM )
                          1081	#1199: /* Parameters order changed in comparison to HIS security module specification */
                          1082	#1200: static tFblMemVerifySize FblMemProgressRead( tFblMemVerifyAddr address, tFblMemVerifySize length, tFblMemVerifyDataPtr buffer );
                          1083	#1201: #  else
                          1084	#1202: /* Parameters order as defined by HIS security module specification */
                          1085	#1203: static tFblMemVerifySize FblMemProgressRead( tFblMemVerifyAddr address, tFblMemVerifyDataPtr buffer, tFblMemVerifySize length );
                          1086	#1204: #  endif /* FBL_MEM_ENABLE_SWITCH_READMEMORY_PARAM */
                          1087	#1205: # endif /* FBL_MEM_ENABLE_VERIFY_OUTPUT */
                          1088	#1206: #endif /* FBL_MEM_ENABLE_PROGRESS_INFO */
                          1089	#1208: /***********************************************************************************************************************
                          1090	#1209:  *  EXTERNAL DATA
                          1091	#1210:  **********************************************************************************************************************/
                          1092	#1212: /***********************************************************************************************************************
                          1093	#1213:  *  LOCAL FUNCTIONS
                          1094	#1214:  **********************************************************************************************************************/
                          1095	#1216: /***********************************************************************************************************************
                          1096	#1217:  *  FblMemTriggerWatchdogExt
                          1097	#1218:  **********************************************************************************************************************/
                          1098	#1219: /*! \brief    Call configured watchdog trigger routine
                          1099	#1220:  *  \details  If pipelined programming is supported and the trigger is called while a background programming operation
                          1100	#1221:  *            is active, the default watchdog trigger is executed.
                          1101	#1222:  *            Otherwise an erroneous RCR-RP could be generated before service dispatching is finished.
                          1102	#1223:  *            E.g. ISO 14229 enforces that certain message checks (length, ...) are performed before the first RCR-RP
                          1103	#1224:  *            transmission.
                          1104	#1225:  *            For all other cases (non-pipelined programming, service context) the configured routine to support an
                          1105	#1226:  *            adaptive RCR-RP generation is called instead.
                          1106	#1227:  *  \return   Watchdog trigger status
                          1107	#1228:  **********************************************************************************************************************/

                                   Fri Apr 10 08:32:15 2020           Page 21
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          1108		.section ".vletext", "vax"
                          1109		.vle
                          1110		.vle
                          1111	..bof.C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem...43.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl..5E8FB07E..0::
                          1112		.align	1
                          1113	..gh.f.p.0.a.1.r.0.e.0:
                          1114		.type	..gh.f.p.0.a.1.r.0.e.0,@object
                          1115		.size	..gh.f.p.0.a.1.r.0.e.0,0
                          1116		.global	FblMemTriggerWatchdogExt..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
                          1117	FblMemTriggerWatchdogExt..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.:
                          1118	FblMemTriggerWatchdogExt:
                          1119	#	    .bf
                          1120	.LDW01:
                          1121	#1229: static tFblMemTriggerStatus FblMemTriggerWatchdogExt( void )
                          1122	#1230: {
                          1123	#1231:    tFblMemTriggerStatus result;
                          1124	#1233:    {
                          1125	#1234: #if defined( __ApplFblMemAdaptiveRcrRp )
                          1126	#1235:       /* Trigger watchdog and dynamically generate RCR-RP */
                          1127	#1236:       result = __ApplFblMemAdaptiveRcrRp();
00000000 78000000         1128		e_b	FblRealTimeSupport
                          1129	#1237: #else
                          1130	#1238:       /* Callback not configured, return default value */
                          1131	#1239:       result = FBL_MEM_WD_TRIGGER_DEFAULT;
                          1132	#1240: #endif /* __ApplFblMemAdaptiveRcrRp */
                          1133	#1241:    }
                          1134	#1243:    return result;
                          1135	#	    .ef
                          1136	.LDW11:
                          1137	__ghs_eofn_FblMemTriggerWatchdogExt:
                          1138		.type	FblMemTriggerWatchdogExt,@function
                          1139		.size	FblMemTriggerWatchdogExt,$-FblMemTriggerWatchdogExt
                          1140		.type	FblMemTriggerWatchdogExt..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.,@function
                          1141		.size	FblMemTriggerWatchdogExt..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.,$-FblMemTriggerWatchdogExt..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
                          1142		.align	1
                          1143	
                          1144	#function:			FblMemTriggerWatchdogExt
                          1145	#stack frame size:		0
                          1146	#
                          1147	
                          1148		.data
                          1149		.section ".vletext", "vax"
                          1150		.vle
                          1151		.vle
                          1152	
                          1153	#1244: }
                          1154	
                          1155	#1246: /***********************************************************************************************************************
                          1156	#1247:  *  FblMemTriggerWatchdog
                          1157	#1248:  **********************************************************************************************************************/
                          1158	#1249: /*! \brief    Call configured watchdog trigger routine
                          1159	#1250:  *  \details  Suppress watchdog trigger status (see FblMemTriggerWatchdogExt)
                          1160	#1251:  **********************************************************************************************************************/
                          1161		.align	1
                          1162		.align	1
                          1163	..gh.f.p.0.a.1.r.0.e.1:

                                   Fri Apr 10 08:32:15 2020           Page 22
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          1164		.type	..gh.f.p.0.a.1.r.0.e.1,@object
                          1165		.size	..gh.f.p.0.a.1.r.0.e.1,0
                          1166		.global	FblMemTriggerWatchdog..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
                          1167	FblMemTriggerWatchdog..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.:
                          1168	FblMemTriggerWatchdog:
                          1169	#	    .bf
                          1170	.LDW21:
                          1171	#1252: static void FblMemTriggerWatchdog( void )
                          1172	#1253: {
                          1173	#1254:    (void)FblMemTriggerWatchdogExt();
00000004 e800             1174		se_b	FblMemTriggerWatchdogExt
                          1175	#1255: }
                          1176	#	    .ef
                          1177	.LDW31:
                          1178	..lin.1acf134f..ec3e439d.0_1::
                          1179	.LDWlin1:
                          1180	__ghs_eofn_FblMemTriggerWatchdog:
                          1181		.type	FblMemTriggerWatchdog,@function
                          1182		.size	FblMemTriggerWatchdog,$-FblMemTriggerWatchdog
                          1183		.type	FblMemTriggerWatchdog..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.,@function
                          1184		.size	FblMemTriggerWatchdog..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.,$-FblMemTriggerWatchdog..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
                          1185		.align	1
                          1186	
                          1187	#function:			FblMemTriggerWatchdog
                          1188	#stack frame size:		0
                          1189	#
                          1190	
                          1191		.data
                          1192		.section ".vletext", "vax"
                          1193		.vle
                          1194		.vle
                          1195	
                          1196	
                          1197	#1257: #if defined( FBL_MEM_ENABLE_RESPONSE_PENDING )
                          1198	#1258: /***********************************************************************************************************************
                          1199	#1259:  *  FblMemResponsePending
                          1200	#1260:  **********************************************************************************************************************/
                          1201	#1261: /*! \brief    Force RCR-RP by calling configured routine
                          1202	#1262:  *  \details  If pipelined programming is supported only execute function if called in service context. Otherwise an
                          1203	#1263:  *            erroneous RCR-RP could be generated before service dispatching is finished
                          1204	#1264:  **********************************************************************************************************************/
                          1205		.align	1
                          1206		.align	1
                          1207		.align	1
                          1208	..gh.f.p.0.a.1.r.0.e.2:
                          1209		.type	..gh.f.p.0.a.1.r.0.e.2,@object
                          1210		.size	..gh.f.p.0.a.1.r.0.e.2,0
                          1211		.global	FblMemResponsePending..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
                          1212	FblMemResponsePending..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.:
                          1213	FblMemResponsePending:
                          1214	#	    .bf
                          1215	.LDW41:
00000006 70e0e000         1216		e_lis	r7, %hiadj(fblDiagStates)
0000000a 50e70000         1217		e_lwz	r7, %lo(fblDiagStates)(r7)
                          1218	#1265: static void FblMemResponsePending( void )
                          1219	#1266: {

                                   Fri Apr 10 08:32:15 2020           Page 23
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          1220	#1267: # if defined( __ApplFblMemForcedRcrRp )
                          1221	#1268:    {
                          1222	#1269: #  if defined( __ApplFblMemIsRcrRpActive )
                          1223	#1270:       /* Do not force RCR-RP if already active */
                          1224	#1271:       if (kFblOk != __ApplFblMemIsRcrRpActive())
0000000e 74e0c7ff         1225		e_rlwinm	r0, r7, 24, 31, 31
00000012 1800e801         1226		e_xori.	r0, r0, 1
00000016 e600             1227		se_beq	.L96
                          1228	#1272: #  endif /* __ApplFblMemIsRcrRpActive */
                          1229	#1273:       {
                          1230	#1274:          /* Force RCR-RP */
                          1231	#1275:          __ApplFblMemForcedRcrRp();
                          1232	#line1275
                          1233	..lin.1acf134f..e63582cc.0_2::
                          1234	.LDWlin2:
00000018 4813             1235		se_li	r3, 1
0000001a 78000000         1236		e_b	DiagExRCRResponsePending
                          1237	.L96:
                          1238	#1276:       }
                          1239	#1277:    }
                          1240	#1278: # endif /* __ApplFblMemForcedRcrRp */
                          1241	#1279: }
                          1242	#	    .ef
                          1243	.LDW51:
0000001e 0004             1244		se_blr
                          1245	__ghs_eofn_FblMemResponsePending:
                          1246		.type	FblMemResponsePending,@function
                          1247		.size	FblMemResponsePending,$-FblMemResponsePending
                          1248		.type	FblMemResponsePending..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.,@function
                          1249		.size	FblMemResponsePending..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.,$-FblMemResponsePending..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
                          1250		.align	1
                          1251	
                          1252	#function:			FblMemResponsePending
                          1253	#stack frame size:		0
                          1254	#
                          1255	
                          1256		.section ".bss","awb"
                          1257		.align	2
                          1258		.global	gAllowedInd..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
                          1259	gAllowedInd..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.:
00000000                  1260	gAllowedInd:	.space	4
                          1261		.type	gAllowedInd..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.,@object
                          1262		.size	gAllowedInd..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.,4
                          1263		.type	gAllowedInd,@object
                          1264		.size	gAllowedInd,4
                          1265		.global	gErrorStatus..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
                          1266	gErrorStatus..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.:
00000004                  1267	gErrorStatus:	.space	4
                          1268		.type	gErrorStatus..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.,@object
                          1269		.size	gErrorStatus..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.,4
                          1270		.type	gErrorStatus,@object
                          1271		.size	gErrorStatus,4
                          1272		.global	gPreambleBuffer..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
                          1273	gPreambleBuffer..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.:
00000008                  1274	gPreambleBuffer:	.space	2
                          1275		.type	gPreambleBuffer..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.,@object

                                   Fri Apr 10 08:32:15 2020           Page 24
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          1276		.size	gPreambleBuffer..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.,2
                          1277		.type	gPreambleBuffer,@object
                          1278		.size	gPreambleBuffer,2
0000000a                  1279		.space	2
                          1280		.global	gRemainderBuffer..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
                          1281	gRemainderBuffer..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.:
0000000c                  1282	gRemainderBuffer:	.space	16
                          1283		.type	gRemainderBuffer..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.,@object
                          1284		.size	gRemainderBuffer..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.,16
                          1285		.type	gRemainderBuffer,@object
                          1286		.size	gRemainderBuffer,16
                          1287		.global	gInputJobs..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
                          1288	gInputJobs..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.:
0000001c                  1289	gInputJobs:	.space	40
                          1290		.type	gInputJobs..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.,@object
                          1291		.size	gInputJobs..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.,40
                          1292		.type	gInputJobs,@object
                          1293		.size	gInputJobs,40
                          1294		.global	gWriteFinalizeJob..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
                          1295	gWriteFinalizeJob..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.:
00000044                  1296	gWriteFinalizeJob:	.space	40
                          1297		.type	gWriteFinalizeJob..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.,@object
                          1298		.size	gWriteFinalizeJob..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.,40
                          1299		.type	gWriteFinalizeJob,@object
                          1300		.size	gWriteFinalizeJob,40
                          1301		.global	gGapFillJob..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
                          1302	gGapFillJob..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.:
0000006c                  1303	gGapFillJob:	.space	40
                          1304		.type	gGapFillJob..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.,@object
                          1305		.size	gGapFillJob..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.,40
                          1306		.type	gGapFillJob,@object
                          1307		.size	gGapFillJob,40
                          1308		.global	gBlockInfo..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
                          1309	gBlockInfo..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.:
00000094                  1310	gBlockInfo:	.space	60
                          1311		.type	gBlockInfo..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.,@object
                          1312		.size	gBlockInfo..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.,60
                          1313		.type	gBlockInfo,@object
                          1314		.size	gBlockInfo,60
                          1315		.global	gSegInfo..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
                          1316	gSegInfo..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.:
000000d0                  1317	gSegInfo:	.space	52
                          1318		.type	gSegInfo..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.,@object
                          1319		.size	gSegInfo..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.,52
                          1320		.type	gSegInfo,@object
                          1321		.size	gSegInfo,52
                          1322		.global	gBasicInputBuffer..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
                          1323	gBasicInputBuffer..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.:
00000104                  1324	gBasicInputBuffer:	.space	4120
                          1325		.type	gBasicInputBuffer..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.,@object
                          1326		.size	gBasicInputBuffer..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.,4120
                          1327		.type	gBasicInputBuffer,@object
                          1328		.size	gBasicInputBuffer,4120
                          1329		.global	gGapFillBuffer..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
                          1330	gGapFillBuffer..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.:
0000111c                  1331	gGapFillBuffer:	.space	264

                                   Fri Apr 10 08:32:15 2020           Page 25
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          1332		.type	gGapFillBuffer..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.,@object
                          1333		.size	gGapFillBuffer..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.,264
                          1334		.type	gGapFillBuffer,@object
                          1335		.size	gGapFillBuffer,264
                          1336		.global	gProcessingQueue..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
                          1337	gProcessingQueue..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.:
00001224                  1338	gProcessingQueue:	.space	80
                          1339		.type	gProcessingQueue..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.,@object
                          1340		.size	gProcessingQueue..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.,80
                          1341		.type	gProcessingQueue,@object
                          1342		.size	gProcessingQueue,80
                          1343		.data
                          1344		.section ".vletext", "vax"
                          1345		.vle
                          1346		.vle
                          1347	
                          1348	
                          1349	#1280: #endif /* FBL_MEM_ENABLE_RESPONSE_PENDING */
                          1350	#1282: /***********************************************************************************************************************
                          1351	#1283:  *  FblMemGetBuffer
                          1352	#1284:  **********************************************************************************************************************/
                          1353	#1285: /*! \brief      Get a pointer to the referenced buffer, taking into account the current position value
                          1354	#1286:  *  \param[in]  job Pointer to job information
                          1355	#1287:  *  \return     Pointer to current buffer position
                          1356	#1288:  *              Null pointer in case referenced buffer is not defined
                          1357	#1289:  **********************************************************************************************************************/
                          1358		.align	1
                          1359		.align	1
                          1360	..gh.f.p.3.a.1.r.0.e.3:
                          1361		.type	..gh.f.p.3.a.1.r.0.e.3,@object
                          1362		.size	..gh.f.p.3.a.1.r.0.e.3,0
                          1363		.global	FblMemGetBuffer..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
                          1364	FblMemGetBuffer..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.:
                          1365	FblMemGetBuffer:
00000020 182106f0         1366		e_stwu	sp, -16(sp)
00000024 1bc10908         1367		e_stmw	r30, 8(sp)
00000028 0080             1368		se_mflr	r0
0000002a d501             1369		se_stw	r0, 20(sp)
0000002c 013e             1370		se_mr	r30, r3
                          1371	#	    .bf
                          1372	.LDW61:
                          1373	#1290: static tFblMemRamData FblMemGetBuffer( const V_MEMRAM1 tFblMemJob V_MEMRAM2 V_MEMRAM3 * job )
                          1374	#1291: {
                          1375	#1292:    tFblMemRamData jobBuffer;
                          1376	#1294:    /* Get referenced buffer */
                          1377	#1295:    jobBuffer = job->buffer;
0000002e c0f3             1378		se_lwz	r31, 0(r3)
                          1379	#1297:    /* Check for undefined buffer (null pointer) */
                          1380	#1298:    if (FBL_MEM_BUFFER_NULL != jobBuffer)
00000030 2a0f             1381		se_cmpi	r31, 0
00000032 e600             1382		se_beq	.L159
                          1383	#1299:    {
                          1384	#1300:       /* Check for potential buffer overflow */
                          1385	#1301:       assertFblInternal((job->offset <= (job->totalSize - job->netSize)), kFblMemAssertParameterOutOfRange); /* PRQA S 2214 */ /* MD_FblDef_Assert */
                          1386	#line1301
                          1387	..lin.1acf134f..80f4e112.0_3::

                                   Fri Apr 10 08:32:15 2020           Page 26
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          1388	.LDWlin3:
00000034 c203             1389		se_lwz	r0, 8(r3)
00000036 c173             1390		se_lwz	r7, 4(r3)
00000038 0770             1391		se_subf	r0, r7
0000003a c373             1392		se_lwz	r7, 12(r3)
0000003c 0d07             1393		se_cmpl	r7, r0
0000003e e100             1394		se_ble	.L161
00000040 4813             1395		se_li	r3, 1
00000042 78000001         1396		e_bl	ApplFblFatalError
                          1397	.L161:
                          1398	#1302:       assertFblInternal((job->used <= (job->totalSize - job->offset)), kFblMemAssertParameterOutOfRange); /* PRQA S 2214 */ /* MD_FblDef_Assert */
                          1399	#line1302
                          1400	..lin.1acf134f..80f4e112.0_4::
                          1401	.LDWlin4:
00000046 c30e             1402		se_lwz	r0, 12(r30)
00000048 c17e             1403		se_lwz	r7, 4(r30)
0000004a 0770             1404		se_subf	r0, r7
0000004c c57e             1405		se_lwz	r7, 20(r30)
0000004e 0d07             1406		se_cmpl	r7, r0
00000050 e100             1407		se_ble	.L163
00000052 4813             1408		se_li	r3, 1
00000054 78000001         1409		e_bl	ApplFblFatalError
                          1410	.L163:
                          1411	#1304:       /* Valid buffer pointer
                          1412	#1305:          Evaluate position */
                          1413	#1306:       jobBuffer = &jobBuffer[job->position];
                          1414	#line1306
                          1415	..lin.1acf134f..80f4e112.0_5::
                          1416	.LDWlin5:
00000058 c40e             1417		se_lwz	r0, 16(r30)
0000005a 040f             1418		se_add	r31, r0
                          1419	.L159:
                          1420	#1307:    }
                          1421	#1309:    /* Return pointer to current buffer position */
                          1422	#1310:    return jobBuffer;
0000005c 01f3             1423		se_mr	r3, r31
                          1424	#	    .ef
                          1425	.LDW71:
0000005e c501             1426		se_lwz	r0, 20(sp)
00000060 1bc10808         1427		e_lmw	r30, 8(sp)
00000064 20f1             1428		se_addi	sp, 16
00000066 0090             1429		se_mtlr	r0
00000068 0004             1430		se_blr
                          1431	__ghs_eofn_FblMemGetBuffer:
                          1432		.type	FblMemGetBuffer,@function
                          1433		.size	FblMemGetBuffer,$-FblMemGetBuffer
                          1434		.type	FblMemGetBuffer..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.,@function
                          1435		.size	FblMemGetBuffer..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.,$-FblMemGetBuffer..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
                          1436		.align	1
                          1437	
                          1438	#function:			FblMemGetBuffer
                          1439	#stack frame size:		16
                          1440	#link area offset:		0
                          1441	#local storage area offset:	8
                          1442	#gpr save area offset:		8
                          1443	#

                                   Fri Apr 10 08:32:15 2020           Page 27
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          1444	#jobBuffer	r31	local
                          1445	
                          1446	#job	r30	param
                          1447	
                          1448		.data
                          1449		.section ".vletext", "vax"
                          1450		.vle
                          1451		.vle
                          1452	
                          1453	#1311: }
                          1454	
                          1455	#1313: #if defined( FBL_ENABLE_SYSTEM_CHECK )
                          1456	#1314: /***********************************************************************************************************************
                          1457	#1315:  *  FblMemInitBufferIntegrity
                          1458	#1316:  **********************************************************************************************************************/
                          1459	#1317: /*! \brief         Initialize "canary" words placed after aligned buffer contents
                          1460	#1318:  *  \details       "Canary" value is placed behind actual buffer contents and contains a magic value.
                          1461	#1319:  *                 In case of a buffer overrun it is likely that the "canary" is modified too. This can be used to
                          1462	#1320:  *                 detect the overrun.
                          1463	#1321:  **********************************************************************************************************************/
                          1464		.align	1
                          1465		.align	1
                          1466	..gh.f.p.0.a.1.r.0.e.4:
                          1467		.type	..gh.f.p.0.a.1.r.0.e.4,@object
                          1468		.size	..gh.f.p.0.a.1.r.0.e.4,0
                          1469		.global	FblMemInitBufferIntegrity..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
                          1470	FblMemInitBufferIntegrity..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.:
                          1471	FblMemInitBufferIntegrity:
                          1472	#	    .bf
                          1473	.LDW81:
                          1474	#1322: static void FblMemInitBufferIntegrity( void )
                          1475	#1323: {
                          1476	#1324:    vuintx idx;
                          1477	#1326:    /* Data buffer(s) */
                          1478	#1327:    for (idx = 0u; idx < FBL_MEM_BUFFER_COUNT_INPUT; idx++)
                          1479	#1328:    {
                          1480	#1329:       gBasicInputBuffer[idx].canaryFront = FBL_MEM_CANARY_VALUE;
0000006a 70e0e000         1481		e_lis	r7, %hiadj(gBasicInputBuffer)
0000006e 7008e269         1482		e_lis	r0, 17001
00000072 1ce70000         1483		e_add16i	r7, r7, %lo(gBasicInputBuffer)
00000076 1c007264         1484		e_add16i	r0, r0, 29284
0000007a d007             1485		se_stw	r0, 0(r7)
                          1486	#1330:       gBasicInputBuffer[idx].canaryBack  = FBL_MEM_CANARY_VALUE;
0000007c 54071014         1487		e_stw	r0, 4116(r7)
                          1488	#1331:    }
                          1489	#1333: # if defined( FBL_ENABLE_DATA_PROCESSING )
                          1490	#1334:    /* Data processing buffer */
                          1491	#1335:    gProcBuffer.canaryFront = FBL_MEM_CANARY_VALUE;
                          1492	#1336:    gProcBuffer.canaryBack  = FBL_MEM_CANARY_VALUE;
                          1493	#1337: # endif /* FBL_ENABLE_DATA_PROCESSING */
                          1494	#1339: # if defined( FBL_MEM_ENABLE_REMAINDER_HANDLING )
                          1495	#1340:    /* Remainder buffer */
                          1496	#1341:    gRemainderBuffer.canaryFront = FBL_MEM_CANARY_VALUE;
00000080 70e0e000         1497		e_lis	r7, %hiadj(gRemainderBuffer)
00000084 1ce70000         1498		e_add16i	r7, r7, %lo(gRemainderBuffer)
00000088 d007             1499		se_stw	r0, 0(r7)

                                   Fri Apr 10 08:32:15 2020           Page 28
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          1500	#1342:    gRemainderBuffer.canaryBack  = FBL_MEM_CANARY_VALUE;
0000008a d307             1501		se_stw	r0, 12(r7)
                          1502	#1343: # endif /* FBL_ENABLE_DATA_PROCESSING */
                          1503	#1345: # if defined( FBL_MEM_ENABLE_GAP_FILL )
                          1504	#1346:    /* Gap fill buffer */
                          1505	#1347:    gGapFillBuffer.canaryFront = FBL_MEM_CANARY_VALUE;
0000008c 70e0e000         1506		e_lis	r7, %hiadj(gGapFillBuffer)
00000090 1ce70000         1507		e_add16i	r7, r7, %lo(gGapFillBuffer)
00000094 d007             1508		se_stw	r0, 0(r7)
                          1509	#1348:    gGapFillBuffer.canaryBack  = FBL_MEM_CANARY_VALUE;
00000096 54070104         1510		e_stw	r0, 260(r7)
                          1511	#1349: # endif /* FBL_ENABLE_DATA_PROCESSING */
                          1512	#1350: }
                          1513	#	    .ef
                          1514	.LDW91:
0000009a 0004             1515		se_blr
                          1516	__ghs_eofn_FblMemInitBufferIntegrity:
                          1517		.type	FblMemInitBufferIntegrity,@function
                          1518		.size	FblMemInitBufferIntegrity,$-FblMemInitBufferIntegrity
                          1519		.type	FblMemInitBufferIntegrity..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.,@function
                          1520		.size	FblMemInitBufferIntegrity..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.,$-FblMemInitBufferIntegrity..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
                          1521		.align	1
                          1522	
                          1523	#function:			FblMemInitBufferIntegrity
                          1524	#stack frame size:		0
                          1525	#
                          1526	
                          1527		.data
                          1528		.section ".vletext", "vax"
                          1529		.vle
                          1530		.vle
                          1531	
                          1532	
                          1533	#1352: /***********************************************************************************************************************
                          1534	#1353:  *  FblMemVerifyBufferIntegrity
                          1535	#1354:  **********************************************************************************************************************/
                          1536	#1355: /*! \brief         Verify "canary" words placed before and after aligned buffer contents
                          1537	#1356:  *  \details       "Canary" values are placed in front and behind actual buffer contents and contain a magic value.
                          1538	#1357:  *                 In case of a buffer overrun it is likely that the "canary" is modified too. This can be used to
                          1539	#1358:  *                 detect the overrun.
                          1540	#1359:  *  \return        kFblMemStatus_Ok if "canary" words of all aligned buffers are intact,
                          1541	#1360:  *                 kFblMemStatus_Failed otherwise
                          1542	#1361:  **********************************************************************************************************************/
                          1543		.align	1
                          1544		.align	1
                          1545	..gh.f.p.0.a.1.r.0.e.5:
                          1546		.type	..gh.f.p.0.a.1.r.0.e.5,@object
                          1547		.size	..gh.f.p.0.a.1.r.0.e.5,0
                          1548		.global	FblMemVerifyBufferIntegrity..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
                          1549	FblMemVerifyBufferIntegrity..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.:
                          1550	FblMemVerifyBufferIntegrity:
                          1551	#	    .bf
                          1552	.LDW02:
                          1553	#1362: static tFblMemStatus FblMemVerifyBufferIntegrity( void )
                          1554	#1363: {
                          1555	#1364:    tFblMemStatus  retVal;

                                   Fri Apr 10 08:32:15 2020           Page 29
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          1556	#1365:    vuint32        aggregated;
                          1557	#1366:    vuintx         idx;
                          1558	#1368:    retVal      = kFblMemStatus_Ok;
0000009c 70e0e000         1559		e_lis	r7, %hiadj(gBasicInputBuffer)
                          1560	#1369:    aggregated  = 0x00ul;
                          1561	#1371:    /* Data buffer(s) */
                          1562	#1372:    for (idx = 0u; idx < FBL_MEM_BUFFER_COUNT_INPUT; idx++)
                          1563	#1373:    {
                          1564	#1374:       aggregated |= (FBL_MEM_CANARY_VALUE ^ gBasicInputBuffer[idx].canaryFront);
000000a0 1ce70000         1565		e_add16i	r7, r7, %lo(gBasicInputBuffer)
000000a4 c007             1566		se_lwz	r0, 0(r7)
000000a6 70c8e269         1567		e_lis	r6, 17001
000000aa 50e71014         1568		e_lwz	r7, 4116(r7)
000000ae 1cc67264         1569		e_add16i	r6, r6, 29284
000000b2 70a0e000         1570		e_lis	r5, %hiadj(gRemainderBuffer)
000000b6 7cc00278         1571		xor	r0, r6, r0
000000ba 1ca50000         1572		e_add16i	r5, r5, %lo(gRemainderBuffer)
000000be 7cc73a78         1573		xor	r7, r6, r7
                          1574	#1375:       aggregated |= (FBL_MEM_CANARY_VALUE ^ gBasicInputBuffer[idx].canaryBack);
                          1575	#1376:    }
                          1576	#1378: # if defined( FBL_ENABLE_DATA_PROCESSING )
                          1577	#1379:    /* Data processing buffer */
                          1578	#1380:    aggregated |= (FBL_MEM_CANARY_VALUE ^ gProcBuffer.canaryFront);
                          1579	#1381:    aggregated |= (FBL_MEM_CANARY_VALUE ^ gProcBuffer.canaryBack);
                          1580	#1382: # endif /* FBL_ENABLE_DATA_PROCESSING */
                          1581	#1384: # if defined( FBL_MEM_ENABLE_REMAINDER_HANDLING )
                          1582	#1385:    /* Remainder buffer */
                          1583	#1386:    aggregated |= (FBL_MEM_CANARY_VALUE ^ gRemainderBuffer.canaryFront);
000000c2 4407             1584		se_or	r7, r0
000000c4 c005             1585		se_lwz	r0, 0(r5)
000000c6 7cc00278         1586		xor	r0, r6, r0
000000ca 4407             1587		se_or	r7, r0
000000cc c305             1588		se_lwz	r0, 12(r5)
                          1589	#1387:    aggregated |= (FBL_MEM_CANARY_VALUE ^ gRemainderBuffer.canaryBack);
000000ce 70a0e000         1590		e_lis	r5, %hiadj(gGapFillBuffer)
000000d2 1ca50000         1591		e_add16i	r5, r5, %lo(gGapFillBuffer)
000000d6 7cc00278         1592		xor	r0, r6, r0
                          1593	#1388: # endif /* FBL_ENABLE_DATA_PROCESSING */
                          1594	#1390: # if defined( FBL_MEM_ENABLE_GAP_FILL )
                          1595	#1391:    /* Gap fill buffer */
                          1596	#1392:    aggregated |= (FBL_MEM_CANARY_VALUE ^ gGapFillBuffer.canaryFront);
000000da 4407             1597		se_or	r7, r0
000000dc c005             1598		se_lwz	r0, 0(r5)
000000de 7cc00278         1599		xor	r0, r6, r0
000000e2 4407             1600		se_or	r7, r0
000000e4 50050104         1601		e_lwz	r0, 260(r5)
                          1602	#1393:    aggregated |= (FBL_MEM_CANARY_VALUE ^ gGapFillBuffer.canaryBack);
000000e8 4803             1603		se_li	r3, 0
000000ea 7cc00278         1604		xor	r0, r6, r0
000000ee 4407             1605		se_or	r7, r0
                          1606	#1394: # endif /* FBL_ENABLE_DATA_PROCESSING */
                          1607	#1396:    if (0x00ul != aggregated)
000000f0 2a07             1608		se_cmpi	r7, 0
000000f2 e600             1609		se_beq	.L323
                          1610	#1397:    {
                          1611	#1398:       retVal = kFblMemStatus_Failed;

                                   Fri Apr 10 08:32:15 2020           Page 30
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          1612	#line1398
                          1613	..lin.1acf134f..1ca530c6.0_6::
                          1614	.LDWlin6:
000000f4 4a23             1615		se_li	r3, 34
                          1616	#1399:    }
                          1617	#1401:    return retVal;
                          1618	.L323:
                          1619	#	    .ef
                          1620	.LDW12:
000000f6 0004             1621		se_blr
                          1622	__ghs_eofn_FblMemVerifyBufferIntegrity:
                          1623		.type	FblMemVerifyBufferIntegrity,@function
                          1624		.size	FblMemVerifyBufferIntegrity,$-FblMemVerifyBufferIntegrity
                          1625		.type	FblMemVerifyBufferIntegrity..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.,@function
                          1626		.size	FblMemVerifyBufferIntegrity..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.,$-FblMemVerifyBufferIntegrity..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
                          1627		.align	1
                          1628	
                          1629	#function:			FblMemVerifyBufferIntegrity
                          1630	#stack frame size:		0
                          1631	#
                          1632	#retVal	r3	local
                          1633	#aggregated	r7	local
                          1634	
                          1635		.data
                          1636		.section ".vletext", "vax"
                          1637		.vle
                          1638		.vle
                          1639	
                          1640	#1402: }
                          1641	
                          1642	#1403: #endif /* FBL_ENABLE_SYSTEM_CHECK */
                          1643	#1405: #if defined( FBL_MEM_ENABLE_PROC_QUEUE )
                          1644	#1406: /* Queue handling ************************************************************/
                          1645	#1408: /***********************************************************************************************************************
                          1646	#1409:  *  FblMemQueueInit
                          1647	#1410:  **********************************************************************************************************************/
                          1648	#1411: /*! \brief         Initialize queue structure
                          1649	#1412:  *  \details       Implements two double linked lists, representing a used and a free queue.
                          1650	#1413:  *  \param[in,out] queue Pointer to queue array
                          1651	#1414:  *  \param[in]     length Total length of queue, including used and free head
                          1652	#1415:  **********************************************************************************************************************/
                          1653		.align	1
                          1654		.align	1
                          1655	..gh.f.p.4.a.1.r.0.e.6:
                          1656		.type	..gh.f.p.4.a.1.r.0.e.6,@object
                          1657		.size	..gh.f.p.4.a.1.r.0.e.6,0
                          1658		.global	FblMemQueueInit..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
                          1659	FblMemQueueInit..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.:
                          1660	FblMemQueueInit:
                          1661	#	    .bf
                          1662	.LDW22:
                          1663	#1416: static void FblMemQueueInit( V_MEMRAM1 tFblMemQueueEntry V_MEMRAM2 V_MEMRAM3 * queue, tFblMemQueueHandle length )
                          1664	#1417: {
                          1665	#1418:    tFblMemQueueHandle handle;
                          1666	#1419:    tFblMemQueueHandle prevHandle;
                          1667	#1420:    tFblMemQueueHandle nextHandle;

                                   Fri Apr 10 08:32:15 2020           Page 31
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          1668	#1422:    /* Start with empty queue by self-reference */
                          1669	#1423:    queue[FBL_MEM_QUEUE_HANDLE_HEAD_USED].next   = FBL_MEM_QUEUE_HANDLE_HEAD_USED;
000000f8 4800             1670		se_li	r0, 0
000000fa d303             1671		se_stw	r0, 12(r3)
                          1672	#1424:    queue[FBL_MEM_QUEUE_HANDLE_HEAD_USED].prev   = FBL_MEM_QUEUE_HANDLE_HEAD_USED;
000000fc d203             1673		se_stw	r0, 8(r3)
                          1674	#1425:    /* Set default values */
                          1675	#1426:    queue[FBL_MEM_QUEUE_HANDLE_HEAD_USED].job    = FBL_MEM_JOB_NULL;
000000fe d003             1676		se_stw	r0, 0(r3)
                          1677	#1427:    queue[FBL_MEM_QUEUE_HANDLE_HEAD_USED].prio   = FBL_MEM_QUEUE_PRIO_HIGHEST;
00000100 2c80             1678		se_bmaski	r0, 8
00000102 9403             1679		se_stb	r0, 4(r3)
                          1680	#1429:    /* Setup double linked list of empty queue entries */
                          1681	#1430:    /* Head references last entry as predecessor */
                          1682	#1431:    prevHandle = length - 1u;
00000104 18a484ff         1683		e_addi	r5, r4, -1
                          1684	#1432:    nextHandle = FBL_MEM_QUEUE_HANDLE_HEAD_FREE;
00000108 4816             1685		se_li	r6, 1
                          1686	#1434:    /* Append available entries to free queue */
                          1687	#1435:    for (handle = FBL_MEM_QUEUE_HANDLE_HEAD_FREE; handle < length; handle++)
0000010a e800             1688		se_b	.L498
                          1689	.L428:
                          1690	#1436:    {
                          1691	#1437:       nextHandle++;
                          1692	#line1437
                          1693	..lin.1acf134f..c50ad571.0_7::
                          1694	.LDWlin7:
0000010c 7c072070         1695		e_slwi	r7, r0, 4
                          1696	#1439:       /* Set predecessor and successor */
                          1697	#1440:       queue[handle].prev   = prevHandle;
00000110 0437             1698		se_add	r7, r3
00000112 d257             1699		se_stw	r5, 8(r7)
00000114 4805             1700		se_li	r5, 0
                          1701	#1441:       queue[handle].next   = nextHandle;
00000116 2006             1702		se_addi	r6, 1
                          1703	#1442:       /* Set default values */
                          1704	#1443:       queue[handle].job    = FBL_MEM_JOB_NULL;
00000118 9457             1705		se_stb	r5, 4(r7)
0000011a d057             1706		se_stw	r5, 0(r7)
                          1707	#1444:       queue[handle].prio   = FBL_MEM_QUEUE_PRIO_LOWEST;
0000011c d367             1708		se_stw	r6, 12(r7)
                          1709	#1446:       prevHandle = handle;
0000011e 0105             1710		se_mr	r5, r0
                          1711	.L498:
00000120 0160             1712		se_mr	r0, r6
00000122 0d46             1713		se_cmpl	r6, r4
00000124 e400             1714		se_blt	.L428
                          1715	#1447:    }
                          1716	#1449:    /* Last entry references head as successor */
                          1717	#1450:    queue[length - 1u].next = FBL_MEM_QUEUE_HANDLE_HEAD_FREE;
                          1718	#line1450
                          1719	..lin.1acf134f..c50ad571.0_8::
                          1720	.LDWlin8:
00000126 6c44             1721		se_slwi	r4, 4
00000128 0434             1722		se_add	r4, r3
0000012a 4810             1723		se_li	r0, 1

                                   Fri Apr 10 08:32:15 2020           Page 32
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
0000012c 5404fffc         1724		e_stw	r0, -4(r4)
                          1725	#1451: }
                          1726	#	    .ef
                          1727	.LDW32:
00000130 0004             1728		se_blr
                          1729	__ghs_eofn_FblMemQueueInit:
                          1730		.type	FblMemQueueInit,@function
                          1731		.size	FblMemQueueInit,$-FblMemQueueInit
                          1732		.type	FblMemQueueInit..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.,@function
                          1733		.size	FblMemQueueInit..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.,$-FblMemQueueInit..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
                          1734		.align	1
                          1735	
                          1736	#function:			FblMemQueueInit
                          1737	#stack frame size:		0
                          1738	#
                          1739	#handle	r0	local
                          1740	#prevHandle	r5	local
                          1741	#nextHandle	r6	local
                          1742	
                          1743	#queue	r3	param
                          1744	#length	r4	param
                          1745	
                          1746		.data
                          1747		.section ".vletext", "vax"
                          1748		.vle
                          1749		.vle
                          1750	
                          1751	
                          1752	#1453: /***********************************************************************************************************************
                          1753	#1454:  *  FblMemQueueMove
                          1754	#1455:  **********************************************************************************************************************/
                          1755	#1456: /*! \brief         Cut queue entry from current position and place it at a different location (either in same or other queue)
                          1756	#1457:  *  \pre           FblMemQueueInit executed before, source queue not empty
                          1757	#1458:  *                 Passed handles have to represent actual predecessor and successor relationship
                          1758	#1459:  *  \param[in,out] queue Pointer to queue array
                          1759	#1460:  *  \param[in]     handle Handle of queue entry to be moved
                          1760	#1461:  *  \param[in]     prevNew Handle of new predecessor
                          1761	#1462:  *  \return        Handle of affected entry
                          1762	#1463:  **********************************************************************************************************************/
                          1763		.align	1
                          1764		.align	1
                          1765	..gh.f.p.5.a.1.r.0.e.7:
                          1766		.type	..gh.f.p.5.a.1.r.0.e.7,@object
                          1767		.size	..gh.f.p.5.a.1.r.0.e.7,0
                          1768		.global	FblMemQueueMove..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
                          1769	FblMemQueueMove..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.:
                          1770	FblMemQueueMove:
00000132 182106d8         1771		e_stwu	sp, -40(sp)
00000136 0080             1772		se_mflr	r0
00000138 1b21090c         1773		e_stmw	r25, 12(sp)
0000013c db01             1774		se_stw	r0, 44(sp)
0000013e 013c             1775		se_mr	r28, r3
00000140 014d             1776		se_mr	r29, r4
00000142 015b             1777		se_mr	r27, r5
                          1778	#	    .bf
                          1779	.LDW42:

                                   Fri Apr 10 08:32:15 2020           Page 33
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          1780	#1464: static tFblMemQueueHandle FblMemQueueMove( V_MEMRAM1 tFblMemQueueEntry V_MEMRAM2 V_MEMRAM3 * queue,
                          1781	#1465:    tFblMemQueueHandle handle, tFblMemQueueHandle prevNew )
                          1782	#1466: {
                          1783	#1467:    tFblMemQueueHandle prevOld;
                          1784	#1468:    tFblMemQueueHandle nextOld;
                          1785	#1469:    tFblMemQueueHandle nextNew;
                          1786	#1471:    /* Check for matching handles */
                          1787	#1472:    if (handle == prevNew)
00000144 0d54             1788		se_cmpl	r4, r5
00000146 e600             1789		se_beq	.L503
                          1790	#1473:    {
                          1791	#1474:       /* Entry placed at exact same location
                          1792	#1475:          No need to change anything */
                          1793	#1476:    }
                          1794	#1477:    else
                          1795	#1478:    {
                          1796	#1479:       /* Get current predecessor and successor */
                          1797	#1480:       prevOld              = queue[handle].prev;
                          1798	#line1480
                          1799	..lin.1acf134f..c50d0cd4.0_9::
                          1800	.LDWlin9:
00000148 7c9f2070         1801		e_slwi	r31, r4, 4
0000014c 043f             1802		se_add	r31, r3
0000014e c2af             1803		se_lwz	r26, 8(r31)
                          1804	#1481:       nextOld              = queue[handle].next;
00000150 7f592070         1805		e_slwi	r25, r26, 4
                          1806	#1483:       /* Old queue empty? */
                          1807	#1484:       assertFblInternal((queue[prevOld].next != prevOld), kFblMemAssertParameterOutOfRange); /* PRQA S 2214 */ /* MD_FblDef_Assert */
00000154 0439             1808		se_add	r25, r3
00000156 c309             1809		se_lwz	r0, 12(r25)
00000158 c3ef             1810		se_lwz	r30, 12(r31)
0000015a 0da0             1811		se_cmpl	r0, r26
0000015c e200             1812		se_bne	.L504
0000015e 4813             1813		se_li	r3, 1
00000160 78000001         1814		e_bl	ApplFblFatalError
                          1815	.L504:
                          1816	#1486:       /* Remove entry from old queue */
                          1817	#1487:       queue[prevOld].next  = nextOld;
                          1818	#line1487
                          1819	..lin.1acf134f..c50d0cd4.0_10::
                          1820	.LDWlin10:
00000164 d3e9             1821		se_stw	r30, 12(r25)
                          1822	#1488:       queue[nextOld].prev  = prevOld;
00000166 6c4e             1823		se_slwi	r30, 4
00000168 04ce             1824		se_add	r30, r28
0000016a 7f662070         1825		e_slwi	r6, r27, 4
                          1826	#1490:       /* Get new predecessor */
                          1827	#1491:       nextNew              = queue[prevNew].next;
0000016e d2ae             1828		se_stw	r26, 8(r30)
00000170 04c6             1829		se_add	r6, r28
00000172 c376             1830		se_lwz	r7, 12(r6)
                          1831	#1493:       /* Insert entry into new queue */
                          1832	#1494:       queue[handle].prev   = prevNew;
00000174 d2bf             1833		se_stw	r27, 8(r31)
                          1834	#1495:       queue[prevNew].next  = handle;
00000176 d3d6             1835		se_stw	r29, 12(r6)

                                   Fri Apr 10 08:32:15 2020           Page 34
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          1836	#1496:       queue[handle].next   = nextNew;
00000178 d37f             1837		se_stw	r7, 12(r31)
                          1838	#1497:       queue[nextNew].prev  = handle;
0000017a 6c47             1839		se_slwi	r7, 4
0000017c 04c7             1840		se_add	r7, r28
0000017e d2d7             1841		se_stw	r29, 8(r7)
                          1842	.L503:
                          1843	#1498:    }
                          1844	#1500:    return handle;
00000180 01d3             1845		se_mr	r3, r29
                          1846	#	    .ef
                          1847	.LDW52:
00000182 cb01             1848		se_lwz	r0, 44(sp)
00000184 1b21080c         1849		e_lmw	r25, 12(sp)
00000188 18218028         1850		e_addi	sp, sp, 40
0000018c 0090             1851		se_mtlr	r0
0000018e 0004             1852		se_blr
                          1853	__ghs_eofn_FblMemQueueMove:
                          1854		.type	FblMemQueueMove,@function
                          1855		.size	FblMemQueueMove,$-FblMemQueueMove
                          1856		.type	FblMemQueueMove..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.,@function
                          1857		.size	FblMemQueueMove..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.,$-FblMemQueueMove..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
                          1858		.align	1
                          1859	
                          1860	#function:			FblMemQueueMove
                          1861	#stack frame size:		40
                          1862	#link area offset:		0
                          1863	#local storage area offset:	12
                          1864	#gpr save area offset:		12
                          1865	#
                          1866	#prevOld	r26	local
                          1867	#nextOld	r30	local
                          1868	#nextNew	r7	local
                          1869	
                          1870	#queue	r28	param
                          1871	#handle	r29	param
                          1872	#prevNew	r27	param
                          1873	
                          1874		.data
                          1875		.section ".vletext", "vax"
                          1876		.vle
                          1877		.vle
                          1878	
                          1879	#1501: }
                          1880	
                          1881	#1504: /***********************************************************************************************************************
                          1882	#1505:  *  FblMemQueueRemove
                          1883	#1506:  **********************************************************************************************************************/
                          1884	#1507: /*! \brief         Remove specific entry from queue
                          1885	#1508:  *  \details       Take specific entry, remove it from queue and insert it as last entry into free queue.
                          1886	#1509:  *  \pre           FblMemQueueInit executed before, queue not empty
                          1887	#1510:  *  \param[in,out] queue Pointer to queue array
                          1888	#1511:  *  \param[in]     handle Queue entry handle
                          1889	#1512:  *  \return        Handle of removed entry
                          1890	#1513:  **********************************************************************************************************************/
                          1891		.align	1

                                   Fri Apr 10 08:32:15 2020           Page 35
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          1892		.align	1
                          1893	..gh.f.p.4.a.1.r.0.e.8:
                          1894		.type	..gh.f.p.4.a.1.r.0.e.8,@object
                          1895		.size	..gh.f.p.4.a.1.r.0.e.8,0
                          1896		.global	FblMemQueueRemove..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
                          1897	FblMemQueueRemove..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.:
                          1898	FblMemQueueRemove:
                          1899	#	    .bf
                          1900	.LDW62:
                          1901	#1514: static tFblMemQueueHandle FblMemQueueRemove( V_MEMRAM1 tFblMemQueueEntry V_MEMRAM2 V_MEMRAM3 * queue,
                          1902	#1515:    tFblMemQueueHandle handle )
                          1903	#1516: {
                          1904	#1517:    /* Insert at end of free queue
                          1905	#1518:       Place between current last entry and tail (== head) */
                          1906	#1519:    return FblMemQueueMove(queue, handle, queue[FBL_MEM_QUEUE_HANDLE_HEAD_FREE].prev);
00000190 c653             1907		se_lwz	r5, 24(r3)
00000192 e800             1908		se_b	FblMemQueueMove
                          1909	#	    .ef
                          1910	.LDW72:
                          1911	..lin.1acf134f..4773b2ab.0_11::
                          1912	.LDWlin11:
                          1913	__ghs_eofn_FblMemQueueRemove:
                          1914		.type	FblMemQueueRemove,@function
                          1915		.size	FblMemQueueRemove,$-FblMemQueueRemove
                          1916		.type	FblMemQueueRemove..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.,@function
                          1917		.size	FblMemQueueRemove..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.,$-FblMemQueueRemove..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
                          1918		.align	1
                          1919	
                          1920	#function:			FblMemQueueRemove
                          1921	#stack frame size:		0
                          1922	#
                          1923	
                          1924	#queue	none	param
                          1925	#handle	none	param
                          1926	
                          1927		.data
                          1928		.section ".vletext", "vax"
                          1929		.vle
                          1930		.vle
                          1931	
                          1932	#1520: }
                          1933	
                          1934	#1522: /***********************************************************************************************************************
                          1935	#1523:  *  FblMemQueuePrioUpdate
                          1936	#1524:  **********************************************************************************************************************/
                          1937	#1525: /*! \brief         Update priority of a queue entry
                          1938	#1526:  *  \details       Take specific entry, remove it from queue and re-insert it according to the updated priority.
                          1939	#1527:  *  \pre           FblMemQueueInit executed before, queue not empty
                          1940	#1528:  *  \param[in,out] queue Pointer to queue array
                          1941	#1529:  *  \param[in]     handle Queue entry handle
                          1942	#1530:  *  \param[in]     prio New priority value
                          1943	#1531:  *  \return        Handle of updated entry
                          1944	#1532:  **********************************************************************************************************************/
                          1945		.align	1
                          1946		.align	1
                          1947	..gh.f.p.5.a.1.r.0.e.9:

                                   Fri Apr 10 08:32:15 2020           Page 36
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          1948		.type	..gh.f.p.5.a.1.r.0.e.9,@object
                          1949		.size	..gh.f.p.5.a.1.r.0.e.9,0
                          1950		.global	FblMemQueuePrioUpdate..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
                          1951	FblMemQueuePrioUpdate..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.:
                          1952	FblMemQueuePrioUpdate:
00000194 182106e8         1953		e_stwu	sp, -24(sp)
00000198 1ba1090c         1954		e_stmw	r29, 12(sp)
0000019c 0080             1955		se_mflr	r0
0000019e d701             1956		se_stw	r0, 28(sp)
000001a0 013e             1957		se_mr	r30, r3
000001a2 014f             1958		se_mr	r31, r4
000001a4 015d             1959		se_mr	r29, r5
                          1960	#	    .bf
                          1961	.LDW82:
                          1962	#1533: static tFblMemQueueHandle FblMemQueuePrioUpdate( V_MEMRAM1 tFblMemQueueEntry V_MEMRAM2 V_MEMRAM3 * queue,
                          1963	#1534:    tFblMemQueueHandle handle, tFblMemQueuePrio prio )
                          1964	#1535: {
                          1965	#1536:    tFblMemQueueHandle prevHandle;
                          1966	#1538:    /* Start search at last entry */
                          1967	#1539:    prevHandle = queue[FBL_MEM_QUEUE_HANDLE_HEAD_USED].prev;
000001a6 c253             1968		se_lwz	r5, 8(r3)
                          1969	#1541:    /* Skip all entries with lower priority
                          1970	#1542:       Remark: Search is assured to stop at head because it has the highest possible priority */
                          1971	#1543:    while (queue[prevHandle].prio < prio)
000001a8 e800             1972		se_b	.L626
                          1973	.L628:
                          1974	#1544:    {
                          1975	#1545:       prevHandle = queue[prevHandle].prev;
                          1976	#line1545
                          1977	..lin.1acf134f..4f4daa1a.0_12::
                          1978	.LDWlin12:
000001aa c257             1979		se_lwz	r5, 8(r7)
                          1980	.L626:
000001ac 7ca72070         1981		e_slwi	r7, r5, 4
000001b0 0437             1982		se_add	r7, r3
000001b2 8407             1983		se_lbz	r0, 4(r7)
000001b4 0dd0             1984		se_cmpl	r0, r29
000001b6 e400             1985		se_blt	.L628
                          1986	#1546:    }
                          1987	#1548:    /* Append after first entry with higher or equal priority */
                          1988	#1549:    (void)FblMemQueueMove(queue, handle, prevHandle);
                          1989	#line1549
                          1990	..lin.1acf134f..4f4daa1a.0_13::
                          1991	.LDWlin13:
000001b8 e900             1992		se_bl	FblMemQueueMove
                          1993	#1550:    /* Update priority of inserted entry */
                          1994	#1551:    queue[handle].prio = prio;
                          1995	#line1551
                          1996	..lin.1acf134f..4f4daa1a.0_14::
                          1997	.LDWlin14:
000001ba 7fe72070         1998		e_slwi	r7, r31, 4
000001be 04e7             1999		se_add	r7, r30
000001c0 01f3             2000		se_mr	r3, r31
                          2001	#1553:    return handle;
000001c2 94d7             2002		se_stb	r29, 4(r7)
                          2003	#	    .ef

                                   Fri Apr 10 08:32:15 2020           Page 37
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          2004	.LDW92:
000001c4 c701             2005		se_lwz	r0, 28(sp)
000001c6 1ba1080c         2006		e_lmw	r29, 12(sp)
000001ca 2171             2007		se_addi	sp, 24
000001cc 0090             2008		se_mtlr	r0
000001ce 0004             2009		se_blr
                          2010	__ghs_eofn_FblMemQueuePrioUpdate:
                          2011		.type	FblMemQueuePrioUpdate,@function
                          2012		.size	FblMemQueuePrioUpdate,$-FblMemQueuePrioUpdate
                          2013		.type	FblMemQueuePrioUpdate..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.,@function
                          2014		.size	FblMemQueuePrioUpdate..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.,$-FblMemQueuePrioUpdate..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
                          2015		.align	1
                          2016	
                          2017	#function:			FblMemQueuePrioUpdate
                          2018	#stack frame size:		24
                          2019	#link area offset:		0
                          2020	#local storage area offset:	12
                          2021	#gpr save area offset:		12
                          2022	#
                          2023	#prevHandle	r5	local
                          2024	
                          2025	#queue	r30	param
                          2026	#handle	r31	param
                          2027	#prio	r29	param
                          2028	
                          2029		.data
                          2030		.section ".vletext", "vax"
                          2031		.vle
                          2032		.vle
                          2033	
                          2034	#1554: }
                          2035	
                          2036	#1556: /***********************************************************************************************************************
                          2037	#1557:  *  FblMemQueuePrioInsert
                          2038	#1558:  **********************************************************************************************************************/
                          2039	#1559: /*! \brief         Insert entry into queue using given priority
                          2040	#1560:  *  \details       Take first free entry, remove it from free queue and insert it according to the given priority.
                          2041	#1561:  *                 Additionally set job associated with queue entry
                          2042	#1562:  *  \pre           FblMemQueueInit executed before, queue not empty
                          2043	#1563:  *  \param[in,out] queue Pointer to queue array
                          2044	#1564:  *  \param[in]     prio Priority value
                          2045	#1565:  *  \param[in]     job Job associated with queue entry
                          2046	#1566:  *  \return        Handle of inserted entry
                          2047	#1567:  **********************************************************************************************************************/
                          2048		.align	1
                          2049		.align	1
                          2050	..gh.f.p.5.a.1.r.0.e.10:
                          2051		.type	..gh.f.p.5.a.1.r.0.e.10,@object
                          2052		.size	..gh.f.p.5.a.1.r.0.e.10,0
                          2053		.global	FblMemQueuePrioInsert..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
                          2054	FblMemQueuePrioInsert..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.:
                          2055	FblMemQueuePrioInsert:
000001d0 182106e8         2056		e_stwu	sp, -24(sp)
000001d4 1ba1090c         2057		e_stmw	r29, 12(sp)
000001d8 0080             2058		se_mflr	r0
000001da d701             2059		se_stw	r0, 28(sp)

                                   Fri Apr 10 08:32:15 2020           Page 38
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
000001dc 013f             2060		se_mr	r31, r3
000001de 014d             2061		se_mr	r29, r4
000001e0 015e             2062		se_mr	r30, r5
                          2063	#	    .bf
                          2064	.LDW03:
                          2065	#1568: static tFblMemQueueHandle FblMemQueuePrioInsert( V_MEMRAM1 tFblMemQueueEntry V_MEMRAM2 V_MEMRAM3 * queue,
                          2066	#1569:    tFblMemQueuePrio prio, V_MEMRAM1 tFblMemJob V_MEMRAM2 V_MEMRAM3 * job )
                          2067	#1570: {
                          2068	#1571:    tFblMemQueueHandle handle;
                          2069	#1573:    /* Free queue empty? */
                          2070	#1574:    assertFblInternal((!FblMemQueueIsFull(queue)), kFblMemAssertParameterOutOfRange); /* PRQA S 2214 */ /* MD_FblDef_Assert */
000001e2 c703             2071		se_lwz	r0, 28(r3)
000001e4 2a10             2072		se_cmpi	r0, 1
000001e6 e200             2073		se_bne	.L704
000001e8 4813             2074		se_li	r3, 1
000001ea 78000001         2075		e_bl	ApplFblFatalError
                          2076	.L704:
                          2077	#1576:    /* Relocate first free entry according to given priority */
                          2078	#1577:    handle = FblMemQueuePrioUpdate(queue, queue[FBL_MEM_QUEUE_HANDLE_HEAD_FREE].next, prio);
                          2079	#line1577
                          2080	..lin.1acf134f..3333dc0c.0_15::
                          2081	.LDWlin15:
000001ee 01f3             2082		se_mr	r3, r31
000001f0 c743             2083		se_lwz	r4, 28(r3)
000001f2 01d5             2084		se_mr	r5, r29
000001f4 e900             2085		se_bl	FblMemQueuePrioUpdate
                          2086	#1578:    /* Set job of entry */
                          2087	#1579:    queue[handle].job = job;
                          2088	#line1579
                          2089	..lin.1acf134f..3333dc0c.0_16::
                          2090	.LDWlin16:
000001f6 7c672070         2091		e_slwi	r7, r3, 4
000001fa 7fc7f92e         2092		stwx	r30, r7, r31
                          2093	#1581:    return handle;
                          2094	#	    .ef
                          2095	.LDW13:
000001fe c701             2096		se_lwz	r0, 28(sp)
00000200 1ba1080c         2097		e_lmw	r29, 12(sp)
00000204 2171             2098		se_addi	sp, 24
00000206 0090             2099		se_mtlr	r0
00000208 0004             2100		se_blr
                          2101	__ghs_eofn_FblMemQueuePrioInsert:
                          2102		.type	FblMemQueuePrioInsert,@function
                          2103		.size	FblMemQueuePrioInsert,$-FblMemQueuePrioInsert
                          2104		.type	FblMemQueuePrioInsert..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.,@function
                          2105		.size	FblMemQueuePrioInsert..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.,$-FblMemQueuePrioInsert..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
                          2106		.align	1
                          2107	
                          2108	#function:			FblMemQueuePrioInsert
                          2109	#stack frame size:		24
                          2110	#link area offset:		0
                          2111	#local storage area offset:	12
                          2112	#gpr save area offset:		12
                          2113	#
                          2114	
                          2115	#queue	r31	param

                                   Fri Apr 10 08:32:15 2020           Page 39
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          2116	#prio	r29	param
                          2117	#job	r30	param
                          2118	
                          2119		.data
                          2120		.section ".vletext", "vax"
                          2121		.vle
                          2122		.vle
                          2123	
                          2124	#1582: }
                          2125	
                          2126	#1584: /***********************************************************************************************************************
                          2127	#1585:  *  FblMemQueueDefaultPrioInsert
                          2128	#1586:  **********************************************************************************************************************/
                          2129	#1587: /*! \brief         Insert entry into queue using default priority
                          2130	#1588:  *  \details       Take first free entry, remove it from free queue and insert it according to the default priority of
                          2131	#1589:                    the given job's type. Additionally set job associated with queue entry and update segment index of job.
                          2132	#1590:  *  \pre           FblMemQueueInit executed before, queue not empty
                          2133	#1591:  *  \param[in,out] queue Pointer to queue array
                          2134	#1592:  *  \param[in]     job Job associated with queue entry
                          2135	#1593:  *  \param[in]     segmentIndex Segment index assigned to job
                          2136	#1594:  *  \return        Handle of inserted entry
                          2137	#1595:  **********************************************************************************************************************/
                          2138		.align	1
                          2139		.align	1
                          2140		.align	1
                          2141	..gh.f.p.5.a.1.r.0.e.11:
                          2142		.type	..gh.f.p.5.a.1.r.0.e.11,@object
                          2143		.size	..gh.f.p.5.a.1.r.0.e.11,0
                          2144		.global	FblMemQueueDefaultPrioInsert..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
                          2145	FblMemQueueDefaultPrioInsert..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.:
                          2146	FblMemQueueDefaultPrioInsert:
0000020a 182106e8         2147		e_stwu	sp, -24(sp)
0000020e 1ba1090c         2148		e_stmw	r29, 12(sp)
00000212 0080             2149		se_mflr	r0
00000214 d701             2150		se_stw	r0, 28(sp)
00000216 013d             2151		se_mr	r29, r3
00000218 014f             2152		se_mr	r31, r4
0000021a 015e             2153		se_mr	r30, r5
                          2154	#	    .bf
                          2155	.LDW23:
                          2156	#1596: static tFblMemQueueHandle FblMemQueueDefaultPrioInsert( V_MEMRAM1 tFblMemQueueEntry V_MEMRAM2 V_MEMRAM3 * queue,
                          2157	#1597:    V_MEMRAM1 tFblMemJob V_MEMRAM2 V_MEMRAM3 * job, vuintx segmentIndex )
                          2158	#1598: {
                          2159	#1599:    /* Valid job type? */
                          2160	#1600:    assertFblInternal((job->type < kFblMemJobType_Max), kFblMemAssertParameterOutOfRange); /* PRQA S 2214 */ /* MD_FblDef_Assert */
0000021c c704             2161		se_lwz	r0, 28(r4)
0000021e 2a30             2162		se_cmpi	r0, 3
00000220 e400             2163		se_blt	.L779
00000222 4813             2164		se_li	r3, 1
00000224 78000001         2165		e_bl	ApplFblFatalError
                          2166	.L779:
                          2167	#1602:    /* Remember segment index associated with job */
                          2168	#1603:    job->segmentIndex = segmentIndex;
                          2169	#line1603
                          2170	..lin.1acf134f..988132b1.0_17::
                          2171	.LDWlin17:

                                   Fri Apr 10 08:32:15 2020           Page 40
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
00000228 c70f             2172		se_lwz	r0, 28(r31)
                          2173	#1605:    return FblMemQueuePrioInsert(queue, gJobPrio[job->type], job);
0000022a 1ce00000         2174		e_add16i	r7, r0, %lo(gJobPrio)
0000022e 70079000         2175		e_add2is	r7, %hiadj(gJobPrio)
00000232 8047             2176		se_lbz	r4, 0(r7)
00000234 01f5             2177		se_mr	r5, r31
00000236 01d3             2178		se_mr	r3, r29
00000238 d9ef             2179		se_stw	r30, 36(r31)
0000023a e900             2180		se_bl	FblMemQueuePrioInsert
                          2181	#	    .ef
                          2182	.LDW33:
                          2183	#line1603
                          2184	..lin.1acf134f..988132b1.0_18::
                          2185	.LDWlin18:
0000023c c701             2186		se_lwz	r0, 28(sp)
0000023e 1ba1080c         2187		e_lmw	r29, 12(sp)
00000242 2171             2188		se_addi	sp, 24
00000244 0090             2189		se_mtlr	r0
00000246 0004             2190		se_blr
                          2191	__ghs_eofn_FblMemQueueDefaultPrioInsert:
                          2192		.type	FblMemQueueDefaultPrioInsert,@function
                          2193		.size	FblMemQueueDefaultPrioInsert,$-FblMemQueueDefaultPrioInsert
                          2194		.type	FblMemQueueDefaultPrioInsert..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.,@function
                          2195		.size	FblMemQueueDefaultPrioInsert..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.,$-FblMemQueueDefaultPrioInsert..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
                          2196		.align	1
                          2197	
                          2198	#function:			FblMemQueueDefaultPrioInsert
                          2199	#stack frame size:		24
                          2200	#link area offset:		0
                          2201	#local storage area offset:	12
                          2202	#gpr save area offset:		12
                          2203	#
                          2204	
                          2205	#queue	r29	param
                          2206	#job	r31	param
                          2207	#segmentIndex	r30	param
                          2208	
                          2209		.section ".rodata","a"
                          2210		.global	gJobPrio..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
                          2211	gJobPrio..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.:
00000000 0403             2212	gJobPrio:	.byte	4,3
00000002 02               2213		.byte	2
00000003 00               2214		.space	1
                          2215		.type	gJobPrio..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.,@object
                          2216		.size	gJobPrio..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.,4
                          2217		.type	gJobPrio,@object
                          2218		.size	gJobPrio,4
                          2219		.data
                          2220		.section ".vletext", "vax"
                          2221		.vle
                          2222		.vle
                          2223	
                          2224	#1606: }
                          2225	
                          2226	#1607: #endif /* FBL_MEM_ENABLE_PROC_QUEUE */
                          2227	#1610: /***********************************************************************************************************************

                                   Fri Apr 10 08:32:15 2020           Page 41
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          2228	#1611:  *  FblMemInitJob
                          2229	#1612:  **********************************************************************************************************************/
                          2230	#1613: /*! \brief     Initialize job information structure
                          2231	#1614:  *  \details   Assign given buffer to job and set type
                          2232	#1615:  *  \param[in,out] job Job information to be initialized
                          2233	#1616:  *  \param[in]     buffer Buffer associated with job
                          2234	#1617:  *  \param[in]     size Size of given buffer
                          2235	#1618:  *  \param[in]     type Type of job
                          2236	#1619:  **********************************************************************************************************************/
                          2237		.align	1
                          2238		.align	1
                          2239	..gh.f.p.6.a.1.r.0.e.12:
                          2240		.type	..gh.f.p.6.a.1.r.0.e.12,@object
                          2241		.size	..gh.f.p.6.a.1.r.0.e.12,0
                          2242		.global	FblMemInitJob..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
                          2243	FblMemInitJob..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.:
                          2244	FblMemInitJob:
                          2245	#	    .bf
                          2246	.LDW43:
                          2247	#1620: static void FblMemInitJob( V_MEMRAM1 tFblMemJob V_MEMRAM2 V_MEMRAM3 * job, tFblMemRamData buffer, tFblLength size,
                          2248	#1621:    tFblMemJobType type )
                          2249	#1622: {
                          2250	#1623:    /* Assign given buffer */
                          2251	#1624:    job->buffer          = buffer;
00000248 d043             2252		se_stw	r4, 0(r3)
                          2253	#1625:    job->totalSize       = size;
0000024a d153             2254		se_stw	r5, 4(r3)
                          2255	#1626:    job->netSize         = size;
0000024c 4800             2256		se_li	r0, 0
                          2257	#1627:    /* Default values */
                          2258	#1628:    job->offset          = 0u;
0000024e d253             2259		se_stw	r5, 8(r3)
00000250 d303             2260		se_stw	r0, 12(r3)
                          2261	#1629:    job->position        = 0u;
00000252 d403             2262		se_stw	r0, 16(r3)
                          2263	#1630:    job->used            = 0u;
00000254 d503             2264		se_stw	r0, 20(r3)
                          2265	#1631:    /* Set job type */
                          2266	#1632:    job->type            = type;
00000256 d763             2267		se_stw	r6, 28(r3)
                          2268	#1633:    /* Job complete as soon as "used" member reaches zero */
                          2269	#1634:    job->completion      = kFblMemOperationMode_Normal;
00000258 d803             2270		se_stw	r0, 32(r3)
                          2271	#1635: }
                          2272	#	    .ef
                          2273	.LDW53:
0000025a 0004             2274		se_blr
                          2275	__ghs_eofn_FblMemInitJob:
                          2276		.type	FblMemInitJob,@function
                          2277		.size	FblMemInitJob,$-FblMemInitJob
                          2278		.type	FblMemInitJob..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.,@function
                          2279		.size	FblMemInitJob..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.,$-FblMemInitJob..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
                          2280		.align	1
                          2281	
                          2282	#function:			FblMemInitJob
                          2283	#stack frame size:		0

                                   Fri Apr 10 08:32:15 2020           Page 42
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          2284	#
                          2285	
                          2286	#job	r3	param
                          2287	#buffer	r4	param
                          2288	#size	r5	param
                          2289	#type	r6	param
                          2290	
                          2291		.data
                          2292		.section ".vletext", "vax"
                          2293		.vle
                          2294		.vle
                          2295	
                          2296	
                          2297	#1637: /***********************************************************************************************************************
                          2298	#1638:  *  FblMemInitInputQueue
                          2299	#1639:  **********************************************************************************************************************/
                          2300	#1640: /*! \brief     Initialize input queue
                          2301	#1641:  *  \details   Additionally job information of input buffers is prepared.
                          2302	#1642:  *             Will also be carried out for single buffer use-case
                          2303	#1643:  **********************************************************************************************************************/
                          2304		.align	1
                          2305		.align	1
                          2306	..gh.f.p.0.a.1.r.0.e.13:
                          2307		.type	..gh.f.p.0.a.1.r.0.e.13,@object
                          2308		.size	..gh.f.p.0.a.1.r.0.e.13,0
                          2309		.global	FblMemInitInputQueue..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
                          2310	FblMemInitInputQueue..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.:
                          2311	FblMemInitInputQueue:
0000025c 0080             2312		se_mflr	r0
0000025e d101             2313		se_stw	r0, 4(sp)
00000260 182106f8         2314		e_stwu	sp, -8(sp)
                          2315	#	    .bf
                          2316	.LDW63:
                          2317	#1644: static void FblMemInitInputQueue( void )
                          2318	#1645: {
                          2319	#1646:    vuintx idx;
                          2320	#1647:    vuintx actualBasicIdx;
                          2321	#1649:    /* First input buffer assigned to specified input source */
                          2322	#1650:    actualBasicIdx = FBL_MEM_ACTIVE_SOURCE;
                          2323	#1652:    idx = 0u;
                          2324	#1654:    {
                          2325	#1655:       /* Reset job information and assign actual buffers */
                          2326	#1656:       FblMemInitJob( &FBL_MEM_INPUT_JOB[idx], gBasicInputBuffer[actualBasicIdx].data,
00000264 7060e000         2327		e_lis	r3, %hiadj(gInputJobs)
00000268 7080e000         2328		e_lis	r4, %hiadj(gBasicInputBuffer+4)
0000026c 1c630000         2329		e_add16i	r3, r3, %lo(gInputJobs)
00000270 1c840004         2330		e_add16i	r4, r4, %lo(gBasicInputBuffer+4)
00000274 70a20010         2331		e_li	r5, 4112
00000278 4806             2332		se_li	r6, 0
0000027a e900             2333		se_bl	FblMemInitJob
                          2334	#1657:                      FBL_MEM_ARRAY_SIZE(gBasicInputBuffer[actualBasicIdx].data), kFblMemJobType_InputWrite );
                          2335	#1658:       /* Overwrite net size, to exclude overhead for remainder and padding */
                          2336	#1659:       FBL_MEM_INPUT_JOB[idx].netSize   = FBL_MEM_BUFFER_SIZE;
                          2337	#line1659
                          2338	..lin.1acf134f..75933361.0_19::
                          2339	.LDWlin19:

                                   Fri Apr 10 08:32:15 2020           Page 43
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
0000027c 2cc0             2340		se_bmaski	r0, 12
0000027e d203             2341		se_stw	r0, 8(r3)
                          2342	#1660:       /* Default offset to align actual data to platform requirements */
                          2343	#1661:       FBL_MEM_INPUT_JOB[idx].offset    = FBL_MEM_PREAMBLE_OFFSET(FBL_MEM_PREAMBLE_LENGTH);
00000280 4820             2344		se_li	r0, 2
00000282 d303             2345		se_stw	r0, 12(r3)
                          2346	#1663:    }
                          2347	#1664: }
                          2348	#	    .ef
                          2349	.LDW73:
00000284 c301             2350		se_lwz	r0, 12(sp)
00000286 2071             2351		se_addi	sp, 8
00000288 0090             2352		se_mtlr	r0
0000028a 0004             2353		se_blr
                          2354	__ghs_eofn_FblMemInitInputQueue:
                          2355		.type	FblMemInitInputQueue,@function
                          2356		.size	FblMemInitInputQueue,$-FblMemInitInputQueue
                          2357		.type	FblMemInitInputQueue..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.,@function
                          2358		.size	FblMemInitInputQueue..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.,$-FblMemInitInputQueue..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
                          2359		.align	1
                          2360	
                          2361	#function:			FblMemInitInputQueue
                          2362	#stack frame size:		8
                          2363	#link area offset:		0
                          2364	#local storage area offset:	8
                          2365	#
                          2366	
                          2367		.data
                          2368		.section ".vletext", "vax"
                          2369		.vle
                          2370		.vle
                          2371	
                          2372	
                          2373	#1666: /***********************************************************************************************************************
                          2374	#1667:  *  FblMemInitStates
                          2375	#1668:  **********************************************************************************************************************/
                          2376	#1669: /*! \brief    Setup all data structures
                          2377	#1670:  *  \pre      FblMemInitPowerOn executed before
                          2378	#1671:  **********************************************************************************************************************/
                          2379		.align	1
                          2380		.align	1
                          2381	..gh.f.p.0.a.1.r.0.e.14:
                          2382		.type	..gh.f.p.0.a.1.r.0.e.14,@object
                          2383		.size	..gh.f.p.0.a.1.r.0.e.14,0
                          2384		.global	FblMemInitStates..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
                          2385	FblMemInitStates..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.:
                          2386	FblMemInitStates:
                          2387	#	    .bf
                          2388	.LDW83:
                          2389	#1672: static void FblMemInitStates( void )
                          2390	#1673: {
                          2391	#1674:    /* Setup idle state */
                          2392	#1675:    fblMemProgState   = kFblMemProgState_Idle;
0000028c 4800             2393		se_li	r0, 0
0000028e 70e0e000         2394		e_lis	r7, %hiadj(fblMemProgState)
00000292 54070000         2395		e_stw	r0, %lo(fblMemProgState)(r7)

                                   Fri Apr 10 08:32:15 2020           Page 44
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          2396	#1676:    gErrorStatus      = kFblMemStatus_Ok;
00000296 70e0e000         2397		e_lis	r7, %hiadj(gErrorStatus)
0000029a 54070000         2398		e_stw	r0, %lo(gErrorStatus)(r7)
                          2399	#1678:    /* No operations allowed */
                          2400	#1679:    FblMemResetAllowed();
0000029e 70e0e000         2401		e_lis	r7, %hiadj(gAllowedInd)
000002a2 54070000         2402		e_stw	r0, %lo(gAllowedInd)(r7)
                          2403	#1680: }
                          2404	#	    .ef
                          2405	.LDW93:
000002a6 0004             2406		se_blr
                          2407	__ghs_eofn_FblMemInitStates:
                          2408		.type	FblMemInitStates,@function
                          2409		.size	FblMemInitStates,$-FblMemInitStates
                          2410		.type	FblMemInitStates..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.,@function
                          2411		.size	FblMemInitStates..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.,$-FblMemInitStates..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
                          2412		.align	1
                          2413	
                          2414	#function:			FblMemInitStates
                          2415	#stack frame size:		0
                          2416	#
                          2417	
                          2418		.data
                          2419		.section ".vletext", "vax"
                          2420		.vle
                          2421		.vle
                          2422	
                          2423	
                          2424	#1682: /***********************************************************************************************************************
                          2425	#1683:  *  FblMemInitInternal
                          2426	#1684:  **********************************************************************************************************************/
                          2427	#1685: /*! \brief    Setup all data structures
                          2428	#1686:  *  \pre      FblMemInitPowerOn executed before
                          2429	#1687:  *  \return   Pointer to active input buffer
                          2430	#1688:  **********************************************************************************************************************/
                          2431	#1689: static tFblMemRamData FblMemInitInternal( void )
                          2432	#1690: {
                          2433	#1692:    /* Setup idle state */
                          2434	#1693:    FblMemInitStates();
                          2435	#1695: #if defined( FBL_MEM_ENABLE_PROC_QUEUE )
                          2436	#1696:    /* Setup processing queue */
                          2437	#1697:    FblMemQueueInit(gProcessingQueue, FBL_MEM_ARRAY_SIZE(gProcessingQueue));
                          2438	#1698: #endif /* FBL_MEM_ENABLE_PROC_QUEUE */
                          2439	#1699:    FblMemInitInputQueue();
                          2440	#1701: #if defined( FBL_MEM_ENABLE_REMAINDER_HANDLING )
                          2441	#1702:    FblMemInitJob(&gWriteFinalizeJob, gRemainderBuffer.data, FBL_MEM_SEGMENT_SIZE, kFblMemJobType_WriteFinalize);
                          2442	#1703: #endif /* FBL_MEM_ENABLE_REMAINDER_HANDLING */
                          2443	#1705: #if defined( FBL_ENABLE_DATA_PROCESSING )
                          2444	#1706:    /* Reset current data length, no full re-initialization necessary */
                          2445	#1707:    gProcWriteJob.used = 0u;
                          2446	#1708: #endif /* FBL_ENABLE_DATA_PROCESSING */
                          2447	#1710: #if defined( FBL_MEM_ENABLE_STREAM_OUTPUT ) && \
                          2448	#1711:     defined( FBL_ENABLE_DATA_PROCESSING )
                          2449	#1712:    /* Reset current data length, no full re-initialization necessary */
                          2450	#1713:    gStreamProcJob.used = 0u;
                          2451	#1714: #endif /* FBL_MEM_ENABLE_STREAM_OUTPUT && FBL_ENABLE_DATA_PROCESSING*/

                                   Fri Apr 10 08:32:15 2020           Page 45
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          2452	#1717: #if defined( FBL_ENABLE_SYSTEM_CHECK )
                          2453	#1718:    FblMemInitBufferIntegrity();
                          2454	#1719: #endif /* FBL_ENABLE_SYSTEM_CHECK */
                          2455	#1721: #if defined( FBL_MEM_ENABLE_PROGRESS_INFO )
                          2456	#1722:    FblMemInitProgress();
                          2457	#1723: #endif /* FBL_MEM_ENABLE_PROGRESS_INFO */
                          2458	#1725:    /* Allow block start / erase indication */
                          2459	#1726:    FblMemSetAllowed(FBL_MEM_ALLOWED_BLOCK_START | FBL_MEM_ALLOWED_BLOCK_ERASE);
                          2460	#1728:    return FblMemGetActiveBuffer();
                          2461	#1729: }
                          2462	#1731: #if defined( FBL_MEM_ENABLE_PREAMBLE_HANDLING )
                          2463	#1732: /***********************************************************************************************************************
                          2464	#1733:  *  FblMemStorePreamble
                          2465	#1734:  **********************************************************************************************************************/
                          2466	#1735: /*! \brief      Store the current buffer preamble (protocol information before actual data)
                          2467	#1736:  *  \details    Active fill buffer may be exchanged by subsequent operations, so preamble has to be restored for
                          2468	#1737:  *              calling instance
                          2469	#1738:  *  \pre        FblMemInitPowerOn executed before, fill buffer available
                          2470	#1739:  **********************************************************************************************************************/
                          2471	#1740: static void FblMemStorePreamble( void )
                          2472	#1741: {
                          2473	#1742: #if defined( FBL_MEM_ENABLE_DYNAMIC_PREAMBLE_LENGTH )
                          2474	#1743:    /* Verify preamble fits into reserved buffer */
                          2475	#1744:    assertFblGen(FBL_MEM_PREAMBLE_LENGTH <= FBL_MEM_MAX_PREAMBLE_LENGTH, kFblMemAssertParameterOutOfRange); /* PRQA S 2214 */ /* MD_FblDef_Assert */
                          2476	#1745: #endif /* FBL_MEM_ENABLE_DYNAMIC_PREAMBLE_LENGTH */
                          2477	#1747:    /* Copy preamble from active fill to temporary buffer */
                          2478	#1748:    (void)MEMCPY(gPreambleBuffer, FblMemGetActiveBuffer(), FBL_MEM_PREAMBLE_LENGTH);
                          2479	#1749: }
                          2480	#1751: /***********************************************************************************************************************
                          2481	#1752:  *  FblMemRestorePreamble
                          2482	#1753:  **********************************************************************************************************************/
                          2483	#1754: /*! \brief      Restore the previously stored preamble (protocol information before actual data) into the (new) active
                          2484	#1755:  *              fill buffer
                          2485	#1756:  *  \details    Active buffer could be exchanged by preceding operations, so preamble has to be restored for calling
                          2486	#1757:  *              instance
                          2487	#1758:  *  \pre        FblMemInitPowerOn executed before, fill buffer available
                          2488	#1759:  **********************************************************************************************************************/
                          2489	#1760: static void FblMemRestorePreamble( void )
                          2490	#1761: {
                          2491	#1762:    /* Copy previously stored preamble from temporary to active fill buffer */
                          2492	#1763:    (void)MEMCPY(FblMemGetActiveBuffer(), gPreambleBuffer, FBL_MEM_PREAMBLE_LENGTH);
                          2493	#1764: }
                          2494	#1765: #endif /* FBL_MEM_ENABLE_PREAMBLE_HANDLING */
                          2495	#1767: #if defined( FBL_MEM_ENABLE_SEGMENTATION ) 
                          2496	#1768: /***********************************************************************************************************************
                          2497	#1769:  *  FblMemLimitLength
                          2498	#1770:  **********************************************************************************************************************/
                          2499	#1771: /*! \brief        Length will be truncated if limit is exceeded
                          2500	#1772:  *  \details      Original value will be returned if finalization operation mode is set
                          2501	#1773:  *  \param[in]    inputLen Original length
                          2502	#1774:  *  \param[in]    type Type of active job
                          2503	#1775:  *  \param[in]    mode Current operation mode (used for finalization)
                          2504	#1776:  *  \return       Input length limited to given range
                          2505	#1777:  **********************************************************************************************************************/
                          2506	#1778: static tFblLength FblMemLimitLength( tFblLength inputLen, tFblMemJobType type, tFblMemOperationMode mode )
                          2507	#1779: {

                                   Fri Apr 10 08:32:15 2020           Page 46
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          2508	#1780:    tFblLength lengthLimit;
                          2509	#1782: # if defined( V_ENABLE_USE_DUMMY_STATEMENT )
                          2510	#1783:    /* Parameters not used: avoid compiler warning */
                          2511	#1784: #  if defined( FBL_MEM_ENABLE_SEGMENTATION )
                          2512	#1785: #  else
                          2513	#1786:    (void)mode; /* PRQA S 3112 */ /* MD_FblMem_3112 */
                          2514	#1787: #  endif /* FBL_MEM_ENABLE_SEGMENTATION */
                          2515	#1788: # endif /* V_ENABLE_USE_DUMMY_STATEMENT */
                          2516	#1790:    /* Valid job type? */
                          2517	#1791:    assertFblInternal((type < kFblMemJobType_Max), kFblMemAssertParameterOutOfRange); /* PRQA S 2214 */ /* MD_FblDef_Assert */
                          2518	#1793:    lengthLimit = gLengthLimits[type].limit;
                          2519	#1795:    if (lengthLimit > 0)
                          2520	#1796:    {
                          2521	#1797: # if defined( FBL_MEM_ENABLE_SEGMENTATION )
                          2522	#1798:       /* Segmentation explicitly enabled
                          2523	#1799:          Truncate to given limit, unless unlimited mode for job type (typically finalize) is set */
                          2524	#1800:       if ((gLengthLimits[type].unlimitedMode != mode) && (inputLen > lengthLimit))
                          2525	#1801: # else
                          2526	#1802:       /* Truncate to given limit, if unconditional mode is configured for job type */
                          2527	#1803:       if ((gLengthLimits[type].unlimitedMode == kFblMemOperationMode_Unconditional) && (inputLen > lengthLimit))
                          2528	#1804: # endif /* FBL_MEM_ENABLE_SEGMENTATION */
                          2529	#1805:       {
                          2530	#1806:          inputLen = lengthLimit;
                          2531	#1807:       }
                          2532	#1808:    }
                          2533	#1810:    return inputLen;
                          2534	#1811: }
                          2535	#1812: #endif /* FBL_MEM_ENABLE_SEGMENTATION || FBL_MEM_ENABLE_VERIFY_PIPELINED */
                          2536	#1814: /***********************************************************************************************************************
                          2537	#1815:  *  FblMemPadLength
                          2538	#1816:  **********************************************************************************************************************/
                          2539	#1817: /*! \brief      Calculate number of bytes required to pad provided address range to memory segment size
                          2540	#1818:  *  \param[in]  address Start address of memory range
                          2541	#1819:  *  \param[in]  length Length of memory range
                          2542	#1820:  *  \return     Number of required padding bytes
                          2543	#1821:  **********************************************************************************************************************/
                          2544	#1822: static tFblLength FblMemPadLength( tFblAddress address, tFblLength length )
                          2545	#1823: {
                          2546	#1824:    tFblLength  localAddress;
                          2547	#1825:    tFblLength  localLength;
                          2548	#1826:    tFblLength  padLen;
                          2549	#1827:    tFblAddress alignMask;
                          2550	#1828:    vsint16     oldSegment;
                          2551	#1830:    /* Local copy of length */
                          2552	#1831:    localLength = length;
                          2553	#1832:    /* Special handling required for zero length
                          2554	#1833:       Address used directly */
                          2555	#1834:    if (length > 0u)
                          2556	#1835:    {
                          2557	#1836:       localLength--;
                          2558	#1837:    }
                          2559	#1839:    /* Calculate end address */
                          2560	#1840:    localAddress  = address + localLength;
                          2561	#1842:    /* Initialize padding length */
                          2562	#1843:    padLen      = 0u;
                          2563	#1845:    /* Remember current memory segment */

                                   Fri Apr 10 08:32:15 2020           Page 47
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          2564	#1846:    oldSegment  = memSegment;
                          2565	#1848:    /* Evaluate memory segment */
                          2566	#1849:    memSegment  = FblMemSegmentNrGet(localAddress);
                          2567	#1851:    /* Check if segment was found */
                          2568	#1852:    if (memSegment >= 0)
                          2569	#1853:    {
                          2570	#1854:       /* Bit mask for memory segment alignment */
                          2571	#1855:       alignMask = (tFblAddress)(MemDriver_SegmentSize - 1u);
                          2572	#1857:       /* Padding length calculated for end address of data to be padded */
                          2573	#1858:       /* Invert all masked bits */
                          2574	#1859:       padLen = localAddress ^ alignMask;
                          2575	#1861:       /* Modify padding length for special case (zero length) */
                          2576	#1862:       if (0u == length)
                          2577	#1863:       {
                          2578	#1864:          padLen++;
                          2579	#1865:       }
                          2580	#1867:       /* Apply mask to cut of unnecessary bits (e.g. additional address info, overflow of addition) */
                          2581	#1868:       padLen &= alignMask;
                          2582	#1869:    }
                          2583	#1871:    /* Restore memory segment */
                          2584	#1872:    memSegment = oldSegment;
                          2585	#1874:    return padLen;
                          2586	#1875: }
                          2587	#1877: /***********************************************************************************************************************
                          2588	#1878:  *  FblMemPadBuffer
                          2589	#1879:  **********************************************************************************************************************/
                          2590	#1880: /*! \brief      Fill up the provided buffer with kFillChar if not aligned to the memory segment size
                          2591	#1881:  *  \pre        Buffer provided has to be large enough to hold added padding bytes
                          2592	#1882:  *  \param[in]  address Start address of memory range
                          2593	#1883:  *  \param[in]  length Length of memory range
                          2594	#1884:  *  \param[in,out]  data Pointer to last byte of actual data
                          2595	#1885:  *  \return     Number of padded bytes
                          2596	#1886:  **********************************************************************************************************************/
                          2597	#1887: static tFblLength FblMemPadBuffer( tFblAddress address, tFblLength length, tFblMemRamData data )
                          2598	#1888: {
                          2599	#1889:    tFblMemRamData padBuffer;
                          2600	#1890:    tFblLength padLen;
                          2601	#1891:    tFblLength idx;
                          2602	#1893:    /* Calculate number of required padding bytes */
                          2603	#1894:    padLen = FblMemPadLength(address, length);
                          2604	#1896:    /* In case data was already aligned the last buffer byte may be located at the very last memory address
                          2605	#1897:       Prevent address wrap around by relocating buffer not until padding is necessary */
                          2606	#1898:    if (padLen > 0u)
                          2607	#1899:    {
                          2608	#1900:       /* Input buffer points to last byte of actual data */
                          2609	#1901:       padBuffer = &data[1];
                          2610	#1903:       /* Append data to align buffer to segment size */
                          2611	#1904:       for (idx = 0u; idx < padLen; idx++)
                          2612	#1905:       {
                          2613	#1906: #if defined( FBL_MEM_ENABLE_SEGMENTED_INPUT_BUFFER )
                          2614	#1907:          /* Save original data, restored after programming operation */
                          2615	#1908:          gPaddingBuffer[idx] = padBuffer[idx];
                          2616	#1909: #endif /* FBL_MEM_ENABLE_SEGMENTED_INPUT_BUFFER */
                          2617	#1911:          padBuffer[idx] = kFillChar;
                          2618	#1912:       }
                          2619	#1913:    }

                                   Fri Apr 10 08:32:15 2020           Page 48
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          2620	#1915:    return padLen;
                          2621	#1916: }
                          2622	#1918: #if defined( FBL_MEM_ENABLE_SEGMENTED_INPUT_BUFFER )
                          2623	#1919: /***********************************************************************************************************************
                          2624	#1920:  *  FblMemUnpadBuffer
                          2625	#1921:  **********************************************************************************************************************/
                          2626	#1922: /*! \brief      Restore previous state of buffer after padding with fill pattern
                          2627	#1923:  *  \pre        memSegment correctly initialized (only relevant for multiple memory devices configuration)
                          2628	#1924:  *              FblMemPadBuffer called before with exact same parameters
                          2629	#1925:  *  \param[in]  data Pointer to last byte of actual data
                          2630	#1926:  *  \param[in]  padLen Number of previously padded bytes
                          2631	#1927:  **********************************************************************************************************************/
                          2632	#1928: static void FblMemUnpadBuffer( tFblMemRamData data, tFblLength padLen )
                          2633	#1929: {
                          2634	#1930:    /* In case data was already aligned the last buffer byte may be located at the very last memory address
                          2635	#1931:       Prevent address wrap around by relocating buffer not until padding is necessary */
                          2636	#1932:    if (padLen > 0u)
                          2637	#1933:    {
                          2638	#1934:       /* Restore original data, overwritten by padding */
                          2639	#1935:       (void)MEMCPY(&data[1], gPaddingBuffer, padLen);
                          2640	#1936:    }
                          2641	#1937: }
                          2642	#1938: #endif /* FBL_MEM_ENABLE_SEGMENTED_INPUT_BUFFER */
                          2643	#1940: /***********************************************************************************************************************
                          2644	#1941:  *  FblMemCopyBuffer
                          2645	#1942:  **********************************************************************************************************************/
                          2646	#1943: /*! \brief      Performs program operation to volatile memory
                          2647	#1944:  *  \param[in]  programAddress Program address
                          2648	#1945:  *  \param[in]  programLength Length of data (output: length actually programmed)
                          2649	#1946:  *  \param[in]  programData Pointer to program data
                          2650	#1947:  *  \return     Result of operation (potentially remapped to OEM specific NRC)
                          2651	#1948:  **********************************************************************************************************************/
                          2652	#1949: static tFblMemStatus FblMemCopyBuffer( tFblAddress programAddress,
                          2653	#1950:    const V_MEMRAM1 tFblLength V_MEMRAM2 V_MEMRAM3 * programLength, tFblMemConstRamData programData )
                          2654	#1951: {
                          2655	#1952:    /* Copy input buffer to destination address */
                          2656	#1953:    __ApplFblMemCopyBuffer(programAddress, programData, *programLength); /* PRQA S 0306 */ /* MD_FblMem_0306 */ /* PRQA S 0432 */ /* MD_FblHw_Memcpy */
                          2657	#1955:    return kFblMemStatus_Ok;
                          2658	#1956: }
                          2659	#1958: /***********************************************************************************************************************
                          2660	#1959:  *  FblMemEraseRegionInternal
                          2661	#1960:  **********************************************************************************************************************/
                          2662	#1961: /*! \brief      Performs erase operation in non-volatile memory
                          2663	#1962:  *  \details    All memory segments fully or partially covered by given region are affected. Gaps in the memory segment
                          2664	#1963:  *              definition are skipped.
                          2665	#1964:  *  \pre        Memory driver initialized
                          2666	#1965:  *  \param[in]  eraseAddress Start address of erase region
                          2667	#1966:  *  \param[in]  eraseLength Length of erase region
                          2668	#1967:  *  \return     Result of operation (potentially remapped to OEM specific NRC)
                          2669	#1968:  **********************************************************************************************************************/
                          2670	#1969: static tFblMemStatus FblMemEraseRegionInternal( tFblAddress eraseAddress, tFblLength eraseLength ) /* PRQA S 1505 */ /* MD_FblMem_1505 */
                          2671	#1970: {
                          2672	#1971:    tFblMemStatus  retVal;
                          2673	#1972:    IO_ErrorType   flashErrorCode;
                          2674	#1973:    tFblLength     eraseRemainder;
                          2675	#1974:    tFblLength     currentLength;

                                   Fri Apr 10 08:32:15 2020           Page 49
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          2676	#1975:    tFblLength     distance;
                          2677	#1976:    vsint16        nextMemSegment;
                          2678	#1977: #if defined( __ApplFblMemConditionCheck )
                          2679	#1978:    tFblMemStatus  customReturnCode;
                          2680	#1979: #endif /* __ApplFblMemConditionCheck */
                          2681	#1981:    retVal         = kFblMemStatus_Ok;
                          2682	#1983:    eraseRemainder = eraseLength;
                          2683	#1984:    memSegment     = FblMemSegmentNrGet(eraseAddress);
                          2684	#1986:    /* Check if there is a valid block for start address */
                          2685	#1987:    if (memSegment < 0)
                          2686	#1988:    {
                          2687	#1989:       FBL_MEM_SET_EXT_INFO(EraseAddress, eraseAddress);
                          2688	#1990:       FBL_MEM_SET_STATUS(EraseOutsideFbt, retVal);  /* PRQA S 3109 */ /* MD_MSR_14.3 */
                          2689	#1991:    }
                          2690	#1992:    else
                          2691	#1993:    {
                          2692	#1994:       nextMemSegment = memSegment;
                          2693	#1996:       while (eraseRemainder > 0u)
                          2694	#1997:       {
                          2695	#1998:          /* Watchdog and response pending handling */
                          2696	#1999:          FblMemTriggerWatchdog();
                          2697	#2000:          /* Force response pending on first loop cycle */
                          2698	#2001:          FblMemResponsePending();
                          2699	#2003:          /* Initialize error address */
                          2700	#2004:          FBL_MEM_SET_EXT_INFO(EraseAddress, eraseAddress);
                          2701	#2006: #if defined( __ApplFblMemDriverReady )
                          2702	#2007:          /* Check if required flash driver is initialized */
                          2703	#2008:          if (kFblOk != __ApplFblMemDriverReady(memSegment))
                          2704	#2009:          {
                          2705	#2010:             /* Flash driver initialization failure */
                          2706	#2011:             FBL_MEM_SET_STATUS(EraseDriverNotReady, retVal);  /* PRQA S 3109 */ /* MD_MSR_14.3 */
                          2707	#2012:             return retVal;
                          2708	#2013:          }
                          2709	#2014: #endif
                          2710	#2016:          /* Check if erase range crosses Flash block boundary */
                          2711	#2017:          currentLength = (FlashBlock[memSegment].end - eraseAddress) + 1u;
                          2712	#2018:          if (eraseRemainder > currentLength)
                          2713	#2019:          {
                          2714	#2020:             nextMemSegment = memSegment + 1;
                          2715	#2022:             if (nextMemSegment >= kNrOfFlashBlock)
                          2716	#2023:             {
                          2717	#2024:                /* End of erase region lies behind defined memory */
                          2718	#2025:                FBL_MEM_SET_STATUS(EraseOutsideFbt, retVal);  /* PRQA S 3109 */ /* MD_MSR_14.3 */
                          2719	#2026:                return retVal;
                          2720	#2027:             }
                          2721	#2029:             /* Update remainder */
                          2722	#2030:             distance = FlashBlock[nextMemSegment].begin - eraseAddress;
                          2723	#2031:             if (distance <= eraseRemainder)
                          2724	#2032:             {
                          2725	#2033:                eraseRemainder -= distance;
                          2726	#2034:             }
                          2727	#2035:             else
                          2728	#2036:             {
                          2729	#2037:                /* End of erase region lies in gap */
                          2730	#2038:                FBL_MEM_SET_STATUS(EraseOutsideFbt, retVal);  /* PRQA S 3109 */ /* MD_MSR_14.3 */
                          2731	#2039:                return retVal;

                                   Fri Apr 10 08:32:15 2020           Page 50
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          2732	#2040:             }
                          2733	#2041:          }
                          2734	#2042:          else
                          2735	#2043:          {
                          2736	#2044:             currentLength = eraseRemainder;
                          2737	#2045:             eraseRemainder = 0u;
                          2738	#2046:          }
                          2739	#2048: #if defined( __ApplFblMemConditionCheck )
                          2740	#2049:          /* Check conditions before executing memory operation */
                          2741	#2050:          customReturnCode = __ApplFblMemConditionCheck();
                          2742	#2052:          if (kFblMemStatus_Ok != customReturnCode)
                          2743	#2053:          {
                          2744	#2054:             retVal = customReturnCode;
                          2745	#2055:             return retVal;
                          2746	#2056:          }
                          2747	#2057: #endif /* __ApplFblMemConditionCheck */
                          2748	#2058: #if defined( __ApplFblMemPreErase )
                          2749	#2059:          /* Perform actions directly before memory driver erase */
                          2750	#2060:          if (kFblOk != __ApplFblMemPreErase())
                          2751	#2061:          {
                          2752	#2062:             FBL_MEM_SET_STATUS(ErasePreErase, retVal); /* PRQA S 3109 */ /* MD_MSR_14.3 */
                          2753	#2063:             return retVal;
                          2754	#2064:          }
                          2755	#2065: #endif /* __ApplFblMemPreErase */
                          2756	#2067:          flashErrorCode = MemDriver_REraseSync(currentLength, eraseAddress);
                          2757	#2069: #if defined( __ApplFblMemPostErase )
                          2758	#2070:          /* Perform actions directly after memory driver erase */
                          2759	#2071:          if (kFblOk != __ApplFblMemPostErase())
                          2760	#2072:          {
                          2761	#2073:             FBL_MEM_SET_STATUS(ErasePostErase, retVal);   /* PRQA S 3109 */ /* MD_MSR_14.3 */
                          2762	#2074:             return retVal;
                          2763	#2075:          }
                          2764	#2076: #endif /* __ApplFblMemPostErase */
                          2765	#2077: #if defined( __ApplFblMemConditionCheck )
                          2766	#2078:          /* Check conditions after executing memory operation */
                          2767	#2079:          customReturnCode = __ApplFblMemConditionCheck();
                          2768	#2081:          if (kFblMemStatus_Ok != customReturnCode)
                          2769	#2082:          {
                          2770	#2083:             retVal = customReturnCode;
                          2771	#2084:             return retVal;
                          2772	#2085:          }
                          2773	#2086: #endif /* __ApplFblMemConditionCheck */
                          2774	#2088:          if (IO_E_OK != flashErrorCode)
                          2775	#2089:          {
                          2776	#2090:             /* Error while erasing */
                          2777	#2091:             FBL_MEM_SET_EXT_STATUS(DriverErase, flashErrorCode, retVal);   /* PRQA S 3109 */ /* MD_MSR_14.3 */
                          2778	#2092:             return retVal;
                          2779	#2093:          }
                          2780	#2095: #if defined( FBL_MEM_ENABLE_PROGRESS_INFO )
                          2781	#2096:          /* Only report progress when explicitly enabled */
                          2782	#2097:          if (kFblMemProgressState_Enabled == gProgressState)
                          2783	#2098:          {
                          2784	#2099:             FblMemUpdateProgress(eraseRemainder);
                          2785	#2100:          }
                          2786	#2101: #endif /* FBL_MEM_ENABLE_PROGRESS_INFO */
                          2787	#2103:          /* Continue with next segment */

                                   Fri Apr 10 08:32:15 2020           Page 51
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          2788	#2104:          memSegment = nextMemSegment;
                          2789	#2105:          eraseAddress = FlashBlock[memSegment].begin;
                          2790	#2106:       }
                          2791	#2107:    }
                          2792	#2109:    return retVal;
                          2793	#2110: }  /* PRQA S 2006 */ /* MD_MSR_14.7 */
                          2794	#2112: /***********************************************************************************************************************
                          2795	#2113:  *  FblMemProgramBufferInternal
                          2796	#2114:  **********************************************************************************************************************/
                          2797	#2115: /*! \brief         Performs program operation to non-volatile memory
                          2798	#2116:  *  \details       If the length is not aligned to the segment size the odd bytes are padded with the configured fill
                          2799	#2117:  *                 character.
                          2800	#2118:  *                 Programming may be suspended by an external event. In this case parameter programLength will be
                          2801	#2119:  *                 updated to reflect the length actually programmed
                          2802	#2120:  *                 In case resumable programming is active, crossing a flash block boundary leads to the setting
                          2803	#2121:  *                 of the programming state to the passed value.
                          2804	#2122:  *  \pre           Memory driver initialized, address aligned to memory segment size
                          2805	#2123:  *  \param[in]     programAddress Program address
                          2806	#2124:  *  \param[in,out] programLength Length of data (output: length actually programmed)
                          2807	#2125:  *  \param[in,out] programData Pointer to program data (contents are padded in case length is not aligned to memory
                          2808	#2126:  *                  segment size!)
                          2809	#2127:  *  \param[in]     checkPointState Programming state value to be set in case a checkpoint is reached
                          2810	#2128:  *                  Typical values are either kFblMemProgState_Checkpoint (suspend programming and indicate checkpoint)
                          2811	#2129:  *                  or kFblMemProgState_Pending (continue programming)
                          2812	#2130:  *
                          2813	#2131:  *  \return        Result of operation (potentially remapped to OEM specific NRC)
                          2814	#2132:  **********************************************************************************************************************/
                          2815	#2133: static tFblMemStatus FblMemProgramBufferInternal( tFblAddress programAddress, /* PRQA S 1505 */ /* MD_FblMem_1505 */
                          2816	#2134:    V_MEMRAM1 tFblLength V_MEMRAM2 V_MEMRAM3 * programLength, tFblMemRamData programData, tFblMemProgState checkPointState )
                          2817	#2135: {
                          2818	#2136:    tFblMemStatus     retVal;
                          2819	#2137:    tFblLength        currentLength;
                          2820	#2138:    tFblLength        localLength;
                          2821	#2139:    tFblLength        segLength;
                          2822	#2140:    tFblLength        padLength;
                          2823	#2141:    tFblLength        bufferIndex;
                          2824	#2142:    tFblLength        padOffset;
                          2825	#2143:    IO_ErrorType      flashErrorCode;
                          2826	#2144: #if defined( __ApplFblMemConditionCheck )
                          2827	#2145:    tFblMemStatus     customReturnCode;
                          2828	#2146: #endif /* __ApplFblMemConditionCheck */
                          2829	#2148: #if defined( V_ENABLE_USE_DUMMY_STATEMENT )
                          2830	#2149:    /* Parameters not used: avoid compiler warning */
                          2831	#2150:    (void)checkPointState; /* PRQA S 3112 */ /* MD_FblMem_3112 */
                          2832	#2151: #endif /* V_ENABLE_USE_DUMMY_STATEMENT */
                          2833	#2153:    retVal      = kFblMemStatus_Ok;
                          2834	#2154:    padLength   = 0u;                                     /* PRQA S 3198 */ /* MD_FblMem_3198 */
                          2835	#2155:    padOffset   = 0u;                                     /* PRQA S 3198 */ /* MD_FblMem_3198 */
                          2836	#2157:    /* Copy requested length to local variable */
                          2837	#2158:    localLength    = *programLength;
                          2838	#2159:    /* Start at beginning of buffer */
                          2839	#2160:    bufferIndex    = 0u;
                          2840	#2162:    /* Loop while data left and operation not suspended by external event */
                          2841	#2163:    while ((localLength > 0u) && (kFblMemProgState_Pending == fblMemProgState))
                          2842	#2164:    {
                          2843	#2165:       /* Watchdog and response pending handling */

                                   Fri Apr 10 08:32:15 2020           Page 52
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          2844	#2166:       FblMemTriggerWatchdog();
                          2845	#2167: #if defined( FBL_ENABLE_ADAPTIVE_DATA_TRANSFER_RCRRP )
                          2846	#2168:       /* Disable forced RCR-RP for adaptive mode */
                          2847	#2169: #else
                          2848	#2170:       /* Force response pending on first loop cycle */
                          2849	#2171:       FblMemResponsePending();
                          2850	#2172: #endif /* FBL_ENABLE_ADAPTIVE_DATA_TRANSFER_RCRRP */
                          2851	#2174:       /* Initialize error address */
                          2852	#2175:       FBL_MEM_SET_EXT_INFO(ProgramAddress, programAddress);
                          2853	#2177:       /* Length to be programmed in current loop cycle */
                          2854	#2178:       currentLength = localLength;
                          2855	#2179:       /* Evaluate memory segment */
                          2856	#2180:       memSegment    = FblMemSegmentNrGet(programAddress);
                          2857	#2182:       /* Check if segment was found */
                          2858	#2183:       if (memSegment < 0)
                          2859	#2184:       {
                          2860	#2185:          FBL_MEM_SET_STATUS(ProgramOutsideFbt, retVal);  /* PRQA S 3109 */ /* MD_MSR_14.3 */
                          2861	#2186:          return retVal;
                          2862	#2187:       }
                          2863	#2189: #if defined( __ApplFblMemDriverReady )
                          2864	#2190:       /* Check if required flash driver is initialized */
                          2865	#2191:       if (kFblOk != __ApplFblMemDriverReady(memSegment))
                          2866	#2192:       {
                          2867	#2193:          /* Flash driver initialization failure */
                          2868	#2194:          FBL_MEM_SET_STATUS(ProgramDriverNotReady, retVal);  /* PRQA S 3109 */ /* MD_MSR_14.3 */
                          2869	#2195:          return retVal;
                          2870	#2196:       }
                          2871	#2197: #endif
                          2872	#2199:       /* Check if address is aligned to memory segment size */
                          2873	#2200:       if (0u != (programAddress & ((tFblAddress)MemDriver_SegmentSize - 1u)))
                          2874	#2201:       {
                          2875	#2202:          FBL_MEM_SET_STATUS(ProgramUnalignedAddress, retVal);  /* PRQA S 3109 */ /* MD_MSR_14.3 */
                          2876	#2203:          return retVal;
                          2877	#2204:       }
                          2878	#2206:       /* Remaining length until end of current segment */
                          2879	#2207:       segLength = (FlashBlock[memSegment].end - programAddress) + 1u;
                          2880	#2209:       /* Download memory overlaps segment: adjust to current segment */
                          2881	#2210:       if (segLength < currentLength)
                          2882	#2211:       {
                          2883	#2212:          /* Adapt currentLength to segment programming size */
                          2884	#2213:          currentLength = segLength;
                          2885	#2214:       }
                          2886	#2215:       else
                          2887	#2216:       {
                          2888	#2217:          /* Offset to last byte of actual data */
                          2889	#2218:          padOffset   = bufferIndex + (currentLength - 1u);
                          2890	#2220:          /* Pad buffer to memory segment */
                          2891	#2221:          padLength = FblMemPadBuffer(programAddress, currentLength, &programData[padOffset]);
                          2892	#2222:          currentLength += padLength;
                          2893	#2223:       }
                          2894	#2225: #if defined( __ApplFblMemConditionCheck )
                          2895	#2226:       /* Check conditions before executing memory operation */
                          2896	#2227:       customReturnCode = __ApplFblMemConditionCheck();
                          2897	#2229:       if (kFblMemStatus_Ok != customReturnCode)
                          2898	#2230:       {
                          2899	#2231:          retVal = customReturnCode;

                                   Fri Apr 10 08:32:15 2020           Page 53
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          2900	#2232:          return retVal;
                          2901	#2233:       }
                          2902	#2234: #endif /* __ApplFblMemConditionCheck */
                          2903	#2235: #if defined( __ApplFblMemPreWrite )
                          2904	#2236:       /* Perform actions directly before memory driver write */
                          2905	#2237:       if (kFblOk != __ApplFblMemPreWrite())
                          2906	#2238:       {
                          2907	#2239:          FBL_MEM_SET_STATUS(ProgramPreWrite, retVal); /* PRQA S 3109 */ /* MD_MSR_14.3 */
                          2908	#2240:          return retVal;
                          2909	#2241:       }
                          2910	#2242: #endif /* __ApplFblMemPreWrite */
                          2911	#2244:       /* Pass programming request to memory driver */
                          2912	#2245:       flashErrorCode = MemDriver_RWriteSync(&programData[bufferIndex], currentLength, programAddress);
                          2913	#2247: #if defined( FBL_MEM_ENABLE_SEGMENTED_INPUT_BUFFER )
                          2914	#2248:       /* Restore original data, overwritten by padding */
                          2915	#2249:       FblMemUnpadBuffer(&programData[padOffset], padLength);
                          2916	#2250: #endif /* FBL_MEM_ENABLE_SEGMENTED_INPUT_BUFFER */
                          2917	#2252: #if defined( __ApplFblMemPostWrite )
                          2918	#2253:       /* Perform actions directly after memory driver write */
                          2919	#2254:       if (kFblOk != __ApplFblMemPostWrite())
                          2920	#2255:       {
                          2921	#2256:          FBL_MEM_SET_STATUS(ProgramPostWrite, retVal);   /* PRQA S 3109 */ /* MD_MSR_14.3 */
                          2922	#2257:          return retVal;
                          2923	#2258:       }
                          2924	#2259: #endif /* __ApplFblMemPostWrite */
                          2925	#2260: #if defined( __ApplFblMemConditionCheck )
                          2926	#2261:       /* Check conditions after executing memory operation */
                          2927	#2262:       customReturnCode = __ApplFblMemConditionCheck();
                          2928	#2264:       if (kFblMemStatus_Ok != customReturnCode)
                          2929	#2265:       {
                          2930	#2266:          retVal = customReturnCode;
                          2931	#2267:          return retVal;
                          2932	#2268:       }
                          2933	#2269: #endif /* __ApplFblMemConditionCheck */
                          2934	#2271:       /* Check result of programming operation */
                          2935	#2272:       if (IO_E_OK != flashErrorCode)
                          2936	#2273:       {
                          2937	#2274:          FBL_MEM_SET_EXT_STATUS(DriverWrite, flashErrorCode, retVal);   /* PRQA S 3109 */ /* MD_MSR_14.3 */
                          2938	#2275:          return retVal;
                          2939	#2276:       }
                          2940	#2279:       /* Update address for next cycle */
                          2941	#2280:       programAddress += (tFblAddress)currentLength;
                          2942	#2282:       if (localLength > currentLength)
                          2943	#2283:       {
                          2944	#2284:          /* Prepare buffer index for next loop */
                          2945	#2285:          bufferIndex += currentLength;
                          2946	#2286:          localLength -= currentLength;
                          2947	#2287:       }
                          2948	#2288:       else
                          2949	#2289:       {
                          2950	#2290:          /* Lengths should be exactly the same here */
                          2951	#2291:          assertFblInternal(((currentLength - padLength) == localLength), kFblMemAssertParameterOutOfRange); /* PRQA S 2214 */ /* MD_FblDef_Assert */
                          2952	#2293:          /* Buffer completely processed */
                          2953	#2294:          localLength = 0u;
                          2954	#2295:       }
                          2955	#2297:    }

                                   Fri Apr 10 08:32:15 2020           Page 54
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          2956	#2299:    /* Return length actually written (without padding) */
                          2957	#2300:    *programLength -= localLength;
                          2958	#2302:    return retVal;
                          2959	#2303: } /* PRQA S 6080, 6050, 2006 */ /* MD_MSR_STMIF, MD_MSR_14.7 */
                          2960	#2305: # if defined( FBL_ENABLE_MULTIPLE_MEM_DEVICES ) && \
                          2961	#2306:      defined( FBL_MEM_ENABLE_REMAINDER_HANDLING )
                          2962	#2307: /***********************************************************************************************************************
                          2963	#2308:  *  FblMemGetSpecificRemainder
                          2964	#2309:  **********************************************************************************************************************/
                          2965	#2310: /*! \brief      Calculate remainder of given range specific for affected memory device
                          2966	#2311:  *  \param[in]  address Start address of memory range
                          2967	#2312:  *  \param[in]  length Length of memory range
                          2968	#2313:  *  \return     Remainder to full memory segment in byte
                          2969	#2314:  **********************************************************************************************************************/
                          2970	#2315: static tFblLength FblMemGetSpecificRemainder( tFblAddress address, tFblLength length )
                          2971	#2316: {
                          2972	#2317:    tFblLength  remainder;
                          2973	#2318:    vsint16     tempSegment;
                          2974	#2320:    /* Initialize remainder */
                          2975	#2321:    remainder = 0u;
                          2976	#2323:    /* Re-evaluate memory segment */
                          2977	#2324:    tempSegment = memSegment;
                          2978	#2325:    memSegment = FblMemSegmentNrGet(address);
                          2979	#2327:    if (memSegment >= 0)
                          2980	#2328:    {
                          2981	#2329:       /* Calculate remainder */
                          2982	#2330:       remainder = FblMemGetRemainder(address, length, MemDriver_SegmentSize);
                          2983	#2331:    }
                          2984	#2333:    /* Restore previous memory segment value */
                          2985	#2334:    memSegment = tempSegment;
                          2986	#2336:    return remainder;
                          2987	#2337: }
                          2988	#2338: # endif /* FBL_ENABLE_MULTIPLE_MEM_DEVICES && FBL_MEM_ENABLE_REMAINDER_HANDLING */
                          2989	#2340: #if defined( FBL_MEM_ENABLE_SEGMENTED_INPUT_BUFFER )
                          2990	#2341: /***********************************************************************************************************************
                          2991	#2342:  *  FblMemRelocateBufferOffset
                          2992	#2343:  **********************************************************************************************************************/
                          2993	#2344: /*! \brief         Verify provided buffer lies within range of existing buffer and relocate offset accordingly
                          2994	#2345:  *  \details       Provided buffer has to reside completely in existing buffer
                          2995	#2346:  *  \param[in,out] activeJob Information of buffer to be updated
                          2996	#2347:  *  \param[in]     buffer Pointer to provided buffer
                          2997	#2348:  *  \param[in]     offset Offset index into provided buffer
                          2998	#2349:  *  \param[in]     length Length of data in provided buffer
                          2999	#2350:  *  \return        kFblMemStatus_Ok if requested buffer lies inside provided information and offset could be relocated,
                          3000	#2351:  *                 kFblMemStatus_Failed otherwise
                          3001	#2352:  **********************************************************************************************************************/
                          3002	#2353: static tFblMemStatus FblMemRelocateBufferOffset( V_MEMRAM1 tFblMemJob V_MEMRAM2 V_MEMRAM3 * activeJob,
                          3003	#2354:    tFblMemConstRamData buffer, tFblLength offset, tFblLength length )
                          3004	#2355: {
                          3005	#2356:    tFblMemStatus  retVal;
                          3006	#2357:    tFblMemRamData activeBuffer;
                          3007	#2358:    tFblLength activeOffset;
                          3008	#2360:    retVal         = kFblMemStatus_Failed;
                          3009	#2361:    activeBuffer   = activeJob->buffer;
                          3010	#2363:    /* Provided buffer has to reside in raw input buffer */
                          3011	#2364:    if (buffer >= activeBuffer)

                                   Fri Apr 10 08:32:15 2020           Page 55
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          3012	#2365:    {
                          3013	#2366:       activeOffset = (tFblLength)(buffer - activeBuffer); /* PRQA S 0488 */ /* MD_FblMem_0488 */
                          3014	#2368:       /* Provided data has to lie within raw input buffer (excluding potential padding) */
                          3015	#2369:       if ( (length <= activeJob->netSize)
                          3016	#2370:         && (offset <= (activeJob->netSize - length))
                          3017	#2371:         && (activeOffset < activeJob->totalSize)
                          3018	#2372:         && ((offset + length + FBL_MEM_REMAINDER_PADDING) <= (activeJob->totalSize - activeOffset)) )
                          3019	#2373:       {
                          3020	#2374: #if defined( FBL_MEM_ENABLE_REMAINDER_HANDLING )
                          3021	#2375:          /* Remainder requires reserved area in front of actual data (defined by current offset) */
                          3022	#2376:          if ((activeOffset + offset) >= activeJob->offset)
                          3023	#2377: #endif /* FBL_MEM_ENABLE_REMAINDER_HANDLING */
                          3024	#2378:          {
                          3025	#2379:             /* Relocate offset to provided buffer */
                          3026	#2380:             activeJob->offset = activeOffset;
                          3027	#2381:             retVal = kFblMemStatus_Ok;
                          3028	#2382:          }
                          3029	#2383:       }
                          3030	#2384:    }
                          3031	#2386:    return retVal;
                          3032	#2387: }
                          3033	#2388: #endif /* FBL_MEM_ENABLE_SEGMENTED_INPUT_BUFFER */
                          3034	#2391: /***********************************************************************************************************************
                          3035	#2392:  *  FblMemProgramStream
                          3036	#2393:  **********************************************************************************************************************/
                          3037	#2394: /*! \brief         Take a byte stream to be programmed and align it to the memory requirements
                          3038	#2395:  *  \details       If the length is not aligned to the segment size the odd bytes are stored in a remainder buffer,
                          3039	#2396:  *                 which will be programmed on the next call.
                          3040	#2397:  *                 Programming may be suspended by an external event. In this case parameter programLength will be
                          3041	#2398:  *                 updated to reflect the length actually programmed.
                          3042	#2399:  *  \pre           FblMemSegmentStartIndication executed before
                          3043	#2400:  *  \param[in]     programJob Information of buffer to be programmed
                          3044	#2401:  *  \param[in,out] programLength Requested program length (output: length actually programmed)
                          3045	#2402:  *  \param[in]     mode Operation mode (include remainder in case of finalization)
                          3046	#2403:  *  \return        Result of operation (potentially remapped to OEM specific NRC)
                          3047	#2404:  **********************************************************************************************************************/
                          3048	#2405: static tFblMemStatus FblMemProgramStream( const V_MEMRAM1 tFblMemJob V_MEMRAM2 V_MEMRAM3 * programJob,
                          3049	#2406:    V_MEMRAM1 tFblLength V_MEMRAM2 V_MEMRAM3 * programLength, tFblMemOperationMode mode )
                          3050	#2407: {
                          3051	#2408:    tFblMemStatus  retVal;
                          3052	#2409:    tFblMemRamData programData;
                          3053	#2410:    tFblLength     localLength;
                          3054	#2411: #if defined( FBL_MEM_ENABLE_REMAINDER_HANDLING )
                          3055	#2412:    tFblLength     requestLength;
                          3056	#2413:    tFblLength     remainder;
                          3057	#2414: #endif /* FBL_MEM_ENABLE_REMAINDER_HANDLING */
                          3058	#2416: #if defined( V_ENABLE_USE_DUMMY_STATEMENT )
                          3059	#2417:    /* Parameters not used: avoid compiler warning */
                          3060	#2418: # if defined( FBL_MEM_ENABLE_REMAINDER_HANDLING )
                          3061	#2419: # else
                          3062	#2420:    (void)mode; /* PRQA S 3112 */ /* MD_FblMem_3112 */
                          3063	#2421: # endif /* FBL_MEM_ENABLE_REMAINDER_HANDLING */
                          3064	#2422: #endif /* V_ENABLE_USE_DUMMY_STATEMENT */
                          3065	#2424:    FblMemTriggerWatchdog();
                          3066	#2426:    /* Store requested length to local variable */
                          3067	#2427:    localLength = *programLength;

                                   Fri Apr 10 08:32:15 2020           Page 56
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          3068	#2428:    /* Pointer to current buffer position */
                          3069	#2429:    programData = FblMemGetBuffer(programJob);
                          3070	#2431: #if defined( FBL_MEM_ENABLE_REMAINDER_HANDLING )
                          3071	#2432:    remainder   = 0u;
                          3072	#2434:    /* No remainder handling required for volatile memory */
                          3073	#2435:    if (kFblMemType_RAM != gSegInfo.input.type)
                          3074	#2436:    {
                          3075	#2437:       /*
                          3076	#2438:          Handle remainder from previous run
                          3077	#2439:          Special case where remainder is empty is not explicitly handled
                          3078	#2440:          as performing the following operations with a value of zero
                          3079	#2441:          doesn't have any side-effects
                          3080	#2442:       */
                          3081	#2444:       /* Check available space in front of current data */
                          3082	#2445:       assertFblInternal(gSegInfo.writeRemainder <= programJob->position, kFblMemAssertParameterOutOfRange); /* PRQA S 2214 */ /* MD_FblDef_Assert */
                          3083	#2447:       /* Redirect programming pointer to make room for remainder */
                          3084	#2448:       programData = &programJob->buffer[programJob->position - gSegInfo.writeRemainder];
                          3085	#2450:       /* Copy remainder in front of actual data */
                          3086	#2451:       (void)MEMCPY(programData, gRemainderBuffer.data, gSegInfo.writeRemainder);
                          3087	#2452:       /* Update length to be programmed */
                          3088	#2453:       localLength += gSegInfo.writeRemainder;
                          3089	#2455:       /* Write complete data if explicit finalization is requested */
                          3090	#2456:       if ( (kFblMemOperationMode_Finalize == mode)
                          3091	#2457: # if defined( FBL_ENABLE_PROCESSED_DATA_LENGTH )
                          3092	#2458: # else
                          3093	#2459:       /* or end of requested segment is reached */
                          3094	#2460:         || (localLength == gSegInfo.writeLength)
                          3095	#2461: # endif /* FBL_ENABLE_PROCESSED_DATA_LENGTH */
                          3096	#2462:          )
                          3097	#2463:       {
                          3098	#2464:          /* No remainder left */
                          3099	#2465:       }
                          3100	#2466:       else
                          3101	#2467:       {
                          3102	#2468:          /* Calculate new remainder, not aligned to segment size */
                          3103	#2469:          remainder = FblMemGetWriteRemainder(gSegInfo.writeAddress, localLength);
                          3104	#2471:          /* Handle special case: When the segment was already finalized, the padding isn't included in write address
                          3105	#2472:             Remainder calculation thus includes data already written, resulting in a value larger than the requested length
                          3106	#2473:             This would cause two range overflows, but is only a cosmetic issue, as it cancels out in the end */
                          3107	#2474:          if (remainder > localLength)
                          3108	#2475:          {
                          3109	#2476:             remainder = 0u;
                          3110	#2477:          }
                          3111	#2479:          /* Update length to be programmed */
                          3112	#2480:          localLength -= remainder;
                          3113	#2482:       }
                          3114	#2483:    }
                          3115	#2485:    /* Remember actual programming length, may be altered by programming routine */
                          3116	#2486:    requestLength = localLength;
                          3117	#2487: #endif /* FBL_MEM_ENABLE_REMAINDER_HANDLING */
                          3118	#2489:    /* Verify complete programming length does not exceed previously requested memory range */
                          3119	#2490: #if defined( FBL_MEM_ENABLE_REMAINDER_HANDLING )
                          3120	#2491:    if ((localLength + remainder) > gSegInfo.writeLength)
                          3121	#2492: #else
                          3122	#2493:    if (localLength > gSegInfo.writeLength)
                          3123	#2494: #endif /* FBL_MEM_ENABLE_REMAINDER_HANDLING */

                                   Fri Apr 10 08:32:15 2020           Page 57
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          3124	#2495:    {
                          3125	#2496:       FBL_MEM_SET_STATUS(ProgramOverflow, retVal); /* PRQA S 3109 */ /* MD_MSR_14.3 */
                          3126	#2497:    }
                          3127	#2498:    else
                          3128	#2499:    {
                          3129	#2500:       /*
                          3130	#2501:          Call programming function even if actual length is zero
                          3131	#2502:          In this case the input length will be completely moved to the remainder
                          3132	#2503:       */
                          3133	#2504:       if (kFblMemType_RAM == gSegInfo.input.type)
                          3134	#2505:       {
                          3135	#2506:          /* Copy to volatile memory */
                          3136	#2507:          retVal = FblMemCopyBuffer(gSegInfo.writeAddress, &localLength, programData);
                          3137	#2508:       }
                          3138	#2509:       else
                          3139	#2510:       {
                          3140	#2511:          /* Program non-volatile memory */
                          3141	#2512:          retVal = FblMemProgramBufferInternal(gSegInfo.writeAddress, &localLength, programData, kFblMemProgState_Checkpoint);
                          3142	#2513:       }
                          3143	#2514:    }
                          3144	#2516:    /* Check result */
                          3145	#2517:    if (kFblMemStatus_Ok == retVal)
                          3146	#2518:    {
                          3147	#2519:       /* Returned length shall not exceed requested length */
                          3148	#2520:       assertFblInternal(localLength <= gSegInfo.writeLength, kFblMemAssertParameterOutOfRange); /* PRQA S 2214 */ /* MD_FblDef_Assert */
                          3149	#2522:       /* Update segment information */
                          3150	#2523:       gSegInfo.writeAddress    += (tFblAddress)localLength;
                          3151	#2524:       /* Reduce expected remainder */
                          3152	#2525:       gSegInfo.writeLength     -= localLength;
                          3153	#2526: #if defined( FBL_ENABLE_PROCESSED_DATA_LENGTH )
                          3154	#2527:       /* Length actually written */
                          3155	#2528:       gSegInfo.writtenLength   += localLength;
                          3156	#2529: #endif /* FBL_ENABLE_PROCESSED_DATA_LENGTH */
                          3157	#2531: #if defined( FBL_MEM_ENABLE_REMAINDER_HANDLING )
                          3158	#2532:       /* Everything consumed, program length already matches */
                          3159	#2533:       if (requestLength == localLength)
                          3160	#2534:       {
                          3161	#2535:          /* Everything written, store new remaining data */
                          3162	#2536:          gSegInfo.writeRemainder = remainder;
                          3163	#2537:          /* Call copy function even if remainder length is zero */
                          3164	#2538:          (void)MEMCPY(gRemainderBuffer.data, &programData[localLength], remainder);
                          3165	#2539:       }
                          3166	#2540:       /* Data partially programmed (most likely suspended by external event) */
                          3167	#2541:       else if (localLength > 0u)
                          3168	#2542:       {
                          3169	#2543:          /* Store consumed length */
                          3170	#2544:          *programLength = localLength - gSegInfo.writeRemainder;
                          3171	#2545:          /* Some data written, no remainder */
                          3172	#2546:          gSegInfo.writeRemainder = 0u;
                          3173	#2547:       }
                          3174	#2548:       else
                          3175	#2549:       {
                          3176	#2550:          /* Nothing consumed at all */
                          3177	#2551:          *programLength = 0u;
                          3178	#2552:          /* Nothing written at all, remainder from previous run unchanged */
                          3179	#2553:       }

                                   Fri Apr 10 08:32:15 2020           Page 58
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          3180	#2554: #else
                          3181	#2555:       /* Store consumed length */
                          3182	#2556:       *programLength = localLength;
                          3183	#2557: #endif /* FBL_MEM_ENABLE_REMAINDER_HANDLING */
                          3184	#2558:    }
                          3185	#2560:    return retVal;
                          3186	#2561: }/* PRQA S 6010 */ /* MD_MSR_STPTH */
                          3187	#2563: #if defined( FBL_MEM_ENABLE_VERIFY_STREAM )
                          3188	#2564: /***********************************************************************************************************************
                          3189	#2565:  *  FblMemVerifyInput
                          3190	#2566:  **********************************************************************************************************************/
                          3191	#2567: /*! \brief      Execute input verification operation
                          3192	#2568:  *  \details    Pass input data to given input verification routine
                          3193	#2569:  *              No operation will be carried out if null pointer is passed as function
                          3194	#2570:  *  \param[in]  routine Input verification operation to be executed
                          3195	#2571:  *  \param[in]  data Verification data
                          3196	#2572:  *                - FBL_MEM_VERIFY_STATE_INIT / FBL_MEM_VERIFY_STATE_FINALIZE: Usually irrelevant
                          3197	#2573:  *                - FBL_MEM_VERIFY_STATE_COMPUTE: Data to be hashed
                          3198	#2574:  *                - FBL_MEM_VERIFY_STATE_VERIFY: Reference checksum / signature
                          3199	#2575:  *              state Sub-operation to be executed
                          3200	#2576:  *  \param[in,out]   result Pointer to extended verification result
                          3201	#2577:  *                      FBL_MEM_VERIFY_STATUS_NULL if neither relevant nor used
                          3202	#2578:  *  \return     kFblMemStatus_Ok if operation successfully executed,
                          3203	#2579:  *                 kFblMemStatus_Failed otherwise
                          3204	#2580:  **********************************************************************************************************************/
                          3205	#2581: static tFblMemStatus FblMemVerifyInput( V_MEMRAM1 tFblMemVerifyRoutineInput V_MEMRAM2 V_MEMRAM3 * routine,
                          3206	#2582:    const V_MEMRAM1 tFblMemVerifyData V_MEMRAM2 V_MEMRAM3 * data, vuint8 state,
                          3207	#2583:    V_MEMRAM1 tFblMemVerifyStatus V_MEMRAM2 V_MEMRAM3 * result )
                          3208	#2584: {
                          3209	#2585:    tFblMemStatus retVal;
                          3210	#2586:    tFblMemVerifyStatus localResult;
                          3211	#2588:    retVal      = kFblMemStatus_Ok;
                          3212	#2589:    localResult = FBL_MEM_VERIFY_OK;
                          3213	#2591:    /* Null pointer passed as verification function disables functionality */
                          3214	#2592:    if (FBL_MEM_VERIFY_FCT_INPUT_NULL != routine->function)
                          3215	#2593:    {
                          3216	#2594:       routine->param->sigState          = state;
                          3217	#2595:       routine->param->sigSourceBuffer   = data->data;
                          3218	#2596:       routine->param->sigByteCount      = (tFblMemVerifyLength)data->length;
                          3219	#2597: # if defined( FBL_MEM_ENABLE_EXT_TRIGGER_INPUT_VERIFY )
                          3220	#2598:       routine->param->wdTriggerFct      = (tFblMemVerifyWdFct)FblMemTriggerWatchdogExt;
                          3221	#2599: # else
                          3222	#2600:       routine->param->wdTriggerFct      = (tFblMemVerifyWdFct)FblMemTriggerWatchdog;
                          3223	#2601: # endif /* FBL_MEM_ENABLE_EXT_TRIGGER_INPUT_VERIFY */
                          3224	#2603:       /* Call verification function and set extended status */
                          3225	#2604:       localResult = routine->function(routine->param);
                          3226	#2605:       if (FBL_MEM_VERIFY_OK != localResult)
                          3227	#2606:       {
                          3228	#2607:          retVal = kFblMemStatus_Failed;
                          3229	#2608:       }
                          3230	#2609:    }
                          3231	#2611:    if (FBL_MEM_VERIFY_STATUS_NULL != result)
                          3232	#2612:    {
                          3233	#2613:       /* Pass extended result */
                          3234	#2614:       *result = localResult;
                          3235	#2615:    }

                                   Fri Apr 10 08:32:15 2020           Page 59
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          3236	#2617:    return retVal;
                          3237	#2618: }
                          3238	#2620: /***********************************************************************************************************************
                          3239	#2621:  *  FblMemInitVerifyInput
                          3240	#2622:  **********************************************************************************************************************/
                          3241	#2623: /*! \brief      Initialize input verification(s)
                          3242	#2624:  *  \return     kFblMemStatus_Ok if operation successfully executed,
                          3243	#2625:  *                 kFblMemStatus_Failed otherwise
                          3244	#2626:  **********************************************************************************************************************/
                          3245	#2627: static tFblMemStatus FblMemInitVerifyInput( void )
                          3246	#2628: {
                          3247	#2629:    tFblMemStatus     retVal;
                          3248	#2630:    tFblMemVerifyData verifyData;
                          3249	#2632:    retVal = kFblMemStatus_Ok;
                          3250	#2634:    /* Not used by initialization */
                          3251	#2635:    verifyData.data   = FBL_MEM_BUFFER_NULL;
                          3252	#2636:    verifyData.length = 0u;
                          3253	#2638:    /* Inverted order of verification routines
                          3254	#2639:       Error code may be overwritten (simplifies implementation) */
                          3255	#2643:    return retVal;
                          3256	#2644: }
                          3257	#2645: #endif /* FBL_MEM_ENABLE_VERIFY_STREAM */
                          3258	#2650: /***********************************************************************************************************************
                          3259	#2651:  *  FblMemProcessJob
                          3260	#2652:  **********************************************************************************************************************/
                          3261	#2653: /*! \brief      Perform processing operations on provided job
                          3262	#2654:  *  \details    Depending on the type and configuration one of the following operations will be carried out:
                          3263	#2655:  *              - Update verification with buffer contents
                          3264	#2656:  *              - Read already programmed data in temporary buffer for verification
                          3265	#2657:  *              - Process buffer contents (e.g. decryption or decompression)
                          3266	#2658:  *                Result placed in intermediate buffer, which is prepended to the processing queue
                          3267	#2659:  *              - Program buffer contents
                          3268	#2660:  *              - Flush program remainder
                          3269	#2661:  *              - Pass data to other instance
                          3270	#2662:  *              Buffer may be processed at once or split into smaller segments, requiring multiple call cycles to
                          3271	#2663:  *              finish the buffer
                          3272	#2664:  *              This depends on the configuration and finalization flag
                          3273	#2665:  *  \pre        FblMemSegmentStartIndication executed before
                          3274	#2666:  *  \param[in]  activeJob Information of processed buffer
                          3275	#2667:  *  \param[in]  mode Operation mode used to trigger finalization
                          3276	#2668:  *  \return     Result of operation (potentially remapped to OEM specific NRC)
                          3277	#2669:  **********************************************************************************************************************/
                          3278	#2670: static tFblMemStatus FblMemProcessJob( V_MEMRAM1 tFblMemJob V_MEMRAM2 V_MEMRAM3 * activeJob, tFblMemOperationMode mode )
                          3279	#2671: {
                          3280	#2672:    tFblLength     actualLength;
                          3281	#2673: #if defined( FBL_MEM_ENABLE_VERIFY_STREAM )     || \
                          3282	#2674:     defined( FBL_ENABLE_DATA_PROCESSING )       || \
                          3283	#2675:     defined( FBL_MEM_ENABLE_STREAM_OUTPUT )     
                          3284	#2676:    tFblMemRamData activeBuffer;
                          3285	#2677: #endif /* FBL_MEM_ENABLE_VERIFY_STREAM || FBL_ENABLE_DATA_PROCESSING || FBL_MEM_ENABLE_STREAM_OUTPUT || FBL_MEM_ENABLE_PASSTHROUGH */
                          3286	#2678: #if defined( FBL_ENABLE_DATA_PROCESSING )
                          3287	#2679:    V_MEMRAM1 tFblMemJob V_MEMRAM2 V_MEMRAM3 * procOutJob;
                          3288	#2680: #endif /* FBL_ENABLE_DATA_PROCESSING */
                          3289	#2681: #if defined( FBL_MEM_ENABLE_VERIFY_STREAM )
                          3290	#2682:    tFblMemVerifyData verifyData;
                          3291	#2683: #endif /* FBL_MEM_ENABLE_VERIFY_STREAM */

                                   Fri Apr 10 08:32:15 2020           Page 60
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          3292	#2684: #if defined( FBL_MEM_ENABLE_STREAM_OUTPUT )
                          3293	#2685:    tFblResult streamResult;
                          3294	#2686: #endif /* FBL_MEM_ENABLE_STREAM_OUTPUT */
                          3295	#2687: #if defined( FBL_MEM_ENABLE_GAP_FILL )
                          3296	#2688:    tFblAddress fillAddress;
                          3297	#2689:    tFblLength  fillLength;
                          3298	#2690:    tFblLength  tempLength;
                          3299	#2691: #endif /* FBL_MEM_ENABLE_GAP_FILL */
                          3300	#2692:    tFblMemOperationMode finalizeStream;
                          3301	#2694: #if defined( V_ENABLE_USE_DUMMY_STATEMENT )
                          3302	#2695:    /* Parameters not used: avoid compiler warning */
                          3303	#2696: # if defined( FBL_MEM_ENABLE_SEGMENTATION )
                          3304	#2697: # else
                          3305	#2698:    (void)mode; /* PRQA S 3112 */ /* MD_FblMem_3112 */
                          3306	#2699: # endif /* FBL_MEM_ENABLE_SEGMENTATION */
                          3307	#2700: #endif /* V_ENABLE_USE_DUMMY_STATEMENT */
                          3308	#2702:    /* Handle watchdog trigger */
                          3309	#2703:    FblMemTriggerWatchdog();
                          3310	#2705: #if defined( FBL_MEM_ENABLE_VERIFY_STREAM )  || \
                          3311	#2706:     defined( FBL_ENABLE_DATA_PROCESSING )    || \
                          3312	#2707:     defined( FBL_MEM_ENABLE_STREAM_OUTPUT )  
                          3313	#2708:    /* Get pointer to current buffer position */
                          3314	#2709:    activeBuffer   = FblMemGetBuffer(activeJob);
                          3315	#2710: #endif /* FBL_MEM_ENABLE_VERIFY_STREAM || FBL_ENABLE_DATA_PROCESSING || FBL_MEM_ENABLE_STREAM_OUTPUT || FBL_MEM_ENABLE_PASSTHROUGH */
                          3316	#2711:    /* Limit processed length to configured value */
                          3317	#2712:    actualLength = FblMemLimitLength(activeJob->used, activeJob->type, mode);
                          3318	#2714:    /* Handle buffer types */
                          3319	#2715:    switch (activeJob->type)
                          3320	#2716:    {
                          3321	#2717: #if defined( FBL_ENABLE_DATA_PROCESSING )
                          3322	#2718:       /* Data processing */
                          3323	#2719:       case kFblMemJobType_ProcInput:
                          3324	#2720:       case kFblMemJobType_ProcFinalize:
                          3325	#2721:       {
                          3326	#2722: # if defined( FBL_MEM_ENABLE_STREAM_OUTPUT )
                          3327	#2723:          if (kFblOk == __ApplFblMemIsStreamOutputRequired(gSegInfo.input.dataFormat))
                          3328	#2724:          {
                          3329	#2725:             procOutJob  = &gStreamProcJob;
                          3330	#2726:          }
                          3331	#2727:          else
                          3332	#2728: # endif /* FBL_MEM_ENABLE_STREAM_OUTPUT */
                          3333	#2729:          {
                          3334	#2730:             procOutJob  = &gProcWriteJob;
                          3335	#2731:          }
                          3336	#2733:          /* Update position of output buffer to accommodate for programming remainder */
                          3337	#2734:          procOutJob->position = gSegInfo.writeRemainder;
                          3338	#2736:          /* Limit input length to 16 bit */
                          3339	#2737:          if (actualLength > 0xFFFFu)
                          3340	#2738:          {
                          3341	#2739:            actualLength = 0xFFFFu;
                          3342	#2740:          }
                          3343	#2742:          /*
                          3344	#2743:             Initialize parameters for data processing.
                          3345	#2744:             Note: Other members have been set during initialization
                          3346	#2745:          */
                          3347	#2746:          gProcParam.dataBuffer      = activeBuffer;

                                   Fri Apr 10 08:32:15 2020           Page 61
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          3348	#2747:          gProcParam.dataLength      = (vuint16)actualLength;
                          3349	#2748:          /* Align output buffer according to current fill level */
                          3350	#2749:          gProcParam.dataOutBuffer   = &((FblMemGetBuffer(procOutJob))[procOutJob->used]);
                          3351	#2750:          gProcParam.dataOutLength   = 0u;
                          3352	#2752:          /* Call API function for user specific data processing */
                          3353	#2753:          if (kFblOk != ApplFblDataProcessing(&gProcParam))
                          3354	#2754:          {
                          3355	#2755:             FBL_MEM_SET_STATUS(DataProc, gErrorStatus);   /* PRQA S 3109 */ /* MD_MSR_14.3 */
                          3356	#2756:          }
                          3357	#2757:          else
                          3358	#2758:          {
                          3359	#2759:             if ((gProcParam.dataOutLength | gProcParam.dataLength) == 0u)
                          3360	#2760:             {
                          3361	#2761:                if (kFblMemJobType_ProcFinalize == activeJob->type)
                          3362	#2762:                {
                          3363	#2763:                   /* Finalize data processing
                          3364	#2764:                      gProcWriteJob already has correct values */
                          3365	#2765:                   if (kFblOk != ApplFblDeinitDataProcessing(&gProcParam))
                          3366	#2766:                   {
                          3367	#2767:                      FBL_MEM_SET_STATUS(DataProcDeinit, gErrorStatus); /* PRQA S 3109 */ /* MD_MSR_14.3 */
                          3368	#2768:                   }
                          3369	#2770:                   /* Finish job processing */
                          3370	#2771:                   activeJob->completion = kFblMemOperationMode_Unconditional;
                          3371	#2772:                }
                          3372	#2773:                else
                          3373	#2774:                {
                          3374	#2775:                   /* Nothing consumed or produced at all, avoid endless loop */
                          3375	#2776:                   FBL_MEM_SET_STATUS(DataProcConsume, gErrorStatus);  /* PRQA S 3109 */ /* MD_MSR_14.3 */
                          3376	#2777:                }
                          3377	#2778:             }
                          3378	#2779:          }
                          3379	#2781:          if (kFblMemStatus_Ok == gErrorStatus)
                          3380	#2782:          {
                          3381	#2783:             /* Update consumed length */
                          3382	#2784:             actualLength = gProcParam.dataLength;
                          3383	#2786:             /* Any data produced? */
                          3384	#2787:             if (gProcParam.dataOutLength > 0u)
                          3385	#2788:             {
                          3386	#2789:                /* Output buffer changed? */
                          3387	#2790:                assertFblUser((gProcParam.dataOutBuffer == &((FblMemGetBuffer(procOutJob))[procOutJob->used])), kFblMemAssertUserResultOutOfRange); /* PRQA S 2214 */ /* MD_FblDef_Assert */
                          3388	#2791:                /* Output length exceeds configured limit? */
                          3389	#2792:                assertFblUser((gProcParam.dataOutLength <= FBL_MEM_INTERNAL_PROC_SEGMENTATION), kFblMemAssertUserResultOutOfRange); /* PRQA S 2214 */ /* MD_FblDef_Assert */
                          3390	#2794:                /* Store processed data information */
                          3391	#2795:                procOutJob->used += gProcParam.dataOutLength;
                          3392	#2797:                /* Total used length exceeds buffer limits? */
                          3393	#2798:                assertFblInternal((procOutJob->used <= (procOutJob->totalSize - procOutJob->offset)), kFblMemAssertParameterOutOfRange); /* PRQA S 2214 */ /* MD_FblDef_Assert */
                          3394	#2800: # if defined( FBL_MEM_ENABLE_PROC_SEGMENTATION )
                          3395	#2801:                /* Accumulate multiple data processing calls before passing output data to write routine */
                          3396	#2803:                /* Buffer was previously empty
                          3397	#2804:                   Add behind current input data using low prio so that data will definitely be programmed after processing */
                          3398	#2805:                if (procOutJob->used == gProcParam.dataOutLength)
                          3399	#2806:                {
                          3400	#2807:                   /* Insert processed data into the queue and remember handle */
                          3401	#2808:                   gProcHandle = FblMemQueueDefaultPrioInsert(gProcessingQueue, procOutJob, activeJob->segmentIndex);
                          3402	#2809:                }
                          3403	#2811:                /* Buffer is (almost) filled and has to be programmed before continuing processing */

                                   Fri Apr 10 08:32:15 2020           Page 62
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          3404	#2812:                if ((procOutJob->netSize - procOutJob->used) < FBL_MEM_INTERNAL_PROC_SEGMENTATION)
                          3405	#2813:                {
                          3406	#2814:                   /* Move processed data buffer in front of input data job by updating to higher priority
                          3407	#2815:                      Handle set during current or previous cycle */
                          3408	#2816:                   (void)FblMemQueuePrioUpdate(gProcessingQueue, gProcHandle, kFblMemJobPrio_ProcWriteHigh);
                          3409	#2817:                }
                          3410	#2818: # else
                          3411	#2819:                /* Insert processed data into the queue */
                          3412	#2820:                (void)FblMemQueueDefaultPrioInsert(gProcessingQueue, procOutJob, activeJob->segmentIndex);
                          3413	#2821: # endif /* FBL_MEM_ENABLE_PROC_SEGMENTATION */
                          3414	#2822:             }
                          3415	#2824:          }
                          3416	#2826:          break;
                          3417	#2827:       }
                          3418	#2828:       case kFblMemJobType_ProcWrite:
                          3419	#2829: #endif /* FBL_ENABLE_DATA_PROCESSING */
                          3420	#2830: #if defined( FBL_MEM_ENABLE_REMAINDER_HANDLING )
                          3421	#2831:       case kFblMemJobType_WriteFinalize:
                          3422	#2832: #endif /* FBL_MEM_ENABLE_REMAINDER_HANDLING */
                          3423	#2833:       case kFblMemJobType_InputWrite:
                          3424	#2834:       {
                          3425	#2836: #if defined( FBL_MEM_ENABLE_REMAINDER_HANDLING )
                          3426	#2837:          if (kFblMemJobType_WriteFinalize == activeJob->type)
                          3427	#2838:          {
                          3428	#2839:             finalizeStream       = kFblMemOperationMode_Finalize;
                          3429	#2840:             /* Update position of output buffer to accommodate for programming remainder */
                          3430	#2841:             activeJob->position  = gSegInfo.writeRemainder;
                          3431	#2842:          }
                          3432	#2843: # if defined( FBL_ENABLE_UNALIGNED_DATA_TRANSFER )
                          3433	#2844: # else
                          3434	#2845:          else if (kFblMemJobType_InputWrite == activeJob->type)
                          3435	#2846:          {
                          3436	#2847:             /* Force programming of any potential remainder */
                          3437	#2848:             finalizeStream = kFblMemOperationMode_Finalize;
                          3438	#2849:          }
                          3439	#2850: # endif /* FBL_ENABLE_UNALIGNED_DATA_TRANSFER */
                          3440	#2851:          else
                          3441	#2852: #endif /* FBL_MEM_ENABLE_REMAINDER_HANDLING */
                          3442	#2853:          {
                          3443	#2854:             finalizeStream = kFblMemOperationMode_Normal;
                          3444	#2855:          }
                          3445	#2857:          /* Program data, error code reflects result of operation */
                          3446	#2858:          gErrorStatus = FblMemProgramStream(activeJob, &actualLength, finalizeStream);
                          3447	#2860: #if defined( FBL_MEM_ENABLE_PROGRESS_INFO )
                          3448	#2861:          /* Update progress information */
                          3449	#2862:          if (kFblMemStatus_Ok == gErrorStatus)
                          3450	#2863:          {
                          3451	#2864: #if defined( FBL_MEM_ENABLE_GAP_FILL )
                          3452	#2865:             FblMemUpdateProgress(gSegInfo.writeLength + gGapFillJob.used);
                          3453	#2866: #else
                          3454	#2867:             FblMemUpdateProgress(gSegInfo.writeLength);
                          3455	#2868: #endif
                          3456	#2869:          }
                          3457	#2870: #endif /* FBL_MEM_ENABLE_PROGRESS_INFO*/
                          3458	#2875:          break;
                          3459	#2876:       }

                                   Fri Apr 10 08:32:15 2020           Page 63
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          3460	#2877: #if defined( FBL_MEM_ENABLE_STREAM_OUTPUT )
                          3461	#2878:       case kFblMemJobType_StreamInput:
                          3462	#2879:       case kFblMemJobType_StreamProc:
                          3463	#2880:       case kFblMemJobType_StreamFinalize:
                          3464	#2881:       {
                          3465	#2882:          /*
                          3466	#2883:             Initialize parameters for stream output.
                          3467	#2884:             Note: Other members have been set during initialization
                          3468	#2885:          */
                          3469	#2886:          gStreamParam.inputData        = activeBuffer;
                          3470	#2887:          gStreamParam.inputLength      = actualLength;
                          3471	#2888:          gStreamParam.consumedLength   = 0u;
                          3472	#2889:          gStreamParam.producedLength   = 0u;
                          3473	#2890:          gStreamParam.address          = gSegInfo.writeAddress;
                          3474	#2891:          gStreamParam.length           = gSegInfo.writeLength;
                          3475	#2893:          if (kFblMemJobType_StreamFinalize == activeJob->type)
                          3476	#2894:          {
                          3477	#2895:             /* Call API function for user specific stream output */
                          3478	#2896:             streamResult = ApplFblFinalizeStreamOutput(&gStreamParam);
                          3479	#2897:          }
                          3480	#2898:          else
                          3481	#2899:          {
                          3482	#2900:             /* Call API function for user specific stream output */
                          3483	#2901:             streamResult = ApplFblStreamOutput(&gStreamParam);
                          3484	#2902:          }
                          3485	#2904:          if (kFblOk != streamResult)
                          3486	#2905:          {
                          3487	#2906:             FBL_MEM_SET_STATUS(StreamOutput, gErrorStatus);   /* PRQA S 3109 */ /* MD_MSR_14.3 */
                          3488	#2907:          }
                          3489	#2908:          else
                          3490	#2909:          {
                          3491	#2910:             if ((gStreamParam.consumedLength | gStreamParam.producedLength) == 0u)
                          3492	#2911:             {
                          3493	#2912:                if (kFblMemJobType_StreamFinalize == activeJob->type)
                          3494	#2913:                {
                          3495	#2914:                   /* Finalize stream output
                          3496	#2915:                      Parameter already has correct values */
                          3497	#2916:                   if (kFblOk != ApplFblDeinitStreamOutput(&gStreamParam))
                          3498	#2917:                   {
                          3499	#2918:                      FBL_MEM_SET_STATUS(StreamOutputDeinit, gErrorStatus); /* PRQA S 3109 */ /* MD_MSR_14.3 */
                          3500	#2919:                   }
                          3501	#2921:                   /* Finish job processing */
                          3502	#2922:                   activeJob->completion = kFblMemOperationMode_Unconditional;
                          3503	#2923:                }
                          3504	#2924:                else
                          3505	#2925:                {
                          3506	#2926:                   /* Nothing consumed or produced at all, avoid endless loop */
                          3507	#2927:                   FBL_MEM_SET_STATUS(StreamOutputConsume, gErrorStatus);  /* PRQA S 3109 */ /* MD_MSR_14.3 */
                          3508	#2928:                }
                          3509	#2929:             }
                          3510	#2930:          }
                          3511	#2932:          if (kFblMemStatus_Ok == gErrorStatus)
                          3512	#2933:          {
                          3513	#2934:             /* Update consumed length */
                          3514	#2935:             actualLength = gStreamParam.consumedLength;
                          3515	#2937:             /* Any data produced? */

                                   Fri Apr 10 08:32:15 2020           Page 64
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          3516	#2938:             if (gStreamParam.producedLength > 0u)
                          3517	#2939:             {
                          3518	#2940:                /* Verify complete programming length does not exceed previously requested memory range */
                          3519	#2941:                if (gStreamParam.producedLength > gSegInfo.writeLength)
                          3520	#2942:                {
                          3521	#2943:                   FBL_MEM_SET_STATUS(StreamOutputConsume, gErrorStatus); /* PRQA S 3109 */ /* MD_MSR_14.3 */
                          3522	#2944:                }
                          3523	#2945:                else
                          3524	#2946:                {
                          3525	#2948:                   /* Update segment information */
                          3526	#2949:                   gSegInfo.writeAddress   += gStreamParam.producedLength;
                          3527	#2950:                   /* Reduce expected remainder */
                          3528	#2951:                   gSegInfo.writeLength    -= gStreamParam.producedLength;
                          3529	#2952: #if defined( FBL_ENABLE_PROCESSED_DATA_LENGTH )
                          3530	#2953:                   /* Length actually written */
                          3531	#2954:                   gSegInfo.writtenLength  += gStreamParam.producedLength;
                          3532	#2955: #endif /* FBL_ENABLE_PROCESSED_DATA_LENGTH */
                          3533	#2956:                }
                          3534	#2957:             }
                          3535	#2959:          }
                          3536	#2961:          break;
                          3537	#2962:       }
                          3538	#2963: #endif /* FBL_MEM_ENABLE_STREAM_OUTPUT */
                          3539	#2964: #if defined( FBL_MEM_ENABLE_GAP_FILL )
                          3540	#2965:       case kFblMemJobType_GapFill:
                          3541	#2966:       {
                          3542	#2967:          /* Start address of current fill operation */
                          3543	#2968:          fillAddress    = activeJob->baseAddress + activeJob->position;
                          3544	#2969:          /* Remember total length */
                          3545	#2970:          fillLength     = actualLength;
                          3546	#2971:          /* Reset length actually filled */
                          3547	#2972:          actualLength   = 0u;
                          3548	#2974:          /* Find start segment for current address */
                          3549	#2975:          memSegment = FblMemSegmentNrGet(fillAddress);
                          3550	#2977:          /* Valid segment addressed? */
                          3551	#2978:          if (memSegment < 0)
                          3552	#2979:          {
                          3553	#2980:             /* Address lies in gap between flash blocks
                          3554	#2981:                Range till next block can be skipped */
                          3555	#2983:             /* Use last filled address to get follow-up segment */
                          3556	#2984:             memSegment = FblMemSegmentNrGet(fillAddress - 1u) + 1;
                          3557	#2986:             /* Check segment range */
                          3558	#2987:             if ((memSegment >= kNrOfFlashBlock) || (memSegment <= 0))
                          3559	#2988:             {
                          3560	#2989:                FBL_MEM_SET_STATUS(ProgramOutsideFbt, gErrorStatus);  /* PRQA S 3109 */ /* MD_MSR_14.3 */
                          3561	#2990:             }
                          3562	#2991:             else
                          3563	#2992:             {
                          3564	#2993:                /* Skip gap */
                          3565	#2994:                if (FlashBlock[memSegment].begin > fillAddress)
                          3566	#2995:                {
                          3567	#2996:                   /* Distance to start of next flash block can be skipped */
                          3568	#2997:                   tempLength = FlashBlock[memSegment].begin - fillAddress;
                          3569	#2999:                   if (tempLength < fillLength)
                          3570	#3000:                   {
                          3571	#3001:                      /* Range partially covers next flash block

                                   Fri Apr 10 08:32:15 2020           Page 65
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          3572	#3002:                         Adapt fill range accordingly */
                          3573	#3003:                      actualLength = tempLength;
                          3574	#3004:                      fillLength  -= actualLength;
                          3575	#3005:                      fillAddress  = FlashBlock[memSegment].begin;
                          3576	#3006:                   }
                          3577	#3007:                   else
                          3578	#3008:                   {
                          3579	#3009:                      /* Full range lies within gap and can be skipped completely */
                          3580	#3010:                      actualLength   = fillLength;
                          3581	#3011:                      fillLength     = 0u;
                          3582	#3012:                   }
                          3583	#3013:                }
                          3584	#3014:                else
                          3585	#3015:                {
                          3586	#3016:                   /* Full range lies within gap and can be skipped completely */
                          3587	#3017:                   actualLength   = fillLength;
                          3588	#3018:                   fillLength     = 0u;
                          3589	#3019:                }
                          3590	#3020:             }
                          3591	#3021:          }
                          3592	#3023:          if (kFblMemStatus_Ok == gErrorStatus)
                          3593	#3024:          {
                          3594	#3025:             /* Limit fill operation to configured segmentation (equals size of prepared buffer) */
                          3595	#3026:             if (fillLength > FBL_MEM_GAP_FILL_SEGMENTATION)
                          3596	#3027:             {
                          3597	#3028:                fillLength = FBL_MEM_GAP_FILL_SEGMENTATION;
                          3598	#3029:             }
                          3599	#3031:             /* Distance to end of current flash block */
                          3600	#3032:             tempLength =(FlashBlock[memSegment].end - fillAddress) + 1u;
                          3601	#3033:             /* Limit fill range to current flash block */
                          3602	#3034:             if (fillLength > tempLength)
                          3603	#3035:             {
                          3604	#3036:                fillLength = tempLength;
                          3605	#3037:             }
                          3606	#3039:             /* Perform actual fill operation */
                          3607	#3040:             if (fillLength > 0u)
                          3608	#3041:             {
                          3609	#3042:                /* Program non-volatile memory */
                          3610	#3043:                gErrorStatus = FblMemProgramBufferInternal(fillAddress, &fillLength, gGapFillBuffer.data, kFblMemProgState_Pending);
                          3611	#3045:                /* Update length actually processed */
                          3612	#3046:                actualLength += fillLength;
                          3613	#3047:             }
                          3614	#3048:          }
                          3615	#3050: #if defined( FBL_MEM_ENABLE_PROGRESS_INFO )
                          3616	#3051:          if (kFblMemStatus_Ok == gErrorStatus)
                          3617	#3052:          {
                          3618	#3053:             /* Update programming progress */
                          3619	#3054:             FblMemUpdateProgress(gSegInfo.writeLength + (gGapFillJob.used - actualLength));
                          3620	#3055:          }
                          3621	#3056: #endif /* FBL_MEM_ENABLE_PROGRESS_INFO*/
                          3622	#3058:          break;
                          3623	#3059:       }
                          3624	#3060: #endif /* FBL_MEM_ENABLE_GAP_FILL */
                          3625	#3061:       case kFblMemJobType_Max:
                          3626	#3062:       default:
                          3627	#3063:       {

                                   Fri Apr 10 08:32:15 2020           Page 66
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          3628	#3064:          /* Invalid buffer type */
                          3629	#3065:          FBL_MEM_SET_STATUS(Failed, gErrorStatus);  /* PRQA S 3109 */ /* MD_MSR_14.3 */
                          3630	#3067:          break;
                          3631	#3068:       }
                          3632	#3069:    }
                          3633	#3071:    /* Update buffer usage */
                          3634	#3072:    activeJob->position  += actualLength;
                          3635	#3073:    activeJob->used      -= actualLength;
                          3636	#3075: #if defined( FBL_ENABLE_SYSTEM_CHECK )
                          3637	#3076:    if (kFblMemStatus_Ok == gErrorStatus)
                          3638	#3077:    {
                          3639	#3078:       if (kFblMemStatus_Ok != FblMemVerifyBufferIntegrity())
                          3640	#3079:       {
                          3641	#3080:          /* Detected buffer corruption */
                          3642	#3081:          FBL_MEM_SET_STATUS(Failed, gErrorStatus);  /* PRQA S 3109 */ /* MD_MSR_14.3 */
                          3643	#3082:       }
                          3644	#3083:    }
                          3645	#3084: #endif /* FBL_ENABLE_SYSTEM_CHECK */
                          3646	#3086:    /* Return global error state as function may be called in both service and background context */
                          3647	#3087:    return gErrorStatus;
                          3648	#3088: } /* PRQA S 6010, 6030, 6050, 6080, 4700 */ /* MD_MSR_STPTH, MD_MSR_STCYC, MD_MSR_STCAL, MD_MSR_STMIF, MD_FblMem_4700  */
                          3649	#3090: /***********************************************************************************************************************
                          3650	#3091:  *  FblMemProcessQueue
                          3651	#3092:  **********************************************************************************************************************/
                          3652	#3093: /*! \brief      Process first job in processing queue (directly use single input job if un-queued)
                          3653	#3094:  *  \details    Remove finished job from processing queue (and pipelined queue in case of input job)
                          3654	#3095:  *              Switch to idle mode if all pending jobs are finished
                          3655	#3096:  *  \pre        FblMemQueueBuffer executed before
                          3656	#3097:  *  \param[in]  mode Operation mode used to trigger finalization
                          3657	#3098:  **********************************************************************************************************************/
                          3658	#3099: static void FblMemProcessQueue( tFblMemOperationMode mode )
                          3659	#3100: {
                          3660	#3101: #if defined( FBL_MEM_ENABLE_PROC_QUEUE )
                          3661	#3102:    tFblMemQueueHandle activeHandle;
                          3662	#3103: #endif /* FBL_MEM_ENABLE_PROC_QUEUE */
                          3663	#3104:    V_MEMRAM1 tFblMemJob V_MEMRAM2 V_MEMRAM3 * activeJob;
                          3664	#3106:    FblMemTriggerWatchdog();
                          3665	#3108:    /*
                          3666	#3109:       Critical section secures access to programming state
                          3667	#3110:       May also be altered in interrupt context
                          3668	#3111:    */
                          3669	#3112:    __ApplFblMemEnterCriticalSection();
                          3670	#3114:    /*
                          3671	#3115:       Module in idle or error state?
                          3672	#3116:       Condition equals ((kFblMemProgState_Idle == fblMemProgState) || (kFblMemProgState_Error == fblMemProgState))
                          3673	#3117:    */
                          3674	#3118:    if (fblMemProgState < kFblMemProgState_Suspended)
                          3675	#3119:    {
                          3676	#3120:       /* Nothing to do */
                          3677	#3121:    }
                          3678	#3122:    else
                          3679	#3123:    {
                          3680	#3124:       /* Operation potentially paused during previous execution cycle */
                          3681	#3125:       fblMemProgState = kFblMemProgState_Pending;
                          3682	#3126:    }
                          3683	#3128:    /*

                                   Fri Apr 10 08:32:15 2020           Page 67
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          3684	#3129:       No further critical access to programming state
                          3685	#3130:       Critical section can be left
                          3686	#3131:    */
                          3687	#3132:    __ApplFblMemLeaveCriticalSection();
                          3688	#3134:    if (kFblMemProgState_Pending == fblMemProgState)
                          3689	#3135:    {
                          3690	#3136: #if defined( FBL_MEM_ENABLE_PROC_QUEUE )
                          3691	#3137:       /* Set active job, stored in first entry of processing queue */
                          3692	#3138:       activeHandle      = FblMemQueueGetFirstUsedHandle(gProcessingQueue);
                          3693	#3139:       activeJob         = gProcessingQueue[activeHandle].job;
                          3694	#3140: #else
                          3695	#3141:       /* Set active job to single input job */
                          3696	#3142:       activeJob         = &FBL_MEM_INPUT_JOB[0];
                          3697	#3143: #endif /* FBL_MEM_ENABLE_PROC_QUEUE */
                          3698	#3145:       /* Perform processing cycle on active job */
                          3699	#3146:       if (kFblMemStatus_Ok == FblMemProcessJob(activeJob, mode))
                          3700	#3147:       {
                          3701	#3148:          /* Buffer completely processed and completion mode allows job to be cleared? */
                          3702	#3149:          if (  (kFblMemOperationMode_Unconditional == activeJob->completion)
                          3703	#3150:             || ((kFblMemOperationMode_Normal == activeJob->completion) && (0u == activeJob->used)) )
                          3704	#3151:          {
                          3705	#3152: #if defined( FBL_MEM_ENABLE_PROC_QUEUE )
                          3706	#3153:             /* Remove buffer from processing queue */
                          3707	#3154:             (void)FblMemQueueRemove(gProcessingQueue, activeHandle);
                          3708	#3156:             if (FblMemQueueIsEmpty(gProcessingQueue))
                          3709	#3157: #endif /* FBL_MEM_ENABLE_PROC_QUEUE */
                          3710	#3158:             {
                          3711	#3159:                /* Processing queue empty: switch to idle state */
                          3712	#3160:                fblMemProgState = kFblMemProgState_Idle;
                          3713	#3161:             }
                          3714	#3163:          }
                          3715	#3164:       }
                          3716	#3165:       else
                          3717	#3166:       {
                          3718	#3167:          /* Error while processing buffer: switch to error state */
                          3719	#3168:          fblMemProgState = kFblMemProgState_Error;
                          3720	#3170:       }
                          3721	#3172:    }
                          3722	#3173: } /* PRQA S 6080, 2006 */ /* MD_MSR_STMIF, MD_MSR_14.7 */
                          3723	#3175: /***********************************************************************************************************************
                          3724	#3176:  *  FblMemFlushQueueByPrio
                          3725	#3177:  **********************************************************************************************************************/
                          3726	#3178: /*! \brief      Process all jobs in processing queue with priority greater or equal to given value
                          3727	#3179:  *  \details    Loop until processing queue is empty or a job with a priority lower to the given one is reached
                          3728	#3180:  *  \pre        FblMemQueueBuffer executed before
                          3729	#3181:  *  \param[in]  prio Lowest job priority to be processed
                          3730	#3182:  **********************************************************************************************************************/
                          3731	#3183: static void FblMemFlushQueueByPrio( tFblMemQueuePrio prio )
                          3732	#3184: {
                          3733	#3185: #if defined( V_ENABLE_USE_DUMMY_STATEMENT )
                          3734	#3186:    /* Parameters not used: avoid compiler warning */
                          3735	#3187: # if defined( FBL_MEM_ENABLE_PROC_QUEUE )
                          3736	#3188: # else
                          3737	#3189:    (void)prio; /* PRQA S 3112 */ /* MD_FblMem_3112 */
                          3738	#3190: # endif /* FBL_MEM_ENABLE_PROC_QUEUE */
                          3739	#3191: #endif /* V_ENABLE_USE_DUMMY_STATEMENT */

                                   Fri Apr 10 08:32:15 2020           Page 68
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          3740	#3193:    /* Loop while jobs are pending */
                          3741	#3194:    while ( (FblMemTaskIsPending())
                          3742	#3195: #if defined( FBL_MEM_ENABLE_PROC_QUEUE )
                          3743	#3196:         /* Only jobs with priority greater or equal to given one are processed */
                          3744	#3197:         && (FblMemQueueGetFirstUsedEntry(gProcessingQueue).prio >= prio)
                          3745	#3198: #endif
                          3746	#3199:          )
                          3747	#3200:    {
                          3748	#3201:       /* Execute processing cycle */
                          3749	#3202:       FblMemProcessQueue(kFblMemOperationMode_Finalize);
                          3750	#3203:    }
                          3751	#3204: }
                          3752	#3207: /***********************************************************************************************************************
                          3753	#3208:  *  FblMemQueueBuffer
                          3754	#3209:  **********************************************************************************************************************/
                          3755	#3210: /*! \brief      Handle new chunk of input data
                          3756	#3211:  *  \details    If any combination of verification, data processing and pipelined programming is configured add jobs to
                          3757	#3212:  *              processing queue
                          3758	#3213:  *              Otherwise processing will directly work on single input buffer
                          3759	#3214:  *              If pipelined programming is configured queue buffer and finish processing of one pending input buffer
                          3760	#3215:  *              in case no free input buffer is available
                          3761	#3216:  *  \pre        FblMemInitPowerOn executed before, provided buffer and data offset equal the parameters of active
                          3762	#3217:  *              input buffer
                          3763	#3218:  *  \param[in]  buffer Pointer to input buffer (including preamble)
                          3764	#3219:  *  \param[in]  offset Offset of actual data (after preamble)
                          3765	#3220:  *  \param[in]  length Length of data (without preamble)
                          3766	#3221:  *  \return     Result of operation (potentially remapped to OEM specific NRC)
                          3767	#3222:  **********************************************************************************************************************/
                          3768	#3223: static tFblMemStatus FblMemQueueBuffer( tFblMemConstRamData buffer, tFblLength offset, tFblLength length )
                          3769	#3224: {
                          3770	#3225:    tFblMemStatus  retVal;
                          3771	#3226:    V_MEMRAM1 tFblMemJob V_MEMRAM2 V_MEMRAM3 * activeJob;
                          3772	#3228: #if defined( V_ENABLE_USE_DUMMY_STATEMENT )
                          3773	#3229:    /* Parameters not used: avoid compiler warning */
                          3774	#3230: # if defined( FBL_MEM_ENABLE_SEGMENTED_INPUT_BUFFER ) || \
                          3775	#3231:      defined( FBL_ENABLE_SYSTEM_CHECK )               || \
                          3776	#3232:      defined( FBL_ENABLE_ASSERTION )
                          3777	#3233: # else
                          3778	#3234:    (void)buffer; /* PRQA S 3112 */ /* MD_FblMem_3112 */
                          3779	#3235: # endif /* FBL_MEM_ENABLE_SEGMENTED_INPUT_BUFFER || FBL_ENABLE_SYSTEM_CHECK || FBL_ENABLE_ASSERTION */
                          3780	#3236: #endif /* V_ENABLE_USE_DUMMY_STATEMENT */
                          3781	#3238:    /* Received data resides in active fill buffer */
                          3782	#3239:    activeJob = FblMemGetPendingInputJob();
                          3783	#3241: #if defined( FBL_MEM_ENABLE_SEGMENTED_INPUT_BUFFER ) || \
                          3784	#3242:     defined( FBL_ENABLE_SYSTEM_CHECK )
                          3785	#3243: # if defined( FBL_MEM_ENABLE_SEGMENTED_INPUT_BUFFER )
                          3786	#3244:    if (kFblMemStatus_Ok != FblMemRelocateBufferOffset(activeJob, buffer, offset, length))
                          3787	#3245: # else /* FBL_ENABLE_SYSTEM_CHECK */
                          3788	#3246:    /* Limit buffer handling to previously provided buffer */
                          3789	#3247:    if ( (buffer != FblMemGetBuffer(activeJob))
                          3790	#3248:      || (offset >= activeJob->netSize)
                          3791	#3249:      || (length > (activeJob->netSize - offset)) )
                          3792	#3250: # endif /* FBL_MEM_ENABLE_SEGMENTED_INPUT_BUFFER */
                          3793	#3251:    {
                          3794	#3252:       FBL_MEM_SET_STATUS(DataIndParam, retVal); /* PRQA S 3109 */ /* MD_MSR_14.3 */
                          3795	#3253:    }

                                   Fri Apr 10 08:32:15 2020           Page 69
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          3796	#3254:    else
                          3797	#3255: #else
                          3798	#3256:    assertFblUser(buffer == FblMemGetBuffer(activeJob),      kFblMemAssertParameterOutOfRange); /* PRQA S 2214 */ /* MD_FblDef_Assert */
                          3799	#3257:    assertFblUser(offset <  activeJob->netSize,              kFblMemAssertParameterOutOfRange); /* PRQA S 2214 */ /* MD_FblDef_Assert */
                          3800	#3258:    assertFblUser(length <= (activeJob->netSize - offset),   kFblMemAssertParameterOutOfRange); /* PRQA S 2214 */ /* MD_FblDef_Assert */
                          3801	#3259: #endif /* FBL_MEM_ENABLE_SEGMENTED_INPUT_BUFFER || FBL_ENABLE_SYSTEM_CHECK */
                          3802	#3260:    {
                          3803	#3262:       /* Evaluate current error state and directly return if not okay (error in background task) */
                          3804	#3263:       if (kFblMemProgState_Error != fblMemProgState)
                          3805	#3264:       {
                          3806	#3265:          /* Update buffer state with provided information */
                          3807	#3266:          activeJob->position  = activeJob->offset + offset;
                          3808	#3267:          activeJob->used      = length;
                          3809	#3268: #if defined( FBL_ENABLE_DATA_PROCESSING )    || \
                          3810	#3269:     defined( FBL_MEM_ENABLE_STREAM_OUTPUT )  || \
                          3811	#3270:     defined( FBL_MEM_ENABLE_REMAINDER_HANDLING )
                          3812	#3271:          /*
                          3813	#3272:             Switch type of input buffer to value set in segment indication:
                          3814	#3273:             write through, pass through, data processing or stream output
                          3815	#3274:          */
                          3816	#3275:          activeJob->type      = gSegInfo.jobType;
                          3817	#3276: #endif /* FBL_ENABLE_DATA_PROCESSING || FBL_MEM_ENABLE_STREAM_OUTPUT || FBL_MEM_ENABLE_PASSTHROUGH || FBL_MEM_ENABLE_REMAINDER_HANDLING */
                          3818	#3278:          {
                          3819	#3279:          }
                          3820	#3281: #if defined( FBL_MEM_ENABLE_PROC_QUEUE )
                          3821	#3282:          {
                          3822	#3283:             /* Append buffer to processing queue */
                          3823	#3284:             (void)FblMemQueueDefaultPrioInsert(gProcessingQueue, activeJob, gSegInfo.ownIndex);
                          3824	#3286:          }
                          3825	#3287: #endif /* FBL_MEM_ENABLE_PROC_QUEUE */
                          3826	#3289:          {
                          3827	#3290:             /* Set pending programming request flag */
                          3828	#3291:             fblMemProgState = kFblMemProgState_Pending;
                          3829	#3292:          }
                          3830	#3293:       }
                          3831	#3295:       /* Result depending on queue processing by FblMemUnblockQueue */
                          3832	#3296:       retVal = gErrorStatus;
                          3833	#3297:    }
                          3834	#3299:    return retVal;
                          3835	#3300: }
                          3836	#3302: /***********************************************************************************************************************
                          3837	#3303:  *  FblMemCheckAllowed
                          3838	#3304:  **********************************************************************************************************************/
                          3839	#3305: /*! \brief      Check if all required states are set
                          3840	#3306:  *  \details    Clear certain states if successful, completely reset allowed states otherwise
                          3841	#3307:  *  \pre        Allowed state initialized before
                          3842	#3308:  *  \param[in]  check Bitmask of states which have to be active
                          3843	#3309:  *  \param[in]  clear Bitmask of states to be cleared in case check successful
                          3844	#3310:  *  \return     All required states set (kFblOk) or not (kFblFailed)
                          3845	#3311:  **********************************************************************************************************************/
                          3846	#3312: static tFblResult FblMemCheckAllowed( tFblMemAllowedInd check, tFblMemAllowedInd clear )
                          3847	#3313: {
                          3848	#3314:    tFblResult retVal;
                          3849	#3316:    /*
                          3850	#3317:       Check executed at beginning of (almost) every exported function
                          3851	#3318:       Trigger watchdog here

                                   Fri Apr 10 08:32:15 2020           Page 70
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          3852	#3319:     */
                          3853	#3320:    FblMemTriggerWatchdog();
                          3854	#3323:    /* Check for required states */
                          3855	#3324:    if (FblMemIsAllowed(check))
                          3856	#3325:    {
                          3857	#3326:       /* Success: clear requested states */
                          3858	#3327:       FblMemClrAllowed(clear);
                          3859	#3328:       retVal = kFblOk;
                          3860	#3329:    }
                          3861	#3330:    else
                          3862	#3331:    {
                          3863	#3332:       /* Failure: completely reset states */
                          3864	#3333:       FblMemResetAllowed();
                          3865	#3334:       retVal = kFblFailed;
                          3866	#3335:    }
                          3867	#3337:    return retVal;
                          3868	#3338: }
                          3869	#3341: #if defined( FBL_MEM_ENABLE_PROGRESS_INFO )
                          3870	#3342: /***********************************************************************************************************************
                          3871	#3343:  *  FblMemCalculateProgress
                          3872	#3344:  **********************************************************************************************************************/
                          3873	#3345: /*! \brief      Calculate progress percentage
                          3874	#3346:  *  \details    Percentage is calculated according to the current progress, the expected maximum value and the resulting
                          3875	#3347:  *              maximum percentage
                          3876	#3348:  *  \param[in]  current Current progress in arbitrary unit (e.g. bytes)
                          3877	#3349:  *  \param[in]  total Expected maximum value in arbitrary unit (e.g. bytes)
                          3878	#3350:  *  \param[in]  percentage Maximum reported percentage
                          3879	#3351:  *  \return     Current progress percentage
                          3880	#3352:  **********************************************************************************************************************/
                          3881	#3353: static vuint8 FblMemCalculateProgress( vuint32 current, vuint32 total, vuint8 percentage )
                          3882	#3354: {
                          3883	#3355:    vuint8 progress;
                          3884	#3357:    /* Init to maximum percentage */
                          3885	#3358:    progress = percentage;
                          3886	#3360:    /* Prevent division by zero */
                          3887	#3361:    if ((0u != total) && (0u != percentage))
                          3888	#3362:    {
                          3889	#3363:       /* Calculate progress value
                          3890	#3364:          Use different calculation paths depending on total value to prevent integer overflow or division by zero
                          3891	#3365:          Remark: Unsigned cast of -1 is guaranteed to result in maximum representable value */
                          3892	#3366:       if (total < (((vuint32)-1) / (vuint32)percentage))
                          3893	#3367:       {
                          3894	#3368:          /* Applying multiplication to current value prevents loss of precision,
                          3895	#3369:             which otherwise could result in invalid percentages (e.g. 101%) */
                          3896	#3370:          progress = (vuint8)(((current * percentage) / total) & 0xFFu);
                          3897	#3371:       }
                          3898	#3372:       else
                          3899	#3373:       {
                          3900	#3374:          /* Total value is large enough to provide sufficient precision */
                          3901	#3375:          progress = (vuint8)((current / (total / percentage)) & 0xFFu);
                          3902	#3376:       }
                          3903	#3377:    }
                          3904	#3379:    /* Limit reported progress to maximum percentage */
                          3905	#3380:    if (progress > percentage)
                          3906	#3381:    {
                          3907	#3382:       progress = percentage;

                                   Fri Apr 10 08:32:15 2020           Page 71
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          3908	#3383:    }
                          3909	#3385:    return progress;
                          3910	#3386: }
                          3911	#3388: /***********************************************************************************************************************
                          3912	#3389:  *  FblMemInitProgress
                          3913	#3390:  **********************************************************************************************************************/
                          3914	#3391: /*! \brief      Initialize progress states
                          3915	#3392:  *  \details    Called during startup
                          3916	#3393:  **********************************************************************************************************************/
                          3917	#3394: static void FblMemInitProgress( void )
                          3918	#3395: {
                          3919	#3396:    /* Initialize progress information */
                          3920	#3397:    gProgressInfo.type                  = kFblMemProgressType_Undefined;
                          3921	#3399:    /* Ensure reporting is triggered after change of any value */
                          3922	#3400:    gPrevProgressInfo.type              = kFblMemProgressType_Undefined;
                          3923	#3401:    gPrevProgressInfo.totalProgress     = FBL_MEM_PROGRESS_INITIAL;
                          3924	#3402:    gPrevProgressInfo.partialProgress   = FBL_MEM_PROGRESS_INITIAL;
                          3925	#3403: }
                          3926	#3405: /***********************************************************************************************************************
                          3927	#3406:  *  FblMemReportProgress
                          3928	#3407:  **********************************************************************************************************************/
                          3929	#3408: /*! \brief      Report current progress
                          3930	#3409:  *  \details    Report current progress to user callback in case any of the following applies:
                          3931	#3410:  *                - Type or segment count has changed since previous report
                          3932	#3411:  *                - Partial progress completed, but not reported yet
                          3933	#3412:  *                - Total or partial progress increased by at least the configured threshold since previous report
                          3934	#3413:  **********************************************************************************************************************/
                          3935	#3414: static void FblMemReportProgress( void )
                          3936	#3415: {
                          3937	#3416:    /* Check for relevant changes since previous report */
                          3938	#3417:    if (  (FBL_MEM_PROGRESS_COMPLETE       == gProgressInfo.partialProgress)
                          3939	#3418:       || (gPrevProgressInfo.type          != gProgressInfo.type)
                          3940	#3419:       || (gPrevProgressInfo.segmentCount  != gProgressInfo.segmentCount)
                          3941	#3420:       || ((gProgressInfo.totalProgress - gPrevProgressInfo.totalProgress) >= (vuint8)FBL_MEM_PROGRESS_THRESHOLD_PERCENTAGE)
                          3942	#3421:       || ((gProgressInfo.partialProgress - gPrevProgressInfo.partialProgress) >= (vuint8)FBL_MEM_PROGRESS_THRESHOLD_PERCENTAGE) )
                          3943	#3422:    {
                          3944	#3423:       /* Prevent re-reporting of completed partial progress */
                          3945	#3424:       if (FBL_MEM_PROGRESS_COMPLETE != gPrevProgressInfo.partialProgress)
                          3946	#3425:       {
                          3947	#3426:          /* Inform user callback */
                          3948	#3427:          __ApplFblMemReportProgress(&gProgressInfo);
                          3949	#3429:          /* Remember reported progress */
                          3950	#3430:          gPrevProgressInfo = gProgressInfo;
                          3951	#3431:       }
                          3952	#3432:    }
                          3953	#3433: }
                          3954	#3435: /***********************************************************************************************************************
                          3955	#3436:  *  FblMemSetupProgress
                          3956	#3437:  **********************************************************************************************************************/
                          3957	#3438: /*! \brief      Setup progress for new partial operation
                          3958	#3439:  *  \details    Stores the meta information (type, logical block address and segment count), sets up the percentage
                          3959	#3440:  *              offset and current contribution of the total operation and stores the target value of the partial operation
                          3960	#3441:  *  \param[in]  type Type of partial operation
                          3961	#3442:  *  \param[in]  logicalAddress Logical start address of processed block
                          3962	#3443:  *  \param[in]  segmentCount Count of segment processed by partial operation, typically zero for erase and verification,
                          3963	#3444:  *                           segment index for programming and index of last segment incremented by one for concluding

                                   Fri Apr 10 08:32:15 2020           Page 72
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          3964	#3445:  *                           gap fill
                          3965	#3446:  *  \param[in]  totalOffset Percentage offset of total operation for current operation type
                          3966	#3447:  *  \param[in]  totalPercentage Percentage contribution to total operation of current operation type
                          3967	#3448:  *  \param[in]  target Expected maximum value of partial operation in arbitrary unit (e.g. bytes)
                          3968	#3449:  **********************************************************************************************************************/
                          3969	#3450: static void FblMemSetupProgress( tFblMemProgressType type, tFblAddress logicalAddress, vuint32 segmentCount,
                          3970	#3451:    vuint8 totalOffset, vuint8 totalPercentage, vuint32 target )
                          3971	#3452: {
                          3972	#3453:    /* Store meta information */
                          3973	#3454:    gProgressInfo.type                     = type;
                          3974	#3455:    gProgressInfo.logicalAddress           = logicalAddress;
                          3975	#3456:    gProgressInfo.segmentCount             = segmentCount;
                          3976	#3458:    /* Setup percentage offset and contribution of total operation */
                          3977	#3459:    gProgressInfoInternal.totalOffset      = totalOffset;
                          3978	#3460:    gProgressInfoInternal.totalPercentage  = totalPercentage;
                          3979	#3461:    /* Store target value of partial operation */
                          3980	#3462:    gProgressInfoInternal.target           = target;
                          3981	#3464:    /* Ensure first update is reported by setting default values for previously reported info */
                          3982	#3465:    gProgressPrevRemainder                 = 0u;
                          3983	#3466:    gPrevProgressInfo.totalProgress        = FBL_MEM_PROGRESS_INITIAL;
                          3984	#3467:    gPrevProgressInfo.partialProgress      = FBL_MEM_PROGRESS_INITIAL;
                          3985	#3468: }
                          3986	#3470: /***********************************************************************************************************************
                          3987	#3471:  *  FblMemOffsetProgress
                          3988	#3472:  **********************************************************************************************************************/
                          3989	#3473: /*! \brief      Modify total percentages to reflect current progress
                          3990	#3474:  *  \details    During progress setup the total percentages reflect the complete contribution of all operations of the
                          3991	#3475:  *              current type. This function offsets those values according to the current progress.
                          3992	#3476:  *  \pre        FblMemSetupProgress called before
                          3993	#3477:  *  \param[in]  totalDone Current total progress in arbitrary unit (e.g. bytes)
                          3994	#3478:  *  \param[in]  totalTarget Expected maximum value of total operation in arbitrary unit (e.g. bytes)
                          3995	#3479:  **********************************************************************************************************************/
                          3996	#3480: static void FblMemOffsetProgress( vuint32 totalDone, vuint32 totalTarget )
                          3997	#3481: {
                          3998	#3482:    /* Update offset according to current progress */
                          3999	#3483:    gProgressInfoInternal.totalOffset      +=
                          4000	#3484:       FblMemCalculateProgress(totalDone, totalTarget, gProgressInfoInternal.totalPercentage);
                          4001	#3485:    /* Cut down percentage contribution according to current progress */
                          4002	#3486:    gProgressInfoInternal.totalPercentage   =
                          4003	#3487:       FblMemCalculateProgress(gProgressInfoInternal.target, totalTarget, gProgressInfoInternal.totalPercentage);
                          4004	#3488: }
                          4005	#3490: /***********************************************************************************************************************
                          4006	#3491:  *  FblMemUpdateProgress
                          4007	#3492:  **********************************************************************************************************************/
                          4008	#3493: /*! \brief      Update the progress information
                          4009	#3494:  *  \details    Progress information is updated according to the progress of the current partial operation
                          4010	#3495:  *              Update is performed in case any of the following applies:
                          4011	#3496:  *                - First update
                          4012	#3497:  *                - Progress increased by at least the configured threshold since previous update
                          4013	#3498:  *  \pre        FblMemSetupProgress and optionally FblMemOffsetProgress called before
                          4014	#3499:  *  \param[in]  remainder Remainder of current partial operation in arbitrary unit (e.g. bytes)
                          4015	#3500:  **********************************************************************************************************************/
                          4016	#3501: static void FblMemUpdateProgress( vuint32 remainder )
                          4017	#3502: {
                          4018	#3503:    vuint32 done;
                          4019	#3505:    /* Check for relevant changes since previous update */

                                   Fri Apr 10 08:32:15 2020           Page 73
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          4020	#3506:    if (  (gProgressPrevRemainder < remainder)
                          4021	#3507:       || ((gProgressPrevRemainder - remainder) >= FBL_MEM_PROGRESS_THRESHOLD_BYTES) )
                          4022	#3508:    {
                          4023	#3509:       /* Calculate current partial progress in arbitray unit */
                          4024	#3510:       done = gProgressInfoInternal.target - remainder;
                          4025	#3512:       /* Calculate progress percentages */
                          4026	#3513:       gProgressInfo.totalProgress   =
                          4027	#3514:          gProgressInfoInternal.totalOffset
                          4028	#3515:          + FblMemCalculateProgress(done, gProgressInfoInternal.target, gProgressInfoInternal.totalPercentage);
                          4029	#3516:       gProgressInfo.partialProgress =
                          4030	#3517:          FBL_MEM_PROGRESS_INITIAL + FblMemCalculateProgress(done, gProgressInfoInternal.target, FBL_MEM_PROGRESS_COMPLETE);
                          4031	#3519:       /* Report updated progress */
                          4032	#3520:       FblMemReportProgress();
                          4033	#3522:       /* Remember currently updated remainder value */
                          4034	#3523:       gProgressPrevRemainder = remainder;
                          4035	#3524:    }
                          4036	#3525: }
                          4037	#3527: /***********************************************************************************************************************
                          4038	#3528:  *  FblMemConcludeProgress
                          4039	#3529:  **********************************************************************************************************************/
                          4040	#3530: /*! \brief      Conclude the current partial operation
                          4041	#3531:  *  \details    Explicitely set partial progress to maximum percentage and total progress according to the set up values
                          4042	#3532:  *  \pre        FblMemSetupProgress and optionally FblMemOffsetProgress called before
                          4043	#3533:  **********************************************************************************************************************/
                          4044	#3534: static void FblMemConcludeProgress( void )
                          4045	#3535: {
                          4046	#3536:    /* Set progress percentages to maximum values */
                          4047	#3537:    gProgressInfo.totalProgress   = gProgressInfoInternal.totalOffset + gProgressInfoInternal.totalPercentage;
                          4048	#3538:    gProgressInfo.partialProgress = FBL_MEM_PROGRESS_COMPLETE;
                          4049	#3540:    /* Report updated progress */
                          4050	#3541:    FblMemReportProgress();
                          4051	#3542: }
                          4052	#3544: /***********************************************************************************************************************
                          4053	#3545:  *  FblMemProgressRead
                          4054	#3546:  **********************************************************************************************************************/
                          4055	#3547: /*! \brief      Update verification progress
                          4056	#3548:  *  \details    Read operations of output verification are re-routed through this function to update the progress
                          4057	#3549:  *              information according the current read address
                          4058	#3550:  *  \param[in]  address Memory address to read out
                          4059	#3551:  *  \param[out] buffer Target buffer
                          4060	#3552:  *  \param[in]  length Number of bytes to read
                          4061	#3553:  *  \return     Number of actually copied bytes
                          4062	#3554:  **********************************************************************************************************************/
                          4063	#3555: # if defined( FBL_MEM_ENABLE_VERIFY_OUTPUT )
                          4064	#3556: #  if defined( FBL_MEM_ENABLE_SWITCH_READMEMORY_PARAM )
                          4065	#3557: /* Parameters order changed in comparison to HIS security module specification */
                          4066	#3558: static tFblMemVerifySize FblMemProgressRead( tFblMemVerifyAddr address, tFblMemVerifySize length, tFblMemVerifyDataPtr buffer )
                          4067	#3559: #  else
                          4068	#3560: /* Parameters order as defined by HIS security module specification */
                          4069	#3561: static tFblMemVerifySize FblMemProgressRead( tFblMemVerifyAddr address, tFblMemVerifyDataPtr buffer, tFblMemVerifySize length )
                          4070	#3562: #  endif /* FBL_MEM_ENABLE_SWITCH_READMEMORY_PARAM */
                          4071	#3563: {
                          4072	#3564:    vuint32 position;
                          4073	#3566:    /* Calculate position relative to block start address */
                          4074	#3567:    position = address - gBlockInfo.targetAddress;
                          4075	#3568:    /* Update progress with remainder */

                                   Fri Apr 10 08:32:15 2020           Page 74
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          4076	#3569:    FblMemUpdateProgress(gBlockInfo.targetLength - position);
                          4077	#3571:    /* Perform actual read operation */
                          4078	#3572:    return gBlockInfo.readFct(address, buffer, length);
                          4079	#3573: }
                          4080	#3574: # endif /* FBL_MEM_ENABLE_VERIFY_OUTPUT */
                          4081	#3575: #endif /* FBL_MEM_ENABLE_PROGRESS_INFO */
                          4082	#3577: /***********************************************************************************************************************
                          4083	#3578:  *  GLOBAL FUNCTIONS
                          4084	#3579:  **********************************************************************************************************************/
                          4085	#3581: /***********************************************************************************************************************
                          4086	#3582:  *  FblMemInitPowerOnExt
                          4087	#3583:  **********************************************************************************************************************/
                          4088	#3584: /*! \brief      Initialize module
                          4089	#3585:  *  \param[in]  preambleLen  Length of preamble stored during buffer switch
                          4090	#3586:  *  \param[in]  sourceHandle Handle of input source
                          4091	#3587:  *  \return     Pointer to initial input buffer
                          4092	#3588:  **********************************************************************************************************************/
                          4093	#3589: tFblMemRamData FblMemInitPowerOnExt( tFblLength preambleLen, tFblMemInputSource sourceHandle ) /* PRQA S 1505 */ /* MD_FblMem_1505 */
                          4094	#3590: {
                          4095	#3591: #if defined( FBL_MEM_ENABLE_GAP_FILL )
                          4096	#3592:    vuintx idx;
                          4097	#3593: #endif /* FBL_MEM_ENABLE_GAP_FILL */
                          4098	#3595: #if defined( V_ENABLE_USE_DUMMY_STATEMENT )
                          4099	#3596:    /* Parameters not used: avoid compiler warning */
                          4100	#3597: # if defined( FBL_MEM_ENABLE_DYNAMIC_PREAMBLE_LENGTH )
                          4101	#3598: # else
                          4102	#3599:    (void)preambleLen; /* PRQA S 3112 */ /* MD_FblMem_3112 */
                          4103	#3600: # endif /* FBL_MEM_ENABLE_DYNAMIC_PREAMBLE_LENGTH */
                          4104	#3601: # if defined( FBL_MEM_ENABLE_MULTI_SOURCE )
                          4105	#3602: # else
                          4106	#3603:    (void)sourceHandle; /* PRQA S 3112 */ /* MD_FblMem_3112 */
                          4107	#3604: # endif /* FBL_MEM_ENABLE_MULTI_SOURCE */
                          4108	#3605: #endif /* V_ENABLE_USE_DUMMY_STATEMENT */
                          4109	#3607: #if defined( FBL_MEM_ENABLE_MULTI_SOURCE )
                          4110	#3608:    /* Verify source handle lies within range */
                          4111	#3609:    assertFblUser(sourceHandle < FBL_MEM_SOURCE_COUNT, kFblMemAssertParameterOutOfRange);
                          4112	#3610: #endif /* FBL_MEM_ENABLE_MULTI_SOURCE */
                          4113	#3612: #if defined( FBL_MEM_ENABLE_PROC_QUEUE )
                          4114	#3613:    /* Verify job prio mapping array */
                          4115	#3614:    assertFblInternal(kFblMemJobType_Max == (FBL_MEM_ARRAY_SIZE(gJobPrio) - 1), kFblMemAssertParameterOutOfRange); /* PRQA S 3201 */ /* PRQA S 3325 */ /* MD_FblMem_AssertJobMax */ /* PRQA S 2214 */ /* MD_FblDef_Assert */
                          4116	#3615: #endif /* FBL_MEM_ENABLE_PROC_QUEUE */
                          4117	#3616: #if defined( FBL_MEM_ENABLE_SEGMENTATION ) 
                          4118	#3617:    /* Verify length limit mapping array */
                          4119	#3618:    assertFblInternal(kFblMemJobType_Max == (FBL_MEM_ARRAY_SIZE(gLengthLimits) - 1), kFblMemAssertParameterOutOfRange);  /* PRQA S 3201 */ /* PRQA S 3325 */ /* MD_FblMem_AssertJobMax */ /* PRQA S 2214 */ /* MD_FblDef_Assert */
                          4120	#3619: #endif /* FBL_MEM_ENABLE_SEGMENTATION || FBL_MEM_ENABLE_VERIFY_PIPELINED */
                          4121	#3622: #if defined( FBL_ENABLE_DATA_PROCESSING )
                          4122	#3623:    /* Initialize data processing info */
                          4123	#3624:    FblMemInitJob(&gProcWriteJob, gProcBuffer.data, FBL_MEM_ARRAY_SIZE(gProcBuffer.data), kFblMemJobType_ProcWrite);
                          4124	#3625:    /* Overwrite net size, to exclude overhead for remainder and padding */
                          4125	#3626:    gProcWriteJob.netSize = FBL_MEM_PROC_BUFFER_SIZE;
                          4126	#3627:    /* Initialize info to trigger data processing finalization */
                          4127	#3628:    FblMemInitJob(&gProcFinalizeJob, FBL_MEM_BUFFER_NULL, 0, kFblMemJobType_ProcFinalize);
                          4128	#3630:    /*
                          4129	#3631:       Always provide full configured segmentation size to data processing,
                          4130	#3632:       regardless of any remainder
                          4131	#3633:    */

                                   Fri Apr 10 08:32:15 2020           Page 75
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          4132	#3634:    gProcParam.dataOutMaxLength = (vuint16)FBL_MEM_INTERNAL_PROC_SEGMENTATION;
                          4133	#3635: # if defined( FBL_MEM_ENABLE_EXT_TRIGGER_DATA_PROC )
                          4134	#3636:    gProcParam.wdTriggerFct     = FblMemTriggerWatchdogExt;
                          4135	#3637: # else
                          4136	#3638:    gProcParam.wdTriggerFct     = FblMemTriggerWatchdog;
                          4137	#3639: # endif /* FBL_MEM_ENABLE_EXT_TRIGGER_DATA_PROC */
                          4138	#3640: #endif /* FBL_ENABLE_DATA_PROCESSING */
                          4139	#3642: #if defined( FBL_MEM_ENABLE_STREAM_OUTPUT )
                          4140	#3643:    /* Initialize stream output info */
                          4141	#3644: # if defined( FBL_ENABLE_DATA_PROCESSING )
                          4142	#3645:    FblMemInitJob(&gStreamProcJob, gProcBuffer.data, FBL_MEM_ARRAY_SIZE(gProcBuffer.data), kFblMemJobType_StreamProc);
                          4143	#3646:    /* Overwrite net size, to exclude overhead for remainder and padding */
                          4144	#3647:    gStreamProcJob.netSize = FBL_MEM_PROC_BUFFER_SIZE;
                          4145	#3648: # endif /* FBL_ENABLE_DATA_PROCESSING */
                          4146	#3649:    /* Initialize info to trigger stream output finalization */
                          4147	#3650:    FblMemInitJob(&gStreamFinalizeJob, FBL_MEM_BUFFER_NULL, 0, kFblMemJobType_StreamFinalize);
                          4148	#3652:    gStreamParam.outputData = FBL_MEM_BUFFER_NULL;
                          4149	#3653:    gStreamParam.outputSize = 0u;
                          4150	#3654:    gStreamParam.watchdog   = FblMemTriggerWatchdog;
                          4151	#3655: #endif /* FBL_MEM_ENABLE_STREAM_OUTPUT */
                          4152	#3658: #if defined( FBL_MEM_ENABLE_GAP_FILL )
                          4153	#3659:    /* Initialize gap fill job */
                          4154	#3660:    FblMemInitJob(&gGapFillJob, FBL_MEM_BUFFER_NULL, FBL_MEM_ARRAY_SIZE(gGapFillBuffer.data), kFblMemJobType_GapFill);
                          4155	#3662:    /* Fill gap fill buffer with fill character */
                          4156	#3663:    for (idx = 0u; idx < FBL_MEM_ARRAY_SIZE(gGapFillBuffer.data); idx++)
                          4157	#3664:    {
                          4158	#3665:       gGapFillBuffer.data[idx] = kFillChar;
                          4159	#3666:    }
                          4160	#3667: #endif /* FBL_MEM_ENABLE_GAP_FILL */
                          4161	#3669: #if defined( FBL_MEM_ENABLE_MULTI_SOURCE )
                          4162	#3670:    gActiveSource = sourceHandle;
                          4163	#3671: #endif /* FBL_MEM_ENABLE_MULTI_SOURCE */
                          4164	#3673: #if defined( FBL_MEM_ENABLE_DYNAMIC_PREAMBLE_LENGTH )
                          4165	#3674:    gPreambleLength[FBL_MEM_ACTIVE_SOURCE] = preambleLen;
                          4166	#3675: #endif /* FBL_MEM_ENABLE_DYNAMIC_PREAMBLE_LENGTH */
                          4167	#3677:    /* Perform additional initialization and return initial buffer */
                          4168	#3678:    return FblMemInitInternal();
                          4169	#3679: }
                          4170	#3681: /***********************************************************************************************************************
                          4171	#3682:  *  FblMemInitPowerOn
                          4172	#3683:  **********************************************************************************************************************/
                          4173	#3684: /*! \brief    Initialize module
                          4174	#3685:  *  \return   Pointer to initial input buffer
                          4175	#3686:  **********************************************************************************************************************/
                          4176	#3687: tFblMemRamData FblMemInitPowerOn( void )
                          4177	#3688: {
                          4178	#3689:    /* Perform initialization and return initial buffer */
                          4179	#3690:    return FblMemInitPowerOnExt(FBL_MEM_DEFAULT_PREAMBLE_LENGTH, FBL_MEM_SOURCE_HANDLE_DEFAULT);
                          4180	#3691: }
                          4181	#3693: /***********************************************************************************************************************
                          4182	#3694:  *  FblMemInit
                          4183	#3695:  **********************************************************************************************************************/
                          4184	#3696: /*! \brief    (Re)-initialize input buffers
                          4185	#3697:  *  \details  Should be called before performing additional tasks in case a previous operation failed
                          4186	#3698:  *  \pre      FblMemInitPowerOn executed before
                          4187	#3699:  *  \return   Pointer to active input buffer

                                   Fri Apr 10 08:32:15 2020           Page 76
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          4188	#3700:  **********************************************************************************************************************/
                          4189	#3701: tFblMemRamData FblMemInit( void )
                          4190	#3702: {
                          4191	#3703:    tFblMemRamData activeBuffer;
                          4192	#3705: #if defined( FBL_MEM_ENABLE_PREAMBLE_HANDLING )
                          4193	#3706:    /*
                          4194	#3707:       Active fill buffer may change
                          4195	#3708:       Store preamble so operation is transparent for caller
                          4196	#3709:    */
                          4197	#3710:    FblMemStorePreamble();
                          4198	#3711: #endif /* FBL_MEM_ENABLE_PREAMBLE_HANDLING */
                          4199	#3713:    /* Perform re-initialization and get active buffer */
                          4200	#3714:    activeBuffer = FblMemInitInternal();
                          4201	#3716: #if defined( FBL_MEM_ENABLE_PREAMBLE_HANDLING )
                          4202	#3717:    /*
                          4203	#3718:       Active fill buffer may have changed
                          4204	#3719:       Restore previously stored preamble so operation is transparent for caller
                          4205	#3720:    */
                          4206	#3721:    FblMemRestorePreamble();
                          4207	#3722: #endif /* FBL_MEM_ENABLE_PREAMBLE_HANDLING */
                          4208	#3724:    return activeBuffer;
                          4209	#3725: }
                          4210	#3727: /***********************************************************************************************************************
                          4211	#3728:  *  FblMemDeinit
                          4212	#3729:  **********************************************************************************************************************/
                          4213	#3730: /*! \brief    De-initialize module
                          4214	#3731:  *  \details  Should be called when memory driver is de-initialized
                          4215	#3732:  **********************************************************************************************************************/
                          4216	#3733: void FblMemDeinit( void )
                          4217	#3734: {
                          4218	#3735:    /* No further operations allowed, reset states */
                          4219	#3736:    FblMemInitStates();
                          4220	#3737: }
                          4221	#3739: #if defined( FBL_MEM_ENABLE_MULTI_SOURCE )
                          4222	#3740: /***********************************************************************************************************************
                          4223	#3741:  *  FblMemLockInputSource
                          4224	#3742:  **********************************************************************************************************************/
                          4225	#3743: /*! \brief      Lock input to specific source
                          4226	#3744:  *  \param[in]  sourceHandle Handle of input source
                          4227	#3745:  **********************************************************************************************************************/
                          4228	#3746: void FblMemLockInputSource( tFblMemInputSource sourceHandle )
                          4229	#3747: {
                          4230	#3748:    /* Verify source handle lies within range */
                          4231	#3749:    assertFblInternal(sourceHandle < FBL_MEM_SOURCE_COUNT, kFblMemAssertParameterOutOfRange);
                          4232	#3751:    gActiveSource = sourceHandle;
                          4233	#3752: }
                          4234	#3753: #endif /* FBL_MEM_ENABLE_MULTI_SOURCE */
                          4235	#3755: /***********************************************************************************************************************
                          4236	#3756:  *  FblMemGetActiveBuffer
                          4237	#3757:  **********************************************************************************************************************/
                          4238	#3758: /*! \brief    Return active input buffer, which can be used for current data reception
                          4239	#3759:  *  \details  Buffer pointer includes previously set offset to accommodate for alignment requirements
                          4240	#3760:  *  \pre      FblMemInitPowerOn executed before
                          4241	#3761:  *  \return   Pointer to active input buffer
                          4242	#3762:  **********************************************************************************************************************/
                          4243		.align	1

                                   Fri Apr 10 08:32:15 2020           Page 77
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          4244		.align	1
                          4245	..gh.f.p.0.a.1.r.0.e.15:
                          4246		.type	..gh.f.p.0.a.1.r.0.e.15,@object
                          4247		.size	..gh.f.p.0.a.1.r.0.e.15,0
                          4248		.global	FblMemGetActiveBuffer
                          4249	FblMemGetActiveBuffer:
                          4250	#	    .bf
                          4251	.LDW04:
                          4252	#3763: tFblMemRamData FblMemGetActiveBuffer( void )
                          4253	#3764: {
                          4254	#3765:    V_MEMRAM1 tFblMemJob V_MEMRAM2 V_MEMRAM3 * inputJob;
                          4255	#3767:    /* Get pending job info */
                          4256	#3768:    inputJob = FblMemGetPendingInputJob();
                          4257	#3769:    /* Reset position to current offset */
                          4258	#3770:    inputJob->position = inputJob->offset;
000002a8 7060e000         4259		e_lis	r3, %hiadj(gInputJobs)
000002ac 1c630000         4260		e_add16i	r3, r3, %lo(gInputJobs)
000002b0 c303             4261		se_lwz	r0, 12(r3)
000002b2 d403             4262		se_stw	r0, 16(r3)
                          4263	#3772:    /* Return pointer to active fill buffer */
                          4264	#3773:    return FblMemGetBuffer(inputJob);
000002b4 78000000         4265		se_b	FblMemGetBuffer
                          4266	#	    .ef
                          4267	.LDW14:
                          4268	..lin.1acf134f..2fa0750e.0_20::
                          4269	.LDWlin20:
                          4270		.global	__ghs_eofn_FblMemGetActiveBuffer
                          4271	__ghs_eofn_FblMemGetActiveBuffer:
                          4272		.type	FblMemGetActiveBuffer,@function
                          4273		.size	FblMemGetActiveBuffer,$-FblMemGetActiveBuffer
                          4274		.align	1
                          4275	
                          4276	#function:			FblMemGetActiveBuffer
                          4277	#stack frame size:		0
                          4278	#
                          4279	
                          4280		.data
                          4281		.section ".vletext", "vax"
                          4282		.vle
                          4283		.vle
                          4284	
                          4285	#3774: }
                          4286	
                          4287		.align	1
                          4288		.align	1
                          4289	..gh.f.p.0.a.1.r.0.e.16:
                          4290		.type	..gh.f.p.0.a.1.r.0.e.16,@object
                          4291		.size	..gh.f.p.0.a.1.r.0.e.16,0
                          4292		.global	FblMemInitInternal..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
                          4293	FblMemInitInternal..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.:
                          4294	FblMemInitInternal:
000002b8 0080             4295		se_mflr	r0
000002ba d101             4296		se_stw	r0, 4(sp)
000002bc 182106f8         4297		e_stwu	sp, -8(sp)
                          4298	#	    .bf
                          4299	.LDW24:

                                   Fri Apr 10 08:32:15 2020           Page 78
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          4300	#1689: static tFblMemRamData FblMemInitInternal( void )
                          4301	#1690: {
                          4302	#1692:    /* Setup idle state */
                          4303	#1693:    FblMemInitStates();
000002c0 e900             4304		se_bl	FblMemInitStates
                          4305	#1695: #if defined( FBL_MEM_ENABLE_PROC_QUEUE )
                          4306	#1696:    /* Setup processing queue */
                          4307	#1697:    FblMemQueueInit(gProcessingQueue, FBL_MEM_ARRAY_SIZE(gProcessingQueue));
                          4308	#line1697
                          4309	..lin.1acf134f..5b0d78a9.0_21::
                          4310	.LDWlin21:
000002c2 7060e000         4311		e_lis	r3, %hiadj(gProcessingQueue)
000002c6 1c630000         4312		e_add16i	r3, r3, %lo(gProcessingQueue)
000002ca 4854             4313		se_li	r4, 5
000002cc 78000001         4314		se_bl	FblMemQueueInit
                          4315	#1698: #endif /* FBL_MEM_ENABLE_PROC_QUEUE */
                          4316	#1699:    FblMemInitInputQueue();
                          4317	#line1699
                          4318	..lin.1acf134f..5b0d78a9.0_22::
                          4319	.LDWlin22:
000002d0 e900             4320		se_bl	FblMemInitInputQueue
                          4321	#1701: #if defined( FBL_MEM_ENABLE_REMAINDER_HANDLING )
                          4322	#1702:    FblMemInitJob(&gWriteFinalizeJob, gRemainderBuffer.data, FBL_MEM_SEGMENT_SIZE, kFblMemJobType_WriteFinalize);
                          4323	#line1702
                          4324	..lin.1acf134f..5b0d78a9.0_23::
                          4325	.LDWlin23:
000002d2 7080e000         4326		e_lis	r4, %hiadj(gRemainderBuffer+4)
000002d6 7060e000         4327		e_lis	r3, %hiadj(gWriteFinalizeJob)
000002da 1c840004         4328		e_add16i	r4, r4, %lo(gRemainderBuffer+4)
000002de 1c630000         4329		e_add16i	r3, r3, %lo(gWriteFinalizeJob)
000002e2 4885             4330		se_li	r5, 8
000002e4 4816             4331		se_li	r6, 1
000002e6 e900             4332		se_bl	FblMemInitJob
                          4333	#1703: #endif /* FBL_MEM_ENABLE_REMAINDER_HANDLING */
                          4334	#1705: #if defined( FBL_ENABLE_DATA_PROCESSING )
                          4335	#1706:    /* Reset current data length, no full re-initialization necessary */
                          4336	#1707:    gProcWriteJob.used = 0u;
                          4337	#1708: #endif /* FBL_ENABLE_DATA_PROCESSING */
                          4338	#1710: #if defined( FBL_MEM_ENABLE_STREAM_OUTPUT ) && \
                          4339	#1711:     defined( FBL_ENABLE_DATA_PROCESSING )
                          4340	#1712:    /* Reset current data length, no full re-initialization necessary */
                          4341	#1713:    gStreamProcJob.used = 0u;
                          4342	#1714: #endif /* FBL_MEM_ENABLE_STREAM_OUTPUT && FBL_ENABLE_DATA_PROCESSING*/
                          4343	#1717: #if defined( FBL_ENABLE_SYSTEM_CHECK )
                          4344	#1718:    FblMemInitBufferIntegrity();
                          4345	#line1718
                          4346	..lin.1acf134f..5b0d78a9.0_24::
                          4347	.LDWlin24:
000002e8 78000001         4348		se_bl	FblMemInitBufferIntegrity
                          4349	#1719: #endif /* FBL_ENABLE_SYSTEM_CHECK */
                          4350	#1721: #if defined( FBL_MEM_ENABLE_PROGRESS_INFO )
                          4351	#1722:    FblMemInitProgress();
                          4352	#1723: #endif /* FBL_MEM_ENABLE_PROGRESS_INFO */
                          4353	#1725:    /* Allow block start / erase indication */
                          4354	#1726:    FblMemSetAllowed(FBL_MEM_ALLOWED_BLOCK_START | FBL_MEM_ALLOWED_BLOCK_ERASE);
                          4355	#line1726

                                   Fri Apr 10 08:32:15 2020           Page 79
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          4356	..lin.1acf134f..5b0d78a9.0_25::
                          4357	.LDWlin25:
000002ec 4c10             4358		se_li	r0, 65
000002ee 70e0e000         4359		e_lis	r7, %hiadj(gAllowedInd)
000002f2 54070000         4360		e_stw	r0, %lo(gAllowedInd)(r7)
                          4361	#1728:    return FblMemGetActiveBuffer();
000002f6 e900             4362		se_bl	FblMemGetActiveBuffer
                          4363	#	    .ef
                          4364	.LDW34:
                          4365	#line1726
                          4366	..lin.1acf134f..5b0d78a9.0_26::
                          4367	.LDWlin26:
000002f8 c301             4368		se_lwz	r0, 12(sp)
000002fa 2071             4369		se_addi	sp, 8
000002fc 0090             4370		se_mtlr	r0
000002fe 0004             4371		se_blr
                          4372	__ghs_eofn_FblMemInitInternal:
                          4373		.type	FblMemInitInternal,@function
                          4374		.size	FblMemInitInternal,$-FblMemInitInternal
                          4375		.type	FblMemInitInternal..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.,@function
                          4376		.size	FblMemInitInternal..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.,$-FblMemInitInternal..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
                          4377		.align	1
                          4378	
                          4379	#function:			FblMemInitInternal
                          4380	#stack frame size:		8
                          4381	#link area offset:		0
                          4382	#local storage area offset:	8
                          4383	#
                          4384	
                          4385		.data
                          4386		.section ".vletext", "vax"
                          4387		.vle
                          4388		.vle
                          4389	
                          4390	#1729: }
                          4391	
                          4392	#1731: #if defined( FBL_MEM_ENABLE_PREAMBLE_HANDLING )
                          4393	#1732: /***********************************************************************************************************************
                          4394	#1733:  *  FblMemStorePreamble
                          4395	#1734:  **********************************************************************************************************************/
                          4396	#1735: /*! \brief      Store the current buffer preamble (protocol information before actual data)
                          4397	#1736:  *  \details    Active fill buffer may be exchanged by subsequent operations, so preamble has to be restored for
                          4398	#1737:  *              calling instance
                          4399	#1738:  *  \pre        FblMemInitPowerOn executed before, fill buffer available
                          4400	#1739:  **********************************************************************************************************************/
                          4401		.align	1
                          4402		.align	1
                          4403	..gh.f.p.0.a.1.r.0.e.17:
                          4404		.type	..gh.f.p.0.a.1.r.0.e.17,@object
                          4405		.size	..gh.f.p.0.a.1.r.0.e.17,0
                          4406		.global	FblMemStorePreamble..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
                          4407	FblMemStorePreamble..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.:
                          4408	FblMemStorePreamble:
00000300 0080             4409		se_mflr	r0
00000302 d101             4410		se_stw	r0, 4(sp)
00000304 182106f8         4411		e_stwu	sp, -8(sp)

                                   Fri Apr 10 08:32:15 2020           Page 80
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          4412	#	    .bf
                          4413	.LDW44:
                          4414	#1740: static void FblMemStorePreamble( void )
                          4415	#1741: {
                          4416	#1742: #if defined( FBL_MEM_ENABLE_DYNAMIC_PREAMBLE_LENGTH )
                          4417	#1743:    /* Verify preamble fits into reserved buffer */
                          4418	#1744:    assertFblGen(FBL_MEM_PREAMBLE_LENGTH <= FBL_MEM_MAX_PREAMBLE_LENGTH, kFblMemAssertParameterOutOfRange); /* PRQA S 2214 */ /* MD_FblDef_Assert */
                          4419	#1745: #endif /* FBL_MEM_ENABLE_DYNAMIC_PREAMBLE_LENGTH */
                          4420	#1747:    /* Copy preamble from active fill to temporary buffer */
                          4421	#1748:    (void)MEMCPY(gPreambleBuffer, FblMemGetActiveBuffer(), FBL_MEM_PREAMBLE_LENGTH);
00000308 e900             4422		se_bl	FblMemGetActiveBuffer
0000030a 0134             4423		se_mr	r4, r3
0000030c 7060e000         4424		e_lis	r3, %hiadj(gPreambleBuffer)
00000310 1c630000         4425		e_add16i	r3, r3, %lo(gPreambleBuffer)
00000314 4825             4426		se_li	r5, 2
00000316 78000001         4427		e_bl	FblOwnMemcpy
                          4428	#1749: }
                          4429	#	    .ef
                          4430	.LDW54:
                          4431	#line1749
                          4432	..lin.1acf134f..86fb024d.0_27::
                          4433	.LDWlin27:
0000031a c301             4434		se_lwz	r0, 12(sp)
0000031c 2071             4435		se_addi	sp, 8
0000031e 0090             4436		se_mtlr	r0
00000320 0004             4437		se_blr
                          4438	__ghs_eofn_FblMemStorePreamble:
                          4439		.type	FblMemStorePreamble,@function
                          4440		.size	FblMemStorePreamble,$-FblMemStorePreamble
                          4441		.type	FblMemStorePreamble..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.,@function
                          4442		.size	FblMemStorePreamble..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.,$-FblMemStorePreamble..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
                          4443		.align	1
                          4444	
                          4445	#function:			FblMemStorePreamble
                          4446	#stack frame size:		8
                          4447	#link area offset:		0
                          4448	#local storage area offset:	8
                          4449	#
                          4450	
                          4451		.data
                          4452		.section ".vletext", "vax"
                          4453		.vle
                          4454		.vle
                          4455	
                          4456	
                          4457	#1751: /***********************************************************************************************************************
                          4458	#1752:  *  FblMemRestorePreamble
                          4459	#1753:  **********************************************************************************************************************/
                          4460	#1754: /*! \brief      Restore the previously stored preamble (protocol information before actual data) into the (new) active
                          4461	#1755:  *              fill buffer
                          4462	#1756:  *  \details    Active buffer could be exchanged by preceding operations, so preamble has to be restored for calling
                          4463	#1757:  *              instance
                          4464	#1758:  *  \pre        FblMemInitPowerOn executed before, fill buffer available
                          4465	#1759:  **********************************************************************************************************************/
                          4466		.align	1
                          4467		.align	1

                                   Fri Apr 10 08:32:15 2020           Page 81
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          4468	..gh.f.p.0.a.1.r.0.e.18:
                          4469		.type	..gh.f.p.0.a.1.r.0.e.18,@object
                          4470		.size	..gh.f.p.0.a.1.r.0.e.18,0
                          4471		.global	FblMemRestorePreamble..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
                          4472	FblMemRestorePreamble..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.:
                          4473	FblMemRestorePreamble:
00000322 0080             4474		se_mflr	r0
00000324 d101             4475		se_stw	r0, 4(sp)
00000326 182106f8         4476		e_stwu	sp, -8(sp)
                          4477	#	    .bf
                          4478	.LDW64:
                          4479	#1760: static void FblMemRestorePreamble( void )
                          4480	#1761: {
                          4481	#1762:    /* Copy previously stored preamble from temporary to active fill buffer */
                          4482	#1763:    (void)MEMCPY(FblMemGetActiveBuffer(), gPreambleBuffer, FBL_MEM_PREAMBLE_LENGTH);
0000032a e900             4483		se_bl	FblMemGetActiveBuffer
0000032c 7080e000         4484		e_lis	r4, %hiadj(gPreambleBuffer)
00000330 1c840000         4485		e_add16i	r4, r4, %lo(gPreambleBuffer)
00000334 4825             4486		se_li	r5, 2
00000336 78000001         4487		e_bl	FblOwnMemcpy
                          4488	#1764: }
                          4489	#	    .ef
                          4490	.LDW74:
                          4491	#line1764
                          4492	..lin.1acf134f..324e3cc4.0_28::
                          4493	.LDWlin28:
0000033a c301             4494		se_lwz	r0, 12(sp)
0000033c 2071             4495		se_addi	sp, 8
0000033e 0090             4496		se_mtlr	r0
00000340 0004             4497		se_blr
                          4498	__ghs_eofn_FblMemRestorePreamble:
                          4499		.type	FblMemRestorePreamble,@function
                          4500		.size	FblMemRestorePreamble,$-FblMemRestorePreamble
                          4501		.type	FblMemRestorePreamble..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.,@function
                          4502		.size	FblMemRestorePreamble..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.,$-FblMemRestorePreamble..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
                          4503		.align	1
                          4504	
                          4505	#function:			FblMemRestorePreamble
                          4506	#stack frame size:		8
                          4507	#link area offset:		0
                          4508	#local storage area offset:	8
                          4509	#
                          4510	
                          4511		.data
                          4512		.section ".vletext", "vax"
                          4513		.vle
                          4514		.vle
                          4515	
                          4516	
                          4517	#1765: #endif /* FBL_MEM_ENABLE_PREAMBLE_HANDLING */
                          4518	#1767: #if defined( FBL_MEM_ENABLE_SEGMENTATION ) 
                          4519	#1768: /***********************************************************************************************************************
                          4520	#1769:  *  FblMemLimitLength
                          4521	#1770:  **********************************************************************************************************************/
                          4522	#1771: /*! \brief        Length will be truncated if limit is exceeded
                          4523	#1772:  *  \details      Original value will be returned if finalization operation mode is set

                                   Fri Apr 10 08:32:15 2020           Page 82
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          4524	#1773:  *  \param[in]    inputLen Original length
                          4525	#1774:  *  \param[in]    type Type of active job
                          4526	#1775:  *  \param[in]    mode Current operation mode (used for finalization)
                          4527	#1776:  *  \return       Input length limited to given range
                          4528	#1777:  **********************************************************************************************************************/
                          4529	#1778: static tFblLength FblMemLimitLength( tFblLength inputLen, tFblMemJobType type, tFblMemOperationMode mode )
                          4530	#1779: {
                          4531	#1780:    tFblLength lengthLimit;
                          4532	#1782: # if defined( V_ENABLE_USE_DUMMY_STATEMENT )
                          4533	#1783:    /* Parameters not used: avoid compiler warning */
                          4534	#1784: #  if defined( FBL_MEM_ENABLE_SEGMENTATION )
                          4535	#1785: #  else
                          4536	#1786:    (void)mode; /* PRQA S 3112 */ /* MD_FblMem_3112 */
                          4537	#1787: #  endif /* FBL_MEM_ENABLE_SEGMENTATION */
                          4538	#1788: # endif /* V_ENABLE_USE_DUMMY_STATEMENT */
                          4539	#1790:    /* Valid job type? */
                          4540	#1791:    assertFblInternal((type < kFblMemJobType_Max), kFblMemAssertParameterOutOfRange); /* PRQA S 2214 */ /* MD_FblDef_Assert */
                          4541	#1793:    lengthLimit = gLengthLimits[type].limit;
                          4542	#1795:    if (lengthLimit > 0)
                          4543	#1796:    {
                          4544	#1797: # if defined( FBL_MEM_ENABLE_SEGMENTATION )
                          4545	#1798:       /* Segmentation explicitly enabled
                          4546	#1799:          Truncate to given limit, unless unlimited mode for job type (typically finalize) is set */
                          4547	#1800:       if ((gLengthLimits[type].unlimitedMode != mode) && (inputLen > lengthLimit))
                          4548	#1801: # else
                          4549	#1802:       /* Truncate to given limit, if unconditional mode is configured for job type */
                          4550	#1803:       if ((gLengthLimits[type].unlimitedMode == kFblMemOperationMode_Unconditional) && (inputLen > lengthLimit))
                          4551	#1804: # endif /* FBL_MEM_ENABLE_SEGMENTATION */
                          4552	#1805:       {
                          4553	#1806:          inputLen = lengthLimit;
                          4554	#1807:       }
                          4555	#1808:    }
                          4556	#1810:    return inputLen;
                          4557	#1811: }
                          4558	#1812: #endif /* FBL_MEM_ENABLE_SEGMENTATION || FBL_MEM_ENABLE_VERIFY_PIPELINED */
                          4559	#1814: /***********************************************************************************************************************
                          4560	#1815:  *  FblMemPadLength
                          4561	#1816:  **********************************************************************************************************************/
                          4562	#1817: /*! \brief      Calculate number of bytes required to pad provided address range to memory segment size
                          4563	#1818:  *  \param[in]  address Start address of memory range
                          4564	#1819:  *  \param[in]  length Length of memory range
                          4565	#1820:  *  \return     Number of required padding bytes
                          4566	#1821:  **********************************************************************************************************************/
                          4567		.align	1
                          4568		.align	1
                          4569	..gh.f.p.4.a.1.r.0.e.19:
                          4570		.type	..gh.f.p.4.a.1.r.0.e.19,@object
                          4571		.size	..gh.f.p.4.a.1.r.0.e.19,0
                          4572		.global	FblMemPadLength..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
                          4573	FblMemPadLength..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.:
                          4574	FblMemPadLength:
00000342 182106e0         4575		e_stwu	sp, -32(sp)
00000346 0080             4576		se_mflr	r0
00000348 1b61090c         4577		e_stmw	r27, 12(sp)
0000034c d901             4578		se_stw	r0, 36(sp)
0000034e 013e             4579		se_mr	r30, r3

                                   Fri Apr 10 08:32:15 2020           Page 83
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
00000350 014d             4580		se_mr	r29, r4
                          4581	#	    .bf
                          4582	.LDW84:
                          4583	#1822: static tFblLength FblMemPadLength( tFblAddress address, tFblLength length )
                          4584	#1823: {
                          4585	#1824:    tFblLength  localAddress;
                          4586	#1825:    tFblLength  localLength;
                          4587	#1826:    tFblLength  padLen;
                          4588	#1827:    tFblAddress alignMask;
                          4589	#1828:    vsint16     oldSegment;
                          4590	#1830:    /* Local copy of length */
                          4591	#1831:    localLength = length;
00000352 0140             4592		se_mr	r0, r4
                          4593	#1832:    /* Special handling required for zero length
                          4594	#1833:       Address used directly */
                          4595	#1834:    if (length > 0u)
00000354 2a04             4596		se_cmpi	r4, 0
00000356 e600             4597		se_beq	.L1138
                          4598	#1835:    {
                          4599	#1836:       localLength--;
                          4600	#line1836
                          4601	..lin.1acf134f..2ee031ef.0_29::
                          4602	.LDWlin29:
00000358 2400             4603		se_subi	r0, 1
                          4604	.L1138:
                          4605	#1837:    }
                          4606	#1839:    /* Calculate end address */
                          4607	#1840:    localAddress  = address + localLength;
0000035a 7360e000         4608		e_lis	r27, %hiadj(memSegment)
                          4609	#1842:    /* Initialize padding length */
                          4610	#1843:    padLen      = 0u;
0000035e 1f7b0000         4611		e_add16i	r27, r27, %lo(memSegment)
                          4612	#1845:    /* Remember current memory segment */
                          4613	#1846:    oldSegment  = memSegment;
00000362 040e             4614		se_add	r30, r0
00000364 a0cb             4615		se_lhz	r28, 0(r27)
00000366 480f             4616		se_li	r31, 0
                          4617	#1848:    /* Evaluate memory segment */
                          4618	#1849:    memSegment  = FblMemSegmentNrGet(localAddress);
00000368 01e3             4619		se_mr	r3, r30
0000036a 78000001         4620		e_bl	FblMemSegmentNrGet
                          4621	#1851:    /* Check if segment was found */
                          4622	#1852:    if (memSegment >= 0)
0000036e 2a03             4623		se_cmpi	r3, 0
00000370 e400             4624		se_blt	.L1140
                          4625	#1853:    {
                          4626	#1854:       /* Bit mask for memory segment alignment */
                          4627	#1855:       alignMask = (tFblAddress)(MemDriver_SegmentSize - 1u);
                          4628	#line1855
                          4629	..lin.1acf134f..2ee031ef.0_30::
                          4630	.LDWlin30:
00000372 1803a00c         4631		e_mulli	r0, r3, 12
00000376 1ce00008         4632		e_add16i	r7, r0, %lo(FlashBlock+8)
0000037a 70079000         4633		e_add2is	r7, %hiadj(FlashBlock+8)
0000037e 8007             4634		se_lbz	r0, 0(r7)
00000380 1800a018         4635		e_mulli	r0, r0, 24

                                   Fri Apr 10 08:32:15 2020           Page 84
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
00000384 1cc00014         4636		e_add16i	r6, r0, %lo(memDrvLst+20)
00000388 70069000         4637		e_add2is	r6, %hiadj(memDrvLst+20)
0000038c a006             4638		se_lhz	r0, 0(r6)
0000038e 2a0d             4639		se_cmpi	r29, 0
                          4640	#1857:       /* Padding length calculated for end address of data to be padded */
                          4641	#1858:       /* Invert all masked bits */
                          4642	#1859:       padLen = localAddress ^ alignMask;
00000390 2400             4643		se_subi	r0, 1
                          4644	#1861:       /* Modify padding length for special case (zero length) */
                          4645	#1862:       if (0u == length)
00000392 7fdf0278         4646		xor	r31, r30, r0
00000396 e200             4647		se_bne	.L1142
                          4648	#1863:       {
                          4649	#1864:          padLen++;
                          4650	#line1864
                          4651	..lin.1acf134f..2ee031ef.0_31::
                          4652	.LDWlin31:
00000398 200f             4653		se_addi	r31, 1
                          4654	.L1142:
                          4655	#1865:       }
                          4656	#1867:       /* Apply mask to cut of unnecessary bits (e.g. additional address info, overflow of addition) */
                          4657	#1868:       padLen &= alignMask;
0000039a 460f             4658		se_and	r31, r0
                          4659	.L1140:
                          4660	#1869:    }
                          4661	#1871:    /* Restore memory segment */
                          4662	#1872:    memSegment = oldSegment;
0000039c b0cb             4663		se_sth	r28, 0(r27)
                          4664	#1874:    return padLen;
0000039e 01f3             4665		se_mr	r3, r31
                          4666	#	    .ef
                          4667	.LDW94:
000003a0 c901             4668		se_lwz	r0, 36(sp)
000003a2 1b61080c         4669		e_lmw	r27, 12(sp)
000003a6 21f1             4670		se_addi	sp, 32
000003a8 0090             4671		se_mtlr	r0
000003aa 0004             4672		se_blr
                          4673	__ghs_eofn_FblMemPadLength:
                          4674		.type	FblMemPadLength,@function
                          4675		.size	FblMemPadLength,$-FblMemPadLength
                          4676		.type	FblMemPadLength..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.,@function
                          4677		.size	FblMemPadLength..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.,$-FblMemPadLength..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
                          4678		.align	1
                          4679	
                          4680	#function:			FblMemPadLength
                          4681	#stack frame size:		32
                          4682	#link area offset:		0
                          4683	#local storage area offset:	12
                          4684	#gpr save area offset:		12
                          4685	#
                          4686	#localAddress	r30	local
                          4687	#localLength	r0	local
                          4688	#padLen	r31	local
                          4689	#alignMask	r0	local
                          4690	#oldSegment	r28	local
                          4691	

                                   Fri Apr 10 08:32:15 2020           Page 85
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          4692	#address	r30	param
                          4693	#length	r29	param
                          4694	
                          4695		.data
                          4696		.section ".vletext", "vax"
                          4697		.vle
                          4698		.vle
                          4699	
                          4700	#1875: }
                          4701	
                          4702	#1877: /***********************************************************************************************************************
                          4703	#1878:  *  FblMemPadBuffer
                          4704	#1879:  **********************************************************************************************************************/
                          4705	#1880: /*! \brief      Fill up the provided buffer with kFillChar if not aligned to the memory segment size
                          4706	#1881:  *  \pre        Buffer provided has to be large enough to hold added padding bytes
                          4707	#1882:  *  \param[in]  address Start address of memory range
                          4708	#1883:  *  \param[in]  length Length of memory range
                          4709	#1884:  *  \param[in,out]  data Pointer to last byte of actual data
                          4710	#1885:  *  \return     Number of padded bytes
                          4711	#1886:  **********************************************************************************************************************/
                          4712		.align	1
                          4713		.align	1
                          4714	..gh.f.p.5.a.1.r.0.e.20:
                          4715		.type	..gh.f.p.5.a.1.r.0.e.20,@object
                          4716		.size	..gh.f.p.5.a.1.r.0.e.20,0
                          4717		.global	FblMemPadBuffer..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
                          4718	FblMemPadBuffer..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.:
                          4719	FblMemPadBuffer:
000003ac 182106f0         4720		e_stwu	sp, -16(sp)
000003b0 0080             4721		se_mflr	r0
000003b2 d3f1             4722		se_stw	r31, 12(sp)
000003b4 d501             4723		se_stw	r0, 20(sp)
000003b6 015f             4724		se_mr	r31, r5
                          4725	#	    .bf
                          4726	.LDW05:
                          4727	#1887: static tFblLength FblMemPadBuffer( tFblAddress address, tFblLength length, tFblMemRamData data )
                          4728	#1888: {
                          4729	#1889:    tFblMemRamData padBuffer;
                          4730	#1890:    tFblLength padLen;
                          4731	#1891:    tFblLength idx;
                          4732	#1893:    /* Calculate number of required padding bytes */
                          4733	#1894:    padLen = FblMemPadLength(address, length);
000003b8 e900             4734		se_bl	FblMemPadLength
                          4735	#1896:    /* In case data was already aligned the last buffer byte may be located at the very last memory address
                          4736	#1897:       Prevent address wrap around by relocating buffer not until padding is necessary */
                          4737	#1898:    if (padLen > 0u)
                          4738	#line1898
                          4739	..lin.1acf134f..18a9ba87.0_32::
                          4740	.LDWlin32:
000003ba 2a03             4741		se_cmpi	r3, 0
000003bc e600             4742		se_beq	.L1244
                          4743	#1899:    {
                          4744	#1900:       /* Input buffer points to last byte of actual data */
                          4745	#1901:       padBuffer = &data[1];
                          4746	#line1901
                          4747	..lin.1acf134f..18a9ba87.0_33::

                                   Fri Apr 10 08:32:15 2020           Page 86
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          4748	.LDWlin33:
000003be 200f             4749		se_addi	r31, 1
                          4750	#1903:       /* Append data to align buffer to segment size */
                          4751	#1904:       for (idx = 0u; idx < padLen; idx++)
000003c0 4800             4752		se_li	r0, 0
000003c2 e800             4753		se_b	.L1249
                          4754	.L1248:
                          4755	#1905:       {
                          4756	#1906: #if defined( FBL_MEM_ENABLE_SEGMENTED_INPUT_BUFFER )
                          4757	#1907:          /* Save original data, restored after programming operation */
                          4758	#1908:          gPaddingBuffer[idx] = padBuffer[idx];
                          4759	#1909: #endif /* FBL_MEM_ENABLE_SEGMENTED_INPUT_BUFFER */
                          4760	#1911:          padBuffer[idx] = kFillChar;
                          4761	#line1911
                          4762	..lin.1acf134f..18a9ba87.0_34::
                          4763	.LDWlin34:
000003c4 2c87             4764		se_bmaski	r7, 8
000003c6 7cff01ae         4765		stbx	r7, r31, r0
000003ca 2000             4766		se_addi	r0, 1
                          4767	.L1249:
000003cc 0d30             4768		se_cmpl	r0, r3
000003ce e400             4769		se_blt	.L1248
                          4770	.L1244:
                          4771	#1912:       }
                          4772	#1913:    }
                          4773	#1915:    return padLen;
                          4774	#	    .ef
                          4775	.LDW15:
                          4776	#line1915
                          4777	..lin.1acf134f..18a9ba87.0_35::
                          4778	.LDWlin35:
000003d0 c501             4779		se_lwz	r0, 20(sp)
000003d2 c3f1             4780		se_lwz	r31, 12(sp)
000003d4 20f1             4781		se_addi	sp, 16
000003d6 0090             4782		se_mtlr	r0
000003d8 0004             4783		se_blr
                          4784	__ghs_eofn_FblMemPadBuffer:
                          4785		.type	FblMemPadBuffer,@function
                          4786		.size	FblMemPadBuffer,$-FblMemPadBuffer
                          4787		.type	FblMemPadBuffer..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.,@function
                          4788		.size	FblMemPadBuffer..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.,$-FblMemPadBuffer..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
                          4789		.align	1
                          4790	
                          4791	#function:			FblMemPadBuffer
                          4792	#stack frame size:		16
                          4793	#link area offset:		0
                          4794	#local storage area offset:	12
                          4795	#gpr save area offset:		12
                          4796	#
                          4797	#padBuffer	r31	local
                          4798	#padLen	r3	local
                          4799	#idx	r0	local
                          4800	
                          4801	#address	none	param
                          4802	#length	none	param
                          4803	#data	r31	param

                                   Fri Apr 10 08:32:15 2020           Page 87
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          4804	
                          4805		.data
                          4806		.section ".vletext", "vax"
                          4807		.vle
                          4808		.vle
                          4809	
                          4810	#1916: }
                          4811	
                          4812	#1918: #if defined( FBL_MEM_ENABLE_SEGMENTED_INPUT_BUFFER )
                          4813	#1919: /***********************************************************************************************************************
                          4814	#1920:  *  FblMemUnpadBuffer
                          4815	#1921:  **********************************************************************************************************************/
                          4816	#1922: /*! \brief      Restore previous state of buffer after padding with fill pattern
                          4817	#1923:  *  \pre        memSegment correctly initialized (only relevant for multiple memory devices configuration)
                          4818	#1924:  *              FblMemPadBuffer called before with exact same parameters
                          4819	#1925:  *  \param[in]  data Pointer to last byte of actual data
                          4820	#1926:  *  \param[in]  padLen Number of previously padded bytes
                          4821	#1927:  **********************************************************************************************************************/
                          4822	#1928: static void FblMemUnpadBuffer( tFblMemRamData data, tFblLength padLen )
                          4823	#1929: {
                          4824	#1930:    /* In case data was already aligned the last buffer byte may be located at the very last memory address
                          4825	#1931:       Prevent address wrap around by relocating buffer not until padding is necessary */
                          4826	#1932:    if (padLen > 0u)
                          4827	#1933:    {
                          4828	#1934:       /* Restore original data, overwritten by padding */
                          4829	#1935:       (void)MEMCPY(&data[1], gPaddingBuffer, padLen);
                          4830	#1936:    }
                          4831	#1937: }
                          4832	#1938: #endif /* FBL_MEM_ENABLE_SEGMENTED_INPUT_BUFFER */
                          4833	#1940: /***********************************************************************************************************************
                          4834	#1941:  *  FblMemCopyBuffer
                          4835	#1942:  **********************************************************************************************************************/
                          4836	#1943: /*! \brief      Performs program operation to volatile memory
                          4837	#1944:  *  \param[in]  programAddress Program address
                          4838	#1945:  *  \param[in]  programLength Length of data (output: length actually programmed)
                          4839	#1946:  *  \param[in]  programData Pointer to program data
                          4840	#1947:  *  \return     Result of operation (potentially remapped to OEM specific NRC)
                          4841	#1948:  **********************************************************************************************************************/
                          4842		.align	1
                          4843		.align	1
                          4844	..gh.f.p.5.a.1.r.0.e.21:
                          4845		.type	..gh.f.p.5.a.1.r.0.e.21,@object
                          4846		.size	..gh.f.p.5.a.1.r.0.e.21,0
                          4847		.global	FblMemCopyBuffer..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
                          4848	FblMemCopyBuffer..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.:
                          4849	FblMemCopyBuffer:
000003da 0080             4850		se_mflr	r0
000003dc d101             4851		se_stw	r0, 4(sp)
000003de 182106f8         4852		e_stwu	sp, -8(sp)
000003e2 0140             4853		se_mr	r0, r4
                          4854	#	    .bf
                          4855	.LDW25:
                          4856	#1949: static tFblMemStatus FblMemCopyBuffer( tFblAddress programAddress,
                          4857	#1950:    const V_MEMRAM1 tFblLength V_MEMRAM2 V_MEMRAM3 * programLength, tFblMemConstRamData programData )
                          4858	#1951: {
                          4859	#1952:    /* Copy input buffer to destination address */

                                   Fri Apr 10 08:32:15 2020           Page 88
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          4860	#1953:    __ApplFblMemCopyBuffer(programAddress, programData, *programLength); /* PRQA S 0306 */ /* MD_FblMem_0306 */ /* PRQA S 0432 */ /* MD_FblHw_Memcpy */
000003e4 0154             4861		se_mr	r4, r5
000003e6 c050             4862		se_lwz	r5, 0(r0)
000003e8 78000001         4863		e_bl	FblOwnMemcpy
                          4864	#1955:    return kFblMemStatus_Ok;
000003ec 4803             4865		se_li	r3, 0
                          4866	#	    .ef
                          4867	.LDW35:
000003ee c301             4868		se_lwz	r0, 12(sp)
000003f0 2071             4869		se_addi	sp, 8
000003f2 0090             4870		se_mtlr	r0
000003f4 0004             4871		se_blr
                          4872	__ghs_eofn_FblMemCopyBuffer:
                          4873		.type	FblMemCopyBuffer,@function
                          4874		.size	FblMemCopyBuffer,$-FblMemCopyBuffer
                          4875		.type	FblMemCopyBuffer..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.,@function
                          4876		.size	FblMemCopyBuffer..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.,$-FblMemCopyBuffer..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
                          4877		.align	1
                          4878	
                          4879	#function:			FblMemCopyBuffer
                          4880	#stack frame size:		8
                          4881	#link area offset:		0
                          4882	#local storage area offset:	8
                          4883	#
                          4884	
                          4885	#programAddress	none	param
                          4886	#programLength	r0	param
                          4887	#programData	r5	param
                          4888	
                          4889		.data
                          4890		.section ".vletext", "vax"
                          4891		.vle
                          4892		.vle
                          4893	
                          4894	#1956: }
                          4895	
                          4896	#1958: /***********************************************************************************************************************
                          4897	#1959:  *  FblMemEraseRegionInternal
                          4898	#1960:  **********************************************************************************************************************/
                          4899	#1961: /*! \brief      Performs erase operation in non-volatile memory
                          4900	#1962:  *  \details    All memory segments fully or partially covered by given region are affected. Gaps in the memory segment
                          4901	#1963:  *              definition are skipped.
                          4902	#1964:  *  \pre        Memory driver initialized
                          4903	#1965:  *  \param[in]  eraseAddress Start address of erase region
                          4904	#1966:  *  \param[in]  eraseLength Length of erase region
                          4905	#1967:  *  \return     Result of operation (potentially remapped to OEM specific NRC)
                          4906	#1968:  **********************************************************************************************************************/
                          4907		.align	1
                          4908		.align	1
                          4909	..gh.f.p.4.a.1.r.0.e.22:
                          4910		.type	..gh.f.p.4.a.1.r.0.e.22,@object
                          4911		.size	..gh.f.p.4.a.1.r.0.e.22,0
                          4912		.global	FblMemEraseRegionInternal..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
                          4913	FblMemEraseRegionInternal..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.:
                          4914	FblMemEraseRegionInternal:
000003f6 182106d0         4915		e_stwu	sp, -48(sp)

                                   Fri Apr 10 08:32:15 2020           Page 89
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
000003fa 0080             4916		se_mflr	r0
000003fc 1ae1090c         4917		e_stmw	r23, 12(sp)
00000400 dd01             4918		se_stw	r0, 52(sp)
                          4919	#	    .bf
                          4920	.LDW45:
                          4921	#1969: static tFblMemStatus FblMemEraseRegionInternal( tFblAddress eraseAddress, tFblLength eraseLength ) /* PRQA S 1505 */ /* MD_FblMem_1505 */
                          4922	#1970: {
                          4923	#1971:    tFblMemStatus  retVal;
                          4924	#1972:    IO_ErrorType   flashErrorCode;
                          4925	#1973:    tFblLength     eraseRemainder;
                          4926	#1974:    tFblLength     currentLength;
                          4927	#1975:    tFblLength     distance;
                          4928	#1976:    vsint16        nextMemSegment;
                          4929	#1977: #if defined( __ApplFblMemConditionCheck )
                          4930	#1978:    tFblMemStatus  customReturnCode;
                          4931	#1979: #endif /* __ApplFblMemConditionCheck */
                          4932	#1981:    retVal         = kFblMemStatus_Ok;
00000402 72e00000         4933		e_li	r23, 0
                          4934	#1983:    eraseRemainder = eraseLength;
00000406 014e             4935		se_mr	r30, r4
                          4936	#1984:    memSegment     = FblMemSegmentNrGet(eraseAddress);
00000408 013f             4937		se_mr	r31, r3
0000040a 78000001         4938		e_bl	FblMemSegmentNrGet
0000040e 7380e000         4939		e_lis	r28, %hiadj(memSegment)
00000412 1f9c0000         4940		e_add16i	r28, r28, %lo(memSegment)
00000416 7360e000         4941		e_lis	r27, %hiadj(errStatErrorCode)
                          4942	#1986:    /* Check if there is a valid block for start address */
                          4943	#1987:    if (memSegment < 0)
0000041a b03c             4944		se_sth	r3, 0(r28)
0000041c 7340e000         4945		e_lis	r26, %hiadj(errStatDescriptor)
00000420 1f7b0000         4946		e_add16i	r27, r27, %lo(errStatErrorCode)
00000424 1f5a0000         4947		e_add16i	r26, r26, %lo(errStatDescriptor)
00000428 2a03             4948		se_cmpi	r3, 0
0000042a e000             4949		se_bge	.L1378
                          4950	#1988:    {
                          4951	#1989:       FBL_MEM_SET_EXT_INFO(EraseAddress, eraseAddress);
                          4952	#line1989
                          4953	..lin.1acf134f..265000c9.0_36::
                          4954	.LDWlin36:
0000042c d2fa             4955		se_stw	r31, 8(r26)
                          4956	#1990:       FBL_MEM_SET_STATUS(EraseOutsideFbt, retVal);  /* PRQA S 3109 */ /* MD_MSR_14.3 */
                          4957	.L1389:
                          4958	#2034:             }
                          4959	#2035:             else
                          4960	#2036:             {
                          4961	#2037:                /* End of erase region lies in gap */
                          4962	#2038:                FBL_MEM_SET_STATUS(EraseOutsideFbt, retVal);  /* PRQA S 3109 */ /* MD_MSR_14.3 */
0000042e 4a30             4963		se_li	r0, 35
00000430 b00b             4964		se_sth	r0, 0(r27)
00000432 72e00031         4965		e_li	r23, 49
                          4966	#2039:                return retVal;
00000436 e800             4967		se_b	.L1452
                          4968	.L1378:
                          4969	#1991:    }
                          4970	#1992:    else
                          4971	#1993:    {

                                   Fri Apr 10 08:32:15 2020           Page 90
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          4972	#1994:       nextMemSegment = memSegment;
                          4973	#line1994
                          4974	..lin.1acf134f..265000c9.0_37::
                          4975	.LDWlin37:
00000438 013d             4976		se_mr	r29, r3
                          4977	#1996:       while (eraseRemainder > 0u)
0000043a e800             4978		se_b	.L1381
                          4979	.L1383:
                          4980	#1997:       {
                          4981	#1998:          /* Watchdog and response pending handling */
                          4982	#1999:          FblMemTriggerWatchdog();
                          4983	#line1999
                          4984	..lin.1acf134f..265000c9.0_38::
                          4985	.LDWlin38:
0000043c 78000001         4986		se_bl	FblMemTriggerWatchdog
                          4987	#2000:          /* Force response pending on first loop cycle */
                          4988	#2001:          FblMemResponsePending();
                          4989	#line2001
                          4990	..lin.1acf134f..265000c9.0_39::
                          4991	.LDWlin39:
00000440 78000001         4992		se_bl	FblMemResponsePending
                          4993	#2003:          /* Initialize error address */
                          4994	#2004:          FBL_MEM_SET_EXT_INFO(EraseAddress, eraseAddress);
                          4995	#line2004
                          4996	..lin.1acf134f..265000c9.0_40::
                          4997	.LDWlin40:
00000444 387c0000         4998		e_lha	r3, 0(r28)
                          4999	#2006: #if defined( __ApplFblMemDriverReady )
                          5000	#2007:          /* Check if required flash driver is initialized */
                          5001	#2008:          if (kFblOk != __ApplFblMemDriverReady(memSegment))
                          5002	#2009:          {
                          5003	#2010:             /* Flash driver initialization failure */
                          5004	#2011:             FBL_MEM_SET_STATUS(EraseDriverNotReady, retVal);  /* PRQA S 3109 */ /* MD_MSR_14.3 */
                          5005	#2012:             return retVal;
                          5006	#2013:          }
                          5007	#2014: #endif
                          5008	#2016:          /* Check if erase range crosses Flash block boundary */
                          5009	#2017:          currentLength = (FlashBlock[memSegment].end - eraseAddress) + 1u;
00000448 7320e000         5010		e_lis	r25, %hiadj(FlashBlock)
0000044c 1f390000         5011		e_add16i	r25, r25, %lo(FlashBlock)
00000450 18e3a00c         5012		e_mulli	r7, r3, 12
00000454 0497             5013		se_add	r7, r25
00000456 c107             5014		se_lwz	r0, 4(r7)
00000458 d2fa             5015		se_stw	r31, 8(r26)
0000045a 7f1f0050         5016		subf	r24, r31, r0
0000045e 2008             5017		se_addi	r24, 1
                          5018	#2018:          if (eraseRemainder > currentLength)
00000460 0d8e             5019		se_cmpl	r30, r24
00000462 e100             5020		se_ble	.L1384
                          5021	#2019:          {
                          5022	#2020:             nextMemSegment = memSegment + 1;
                          5023	#line2020
                          5024	..lin.1acf134f..265000c9.0_41::
                          5025	.LDWlin41:
00000464 70e0e000         5026		e_lis	r7, %hiadj(kNrOfFlashBlock)
00000468 30070000         5027		e_lbz	r0, %lo(kNrOfFlashBlock)(r7)

                                   Fri Apr 10 08:32:15 2020           Page 91
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          5028	#2022:             if (nextMemSegment >= kNrOfFlashBlock)
0000046c 1ba38001         5029		e_addi	r29, r3, 1
00000470 00fd             5030		se_extsh	r29
00000472 0c0d             5031		se_cmp	r29, r0
00000474 e000             5032		se_bge	.L1389
                          5033	#2023:             {
                          5034	#2024:                /* End of erase region lies behind defined memory */
                          5035	#2025:                FBL_MEM_SET_STATUS(EraseOutsideFbt, retVal);  /* PRQA S 3109 */ /* MD_MSR_14.3 */
                          5036	#2026:                return retVal;
                          5037	#2027:             }
                          5038	#2029:             /* Update remainder */
                          5039	#2030:             distance = FlashBlock[nextMemSegment].begin - eraseAddress;
                          5040	#line2030
                          5041	..lin.1acf134f..265000c9.0_42::
                          5042	.LDWlin42:
00000476 18fda00c         5043		e_mulli	r7, r29, 12
0000047a 7c07c82e         5044		lwzx	r0, r7, r25
0000047e 06f0             5045		se_sub	r0, r31
                          5046	#2031:             if (distance <= eraseRemainder)
00000480 0de0             5047		se_cmpl	r0, r30
00000482 e500             5048		se_bgt	.L1389
                          5049	#2032:             {
                          5050	#2033:                eraseRemainder -= distance;
                          5051	#line2033
                          5052	..lin.1acf134f..265000c9.0_43::
                          5053	.LDWlin43:
00000484 060e             5054		se_sub	r30, r0
00000486 e800             5055		se_b	.L1393
                          5056	.L1384:
                          5057	#2040:             }
                          5058	#2041:          }
                          5059	#2042:          else
                          5060	#2043:          {
                          5061	#2044:             currentLength = eraseRemainder;
                          5062	#line2044
                          5063	..lin.1acf134f..265000c9.0_44::
                          5064	.LDWlin44:
00000488 01e8             5065		se_mr	r24, r30
                          5066	#2045:             eraseRemainder = 0u;
0000048a 480e             5067		se_li	r30, 0
                          5068	.L1393:
                          5069	#2046:          }
                          5070	#2048: #if defined( __ApplFblMemConditionCheck )
                          5071	#2049:          /* Check conditions before executing memory operation */
                          5072	#2050:          customReturnCode = __ApplFblMemConditionCheck();
                          5073	#2052:          if (kFblMemStatus_Ok != customReturnCode)
                          5074	#2053:          {
                          5075	#2054:             retVal = customReturnCode;
                          5076	#2055:             return retVal;
                          5077	#2056:          }
                          5078	#2057: #endif /* __ApplFblMemConditionCheck */
                          5079	#2058: #if defined( __ApplFblMemPreErase )
                          5080	#2059:          /* Perform actions directly before memory driver erase */
                          5081	#2060:          if (kFblOk != __ApplFblMemPreErase())
0000048c 78000001         5082		e_bl	FblDiagMemPreWrite
00000490 2a03             5083		se_cmpi	r3, 0

                                   Fri Apr 10 08:32:15 2020           Page 92
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
00000492 e200             5084		se_bne	.L1398
                          5085	#2061:          {
                          5086	#2062:             FBL_MEM_SET_STATUS(ErasePreErase, retVal); /* PRQA S 3109 */ /* MD_MSR_14.3 */
                          5087	#2063:             return retVal;
                          5088	#2064:          }
                          5089	#2065: #endif /* __ApplFblMemPreErase */
                          5090	#2067:          flashErrorCode = MemDriver_REraseSync(currentLength, eraseAddress);
                          5091	#line2067
                          5092	..lin.1acf134f..265000c9.0_45::
                          5093	.LDWlin45:
00000494 0183             5094		se_mr	r3, r24
00000496 01f4             5095		se_mr	r4, r31
00000498 78000001         5096		e_bl	MemDriver_REraseSync
0000049c 013f             5097		se_mr	r31, r3
                          5098	#2069: #if defined( __ApplFblMemPostErase )
                          5099	#2070:          /* Perform actions directly after memory driver erase */
                          5100	#2071:          if (kFblOk != __ApplFblMemPostErase())
0000049e 78000001         5101		e_bl	FblDiagMemPostWrite
000004a2 2a03             5102		se_cmpi	r3, 0
000004a4 e600             5103		se_beq	.L1397
                          5104	.L1398:
                          5105	#2072:          {
                          5106	#2073:             FBL_MEM_SET_STATUS(ErasePostErase, retVal);   /* PRQA S 3109 */ /* MD_MSR_14.3 */
                          5107	#line2073
                          5108	..lin.1acf134f..265000c9.0_46::
                          5109	.LDWlin46:
000004a6 72e00022         5110		e_li	r23, 34
                          5111	#2074:             return retVal;
000004aa e800             5112		se_b	.L1452
                          5113	.L1397:
                          5114	#2075:          }
                          5115	#2076: #endif /* __ApplFblMemPostErase */
                          5116	#2077: #if defined( __ApplFblMemConditionCheck )
                          5117	#2078:          /* Check conditions after executing memory operation */
                          5118	#2079:          customReturnCode = __ApplFblMemConditionCheck();
                          5119	#2081:          if (kFblMemStatus_Ok != customReturnCode)
                          5120	#2082:          {
                          5121	#2083:             retVal = customReturnCode;
                          5122	#2084:             return retVal;
                          5123	#2085:          }
                          5124	#2086: #endif /* __ApplFblMemConditionCheck */
                          5125	#2088:          if (IO_E_OK != flashErrorCode)
                          5126	#line2088
                          5127	..lin.1acf134f..265000c9.0_47::
                          5128	.LDWlin47:
000004ac 2a0f             5129		se_cmpi	r31, 0
000004ae e600             5130		se_beq	.L1400
                          5131	#2089:          {
                          5132	#2090:             /* Error while erasing */
                          5133	#2091:             FBL_MEM_SET_EXT_STATUS(DriverErase, flashErrorCode, retVal);   /* PRQA S 3109 */ /* MD_MSR_14.3 */
                          5134	#line2091
                          5135	..lin.1acf134f..265000c9.0_48::
                          5136	.LDWlin48:
000004b0 70e0e000         5137		e_lis	r7, %hiadj(errStatFlashDrvErrorCode)
000004b4 4900             5138		se_li	r0, 16
000004b6 5fe70000         5139		e_sth	r31, %lo(errStatFlashDrvErrorCode)(r7)

                                   Fri Apr 10 08:32:15 2020           Page 93
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
000004ba b00b             5140		se_sth	r0, 0(r27)
000004bc 72e00072         5141		e_li	r23, 114
                          5142	#2092:             return retVal;
000004c0 e800             5143		se_b	.L1452
                          5144	.L1400:
                          5145	#2093:          }
                          5146	#2095: #if defined( FBL_MEM_ENABLE_PROGRESS_INFO )
                          5147	#2096:          /* Only report progress when explicitly enabled */
                          5148	#2097:          if (kFblMemProgressState_Enabled == gProgressState)
                          5149	#2098:          {
                          5150	#2099:             FblMemUpdateProgress(eraseRemainder);
                          5151	#2100:          }
                          5152	#2101: #endif /* FBL_MEM_ENABLE_PROGRESS_INFO */
                          5153	#2103:          /* Continue with next segment */
                          5154	#2104:          memSegment = nextMemSegment;
                          5155	#line2104
                          5156	..lin.1acf134f..265000c9.0_49::
                          5157	.LDWlin49:
000004c2 18fda00c         5158		e_mulli	r7, r29, 12
                          5159	#2105:          eraseAddress = FlashBlock[memSegment].begin;
000004c6 7fe7c82e         5160		lwzx	r31, r7, r25
000004ca b0dc             5161		se_sth	r29, 0(r28)
                          5162	.L1381:
000004cc 2a0e             5163		se_cmpi	r30, 0
000004ce e200             5164		se_bne	.L1383
                          5165	.L1452:
                          5166	#2106:       }
                          5167	#2107:    }
                          5168	#2109:    return retVal;
                          5169	#line2104
                          5170	..lin.1acf134f..265000c9.0_50::
                          5171	.LDWlin50:
000004d0 03f3             5172		se_mfar	r3, r23
                          5173	#	    .ef
                          5174	.LDW55:
000004d2 cd01             5175		se_lwz	r0, 52(sp)
000004d4 1ae1080c         5176		e_lmw	r23, 12(sp)
000004d8 18218030         5177		e_addi	sp, sp, 48
000004dc 0090             5178		se_mtlr	r0
000004de 0004             5179		se_blr
                          5180	__ghs_eofn_FblMemEraseRegionInternal:
                          5181		.type	FblMemEraseRegionInternal,@function
                          5182		.size	FblMemEraseRegionInternal,$-FblMemEraseRegionInternal
                          5183		.type	FblMemEraseRegionInternal..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.,@function
                          5184		.size	FblMemEraseRegionInternal..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.,$-FblMemEraseRegionInternal..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
                          5185		.align	1
                          5186	
                          5187	#function:			FblMemEraseRegionInternal
                          5188	#stack frame size:		48
                          5189	#link area offset:		0
                          5190	#local storage area offset:	12
                          5191	#gpr save area offset:		12
                          5192	#
                          5193	#retVal	r23	local
                          5194	#flashErrorCode	r31	local
                          5195	#eraseRemainder	r30	local

                                   Fri Apr 10 08:32:15 2020           Page 94
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          5196	#currentLength	r24	local
                          5197	#distance	r0	local
                          5198	#nextMemSegment	r29	local
                          5199	
                          5200	#eraseAddress	r31	param
                          5201	#eraseLength	r4	param
                          5202	
                          5203		.data
                          5204		.section ".vletext", "vax"
                          5205		.vle
                          5206		.vle
                          5207	
                          5208	#2110: }  /* PRQA S 2006 */ /* MD_MSR_14.7 */
                          5209	
                          5210	#2112: /***********************************************************************************************************************
                          5211	#2113:  *  FblMemProgramBufferInternal
                          5212	#2114:  **********************************************************************************************************************/
                          5213	#2115: /*! \brief         Performs program operation to non-volatile memory
                          5214	#2116:  *  \details       If the length is not aligned to the segment size the odd bytes are padded with the configured fill
                          5215	#2117:  *                 character.
                          5216	#2118:  *                 Programming may be suspended by an external event. In this case parameter programLength will be
                          5217	#2119:  *                 updated to reflect the length actually programmed
                          5218	#2120:  *                 In case resumable programming is active, crossing a flash block boundary leads to the setting
                          5219	#2121:  *                 of the programming state to the passed value.
                          5220	#2122:  *  \pre           Memory driver initialized, address aligned to memory segment size
                          5221	#2123:  *  \param[in]     programAddress Program address
                          5222	#2124:  *  \param[in,out] programLength Length of data (output: length actually programmed)
                          5223	#2125:  *  \param[in,out] programData Pointer to program data (contents are padded in case length is not aligned to memory
                          5224	#2126:  *                  segment size!)
                          5225	#2127:  *  \param[in]     checkPointState Programming state value to be set in case a checkpoint is reached
                          5226	#2128:  *                  Typical values are either kFblMemProgState_Checkpoint (suspend programming and indicate checkpoint)
                          5227	#2129:  *                  or kFblMemProgState_Pending (continue programming)
                          5228	#2130:  *
                          5229	#2131:  *  \return        Result of operation (potentially remapped to OEM specific NRC)
                          5230	#2132:  **********************************************************************************************************************/
                          5231		.align	1
                          5232		.align	1
                          5233	..gh.f.p.6.a.1.r.0.e.23:
                          5234		.type	..gh.f.p.6.a.1.r.0.e.23,@object
                          5235		.size	..gh.f.p.6.a.1.r.0.e.23,0
                          5236		.global	FblMemProgramBufferInternal..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
                          5237	FblMemProgramBufferInternal..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.:
                          5238	FblMemProgramBufferInternal:
000004e0 182106d0         5239		e_stwu	sp, -48(sp)
000004e4 0080             5240		se_mflr	r0
000004e6 1ac10908         5241		e_stmw	r22, 8(sp)
000004ea dd01             5242		se_stw	r0, 52(sp)
000004ec 013e             5243		se_mr	r30, r3
000004ee 014c             5244		se_mr	r28, r4
000004f0 0159             5245		se_mr	r25, r5
                          5246	#	    .bf
                          5247	.LDW65:
                          5248	#2133: static tFblMemStatus FblMemProgramBufferInternal( tFblAddress programAddress, /* PRQA S 1505 */ /* MD_FblMem_1505 */
                          5249	#2134:    V_MEMRAM1 tFblLength V_MEMRAM2 V_MEMRAM3 * programLength, tFblMemRamData programData, tFblMemProgState checkPointState )
                          5250	#2135: {
                          5251	#2136:    tFblMemStatus     retVal;

                                   Fri Apr 10 08:32:15 2020           Page 95
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          5252	#2137:    tFblLength        currentLength;
                          5253	#2138:    tFblLength        localLength;
                          5254	#2139:    tFblLength        segLength;
                          5255	#2140:    tFblLength        padLength;
                          5256	#2141:    tFblLength        bufferIndex;
                          5257	#2142:    tFblLength        padOffset;
                          5258	#2143:    IO_ErrorType      flashErrorCode;
                          5259	#2144: #if defined( __ApplFblMemConditionCheck )
                          5260	#2145:    tFblMemStatus     customReturnCode;
                          5261	#2146: #endif /* __ApplFblMemConditionCheck */
                          5262	#2148: #if defined( V_ENABLE_USE_DUMMY_STATEMENT )
                          5263	#2149:    /* Parameters not used: avoid compiler warning */
                          5264	#2150:    (void)checkPointState; /* PRQA S 3112 */ /* MD_FblMem_3112 */
                          5265	#2151: #endif /* V_ENABLE_USE_DUMMY_STATEMENT */
                          5266	#2153:    retVal      = kFblMemStatus_Ok;
000004f2 72e00000         5267		e_li	r23, 0
                          5268	#2154:    padLength   = 0u;                                     /* PRQA S 3198 */ /* MD_FblMem_3198 */
000004f6 7ef6bb78         5269		mr	r22, r23
                          5270	#2155:    padOffset   = 0u;                                     /* PRQA S 3198 */ /* MD_FblMem_3198 */
                          5271	#2157:    /* Copy requested length to local variable */
                          5272	#2158:    localLength    = *programLength;
000004fa c0d4             5273		se_lwz	r29, 0(r4)
                          5274	#2159:    /* Start at beginning of buffer */
                          5275	#2160:    bufferIndex    = 0u;
000004fc 03eb             5276		se_mfar	r27, r22
                          5277	#2162:    /* Loop while data left and operation not suspended by external event */
                          5278	#2163:    while ((localLength > 0u) && (kFblMemProgState_Pending == fblMemProgState))
000004fe e800             5279		se_b	.L1643
                          5280	.L1645:
                          5281	#2164:    {
                          5282	#2165:       /* Watchdog and response pending handling */
                          5283	#2166:       FblMemTriggerWatchdog();
                          5284	#line2166
                          5285	..lin.1acf134f..d0d34567.0_51::
                          5286	.LDWlin51:
00000500 78000001         5287		se_bl	FblMemTriggerWatchdog
                          5288	#2167: #if defined( FBL_ENABLE_ADAPTIVE_DATA_TRANSFER_RCRRP )
                          5289	#2168:       /* Disable forced RCR-RP for adaptive mode */
                          5290	#2169: #else
                          5291	#2170:       /* Force response pending on first loop cycle */
                          5292	#2171:       FblMemResponsePending();
                          5293	#line2171
                          5294	..lin.1acf134f..d0d34567.0_52::
                          5295	.LDWlin52:
00000504 78000001         5296		se_bl	FblMemResponsePending
                          5297	#2172: #endif /* FBL_ENABLE_ADAPTIVE_DATA_TRANSFER_RCRRP */
                          5298	#2174:       /* Initialize error address */
                          5299	#2175:       FBL_MEM_SET_EXT_INFO(ProgramAddress, programAddress);
                          5300	#line2175
                          5301	..lin.1acf134f..d0d34567.0_53::
                          5302	.LDWlin53:
00000508 70e0e000         5303		e_lis	r7, %hiadj(errStatDescriptor+8)
0000050c 57c70000         5304		e_stw	r30, %lo(errStatDescriptor+8)(r7)
                          5305	#2177:       /* Length to be programmed in current loop cycle */
                          5306	#2178:       currentLength = localLength;
                          5307	#2179:       /* Evaluate memory segment */

                                   Fri Apr 10 08:32:15 2020           Page 96
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          5308	#2180:       memSegment    = FblMemSegmentNrGet(programAddress);
00000510 01e3             5309		se_mr	r3, r30
00000512 78000001         5310		e_bl	FblMemSegmentNrGet
00000516 70e0e000         5311		e_lis	r7, %hiadj(memSegment)
0000051a 7340e000         5312		e_lis	r26, %hiadj(errStatErrorCode)
                          5313	#2182:       /* Check if segment was found */
                          5314	#2183:       if (memSegment < 0)
0000051e 5c670000         5315		e_sth	r3, %lo(memSegment)(r7)
00000522 1f5a0000         5316		e_add16i	r26, r26, %lo(errStatErrorCode)
00000526 2a03             5317		se_cmpi	r3, 0
00000528 e000             5318		se_bge	.L1646
                          5319	#2184:       {
                          5320	#2185:          FBL_MEM_SET_STATUS(ProgramOutsideFbt, retVal);  /* PRQA S 3109 */ /* MD_MSR_14.3 */
                          5321	#line2185
                          5322	..lin.1acf134f..d0d34567.0_54::
                          5323	.LDWlin54:
0000052a 4a30             5324		se_li	r0, 35
0000052c b00a             5325		se_sth	r0, 0(r26)
0000052e 72e00071         5326		e_li	r23, 113
                          5327	#2186:          return retVal;
00000532 e800             5328		se_b	.L1730
                          5329	.L1646:
                          5330	#2187:       }
                          5331	#2189: #if defined( __ApplFblMemDriverReady )
                          5332	#2190:       /* Check if required flash driver is initialized */
                          5333	#2191:       if (kFblOk != __ApplFblMemDriverReady(memSegment))
                          5334	#2192:       {
                          5335	#2193:          /* Flash driver initialization failure */
                          5336	#2194:          FBL_MEM_SET_STATUS(ProgramDriverNotReady, retVal);  /* PRQA S 3109 */ /* MD_MSR_14.3 */
                          5337	#2195:          return retVal;
                          5338	#2196:       }
                          5339	#2197: #endif
                          5340	#2199:       /* Check if address is aligned to memory segment size */
                          5341	#2200:       if (0u != (programAddress & ((tFblAddress)MemDriver_SegmentSize - 1u)))
                          5342	#line2200
                          5343	..lin.1acf134f..d0d34567.0_55::
                          5344	.LDWlin55:
00000534 18e3a00c         5345		e_mulli	r7, r3, 12
00000538 1ce70000         5346		e_add16i	r7, r7, %lo(FlashBlock)
0000053c 70079000         5347		e_add2is	r7, %hiadj(FlashBlock)
00000540 8807             5348		se_lbz	r0, 8(r7)
00000542 1800a018         5349		e_mulli	r0, r0, 24
00000546 1cc00014         5350		e_add16i	r6, r0, %lo(memDrvLst+20)
0000054a 70069000         5351		e_add2is	r6, %hiadj(memDrvLst+20)
0000054e a006             5352		se_lhz	r0, 0(r6)
00000550 2400             5353		se_subi	r0, 1
00000552 47e0             5354		se_and.	r0, r30
00000554 e200             5355		se_bne	.L1944
                          5356	#2201:       {
                          5357	#2202:          FBL_MEM_SET_STATUS(ProgramUnalignedAddress, retVal);  /* PRQA S 3109 */ /* MD_MSR_14.3 */
                          5358	#2203:          return retVal;
                          5359	.L1649:
                          5360	#2204:       }
                          5361	#2206:       /* Remaining length until end of current segment */
                          5362	#2207:       segLength = (FlashBlock[memSegment].end - programAddress) + 1u;
                          5363	#line2207

                                   Fri Apr 10 08:32:15 2020           Page 97
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          5364	..lin.1acf134f..d0d34567.0_56::
                          5365	.LDWlin56:
00000556 c1f7             5366		se_lwz	r31, 4(r7)
00000558 06ef             5367		se_sub	r31, r30
0000055a 200f             5368		se_addi	r31, 1
                          5369	#2209:       /* Download memory overlaps segment: adjust to current segment */
                          5370	#2210:       if (segLength < currentLength)
0000055c 0ddf             5371		se_cmpl	r31, r29
0000055e e400             5372		se_blt	.L1654
                          5373	#2214:       }
                          5374	#2215:       else
                          5375	#2216:       {
                          5376	#2217:          /* Offset to last byte of actual data */
                          5377	#2218:          padOffset   = bufferIndex + (currentLength - 1u);
                          5378	#2220:          /* Pad buffer to memory segment */
                          5379	#2221:          padLength = FblMemPadBuffer(programAddress, currentLength, &programData[padOffset]);
                          5380	#line2221
                          5381	..lin.1acf134f..d0d34567.0_57::
                          5382	.LDWlin57:
00000560 7cbbea14         5383		add	r5, r27, r29
00000564 01e3             5384		se_mr	r3, r30
00000566 2405             5385		se_subi	r5, 1
00000568 01d4             5386		se_mr	r4, r29
0000056a 0495             5387		se_add	r5, r25
0000056c 78000001         5388		se_bl	FblMemPadBuffer
00000570 7ffd1a14         5389		add	r31, r29, r3
                          5390	#2222:          currentLength += padLength;
                          5391	#line2222
                          5392	..lin.1acf134f..d0d34567.0_58::
                          5393	.LDWlin58:
00000574 023e             5394		se_mtar	r22, r3
                          5395	#2211:       {
                          5396	#2212:          /* Adapt currentLength to segment programming size */
                          5397	#2213:          currentLength = segLength;
                          5398	.L1654:
                          5399	#2223:       }
                          5400	#2225: #if defined( __ApplFblMemConditionCheck )
                          5401	#2226:       /* Check conditions before executing memory operation */
                          5402	#2227:       customReturnCode = __ApplFblMemConditionCheck();
                          5403	#2229:       if (kFblMemStatus_Ok != customReturnCode)
                          5404	#2230:       {
                          5405	#2231:          retVal = customReturnCode;
                          5406	#2232:          return retVal;
                          5407	#2233:       }
                          5408	#2234: #endif /* __ApplFblMemConditionCheck */
                          5409	#2235: #if defined( __ApplFblMemPreWrite )
                          5410	#2236:       /* Perform actions directly before memory driver write */
                          5411	#2237:       if (kFblOk != __ApplFblMemPreWrite())
00000576 78000001         5412		e_bl	FblDiagMemPreWrite
0000057a 2a03             5413		se_cmpi	r3, 0
0000057c e200             5414		se_bne	.L1945
                          5415	#2238:       {
                          5416	#2239:          FBL_MEM_SET_STATUS(ProgramPreWrite, retVal); /* PRQA S 3109 */ /* MD_MSR_14.3 */
                          5417	#2240:          return retVal;
                          5418	#2241:       }
                          5419	#2242: #endif /* __ApplFblMemPreWrite */

                                   Fri Apr 10 08:32:15 2020           Page 98
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          5420	#2244:       /* Pass programming request to memory driver */
                          5421	#2245:       flashErrorCode = MemDriver_RWriteSync(&programData[bufferIndex], currentLength, programAddress);
                          5422	#line2245
                          5423	..lin.1acf134f..d0d34567.0_59::
                          5424	.LDWlin59:
0000057e 7c79da14         5425		add	r3, r25, r27
00000582 01f4             5426		se_mr	r4, r31
00000584 01e5             5427		se_mr	r5, r30
00000586 78000001         5428		e_bl	MemDriver_RWriteSync
0000058a 0138             5429		se_mr	r24, r3
                          5430	#2247: #if defined( FBL_MEM_ENABLE_SEGMENTED_INPUT_BUFFER )
                          5431	#2248:       /* Restore original data, overwritten by padding */
                          5432	#2249:       FblMemUnpadBuffer(&programData[padOffset], padLength);
                          5433	#2250: #endif /* FBL_MEM_ENABLE_SEGMENTED_INPUT_BUFFER */
                          5434	#2252: #if defined( __ApplFblMemPostWrite )
                          5435	#2253:       /* Perform actions directly after memory driver write */
                          5436	#2254:       if (kFblOk != __ApplFblMemPostWrite())
0000058c 78000001         5437		e_bl	FblDiagMemPostWrite
00000590 2a03             5438		se_cmpi	r3, 0
00000592 e200             5439		se_bne	.L1945
                          5440	#2255:       {
                          5441	#2256:          FBL_MEM_SET_STATUS(ProgramPostWrite, retVal);   /* PRQA S 3109 */ /* MD_MSR_14.3 */
                          5442	#2257:          return retVal;
                          5443	.L1658:
                          5444	#2258:       }
                          5445	#2259: #endif /* __ApplFblMemPostWrite */
                          5446	#2260: #if defined( __ApplFblMemConditionCheck )
                          5447	#2261:       /* Check conditions after executing memory operation */
                          5448	#2262:       customReturnCode = __ApplFblMemConditionCheck();
                          5449	#2264:       if (kFblMemStatus_Ok != customReturnCode)
                          5450	#2265:       {
                          5451	#2266:          retVal = customReturnCode;
                          5452	#2267:          return retVal;
                          5453	#2268:       }
                          5454	#2269: #endif /* __ApplFblMemConditionCheck */
                          5455	#2271:       /* Check result of programming operation */
                          5456	#2272:       if (IO_E_OK != flashErrorCode)
                          5457	#line2272
                          5458	..lin.1acf134f..d0d34567.0_60::
                          5459	.LDWlin60:
00000594 2a08             5460		se_cmpi	r24, 0
00000596 e600             5461		se_beq	.L1661
                          5462	.L1662:
                          5463	#2273:       {
                          5464	#2274:          FBL_MEM_SET_EXT_STATUS(DriverWrite, flashErrorCode, retVal);   /* PRQA S 3109 */ /* MD_MSR_14.3 */
                          5465	#line2274
                          5466	..lin.1acf134f..d0d34567.0_61::
                          5467	.LDWlin61:
00000598 70e0e000         5468		e_lis	r7, %hiadj(errStatFlashDrvErrorCode)
0000059c 5f070000         5469		e_sth	r24, %lo(errStatFlashDrvErrorCode)(r7)
                          5470	.L1944:
000005a0 4910             5471		se_li	r0, 17
000005a2 b00a             5472		se_sth	r0, 0(r26)
                          5473	.L1945:
000005a4 72e00072         5474		e_li	r23, 114
                          5475	#2275:          return retVal;

                                   Fri Apr 10 08:32:15 2020           Page 99
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
000005a8 e800             5476		se_b	.L1730
                          5477	.L1664:
                          5478	#2287:       }
                          5479	#2288:       else
                          5480	#2289:       {
                          5481	#2290:          /* Lengths should be exactly the same here */
                          5482	#2291:          assertFblInternal(((currentLength - padLength) == localLength), kFblMemAssertParameterOutOfRange); /* PRQA S 2214 */ /* MD_FblDef_Assert */
                          5483	#line2291
                          5484	..lin.1acf134f..d0d34567.0_62::
                          5485	.LDWlin62:
000005aa 7c16f850         5486		subf	r0, r22, r31
000005ae 0dd0             5487		se_cmpl	r0, r29
000005b0 e600             5488		se_beq	.L1667
000005b2 4813             5489		se_li	r3, 1
000005b4 78000001         5490		e_bl	ApplFblFatalError
                          5491	.L1667:
                          5492	#2293:          /* Buffer completely processed */
                          5493	#2294:          localLength = 0u;
                          5494	#line2294
                          5495	..lin.1acf134f..d0d34567.0_63::
                          5496	.LDWlin63:
000005b8 480d             5497		se_li	r29, 0
000005ba e800             5498		se_b	.L1644
                          5499	.L1661:
                          5500	#2276:       }
                          5501	#2279:       /* Update address for next cycle */
                          5502	#2280:       programAddress += (tFblAddress)currentLength;
                          5503	#line2280
                          5504	..lin.1acf134f..d0d34567.0_64::
                          5505	.LDWlin64:
000005bc 04fe             5506		se_add	r30, r31
                          5507	#2282:       if (localLength > currentLength)
000005be 0dfd             5508		se_cmpl	r29, r31
000005c0 e100             5509		se_ble	.L1664
                          5510	#2283:       {
                          5511	#2284:          /* Prepare buffer index for next loop */
                          5512	#2285:          bufferIndex += currentLength;
                          5513	#line2285
                          5514	..lin.1acf134f..d0d34567.0_65::
                          5515	.LDWlin65:
000005c2 06fd             5516		se_sub	r29, r31
                          5517	#2286:          localLength -= currentLength;
000005c4 04fb             5518		se_add	r27, r31
                          5519	.L1643:
000005c6 2a0d             5520		se_cmpi	r29, 0
000005c8 e600             5521		se_beq	.L1644
000005ca 70e0e000         5522		e_lis	r7, %hiadj(fblMemProgState)
000005ce 50e70000         5523		e_lwz	r7, %lo(fblMemProgState)(r7)
000005d2 2a57             5524		se_cmpi	r7, 5
000005d4 e600             5525		se_beq	.L1645
                          5526	.L1644:
                          5527	#2295:       }
                          5528	#2297:    }
                          5529	#2299:    /* Return length actually written (without padding) */
                          5530	#2300:    *programLength -= localLength;
                          5531	#line2300

                                   Fri Apr 10 08:32:15 2020           Page 100
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          5532	..lin.1acf134f..d0d34567.0_66::
                          5533	.LDWlin66:
000005d6 c00c             5534		se_lwz	r0, 0(r28)
000005d8 06d0             5535		se_sub	r0, r29
000005da d00c             5536		se_stw	r0, 0(r28)
                          5537	#2302:    return retVal;
                          5538	.L1730:
000005dc 03f3             5539		se_mfar	r3, r23
                          5540	#	    .ef
                          5541	.LDW75:
000005de cd01             5542		se_lwz	r0, 52(sp)
000005e0 1ac10808         5543		e_lmw	r22, 8(sp)
000005e4 18218030         5544		e_addi	sp, sp, 48
000005e8 0090             5545		se_mtlr	r0
000005ea 0004             5546		se_blr
                          5547	__ghs_eofn_FblMemProgramBufferInternal:
                          5548		.type	FblMemProgramBufferInternal,@function
                          5549		.size	FblMemProgramBufferInternal,$-FblMemProgramBufferInternal
                          5550		.type	FblMemProgramBufferInternal..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.,@function
                          5551		.size	FblMemProgramBufferInternal..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.,$-FblMemProgramBufferInternal..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
                          5552		.align	1
                          5553	
                          5554	#function:			FblMemProgramBufferInternal
                          5555	#stack frame size:		48
                          5556	#link area offset:		0
                          5557	#local storage area offset:	8
                          5558	#gpr save area offset:		8
                          5559	#
                          5560	#retVal	r23	local
                          5561	#currentLength	r31	local
                          5562	#localLength	r29	local
                          5563	#segLength	r0	local
                          5564	#padLength	r22	local
                          5565	#bufferIndex	r27	local
                          5566	#flashErrorCode	r24	local
                          5567	
                          5568	#programAddress	r30	param
                          5569	#programLength	r28	param
                          5570	#programData	r25	param
                          5571	#checkPointState	none	param
                          5572	
                          5573		.data
                          5574		.section ".vletext", "vax"
                          5575		.vle
                          5576		.vle
                          5577	
                          5578	#2303: } /* PRQA S 6080, 6050, 2006 */ /* MD_MSR_STMIF, MD_MSR_14.7 */
                          5579	
                          5580	#2305: # if defined( FBL_ENABLE_MULTIPLE_MEM_DEVICES ) && \
                          5581	#2306:      defined( FBL_MEM_ENABLE_REMAINDER_HANDLING )
                          5582	#2307: /***********************************************************************************************************************
                          5583	#2308:  *  FblMemGetSpecificRemainder
                          5584	#2309:  **********************************************************************************************************************/
                          5585	#2310: /*! \brief      Calculate remainder of given range specific for affected memory device
                          5586	#2311:  *  \param[in]  address Start address of memory range
                          5587	#2312:  *  \param[in]  length Length of memory range

                                   Fri Apr 10 08:32:15 2020           Page 101
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          5588	#2313:  *  \return     Remainder to full memory segment in byte
                          5589	#2314:  **********************************************************************************************************************/
                          5590		.align	1
                          5591		.align	1
                          5592	..gh.f.p.4.a.1.r.0.e.24:
                          5593		.type	..gh.f.p.4.a.1.r.0.e.24,@object
                          5594		.size	..gh.f.p.4.a.1.r.0.e.24,0
                          5595		.global	FblMemGetSpecificRemainder..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
                          5596	FblMemGetSpecificRemainder..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.:
                          5597	FblMemGetSpecificRemainder:
000005ec 182106e0         5598		e_stwu	sp, -32(sp)
000005f0 0080             5599		se_mflr	r0
000005f2 1b61090c         5600		e_stmw	r27, 12(sp)
000005f6 d901             5601		se_stw	r0, 36(sp)
000005f8 014e             5602		se_mr	r30, r4
                          5603	#	    .bf
                          5604	.LDW85:
                          5605	#2315: static tFblLength FblMemGetSpecificRemainder( tFblAddress address, tFblLength length )
                          5606	#2316: {
                          5607	#2317:    tFblLength  remainder;
                          5608	#2318:    vsint16     tempSegment;
                          5609	#2320:    /* Initialize remainder */
                          5610	#2321:    remainder = 0u;
000005fa 7380e000         5611		e_lis	r28, %hiadj(memSegment)
                          5612	#2323:    /* Re-evaluate memory segment */
                          5613	#2324:    tempSegment = memSegment;
000005fe 1f9c0000         5614		e_add16i	r28, r28, %lo(memSegment)
00000602 480d             5615		se_li	r29, 0
00000604 a0bc             5616		se_lhz	r27, 0(r28)
                          5617	#2325:    memSegment = FblMemSegmentNrGet(address);
00000606 013f             5618		se_mr	r31, r3
00000608 78000001         5619		e_bl	FblMemSegmentNrGet
                          5620	#2327:    if (memSegment >= 0)
0000060c 2a03             5621		se_cmpi	r3, 0
0000060e e400             5622		se_blt	.L1948
                          5623	#2328:    {
                          5624	#2329:       /* Calculate remainder */
                          5625	#2330:       remainder = FblMemGetRemainder(address, length, MemDriver_SegmentSize);
                          5626	#line2330
                          5627	..lin.1acf134f..7088c075.0_67::
                          5628	.LDWlin67:
00000610 1803a00c         5629		e_mulli	r0, r3, 12
00000614 1ce00008         5630		e_add16i	r7, r0, %lo(FlashBlock+8)
00000618 70079000         5631		e_add2is	r7, %hiadj(FlashBlock+8)
0000061c 8007             5632		se_lbz	r0, 0(r7)
0000061e 1800a018         5633		e_mulli	r0, r0, 24
00000622 1cc00014         5634		e_add16i	r6, r0, %lo(memDrvLst+20)
00000626 70069000         5635		e_add2is	r6, %hiadj(memDrvLst+20)
0000062a a0d6             5636		se_lhz	r29, 0(r6)
0000062c 04ef             5637		se_add	r31, r30
0000062e 240d             5638		se_subi	r29, 1
00000630 46fd             5639		se_and	r29, r31
                          5640	.L1948:
                          5641	#2331:    }
                          5642	#2333:    /* Restore previous memory segment value */
                          5643	#2334:    memSegment = tempSegment;

                                   Fri Apr 10 08:32:15 2020           Page 102
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
00000632 b0bc             5644		se_sth	r27, 0(r28)
                          5645	#2336:    return remainder;
00000634 01d3             5646		se_mr	r3, r29
                          5647	#	    .ef
                          5648	.LDW95:
00000636 c901             5649		se_lwz	r0, 36(sp)
00000638 1b61080c         5650		e_lmw	r27, 12(sp)
0000063c 21f1             5651		se_addi	sp, 32
0000063e 0090             5652		se_mtlr	r0
00000640 0004             5653		se_blr
                          5654	__ghs_eofn_FblMemGetSpecificRemainder:
                          5655		.type	FblMemGetSpecificRemainder,@function
                          5656		.size	FblMemGetSpecificRemainder,$-FblMemGetSpecificRemainder
                          5657		.type	FblMemGetSpecificRemainder..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.,@function
                          5658		.size	FblMemGetSpecificRemainder..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.,$-FblMemGetSpecificRemainder..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
                          5659		.align	1
                          5660	
                          5661	#function:			FblMemGetSpecificRemainder
                          5662	#stack frame size:		32
                          5663	#link area offset:		0
                          5664	#local storage area offset:	12
                          5665	#gpr save area offset:		12
                          5666	#
                          5667	#remainder	r29	local
                          5668	#tempSegment	r27	local
                          5669	
                          5670	#address	r31	param
                          5671	#length	r30	param
                          5672	
                          5673		.data
                          5674		.section ".vletext", "vax"
                          5675		.vle
                          5676		.vle
                          5677	
                          5678	#2337: }
                          5679	
                          5680	#2338: # endif /* FBL_ENABLE_MULTIPLE_MEM_DEVICES && FBL_MEM_ENABLE_REMAINDER_HANDLING */
                          5681	#2340: #if defined( FBL_MEM_ENABLE_SEGMENTED_INPUT_BUFFER )
                          5682	#2341: /***********************************************************************************************************************
                          5683	#2342:  *  FblMemRelocateBufferOffset
                          5684	#2343:  **********************************************************************************************************************/
                          5685	#2344: /*! \brief         Verify provided buffer lies within range of existing buffer and relocate offset accordingly
                          5686	#2345:  *  \details       Provided buffer has to reside completely in existing buffer
                          5687	#2346:  *  \param[in,out] activeJob Information of buffer to be updated
                          5688	#2347:  *  \param[in]     buffer Pointer to provided buffer
                          5689	#2348:  *  \param[in]     offset Offset index into provided buffer
                          5690	#2349:  *  \param[in]     length Length of data in provided buffer
                          5691	#2350:  *  \return        kFblMemStatus_Ok if requested buffer lies inside provided information and offset could be relocated,
                          5692	#2351:  *                 kFblMemStatus_Failed otherwise
                          5693	#2352:  **********************************************************************************************************************/
                          5694	#2353: static tFblMemStatus FblMemRelocateBufferOffset( V_MEMRAM1 tFblMemJob V_MEMRAM2 V_MEMRAM3 * activeJob,
                          5695	#2354:    tFblMemConstRamData buffer, tFblLength offset, tFblLength length )
                          5696	#2355: {
                          5697	#2356:    tFblMemStatus  retVal;
                          5698	#2357:    tFblMemRamData activeBuffer;
                          5699	#2358:    tFblLength activeOffset;

                                   Fri Apr 10 08:32:15 2020           Page 103
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          5700	#2360:    retVal         = kFblMemStatus_Failed;
                          5701	#2361:    activeBuffer   = activeJob->buffer;
                          5702	#2363:    /* Provided buffer has to reside in raw input buffer */
                          5703	#2364:    if (buffer >= activeBuffer)
                          5704	#2365:    {
                          5705	#2366:       activeOffset = (tFblLength)(buffer - activeBuffer); /* PRQA S 0488 */ /* MD_FblMem_0488 */
                          5706	#2368:       /* Provided data has to lie within raw input buffer (excluding potential padding) */
                          5707	#2369:       if ( (length <= activeJob->netSize)
                          5708	#2370:         && (offset <= (activeJob->netSize - length))
                          5709	#2371:         && (activeOffset < activeJob->totalSize)
                          5710	#2372:         && ((offset + length + FBL_MEM_REMAINDER_PADDING) <= (activeJob->totalSize - activeOffset)) )
                          5711	#2373:       {
                          5712	#2374: #if defined( FBL_MEM_ENABLE_REMAINDER_HANDLING )
                          5713	#2375:          /* Remainder requires reserved area in front of actual data (defined by current offset) */
                          5714	#2376:          if ((activeOffset + offset) >= activeJob->offset)
                          5715	#2377: #endif /* FBL_MEM_ENABLE_REMAINDER_HANDLING */
                          5716	#2378:          {
                          5717	#2379:             /* Relocate offset to provided buffer */
                          5718	#2380:             activeJob->offset = activeOffset;
                          5719	#2381:             retVal = kFblMemStatus_Ok;
                          5720	#2382:          }
                          5721	#2383:       }
                          5722	#2384:    }
                          5723	#2386:    return retVal;
                          5724	#2387: }
                          5725	#2388: #endif /* FBL_MEM_ENABLE_SEGMENTED_INPUT_BUFFER */
                          5726	#2391: /***********************************************************************************************************************
                          5727	#2392:  *  FblMemProgramStream
                          5728	#2393:  **********************************************************************************************************************/
                          5729	#2394: /*! \brief         Take a byte stream to be programmed and align it to the memory requirements
                          5730	#2395:  *  \details       If the length is not aligned to the segment size the odd bytes are stored in a remainder buffer,
                          5731	#2396:  *                 which will be programmed on the next call.
                          5732	#2397:  *                 Programming may be suspended by an external event. In this case parameter programLength will be
                          5733	#2398:  *                 updated to reflect the length actually programmed.
                          5734	#2399:  *  \pre           FblMemSegmentStartIndication executed before
                          5735	#2400:  *  \param[in]     programJob Information of buffer to be programmed
                          5736	#2401:  *  \param[in,out] programLength Requested program length (output: length actually programmed)
                          5737	#2402:  *  \param[in]     mode Operation mode (include remainder in case of finalization)
                          5738	#2403:  *  \return        Result of operation (potentially remapped to OEM specific NRC)
                          5739	#2404:  **********************************************************************************************************************/
                          5740		.align	1
                          5741		.align	1
                          5742	..gh.f.p.5.a.1.r.0.e.25:
                          5743		.type	..gh.f.p.5.a.1.r.0.e.25,@object
                          5744		.size	..gh.f.p.5.a.1.r.0.e.25,0
                          5745		.global	FblMemProgramStream..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
                          5746	FblMemProgramStream..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.:
                          5747	FblMemProgramStream:
00000642 182106d0         5748		e_stwu	sp, -48(sp)
00000646 1b010910         5749		e_stmw	r24, 16(sp)
0000064a 015a             5750		se_mr	r26, r5
0000064c 014c             5751		se_mr	r28, r4
0000064e 013d             5752		se_mr	r29, r3
00000650 0080             5753		se_mflr	r0
00000652 dd01             5754		se_stw	r0, 52(sp)
                          5755	#	    .bf

                                   Fri Apr 10 08:32:15 2020           Page 104
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          5756	.LDW06:
                          5757	#2405: static tFblMemStatus FblMemProgramStream( const V_MEMRAM1 tFblMemJob V_MEMRAM2 V_MEMRAM3 * programJob,
                          5758	#2406:    V_MEMRAM1 tFblLength V_MEMRAM2 V_MEMRAM3 * programLength, tFblMemOperationMode mode )
                          5759	#2407: {
                          5760	#2408:    tFblMemStatus  retVal;
                          5761	#2409:    tFblMemRamData programData;
                          5762	#2410:    tFblLength     localLength;
                          5763	#2411: #if defined( FBL_MEM_ENABLE_REMAINDER_HANDLING )
                          5764	#2412:    tFblLength     requestLength;
                          5765	#2413:    tFblLength     remainder;
                          5766	#2414: #endif /* FBL_MEM_ENABLE_REMAINDER_HANDLING */
                          5767	#2416: #if defined( V_ENABLE_USE_DUMMY_STATEMENT )
                          5768	#2417:    /* Parameters not used: avoid compiler warning */
                          5769	#2418: # if defined( FBL_MEM_ENABLE_REMAINDER_HANDLING )
                          5770	#2419: # else
                          5771	#2420:    (void)mode; /* PRQA S 3112 */ /* MD_FblMem_3112 */
                          5772	#2421: # endif /* FBL_MEM_ENABLE_REMAINDER_HANDLING */
                          5773	#2422: #endif /* V_ENABLE_USE_DUMMY_STATEMENT */
                          5774	#2424:    FblMemTriggerWatchdog();
00000654 78000001         5775		se_bl	FblMemTriggerWatchdog
                          5776	#2426:    /* Store requested length to local variable */
                          5777	#2427:    localLength = *programLength;
                          5778	#line2427
                          5779	..lin.1acf134f..fbae5e5c.0_68::
                          5780	.LDWlin68:
00000658 c00c             5781		se_lwz	r0, 0(r28)
0000065a d201             5782		se_stw	r0, 8(sp)
                          5783	#2428:    /* Pointer to current buffer position */
                          5784	#2429:    programData = FblMemGetBuffer(programJob);
0000065c 01d3             5785		se_mr	r3, r29
0000065e 78000001         5786		se_bl	FblMemGetBuffer
00000662 73e0e000         5787		e_lis	r31, %hiadj(gSegInfo)
                          5788	#2431: #if defined( FBL_MEM_ENABLE_REMAINDER_HANDLING )
                          5789	#2432:    remainder   = 0u;
                          5790	#line2432
                          5791	..lin.1acf134f..fbae5e5c.0_69::
                          5792	.LDWlin69:
00000666 1fff0000         5793		e_add16i	r31, r31, %lo(gSegInfo)
0000066a c40f             5794		se_lwz	r0, 16(r31)
                          5795	#2434:    /* No remainder handling required for volatile memory */
                          5796	#2435:    if (kFblMemType_RAM != gSegInfo.input.type)
0000066c 4809             5797		se_li	r25, 0
0000066e 0138             5798		se_mr	r24, r3
00000670 7360e000         5799		e_lis	r27, %hiadj(gRemainderBuffer)
00000674 019e             5800		se_mr	r30, r25
00000676 1f7b0000         5801		e_add16i	r27, r27, %lo(gRemainderBuffer)
0000067a 2a00             5802		se_cmpi	r0, 0
0000067c e600             5803		se_beq	.L2004
                          5804	#2436:    {
                          5805	#2437:       /*
                          5806	#2438:          Handle remainder from previous run
                          5807	#2439:          Special case where remainder is empty is not explicitly handled
                          5808	#2440:          as performing the following operations with a value of zero
                          5809	#2441:          doesn't have any side-effects
                          5810	#2442:       */
                          5811	#2444:       /* Check available space in front of current data */

                                   Fri Apr 10 08:32:15 2020           Page 105
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          5812	#2445:       assertFblInternal(gSegInfo.writeRemainder <= programJob->position, kFblMemAssertParameterOutOfRange); /* PRQA S 2214 */ /* MD_FblDef_Assert */
                          5813	#line2445
                          5814	..lin.1acf134f..fbae5e5c.0_70::
                          5815	.LDWlin70:
0000067e c40d             5816		se_lwz	r0, 16(r29)
00000680 c77f             5817		se_lwz	r7, 28(r31)
00000682 0d07             5818		se_cmpl	r7, r0
00000684 e100             5819		se_ble	.L2006
00000686 4813             5820		se_li	r3, 1
00000688 78000001         5821		e_bl	ApplFblFatalError
                          5822	.L2006:
                          5823	#2447:       /* Redirect programming pointer to make room for remainder */
                          5824	#2448:       programData = &programJob->buffer[programJob->position - gSegInfo.writeRemainder];
                          5825	#line2448
                          5826	..lin.1acf134f..fbae5e5c.0_71::
                          5827	.LDWlin71:
0000068c c75f             5828		se_lwz	r5, 28(r31)
0000068e c40d             5829		se_lwz	r0, 16(r29)
00000690 c08d             5830		se_lwz	r24, 0(r29)
00000692 189b8004         5831		e_addi	r4, r27, 4
00000696 0650             5832		se_sub	r0, r5
                          5833	#2450:       /* Copy remainder in front of actual data */
                          5834	#2451:       (void)MEMCPY(programData, gRemainderBuffer.data, gSegInfo.writeRemainder);
00000698 0408             5835		se_add	r24, r0
0000069a 0183             5836		se_mr	r3, r24
0000069c 78000001         5837		e_bl	FblOwnMemcpy
                          5838	#2452:       /* Update length to be programmed */
                          5839	#2453:       localLength += gSegInfo.writeRemainder;
000006a0 c241             5840		se_lwz	r4, 8(sp)
000006a2 c70f             5841		se_lwz	r0, 28(r31)
000006a4 0404             5842		se_add	r4, r0
000006a6 d241             5843		se_stw	r4, 8(sp)
                          5844	#2455:       /* Write complete data if explicit finalization is requested */
                          5845	#2456:       if ( (kFblMemOperationMode_Finalize == mode)
000006a8 2a1a             5846		se_cmpi	r26, 1
000006aa e600             5847		se_beq	.L2004
000006ac c80f             5848		se_lwz	r0, 32(r31)
000006ae 0d04             5849		se_cmpl	r4, r0
000006b0 e600             5850		se_beq	.L2004
                          5851	#2457: # if defined( FBL_ENABLE_PROCESSED_DATA_LENGTH )
                          5852	#2458: # else
                          5853	#2459:       /* or end of requested segment is reached */
                          5854	#2460:         || (localLength == gSegInfo.writeLength)
                          5855	#2461: # endif /* FBL_ENABLE_PROCESSED_DATA_LENGTH */
                          5856	#2462:          )
                          5857	#2463:       {
                          5858	#2464:          /* No remainder left */
                          5859	#2465:       }
                          5860	#2466:       else
                          5861	#2467:       {
                          5862	#2468:          /* Calculate new remainder, not aligned to segment size */
                          5863	#2469:          remainder = FblMemGetWriteRemainder(gSegInfo.writeAddress, localLength);
                          5864	#line2469
                          5865	..lin.1acf134f..fbae5e5c.0_72::
                          5866	.LDWlin72:
000006b2 c63f             5867		se_lwz	r3, 24(r31)

                                   Fri Apr 10 08:32:15 2020           Page 106
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
000006b4 e900             5868		se_bl	FblMemGetSpecificRemainder
                          5869	#2471:          /* Handle special case: When the segment was already finalized, the padding isn't included in write address
                          5870	#2472:             Remainder calculation thus includes data already written, resulting in a value larger than the requested length
                          5871	#2473:             This would cause two range overflows, but is only a cosmetic issue, as it cancels out in the end */
                          5872	#2474:          if (remainder > localLength)
                          5873	#line2474
                          5874	..lin.1acf134f..fbae5e5c.0_73::
                          5875	.LDWlin73:
000006b6 c201             5876		se_lwz	r0, 8(sp)
000006b8 0d03             5877		se_cmpl	r3, r0
000006ba 7fc0185e         5878		iselgt	r30, r0, r3
                          5879	#2475:          {
                          5880	#2476:             remainder = 0u;
                          5881	#2477:          }
                          5882	#2479:          /* Update length to be programmed */
                          5883	#2480:          localLength -= remainder;
000006be 06e0             5884		se_sub	r0, r30
000006c0 d201             5885		se_stw	r0, 8(sp)
                          5886	.L2004:
                          5887	#2482:       }
                          5888	#2483:    }
                          5889	#2485:    /* Remember actual programming length, may be altered by programming routine */
                          5890	#2486:    requestLength = localLength;
000006c2 c241             5891		se_lwz	r4, 8(sp)
000006c4 c80f             5892		se_lwz	r0, 32(r31)
                          5893	#2487: #endif /* FBL_MEM_ENABLE_REMAINDER_HANDLING */
                          5894	#2489:    /* Verify complete programming length does not exceed previously requested memory range */
                          5895	#2490: #if defined( FBL_MEM_ENABLE_REMAINDER_HANDLING )
                          5896	#2491:    if ((localLength + remainder) > gSegInfo.writeLength)
000006c6 014a             5897		se_mr	r26, r4
000006c8 04e4             5898		se_add	r4, r30
000006ca 0d04             5899		se_cmpl	r4, r0
000006cc e100             5900		se_ble	.L2014
                          5901	#2492: #else
                          5902	#2493:    if (localLength > gSegInfo.writeLength)
                          5903	#2494: #endif /* FBL_MEM_ENABLE_REMAINDER_HANDLING */
                          5904	#2495:    {
                          5905	#2496:       FBL_MEM_SET_STATUS(ProgramOverflow, retVal); /* PRQA S 3109 */ /* MD_MSR_14.3 */
                          5906	#line2496
                          5907	..lin.1acf134f..fbae5e5c.0_74::
                          5908	.LDWlin74:
000006ce 4d00             5909		se_li	r0, 80
000006d0 70e0e000         5910		e_lis	r7, %hiadj(errStatFblStates)
000006d4 5c070000         5911		e_sth	r0, %lo(errStatFblStates)(r7)
000006d8 4f1d             5912		se_li	r29, 113
000006da e800             5913		se_b	.L2020
                          5914	.L2014:
                          5915	#2497:    }
                          5916	#2498:    else
                          5917	#2499:    {
                          5918	#2500:       /*
                          5919	#2501:          Call programming function even if actual length is zero
                          5920	#2502:          In this case the input length will be completely moved to the remainder
                          5921	#2503:       */
                          5922	#2504:       if (kFblMemType_RAM == gSegInfo.input.type)
                          5923	#line2504

                                   Fri Apr 10 08:32:15 2020           Page 107
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          5924	..lin.1acf134f..fbae5e5c.0_75::
                          5925	.LDWlin75:
000006dc c40f             5926		se_lwz	r0, 16(r31)
000006de 0185             5927		se_mr	r5, r24
000006e0 c63f             5928		se_lwz	r3, 24(r31)
000006e2 2a00             5929		se_cmpi	r0, 0
000006e4 e200             5930		se_bne	.L2017
                          5931	#2505:       {
                          5932	#2506:          /* Copy to volatile memory */
                          5933	#2507:          retVal = FblMemCopyBuffer(gSegInfo.writeAddress, &localLength, programData);
                          5934	#line2507
                          5935	..lin.1acf134f..fbae5e5c.0_76::
                          5936	.LDWlin76:
000006e6 18818008         5937		e_addi	r4, sp, 8
000006ea 78000001         5938		se_bl	FblMemCopyBuffer
000006ee e800             5939		se_b	.L2016
                          5940	.L2017:
                          5941	#2508:       }
                          5942	#2509:       else
                          5943	#2510:       {
                          5944	#2511:          /* Program non-volatile memory */
                          5945	#2512:          retVal = FblMemProgramBufferInternal(gSegInfo.writeAddress, &localLength, programData, kFblMemProgState_Checkpoint);
                          5946	#line2512
                          5947	..lin.1acf134f..fbae5e5c.0_77::
                          5948	.LDWlin77:
000006f0 18818008         5949		e_addi	r4, sp, 8
000006f4 4846             5950		se_li	r6, 4
000006f6 78000001         5951		se_bl	FblMemProgramBufferInternal
                          5952	.L2016:
000006fa 013d             5953		se_mr	r29, r3
                          5954	#2513:       }
                          5955	#2514:    }
                          5956	#2516:    /* Check result */
                          5957	#2517:    if (kFblMemStatus_Ok == retVal)
                          5958	#line2517
                          5959	..lin.1acf134f..fbae5e5c.0_78::
                          5960	.LDWlin78:
000006fc 2a03             5961		se_cmpi	r3, 0
000006fe e200             5962		se_bne	.L2020
                          5963	#2518:    {
                          5964	#2519:       /* Returned length shall not exceed requested length */
                          5965	#2520:       assertFblInternal(localLength <= gSegInfo.writeLength, kFblMemAssertParameterOutOfRange); /* PRQA S 2214 */ /* MD_FblDef_Assert */
                          5966	#line2520
                          5967	..lin.1acf134f..fbae5e5c.0_79::
                          5968	.LDWlin79:
00000700 c80f             5969		se_lwz	r0, 32(r31)
00000702 c271             5970		se_lwz	r7, 8(sp)
00000704 0d07             5971		se_cmpl	r7, r0
00000706 e100             5972		se_ble	.L2022
00000708 4813             5973		se_li	r3, 1
0000070a 78000001         5974		e_bl	ApplFblFatalError
                          5975	.L2022:
                          5976	#2522:       /* Update segment information */
                          5977	#2523:       gSegInfo.writeAddress    += (tFblAddress)localLength;
                          5978	#line2523
                          5979	..lin.1acf134f..fbae5e5c.0_80::

                                   Fri Apr 10 08:32:15 2020           Page 108
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          5980	.LDWlin80:
0000070e c60f             5981		se_lwz	r0, 24(r31)
00000710 c241             5982		se_lwz	r4, 8(sp)
00000712 0440             5983		se_add	r0, r4
00000714 d60f             5984		se_stw	r0, 24(r31)
                          5985	#2524:       /* Reduce expected remainder */
                          5986	#2525:       gSegInfo.writeLength     -= localLength;
00000716 c80f             5987		se_lwz	r0, 32(r31)
00000718 0640             5988		se_sub	r0, r4
0000071a d80f             5989		se_stw	r0, 32(r31)
                          5990	#2526: #if defined( FBL_ENABLE_PROCESSED_DATA_LENGTH )
                          5991	#2527:       /* Length actually written */
                          5992	#2528:       gSegInfo.writtenLength   += localLength;
                          5993	#2529: #endif /* FBL_ENABLE_PROCESSED_DATA_LENGTH */
                          5994	#2531: #if defined( FBL_MEM_ENABLE_REMAINDER_HANDLING )
                          5995	#2532:       /* Everything consumed, program length already matches */
                          5996	#2533:       if (requestLength == localLength)
0000071c 0d4a             5997		se_cmpl	r26, r4
0000071e e200             5998		se_bne	.L2024
                          5999	#2534:       {
                          6000	#2535:          /* Everything written, store new remaining data */
                          6001	#2536:          gSegInfo.writeRemainder = remainder;
                          6002	#line2536
                          6003	..lin.1acf134f..fbae5e5c.0_81::
                          6004	.LDWlin81:
00000720 d7ef             6005		se_stw	r30, 28(r31)
                          6006	#2537:          /* Call copy function even if remainder length is zero */
                          6007	#2538:          (void)MEMCPY(gRemainderBuffer.data, &programData[localLength], remainder);
00000722 187b8004         6008		e_addi	r3, r27, 4
00000726 0484             6009		se_add	r4, r24
00000728 01e5             6010		se_mr	r5, r30
0000072a 78000001         6011		e_bl	FblOwnMemcpy
0000072e e800             6012		se_b	.L2020
                          6013	.L2024:
                          6014	#2539:       }
                          6015	#2540:       /* Data partially programmed (most likely suspended by external event) */
                          6016	#2541:       else if (localLength > 0u)
                          6017	#line2541
                          6018	..lin.1acf134f..fbae5e5c.0_82::
                          6019	.LDWlin82:
00000730 2a04             6020		se_cmpi	r4, 0
00000732 e600             6021		se_beq	.L2027
                          6022	#2542:       {
                          6023	#2543:          /* Store consumed length */
                          6024	#2544:          *programLength = localLength - gSegInfo.writeRemainder;
                          6025	#line2544
                          6026	..lin.1acf134f..fbae5e5c.0_83::
                          6027	.LDWlin83:
00000734 c70f             6028		se_lwz	r0, 28(r31)
00000736 0740             6029		se_subf	r0, r4
00000738 d00c             6030		se_stw	r0, 0(r28)
                          6031	#2545:          /* Some data written, no remainder */
                          6032	#2546:          gSegInfo.writeRemainder = 0u;
0000073a d79f             6033		se_stw	r25, 28(r31)
0000073c e800             6034		se_b	.L2020
                          6035	.L2027:

                                   Fri Apr 10 08:32:15 2020           Page 109
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          6036	#2547:       }
                          6037	#2548:       else
                          6038	#2549:       {
                          6039	#2550:          /* Nothing consumed at all */
                          6040	#2551:          *programLength = 0u;
                          6041	#line2551
                          6042	..lin.1acf134f..fbae5e5c.0_84::
                          6043	.LDWlin84:
0000073e d04c             6044		se_stw	r4, 0(r28)
                          6045	.L2020:
                          6046	#2552:          /* Nothing written at all, remainder from previous run unchanged */
                          6047	#2553:       }
                          6048	#2554: #else
                          6049	#2555:       /* Store consumed length */
                          6050	#2556:       *programLength = localLength;
                          6051	#2557: #endif /* FBL_MEM_ENABLE_REMAINDER_HANDLING */
                          6052	#2558:    }
                          6053	#2560:    return retVal;
00000740 01d3             6054		se_mr	r3, r29
                          6055	#	    .ef
                          6056	.LDW16:
00000742 cd01             6057		se_lwz	r0, 52(sp)
00000744 1b010810         6058		e_lmw	r24, 16(sp)
00000748 18218030         6059		e_addi	sp, sp, 48
0000074c 0090             6060		se_mtlr	r0
0000074e 0004             6061		se_blr
                          6062	__ghs_eofn_FblMemProgramStream:
                          6063		.type	FblMemProgramStream,@function
                          6064		.size	FblMemProgramStream,$-FblMemProgramStream
                          6065		.type	FblMemProgramStream..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.,@function
                          6066		.size	FblMemProgramStream..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.,$-FblMemProgramStream..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
                          6067		.align	1
                          6068	
                          6069	#function:			FblMemProgramStream
                          6070	#stack frame size:		48
                          6071	#link area offset:		0
                          6072	#local storage area offset:	12
                          6073	#gpr save area offset:		16
                          6074	#
                          6075	#retVal	r29	local
                          6076	#programData	r24	local
                          6077	#localLength	8(sp)	local
                          6078	#requestLength	r26	local
                          6079	#remainder	r30	local
                          6080	
                          6081	#programJob	r29	param
                          6082	#programLength	r28	param
                          6083	#mode	r26	param
                          6084	
                          6085		.data
                          6086		.section ".vletext", "vax"
                          6087		.vle
                          6088		.vle
                          6089	
                          6090	#2561: }/* PRQA S 6010 */ /* MD_MSR_STPTH */
                          6091	

                                   Fri Apr 10 08:32:15 2020           Page 110
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          6092	#2563: #if defined( FBL_MEM_ENABLE_VERIFY_STREAM )
                          6093	#2564: /***********************************************************************************************************************
                          6094	#2565:  *  FblMemVerifyInput
                          6095	#2566:  **********************************************************************************************************************/
                          6096	#2567: /*! \brief      Execute input verification operation
                          6097	#2568:  *  \details    Pass input data to given input verification routine
                          6098	#2569:  *              No operation will be carried out if null pointer is passed as function
                          6099	#2570:  *  \param[in]  routine Input verification operation to be executed
                          6100	#2571:  *  \param[in]  data Verification data
                          6101	#2572:  *                - FBL_MEM_VERIFY_STATE_INIT / FBL_MEM_VERIFY_STATE_FINALIZE: Usually irrelevant
                          6102	#2573:  *                - FBL_MEM_VERIFY_STATE_COMPUTE: Data to be hashed
                          6103	#2574:  *                - FBL_MEM_VERIFY_STATE_VERIFY: Reference checksum / signature
                          6104	#2575:  *              state Sub-operation to be executed
                          6105	#2576:  *  \param[in,out]   result Pointer to extended verification result
                          6106	#2577:  *                      FBL_MEM_VERIFY_STATUS_NULL if neither relevant nor used
                          6107	#2578:  *  \return     kFblMemStatus_Ok if operation successfully executed,
                          6108	#2579:  *                 kFblMemStatus_Failed otherwise
                          6109	#2580:  **********************************************************************************************************************/
                          6110	#2581: static tFblMemStatus FblMemVerifyInput( V_MEMRAM1 tFblMemVerifyRoutineInput V_MEMRAM2 V_MEMRAM3 * routine,
                          6111	#2582:    const V_MEMRAM1 tFblMemVerifyData V_MEMRAM2 V_MEMRAM3 * data, vuint8 state,
                          6112	#2583:    V_MEMRAM1 tFblMemVerifyStatus V_MEMRAM2 V_MEMRAM3 * result )
                          6113	#2584: {
                          6114	#2585:    tFblMemStatus retVal;
                          6115	#2586:    tFblMemVerifyStatus localResult;
                          6116	#2588:    retVal      = kFblMemStatus_Ok;
                          6117	#2589:    localResult = FBL_MEM_VERIFY_OK;
                          6118	#2591:    /* Null pointer passed as verification function disables functionality */
                          6119	#2592:    if (FBL_MEM_VERIFY_FCT_INPUT_NULL != routine->function)
                          6120	#2593:    {
                          6121	#2594:       routine->param->sigState          = state;
                          6122	#2595:       routine->param->sigSourceBuffer   = data->data;
                          6123	#2596:       routine->param->sigByteCount      = (tFblMemVerifyLength)data->length;
                          6124	#2597: # if defined( FBL_MEM_ENABLE_EXT_TRIGGER_INPUT_VERIFY )
                          6125	#2598:       routine->param->wdTriggerFct      = (tFblMemVerifyWdFct)FblMemTriggerWatchdogExt;
                          6126	#2599: # else
                          6127	#2600:       routine->param->wdTriggerFct      = (tFblMemVerifyWdFct)FblMemTriggerWatchdog;
                          6128	#2601: # endif /* FBL_MEM_ENABLE_EXT_TRIGGER_INPUT_VERIFY */
                          6129	#2603:       /* Call verification function and set extended status */
                          6130	#2604:       localResult = routine->function(routine->param);
                          6131	#2605:       if (FBL_MEM_VERIFY_OK != localResult)
                          6132	#2606:       {
                          6133	#2607:          retVal = kFblMemStatus_Failed;
                          6134	#2608:       }
                          6135	#2609:    }
                          6136	#2611:    if (FBL_MEM_VERIFY_STATUS_NULL != result)
                          6137	#2612:    {
                          6138	#2613:       /* Pass extended result */
                          6139	#2614:       *result = localResult;
                          6140	#2615:    }
                          6141	#2617:    return retVal;
                          6142	#2618: }
                          6143	#2620: /***********************************************************************************************************************
                          6144	#2621:  *  FblMemInitVerifyInput
                          6145	#2622:  **********************************************************************************************************************/
                          6146	#2623: /*! \brief      Initialize input verification(s)
                          6147	#2624:  *  \return     kFblMemStatus_Ok if operation successfully executed,

                                   Fri Apr 10 08:32:15 2020           Page 111
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          6148	#2625:  *                 kFblMemStatus_Failed otherwise
                          6149	#2626:  **********************************************************************************************************************/
                          6150	#2627: static tFblMemStatus FblMemInitVerifyInput( void )
                          6151	#2628: {
                          6152	#2629:    tFblMemStatus     retVal;
                          6153	#2630:    tFblMemVerifyData verifyData;
                          6154	#2632:    retVal = kFblMemStatus_Ok;
                          6155	#2634:    /* Not used by initialization */
                          6156	#2635:    verifyData.data   = FBL_MEM_BUFFER_NULL;
                          6157	#2636:    verifyData.length = 0u;
                          6158	#2638:    /* Inverted order of verification routines
                          6159	#2639:       Error code may be overwritten (simplifies implementation) */
                          6160	#2643:    return retVal;
                          6161	#2644: }
                          6162	#2645: #endif /* FBL_MEM_ENABLE_VERIFY_STREAM */
                          6163	#2650: /***********************************************************************************************************************
                          6164	#2651:  *  FblMemProcessJob
                          6165	#2652:  **********************************************************************************************************************/
                          6166	#2653: /*! \brief      Perform processing operations on provided job
                          6167	#2654:  *  \details    Depending on the type and configuration one of the following operations will be carried out:
                          6168	#2655:  *              - Update verification with buffer contents
                          6169	#2656:  *              - Read already programmed data in temporary buffer for verification
                          6170	#2657:  *              - Process buffer contents (e.g. decryption or decompression)
                          6171	#2658:  *                Result placed in intermediate buffer, which is prepended to the processing queue
                          6172	#2659:  *              - Program buffer contents
                          6173	#2660:  *              - Flush program remainder
                          6174	#2661:  *              - Pass data to other instance
                          6175	#2662:  *              Buffer may be processed at once or split into smaller segments, requiring multiple call cycles to
                          6176	#2663:  *              finish the buffer
                          6177	#2664:  *              This depends on the configuration and finalization flag
                          6178	#2665:  *  \pre        FblMemSegmentStartIndication executed before
                          6179	#2666:  *  \param[in]  activeJob Information of processed buffer
                          6180	#2667:  *  \param[in]  mode Operation mode used to trigger finalization
                          6181	#2668:  *  \return     Result of operation (potentially remapped to OEM specific NRC)
                          6182	#2669:  **********************************************************************************************************************/
                          6183		.align	1
                          6184		.align	1
                          6185	..gh.f.p.4.a.1.r.0.e.26:
                          6186		.type	..gh.f.p.4.a.1.r.0.e.26,@object
                          6187		.size	..gh.f.p.4.a.1.r.0.e.26,0
                          6188		.global	FblMemProcessJob..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
                          6189	FblMemProcessJob..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.:
                          6190	FblMemProcessJob:
00000750 182106d8         6191		e_stwu	sp, -40(sp)
00000754 1b610914         6192		e_stmw	r27, 20(sp)
00000758 0080             6193		se_mflr	r0
0000075a db01             6194		se_stw	r0, 44(sp)
0000075c 013e             6195		se_mr	r30, r3
                          6196	#	    .bf
                          6197	.LDW26:
                          6198	#2670: static tFblMemStatus FblMemProcessJob( V_MEMRAM1 tFblMemJob V_MEMRAM2 V_MEMRAM3 * activeJob, tFblMemOperationMode mode )
                          6199	#2671: {
                          6200	#2672:    tFblLength     actualLength;
                          6201	#2673: #if defined( FBL_MEM_ENABLE_VERIFY_STREAM )     || \
                          6202	#2674:     defined( FBL_ENABLE_DATA_PROCESSING )       || \
                          6203	#2675:     defined( FBL_MEM_ENABLE_STREAM_OUTPUT )     

                                   Fri Apr 10 08:32:15 2020           Page 112
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          6204	#2676:    tFblMemRamData activeBuffer;
                          6205	#2677: #endif /* FBL_MEM_ENABLE_VERIFY_STREAM || FBL_ENABLE_DATA_PROCESSING || FBL_MEM_ENABLE_STREAM_OUTPUT || FBL_MEM_ENABLE_PASSTHROUGH */
                          6206	#2678: #if defined( FBL_ENABLE_DATA_PROCESSING )
                          6207	#2679:    V_MEMRAM1 tFblMemJob V_MEMRAM2 V_MEMRAM3 * procOutJob;
                          6208	#2680: #endif /* FBL_ENABLE_DATA_PROCESSING */
                          6209	#2681: #if defined( FBL_MEM_ENABLE_VERIFY_STREAM )
                          6210	#2682:    tFblMemVerifyData verifyData;
                          6211	#2683: #endif /* FBL_MEM_ENABLE_VERIFY_STREAM */
                          6212	#2684: #if defined( FBL_MEM_ENABLE_STREAM_OUTPUT )
                          6213	#2685:    tFblResult streamResult;
                          6214	#2686: #endif /* FBL_MEM_ENABLE_STREAM_OUTPUT */
                          6215	#2687: #if defined( FBL_MEM_ENABLE_GAP_FILL )
                          6216	#2688:    tFblAddress fillAddress;
                          6217	#2689:    tFblLength  fillLength;
                          6218	#2690:    tFblLength  tempLength;
                          6219	#2691: #endif /* FBL_MEM_ENABLE_GAP_FILL */
                          6220	#2692:    tFblMemOperationMode finalizeStream;
                          6221	#2694: #if defined( V_ENABLE_USE_DUMMY_STATEMENT )
                          6222	#2695:    /* Parameters not used: avoid compiler warning */
                          6223	#2696: # if defined( FBL_MEM_ENABLE_SEGMENTATION )
                          6224	#2697: # else
                          6225	#2698:    (void)mode; /* PRQA S 3112 */ /* MD_FblMem_3112 */
                          6226	#2699: # endif /* FBL_MEM_ENABLE_SEGMENTATION */
                          6227	#2700: #endif /* V_ENABLE_USE_DUMMY_STATEMENT */
                          6228	#2702:    /* Handle watchdog trigger */
                          6229	#2703:    FblMemTriggerWatchdog();
0000075e 78000001         6230		se_bl	FblMemTriggerWatchdog
                          6231	#2705: #if defined( FBL_MEM_ENABLE_VERIFY_STREAM )  || \
                          6232	#2706:     defined( FBL_ENABLE_DATA_PROCESSING )    || \
                          6233	#2707:     defined( FBL_MEM_ENABLE_STREAM_OUTPUT )  
                          6234	#2708:    /* Get pointer to current buffer position */
                          6235	#2709:    activeBuffer   = FblMemGetBuffer(activeJob);
                          6236	#2710: #endif /* FBL_MEM_ENABLE_VERIFY_STREAM || FBL_ENABLE_DATA_PROCESSING || FBL_MEM_ENABLE_STREAM_OUTPUT || FBL_MEM_ENABLE_PASSTHROUGH */
                          6237	#2711:    /* Limit processed length to configured value */
                          6238	#2712:    actualLength = FblMemLimitLength(activeJob->used, activeJob->type, mode);
                          6239	#line2712
                          6240	..lin.1acf134f..d8d9e992.0_85::
                          6241	.LDWlin85:
00000762 c57e             6242		se_lwz	r7, 20(r30)
00000764 c70e             6243		se_lwz	r0, 28(r30)
                          6244	#2714:    /* Handle buffer types */
                          6245	#2715:    switch (activeJob->type)
00000766 73a0e000         6246		e_lis	r29, %hiadj(gErrorStatus)
0000076a 1fbd0000         6247		e_add16i	r29, r29, %lo(gErrorStatus)
0000076e d371             6248		se_stw	r7, 12(sp)
00000770 2210             6249		se_cmpli	r0, 2
00000772 e400             6250		se_blt	.L2337
00000774 e600             6251		se_beq	.L2338
                          6252	#3047:             }
                          6253	#3048:          }
                          6254	#3050: #if defined( FBL_MEM_ENABLE_PROGRESS_INFO )
                          6255	#3051:          if (kFblMemStatus_Ok == gErrorStatus)
                          6256	#3052:          {
                          6257	#3053:             /* Update programming progress */
                          6258	#3054:             FblMemUpdateProgress(gSegInfo.writeLength + (gGapFillJob.used - actualLength));
                          6259	#3055:          }

                                   Fri Apr 10 08:32:15 2020           Page 113
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          6260	#3056: #endif /* FBL_MEM_ENABLE_PROGRESS_INFO*/
                          6261	#3058:          break;
                          6262	#3059:       }
                          6263	#3060: #endif /* FBL_MEM_ENABLE_GAP_FILL */
                          6264	#3061:       case kFblMemJobType_Max:
                          6265	#3062:       default:
                          6266	#3063:       {
                          6267	#3064:          /* Invalid buffer type */
                          6268	#3065:          FBL_MEM_SET_STATUS(Failed, gErrorStatus);  /* PRQA S 3109 */ /* MD_MSR_14.3 */
                          6269	#line3065
                          6270	..lin.1acf134f..d8d9e992.0_86::
                          6271	.LDWlin86:
00000776 4a24             6272		se_li	r4, 34
00000778 d04d             6273		se_stw	r4, 0(r29)
                          6274	#3067:          break;
0000077a e800             6275		se_b	.L2344
                          6276	.L2337:
                          6277	#2716:    {
                          6278	#2717: #if defined( FBL_ENABLE_DATA_PROCESSING )
                          6279	#2718:       /* Data processing */
                          6280	#2719:       case kFblMemJobType_ProcInput:
                          6281	#2720:       case kFblMemJobType_ProcFinalize:
                          6282	#2721:       {
                          6283	#2722: # if defined( FBL_MEM_ENABLE_STREAM_OUTPUT )
                          6284	#2723:          if (kFblOk == __ApplFblMemIsStreamOutputRequired(gSegInfo.input.dataFormat))
                          6285	#2724:          {
                          6286	#2725:             procOutJob  = &gStreamProcJob;
                          6287	#2726:          }
                          6288	#2727:          else
                          6289	#2728: # endif /* FBL_MEM_ENABLE_STREAM_OUTPUT */
                          6290	#2729:          {
                          6291	#2730:             procOutJob  = &gProcWriteJob;
                          6292	#2731:          }
                          6293	#2733:          /* Update position of output buffer to accommodate for programming remainder */
                          6294	#2734:          procOutJob->position = gSegInfo.writeRemainder;
                          6295	#2736:          /* Limit input length to 16 bit */
                          6296	#2737:          if (actualLength > 0xFFFFu)
                          6297	#2738:          {
                          6298	#2739:            actualLength = 0xFFFFu;
                          6299	#2740:          }
                          6300	#2742:          /*
                          6301	#2743:             Initialize parameters for data processing.
                          6302	#2744:             Note: Other members have been set during initialization
                          6303	#2745:          */
                          6304	#2746:          gProcParam.dataBuffer      = activeBuffer;
                          6305	#2747:          gProcParam.dataLength      = (vuint16)actualLength;
                          6306	#2748:          /* Align output buffer according to current fill level */
                          6307	#2749:          gProcParam.dataOutBuffer   = &((FblMemGetBuffer(procOutJob))[procOutJob->used]);
                          6308	#2750:          gProcParam.dataOutLength   = 0u;
                          6309	#2752:          /* Call API function for user specific data processing */
                          6310	#2753:          if (kFblOk != ApplFblDataProcessing(&gProcParam))
                          6311	#2754:          {
                          6312	#2755:             FBL_MEM_SET_STATUS(DataProc, gErrorStatus);   /* PRQA S 3109 */ /* MD_MSR_14.3 */
                          6313	#2756:          }
                          6314	#2757:          else
                          6315	#2758:          {

                                   Fri Apr 10 08:32:15 2020           Page 114
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          6316	#2759:             if ((gProcParam.dataOutLength | gProcParam.dataLength) == 0u)
                          6317	#2760:             {
                          6318	#2761:                if (kFblMemJobType_ProcFinalize == activeJob->type)
                          6319	#2762:                {
                          6320	#2763:                   /* Finalize data processing
                          6321	#2764:                      gProcWriteJob already has correct values */
                          6322	#2765:                   if (kFblOk != ApplFblDeinitDataProcessing(&gProcParam))
                          6323	#2766:                   {
                          6324	#2767:                      FBL_MEM_SET_STATUS(DataProcDeinit, gErrorStatus); /* PRQA S 3109 */ /* MD_MSR_14.3 */
                          6325	#2768:                   }
                          6326	#2770:                   /* Finish job processing */
                          6327	#2771:                   activeJob->completion = kFblMemOperationMode_Unconditional;
                          6328	#2772:                }
                          6329	#2773:                else
                          6330	#2774:                {
                          6331	#2775:                   /* Nothing consumed or produced at all, avoid endless loop */
                          6332	#2776:                   FBL_MEM_SET_STATUS(DataProcConsume, gErrorStatus);  /* PRQA S 3109 */ /* MD_MSR_14.3 */
                          6333	#2777:                }
                          6334	#2778:             }
                          6335	#2779:          }
                          6336	#2781:          if (kFblMemStatus_Ok == gErrorStatus)
                          6337	#2782:          {
                          6338	#2783:             /* Update consumed length */
                          6339	#2784:             actualLength = gProcParam.dataLength;
                          6340	#2786:             /* Any data produced? */
                          6341	#2787:             if (gProcParam.dataOutLength > 0u)
                          6342	#2788:             {
                          6343	#2789:                /* Output buffer changed? */
                          6344	#2790:                assertFblUser((gProcParam.dataOutBuffer == &((FblMemGetBuffer(procOutJob))[procOutJob->used])), kFblMemAssertUserResultOutOfRange); /* PRQA S 2214 */ /* MD_FblDef_Assert */
                          6345	#2791:                /* Output length exceeds configured limit? */
                          6346	#2792:                assertFblUser((gProcParam.dataOutLength <= FBL_MEM_INTERNAL_PROC_SEGMENTATION), kFblMemAssertUserResultOutOfRange); /* PRQA S 2214 */ /* MD_FblDef_Assert */
                          6347	#2794:                /* Store processed data information */
                          6348	#2795:                procOutJob->used += gProcParam.dataOutLength;
                          6349	#2797:                /* Total used length exceeds buffer limits? */
                          6350	#2798:                assertFblInternal((procOutJob->used <= (procOutJob->totalSize - procOutJob->offset)), kFblMemAssertParameterOutOfRange); /* PRQA S 2214 */ /* MD_FblDef_Assert */
                          6351	#2800: # if defined( FBL_MEM_ENABLE_PROC_SEGMENTATION )
                          6352	#2801:                /* Accumulate multiple data processing calls before passing output data to write routine */
                          6353	#2803:                /* Buffer was previously empty
                          6354	#2804:                   Add behind current input data using low prio so that data will definitely be programmed after processing */
                          6355	#2805:                if (procOutJob->used == gProcParam.dataOutLength)
                          6356	#2806:                {
                          6357	#2807:                   /* Insert processed data into the queue and remember handle */
                          6358	#2808:                   gProcHandle = FblMemQueueDefaultPrioInsert(gProcessingQueue, procOutJob, activeJob->segmentIndex);
                          6359	#2809:                }
                          6360	#2811:                /* Buffer is (almost) filled and has to be programmed before continuing processing */
                          6361	#2812:                if ((procOutJob->netSize - procOutJob->used) < FBL_MEM_INTERNAL_PROC_SEGMENTATION)
                          6362	#2813:                {
                          6363	#2814:                   /* Move processed data buffer in front of input data job by updating to higher priority
                          6364	#2815:                      Handle set during current or previous cycle */
                          6365	#2816:                   (void)FblMemQueuePrioUpdate(gProcessingQueue, gProcHandle, kFblMemJobPrio_ProcWriteHigh);
                          6366	#2817:                }
                          6367	#2818: # else
                          6368	#2819:                /* Insert processed data into the queue */
                          6369	#2820:                (void)FblMemQueueDefaultPrioInsert(gProcessingQueue, procOutJob, activeJob->segmentIndex);
                          6370	#2821: # endif /* FBL_MEM_ENABLE_PROC_SEGMENTATION */
                          6371	#2822:             }

                                   Fri Apr 10 08:32:15 2020           Page 115
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          6372	#2824:          }
                          6373	#2826:          break;
                          6374	#2827:       }
                          6375	#2828:       case kFblMemJobType_ProcWrite:
                          6376	#2829: #endif /* FBL_ENABLE_DATA_PROCESSING */
                          6377	#2830: #if defined( FBL_MEM_ENABLE_REMAINDER_HANDLING )
                          6378	#2831:       case kFblMemJobType_WriteFinalize:
                          6379	#2832: #endif /* FBL_MEM_ENABLE_REMAINDER_HANDLING */
                          6380	#2833:       case kFblMemJobType_InputWrite:
                          6381	#2834:       {
                          6382	#2836: #if defined( FBL_MEM_ENABLE_REMAINDER_HANDLING )
                          6383	#2837:          if (kFblMemJobType_WriteFinalize == activeJob->type)
                          6384	#line2837
                          6385	..lin.1acf134f..d8d9e992.0_87::
                          6386	.LDWlin87:
0000077c 4805             6387		se_li	r5, 0
0000077e 2a10             6388		se_cmpi	r0, 1
00000780 e200             6389		se_bne	.L2343
                          6390	#2838:          {
                          6391	#2839:             finalizeStream       = kFblMemOperationMode_Finalize;
                          6392	#line2839
                          6393	..lin.1acf134f..d8d9e992.0_88::
                          6394	.LDWlin88:
00000782 70e0e000         6395		e_lis	r7, %hiadj(gSegInfo+28)
00000786 50e70000         6396		e_lwz	r7, %lo(gSegInfo+28)(r7)
0000078a 0105             6397		se_mr	r5, r0
                          6398	#2840:             /* Update position of output buffer to accommodate for programming remainder */
                          6399	#2841:             activeJob->position  = gSegInfo.writeRemainder;
0000078c d47e             6400		se_stw	r7, 16(r30)
                          6401	.L2343:
                          6402	#2842:          }
                          6403	#2843: # if defined( FBL_ENABLE_UNALIGNED_DATA_TRANSFER )
                          6404	#2844: # else
                          6405	#2845:          else if (kFblMemJobType_InputWrite == activeJob->type)
                          6406	#2846:          {
                          6407	#2847:             /* Force programming of any potential remainder */
                          6408	#2848:             finalizeStream = kFblMemOperationMode_Finalize;
                          6409	#2849:          }
                          6410	#2850: # endif /* FBL_ENABLE_UNALIGNED_DATA_TRANSFER */
                          6411	#2851:          else
                          6412	#2852: #endif /* FBL_MEM_ENABLE_REMAINDER_HANDLING */
                          6413	#2853:          {
                          6414	#2854:             finalizeStream = kFblMemOperationMode_Normal;
                          6415	#2855:          }
                          6416	#2857:          /* Program data, error code reflects result of operation */
                          6417	#2858:          gErrorStatus = FblMemProgramStream(activeJob, &actualLength, finalizeStream);
0000078e 01e3             6418		se_mr	r3, r30
00000790 1881800c         6419		e_addi	r4, sp, 12
00000794 78000001         6420		se_bl	FblMemProgramStream
00000798 d03d             6421		se_stw	r3, 0(r29)
0000079a 0134             6422		se_mr	r4, r3
                          6423	#2860: #if defined( FBL_MEM_ENABLE_PROGRESS_INFO )
                          6424	#2861:          /* Update progress information */
                          6425	#2862:          if (kFblMemStatus_Ok == gErrorStatus)
                          6426	#2863:          {
                          6427	#2864: #if defined( FBL_MEM_ENABLE_GAP_FILL )

                                   Fri Apr 10 08:32:15 2020           Page 116
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          6428	#2865:             FblMemUpdateProgress(gSegInfo.writeLength + gGapFillJob.used);
                          6429	#2866: #else
                          6430	#2867:             FblMemUpdateProgress(gSegInfo.writeLength);
                          6431	#2868: #endif
                          6432	#2869:          }
                          6433	#2870: #endif /* FBL_MEM_ENABLE_PROGRESS_INFO*/
                          6434	#2875:          break;
                          6435	#line2875
                          6436	..lin.1acf134f..d8d9e992.0_89::
                          6437	.LDWlin89:
0000079c e800             6438		se_b	.L2344
                          6439	.L2338:
                          6440	#2876:       }
                          6441	#2877: #if defined( FBL_MEM_ENABLE_STREAM_OUTPUT )
                          6442	#2878:       case kFblMemJobType_StreamInput:
                          6443	#2879:       case kFblMemJobType_StreamProc:
                          6444	#2880:       case kFblMemJobType_StreamFinalize:
                          6445	#2881:       {
                          6446	#2882:          /*
                          6447	#2883:             Initialize parameters for stream output.
                          6448	#2884:             Note: Other members have been set during initialization
                          6449	#2885:          */
                          6450	#2886:          gStreamParam.inputData        = activeBuffer;
                          6451	#2887:          gStreamParam.inputLength      = actualLength;
                          6452	#2888:          gStreamParam.consumedLength   = 0u;
                          6453	#2889:          gStreamParam.producedLength   = 0u;
                          6454	#2890:          gStreamParam.address          = gSegInfo.writeAddress;
                          6455	#2891:          gStreamParam.length           = gSegInfo.writeLength;
                          6456	#2893:          if (kFblMemJobType_StreamFinalize == activeJob->type)
                          6457	#2894:          {
                          6458	#2895:             /* Call API function for user specific stream output */
                          6459	#2896:             streamResult = ApplFblFinalizeStreamOutput(&gStreamParam);
                          6460	#2897:          }
                          6461	#2898:          else
                          6462	#2899:          {
                          6463	#2900:             /* Call API function for user specific stream output */
                          6464	#2901:             streamResult = ApplFblStreamOutput(&gStreamParam);
                          6465	#2902:          }
                          6466	#2904:          if (kFblOk != streamResult)
                          6467	#2905:          {
                          6468	#2906:             FBL_MEM_SET_STATUS(StreamOutput, gErrorStatus);   /* PRQA S 3109 */ /* MD_MSR_14.3 */
                          6469	#2907:          }
                          6470	#2908:          else
                          6471	#2909:          {
                          6472	#2910:             if ((gStreamParam.consumedLength | gStreamParam.producedLength) == 0u)
                          6473	#2911:             {
                          6474	#2912:                if (kFblMemJobType_StreamFinalize == activeJob->type)
                          6475	#2913:                {
                          6476	#2914:                   /* Finalize stream output
                          6477	#2915:                      Parameter already has correct values */
                          6478	#2916:                   if (kFblOk != ApplFblDeinitStreamOutput(&gStreamParam))
                          6479	#2917:                   {
                          6480	#2918:                      FBL_MEM_SET_STATUS(StreamOutputDeinit, gErrorStatus); /* PRQA S 3109 */ /* MD_MSR_14.3 */
                          6481	#2919:                   }
                          6482	#2921:                   /* Finish job processing */
                          6483	#2922:                   activeJob->completion = kFblMemOperationMode_Unconditional;

                                   Fri Apr 10 08:32:15 2020           Page 117
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          6484	#2923:                }
                          6485	#2924:                else
                          6486	#2925:                {
                          6487	#2926:                   /* Nothing consumed or produced at all, avoid endless loop */
                          6488	#2927:                   FBL_MEM_SET_STATUS(StreamOutputConsume, gErrorStatus);  /* PRQA S 3109 */ /* MD_MSR_14.3 */
                          6489	#2928:                }
                          6490	#2929:             }
                          6491	#2930:          }
                          6492	#2932:          if (kFblMemStatus_Ok == gErrorStatus)
                          6493	#2933:          {
                          6494	#2934:             /* Update consumed length */
                          6495	#2935:             actualLength = gStreamParam.consumedLength;
                          6496	#2937:             /* Any data produced? */
                          6497	#2938:             if (gStreamParam.producedLength > 0u)
                          6498	#2939:             {
                          6499	#2940:                /* Verify complete programming length does not exceed previously requested memory range */
                          6500	#2941:                if (gStreamParam.producedLength > gSegInfo.writeLength)
                          6501	#2942:                {
                          6502	#2943:                   FBL_MEM_SET_STATUS(StreamOutputConsume, gErrorStatus); /* PRQA S 3109 */ /* MD_MSR_14.3 */
                          6503	#2944:                }
                          6504	#2945:                else
                          6505	#2946:                {
                          6506	#2948:                   /* Update segment information */
                          6507	#2949:                   gSegInfo.writeAddress   += gStreamParam.producedLength;
                          6508	#2950:                   /* Reduce expected remainder */
                          6509	#2951:                   gSegInfo.writeLength    -= gStreamParam.producedLength;
                          6510	#2952: #if defined( FBL_ENABLE_PROCESSED_DATA_LENGTH )
                          6511	#2953:                   /* Length actually written */
                          6512	#2954:                   gSegInfo.writtenLength  += gStreamParam.producedLength;
                          6513	#2955: #endif /* FBL_ENABLE_PROCESSED_DATA_LENGTH */
                          6514	#2956:                }
                          6515	#2957:             }
                          6516	#2959:          }
                          6517	#2961:          break;
                          6518	#2962:       }
                          6519	#2963: #endif /* FBL_MEM_ENABLE_STREAM_OUTPUT */
                          6520	#2964: #if defined( FBL_MEM_ENABLE_GAP_FILL )
                          6521	#2965:       case kFblMemJobType_GapFill:
                          6522	#2966:       {
                          6523	#2967:          /* Start address of current fill operation */
                          6524	#2968:          fillAddress    = activeJob->baseAddress + activeJob->position;
                          6525	#line2968
                          6526	..lin.1acf134f..d8d9e992.0_90::
                          6527	.LDWlin90:
0000079e c60e             6528		se_lwz	r0, 24(r30)
000007a0 c4fe             6529		se_lwz	r31, 16(r30)
000007a2 d271             6530		se_stw	r7, 8(sp)
                          6531	#2969:          /* Remember total length */
                          6532	#2970:          fillLength     = actualLength;
000007a4 040f             6533		se_add	r31, r0
                          6534	#2971:          /* Reset length actually filled */
                          6535	#2972:          actualLength   = 0u;
000007a6 4800             6536		se_li	r0, 0
000007a8 d301             6537		se_stw	r0, 12(sp)
                          6538	#2974:          /* Find start segment for current address */
                          6539	#2975:          memSegment = FblMemSegmentNrGet(fillAddress);

                                   Fri Apr 10 08:32:15 2020           Page 118
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
000007aa 01f3             6540		se_mr	r3, r31
000007ac 78000001         6541		e_bl	FblMemSegmentNrGet
000007b0 7360e000         6542		e_lis	r27, %hiadj(memSegment)
000007b4 1f7b0000         6543		e_add16i	r27, r27, %lo(memSegment)
000007b8 7380e000         6544		e_lis	r28, %hiadj(FlashBlock)
                          6545	#2977:          /* Valid segment addressed? */
                          6546	#2978:          if (memSegment < 0)
000007bc b03b             6547		se_sth	r3, 0(r27)
000007be 1f9c0000         6548		e_add16i	r28, r28, %lo(FlashBlock)
000007c2 2a03             6549		se_cmpi	r3, 0
000007c4 e000             6550		se_bge	.L2346
                          6551	#2979:          {
                          6552	#2980:             /* Address lies in gap between flash blocks
                          6553	#2981:                Range till next block can be skipped */
                          6554	#2983:             /* Use last filled address to get follow-up segment */
                          6555	#2984:             memSegment = FblMemSegmentNrGet(fillAddress - 1u) + 1;
                          6556	#line2984
                          6557	..lin.1acf134f..d8d9e992.0_91::
                          6558	.LDWlin91:
000007c6 187f84ff         6559		e_addi	r3, r31, -1
000007ca 78000001         6560		e_bl	FblMemSegmentNrGet
000007ce 70e0e000         6561		e_lis	r7, %hiadj(kNrOfFlashBlock)
000007d2 30070000         6562		e_lbz	r0, %lo(kNrOfFlashBlock)(r7)
000007d6 2003             6563		se_addi	r3, 1
                          6564	#2986:             /* Check segment range */
                          6565	#2987:             if ((memSegment >= kNrOfFlashBlock) || (memSegment <= 0))
000007d8 00f3             6566		se_extsh	r3
000007da b03b             6567		se_sth	r3, 0(r27)
000007dc 0c03             6568		se_cmp	r3, r0
000007de e000             6569		se_bge	.L2349
000007e0 2a03             6570		se_cmpi	r3, 0
000007e2 e500             6571		se_bgt	.L2348
                          6572	.L2349:
                          6573	#2988:             {
                          6574	#2989:                FBL_MEM_SET_STATUS(ProgramOutsideFbt, gErrorStatus);  /* PRQA S 3109 */ /* MD_MSR_14.3 */
                          6575	#line2989
                          6576	..lin.1acf134f..d8d9e992.0_92::
                          6577	.LDWlin92:
000007e4 4a30             6578		se_li	r0, 35
000007e6 70e0e000         6579		e_lis	r7, %hiadj(errStatErrorCode)
000007ea 5c070000         6580		e_sth	r0, %lo(errStatErrorCode)(r7)
000007ee 4f10             6581		se_li	r0, 113
000007f0 d00d             6582		se_stw	r0, 0(r29)
000007f2 e800             6583		se_b	.L2346
                          6584	.L2348:
                          6585	#2990:             }
                          6586	#2991:             else
                          6587	#2992:             {
                          6588	#2993:                /* Skip gap */
                          6589	#2994:                if (FlashBlock[memSegment].begin > fillAddress)
                          6590	#line2994
                          6591	..lin.1acf134f..d8d9e992.0_93::
                          6592	.LDWlin93:
000007f4 18e3a00c         6593		e_mulli	r7, r3, 12
000007f8 7ce7e02e         6594		lwzx	r7, r7, r28
000007fc 0df7             6595		se_cmpl	r7, r31

                                   Fri Apr 10 08:32:15 2020           Page 119
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
000007fe e100             6596		se_ble	.L2352
                          6597	#2995:                {
                          6598	#2996:                   /* Distance to start of next flash block can be skipped */
                          6599	#2997:                   tempLength = FlashBlock[memSegment].begin - fillAddress;
                          6600	#line2997
                          6601	..lin.1acf134f..d8d9e992.0_94::
                          6602	.LDWlin94:
00000800 c261             6603		se_lwz	r6, 8(sp)
                          6604	#2999:                   if (tempLength < fillLength)
00000802 7c1f3850         6605		subf	r0, r31, r7
00000806 0d60             6606		se_cmpl	r0, r6
00000808 e000             6607		se_bge	.L2352
                          6608	#3000:                   {
                          6609	#3001:                      /* Range partially covers next flash block
                          6610	#3002:                         Adapt fill range accordingly */
                          6611	#3003:                      actualLength = tempLength;
                          6612	#line3003
                          6613	..lin.1acf134f..d8d9e992.0_95::
                          6614	.LDWlin95:
0000080a d301             6615		se_stw	r0, 12(sp)
                          6616	#3004:                      fillLength  -= actualLength;
0000080c 0760             6617		se_subf	r0, r6
0000080e d201             6618		se_stw	r0, 8(sp)
                          6619	#3005:                      fillAddress  = FlashBlock[memSegment].begin;
00000810 017f             6620		se_mr	r31, r7
00000812 e800             6621		se_b	.L2346
                          6622	.L2352:
                          6623	#3006:                   }
                          6624	#3007:                   else
                          6625	#3008:                   {
                          6626	#3009:                      /* Full range lies within gap and can be skipped completely */
                          6627	#3010:                      actualLength   = fillLength;
                          6628	#3011:                      fillLength     = 0u;
                          6629	#3012:                   }
                          6630	#3013:                }
                          6631	#3014:                else
                          6632	#3015:                {
                          6633	#3016:                   /* Full range lies within gap and can be skipped completely */
                          6634	#3017:                   actualLength   = fillLength;
                          6635	#line3017
                          6636	..lin.1acf134f..d8d9e992.0_96::
                          6637	.LDWlin96:
00000814 c201             6638		se_lwz	r0, 8(sp)
00000816 d301             6639		se_stw	r0, 12(sp)
                          6640	#3018:                   fillLength     = 0u;
00000818 4800             6641		se_li	r0, 0
0000081a d201             6642		se_stw	r0, 8(sp)
                          6643	.L2346:
                          6644	#3019:                }
                          6645	#3020:             }
                          6646	#3021:          }
                          6647	#3023:          if (kFblMemStatus_Ok == gErrorStatus)
0000081c c04d             6648		se_lwz	r4, 0(r29)
0000081e 2a04             6649		se_cmpi	r4, 0
00000820 e200             6650		se_bne	.L2344
                          6651	#3024:          {

                                   Fri Apr 10 08:32:15 2020           Page 120
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          6652	#3025:             /* Limit fill operation to configured segmentation (equals size of prepared buffer) */
                          6653	#3026:             if (fillLength > FBL_MEM_GAP_FILL_SEGMENTATION)
                          6654	#line3026
                          6655	..lin.1acf134f..d8d9e992.0_97::
                          6656	.LDWlin97:
00000822 c261             6657		se_lwz	r6, 8(sp)
00000824 1886a901         6658		e_cmpli	r6, 256
00000828 e100             6659		se_ble	.L2360
                          6660	#3027:             {
                          6661	#3028:                fillLength = FBL_MEM_GAP_FILL_SEGMENTATION;
                          6662	#line3028
                          6663	..lin.1acf134f..d8d9e992.0_98::
                          6664	.LDWlin98:
0000082a 6376             6665		se_bgeni	r6, 23
0000082c d261             6666		se_stw	r6, 8(sp)
                          6667	.L2360:
                          6668	#3029:             }
                          6669	#3031:             /* Distance to end of current flash block */
                          6670	#3032:             tempLength =(FlashBlock[memSegment].end - fillAddress) + 1u;
0000082e 18e3a00c         6671		e_mulli	r7, r3, 12
00000832 04c7             6672		se_add	r7, r28
00000834 c107             6673		se_lwz	r0, 4(r7)
00000836 06f0             6674		se_sub	r0, r31
00000838 2000             6675		se_addi	r0, 1
                          6676	#3033:             /* Limit fill range to current flash block */
                          6677	#3034:             if (fillLength > tempLength)
0000083a 0d06             6678		se_cmpl	r6, r0
0000083c e100             6679		se_ble	.L2362
                          6680	#3035:             {
                          6681	#3036:                fillLength = tempLength;
                          6682	#line3036
                          6683	..lin.1acf134f..d8d9e992.0_99::
                          6684	.LDWlin99:
0000083e d201             6685		se_stw	r0, 8(sp)
00000840 0106             6686		se_mr	r6, r0
                          6687	.L2362:
                          6688	#3037:             }
                          6689	#3039:             /* Perform actual fill operation */
                          6690	#3040:             if (fillLength > 0u)
00000842 2a06             6691		se_cmpi	r6, 0
00000844 e600             6692		se_beq	.L2344
                          6693	#3041:             {
                          6694	#3042:                /* Program non-volatile memory */
                          6695	#3043:                gErrorStatus = FblMemProgramBufferInternal(fillAddress, &fillLength, gGapFillBuffer.data, kFblMemProgState_Pending);
                          6696	#line3043
                          6697	..lin.1acf134f..d8d9e992.0_100::
                          6698	.LDWlin100:
00000846 70a0e000         6699		e_lis	r5, %hiadj(gGapFillBuffer+4)
0000084a 01f3             6700		se_mr	r3, r31
0000084c 1ca50004         6701		e_add16i	r5, r5, %lo(gGapFillBuffer+4)
00000850 18818008         6702		e_addi	r4, sp, 8
00000854 4856             6703		se_li	r6, 5
00000856 78000001         6704		se_bl	FblMemProgramBufferInternal
0000085a c301             6705		se_lwz	r0, 12(sp)
0000085c c271             6706		se_lwz	r7, 8(sp)
                          6707	#3045:                /* Update length actually processed */

                                   Fri Apr 10 08:32:15 2020           Page 121
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          6708	#3046:                actualLength += fillLength;
                          6709	#line3046
                          6710	..lin.1acf134f..d8d9e992.0_101::
                          6711	.LDWlin101:
0000085e d03d             6712		se_stw	r3, 0(r29)
00000860 0134             6713		se_mr	r4, r3
00000862 0470             6714		se_add	r0, r7
00000864 d301             6715		se_stw	r0, 12(sp)
                          6716	.L2344:
                          6717	#3068:       }
                          6718	#3069:    }
                          6719	#3071:    /* Update buffer usage */
                          6720	#3072:    activeJob->position  += actualLength;
00000866 c40e             6721		se_lwz	r0, 16(r30)
00000868 c371             6722		se_lwz	r7, 12(sp)
0000086a 0470             6723		se_add	r0, r7
0000086c d40e             6724		se_stw	r0, 16(r30)
                          6725	#3073:    activeJob->used      -= actualLength;
0000086e c50e             6726		se_lwz	r0, 20(r30)
00000870 0670             6727		se_sub	r0, r7
00000872 d50e             6728		se_stw	r0, 20(r30)
                          6729	#3075: #if defined( FBL_ENABLE_SYSTEM_CHECK )
                          6730	#3076:    if (kFblMemStatus_Ok == gErrorStatus)
00000874 2a04             6731		se_cmpi	r4, 0
00000876 e200             6732		se_bne	.L2368
                          6733	#3077:    {
                          6734	#3078:       if (kFblMemStatus_Ok != FblMemVerifyBufferIntegrity())
                          6735	#line3078
                          6736	..lin.1acf134f..d8d9e992.0_102::
                          6737	.LDWlin102:
00000878 78000001         6738		se_bl	FblMemVerifyBufferIntegrity
0000087c 2a03             6739		se_cmpi	r3, 0
0000087e e600             6740		se_beq	.L2368
                          6741	#3079:       {
                          6742	#3080:          /* Detected buffer corruption */
                          6743	#3081:          FBL_MEM_SET_STATUS(Failed, gErrorStatus);  /* PRQA S 3109 */ /* MD_MSR_14.3 */
                          6744	#line3081
                          6745	..lin.1acf134f..d8d9e992.0_103::
                          6746	.LDWlin103:
00000880 4a24             6747		se_li	r4, 34
00000882 d04d             6748		se_stw	r4, 0(r29)
                          6749	.L2368:
                          6750	#3082:       }
                          6751	#3083:    }
                          6752	#3084: #endif /* FBL_ENABLE_SYSTEM_CHECK */
                          6753	#3086:    /* Return global error state as function may be called in both service and background context */
                          6754	#3087:    return gErrorStatus;
00000884 0143             6755		se_mr	r3, r4
                          6756	#	    .ef
                          6757	.LDW36:
00000886 cb01             6758		se_lwz	r0, 44(sp)
00000888 1b610814         6759		e_lmw	r27, 20(sp)
0000088c 18218028         6760		e_addi	sp, sp, 40
00000890 0090             6761		se_mtlr	r0
00000892 0004             6762		se_blr
                          6763	__ghs_eofn_FblMemProcessJob:

                                   Fri Apr 10 08:32:15 2020           Page 122
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          6764		.type	FblMemProcessJob,@function
                          6765		.size	FblMemProcessJob,$-FblMemProcessJob
                          6766		.type	FblMemProcessJob..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.,@function
                          6767		.size	FblMemProcessJob..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.,$-FblMemProcessJob..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
                          6768		.align	1
                          6769	
                          6770	#function:			FblMemProcessJob
                          6771	#stack frame size:		40
                          6772	#link area offset:		0
                          6773	#local storage area offset:	12
                          6774	#gpr save area offset:		20
                          6775	#
                          6776	#actualLength	12(sp)	local
                          6777	#fillAddress	r31	local
                          6778	#fillLength	8(sp)	local
                          6779	#tempLength	r0	local
                          6780	#finalizeStream	r5	local
                          6781	
                          6782	#activeJob	r30	param
                          6783	#mode	none	param
                          6784	
                          6785		.data
                          6786		.section ".vletext", "vax"
                          6787		.vle
                          6788		.vle
                          6789	
                          6790	#3088: } /* PRQA S 6010, 6030, 6050, 6080, 4700 */ /* MD_MSR_STPTH, MD_MSR_STCYC, MD_MSR_STCAL, MD_MSR_STMIF, MD_FblMem_4700  */
                          6791	
                          6792	#3090: /***********************************************************************************************************************
                          6793	#3091:  *  FblMemProcessQueue
                          6794	#3092:  **********************************************************************************************************************/
                          6795	#3093: /*! \brief      Process first job in processing queue (directly use single input job if un-queued)
                          6796	#3094:  *  \details    Remove finished job from processing queue (and pipelined queue in case of input job)
                          6797	#3095:  *              Switch to idle mode if all pending jobs are finished
                          6798	#3096:  *  \pre        FblMemQueueBuffer executed before
                          6799	#3097:  *  \param[in]  mode Operation mode used to trigger finalization
                          6800	#3098:  **********************************************************************************************************************/
                          6801		.align	1
                          6802		.align	1
                          6803	..gh.f.p.3.a.1.r.0.e.27:
                          6804		.type	..gh.f.p.3.a.1.r.0.e.27,@object
                          6805		.size	..gh.f.p.3.a.1.r.0.e.27,0
                          6806		.global	FblMemProcessQueue..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
                          6807	FblMemProcessQueue..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.:
                          6808	FblMemProcessQueue:
00000894 182106e0         6809		e_stwu	sp, -32(sp)
00000898 1b61090c         6810		e_stmw	r27, 12(sp)
0000089c 013c             6811		se_mr	r28, r3
0000089e 0080             6812		se_mflr	r0
000008a0 d901             6813		se_stw	r0, 36(sp)
                          6814	#	    .bf
                          6815	.LDW46:
                          6816	#3099: static void FblMemProcessQueue( tFblMemOperationMode mode )
                          6817	#3100: {
                          6818	#3101: #if defined( FBL_MEM_ENABLE_PROC_QUEUE )
                          6819	#3102:    tFblMemQueueHandle activeHandle;

                                   Fri Apr 10 08:32:15 2020           Page 123
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          6820	#3103: #endif /* FBL_MEM_ENABLE_PROC_QUEUE */
                          6821	#3104:    V_MEMRAM1 tFblMemJob V_MEMRAM2 V_MEMRAM3 * activeJob;
                          6822	#3106:    FblMemTriggerWatchdog();
000008a2 78000001         6823		se_bl	FblMemTriggerWatchdog
                          6824	#3108:    /*
                          6825	#3109:       Critical section secures access to programming state
                          6826	#3110:       May also be altered in interrupt context
                          6827	#3111:    */
                          6828	#3112:    __ApplFblMemEnterCriticalSection();
                          6829	#3114:    /*
                          6830	#3115:       Module in idle or error state?
                          6831	#3116:       Condition equals ((kFblMemProgState_Idle == fblMemProgState) || (kFblMemProgState_Error == fblMemProgState))
                          6832	#3117:    */
                          6833	#3118:    if (fblMemProgState < kFblMemProgState_Suspended)
                          6834	#line3118
                          6835	..lin.1acf134f..777ca81c.0_104::
                          6836	.LDWlin104:
000008a6 73a0e000         6837		e_lis	r29, %hiadj(fblMemProgState)
000008aa 1fbd0000         6838		e_add16i	r29, r29, %lo(fblMemProgState)
000008ae c00d             6839		se_lwz	r0, 0(r29)
000008b0 2a20             6840		se_cmpi	r0, 2
000008b2 e400             6841		se_blt	.L2735
                          6842	#3119:    {
                          6843	#3120:       /* Nothing to do */
                          6844	#3121:    }
                          6845	#3122:    else
                          6846	#3123:    {
                          6847	#3124:       /* Operation potentially paused during previous execution cycle */
                          6848	#3125:       fblMemProgState = kFblMemProgState_Pending;
                          6849	#line3125
                          6850	..lin.1acf134f..777ca81c.0_105::
                          6851	.LDWlin105:
000008b4 4850             6852		se_li	r0, 5
000008b6 d00d             6853		se_stw	r0, 0(r29)
                          6854	.L2735:
                          6855	#3126:    }
                          6856	#3128:    /*
                          6857	#3129:       No further critical access to programming state
                          6858	#3130:       Critical section can be left
                          6859	#3131:    */
                          6860	#3132:    __ApplFblMemLeaveCriticalSection();
                          6861	#3134:    if (kFblMemProgState_Pending == fblMemProgState)
000008b8 2a50             6862		se_cmpi	r0, 5
000008ba e200             6863		se_bne	.L2731
                          6864	#3135:    {
                          6865	#3136: #if defined( FBL_MEM_ENABLE_PROC_QUEUE )
                          6866	#3137:       /* Set active job, stored in first entry of processing queue */
                          6867	#3138:       activeHandle      = FblMemQueueGetFirstUsedHandle(gProcessingQueue);
                          6868	#line3138
                          6869	..lin.1acf134f..777ca81c.0_106::
                          6870	.LDWlin106:
000008bc 73e0e000         6871		e_lis	r31, %hiadj(gProcessingQueue)
000008c0 1fff0000         6872		e_add16i	r31, r31, %lo(gProcessingQueue)
000008c4 c3bf             6873		se_lwz	r27, 12(r31)
                          6874	#3139:       activeJob         = gProcessingQueue[activeHandle].job;
000008c6 7f672070         6875		e_slwi	r7, r27, 4

                                   Fri Apr 10 08:32:15 2020           Page 124
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
000008ca 7fc7f82e         6876		lwzx	r30, r7, r31
                          6877	#3140: #else
                          6878	#3141:       /* Set active job to single input job */
                          6879	#3142:       activeJob         = &FBL_MEM_INPUT_JOB[0];
                          6880	#3143: #endif /* FBL_MEM_ENABLE_PROC_QUEUE */
                          6881	#3145:       /* Perform processing cycle on active job */
                          6882	#3146:       if (kFblMemStatus_Ok == FblMemProcessJob(activeJob, mode))
000008ce 01c4             6883		se_mr	r4, r28
000008d0 01e3             6884		se_mr	r3, r30
000008d2 78000001         6885		se_bl	FblMemProcessJob
000008d6 2a03             6886		se_cmpi	r3, 0
000008d8 e200             6887		se_bne	.L2738
                          6888	#3147:       {
                          6889	#3148:          /* Buffer completely processed and completion mode allows job to be cleared? */
                          6890	#3149:          if (  (kFblMemOperationMode_Unconditional == activeJob->completion)
                          6891	#line3149
                          6892	..lin.1acf134f..777ca81c.0_107::
                          6893	.LDWlin107:
000008da c80e             6894		se_lwz	r0, 32(r30)
000008dc 2a20             6895		se_cmpi	r0, 2
000008de e600             6896		se_beq	.L2741
000008e0 2a00             6897		se_cmpi	r0, 0
000008e2 e200             6898		se_bne	.L2731
000008e4 c50e             6899		se_lwz	r0, 20(r30)
000008e6 2a00             6900		se_cmpi	r0, 0
000008e8 e200             6901		se_bne	.L2731
                          6902	.L2741:
                          6903	#3150:             || ((kFblMemOperationMode_Normal == activeJob->completion) && (0u == activeJob->used)) )
                          6904	#3151:          {
                          6905	#3152: #if defined( FBL_MEM_ENABLE_PROC_QUEUE )
                          6906	#3153:             /* Remove buffer from processing queue */
                          6907	#3154:             (void)FblMemQueueRemove(gProcessingQueue, activeHandle);
                          6908	#line3154
                          6909	..lin.1acf134f..777ca81c.0_108::
                          6910	.LDWlin108:
000008ea 01f3             6911		se_mr	r3, r31
000008ec 01b4             6912		se_mr	r4, r27
000008ee 78000001         6913		se_bl	FblMemQueueRemove
                          6914	#3156:             if (FblMemQueueIsEmpty(gProcessingQueue))
                          6915	#line3156
                          6916	..lin.1acf134f..777ca81c.0_109::
                          6917	.LDWlin109:
000008f2 c30f             6918		se_lwz	r0, 12(r31)
000008f4 2a00             6919		se_cmpi	r0, 0
000008f6 e200             6920		se_bne	.L2731
                          6921	#3157: #endif /* FBL_MEM_ENABLE_PROC_QUEUE */
                          6922	#3158:             {
                          6923	#3159:                /* Processing queue empty: switch to idle state */
                          6924	#3160:                fblMemProgState = kFblMemProgState_Idle;
                          6925	#line3160
                          6926	..lin.1acf134f..777ca81c.0_110::
                          6927	.LDWlin110:
000008f8 e800             6928		se_b	.L2778
                          6929	.L2738:
                          6930	#3161:             }
                          6931	#3163:          }

                                   Fri Apr 10 08:32:15 2020           Page 125
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          6932	#3164:       }
                          6933	#3165:       else
                          6934	#3166:       {
                          6935	#3167:          /* Error while processing buffer: switch to error state */
                          6936	#3168:          fblMemProgState = kFblMemProgState_Error;
                          6937	#line3168
                          6938	..lin.1acf134f..777ca81c.0_111::
                          6939	.LDWlin111:
000008fa 4810             6940		se_li	r0, 1
                          6941	.L2778:
000008fc d00d             6942		se_stw	r0, 0(r29)
                          6943	.L2731:
                          6944	#3170:       }
                          6945	#3172:    }
                          6946	#3173: } /* PRQA S 6080, 2006 */ /* MD_MSR_STMIF, MD_MSR_14.7 */
                          6947	#	    .ef
                          6948	.LDW56:
000008fe c901             6949		se_lwz	r0, 36(sp)
00000900 1b61080c         6950		e_lmw	r27, 12(sp)
00000904 21f1             6951		se_addi	sp, 32
00000906 0090             6952		se_mtlr	r0
00000908 0004             6953		se_blr
                          6954	__ghs_eofn_FblMemProcessQueue:
                          6955		.type	FblMemProcessQueue,@function
                          6956		.size	FblMemProcessQueue,$-FblMemProcessQueue
                          6957		.type	FblMemProcessQueue..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.,@function
                          6958		.size	FblMemProcessQueue..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.,$-FblMemProcessQueue..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
                          6959		.align	1
                          6960	
                          6961	#function:			FblMemProcessQueue
                          6962	#stack frame size:		32
                          6963	#link area offset:		0
                          6964	#local storage area offset:	12
                          6965	#gpr save area offset:		12
                          6966	#
                          6967	#activeHandle	r27	local
                          6968	#activeJob	r30	local
                          6969	
                          6970	#mode	r28	param
                          6971	
                          6972		.data
                          6973		.section ".vletext", "vax"
                          6974		.vle
                          6975		.vle
                          6976	
                          6977	
                          6978	#3175: /***********************************************************************************************************************
                          6979	#3176:  *  FblMemFlushQueueByPrio
                          6980	#3177:  **********************************************************************************************************************/
                          6981	#3178: /*! \brief      Process all jobs in processing queue with priority greater or equal to given value
                          6982	#3179:  *  \details    Loop until processing queue is empty or a job with a priority lower to the given one is reached
                          6983	#3180:  *  \pre        FblMemQueueBuffer executed before
                          6984	#3181:  *  \param[in]  prio Lowest job priority to be processed
                          6985	#3182:  **********************************************************************************************************************/
                          6986		.align	1
                          6987		.align	1

                                   Fri Apr 10 08:32:15 2020           Page 126
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          6988	..gh.f.p.3.a.1.r.0.e.28:
                          6989		.type	..gh.f.p.3.a.1.r.0.e.28,@object
                          6990		.size	..gh.f.p.3.a.1.r.0.e.28,0
                          6991		.global	FblMemFlushQueueByPrio..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
                          6992	FblMemFlushQueueByPrio..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.:
                          6993	FblMemFlushQueueByPrio:
0000090a 182106f0         6994		e_stwu	sp, -16(sp)
0000090e 0080             6995		se_mflr	r0
00000910 d3f1             6996		se_stw	r31, 12(sp)
00000912 d501             6997		se_stw	r0, 20(sp)
00000914 013f             6998		se_mr	r31, r3
                          6999	#	    .bf
                          7000	.LDW66:
                          7001	#3183: static void FblMemFlushQueueByPrio( tFblMemQueuePrio prio )
                          7002	#3184: {
                          7003	#3185: #if defined( V_ENABLE_USE_DUMMY_STATEMENT )
                          7004	#3186:    /* Parameters not used: avoid compiler warning */
                          7005	#3187: # if defined( FBL_MEM_ENABLE_PROC_QUEUE )
                          7006	#3188: # else
                          7007	#3189:    (void)prio; /* PRQA S 3112 */ /* MD_FblMem_3112 */
                          7008	#3190: # endif /* FBL_MEM_ENABLE_PROC_QUEUE */
                          7009	#3191: #endif /* V_ENABLE_USE_DUMMY_STATEMENT */
                          7010	#3193:    /* Loop while jobs are pending */
                          7011	#3194:    while ( (FblMemTaskIsPending())
00000916 e800             7012		se_b	.L3209
                          7013	.L3211:
                          7014	#3195: #if defined( FBL_MEM_ENABLE_PROC_QUEUE )
                          7015	#3196:         /* Only jobs with priority greater or equal to given one are processed */
                          7016	#3197:         && (FblMemQueueGetFirstUsedEntry(gProcessingQueue).prio >= prio)
                          7017	#3198: #endif
                          7018	#3199:          )
                          7019	#3200:    {
                          7020	#3201:       /* Execute processing cycle */
                          7021	#3202:       FblMemProcessQueue(kFblMemOperationMode_Finalize);
                          7022	#line3202
                          7023	..lin.1acf134f..4c35d9b4.0_112::
                          7024	.LDWlin112:
00000918 4813             7025		se_li	r3, 1
0000091a e900             7026		se_bl	FblMemProcessQueue
                          7027	.L3209:
                          7028	#line3194
                          7029	..lin.1acf134f..4c35d9b4.0_113::
                          7030	.LDWlin113:
0000091c 70e0e000         7031		e_lis	r7, %hiadj(fblMemProgState)
00000920 50e70000         7032		e_lwz	r7, %lo(fblMemProgState)(r7)
00000924 2a27             7033		se_cmpi	r7, 2
00000926 e400             7034		se_blt	.L3207
00000928 70e0e000         7035		e_lis	r7, %hiadj(gProcessingQueue)
0000092c 1ce70000         7036		e_add16i	r7, r7, %lo(gProcessingQueue)
00000930 c367             7037		se_lwz	r6, 12(r7)
00000932 6c46             7038		se_slwi	r6, 4
00000934 0476             7039		se_add	r6, r7
00000936 8406             7040		se_lbz	r0, 4(r6)
00000938 0df0             7041		se_cmpl	r0, r31
0000093a e000             7042		se_bge	.L3211
                          7043	.L3207:

                                   Fri Apr 10 08:32:15 2020           Page 127
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          7044	#3203:    }
                          7045	#3204: }
                          7046	#	    .ef
                          7047	.LDW76:
                          7048	#line3204
                          7049	..lin.1acf134f..4c35d9b4.0_114::
                          7050	.LDWlin114:
0000093c c501             7051		se_lwz	r0, 20(sp)
0000093e c3f1             7052		se_lwz	r31, 12(sp)
00000940 20f1             7053		se_addi	sp, 16
00000942 0090             7054		se_mtlr	r0
00000944 0004             7055		se_blr
                          7056	__ghs_eofn_FblMemFlushQueueByPrio:
                          7057		.type	FblMemFlushQueueByPrio,@function
                          7058		.size	FblMemFlushQueueByPrio,$-FblMemFlushQueueByPrio
                          7059		.type	FblMemFlushQueueByPrio..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.,@function
                          7060		.size	FblMemFlushQueueByPrio..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.,$-FblMemFlushQueueByPrio..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
                          7061		.align	1
                          7062	
                          7063	#function:			FblMemFlushQueueByPrio
                          7064	#stack frame size:		16
                          7065	#link area offset:		0
                          7066	#local storage area offset:	12
                          7067	#gpr save area offset:		12
                          7068	#
                          7069	
                          7070	#prio	r31	param
                          7071	
                          7072		.data
                          7073		.section ".vletext", "vax"
                          7074		.vle
                          7075		.vle
                          7076	
                          7077	
                          7078	#3207: /***********************************************************************************************************************
                          7079	#3208:  *  FblMemQueueBuffer
                          7080	#3209:  **********************************************************************************************************************/
                          7081	#3210: /*! \brief      Handle new chunk of input data
                          7082	#3211:  *  \details    If any combination of verification, data processing and pipelined programming is configured add jobs to
                          7083	#3212:  *              processing queue
                          7084	#3213:  *              Otherwise processing will directly work on single input buffer
                          7085	#3214:  *              If pipelined programming is configured queue buffer and finish processing of one pending input buffer
                          7086	#3215:  *              in case no free input buffer is available
                          7087	#3216:  *  \pre        FblMemInitPowerOn executed before, provided buffer and data offset equal the parameters of active
                          7088	#3217:  *              input buffer
                          7089	#3218:  *  \param[in]  buffer Pointer to input buffer (including preamble)
                          7090	#3219:  *  \param[in]  offset Offset of actual data (after preamble)
                          7091	#3220:  *  \param[in]  length Length of data (without preamble)
                          7092	#3221:  *  \return     Result of operation (potentially remapped to OEM specific NRC)
                          7093	#3222:  **********************************************************************************************************************/
                          7094		.align	1
                          7095		.align	1
                          7096	..gh.f.p.5.a.1.r.0.e.29:
                          7097		.type	..gh.f.p.5.a.1.r.0.e.29,@object
                          7098		.size	..gh.f.p.5.a.1.r.0.e.29,0
                          7099		.global	FblMemQueueBuffer..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.

                                   Fri Apr 10 08:32:15 2020           Page 128
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          7100	FblMemQueueBuffer..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.:
                          7101	FblMemQueueBuffer:
00000946 182106e8         7102		e_stwu	sp, -24(sp)
0000094a 0080             7103		se_mflr	r0
0000094c 1b810908         7104		e_stmw	r28, 8(sp)
00000950 d701             7105		se_stw	r0, 28(sp)
00000952 013c             7106		se_mr	r28, r3
00000954 014f             7107		se_mr	r31, r4
00000956 015d             7108		se_mr	r29, r5
                          7109	#	    .bf
                          7110	.LDW86:
                          7111	#3223: static tFblMemStatus FblMemQueueBuffer( tFblMemConstRamData buffer, tFblLength offset, tFblLength length )
                          7112	#3224: {
                          7113	#3225:    tFblMemStatus  retVal;
                          7114	#3226:    V_MEMRAM1 tFblMemJob V_MEMRAM2 V_MEMRAM3 * activeJob;
                          7115	#3228: #if defined( V_ENABLE_USE_DUMMY_STATEMENT )
                          7116	#3229:    /* Parameters not used: avoid compiler warning */
                          7117	#3230: # if defined( FBL_MEM_ENABLE_SEGMENTED_INPUT_BUFFER ) || \
                          7118	#3231:      defined( FBL_ENABLE_SYSTEM_CHECK )               || \
                          7119	#3232:      defined( FBL_ENABLE_ASSERTION )
                          7120	#3233: # else
                          7121	#3234:    (void)buffer; /* PRQA S 3112 */ /* MD_FblMem_3112 */
                          7122	#3235: # endif /* FBL_MEM_ENABLE_SEGMENTED_INPUT_BUFFER || FBL_ENABLE_SYSTEM_CHECK || FBL_ENABLE_ASSERTION */
                          7123	#3236: #endif /* V_ENABLE_USE_DUMMY_STATEMENT */
                          7124	#3238:    /* Received data resides in active fill buffer */
                          7125	#3239:    activeJob = FblMemGetPendingInputJob();
                          7126	#3241: #if defined( FBL_MEM_ENABLE_SEGMENTED_INPUT_BUFFER ) || \
                          7127	#3242:     defined( FBL_ENABLE_SYSTEM_CHECK )
                          7128	#3243: # if defined( FBL_MEM_ENABLE_SEGMENTED_INPUT_BUFFER )
                          7129	#3244:    if (kFblMemStatus_Ok != FblMemRelocateBufferOffset(activeJob, buffer, offset, length))
                          7130	#3245: # else /* FBL_ENABLE_SYSTEM_CHECK */
                          7131	#3246:    /* Limit buffer handling to previously provided buffer */
                          7132	#3247:    if ( (buffer != FblMemGetBuffer(activeJob))
00000958 73c0e000         7133		e_lis	r30, %hiadj(gInputJobs)
0000095c 1fde0000         7134		e_add16i	r30, r30, %lo(gInputJobs)
00000960 01e3             7135		se_mr	r3, r30
00000962 78000001         7136		se_bl	FblMemGetBuffer
00000966 0d3c             7137		se_cmpl	r28, r3
00000968 e200             7138		se_bne	.L3281
0000096a c20e             7139		se_lwz	r0, 8(r30)
0000096c 0d0f             7140		se_cmpl	r31, r0
0000096e e000             7141		se_bge	.L3281
00000970 06f0             7142		se_sub	r0, r31
00000972 0d0d             7143		se_cmpl	r29, r0
00000974 e100             7144		se_ble	.L3280
                          7145	.L3281:
                          7146	#3248:      || (offset >= activeJob->netSize)
                          7147	#3249:      || (length > (activeJob->netSize - offset)) )
                          7148	#3250: # endif /* FBL_MEM_ENABLE_SEGMENTED_INPUT_BUFFER */
                          7149	#3251:    {
                          7150	#3252:       FBL_MEM_SET_STATUS(DataIndParam, retVal); /* PRQA S 3109 */ /* MD_MSR_14.3 */
                          7151	#line3252
                          7152	..lin.1acf134f..233eb197.0_115::
                          7153	.LDWlin115:
00000976 4f23             7154		se_li	r3, 114
00000978 e800             7155		se_b	.L3278

                                   Fri Apr 10 08:32:15 2020           Page 129
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          7156	.L3280:
                          7157	#3253:    }
                          7158	#3254:    else
                          7159	#3255: #else
                          7160	#3256:    assertFblUser(buffer == FblMemGetBuffer(activeJob),      kFblMemAssertParameterOutOfRange); /* PRQA S 2214 */ /* MD_FblDef_Assert */
                          7161	#3257:    assertFblUser(offset <  activeJob->netSize,              kFblMemAssertParameterOutOfRange); /* PRQA S 2214 */ /* MD_FblDef_Assert */
                          7162	#3258:    assertFblUser(length <= (activeJob->netSize - offset),   kFblMemAssertParameterOutOfRange); /* PRQA S 2214 */ /* MD_FblDef_Assert */
                          7163	#3259: #endif /* FBL_MEM_ENABLE_SEGMENTED_INPUT_BUFFER || FBL_ENABLE_SYSTEM_CHECK */
                          7164	#3260:    {
                          7165	#3262:       /* Evaluate current error state and directly return if not okay (error in background task) */
                          7166	#3263:       if (kFblMemProgState_Error != fblMemProgState)
                          7167	#line3263
                          7168	..lin.1acf134f..233eb197.0_116::
                          7169	.LDWlin116:
0000097a 7380e000         7170		e_lis	r28, %hiadj(fblMemProgState)
0000097e 1f9c0000         7171		e_add16i	r28, r28, %lo(fblMemProgState)
00000982 c00c             7172		se_lwz	r0, 0(r28)
00000984 2a10             7173		se_cmpi	r0, 1
00000986 e600             7174		se_beq	.L3285
                          7175	#3264:       {
                          7176	#3265:          /* Update buffer state with provided information */
                          7177	#3266:          activeJob->position  = activeJob->offset + offset;
                          7178	#line3266
                          7179	..lin.1acf134f..233eb197.0_117::
                          7180	.LDWlin117:
00000988 c30e             7181		se_lwz	r0, 12(r30)
0000098a 70e0e000         7182		e_lis	r7, %hiadj(gSegInfo)
0000098e 1ce70000         7183		e_add16i	r7, r7, %lo(gSegInfo)
                          7184	#3267:          activeJob->used      = length;
00000992 cb57             7185		se_lwz	r5, 44(r7)
                          7186	#3268: #if defined( FBL_ENABLE_DATA_PROCESSING )    || \
                          7187	#3269:     defined( FBL_MEM_ENABLE_STREAM_OUTPUT )  || \
                          7188	#3270:     defined( FBL_MEM_ENABLE_REMAINDER_HANDLING )
                          7189	#3271:          /*
                          7190	#3272:             Switch type of input buffer to value set in segment indication:
                          7191	#3273:             write through, pass through, data processing or stream output
                          7192	#3274:          */
                          7193	#3275:          activeJob->type      = gSegInfo.jobType;
00000994 04f0             7194		se_add	r0, r31
00000996 d40e             7195		se_stw	r0, 16(r30)
00000998 ca07             7196		se_lwz	r0, 40(r7)
0000099a 7060e000         7197		e_lis	r3, %hiadj(gProcessingQueue)
                          7198	#3276: #endif /* FBL_ENABLE_DATA_PROCESSING || FBL_MEM_ENABLE_STREAM_OUTPUT || FBL_MEM_ENABLE_PASSTHROUGH || FBL_MEM_ENABLE_REMAINDER_HANDLING */
                          7199	#3278:          {
                          7200	#3279:          }
                          7201	#3281: #if defined( FBL_MEM_ENABLE_PROC_QUEUE )
                          7202	#3282:          {
                          7203	#3283:             /* Append buffer to processing queue */
                          7204	#3284:             (void)FblMemQueueDefaultPrioInsert(gProcessingQueue, activeJob, gSegInfo.ownIndex);
0000099e d5de             7205		se_stw	r29, 20(r30)
000009a0 01e4             7206		se_mr	r4, r30
000009a2 d70e             7207		se_stw	r0, 28(r30)
000009a4 1c630000         7208		e_add16i	r3, r3, %lo(gProcessingQueue)
000009a8 78000001         7209		se_bl	FblMemQueueDefaultPrioInsert
                          7210	#3286:          }
                          7211	#3287: #endif /* FBL_MEM_ENABLE_PROC_QUEUE */

                                   Fri Apr 10 08:32:15 2020           Page 130
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          7212	#3289:          {
                          7213	#3290:             /* Set pending programming request flag */
                          7214	#3291:             fblMemProgState = kFblMemProgState_Pending;
                          7215	#line3291
                          7216	..lin.1acf134f..233eb197.0_118::
                          7217	.LDWlin118:
000009ac 4850             7218		se_li	r0, 5
000009ae d00c             7219		se_stw	r0, 0(r28)
                          7220	.L3285:
000009b0 7060e000         7221		e_lis	r3, %hiadj(gErrorStatus)
000009b4 50630000         7222		e_lwz	r3, %lo(gErrorStatus)(r3)
                          7223	#3292:          }
                          7224	#3293:       }
                          7225	#3295:       /* Result depending on queue processing by FblMemUnblockQueue */
                          7226	#3296:       retVal = gErrorStatus;
                          7227	#3297:    }
                          7228	#3299:    return retVal;
                          7229	.L3278:
                          7230	#	    .ef
                          7231	.LDW96:
000009b8 c701             7232		se_lwz	r0, 28(sp)
000009ba 1b810808         7233		e_lmw	r28, 8(sp)
000009be 2171             7234		se_addi	sp, 24
000009c0 0090             7235		se_mtlr	r0
000009c2 0004             7236		se_blr
                          7237	__ghs_eofn_FblMemQueueBuffer:
                          7238		.type	FblMemQueueBuffer,@function
                          7239		.size	FblMemQueueBuffer,$-FblMemQueueBuffer
                          7240		.type	FblMemQueueBuffer..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.,@function
                          7241		.size	FblMemQueueBuffer..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.,$-FblMemQueueBuffer..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
                          7242		.align	1
                          7243	
                          7244	#function:			FblMemQueueBuffer
                          7245	#stack frame size:		24
                          7246	#link area offset:		0
                          7247	#local storage area offset:	8
                          7248	#gpr save area offset:		8
                          7249	#
                          7250	#retVal	r3	local
                          7251	
                          7252	#buffer	r28	param
                          7253	#offset	r31	param
                          7254	#length	r29	param
                          7255	
                          7256		.data
                          7257		.section ".vletext", "vax"
                          7258		.vle
                          7259		.vle
                          7260	
                          7261	#3300: }
                          7262	
                          7263	#3302: /***********************************************************************************************************************
                          7264	#3303:  *  FblMemCheckAllowed
                          7265	#3304:  **********************************************************************************************************************/
                          7266	#3305: /*! \brief      Check if all required states are set
                          7267	#3306:  *  \details    Clear certain states if successful, completely reset allowed states otherwise

                                   Fri Apr 10 08:32:15 2020           Page 131
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          7268	#3307:  *  \pre        Allowed state initialized before
                          7269	#3308:  *  \param[in]  check Bitmask of states which have to be active
                          7270	#3309:  *  \param[in]  clear Bitmask of states to be cleared in case check successful
                          7271	#3310:  *  \return     All required states set (kFblOk) or not (kFblFailed)
                          7272	#3311:  **********************************************************************************************************************/
                          7273		.align	1
                          7274		.align	1
                          7275	..gh.f.p.4.a.1.r.0.e.30:
                          7276		.type	..gh.f.p.4.a.1.r.0.e.30,@object
                          7277		.size	..gh.f.p.4.a.1.r.0.e.30,0
                          7278		.global	FblMemCheckAllowed..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
                          7279	FblMemCheckAllowed..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.:
                          7280	FblMemCheckAllowed:
000009c4 182106f0         7281		e_stwu	sp, -16(sp)
000009c8 0080             7282		se_mflr	r0
000009ca 1bc10908         7283		e_stmw	r30, 8(sp)
000009ce d501             7284		se_stw	r0, 20(sp)
000009d0 013f             7285		se_mr	r31, r3
000009d2 014e             7286		se_mr	r30, r4
                          7287	#	    .bf
                          7288	.LDW07:
                          7289	#3312: static tFblResult FblMemCheckAllowed( tFblMemAllowedInd check, tFblMemAllowedInd clear )
                          7290	#3313: {
                          7291	#3314:    tFblResult retVal;
                          7292	#3316:    /*
                          7293	#3317:       Check executed at beginning of (almost) every exported function
                          7294	#3318:       Trigger watchdog here
                          7295	#3319:     */
                          7296	#3320:    FblMemTriggerWatchdog();
000009d4 78000001         7297		se_bl	FblMemTriggerWatchdog
                          7298	#3323:    /* Check for required states */
                          7299	#3324:    if (FblMemIsAllowed(check))
                          7300	#line3324
                          7301	..lin.1acf134f..f54c35e.0_119::
                          7302	.LDWlin119:
000009d8 70e0e000         7303		e_lis	r7, %hiadj(gAllowedInd)
000009dc 1ce70000         7304		e_add16i	r7, r7, %lo(gAllowedInd)
000009e0 c007             7305		se_lwz	r0, 0(r7)
000009e2 7c06f838         7306		and	r6, r0, r31
000009e6 0df6             7307		se_cmpl	r6, r31
000009e8 e200             7308		se_bne	.L3398
                          7309	#3325:    {
                          7310	#3326:       /* Success: clear requested states */
                          7311	#3327:       FblMemClrAllowed(clear);
                          7312	#line3327
                          7313	..lin.1acf134f..f54c35e.0_120::
                          7314	.LDWlin120:
000009ea 45e0             7315		se_andc	r0, r30
                          7316	#3328:       retVal = kFblOk;
000009ec 4803             7317		se_li	r3, 0
000009ee e800             7318		se_b	.L3400
                          7319	.L3398:
                          7320	#3329:    }
                          7321	#3330:    else
                          7322	#3331:    {
                          7323	#3332:       /* Failure: completely reset states */

                                   Fri Apr 10 08:32:15 2020           Page 132
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          7324	#3333:       FblMemResetAllowed();
                          7325	#line3333
                          7326	..lin.1acf134f..f54c35e.0_121::
                          7327	.LDWlin121:
000009f0 4813             7328		se_li	r3, 1
                          7329	#3334:       retVal = kFblFailed;
000009f2 4800             7330		se_li	r0, 0
                          7331	.L3400:
000009f4 d007             7332		se_stw	r0, 0(r7)
                          7333	#3335:    }
                          7334	#3337:    return retVal;
                          7335	#	    .ef
                          7336	.LDW17:
000009f6 c501             7337		se_lwz	r0, 20(sp)
000009f8 1bc10808         7338		e_lmw	r30, 8(sp)
000009fc 20f1             7339		se_addi	sp, 16
000009fe 0090             7340		se_mtlr	r0
00000a00 0004             7341		se_blr
                          7342	__ghs_eofn_FblMemCheckAllowed:
                          7343		.type	FblMemCheckAllowed,@function
                          7344		.size	FblMemCheckAllowed,$-FblMemCheckAllowed
                          7345		.type	FblMemCheckAllowed..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.,@function
                          7346		.size	FblMemCheckAllowed..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.,$-FblMemCheckAllowed..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
                          7347		.align	1
                          7348	
                          7349	#function:			FblMemCheckAllowed
                          7350	#stack frame size:		16
                          7351	#link area offset:		0
                          7352	#local storage area offset:	8
                          7353	#gpr save area offset:		8
                          7354	#
                          7355	#retVal	r3	local
                          7356	
                          7357	#check	r31	param
                          7358	#clear	r30	param
                          7359	
                          7360		.data
                          7361		.section ".vletext", "vax"
                          7362		.vle
                          7363		.vle
                          7364	
                          7365	#3338: }
                          7366	
                          7367	#3341: #if defined( FBL_MEM_ENABLE_PROGRESS_INFO )
                          7368	#3342: /***********************************************************************************************************************
                          7369	#3343:  *  FblMemCalculateProgress
                          7370	#3344:  **********************************************************************************************************************/
                          7371	#3345: /*! \brief      Calculate progress percentage
                          7372	#3346:  *  \details    Percentage is calculated according to the current progress, the expected maximum value and the resulting
                          7373	#3347:  *              maximum percentage
                          7374	#3348:  *  \param[in]  current Current progress in arbitrary unit (e.g. bytes)
                          7375	#3349:  *  \param[in]  total Expected maximum value in arbitrary unit (e.g. bytes)
                          7376	#3350:  *  \param[in]  percentage Maximum reported percentage
                          7377	#3351:  *  \return     Current progress percentage
                          7378	#3352:  **********************************************************************************************************************/
                          7379	#3353: static vuint8 FblMemCalculateProgress( vuint32 current, vuint32 total, vuint8 percentage )

                                   Fri Apr 10 08:32:15 2020           Page 133
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          7380	#3354: {
                          7381	#3355:    vuint8 progress;
                          7382	#3357:    /* Init to maximum percentage */
                          7383	#3358:    progress = percentage;
                          7384	#3360:    /* Prevent division by zero */
                          7385	#3361:    if ((0u != total) && (0u != percentage))
                          7386	#3362:    {
                          7387	#3363:       /* Calculate progress value
                          7388	#3364:          Use different calculation paths depending on total value to prevent integer overflow or division by zero
                          7389	#3365:          Remark: Unsigned cast of -1 is guaranteed to result in maximum representable value */
                          7390	#3366:       if (total < (((vuint32)-1) / (vuint32)percentage))
                          7391	#3367:       {
                          7392	#3368:          /* Applying multiplication to current value prevents loss of precision,
                          7393	#3369:             which otherwise could result in invalid percentages (e.g. 101%) */
                          7394	#3370:          progress = (vuint8)(((current * percentage) / total) & 0xFFu);
                          7395	#3371:       }
                          7396	#3372:       else
                          7397	#3373:       {
                          7398	#3374:          /* Total value is large enough to provide sufficient precision */
                          7399	#3375:          progress = (vuint8)((current / (total / percentage)) & 0xFFu);
                          7400	#3376:       }
                          7401	#3377:    }
                          7402	#3379:    /* Limit reported progress to maximum percentage */
                          7403	#3380:    if (progress > percentage)
                          7404	#3381:    {
                          7405	#3382:       progress = percentage;
                          7406	#3383:    }
                          7407	#3385:    return progress;
                          7408	#3386: }
                          7409	#3388: /***********************************************************************************************************************
                          7410	#3389:  *  FblMemInitProgress
                          7411	#3390:  **********************************************************************************************************************/
                          7412	#3391: /*! \brief      Initialize progress states
                          7413	#3392:  *  \details    Called during startup
                          7414	#3393:  **********************************************************************************************************************/
                          7415	#3394: static void FblMemInitProgress( void )
                          7416	#3395: {
                          7417	#3396:    /* Initialize progress information */
                          7418	#3397:    gProgressInfo.type                  = kFblMemProgressType_Undefined;
                          7419	#3399:    /* Ensure reporting is triggered after change of any value */
                          7420	#3400:    gPrevProgressInfo.type              = kFblMemProgressType_Undefined;
                          7421	#3401:    gPrevProgressInfo.totalProgress     = FBL_MEM_PROGRESS_INITIAL;
                          7422	#3402:    gPrevProgressInfo.partialProgress   = FBL_MEM_PROGRESS_INITIAL;
                          7423	#3403: }
                          7424	#3405: /***********************************************************************************************************************
                          7425	#3406:  *  FblMemReportProgress
                          7426	#3407:  **********************************************************************************************************************/
                          7427	#3408: /*! \brief      Report current progress
                          7428	#3409:  *  \details    Report current progress to user callback in case any of the following applies:
                          7429	#3410:  *                - Type or segment count has changed since previous report
                          7430	#3411:  *                - Partial progress completed, but not reported yet
                          7431	#3412:  *                - Total or partial progress increased by at least the configured threshold since previous report
                          7432	#3413:  **********************************************************************************************************************/
                          7433	#3414: static void FblMemReportProgress( void )
                          7434	#3415: {
                          7435	#3416:    /* Check for relevant changes since previous report */

                                   Fri Apr 10 08:32:15 2020           Page 134
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          7436	#3417:    if (  (FBL_MEM_PROGRESS_COMPLETE       == gProgressInfo.partialProgress)
                          7437	#3418:       || (gPrevProgressInfo.type          != gProgressInfo.type)
                          7438	#3419:       || (gPrevProgressInfo.segmentCount  != gProgressInfo.segmentCount)
                          7439	#3420:       || ((gProgressInfo.totalProgress - gPrevProgressInfo.totalProgress) >= (vuint8)FBL_MEM_PROGRESS_THRESHOLD_PERCENTAGE)
                          7440	#3421:       || ((gProgressInfo.partialProgress - gPrevProgressInfo.partialProgress) >= (vuint8)FBL_MEM_PROGRESS_THRESHOLD_PERCENTAGE) )
                          7441	#3422:    {
                          7442	#3423:       /* Prevent re-reporting of completed partial progress */
                          7443	#3424:       if (FBL_MEM_PROGRESS_COMPLETE != gPrevProgressInfo.partialProgress)
                          7444	#3425:       {
                          7445	#3426:          /* Inform user callback */
                          7446	#3427:          __ApplFblMemReportProgress(&gProgressInfo);
                          7447	#3429:          /* Remember reported progress */
                          7448	#3430:          gPrevProgressInfo = gProgressInfo;
                          7449	#3431:       }
                          7450	#3432:    }
                          7451	#3433: }
                          7452	#3435: /***********************************************************************************************************************
                          7453	#3436:  *  FblMemSetupProgress
                          7454	#3437:  **********************************************************************************************************************/
                          7455	#3438: /*! \brief      Setup progress for new partial operation
                          7456	#3439:  *  \details    Stores the meta information (type, logical block address and segment count), sets up the percentage
                          7457	#3440:  *              offset and current contribution of the total operation and stores the target value of the partial operation
                          7458	#3441:  *  \param[in]  type Type of partial operation
                          7459	#3442:  *  \param[in]  logicalAddress Logical start address of processed block
                          7460	#3443:  *  \param[in]  segmentCount Count of segment processed by partial operation, typically zero for erase and verification,
                          7461	#3444:  *                           segment index for programming and index of last segment incremented by one for concluding
                          7462	#3445:  *                           gap fill
                          7463	#3446:  *  \param[in]  totalOffset Percentage offset of total operation for current operation type
                          7464	#3447:  *  \param[in]  totalPercentage Percentage contribution to total operation of current operation type
                          7465	#3448:  *  \param[in]  target Expected maximum value of partial operation in arbitrary unit (e.g. bytes)
                          7466	#3449:  **********************************************************************************************************************/
                          7467	#3450: static void FblMemSetupProgress( tFblMemProgressType type, tFblAddress logicalAddress, vuint32 segmentCount,
                          7468	#3451:    vuint8 totalOffset, vuint8 totalPercentage, vuint32 target )
                          7469	#3452: {
                          7470	#3453:    /* Store meta information */
                          7471	#3454:    gProgressInfo.type                     = type;
                          7472	#3455:    gProgressInfo.logicalAddress           = logicalAddress;
                          7473	#3456:    gProgressInfo.segmentCount             = segmentCount;
                          7474	#3458:    /* Setup percentage offset and contribution of total operation */
                          7475	#3459:    gProgressInfoInternal.totalOffset      = totalOffset;
                          7476	#3460:    gProgressInfoInternal.totalPercentage  = totalPercentage;
                          7477	#3461:    /* Store target value of partial operation */
                          7478	#3462:    gProgressInfoInternal.target           = target;
                          7479	#3464:    /* Ensure first update is reported by setting default values for previously reported info */
                          7480	#3465:    gProgressPrevRemainder                 = 0u;
                          7481	#3466:    gPrevProgressInfo.totalProgress        = FBL_MEM_PROGRESS_INITIAL;
                          7482	#3467:    gPrevProgressInfo.partialProgress      = FBL_MEM_PROGRESS_INITIAL;
                          7483	#3468: }
                          7484	#3470: /***********************************************************************************************************************
                          7485	#3471:  *  FblMemOffsetProgress
                          7486	#3472:  **********************************************************************************************************************/
                          7487	#3473: /*! \brief      Modify total percentages to reflect current progress
                          7488	#3474:  *  \details    During progress setup the total percentages reflect the complete contribution of all operations of the
                          7489	#3475:  *              current type. This function offsets those values according to the current progress.
                          7490	#3476:  *  \pre        FblMemSetupProgress called before
                          7491	#3477:  *  \param[in]  totalDone Current total progress in arbitrary unit (e.g. bytes)

                                   Fri Apr 10 08:32:15 2020           Page 135
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          7492	#3478:  *  \param[in]  totalTarget Expected maximum value of total operation in arbitrary unit (e.g. bytes)
                          7493	#3479:  **********************************************************************************************************************/
                          7494	#3480: static void FblMemOffsetProgress( vuint32 totalDone, vuint32 totalTarget )
                          7495	#3481: {
                          7496	#3482:    /* Update offset according to current progress */
                          7497	#3483:    gProgressInfoInternal.totalOffset      +=
                          7498	#3484:       FblMemCalculateProgress(totalDone, totalTarget, gProgressInfoInternal.totalPercentage);
                          7499	#3485:    /* Cut down percentage contribution according to current progress */
                          7500	#3486:    gProgressInfoInternal.totalPercentage   =
                          7501	#3487:       FblMemCalculateProgress(gProgressInfoInternal.target, totalTarget, gProgressInfoInternal.totalPercentage);
                          7502	#3488: }
                          7503	#3490: /***********************************************************************************************************************
                          7504	#3491:  *  FblMemUpdateProgress
                          7505	#3492:  **********************************************************************************************************************/
                          7506	#3493: /*! \brief      Update the progress information
                          7507	#3494:  *  \details    Progress information is updated according to the progress of the current partial operation
                          7508	#3495:  *              Update is performed in case any of the following applies:
                          7509	#3496:  *                - First update
                          7510	#3497:  *                - Progress increased by at least the configured threshold since previous update
                          7511	#3498:  *  \pre        FblMemSetupProgress and optionally FblMemOffsetProgress called before
                          7512	#3499:  *  \param[in]  remainder Remainder of current partial operation in arbitrary unit (e.g. bytes)
                          7513	#3500:  **********************************************************************************************************************/
                          7514	#3501: static void FblMemUpdateProgress( vuint32 remainder )
                          7515	#3502: {
                          7516	#3503:    vuint32 done;
                          7517	#3505:    /* Check for relevant changes since previous update */
                          7518	#3506:    if (  (gProgressPrevRemainder < remainder)
                          7519	#3507:       || ((gProgressPrevRemainder - remainder) >= FBL_MEM_PROGRESS_THRESHOLD_BYTES) )
                          7520	#3508:    {
                          7521	#3509:       /* Calculate current partial progress in arbitray unit */
                          7522	#3510:       done = gProgressInfoInternal.target - remainder;
                          7523	#3512:       /* Calculate progress percentages */
                          7524	#3513:       gProgressInfo.totalProgress   =
                          7525	#3514:          gProgressInfoInternal.totalOffset
                          7526	#3515:          + FblMemCalculateProgress(done, gProgressInfoInternal.target, gProgressInfoInternal.totalPercentage);
                          7527	#3516:       gProgressInfo.partialProgress =
                          7528	#3517:          FBL_MEM_PROGRESS_INITIAL + FblMemCalculateProgress(done, gProgressInfoInternal.target, FBL_MEM_PROGRESS_COMPLETE);
                          7529	#3519:       /* Report updated progress */
                          7530	#3520:       FblMemReportProgress();
                          7531	#3522:       /* Remember currently updated remainder value */
                          7532	#3523:       gProgressPrevRemainder = remainder;
                          7533	#3524:    }
                          7534	#3525: }
                          7535	#3527: /***********************************************************************************************************************
                          7536	#3528:  *  FblMemConcludeProgress
                          7537	#3529:  **********************************************************************************************************************/
                          7538	#3530: /*! \brief      Conclude the current partial operation
                          7539	#3531:  *  \details    Explicitely set partial progress to maximum percentage and total progress according to the set up values
                          7540	#3532:  *  \pre        FblMemSetupProgress and optionally FblMemOffsetProgress called before
                          7541	#3533:  **********************************************************************************************************************/
                          7542	#3534: static void FblMemConcludeProgress( void )
                          7543	#3535: {
                          7544	#3536:    /* Set progress percentages to maximum values */
                          7545	#3537:    gProgressInfo.totalProgress   = gProgressInfoInternal.totalOffset + gProgressInfoInternal.totalPercentage;
                          7546	#3538:    gProgressInfo.partialProgress = FBL_MEM_PROGRESS_COMPLETE;
                          7547	#3540:    /* Report updated progress */

                                   Fri Apr 10 08:32:15 2020           Page 136
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          7548	#3541:    FblMemReportProgress();
                          7549	#3542: }
                          7550	#3544: /***********************************************************************************************************************
                          7551	#3545:  *  FblMemProgressRead
                          7552	#3546:  **********************************************************************************************************************/
                          7553	#3547: /*! \brief      Update verification progress
                          7554	#3548:  *  \details    Read operations of output verification are re-routed through this function to update the progress
                          7555	#3549:  *              information according the current read address
                          7556	#3550:  *  \param[in]  address Memory address to read out
                          7557	#3551:  *  \param[out] buffer Target buffer
                          7558	#3552:  *  \param[in]  length Number of bytes to read
                          7559	#3553:  *  \return     Number of actually copied bytes
                          7560	#3554:  **********************************************************************************************************************/
                          7561	#3555: # if defined( FBL_MEM_ENABLE_VERIFY_OUTPUT )
                          7562	#3556: #  if defined( FBL_MEM_ENABLE_SWITCH_READMEMORY_PARAM )
                          7563	#3557: /* Parameters order changed in comparison to HIS security module specification */
                          7564	#3558: static tFblMemVerifySize FblMemProgressRead( tFblMemVerifyAddr address, tFblMemVerifySize length, tFblMemVerifyDataPtr buffer )
                          7565	#3559: #  else
                          7566	#3560: /* Parameters order as defined by HIS security module specification */
                          7567	#3561: static tFblMemVerifySize FblMemProgressRead( tFblMemVerifyAddr address, tFblMemVerifyDataPtr buffer, tFblMemVerifySize length )
                          7568	#3562: #  endif /* FBL_MEM_ENABLE_SWITCH_READMEMORY_PARAM */
                          7569	#3563: {
                          7570	#3564:    vuint32 position;
                          7571	#3566:    /* Calculate position relative to block start address */
                          7572	#3567:    position = address - gBlockInfo.targetAddress;
                          7573	#3568:    /* Update progress with remainder */
                          7574	#3569:    FblMemUpdateProgress(gBlockInfo.targetLength - position);
                          7575	#3571:    /* Perform actual read operation */
                          7576	#3572:    return gBlockInfo.readFct(address, buffer, length);
                          7577	#3573: }
                          7578	#3574: # endif /* FBL_MEM_ENABLE_VERIFY_OUTPUT */
                          7579	#3575: #endif /* FBL_MEM_ENABLE_PROGRESS_INFO */
                          7580	#3577: /***********************************************************************************************************************
                          7581	#3578:  *  GLOBAL FUNCTIONS
                          7582	#3579:  **********************************************************************************************************************/
                          7583	#3581: /***********************************************************************************************************************
                          7584	#3582:  *  FblMemInitPowerOnExt
                          7585	#3583:  **********************************************************************************************************************/
                          7586	#3584: /*! \brief      Initialize module
                          7587	#3585:  *  \param[in]  preambleLen  Length of preamble stored during buffer switch
                          7588	#3586:  *  \param[in]  sourceHandle Handle of input source
                          7589	#3587:  *  \return     Pointer to initial input buffer
                          7590	#3588:  **********************************************************************************************************************/
                          7591		.align	1
                          7592		.align	1
                          7593	..gh.f.p.4.a.1.r.0.e.31:
                          7594		.type	..gh.f.p.4.a.1.r.0.e.31,@object
                          7595		.size	..gh.f.p.4.a.1.r.0.e.31,0
                          7596		.global	FblMemInitPowerOnExt
                          7597	FblMemInitPowerOnExt:
00000a02 0080             7598		se_mflr	r0
00000a04 d101             7599		se_stw	r0, 4(sp)
00000a06 182106f8         7600		e_stwu	sp, -8(sp)
                          7601	#	    .bf
                          7602	.LDW27:
                          7603	#3589: tFblMemRamData FblMemInitPowerOnExt( tFblLength preambleLen, tFblMemInputSource sourceHandle ) /* PRQA S 1505 */ /* MD_FblMem_1505 */

                                   Fri Apr 10 08:32:15 2020           Page 137
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          7604	#3590: {
                          7605	#3591: #if defined( FBL_MEM_ENABLE_GAP_FILL )
                          7606	#3592:    vuintx idx;
                          7607	#3593: #endif /* FBL_MEM_ENABLE_GAP_FILL */
                          7608	#3595: #if defined( V_ENABLE_USE_DUMMY_STATEMENT )
                          7609	#3596:    /* Parameters not used: avoid compiler warning */
                          7610	#3597: # if defined( FBL_MEM_ENABLE_DYNAMIC_PREAMBLE_LENGTH )
                          7611	#3598: # else
                          7612	#3599:    (void)preambleLen; /* PRQA S 3112 */ /* MD_FblMem_3112 */
                          7613	#3600: # endif /* FBL_MEM_ENABLE_DYNAMIC_PREAMBLE_LENGTH */
                          7614	#3601: # if defined( FBL_MEM_ENABLE_MULTI_SOURCE )
                          7615	#3602: # else
                          7616	#3603:    (void)sourceHandle; /* PRQA S 3112 */ /* MD_FblMem_3112 */
                          7617	#3604: # endif /* FBL_MEM_ENABLE_MULTI_SOURCE */
                          7618	#3605: #endif /* V_ENABLE_USE_DUMMY_STATEMENT */
                          7619	#3607: #if defined( FBL_MEM_ENABLE_MULTI_SOURCE )
                          7620	#3608:    /* Verify source handle lies within range */
                          7621	#3609:    assertFblUser(sourceHandle < FBL_MEM_SOURCE_COUNT, kFblMemAssertParameterOutOfRange);
                          7622	#3610: #endif /* FBL_MEM_ENABLE_MULTI_SOURCE */
                          7623	#3612: #if defined( FBL_MEM_ENABLE_PROC_QUEUE )
                          7624	#3613:    /* Verify job prio mapping array */
                          7625	#3614:    assertFblInternal(kFblMemJobType_Max == (FBL_MEM_ARRAY_SIZE(gJobPrio) - 1), kFblMemAssertParameterOutOfRange); /* PRQA S 3201 */ /* PRQA S 3325 */ /* MD_FblMem_AssertJobMax */ /* PRQA S 2214 */ /* MD_FblDef_Assert */
                          7626	#3615: #endif /* FBL_MEM_ENABLE_PROC_QUEUE */
                          7627	#3616: #if defined( FBL_MEM_ENABLE_SEGMENTATION ) 
                          7628	#3617:    /* Verify length limit mapping array */
                          7629	#3618:    assertFblInternal(kFblMemJobType_Max == (FBL_MEM_ARRAY_SIZE(gLengthLimits) - 1), kFblMemAssertParameterOutOfRange);  /* PRQA S 3201 */ /* PRQA S 3325 */ /* MD_FblMem_AssertJobMax */ /* PRQA S 2214 */ /* MD_FblDef_Assert */
                          7630	#3619: #endif /* FBL_MEM_ENABLE_SEGMENTATION || FBL_MEM_ENABLE_VERIFY_PIPELINED */
                          7631	#3622: #if defined( FBL_ENABLE_DATA_PROCESSING )
                          7632	#3623:    /* Initialize data processing info */
                          7633	#3624:    FblMemInitJob(&gProcWriteJob, gProcBuffer.data, FBL_MEM_ARRAY_SIZE(gProcBuffer.data), kFblMemJobType_ProcWrite);
                          7634	#3625:    /* Overwrite net size, to exclude overhead for remainder and padding */
                          7635	#3626:    gProcWriteJob.netSize = FBL_MEM_PROC_BUFFER_SIZE;
                          7636	#3627:    /* Initialize info to trigger data processing finalization */
                          7637	#3628:    FblMemInitJob(&gProcFinalizeJob, FBL_MEM_BUFFER_NULL, 0, kFblMemJobType_ProcFinalize);
                          7638	#3630:    /*
                          7639	#3631:       Always provide full configured segmentation size to data processing,
                          7640	#3632:       regardless of any remainder
                          7641	#3633:    */
                          7642	#3634:    gProcParam.dataOutMaxLength = (vuint16)FBL_MEM_INTERNAL_PROC_SEGMENTATION;
                          7643	#3635: # if defined( FBL_MEM_ENABLE_EXT_TRIGGER_DATA_PROC )
                          7644	#3636:    gProcParam.wdTriggerFct     = FblMemTriggerWatchdogExt;
                          7645	#3637: # else
                          7646	#3638:    gProcParam.wdTriggerFct     = FblMemTriggerWatchdog;
                          7647	#3639: # endif /* FBL_MEM_ENABLE_EXT_TRIGGER_DATA_PROC */
                          7648	#3640: #endif /* FBL_ENABLE_DATA_PROCESSING */
                          7649	#3642: #if defined( FBL_MEM_ENABLE_STREAM_OUTPUT )
                          7650	#3643:    /* Initialize stream output info */
                          7651	#3644: # if defined( FBL_ENABLE_DATA_PROCESSING )
                          7652	#3645:    FblMemInitJob(&gStreamProcJob, gProcBuffer.data, FBL_MEM_ARRAY_SIZE(gProcBuffer.data), kFblMemJobType_StreamProc);
                          7653	#3646:    /* Overwrite net size, to exclude overhead for remainder and padding */
                          7654	#3647:    gStreamProcJob.netSize = FBL_MEM_PROC_BUFFER_SIZE;
                          7655	#3648: # endif /* FBL_ENABLE_DATA_PROCESSING */
                          7656	#3649:    /* Initialize info to trigger stream output finalization */
                          7657	#3650:    FblMemInitJob(&gStreamFinalizeJob, FBL_MEM_BUFFER_NULL, 0, kFblMemJobType_StreamFinalize);
                          7658	#3652:    gStreamParam.outputData = FBL_MEM_BUFFER_NULL;
                          7659	#3653:    gStreamParam.outputSize = 0u;

                                   Fri Apr 10 08:32:15 2020           Page 138
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          7660	#3654:    gStreamParam.watchdog   = FblMemTriggerWatchdog;
                          7661	#3655: #endif /* FBL_MEM_ENABLE_STREAM_OUTPUT */
                          7662	#3658: #if defined( FBL_MEM_ENABLE_GAP_FILL )
                          7663	#3659:    /* Initialize gap fill job */
                          7664	#3660:    FblMemInitJob(&gGapFillJob, FBL_MEM_BUFFER_NULL, FBL_MEM_ARRAY_SIZE(gGapFillBuffer.data), kFblMemJobType_GapFill);
00000a0a 7060e000         7665		e_lis	r3, %hiadj(gGapFillJob)
00000a0e 1c630000         7666		e_add16i	r3, r3, %lo(gGapFillJob)
00000a12 4804             7667		se_li	r4, 0
00000a14 6375             7668		se_bgeni	r5, 23
00000a16 4826             7669		se_li	r6, 2
00000a18 78000001         7670		se_bl	FblMemInitJob
                          7671	#3662:    /* Fill gap fill buffer with fill character */
                          7672	#3663:    for (idx = 0u; idx < FBL_MEM_ARRAY_SIZE(gGapFillBuffer.data); idx++)
                          7673	.L3480:
                          7674	#3664:    {
                          7675	#3665:       gGapFillBuffer.data[idx] = kFillChar;
                          7676	#line3665
                          7677	..lin.1acf134f..a7afc1c7.0_122::
                          7678	.LDWlin122:
00000a1c 1ce40004         7679		e_add16i	r7, r4, %lo(gGapFillBuffer+4)
00000a20 2c80             7680		se_bmaski	r0, 8
00000a22 70079000         7681		e_add2is	r7, %hiadj(gGapFillBuffer+4)
00000a26 9007             7682		se_stb	r0, 0(r7)
00000a28 2004             7683		se_addi	r4, 1
00000a2a 1884a901         7684		e_cmpli	r4, 256
00000a2e e400             7685		se_blt	.L3480
                          7686	#3666:    }
                          7687	#3667: #endif /* FBL_MEM_ENABLE_GAP_FILL */
                          7688	#3669: #if defined( FBL_MEM_ENABLE_MULTI_SOURCE )
                          7689	#3670:    gActiveSource = sourceHandle;
                          7690	#3671: #endif /* FBL_MEM_ENABLE_MULTI_SOURCE */
                          7691	#3673: #if defined( FBL_MEM_ENABLE_DYNAMIC_PREAMBLE_LENGTH )
                          7692	#3674:    gPreambleLength[FBL_MEM_ACTIVE_SOURCE] = preambleLen;
                          7693	#3675: #endif /* FBL_MEM_ENABLE_DYNAMIC_PREAMBLE_LENGTH */
                          7694	#3677:    /* Perform additional initialization and return initial buffer */
                          7695	#3678:    return FblMemInitInternal();
                          7696	#line3678
                          7697	..lin.1acf134f..a7afc1c7.0_123::
                          7698	.LDWlin123:
00000a30 78000001         7699		se_bl	FblMemInitInternal
                          7700	#	    .ef
                          7701	.LDW37:
                          7702	#line3678
                          7703	..lin.1acf134f..a7afc1c7.0_124::
                          7704	.LDWlin124:
00000a34 c301             7705		se_lwz	r0, 12(sp)
00000a36 2071             7706		se_addi	sp, 8
00000a38 0090             7707		se_mtlr	r0
00000a3a 0004             7708		se_blr
                          7709		.global	__ghs_eofn_FblMemInitPowerOnExt
                          7710	__ghs_eofn_FblMemInitPowerOnExt:
                          7711		.type	FblMemInitPowerOnExt,@function
                          7712		.size	FblMemInitPowerOnExt,$-FblMemInitPowerOnExt
                          7713		.align	1
                          7714	
                          7715	#function:			FblMemInitPowerOnExt

                                   Fri Apr 10 08:32:15 2020           Page 139
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          7716	#stack frame size:		8
                          7717	#link area offset:		0
                          7718	#local storage area offset:	8
                          7719	#
                          7720	#idx	r4	local
                          7721	
                          7722	#preambleLen	none	param
                          7723	#sourceHandle	none	param
                          7724	
                          7725		.data
                          7726		.section ".vletext", "vax"
                          7727		.vle
                          7728		.vle
                          7729	
                          7730	#3679: }
                          7731	
                          7732	#3681: /***********************************************************************************************************************
                          7733	#3682:  *  FblMemInitPowerOn
                          7734	#3683:  **********************************************************************************************************************/
                          7735	#3684: /*! \brief    Initialize module
                          7736	#3685:  *  \return   Pointer to initial input buffer
                          7737	#3686:  **********************************************************************************************************************/
                          7738		.align	1
                          7739		.align	1
                          7740	..gh.f.p.0.a.1.r.0.e.32:
                          7741		.type	..gh.f.p.0.a.1.r.0.e.32,@object
                          7742		.size	..gh.f.p.0.a.1.r.0.e.32,0
                          7743		.global	FblMemInitPowerOn
                          7744	FblMemInitPowerOn:
                          7745	#	    .bf
                          7746	.LDW47:
                          7747	#3687: tFblMemRamData FblMemInitPowerOn( void )
                          7748	#3688: {
                          7749	#3689:    /* Perform initialization and return initial buffer */
                          7750	#3690:    return FblMemInitPowerOnExt(FBL_MEM_DEFAULT_PREAMBLE_LENGTH, FBL_MEM_SOURCE_HANDLE_DEFAULT);
00000a3c 4823             7751		se_li	r3, 2
00000a3e 4804             7752		se_li	r4, 0
00000a40 e800             7753		se_b	FblMemInitPowerOnExt
                          7754	#	    .ef
                          7755	.LDW57:
                          7756	..lin.1acf134f..da53fc16.0_125::
                          7757	.LDWlin125:
                          7758		.global	__ghs_eofn_FblMemInitPowerOn
                          7759	__ghs_eofn_FblMemInitPowerOn:
                          7760		.type	FblMemInitPowerOn,@function
                          7761		.size	FblMemInitPowerOn,$-FblMemInitPowerOn
                          7762		.align	1
                          7763	
                          7764	#function:			FblMemInitPowerOn
                          7765	#stack frame size:		0
                          7766	#
                          7767	
                          7768		.data
                          7769		.section ".vletext", "vax"
                          7770		.vle
                          7771		.vle

                                   Fri Apr 10 08:32:15 2020           Page 140
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          7772	
                          7773	#3691: }
                          7774	
                          7775	#3693: /***********************************************************************************************************************
                          7776	#3694:  *  FblMemInit
                          7777	#3695:  **********************************************************************************************************************/
                          7778	#3696: /*! \brief    (Re)-initialize input buffers
                          7779	#3697:  *  \details  Should be called before performing additional tasks in case a previous operation failed
                          7780	#3698:  *  \pre      FblMemInitPowerOn executed before
                          7781	#3699:  *  \return   Pointer to active input buffer
                          7782	#3700:  **********************************************************************************************************************/
                          7783		.align	1
                          7784		.align	1
                          7785	..gh.f.p.0.a.1.r.0.e.33:
                          7786		.type	..gh.f.p.0.a.1.r.0.e.33,@object
                          7787		.size	..gh.f.p.0.a.1.r.0.e.33,0
                          7788		.global	FblMemInit
                          7789	FblMemInit:
00000a42 182106f0         7790		e_stwu	sp, -16(sp)
00000a46 0080             7791		se_mflr	r0
00000a48 d3f1             7792		se_stw	r31, 12(sp)
00000a4a d501             7793		se_stw	r0, 20(sp)
                          7794	#	    .bf
                          7795	.LDW67:
                          7796	#3701: tFblMemRamData FblMemInit( void )
                          7797	#3702: {
                          7798	#3703:    tFblMemRamData activeBuffer;
                          7799	#3705: #if defined( FBL_MEM_ENABLE_PREAMBLE_HANDLING )
                          7800	#3706:    /*
                          7801	#3707:       Active fill buffer may change
                          7802	#3708:       Store preamble so operation is transparent for caller
                          7803	#3709:    */
                          7804	#3710:    FblMemStorePreamble();
00000a4c 78000001         7805		se_bl	FblMemStorePreamble
                          7806	#3711: #endif /* FBL_MEM_ENABLE_PREAMBLE_HANDLING */
                          7807	#3713:    /* Perform re-initialization and get active buffer */
                          7808	#3714:    activeBuffer = FblMemInitInternal();
                          7809	#line3714
                          7810	..lin.1acf134f..aeb645ac.0_126::
                          7811	.LDWlin126:
00000a50 78000001         7812		se_bl	FblMemInitInternal
00000a54 013f             7813		se_mr	r31, r3
                          7814	#3716: #if defined( FBL_MEM_ENABLE_PREAMBLE_HANDLING )
                          7815	#3717:    /*
                          7816	#3718:       Active fill buffer may have changed
                          7817	#3719:       Restore previously stored preamble so operation is transparent for caller
                          7818	#3720:    */
                          7819	#3721:    FblMemRestorePreamble();
                          7820	#line3721
                          7821	..lin.1acf134f..aeb645ac.0_127::
                          7822	.LDWlin127:
00000a56 78000001         7823		se_bl	FblMemRestorePreamble
                          7824	#3722: #endif /* FBL_MEM_ENABLE_PREAMBLE_HANDLING */
                          7825	#3724:    return activeBuffer;
                          7826	#line3724
                          7827	..lin.1acf134f..aeb645ac.0_128::

                                   Fri Apr 10 08:32:15 2020           Page 141
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          7828	.LDWlin128:
00000a5a 01f3             7829		se_mr	r3, r31
                          7830	#	    .ef
                          7831	.LDW77:
00000a5c c501             7832		se_lwz	r0, 20(sp)
00000a5e c3f1             7833		se_lwz	r31, 12(sp)
00000a60 20f1             7834		se_addi	sp, 16
00000a62 0090             7835		se_mtlr	r0
00000a64 0004             7836		se_blr
                          7837		.global	__ghs_eofn_FblMemInit
                          7838	__ghs_eofn_FblMemInit:
                          7839		.type	FblMemInit,@function
                          7840		.size	FblMemInit,$-FblMemInit
                          7841		.align	1
                          7842	
                          7843	#function:			FblMemInit
                          7844	#stack frame size:		16
                          7845	#link area offset:		0
                          7846	#local storage area offset:	12
                          7847	#gpr save area offset:		12
                          7848	#
                          7849	
                          7850		.data
                          7851		.section ".vletext", "vax"
                          7852		.vle
                          7853		.vle
                          7854	
                          7855	#3725: }
                          7856	
                          7857	#3727: /***********************************************************************************************************************
                          7858	#3728:  *  FblMemDeinit
                          7859	#3729:  **********************************************************************************************************************/
                          7860	#3730: /*! \brief    De-initialize module
                          7861	#3731:  *  \details  Should be called when memory driver is de-initialized
                          7862	#3732:  **********************************************************************************************************************/
                          7863		.align	1
                          7864		.align	1
                          7865	..gh.f.p.0.a.1.r.0.e.34:
                          7866		.type	..gh.f.p.0.a.1.r.0.e.34,@object
                          7867		.size	..gh.f.p.0.a.1.r.0.e.34,0
                          7868		.global	FblMemDeinit
                          7869	FblMemDeinit:
                          7870	#	    .bf
                          7871	.LDW87:
                          7872	#3733: void FblMemDeinit( void )
                          7873	#3734: {
                          7874	#3735:    /* No further operations allowed, reset states */
                          7875	#3736:    FblMemInitStates();
00000a66 78000000         7876		se_b	FblMemInitStates
                          7877	#3737: }
                          7878	#	    .ef
                          7879	.LDW97:
                          7880	..lin.1acf134f..2911ad75.0_129::
                          7881	.LDWlin129:
                          7882		.global	__ghs_eofn_FblMemDeinit
                          7883	__ghs_eofn_FblMemDeinit:

                                   Fri Apr 10 08:32:15 2020           Page 142
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          7884		.type	FblMemDeinit,@function
                          7885		.size	FblMemDeinit,$-FblMemDeinit
                          7886		.align	1
                          7887	
                          7888	#function:			FblMemDeinit
                          7889	#stack frame size:		0
                          7890	#
                          7891	
                          7892		.data
                          7893		.section ".vletext", "vax"
                          7894		.vle
                          7895		.vle
                          7896	
                          7897	
                          7898	#3739: #if defined( FBL_MEM_ENABLE_MULTI_SOURCE )
                          7899	#3740: /***********************************************************************************************************************
                          7900	#3741:  *  FblMemLockInputSource
                          7901	#3742:  **********************************************************************************************************************/
                          7902	#3743: /*! \brief      Lock input to specific source
                          7903	#3744:  *  \param[in]  sourceHandle Handle of input source
                          7904	#3745:  **********************************************************************************************************************/
                          7905	#3746: void FblMemLockInputSource( tFblMemInputSource sourceHandle )
                          7906	#3747: {
                          7907	#3748:    /* Verify source handle lies within range */
                          7908	#3749:    assertFblInternal(sourceHandle < FBL_MEM_SOURCE_COUNT, kFblMemAssertParameterOutOfRange);
                          7909	#3751:    gActiveSource = sourceHandle;
                          7910	#3752: }
                          7911	#3753: #endif /* FBL_MEM_ENABLE_MULTI_SOURCE */
                          7912	#3755: /***********************************************************************************************************************
                          7913	#3756:  *  FblMemGetActiveBuffer
                          7914	#3757:  **********************************************************************************************************************/
                          7915	#3758: /*! \brief    Return active input buffer, which can be used for current data reception
                          7916	#3759:  *  \details  Buffer pointer includes previously set offset to accommodate for alignment requirements
                          7917	#3760:  *  \pre      FblMemInitPowerOn executed before
                          7918	#3761:  *  \return   Pointer to active input buffer
                          7919	#3762:  **********************************************************************************************************************/
                          7920	#3763: tFblMemRamData FblMemGetActiveBuffer( void )
                          7921	#3764: {
                          7922	#3765:    V_MEMRAM1 tFblMemJob V_MEMRAM2 V_MEMRAM3 * inputJob;
                          7923	#3767:    /* Get pending job info */
                          7924	#3768:    inputJob = FblMemGetPendingInputJob();
                          7925	#3769:    /* Reset position to current offset */
                          7926	#3770:    inputJob->position = inputJob->offset;
                          7927	#3772:    /* Return pointer to active fill buffer */
                          7928	#3773:    return FblMemGetBuffer(inputJob);
                          7929	#3774: }
                          7930	#3776: /***********************************************************************************************************************
                          7931	#3777:  *  FblMemBlockEraseIndication
                          7932	#3778:  **********************************************************************************************************************/
                          7933	#3779: /*! \brief      Indicate start of a new block (just before first segment)
                          7934	#3780:  *  \pre        FblMemInitPowerOn executed before
                          7935	#3781:  *  \param[in]  block  Pointer to block information structure
                          7936	#3782:  *                     Only address and length members have to be initialized
                          7937	#3783:  *  \return     Result of operation (potentially remapped to OEM specific NRC)
                          7938	#3784:  **********************************************************************************************************************/
                          7939		.align	1

                                   Fri Apr 10 08:32:15 2020           Page 143
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          7940		.align	1
                          7941	..gh.f.p.3.a.1.r.0.e.35:
                          7942		.type	..gh.f.p.3.a.1.r.0.e.35,@object
                          7943		.size	..gh.f.p.3.a.1.r.0.e.35,0
                          7944		.global	FblMemBlockEraseIndication
                          7945	FblMemBlockEraseIndication:
00000a6a 182106f0         7946		e_stwu	sp, -16(sp)
00000a6e 0080             7947		se_mflr	r0
00000a70 d3f1             7948		se_stw	r31, 12(sp)
00000a72 d501             7949		se_stw	r0, 20(sp)
00000a74 013f             7950		se_mr	r31, r3
                          7951	#	    .bf
                          7952	.LDW08:
                          7953	#3785: tFblMemStatus FblMemBlockEraseIndication( const V_MEMRAM1 tFblMemBlockInfo V_MEMRAM2 V_MEMRAM3 * block )
                          7954	#3786: {
                          7955	#3787:    tFblMemStatus  retVal;
                          7956	#3789:    /* Check allowed states */
                          7957	#3790:    if (kFblOk != FblMemCheckAllowed(FBL_MEM_ALLOWED_BLOCK_ERASE, FBL_MEM_ALLOWED_NONE))
00000a76 4c03             7958		se_li	r3, 64
00000a78 4804             7959		se_li	r4, 0
00000a7a e900             7960		se_bl	FblMemCheckAllowed
00000a7c 2a03             7961		se_cmpi	r3, 0
00000a7e e600             7962		se_beq	.L3682
                          7963	#3791:    {
                          7964	#3792:       FBL_MEM_SET_STATUS(BlockEraseSequence, retVal);   /* PRQA S 3109 */ /* MD_MSR_14.3 */
                          7965	#line3792
                          7966	..lin.1acf134f..c8256675.0_130::
                          7967	.LDWlin130:
00000a80 4a43             7968		se_li	r3, 36
00000a82 e800             7969		se_b	.L3680
                          7970	.L3682:
                          7971	#3793:    }
                          7972	#3794:    else
                          7973	#3795:    {
                          7974	#3796: #if defined( FBL_MEM_ENABLE_PROGRESS_INFO )
                          7975	#3797:       /* Setup erase progress */
                          7976	#3798:       FblMemSetupProgress(kFblMemProgressType_Erase, block->logicalAddress, 0u,
                          7977	#3799:          FBL_MEM_PROGRESS_INITIAL, FBL_MEM_PROGRESS_ERASE, block->targetLength);
                          7978	#3800:       /* Report initial progress */
                          7979	#3801:       FblMemUpdateProgress(block->targetLength);
                          7980	#3803:       /* Explicitely enable progress information for erase operation */
                          7981	#3804:       gProgressState = kFblMemProgressState_Enabled;
                          7982	#3805: #endif /* FBL_MEM_ENABLE_PROGRESS_INFO */
                          7983	#3807:       /* Perform erase */
                          7984	#3808:       retVal = FblMemEraseRegionInternal(block->targetAddress, block->targetLength);
                          7985	#line3808
                          7986	..lin.1acf134f..c8256675.0_131::
                          7987	.LDWlin131:
00000a84 c14f             7988		se_lwz	r4, 4(r31)
00000a86 c03f             7989		se_lwz	r3, 0(r31)
00000a88 78000001         7990		se_bl	FblMemEraseRegionInternal
                          7991	#3810: #if defined( FBL_MEM_ENABLE_PROGRESS_INFO )
                          7992	#3811:       /* Conclude erase progress */
                          7993	#3812:       FblMemConcludeProgress();
                          7994	#3813: #endif /* FBL_MEM_ENABLE_PROGRESS_INFO */
                          7995	#3814:    }

                                   Fri Apr 10 08:32:15 2020           Page 144
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          7996	#3816:    if (kFblMemStatus_Ok == retVal)
                          7997	#line3816
                          7998	..lin.1acf134f..c8256675.0_132::
                          7999	.LDWlin132:
00000a8c 2a03             8000		se_cmpi	r3, 0
00000a8e e200             8001		se_bne	.L3680
                          8002	#3817:    {
                          8003	#3818:       /* Allow block start / erase indication */
                          8004	#3819:       FblMemSetAllowed(FBL_MEM_ALLOWED_BLOCK_START | FBL_MEM_ALLOWED_BLOCK_ERASE);
                          8005	#line3819
                          8006	..lin.1acf134f..c8256675.0_133::
                          8007	.LDWlin133:
00000a90 4c10             8008		se_li	r0, 65
00000a92 70e0e000         8009		e_lis	r7, %hiadj(gAllowedInd)
00000a96 54070000         8010		e_stw	r0, %lo(gAllowedInd)(r7)
                          8011	#3820:    }
                          8012	#3822:    return retVal;
                          8013	.L3680:
                          8014	#	    .ef
                          8015	.LDW18:
00000a9a c501             8016		se_lwz	r0, 20(sp)
00000a9c c3f1             8017		se_lwz	r31, 12(sp)
00000a9e 20f1             8018		se_addi	sp, 16
00000aa0 0090             8019		se_mtlr	r0
00000aa2 0004             8020		se_blr
                          8021		.global	__ghs_eofn_FblMemBlockEraseIndication
                          8022	__ghs_eofn_FblMemBlockEraseIndication:
                          8023		.type	FblMemBlockEraseIndication,@function
                          8024		.size	FblMemBlockEraseIndication,$-FblMemBlockEraseIndication
                          8025		.align	1
                          8026	
                          8027	#function:			FblMemBlockEraseIndication
                          8028	#stack frame size:		16
                          8029	#link area offset:		0
                          8030	#local storage area offset:	12
                          8031	#gpr save area offset:		12
                          8032	#
                          8033	#retVal	r3	local
                          8034	
                          8035	#block	r31	param
                          8036	
                          8037		.data
                          8038		.section ".vletext", "vax"
                          8039		.vle
                          8040		.vle
                          8041	
                          8042	#3823: }
                          8043	
                          8044	#3825: /***********************************************************************************************************************
                          8045	#3826:  *  FblMemBlockStartIndication
                          8046	#3827:  **********************************************************************************************************************/
                          8047	#3828: /*! \brief       Indicate start of a new block (just before first segment)
                          8048	#3829:  *  \details     Block may consist of one or more segments
                          8049	#3830:  *  \pre         FblMemInitPowerOn executed before
                          8050	#3831:  *               FblMemInit executed before in case previous cycle failed
                          8051	#3832:  *  \param[in]   block  Pointer to block information structure

                                   Fri Apr 10 08:32:15 2020           Page 145
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          8052	#3833:  *                      Required members depending on configuration
                          8053	#3834:  *  \return      Result of operation (potentially remapped to OEM specific NRC)
                          8054	#3835:  **********************************************************************************************************************/
                          8055		.align	1
                          8056		.align	1
                          8057	..gh.f.p.3.a.1.r.0.e.36:
                          8058		.type	..gh.f.p.3.a.1.r.0.e.36,@object
                          8059		.size	..gh.f.p.3.a.1.r.0.e.36,0
                          8060		.global	FblMemBlockStartIndication
                          8061	FblMemBlockStartIndication:
00000aa4 182106e8         8062		e_stwu	sp, -24(sp)
00000aa8 0080             8063		se_mflr	r0
00000aaa 1ba1090c         8064		e_stmw	r29, 12(sp)
00000aae d701             8065		se_stw	r0, 28(sp)
00000ab0 013d             8066		se_mr	r29, r3
                          8067	#	    .bf
                          8068	.LDW28:
                          8069	#3836: tFblMemStatus FblMemBlockStartIndication( V_MEMRAM1 tFblMemBlockInfo V_MEMRAM2 V_MEMRAM3 * block ) /* PRQA S 3673 */ /* MD_FblMem_3673 */
                          8070	#3837: {
                          8071	#3838:    tFblMemStatus     retVal;
                          8072	#3840: #if defined( V_ENABLE_USE_DUMMY_STATEMENT )
                          8073	#3841:    /* Parameters not used: avoid compiler warning */
                          8074	#3842: # if defined( FBL_MEM_ENABLE_GLOBAL_BLOCK_INFO )
                          8075	#3843: # else
                          8076	#3844:    (void)block; /* PRQA S 3112 */ /* MD_FblMem_3112 */
                          8077	#3845: # endif /* FBL_MEM_ENABLE_GLOBAL_BLOCK_INFO */
                          8078	#3846: #endif /* V_ENABLE_USE_DUMMY_STATEMENT */
                          8079	#3848:    retVal = kFblMemStatus_Ok;
00000ab2 4813             8080		se_li	r3, 1
                          8081	#3850:    /* Check allowed states */
                          8082	#3851:    if (kFblOk != FblMemCheckAllowed(FBL_MEM_ALLOWED_BLOCK_START, FBL_MEM_ALLOWED_BLOCK_START))
00000ab4 480f             8083		se_li	r31, 0
00000ab6 0134             8084		se_mr	r4, r3
00000ab8 e900             8085		se_bl	FblMemCheckAllowed
00000aba 2a03             8086		se_cmpi	r3, 0
00000abc e600             8087		se_beq	.L3787
                          8088	#3852:    {
                          8089	#3853:       FBL_MEM_SET_STATUS(BlockStartSequence, retVal);   /* PRQA S 3109 */ /* MD_MSR_14.3 */
                          8090	#line3853
                          8091	..lin.1acf134f..cc091bb3.0_134::
                          8092	.LDWlin134:
00000abe 4a4f             8093		se_li	r31, 36
00000ac0 e800             8094		se_b	.L3793
                          8095	.L3787:
                          8096	#3854:    }
                          8097	#3855:    else
                          8098	#3856:    {
                          8099	#3857: #if defined( FBL_ENABLE_SYSTEM_CHECK ) && \
                          8100	#3858:     defined( FBL_MEM_ENABLE_VERIFICATION )
                          8101	#3859:       /* At least one of the configured verification variants should be active  */
                          8102	#3860: # if defined( FBL_MEM_ENABLE_VERIFY_OUTPUT )
                          8103	#3861:       if (FBL_MEM_VERIFY_FCT_OUTPUT_NULL != block->verifyRoutineOutput.function)
                          8104	#line3861
                          8105	..lin.1acf134f..cc091bb3.0_135::
                          8106	.LDWlin135:
00000ac2 ca0d             8107		se_lwz	r0, 40(r29)

                                   Fri Apr 10 08:32:15 2020           Page 146
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
00000ac4 2a00             8108		se_cmpi	r0, 0
00000ac6 e200             8109		se_bne	.L3794
                          8110	#3862:       {
                          8111	#3863:       }
                          8112	#3864:       else
                          8113	#3865: # endif /* FBL_MEM_ENABLE_VERIFY_OUTPUT */
                          8114	#3866:       {
                          8115	#3867:          FBL_MEM_SET_STATUS(BlockStartParam, retVal);   /* PRQA S 3109 */ /* MD_MSR_14.3 */
                          8116	#line3867
                          8117	..lin.1acf134f..cc091bb3.0_136::
                          8118	.LDWlin136:
00000ac8 4a2f             8119		se_li	r31, 34
00000aca e800             8120		se_b	.L3793
                          8121	.L3794:
                          8122	#3868:       }
                          8123	#3869: #endif /* FBL_ENABLE_SYSTEM_CHECK && FBL_MEM_ENABLE_VERIFICATION */
                          8124	#3870:    }
                          8125	#3872:    if (kFblMemStatus_Ok == retVal)
                          8126	#3873:    {
                          8127	#3874:       /* Store block information */
                          8128	#3875: #if defined( FBL_MEM_ENABLE_GLOBAL_BLOCK_INFO )
                          8129	#3876:       gBlockInfo = *block;
                          8130	#line3876
                          8131	..lin.1acf134f..cc091bb3.0_137::
                          8132	.LDWlin137:
00000acc 73c0e000         8133		e_lis	r30, %hiadj(gBlockInfo)
00000ad0 1fde0000         8134		e_add16i	r30, r30, %lo(gBlockInfo)
00000ad4 4bc5             8135		se_li	r5, 60
00000ad6 01d4             8136		se_mr	r4, r29
00000ad8 01e3             8137		se_mr	r3, r30
00000ada 78000001         8138		e_bl	memmove
                          8139	#3877: #endif /* FBL_MEM_ENABLE_GLOBAL_BLOCK_INFO */
                          8140	#3878: #if defined( FBL_MEM_ENABLE_SEGMENT_HANDLING )
                          8141	#3879:       /* Reset segment list */
                          8142	#3880:       gBlockInfo.segmentList->nrOfSegments = 0u;
00000ade cd7e             8143		se_lwz	r7, 52(r30)
00000ae0 4820             8144		se_li	r0, 2
                          8145	#3881: #endif /* FBL_MEM_ENABLE_SEGMENT_HANDLING */
                          8146	#3883:       /* Setup index of first segment */
                          8147	#3884:       gSegInfo.nextIndex = 0u;
00000ae2 90f7             8148		se_stb	r31, 0(r7)
00000ae4 70e0e000         8149		e_lis	r7, %hiadj(gSegInfo+48)
                          8150	#3886:       /* Allow segment start indication */
                          8151	#3887:       FblMemSetAllowed(FBL_MEM_ALLOWED_SEGMENT_START);
00000ae8 57e70000         8152		e_stw	r31, %lo(gSegInfo+48)(r7)
00000aec 70e0e000         8153		e_lis	r7, %hiadj(gAllowedInd)
00000af0 54070000         8154		e_stw	r0, %lo(gAllowedInd)(r7)
                          8155	.L3793:
                          8156	#3888:    }
                          8157	#3890:    return retVal;
00000af4 01f3             8158		se_mr	r3, r31
                          8159	#	    .ef
                          8160	.LDW38:
00000af6 c701             8161		se_lwz	r0, 28(sp)
00000af8 1ba1080c         8162		e_lmw	r29, 12(sp)
00000afc 2171             8163		se_addi	sp, 24

                                   Fri Apr 10 08:32:15 2020           Page 147
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
00000afe 0090             8164		se_mtlr	r0
00000b00 0004             8165		se_blr
                          8166		.global	__ghs_eofn_FblMemBlockStartIndication
                          8167	__ghs_eofn_FblMemBlockStartIndication:
                          8168		.type	FblMemBlockStartIndication,@function
                          8169		.size	FblMemBlockStartIndication,$-FblMemBlockStartIndication
                          8170		.align	1
                          8171	
                          8172	#function:			FblMemBlockStartIndication
                          8173	#stack frame size:		24
                          8174	#link area offset:		0
                          8175	#local storage area offset:	12
                          8176	#gpr save area offset:		12
                          8177	#
                          8178	#retVal	r31	local
                          8179	
                          8180	#block	r29	param
                          8181	
                          8182		.data
                          8183		.section ".vletext", "vax"
                          8184		.vle
                          8185		.vle
                          8186	
                          8187	#3891: }
                          8188	
                          8189	#3893: /***********************************************************************************************************************
                          8190	#3894:  *  FblMemBlockEndIndication
                          8191	#3895:  **********************************************************************************************************************/
                          8192	#3896: /*! \brief    Indicate end of current block (after last segment)
                          8193	#3897:  *  \details  Finalize verification if configured
                          8194	#3898:  *  \pre      FblMemSegmentEndIndication executed before
                          8195	#3899:  *  \return   Result of operation (potentially remapped to OEM specific NRC)
                          8196	#3900:  **********************************************************************************************************************/
                          8197		.align	1
                          8198		.align	1
                          8199	..gh.f.p.0.a.1.r.0.e.37:
                          8200		.type	..gh.f.p.0.a.1.r.0.e.37,@object
                          8201		.size	..gh.f.p.0.a.1.r.0.e.37,0
                          8202		.global	FblMemBlockEndIndication
                          8203	FblMemBlockEndIndication:
00000b02 182106e0         8204		e_stwu	sp, -32(sp)
00000b06 0080             8205		se_mflr	r0
00000b08 1b61090c         8206		e_stmw	r27, 12(sp)
00000b0c d901             8207		se_stw	r0, 36(sp)
                          8208	#	    .bf
                          8209	.LDW48:
                          8210	#3901: tFblMemStatus FblMemBlockEndIndication( void )
                          8211	#3902: {
                          8212	#3903:    tFblMemStatus retVal;
                          8213	#3904: #if defined( FBL_MEM_ENABLE_GAP_FILL )
                          8214	#3905:    tFblAddress baseAddress;
                          8215	#3906:    tFblLength  baseLength;
                          8216	#3907: #endif /* FBL_MEM_ENABLE_GAP_FILL */
                          8217	#3909:    retVal = kFblMemStatus_Ok;
00000b0e 4903             8218		se_li	r3, 16
                          8219	#3911:    /* Check allowed states */

                                   Fri Apr 10 08:32:15 2020           Page 148
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          8220	#3912:    if (kFblOk != FblMemCheckAllowed(FBL_MEM_ALLOWED_BLOCK_END, FBL_MEM_ALLOWED_BLOCK_END))
00000b10 480d             8221		se_li	r29, 0
00000b12 0134             8222		se_mr	r4, r3
00000b14 78000001         8223		se_bl	FblMemCheckAllowed
00000b18 2a03             8224		se_cmpi	r3, 0
00000b1a e600             8225		se_beq	.L3918
                          8226	#3913:    {
                          8227	#3914:       FBL_MEM_SET_STATUS(BlockEndSequence, retVal);   /* PRQA S 3109 */ /* MD_MSR_14.3 */
                          8228	#line3914
                          8229	..lin.1acf134f..3b1aa8bc.0_138::
                          8230	.LDWlin138:
00000b1c 4a4d             8231		se_li	r29, 36
00000b1e e800             8232		se_b	.L3925
                          8233	.L3918:
                          8234	#3915:    }
                          8235	#3916:    else
                          8236	#3917:    {
                          8237	#3918: #if defined( FBL_MEM_ENABLE_GAP_FILL )
                          8238	#3919:       /* No gap fill required for volatile memory */
                          8239	#3920:       if (kFblMemType_RAM != gSegInfo.input.type)
                          8240	#line3920
                          8241	..lin.1acf134f..3b1aa8bc.0_139::
                          8242	.LDWlin139:
00000b20 7360e000         8243		e_lis	r27, %hiadj(gSegInfo)
00000b24 1f7b0000         8244		e_add16i	r27, r27, %lo(gSegInfo)
00000b28 c40b             8245		se_lwz	r0, 16(r27)
00000b2a 2a00             8246		se_cmpi	r0, 0
00000b2c e600             8247		se_beq	.L3926
                          8248	#3921:       {
                          8249	#3922:          /* Address range information of last segment */
                          8250	#3923:          baseAddress = gBlockInfo.segmentList->segmentInfo[gSegInfo.ownIndex].targetAddress;
                          8251	#line3923
                          8252	..lin.1acf134f..3b1aa8bc.0_140::
                          8253	.LDWlin140:
00000b2e 7380e000         8254		e_lis	r28, %hiadj(gBlockInfo)
00000b32 1f9c0000         8255		e_add16i	r28, r28, %lo(gBlockInfo)
00000b36 cd7c             8256		se_lwz	r7, 52(r28)
00000b38 cb0b             8257		se_lwz	r0, 44(r27)
00000b3a c177             8258		se_lwz	r7, 4(r7)
00000b3c 1800a00c         8259		e_mulli	r0, r0, 12
00000b40 0407             8260		se_add	r7, r0
00000b42 c1e7             8261		se_lwz	r30, 4(r7)
                          8262	#3924:          baseLength  = gBlockInfo.segmentList->segmentInfo[gSegInfo.ownIndex].length;
00000b44 c2f7             8263		se_lwz	r31, 8(r7)
                          8264	#3926:          /* Include padding previously applied to end of last segment */
                          8265	#3927:          baseLength += FblMemPadLength(baseAddress, baseLength);
00000b46 01e3             8266		se_mr	r3, r30
00000b48 01f4             8267		se_mr	r4, r31
00000b4a 78000001         8268		se_bl	FblMemPadLength
00000b4e c10c             8269		se_lwz	r0, 4(r28)
                          8270	#3929:          /* Length till end of block
                          8271	#3930:             Subtract offset of segment start and length of segment (including padding) from block length
                          8272	#3931:             to prevent range overflow */
                          8273	#3932:          gGapFillJob.used  = (gBlockInfo.targetLength - (baseAddress - gBlockInfo.targetAddress)) - baseLength;
                          8274	#line3932
                          8275	..lin.1acf134f..3b1aa8bc.0_141::

                                   Fri Apr 10 08:32:15 2020           Page 149
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          8276	.LDWlin141:
00000b50 c07c             8277		se_lwz	r7, 0(r28)
00000b52 043f             8278		se_add	r31, r3
00000b54 7080e000         8279		e_lis	r4, %hiadj(gGapFillJob)
00000b58 1c840000         8280		e_add16i	r4, r4, %lo(gGapFillJob)
00000b5c 0407             8281		se_add	r7, r0
00000b5e 7c1e3850         8282		subf	r0, r30, r7
00000b62 7c1f0051         8283		subf.	r0, r31, r0
00000b66 d504             8284		se_stw	r0, 20(r4)
                          8285	#3934:          /* Gap fill not necessary when segment ends at last block address */
                          8286	#3935:          if (gGapFillJob.used > 0u)
00000b68 e600             8287		se_beq	.L3926
                          8288	#3936:          {
                          8289	#3937:             /* Setup concluding gap fill from end of last segment to end of block */
                          8290	#3938:             gGapFillJob.position    = 0u;
                          8291	#line3938
                          8292	..lin.1acf134f..3b1aa8bc.0_142::
                          8293	.LDWlin142:
00000b6a cb5b             8294		se_lwz	r5, 44(r27)
                          8295	#3939:             /* Gap fill starts after end of last segment */
                          8296	#3940:             gGapFillJob.baseAddress = baseAddress + baseLength;
00000b6c 7060e000         8297		e_lis	r3, %hiadj(gProcessingQueue)
00000b70 1c630000         8298		e_add16i	r3, r3, %lo(gProcessingQueue)
                          8299	#3942: #if defined( FBL_MEM_ENABLE_PROGRESS_INFO )
                          8300	#3943:             /* Setup gap fill progress */
                          8301	#3944:             FblMemSetupProgress(kFblMemProgressType_GapFill, gBlockInfo.logicalAddress, gSegInfo.nextIndex,
                          8302	#3945:                FBL_MEM_PROGRESS_INITIAL + FBL_MEM_PROGRESS_ERASE, FBL_MEM_PROGRESS_PROGRAM, gGapFillJob.used);
                          8303	#3946:             /* Adjust total percentages */
                          8304	#3947:             FblMemOffsetProgress((gGapFillJob.baseAddress - gBlockInfo.targetAddress), gBlockInfo.targetLength);
                          8305	#3948:             /* Report initial progress */
                          8306	#3949:             FblMemUpdateProgress(gGapFillJob.used);
                          8307	#3950: #endif /* FBL_MEM_ENABLE_PROGRESS_INFO*/
                          8308	#3952:             /* Trigger concluding gap fill */
                          8309	#3953:             (void)FblMemQueueDefaultPrioInsert(gProcessingQueue, &gGapFillJob, gSegInfo.ownIndex);
00000b74 04fe             8310		se_add	r30, r31
00000b76 d4d4             8311		se_stw	r29, 16(r4)
00000b78 d6e4             8312		se_stw	r30, 24(r4)
00000b7a 78000001         8313		se_bl	FblMemQueueDefaultPrioInsert
                          8314	#3955:             /* Continue operation */
                          8315	#3956:             fblMemProgState = kFblMemProgState_Pending;
                          8316	#line3956
                          8317	..lin.1acf134f..3b1aa8bc.0_143::
                          8318	.LDWlin143:
00000b7e 4850             8319		se_li	r0, 5
00000b80 70e0e000         8320		e_lis	r7, %hiadj(fblMemProgState)
00000b84 54070000         8321		e_stw	r0, %lo(fblMemProgState)(r7)
                          8322	#3958:             /* Finish processing of all pending buffers */
                          8323	#3959:             FblMemFlushQueueByPrio(kFblMemJobPrio_Write);
00000b88 4813             8324		se_li	r3, 1
00000b8a 78000001         8325		se_bl	FblMemFlushQueueByPrio
                          8326	.L3926:
                          8327	#3960:          }
                          8328	#3961:       }
                          8329	#3962: #endif /* FBL_MEM_ENABLE_GAP_FILL */
                          8330	#3964: #if defined( FBL_MEM_ENABLE_PROGRESS_INFO )
                          8331	#3965:       /* Conclude any pending progress (programming or gap fill) */

                                   Fri Apr 10 08:32:15 2020           Page 150
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          8332	#3966:       FblMemConcludeProgress();
                          8333	#3967: #endif /* FBL_MEM_ENABLE_PROGRESS_INFO*/
                          8334	#3970:       {
                          8335	#3971:          /* Concluding else */
                          8336	#3972:       }
                          8337	#3973:    }
                          8338	#3975:    if (kFblMemStatus_Ok == retVal)
                          8339	#3976:    {
                          8340	#3977:       /* Allow block verify */
                          8341	#3978:       FblMemSetAllowed(FBL_MEM_ALLOWED_BLOCK_VERIFY);
                          8342	#line3978
                          8343	..lin.1acf134f..3b1aa8bc.0_144::
                          8344	.LDWlin144:
00000b8e 4a00             8345		se_li	r0, 32
00000b90 70e0e000         8346		e_lis	r7, %hiadj(gAllowedInd)
00000b94 54070000         8347		e_stw	r0, %lo(gAllowedInd)(r7)
                          8348	.L3925:
                          8349	#3979:    }
                          8350	#3981:    return retVal;
00000b98 01d3             8351		se_mr	r3, r29
                          8352	#	    .ef
                          8353	.LDW58:
00000b9a c901             8354		se_lwz	r0, 36(sp)
00000b9c 1b61080c         8355		e_lmw	r27, 12(sp)
00000ba0 21f1             8356		se_addi	sp, 32
00000ba2 0090             8357		se_mtlr	r0
00000ba4 0004             8358		se_blr
                          8359		.global	__ghs_eofn_FblMemBlockEndIndication
                          8360	__ghs_eofn_FblMemBlockEndIndication:
                          8361		.type	FblMemBlockEndIndication,@function
                          8362		.size	FblMemBlockEndIndication,$-FblMemBlockEndIndication
                          8363		.align	1
                          8364	
                          8365	#function:			FblMemBlockEndIndication
                          8366	#stack frame size:		32
                          8367	#link area offset:		0
                          8368	#local storage area offset:	12
                          8369	#gpr save area offset:		12
                          8370	#
                          8371	#retVal	r29	local
                          8372	#baseAddress	r30	local
                          8373	#baseLength	r31	local
                          8374	
                          8375		.data
                          8376		.section ".vletext", "vax"
                          8377		.vle
                          8378		.vle
                          8379	
                          8380	#3982: }
                          8381	
                          8382	#3984: /***********************************************************************************************************************
                          8383	#3985:  *  FblMemBlockVerify
                          8384	#3986:  **********************************************************************************************************************/
                          8385	#3987: /*! \brief      Finalize block verification
                          8386	#3988:  *  \details    Hint: also call function if verification not configured
                          8387	#3989:  *  \pre        FblMemBlockEndIndication executed before

                                   Fri Apr 10 08:32:15 2020           Page 151
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          8388	#3990:  *  \param[in]  verifyData Pointer to verification structure
                          8389	#3991:  *                         Required members dependent on configuration
                          8390	#3992:  *  \param[out] verifyResult Pointer to extended verification result
                          8391	#3993:  *                           Null pointer if no extended result required
                          8392	#3994:  *  \return     Result of operation (potentially remapped to OEM specific NRC)
                          8393	#3995:  **********************************************************************************************************************/
                          8394		.align	1
                          8395		.align	1
                          8396	..gh.f.p.4.a.1.r.0.e.38:
                          8397		.type	..gh.f.p.4.a.1.r.0.e.38,@object
                          8398		.size	..gh.f.p.4.a.1.r.0.e.38,0
                          8399		.global	FblMemBlockVerify
                          8400	FblMemBlockVerify:
00000ba6 182106e8         8401		e_stwu	sp, -24(sp)
00000baa 0080             8402		se_mflr	r0
00000bac 1b810908         8403		e_stmw	r28, 8(sp)
00000bb0 d701             8404		se_stw	r0, 28(sp)
00000bb2 013c             8405		se_mr	r28, r3
00000bb4 014e             8406		se_mr	r30, r4
                          8407	#	    .bf
                          8408	.LDW68:
                          8409	#3996: tFblMemStatus FblMemBlockVerify( const V_MEMRAM1 tFblMemBlockVerifyData V_MEMRAM2 V_MEMRAM3 * verifyData,
                          8410	#3997:    V_MEMRAM1 tFblMemVerifyStatus V_MEMRAM2 V_MEMRAM3 * verifyResult )
                          8411	#3998: {
                          8412	#3999:    tFblMemStatus retVal;
                          8413	#4000:    tFblMemVerifyStatus localResult;
                          8414	#4001: #if defined( FBL_MEM_ENABLE_VERIFY_OUTPUT )
                          8415	#4002: # if defined( FBL_MEM_ENABLE_VERIFY_OUTPUT_FULL_BLOCK_LENGTH )
                          8416	#4003: # else
                          8417	#4004:    V_MEMRAM1 tFblMemSegmentListEntry V_MEMRAM2 V_MEMRAM3 * lastSegment;
                          8418	#4005: # endif /* FBL_MEM_ENABLE_VERIFY_OUTPUT_FULL_BLOCK_LENGTH */
                          8419	#4006: #endif /* FBL_MEM_ENABLE_VERIFY_OUTPUT */
                          8420	#4008: #if defined( FBL_MEM_ENABLE_VERIFICATION ) 
                          8421	#4009: #else
                          8422	#4010: # if defined( V_ENABLE_USE_DUMMY_STATEMENT )
                          8423	#4011:    /* Parameters not used: avoid compiler warning */
                          8424	#4012:    (void)verifyData; /* PRQA S 3112 */ /* MD_FblMem_3112 */
                          8425	#4013: # endif /* V_ENABLE_USE_DUMMY_STATEMENT */
                          8426	#4014: #endif /* FBL_MEM_ENABLE_VERIFICATION || FBL_MEM_ENABLE_PASSTHROUGH */
                          8427	#4016:    retVal      = kFblMemStatus_Ok;
00000bb6 480f             8428		se_li	r31, 0
                          8429	#4017:    localResult = FBL_MEM_VERIFY_OK;
00000bb8 01fd             8430		se_mr	r29, r31
                          8431	#4019:    /* Check allowed states */
                          8432	#4020:    if (kFblOk != FblMemCheckAllowed(FBL_MEM_ALLOWED_BLOCK_VERIFY, FBL_MEM_ALLOWED_NONE))
00000bba 4a03             8433		se_li	r3, 32
00000bbc 01d4             8434		se_mr	r4, r29
00000bbe 78000001         8435		se_bl	FblMemCheckAllowed
00000bc2 2a03             8436		se_cmpi	r3, 0
00000bc4 e600             8437		se_beq	.L4059
                          8438	#4021:    {
                          8439	#4022:       FBL_MEM_SET_STATUS(BlockVerifySequence, retVal);   /* PRQA S 3109 */ /* MD_MSR_14.3 */
                          8440	#line4022
                          8441	..lin.1acf134f..1a161d58.0_145::
                          8442	.LDWlin145:
00000bc6 4a4f             8443		se_li	r31, 36

                                   Fri Apr 10 08:32:15 2020           Page 152
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
00000bc8 e800             8444		se_b	.L4066
                          8445	.L4059:
                          8446	#4023:    }
                          8447	#4024:    else
                          8448	#4025:    {
                          8449	#4026:       {
                          8450	#4027: #if defined( FBL_MEM_ENABLE_VERIFY_OUTPUT )
                          8451	#4028:          {
                          8452	#4029:             /* Null pointer passed as verification function disables functionality */
                          8453	#4030:             if (FBL_MEM_VERIFY_FCT_OUTPUT_NULL != gBlockInfo.verifyRoutineOutput.function)
                          8454	#line4030
                          8455	..lin.1acf134f..1a161d58.0_146::
                          8456	.LDWlin146:
00000bca 70e0e000         8457		e_lis	r7, %hiadj(gBlockInfo)
00000bce 1ce70000         8458		e_add16i	r7, r7, %lo(gBlockInfo)
00000bd2 ca57             8459		se_lwz	r5, 40(r7)
00000bd4 2a05             8460		se_cmpi	r5, 0
00000bd6 e600             8461		se_beq	.L4067
                          8462	#4031:             {
                          8463	#4032:                /* Initialize verification parameter structure */
                          8464	#4033: # if defined( FBL_MEM_ENABLE_EXT_TRIGGER_OUTPUT_VERIFY )
                          8465	#4034:                gBlockInfo.verifyRoutineOutput.param->wdTriggerFct       = (tFblMemVerifyWdFct)FblMemTriggerWatchdogExt;
                          8466	#line4034
                          8467	..lin.1acf134f..1a161d58.0_147::
                          8468	.LDWlin147:
00000bd8 cb37             8469		se_lwz	r3, 44(r7)
00000bda 7000e000         8470		e_lis	r0, %hiadj(FblMemTriggerWatchdogExt)
00000bde 1c000000         8471		e_add16i	r0, r0, %lo(FblMemTriggerWatchdogExt)
00000be2 d603             8472		se_stw	r0, 24(r3)
                          8473	#4035: # else
                          8474	#4036:                gBlockInfo.verifyRoutineOutput.param->wdTriggerFct       = (tFblMemVerifyWdFct)FblMemTriggerWatchdog;
                          8475	#4037: # endif /* FBL_MEM_ENABLE_EXT_TRIGGER_OUTPUT_VERIFY */
                          8476	#4038: #if defined( FBL_MEM_ENABLE_PROGRESS_INFO )
                          8477	#4039:                /* Setup erase progress */
                          8478	#4040:                FblMemSetupProgress(kFblMemProgressType_Verify, gBlockInfo.logicalAddress, 0u,
                          8479	#4041:                   FBL_MEM_PROGRESS_INITIAL + FBL_MEM_PROGRESS_ERASE + FBL_MEM_PROGRESS_PROGRAM, FBL_MEM_PROGRESS_VERIFY,
                          8480	#4042:                   gBlockInfo.targetLength);
                          8481	#4043:                /* Report initial progress */
                          8482	#4044:                FblMemUpdateProgress(gBlockInfo.targetLength);
                          8483	#4046:                /* Overwrite read function to keep track of progress */
                          8484	#4047:                gBlockInfo.verifyRoutineOutput.param->readMemory         = FblMemProgressRead;
                          8485	#4048: #else
                          8486	#4049:                gBlockInfo.verifyRoutineOutput.param->readMemory         = gBlockInfo.readFct;
00000be4 cc07             8487		se_lwz	r0, 48(r7)
00000be6 d703             8488		se_stw	r0, 28(r3)
                          8489	#4050: #endif /* FBL_MEM_ENABLE_PROGRESS_INFO*/
                          8490	#4051:                gBlockInfo.verifyRoutineOutput.param->verificationData   = verifyData->verifyDataOutput.data;
00000be8 c60c             8491		se_lwz	r0, 24(r28)
00000bea d403             8492		se_stw	r0, 16(r3)
                          8493	#4053:                gBlockInfo.verifyRoutineOutput.param->blockStartAddress  = gBlockInfo.targetAddress;
00000bec c007             8494		se_lwz	r0, 0(r7)
00000bee cd77             8495		se_lwz	r7, 52(r7)
                          8496	#4054: # if defined( FBL_MEM_ENABLE_VERIFY_OUTPUT_FULL_BLOCK_LENGTH )
                          8497	#4055:                gBlockInfo.verifyRoutineOutput.param->blockLength        = gBlockInfo.targetLength;
                          8498	#4056: # else
                          8499	#4057:                /* Total length covered by all programmed segments (from block start)*/

                                   Fri Apr 10 08:32:15 2020           Page 153
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          8500	#4058:                lastSegment = &(gBlockInfo.segmentList->segmentInfo[gBlockInfo.segmentList->nrOfSegments - 1u]);
00000bf0 8067             8501		se_lbz	r6, 0(r7)
00000bf2 c177             8502		se_lwz	r7, 4(r7)
00000bf4 d203             8503		se_stw	r0, 8(r3)
00000bf6 18c6a00c         8504		e_mulli	r6, r6, 12
00000bfa 0467             8505		se_add	r7, r6
00000bfc 24b7             8506		se_subi	r7, 12
                          8507	#4060:                /* Segments have to be stored in increasing address order */
                          8508	#4061:                gBlockInfo.verifyRoutineOutput.param->blockLength = (lastSegment->targetAddress - gBlockInfo.targetAddress)
00000bfe c167             8509		se_lwz	r6, 4(r7)
00000c00 c277             8510		se_lwz	r7, 8(r7)
00000c02 0760             8511		se_subf	r0, r6
00000c04 0407             8512		se_add	r7, r0
00000c06 d373             8513		se_stw	r7, 12(r3)
                          8514	#4062:                                                                    + lastSegment->length;
                          8515	#4063: # endif /* FBL_MEM_ENABLE_VERIFY_OUTPUT_FULL_BLOCK_LENGTH */
                          8516	#4065:                /* Call verification function */
                          8517	#4066:                localResult = gBlockInfo.verifyRoutineOutput.function(gBlockInfo.verifyRoutineOutput.param);
00000c08 00b5             8518		se_mtctr	r5
00000c0a 0007             8519		se_bctrl
00000c0c 013d             8520		se_mr	r29, r3
                          8521	#4067:                if (FBL_MEM_VERIFY_OK != localResult)
00000c0e 2a03             8522		se_cmpi	r3, 0
00000c10 e600             8523		se_beq	.L4067
                          8524	#4068:                {
                          8525	#4069:                   FBL_MEM_SET_STATUS(BlockVerifyOutputVerify, retVal);  /* PRQA S 3109 */ /* MD_MSR_14.3 */
                          8526	#line4069
                          8527	..lin.1acf134f..1a161d58.0_148::
                          8528	.LDWlin148:
00000c12 490f             8529		se_li	r31, 16
00000c14 e800             8530		se_b	.L4066
                          8531	.L4067:
                          8532	#4070:                }
                          8533	#4071:             }
                          8534	#4072:          }
                          8535	#4073: #else
                          8536	#4074:          {
                          8537	#4075:             /* Concluding else */
                          8538	#4076:          }
                          8539	#4077: #endif /* FBL_MEM_ENABLE_VERIFY_OUTPUT */
                          8540	#4079: #if defined( FBL_MEM_ENABLE_PROGRESS_INFO )
                          8541	#4080:          /* Conclude pending verification progress */
                          8542	#4081:          FblMemConcludeProgress();
                          8543	#4082: #endif /* FBL_MEM_ENABLE_PROGRESS_INFO*/
                          8544	#4083:       }
                          8545	#4084:    }
                          8546	#4086:    if (kFblMemStatus_Ok == retVal)
                          8547	#4087:    {
                          8548	#4088:       /* Allow new block start / erase indication */
                          8549	#4089:       FblMemAddAllowed(FBL_MEM_ALLOWED_BLOCK_START | FBL_MEM_ALLOWED_BLOCK_ERASE);
                          8550	#line4089
                          8551	..lin.1acf134f..1a161d58.0_149::
                          8552	.LDWlin149:
00000c16 70e0e000         8553		e_lis	r7, %hiadj(gAllowedInd)
00000c1a 1ce70000         8554		e_add16i	r7, r7, %lo(gAllowedInd)
00000c1e c007             8555		se_lwz	r0, 0(r7)

                                   Fri Apr 10 08:32:15 2020           Page 154
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
00000c20 7000c041         8556		e_or2i	r0, 65
00000c24 d007             8557		se_stw	r0, 0(r7)
                          8558	.L4066:
                          8559	#4090:    }
                          8560	#4092:    if (FBL_MEM_VERIFY_STATUS_NULL != verifyResult)
00000c26 2a0e             8561		se_cmpi	r30, 0
00000c28 e600             8562		se_beq	.L4068
                          8563	#4093:    {
                          8564	#4094:       /* Pass extended result */
                          8565	#4095:       *verifyResult = localResult;
                          8566	#line4095
                          8567	..lin.1acf134f..1a161d58.0_150::
                          8568	.LDWlin150:
00000c2a 90de             8569		se_stb	r29, 0(r30)
                          8570	.L4068:
                          8571	#4096:    }
                          8572	#4098:    return retVal;
00000c2c 01f3             8573		se_mr	r3, r31
                          8574	#	    .ef
                          8575	.LDW78:
00000c2e c701             8576		se_lwz	r0, 28(sp)
00000c30 1b810808         8577		e_lmw	r28, 8(sp)
00000c34 2171             8578		se_addi	sp, 24
00000c36 0090             8579		se_mtlr	r0
00000c38 0004             8580		se_blr
                          8581		.global	__ghs_eofn_FblMemBlockVerify
                          8582	__ghs_eofn_FblMemBlockVerify:
                          8583		.type	FblMemBlockVerify,@function
                          8584		.size	FblMemBlockVerify,$-FblMemBlockVerify
                          8585		.align	1
                          8586	
                          8587	#function:			FblMemBlockVerify
                          8588	#stack frame size:		24
                          8589	#link area offset:		0
                          8590	#local storage area offset:	8
                          8591	#gpr save area offset:		8
                          8592	#
                          8593	#retVal	r31	local
                          8594	#localResult	r29	local
                          8595	#lastSegment	r7	local
                          8596	
                          8597	#verifyData	r28	param
                          8598	#verifyResult	r30	param
                          8599	
                          8600		.data
                          8601		.section ".vletext", "vax"
                          8602		.vle
                          8603		.vle
                          8604	
                          8605	#4099: } /* PRQA S 6080 */ /* MD_MSR_STMIF */
                          8606	
                          8607	#4101: /***********************************************************************************************************************
                          8608	#4102:  *  FblMemSegmentStartIndication
                          8609	#4103:  **********************************************************************************************************************/
                          8610	#4104: /*! \brief      Indicate start of a new segment
                          8611	#4105:  *  \details    Segment may consist of one or more chunks of input data programmed into a contiguous memory range

                                   Fri Apr 10 08:32:15 2020           Page 155
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          8612	#4106:  *              Update verification with logical address and length if configured
                          8613	#4107:  *              Initialize data processing if configured
                          8614	#4108:  *  \pre        FblMemBlockStartIndication executed before
                          8615	#4109:  *  \param[in]  segment Pointer to segment information
                          8616	#4110:  *                         Target address (program operation)
                          8617	#4111:  *                         Target length (program operation)
                          8618	#4112:  *                          either unprocessed data length actually written to memory or processed data length of input
                          8619	#4113:  *                          data
                          8620	#4114:  *                         Logical address (verification operation)
                          8621	#4115:  *                         Logical length (verification operation)
                          8622	#4116:  *                         Type (RAM / ROM)
                          8623	#4117:  *                         Data format identifier (data processing)
                          8624	#4118:  *  \return     Result of operation (potentially remapped to OEM specific NRC)
                          8625	#4119:  **********************************************************************************************************************/
                          8626		.align	1
                          8627		.align	1
                          8628	..gh.f.p.3.a.1.r.0.e.39:
                          8629		.type	..gh.f.p.3.a.1.r.0.e.39,@object
                          8630		.size	..gh.f.p.3.a.1.r.0.e.39,0
                          8631		.global	FblMemSegmentStartIndication
                          8632	FblMemSegmentStartIndication:
00000c3a 182106e0         8633		e_stwu	sp, -32(sp)
00000c3e 0080             8634		se_mflr	r0
00000c40 1b61090c         8635		e_stmw	r27, 12(sp)
00000c44 d901             8636		se_stw	r0, 36(sp)
00000c46 013b             8637		se_mr	r27, r3
                          8638	#	    .bf
                          8639	.LDW88:
                          8640	#4120: tFblMemStatus FblMemSegmentStartIndication( const V_MEMRAM1 tFblMemSegmentInfo V_MEMRAM2 V_MEMRAM3 * segment )
                          8641	#4121: {
                          8642	#4122:    tFblMemStatus     retVal;
                          8643	#4123: #if defined( FBL_MEM_ENABLE_GAP_FILL )
                          8644	#4124:    tFblAddress baseAddress;
                          8645	#4125:    tFblLength  baseLength;
                          8646	#4126: #endif /* FBL_MEM_ENABLE_GAP_FILL */
                          8647	#4127: #if defined( FBL_MEM_ENABLE_PROGRESS_INFO )
                          8648	#4128:    tFblAddress progressAddress;
                          8649	#4129:    tFblLength  progressRemainder;
                          8650	#4130: #endif /* FBL_MEM_ENABLE_PROGRESS_INFO */
                          8651	#4132:    retVal = kFblMemStatus_Ok;
00000c48 7380e000         8652		e_lis	r28, %hiadj(gSegInfo)
                          8653	#4134: #if defined( FBL_ENABLE_DATA_PROCESSING )    || \
                          8654	#4135:     defined( FBL_MEM_ENABLE_STREAM_OUTPUT )  || \
                          8655	#4136:     defined( FBL_MEM_ENABLE_REMAINDER_HANDLING )
                          8656	#4137:    /* Remember input buffer type: write through */
                          8657	#4138:    gSegInfo.jobType = kFblMemJobType_InputWrite;
00000c4c 480d             8658		se_li	r29, 0
00000c4e 1f9c0000         8659		e_add16i	r28, r28, %lo(gSegInfo)
00000c52 dadc             8660		se_stw	r29, 40(r28)
                          8661	#4139: #endif /* FBL_ENABLE_DATA_PROCESSING || FBL_MEM_ENABLE_STREAM_OUTPUT || FBL_MEM_ENABLE_PASSTHROUGH || FBL_MEM_ENABLE_REMAINDER_HANDLING */
                          8662	#4141:    /* Check allowed states */
                          8663	#4142:    if (kFblOk != FblMemCheckAllowed(FBL_MEM_ALLOWED_SEGMENT_START, FBL_MEM_ALLOWED_SEGMENT_START))
00000c54 4823             8664		se_li	r3, 2
00000c56 0134             8665		se_mr	r4, r3
00000c58 78000001         8666		se_bl	FblMemCheckAllowed
00000c5c 2a03             8667		se_cmpi	r3, 0

                                   Fri Apr 10 08:32:15 2020           Page 156
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
00000c5e e600             8668		se_beq	.L4229
                          8669	#4143:    {
                          8670	#4144:       FBL_MEM_SET_STATUS(SegmentStartSequence, retVal);  /* PRQA S 3109 */ /* MD_MSR_14.3 */
                          8671	#line4144
                          8672	..lin.1acf134f..697958bb.0_151::
                          8673	.LDWlin151:
00000c60 4a4d             8674		se_li	r29, 36
00000c62 e800             8675		se_b	.L4250
                          8676	.L4229:
                          8677	#4145:    }
                          8678	#4146: #if defined( FBL_MEM_ENABLE_SEGMENT_HANDLING )
                          8679	#4147:    else if (gBlockInfo.segmentList->nrOfSegments >= gBlockInfo.maxSegments)
                          8680	#line4147
                          8681	..lin.1acf134f..697958bb.0_152::
                          8682	.LDWlin152:
00000c64 70e0e000         8683		e_lis	r7, %hiadj(gBlockInfo)
00000c68 1ce70000         8684		e_add16i	r7, r7, %lo(gBlockInfo)
00000c6c cd67             8685		se_lwz	r6, 52(r7)
00000c6e 30070038         8686		e_lbz	r0, 56(r7)
00000c72 8056             8687		se_lbz	r5, 0(r6)
00000c74 0d05             8688		se_cmpl	r5, r0
00000c76 e400             8689		se_blt	.L4232
                          8690	#4148:    {
                          8691	#4149:       /* Maximum number of segment list entries exceeded */
                          8692	#4150:       FBL_MEM_SET_STATUS(SegmentStartSegmentCount, retVal);  /* PRQA S 3109 */ /* MD_MSR_14.3 */
                          8693	#line4150
                          8694	..lin.1acf134f..697958bb.0_153::
                          8695	.LDWlin153:
00000c78 4a20             8696		se_li	r0, 34
00000c7a 70e0e000         8697		e_lis	r7, %hiadj(errStatErrorCode)
00000c7e 5c070000         8698		e_sth	r0, %lo(errStatErrorCode)(r7)
00000c82 4b1d             8699		se_li	r29, 49
00000c84 e800             8700		se_b	.L4250
                          8701	.L4232:
                          8702	#4151:    }
                          8703	#4152: #endif /* FBL_MEM_ENABLE_SEGMENT_HANDLING */
                          8704	#4153:    else
                          8705	#4154:    {
                          8706	#4155: #if defined( FBL_MEM_ENABLE_VERIFY_STREAM )
                          8707	#4156:       /* Initialize verification on first segment */
                          8708	#4157:       if (0u == gSegInfo.nextIndex)
                          8709	#4158:       {
                          8710	#4159:          /* Initialize the calculation */
                          8711	#4160:          if (kFblMemStatus_Ok != FblMemInitVerifyInput())
                          8712	#4161:          {
                          8713	#4162:             /* Overwrites previous error code */
                          8714	#4163:             FBL_MEM_SET_STATUS(SegmentStartVerifyInit, retVal); /* PRQA S 3109 */ /* MD_MSR_14.3 */
                          8715	#4164:          }
                          8716	#4165:       }
                          8717	#4167:       if (kFblMemStatus_Ok == retVal)
                          8718	#4168: #endif /* FBL_MEM_ENABLE_VERIFY_STREAM */
                          8719	#4169: #if defined( FBL_MEM_ENABLE_VERIFY_ADDRESS_LENGTH )
                          8720	#4170:       {
                          8721	#4171:          {
                          8722	#4172:          }
                          8723	#4173:       }

                                   Fri Apr 10 08:32:15 2020           Page 157
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          8724	#4175:       if (kFblMemStatus_Ok == retVal)
                          8725	#4176: #endif /* FBL_MEM_ENABLE_VERIFY_ADDRESS_LENGTH */
                          8726	#4177:       {
                          8727	#4178:          /* Check whether data processing is requested */
                          8728	#4179:          if (kFblOk == __ApplFblMemIsDataProcessingRequired(segment->dataFormat))
                          8729	#line4179
                          8730	..lin.1acf134f..697958bb.0_154::
                          8731	.LDWlin154:
00000c86 301b0014         8732		e_lbz	r0, 20(r27)
00000c8a 2a00             8733		se_cmpi	r0, 0
00000c8c e600             8734		se_beq	.L4238
                          8735	#4180:          {
                          8736	#4181: #if defined( FBL_ENABLE_DATA_PROCESSING )
                          8737	#4182:             /* Remember input buffer type: data processing */
                          8738	#4183:             gSegInfo.jobType = kFblMemJobType_ProcInput;
                          8739	#4185:             /* Initialize user specific processing of received data */
                          8740	#4186:             gProcParam.mode = segment->dataFormat;
                          8741	#4188:             /* Check result */
                          8742	#4189:             if (kFblOk != ApplFblInitDataProcessing(&gProcParam))
                          8743	#4190:             {
                          8744	#4191:                FBL_MEM_SET_STATUS(SegmentStartDataProcInit, retVal); /* PRQA S 3109 */ /* MD_MSR_14.3 */
                          8745	#4192:             }
                          8746	#4193: #else
                          8747	#4194:             /* Data processing not supported, refuse indication */
                          8748	#4195:             FBL_MEM_SET_STATUS(SegmentStartDataProcInit, retVal); /* PRQA S 3109 */ /* MD_MSR_14.3 */
                          8749	#line4195
                          8750	..lin.1acf134f..697958bb.0_155::
                          8751	.LDWlin155:
00000c8e 4f0d             8752		se_li	r29, 112
00000c90 e800             8753		se_b	.L4250
                          8754	.L4238:
                          8755	#4196: #endif /* FBL_ENABLE_DATA_PROCESSING */
                          8756	#4197:          }
                          8757	#4198:       }
                          8758	#4200: #if defined( __ApplFblMemIsStreamOutputRequired )
                          8759	#4201:       if (kFblMemStatus_Ok == retVal)
                          8760	#4202:       {
                          8761	#4203:          /* Check whether stream output is requested */
                          8762	#4204:          if (kFblOk == __ApplFblMemIsStreamOutputRequired(segment->dataFormat))
                          8763	#4205:          {
                          8764	#4206: # if defined( FBL_MEM_ENABLE_STREAM_OUTPUT )
                          8765	#4207: #  if defined( FBL_ENABLE_DATA_PROCESSING )
                          8766	#4208:             if (kFblOk == __ApplFblMemIsDataProcessingRequired(segment->dataFormat))
                          8767	#4209:             {
                          8768	#4210:                /* Input buffer type (data processing) already set */
                          8769	#4211:             }
                          8770	#4212:             else
                          8771	#4213: #  endif /* FBL_ENABLE_DATA_PROCESSING */
                          8772	#4214:             {
                          8773	#4215:                /* Remember input buffer type: stream output */
                          8774	#4216:                gSegInfo.jobType = kFblMemJobType_StreamInput;
                          8775	#4217:             }
                          8776	#4219:             /* Initialize user specific stream output of received data */
                          8777	#4220:             gStreamParam.mode          = segment->dataFormat;
                          8778	#4221:             gStreamParam.baseAddress   = segment->targetAddress;
                          8779	#4222:             gStreamParam.baseLength    = gBlockInfo.targetLength - (segment->targetAddress - gBlockInfo.targetAddress);

                                   Fri Apr 10 08:32:15 2020           Page 158
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          8780	#4224:             /* Check result */
                          8781	#4225:             if (kFblOk != ApplFblInitStreamOutput(&gStreamParam))
                          8782	#4226:             {
                          8783	#4227:                FBL_MEM_SET_STATUS(SegmentStartStreamOutInit, retVal); /* PRQA S 3109 */ /* MD_MSR_14.3 */
                          8784	#4228:             }
                          8785	#4229: # else
                          8786	#4230:             /* Stream output not supported, refuse indication */
                          8787	#4231:             FBL_MEM_SET_STATUS(SegmentStartStreamOutInit, retVal); /* PRQA S 3109 */ /* MD_MSR_14.3 */
                          8788	#4232: # endif /* FBL_MEM_ENABLE_STREAM_OUTPUT */
                          8789	#4233:          }
                          8790	#4234:       }
                          8791	#4235: #endif /* __ApplFblMemIsStreamOutputRequired */
                          8792	#4237: #if defined( FBL_MEM_ENABLE_PROGRESS_INFO )
                          8793	#4238:       /* Progress information for segment (without gap fill) */
                          8794	#4239:       progressAddress   = segment->targetAddress;
                          8795	#4240:       progressRemainder = segment->targetLength;
                          8796	#4241: #endif /* FBL_MEM_ENABLE_PROGRESS_INFO */
                          8797	#4243: #if defined( FBL_MEM_ENABLE_GAP_FILL )
                          8798	#4244:       if (kFblMemStatus_Ok == retVal)
                          8799	#4245:       {
                          8800	#4246:          /* No gap fill required for volatile memory */
                          8801	#4247:          if (kFblMemType_RAM != segment->type)
                          8802	#line4247
                          8803	..lin.1acf134f..697958bb.0_156::
                          8804	.LDWlin156:
00000c92 c40b             8805		se_lwz	r0, 16(r27)
00000c94 2a00             8806		se_cmpi	r0, 0
00000c96 e600             8807		se_beq	.L4251
                          8808	#4248:          {
                          8809	#4249:             /* First segment of block? */
                          8810	#4250:             if (0u == gSegInfo.nextIndex)
                          8811	#line4250
                          8812	..lin.1acf134f..697958bb.0_157::
                          8813	.LDWlin157:
00000c98 cc0c             8814		se_lwz	r0, 48(r28)
00000c9a 2a00             8815		se_cmpi	r0, 0
00000c9c e200             8816		se_bne	.L4241
                          8817	#4251:             {
                          8818	#4252:                /* Fill from beginning of block */
                          8819	#4253:                baseAddress = gBlockInfo.targetAddress;
                          8820	#line4253
                          8821	..lin.1acf134f..697958bb.0_158::
                          8822	.LDWlin158:
00000c9e c0e7             8823		se_lwz	r30, 0(r7)
                          8824	#4254:                baseLength  = 0u;
00000ca0 480f             8825		se_li	r31, 0
00000ca2 e800             8826		se_b	.L4243
                          8827	.L4241:
                          8828	#4255:             }
                          8829	#4256:             else
                          8830	#4257:             {
                          8831	#4258:                /* Fill from end of previous segment */
                          8832	#4259:                baseAddress = gBlockInfo.segmentList->segmentInfo[gSegInfo.ownIndex].targetAddress;
                          8833	#line4259
                          8834	..lin.1acf134f..697958bb.0_159::
                          8835	.LDWlin159:

                                   Fri Apr 10 08:32:15 2020           Page 159
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
00000ca4 cb0c             8836		se_lwz	r0, 44(r28)
00000ca6 c176             8837		se_lwz	r7, 4(r6)
00000ca8 1800a00c         8838		e_mulli	r0, r0, 12
00000cac 0407             8839		se_add	r7, r0
00000cae c1e7             8840		se_lwz	r30, 4(r7)
                          8841	#4260:                baseLength  = gBlockInfo.segmentList->segmentInfo[gSegInfo.ownIndex].length;
00000cb0 c2f7             8842		se_lwz	r31, 8(r7)
                          8843	.L4243:
                          8844	#4261:             }
                          8845	#4263:             /* Include padding applied to end of previous segment */
                          8846	#4264:             baseLength += FblMemPadLength(baseAddress, baseLength);
00000cb2 01e3             8847		se_mr	r3, r30
00000cb4 01f4             8848		se_mr	r4, r31
00000cb6 78000001         8849		se_bl	FblMemPadLength
00000cba c00b             8850		se_lwz	r0, 0(r27)
                          8851	#4266:             /* Segments in ascending order? */
                          8852	#4267:             assertFblInternal((segment->targetAddress >= baseAddress), kFblMemAssertParameterOutOfRange); /* PRQA S 2214 */ /* MD_FblDef_Assert */
                          8853	#line4267
                          8854	..lin.1acf134f..697958bb.0_160::
                          8855	.LDWlin160:
00000cbc 043f             8856		se_add	r31, r3
00000cbe 0de0             8857		se_cmpl	r0, r30
00000cc0 e000             8858		se_bge	.L4244
00000cc2 4813             8859		se_li	r3, 1
00000cc4 78000001         8860		e_bl	ApplFblFatalError
                          8861	.L4244:
                          8862	#4268:             assertFblInternal(((segment->targetAddress - baseAddress) >= baseLength), kFblMemAssertParameterOutOfRange); /* PRQA S 2214 */ /* MD_FblDef_Assert */
                          8863	#line4268
                          8864	..lin.1acf134f..697958bb.0_161::
                          8865	.LDWlin161:
00000cc8 c00b             8866		se_lwz	r0, 0(r27)
00000cca 06e0             8867		se_sub	r0, r30
00000ccc 0df0             8868		se_cmpl	r0, r31
00000cce e000             8869		se_bge	.L4246
00000cd0 4813             8870		se_li	r3, 1
00000cd2 78000001         8871		e_bl	ApplFblFatalError
                          8872	.L4246:
                          8873	#4270:             /* Length till start of current segment
                          8874	#4271:                Subtract length of previous segment (including padding) from offset between segments
                          8875	#4272:                to prevent range overflow */
                          8876	#4273:             gGapFillJob.used = (segment->targetAddress - baseAddress) - baseLength;
                          8877	#line4273
                          8878	..lin.1acf134f..697958bb.0_162::
                          8879	.LDWlin162:
00000cd6 c00b             8880		se_lwz	r0, 0(r27)
00000cd8 7080e000         8881		e_lis	r4, %hiadj(gGapFillJob)
00000cdc 1c840000         8882		e_add16i	r4, r4, %lo(gGapFillJob)
00000ce0 06e0             8883		se_sub	r0, r30
00000ce2 7c1f0051         8884		subf.	r0, r31, r0
00000ce6 d504             8885		se_stw	r0, 20(r4)
                          8886	#4275:             /* Gap fill not necessary when segment starts directly after previous segment */
                          8887	#4276:             if (gGapFillJob.used > 0u)
00000ce8 e600             8888		se_beq	.L4251
                          8889	#4277:             {
                          8890	#4278:                /* Setup gap fill */
                          8891	#4279:                gGapFillJob.position    = 0u;

                                   Fri Apr 10 08:32:15 2020           Page 160
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          8892	#line4279
                          8893	..lin.1acf134f..697958bb.0_163::
                          8894	.LDWlin163:
00000cea cc5c             8895		se_lwz	r5, 48(r28)
                          8896	#4280:                /* Gap fill starts after end of previous segment */
                          8897	#4281:                gGapFillJob.baseAddress = baseAddress + baseLength;
00000cec 7060e000         8898		e_lis	r3, %hiadj(gProcessingQueue)
00000cf0 1c630000         8899		e_add16i	r3, r3, %lo(gProcessingQueue)
                          8900	#4283: #if defined( FBL_MEM_ENABLE_PROGRESS_INFO )
                          8901	#4284:                /* Include gap fill range in progress information */
                          8902	#4285:                progressAddress    = gGapFillJob.baseAddress;
                          8903	#4286:                progressRemainder += gGapFillJob.used;
                          8904	#4287: #endif /* FBL_MEM_ENABLE_PROGRESS_INFO */
                          8905	#4289:                /* Trigger gap fill */
                          8906	#4290:                (void)FblMemQueueDefaultPrioInsert(gProcessingQueue, &gGapFillJob, gSegInfo.nextIndex);
00000cf4 04fe             8907		se_add	r30, r31
00000cf6 d4d4             8908		se_stw	r29, 16(r4)
00000cf8 d6e4             8909		se_stw	r30, 24(r4)
00000cfa 78000001         8910		se_bl	FblMemQueueDefaultPrioInsert
                          8911	.L4251:
                          8912	#4292:             }
                          8913	#4293:          }
                          8914	#4294:       }
                          8915	#4295: #endif /* FBL_MEM_ENABLE_GAP_FILL */
                          8916	#4297: #if defined( FBL_MEM_ENABLE_PROGRESS_INFO )
                          8917	#4298:       /* Setup programming progress (may include gap fill) */
                          8918	#4299:       FblMemSetupProgress(kFblMemProgressType_Program, gBlockInfo.logicalAddress, gSegInfo.nextIndex,
                          8919	#4300:          FBL_MEM_PROGRESS_INITIAL + FBL_MEM_PROGRESS_ERASE, FBL_MEM_PROGRESS_PROGRAM, progressRemainder);
                          8920	#4301:       /* Adjust total percentages */
                          8921	#4302:       FblMemOffsetProgress((progressAddress - gBlockInfo.targetAddress), gBlockInfo.targetLength);
                          8922	#4303:       /* Report initial progress */
                          8923	#4304:       FblMemUpdateProgress(progressRemainder);
                          8924	#4305: #endif /* FBL_MEM_ENABLE_PROGRESS_INFO */
                          8925	#4306:    }
                          8926	#4308:    if (kFblMemStatus_Ok == retVal)
                          8927	#4309:    {
                          8928	#4310:       /* Copy input parameters to local variable */
                          8929	#4311:       gSegInfo.input          = *segment;
                          8930	#line4311
                          8931	..lin.1acf134f..697958bb.0_164::
                          8932	.LDWlin164:
00000cfe 4985             8933		se_li	r5, 24
00000d00 01b4             8934		se_mr	r4, r27
00000d02 01c3             8935		se_mr	r3, r28
00000d04 78000001         8936		e_bl	memmove
                          8937	#4313:       /* Initialize internal attributes */
                          8938	#4314:       gSegInfo.writeAddress   = segment->targetAddress;
00000d08 c00b             8939		se_lwz	r0, 0(r27)
00000d0a d60c             8940		se_stw	r0, 24(r28)
                          8941	#4315:       gSegInfo.writeRemainder = 0u;
00000d0c d7dc             8942		se_stw	r29, 28(r28)
                          8943	#4316: #if defined( FBL_ENABLE_PROCESSED_DATA_LENGTH )
                          8944	#4317:       /* Available length from start of segment to end of block */
                          8945	#4318:       gSegInfo.writeLength    = gBlockInfo.targetLength - (segment->targetAddress - gBlockInfo.targetAddress);
                          8946	#4319:       gSegInfo.writtenLength  = 0u;
                          8947	#4320: #else

                                   Fri Apr 10 08:32:15 2020           Page 161
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          8948	#4321:       gSegInfo.writeLength    = segment->targetLength;
00000d0e c17b             8949		se_lwz	r7, 4(r27)
00000d10 d87c             8950		se_stw	r7, 32(r28)
                          8951	#4322: #endif /* FBL_ENABLE_PROCESSED_DATA_LENGTH */
                          8952	#4323: #if defined( FBL_ENABLE_UNALIGNED_DATA_TRANSFER )
                          8953	#4324:       /* Sliding input address required for remainder calculation */
                          8954	#4325:       gSegInfo.inputAddress   = segment->targetAddress;
00000d12 d90c             8955		se_stw	r0, 36(r28)
                          8956	#4326: #endif /* FBL_ENABLE_UNALIGNED_DATA_TRANSFER */
                          8957	#4327: #if defined( FBL_MEM_ENABLE_INPUT_LENGTH )
                          8958	#4328:       /* Running input length required for early overflow detection */
                          8959	#4329:       gSegInfo.inputLength    = segment->targetLength;
                          8960	#4330: #endif /* FBL_MEM_ENABLE_INPUT_LENGTH */
                          8961	#4332:       gSegInfo.ownIndex       = gSegInfo.nextIndex;
00000d14 cc0c             8962		se_lwz	r0, 48(r28)
00000d16 70e0e000         8963		e_lis	r7, %hiadj(gAllowedInd)
                          8964	#4333:       gSegInfo.nextIndex++;
00000d1a db0c             8965		se_stw	r0, 44(r28)
00000d1c 2000             8966		se_addi	r0, 1
                          8967	#4335:       /* Allow data indication */
                          8968	#4336:       FblMemSetAllowed(FBL_MEM_ALLOWED_DATA_IND);
00000d1e dc0c             8969		se_stw	r0, 48(r28)
00000d20 4840             8970		se_li	r0, 4
00000d22 54070000         8971		e_stw	r0, %lo(gAllowedInd)(r7)
                          8972	.L4250:
                          8973	#4337:    }
                          8974	#4339:    return retVal;
00000d26 01d3             8975		se_mr	r3, r29
                          8976	#	    .ef
                          8977	.LDW98:
00000d28 c901             8978		se_lwz	r0, 36(sp)
00000d2a 1b61080c         8979		e_lmw	r27, 12(sp)
00000d2e 21f1             8980		se_addi	sp, 32
00000d30 0090             8981		se_mtlr	r0
00000d32 0004             8982		se_blr
                          8983		.global	__ghs_eofn_FblMemSegmentStartIndication
                          8984	__ghs_eofn_FblMemSegmentStartIndication:
                          8985		.type	FblMemSegmentStartIndication,@function
                          8986		.size	FblMemSegmentStartIndication,$-FblMemSegmentStartIndication
                          8987		.align	1
                          8988	
                          8989	#function:			FblMemSegmentStartIndication
                          8990	#stack frame size:		32
                          8991	#link area offset:		0
                          8992	#local storage area offset:	12
                          8993	#gpr save area offset:		12
                          8994	#
                          8995	#retVal	r29	local
                          8996	#baseAddress	r30	local
                          8997	#baseLength	r31	local
                          8998	
                          8999	#segment	r27	param
                          9000	
                          9001		.data
                          9002		.section ".vletext", "vax"
                          9003		.vle

                                   Fri Apr 10 08:32:15 2020           Page 162
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          9004		.vle
                          9005	
                          9006	#4340: } /* PRQA S 6080 */ /* MD_MSR_STMIF */
                          9007	
                          9008	#4342: /***********************************************************************************************************************
                          9009	#4343:  *  FblMemSegmentEndIndication
                          9010	#4344:  **********************************************************************************************************************/
                          9011	#4345: /*! \brief      Indicate end of current segment
                          9012	#4346:  *  \details    Finish processing of all pending buffers, finalize data
                          9013	#4347:  *              processing and program any remainder
                          9014	#4348:  *  \pre        FblMemDataIndication executed before
                          9015	#4349:  *  \param[out] writeLength Pointer to length actually written
                          9016	#4350:  *  \return     Result of operation (potentially remapped to OEM specific NRC)
                          9017	#4351:  *              May return error generated by background task operation
                          9018	#4352:  **********************************************************************************************************************/
                          9019		.align	1
                          9020		.align	1
                          9021	..gh.f.p.3.a.1.r.0.e.40:
                          9022		.type	..gh.f.p.3.a.1.r.0.e.40,@object
                          9023		.size	..gh.f.p.3.a.1.r.0.e.40,0
                          9024		.global	FblMemSegmentEndIndication
                          9025	FblMemSegmentEndIndication:
00000d34 182106e0         9026		e_stwu	sp, -32(sp)
00000d38 0080             9027		se_mflr	r0
00000d3a 1b61090c         9028		e_stmw	r27, 12(sp)
00000d3e d901             9029		se_stw	r0, 36(sp)
00000d40 013d             9030		se_mr	r29, r3
                          9031	#	    .bf
                          9032	.LDW09:
                          9033	#4353: tFblMemStatus FblMemSegmentEndIndication( V_MEMRAM1 tFblLength V_MEMRAM2 V_MEMRAM3 * writeLength )
                          9034	#4354: {
                          9035	#4355:    tFblMemStatus retVal;
                          9036	#4356: #if defined( FBL_MEM_ENABLE_REMAINDER_HANDLING_SINGLE_JOB ) || \
                          9037	#4357:     defined( FBL_ENABLE_UNALIGNED_DATA_TRANSFER ) || \
                          9038	#4358:     defined( FBL_MEM_ENABLE_SEGMENTED_INPUT_BUFFER )
                          9039	#4359:    V_MEMRAM1 tFblMemJob V_MEMRAM2 V_MEMRAM3 * activeJob;
                          9040	#4360: #endif /* FBL_MEM_ENABLE_REMAINDER_HANDLING_SINGLE_JOB || FBL_ENABLE_UNALIGNED_DATA_TRANSFER || FBL_MEM_ENABLE_SEGMENTED_INPUT_BUFFER */
                          9041	#4361: #if defined( FBL_MEM_ENABLE_SEGMENT_HANDLING )
                          9042	#4362:    V_MEMRAM1 tFblMemSegmentListEntry V_MEMRAM2 V_MEMRAM3 * activeSegment;
                          9043	#4363: #endif /* FBL_MEM_ENABLE_SEGMENT_HANDLING */
                          9044	#4365:    retVal = kFblMemStatus_Ok;
00000d42 480e             9045		se_li	r30, 0
                          9046	#4367:    /* Check allowed states */
                          9047	#4368:    if (kFblOk != FblMemCheckAllowed(FBL_MEM_ALLOWED_SEGMENT_END, FBL_MEM_ALLOWED_DATA_IND | FBL_MEM_ALLOWED_SEGMENT_END))
00000d44 4883             9048		se_li	r3, 8
00000d46 48c4             9049		se_li	r4, 12
00000d48 78000001         9050		se_bl	FblMemCheckAllowed
00000d4c 2a03             9051		se_cmpi	r3, 0
00000d4e e600             9052		se_beq	.L4548
                          9053	#4369:    {
                          9054	#4370:       FBL_MEM_SET_STATUS(SegmentEndSequence, retVal); /* PRQA S 3109 */ /* MD_MSR_14.3 */
                          9055	#line4370
                          9056	..lin.1acf134f..f7c803c4.0_165::
                          9057	.LDWlin165:
00000d50 4a4e             9058		se_li	r30, 36
00000d52 e800             9059		se_b	.L4560

                                   Fri Apr 10 08:32:15 2020           Page 163
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          9060	.L4548:
                          9061	#4371:    }
                          9062	#4372:    else
                          9063	#4373:    {
                          9064	#4374: #if defined( FBL_MEM_ENABLE_PREAMBLE_HANDLING )
                          9065	#4375:       /* Active fill buffer may change
                          9066	#4376:          Store preamble so operation is transparent for caller */
                          9067	#4377:       FblMemStorePreamble();
                          9068	#line4377
                          9069	..lin.1acf134f..f7c803c4.0_166::
                          9070	.LDWlin166:
00000d54 78000001         9071		se_bl	FblMemStorePreamble
                          9072	#4378: #endif /* FBL_MEM_ENABLE_PREAMBLE_HANDLING */
                          9073	#4380: #if defined( FBL_MEM_ENABLE_REMAINDER_HANDLING_SINGLE_JOB )
                          9074	#4381:       /* Active input job may be used as finalization trigger (flush remainder) */
                          9075	#4382:       activeJob = FblMemGetPendingInputJob();
                          9076	#4383: #endif /* FBL_MEM_ENABLE_REMAINDER_HANDLING_SINGLE_JOB */
                          9077	#4385:       {
                          9078	#4386: #if defined( FBL_ENABLE_DATA_PROCESSING )    || \
                          9079	#4387:     defined( FBL_MEM_ENABLE_STREAM_OUTPUT )  || \
                          9080	#4388:     defined( FBL_MEM_ENABLE_REMAINDER_HANDLING )
                          9081	#4389:          if (kFblMemProgState_Error != fblMemProgState)
                          9082	#line4389
                          9083	..lin.1acf134f..f7c803c4.0_167::
                          9084	.LDWlin167:
00000d58 7380e000         9085		e_lis	r28, %hiadj(fblMemProgState)
00000d5c 1f9c0000         9086		e_add16i	r28, r28, %lo(fblMemProgState)
00000d60 c00c             9087		se_lwz	r0, 0(r28)
00000d62 73e0e000         9088		e_lis	r31, %hiadj(gSegInfo)
00000d66 1fff0000         9089		e_add16i	r31, r31, %lo(gSegInfo)
00000d6a 2a10             9090		se_cmpi	r0, 1
00000d6c e600             9091		se_beq	.L4551
                          9092	#4390:          {
                          9093	#4391: # if defined( FBL_ENABLE_DATA_PROCESSING )
                          9094	#4392:             /* Data processing active? */
                          9095	#4393:             if (kFblOk == __ApplFblMemIsDataProcessingRequired(gSegInfo.input.dataFormat))
                          9096	#4394:             {
                          9097	#4395:                /* Do not remove finalize job until no data is produced anymore */
                          9098	#4396:                gProcFinalizeJob.completion = kFblMemOperationMode_Finalize;
                          9099	#4398:                /* No additional data in this segment, trigger finalization of data processing
                          9100	#4399:                   Add to queue as some jobs may still be pending */
                          9101	#4400:                (void)FblMemQueueDefaultPrioInsert(gProcessingQueue, &gProcFinalizeJob, gSegInfo.ownIndex);
                          9102	#4401:             }
                          9103	#4402: # endif /* FBL_ENABLE_DATA_PROCESSING */
                          9104	#4404: # if defined( FBL_MEM_ENABLE_STREAM_OUTPUT )
                          9105	#4405:             /* Stream output active? */
                          9106	#4406:             if (kFblOk == __ApplFblMemIsStreamOutputRequired(gSegInfo.input.dataFormat))
                          9107	#4407:             {
                          9108	#4408:                /* Do not remove finalize job until no data is produced anymore */
                          9109	#4409:                gStreamFinalizeJob.completion = kFblMemOperationMode_Finalize;
                          9110	#4411:                /* No additional data in this segment, trigger finalization of stream output
                          9111	#4412:                   Add to queue as some jobs may still be pending */
                          9112	#4413:                (void)FblMemQueueDefaultPrioInsert(gProcessingQueue, &gStreamFinalizeJob, gSegInfo.ownIndex);
                          9113	#4414:             }
                          9114	#4415:             /* Skip write finalization */
                          9115	#4416:             else

                                   Fri Apr 10 08:32:15 2020           Page 164
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          9116	#4417: # endif /* FBL_MEM_ENABLE_STREAM_OUTPUT */
                          9117	#4418:             {
                          9118	#4419: # if defined( FBL_MEM_ENABLE_REMAINDER_HANDLING )
                          9119	#4420: #  if defined( FBL_MEM_ENABLE_PROC_QUEUE )
                          9120	#4421:                /* Insert dummy info into queue to trigger finalization of write */
                          9121	#4422:                (void)FblMemQueueDefaultPrioInsert(gProcessingQueue, &gWriteFinalizeJob, gSegInfo.ownIndex);
                          9122	#line4422
                          9123	..lin.1acf134f..f7c803c4.0_168::
                          9124	.LDWlin168:
00000d6e 7360e000         9125		e_lis	r27, %hiadj(gProcessingQueue)
00000d72 cb5f             9126		se_lwz	r5, 44(r31)
00000d74 1f7b0000         9127		e_add16i	r27, r27, %lo(gProcessingQueue)
00000d78 7080e000         9128		e_lis	r4, %hiadj(gWriteFinalizeJob)
00000d7c 01b3             9129		se_mr	r3, r27
00000d7e 1c840000         9130		e_add16i	r4, r4, %lo(gWriteFinalizeJob)
00000d82 78000001         9131		se_bl	FblMemQueueDefaultPrioInsert
                          9132	#4423: #  else
                          9133	#4424:                /* Enable switch combination equals FBL_MEM_ENABLE_REMAINDER_HANDLING_SINGLE_JOB */
                          9134	#4426:                /* Re-use active input job as finalization trigger (flush remainder)
                          9135	#4427:                   Change job type, all other members already have a consistent value */
                          9136	#4428:                activeJob->type = kFblMemJobType_WriteFinalize;
                          9137	#4429: #  endif /* FBL_MEM_ENABLE_PROC_QUEUE */
                          9138	#4430: # endif /* FBL_MEM_ENABLE_REMAINDER_HANDLING */
                          9139	#4431:             }
                          9140	#4433: # if defined( FBL_MEM_ENABLE_PROC_QUEUE )
                          9141	#4434:             if (!FblMemQueueIsEmpty(gProcessingQueue))
                          9142	#line4434
                          9143	..lin.1acf134f..f7c803c4.0_169::
                          9144	.LDWlin169:
00000d86 c30b             9145		se_lwz	r0, 12(r27)
00000d88 2a00             9146		se_cmpi	r0, 0
00000d8a e600             9147		se_beq	.L4551
                          9148	#4435: # endif /* FBL_MEM_ENABLE_PROC_QUEUE */
                          9149	#4436:             {
                          9150	#4437:                /* Continue operation */
                          9151	#4438:                fblMemProgState = kFblMemProgState_Pending;
                          9152	#line4438
                          9153	..lin.1acf134f..f7c803c4.0_170::
                          9154	.LDWlin170:
00000d8c 4850             9155		se_li	r0, 5
00000d8e d00c             9156		se_stw	r0, 0(r28)
                          9157	.L4551:
                          9158	#4439:             }
                          9159	#4440:          }
                          9160	#4441: #endif /* FBL_ENABLE_DATA_PROCESSING || FBL_MEM_ENABLE_STREAM_OUTPUT || FBL_MEM_ENABLE_REMAINDER_HANDLING */
                          9161	#4442:       }
                          9162	#4444: #if defined( FBL_MEM_ENABLE_PROC_QUEUE ) || \
                          9163	#4445:     defined( FBL_MEM_ENABLE_REMAINDER_HANDLING )
                          9164	#4446:       /* Finish processing of all pending buffers */
                          9165	#4447:       FblMemFlushQueueByPrio(kFblMemJobPrio_Write);
00000d90 4813             9166		se_li	r3, 1
00000d92 78000001         9167		se_bl	FblMemFlushQueueByPrio
                          9168	#4449:       /* Check for error condition */
                          9169	#4450:       if (kFblMemProgState_Error == fblMemProgState)
                          9170	#line4450
                          9171	..lin.1acf134f..f7c803c4.0_171::

                                   Fri Apr 10 08:32:15 2020           Page 165
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          9172	.LDWlin171:
00000d96 c00c             9173		se_lwz	r0, 0(r28)
00000d98 2a10             9174		se_cmpi	r0, 1
00000d9a e200             9175		se_bne	.L4555
                          9176	#line4451
                          9177	..lin.1acf134f..f7c803c4.0_172::
                          9178	.LDWlin172:
00000d9c 73c0e000         9179		e_lis	r30, %hiadj(gErrorStatus)
00000da0 53de0000         9180		e_lwz	r30, %lo(gErrorStatus)(r30)
                          9181	#4451:       {
                          9182	#4452:          /* Report error set by programming routines (previous or current) */
                          9183	#4453:          retVal = gErrorStatus;
00000da4 e800             9184		se_b	.L4557
                          9185	.L4555:
                          9186	#4454:       }
                          9187	#4455:       else
                          9188	#4456: #endif /* FBL_MEM_ENABLE_PROC_QUEUE || FBL_MEM_ENABLE_REMAINDER_HANDLING */
                          9189	#4457:       {
                          9190	#4458: #if defined( FBL_MEM_ENABLE_REMAINDER_HANDLING_SINGLE_JOB )
                          9191	#4459:          /* Remainder handling finished, restore original job type */
                          9192	#4460:          activeJob->type = kFblMemJobType_InputWrite;
                          9193	#4461: #endif /* FBL_MEM_ENABLE_REMAINDER_HANDLING_SINGLE_JOB */
                          9194	#4463: #if defined( FBL_ENABLE_PROCESSED_DATA_LENGTH )
                          9195	#4464:          /* Requested data should be completely provided at this point */
                          9196	#4465:          if (0u != gSegInfo.inputLength)
                          9197	#4466: #else
                          9198	#4467:          /* Requested data should be completely programmed at this point */
                          9199	#4468:          if (0u != gSegInfo.writeLength)
                          9200	#line4468
                          9201	..lin.1acf134f..f7c803c4.0_173::
                          9202	.LDWlin173:
00000da6 c80f             9203		se_lwz	r0, 32(r31)
00000da8 2a00             9204		se_cmpi	r0, 0
00000daa e600             9205		se_beq	.L4558
                          9206	#4469: #endif /* FBL_ENABLE_PROCESSED_DATA_LENGTH */
                          9207	#4470:          {
                          9208	#4471:             FBL_MEM_SET_STATUS(SegmentEndInsufficientData, retVal);  /* PRQA S 3109 */ /* MD_MSR_14.3 */
                          9209	#line4471
                          9210	..lin.1acf134f..f7c803c4.0_174::
                          9211	.LDWlin174:
00000dac 4a4e             9212		se_li	r30, 36
                          9213	.L4558:
                          9214	#4472:          }
                          9215	#4473: #if defined( __ApplFblMemPostSegmentEnd )
                          9216	#4474:          else
                          9217	#4475:          {
                          9218	#4476:             /* Perform actions directly after segment end */
                          9219	#4477:             if (kFblOk != __ApplFblMemPostSegmentEnd())
                          9220	#4478:             {
                          9221	#4479:                FBL_MEM_SET_STATUS(SegmentEndPost, retVal);   /* PRQA S 3109 */ /* MD_MSR_14.3 */
                          9222	#4480:             }
                          9223	#4481:          }
                          9224	#4482: #endif /* __ApplFblMemPostSegmentEnd */
                          9225	#4484:          /* Return written length */
                          9226	#4485: #if defined( FBL_ENABLE_PROCESSED_DATA_LENGTH )
                          9227	#4486:          *writeLength = gSegInfo.writtenLength;

                                   Fri Apr 10 08:32:15 2020           Page 166
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          9228	#4487: #else
                          9229	#4488:          *writeLength = gSegInfo.input.targetLength - gSegInfo.writeLength;
00000dae c17f             9230		se_lwz	r7, 4(r31)
00000db0 0770             9231		se_subf	r0, r7
00000db2 d00d             9232		se_stw	r0, 0(r29)
00000db4 70e0e000         9233		e_lis	r7, %hiadj(gBlockInfo+52)
00000db8 50e70000         9234		e_lwz	r7, %lo(gBlockInfo+52)(r7)
                          9235	#4489: #endif /* FBL_ENABLE_PROCESSED_DATA_LENGTH */
                          9236	#4491: #if defined( FBL_MEM_ENABLE_SEGMENT_HANDLING )
                          9237	#4492:          /* Add segment to list */
                          9238	#4493:          activeSegment = &(gBlockInfo.segmentList->segmentInfo[gBlockInfo.segmentList->nrOfSegments]);
00000dbc 8057             9239		se_lbz	r5, 0(r7)
00000dbe c107             9240		se_lwz	r0, 4(r7)
00000dc0 18c5a00c         9241		e_mulli	r6, r5, 12
00000dc4 0406             9242		se_add	r6, r0
                          9243	#4494:          activeSegment->targetAddress        = gSegInfo.input.targetAddress;
00000dc6 c00f             9244		se_lwz	r0, 0(r31)
00000dc8 d106             9245		se_stw	r0, 4(r6)
                          9246	#4495:          activeSegment->transferredAddress   = gSegInfo.input.logicalAddress;
00000dca c20f             9247		se_lwz	r0, 8(r31)
00000dcc d006             9248		se_stw	r0, 0(r6)
                          9249	#4496:          activeSegment->length               = *writeLength;
00000dce c00d             9250		se_lwz	r0, 0(r29)
00000dd0 2005             9251		se_addi	r5, 1
                          9252	#4497:          gBlockInfo.segmentList->nrOfSegments++;
00000dd2 9057             9253		se_stb	r5, 0(r7)
00000dd4 d206             9254		se_stw	r0, 8(r6)
                          9255	.L4557:
                          9256	#4498: #endif /* FBL_MEM_ENABLE_SEGMENT_HANDLING */
                          9257	#4500: #if defined( FBL_MEM_ENABLE_PROGRESS_INFO )
                          9258	#4501:          FblMemConcludeProgress();
                          9259	#4502: #endif /* FBL_MEM_ENABLE_PROGRESS_INFO*/
                          9260	#4503:       }
                          9261	#4505: #if defined( FBL_ENABLE_UNALIGNED_DATA_TRANSFER ) || \
                          9262	#4506:     defined( FBL_MEM_ENABLE_SEGMENTED_INPUT_BUFFER )
                          9263	#4507:       /* Restore default offset to align actual data to platform requirements */
                          9264	#4508:       activeJob         = FblMemGetPendingInputJob();
                          9265	#4509:       activeJob->offset = FBL_MEM_PREAMBLE_OFFSET(FBL_MEM_PREAMBLE_LENGTH);
00000dd6 4820             9266		se_li	r0, 2
00000dd8 70e0e000         9267		e_lis	r7, %hiadj(gInputJobs+12)
00000ddc 54070000         9268		e_stw	r0, %lo(gInputJobs+12)(r7)
                          9269	#4510: #endif /* FBL_ENABLE_UNALIGNED_DATA_TRANSFER || FBL_MEM_ENABLE_SEGMENTED_INPUT_BUFFER */
                          9270	#4512: #if defined( FBL_MEM_ENABLE_PREAMBLE_HANDLING )
                          9271	#4513:       /*
                          9272	#4514:          Active fill buffer may have changed
                          9273	#4515:          Restore previously stored preamble so operation is transparent for caller
                          9274	#4516:       */
                          9275	#4517:       FblMemRestorePreamble();
00000de0 78000001         9276		se_bl	FblMemRestorePreamble
                          9277	#4518: #endif /* FBL_MEM_ENABLE_PREAMBLE_HANDLING */
                          9278	#4519:    }
                          9279	#4521:    /* Check result of final programming */
                          9280	#4522:    if (kFblMemStatus_Ok == retVal)
                          9281	#line4522
                          9282	..lin.1acf134f..f7c803c4.0_175::
                          9283	.LDWlin175:

                                   Fri Apr 10 08:32:15 2020           Page 167
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
00000de4 2a0e             9284		se_cmpi	r30, 0
00000de6 e200             9285		se_bne	.L4560
                          9286	#4523:    {
                          9287	#4524:       /* Allow additional segment start or block end indication */
                          9288	#4525:       FblMemSetAllowed(FBL_MEM_ALLOWED_SEGMENT_START | FBL_MEM_ALLOWED_BLOCK_END);
                          9289	#line4525
                          9290	..lin.1acf134f..f7c803c4.0_176::
                          9291	.LDWlin176:
00000de8 4920             9292		se_li	r0, 18
00000dea 70e0e000         9293		e_lis	r7, %hiadj(gAllowedInd)
00000dee 54070000         9294		e_stw	r0, %lo(gAllowedInd)(r7)
                          9295	.L4560:
                          9296	#4526:    }
                          9297	#4528:    return retVal;
00000df2 01e3             9298		se_mr	r3, r30
                          9299	#	    .ef
                          9300	.LDW19:
00000df4 c901             9301		se_lwz	r0, 36(sp)
00000df6 1b61080c         9302		e_lmw	r27, 12(sp)
00000dfa 21f1             9303		se_addi	sp, 32
00000dfc 0090             9304		se_mtlr	r0
00000dfe 0004             9305		se_blr
                          9306		.global	__ghs_eofn_FblMemSegmentEndIndication
                          9307	__ghs_eofn_FblMemSegmentEndIndication:
                          9308		.type	FblMemSegmentEndIndication,@function
                          9309		.size	FblMemSegmentEndIndication,$-FblMemSegmentEndIndication
                          9310		.align	1
                          9311	
                          9312	#function:			FblMemSegmentEndIndication
                          9313	#stack frame size:		32
                          9314	#link area offset:		0
                          9315	#local storage area offset:	12
                          9316	#gpr save area offset:		12
                          9317	#
                          9318	#retVal	r30	local
                          9319	#activeSegment	r6	local
                          9320	
                          9321	#writeLength	r29	param
                          9322	
                          9323		.data
                          9324		.section ".vletext", "vax"
                          9325		.vle
                          9326		.vle
                          9327	
                          9328	#4529: } /* PRQA S 4700 */ /* MD_FblMem_4700 */
                          9329	
                          9330	#4531: /***********************************************************************************************************************
                          9331	#4532:  *  FblMemDataIndication
                          9332	#4533:  **********************************************************************************************************************/
                          9333	#4534: /*! \brief      Indicate new chunk of input data
                          9334	#4535:  *  \details    If pipelined programming is configured queue buffer and immediately return in case another input buffer
                          9335	#4536:  *              is available
                          9336	#4537:  *              Otherwise finish processing of one pending input buffer
                          9337	#4538:  *              In non-pipelined mode indicated input buffer is directly processed
                          9338	#4539:  *  \pre        FblMemSegmentStartIndication executed before, provided buffer
                          9339	#4540:  *              and data offset equal the parameters of active input buffer

                                   Fri Apr 10 08:32:15 2020           Page 168
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          9340	#4541:  *  \param[in]  buffer Pointer to input buffer (including preamble)
                          9341	#4542:  *  \param[in]  offset Offset of actual data (after preamble)
                          9342	#4543:  *  \param[in]  length Length of data (without preamble)
                          9343	#4544:  *  \return     Result of operation (potentially remapped to OEM specific NRC)
                          9344	#4545:  *              May return error generated by background task operation
                          9345	#4546:  **********************************************************************************************************************/
                          9346		.align	1
                          9347		.align	1
                          9348	..gh.f.p.5.a.1.r.0.e.41:
                          9349		.type	..gh.f.p.5.a.1.r.0.e.41,@object
                          9350		.size	..gh.f.p.5.a.1.r.0.e.41,0
                          9351		.global	FblMemDataIndication
                          9352	FblMemDataIndication:
00000e00 182106e8         9353		e_stwu	sp, -24(sp)
00000e04 0080             9354		se_mflr	r0
00000e06 1b810908         9355		e_stmw	r28, 8(sp)
00000e0a d701             9356		se_stw	r0, 28(sp)
00000e0c 013c             9357		se_mr	r28, r3
00000e0e 014f             9358		se_mr	r31, r4
00000e10 015d             9359		se_mr	r29, r5
                          9360	#	    .bf
                          9361	.LDW29:
                          9362	#4547: tFblMemStatus FblMemDataIndication( tFblMemConstRamData buffer, tFblLength offset, tFblLength length )
                          9363	#4548: {
                          9364	#4549:    tFblMemStatus retVal;
                          9365	#4550: #if defined( FBL_ENABLE_UNALIGNED_DATA_TRANSFER ) || \
                          9366	#4551:     defined( FBL_MEM_ENABLE_SEGMENTED_INPUT_BUFFER )
                          9367	#4552:    V_MEMRAM1 tFblMemJob V_MEMRAM2 V_MEMRAM3 * activeJob;
                          9368	#4553: #endif /* FBL_ENABLE_UNALIGNED_DATA_TRANSFER || FBL_MEM_ENABLE_SEGMENTED_INPUT_BUFFER */
                          9369	#4554: #if defined( FBL_MEM_ENABLE_INPUT_LENGTH )
                          9370	#4555:    tFblLength inputLength;
                          9371	#4557:    /* Do not update running input length unless data is unprocessed */
                          9372	#4558:    inputLength = 0u;    /* PRQA S 3198 */ /* MD_FblMem_3198 */
                          9373	#4559: #endif /* FBL_MEM_ENABLE_INPUT_LENGTH */
                          9374	#4561:    retVal = kFblMemStatus_Ok;
                          9375	#4563:    /* Check allowed states */
                          9376	#4564:    if (kFblOk != FblMemCheckAllowed(FBL_MEM_ALLOWED_DATA_IND, FBL_MEM_ALLOWED_DATA_IND | FBL_MEM_ALLOWED_SEGMENT_END))
00000e12 4843             9377		se_li	r3, 4
00000e14 48c4             9378		se_li	r4, 12
00000e16 78000001         9379		se_bl	FblMemCheckAllowed
00000e1a 2a03             9380		se_cmpi	r3, 0
00000e1c e600             9381		se_beq	.L4754
                          9382	#4565:    {
                          9383	#4566:       FBL_MEM_SET_STATUS(DataIndSequence, retVal); /* PRQA S 3109 */ /* MD_MSR_14.3 */
                          9384	#line4566
                          9385	..lin.1acf134f..a4baacb4.0_177::
                          9386	.LDWlin177:
00000e1e 4a4f             9387		se_li	r31, 36
00000e20 e800             9388		se_b	.L4769
                          9389	.L4754:
                          9390	#4567:    }
                          9391	#4568:    else
                          9392	#4569:    {
                          9393	#4570: #if defined( FBL_ENABLE_SYSTEM_CHECK ) || \
                          9394	#4571:     defined( FBL_MEM_ENABLE_INPUT_LENGTH )
                          9395	#4572: # if defined( FBL_ENABLE_PROCESSED_DATA_LENGTH )

                                   Fri Apr 10 08:32:15 2020           Page 169
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          9396	#4573:       /* Unconditionally check input length */
                          9397	#4574:       {
                          9398	#4575: # else
                          9399	#4576: #  if defined( FBL_ENABLE_DATA_PROCESSING ) || \
                          9400	#4577:       defined( FBL_MEM_ENABLE_STREAM_OUTPUT )
                          9401	#4578:       {
                          9402	#4579:          /*
                          9403	#4580:             Data processed in any way?
                          9404	#4581:             Unprocessed data directly written through
                          9405	#4582:          */
                          9406	#4583: #   if defined( FBL_ENABLE_DATA_PROCESSING )
                          9407	#4584:          if (kFblOk == __ApplFblMemIsDataProcessingRequired(gSegInfo.input.dataFormat))
                          9408	#4585:          {
                          9409	#4586:          }
                          9410	#4587:          else
                          9411	#4588: #   endif /* FBL_ENABLE_DATA_PROCESSING */
                          9412	#4589: #   if defined( FBL_MEM_ENABLE_STREAM_OUTPUT )
                          9413	#4590:          if (kFblOk == __ApplFblMemIsStreamOutputRequired(gSegInfo.input.dataFormat))
                          9414	#4591:          {
                          9415	#4592:          }
                          9416	#4593:          else
                          9417	#4594: #   endif /* FBL_MEM_ENABLE_STREAM_OUTPUT */
                          9418	#4595: #  else
                          9419	#4596:       {
                          9420	#4597: #  endif /* FBL_ENABLE_DATA_PROCESSING ||FBL_MEM_ENABLE_STREAM_OUTPUT */
                          9421	#4598: # endif /* FBL_ENABLE_PROCESSED_DATA_LENGTH */
                          9422	#4599:          {
                          9423	#4600:             /*
                          9424	#4601:                Verify newly provided data does not exceed length requested
                          9425	#4602:                in segment info
                          9426	#4603:             */
                          9427	#4604: # if defined( FBL_MEM_ENABLE_INPUT_LENGTH )
                          9428	#4605:             /* Unprocessed data: Update running input data length */
                          9429	#4606:             inputLength = length;
                          9430	#4608:             if (gSegInfo.inputLength < length)
                          9431	#4609: # else
                          9432	#4610:             if (gSegInfo.writeLength < length)
                          9433	#line4610
                          9434	..lin.1acf134f..a4baacb4.0_178::
                          9435	.LDWlin178:
00000e22 73c0e000         9436		e_lis	r30, %hiadj(gSegInfo)
00000e26 1fde0000         9437		e_add16i	r30, r30, %lo(gSegInfo)
00000e2a c80e             9438		se_lwz	r0, 32(r30)
00000e2c 0dd0             9439		se_cmpl	r0, r29
00000e2e e000             9440		se_bge	.L4760
                          9441	#4611: # endif /* FBL_MEM_ENABLE_INPUT_LENGTH */
                          9442	#4612:             {
                          9443	#4613:                FBL_MEM_SET_STATUS(DataIndOverflow, retVal); /* PRQA S 3109 */ /* MD_MSR_14.3 */
                          9444	#line4613
                          9445	..lin.1acf134f..a4baacb4.0_179::
                          9446	.LDWlin179:
00000e30 4d00             9447		se_li	r0, 80
00000e32 70e0e000         9448		e_lis	r7, %hiadj(errStatFblStates)
00000e36 5c070000         9449		e_sth	r0, %lo(errStatFblStates)(r7)
00000e3a 4f1f             9450		se_li	r31, 113
00000e3c e800             9451		se_b	.L4769

                                   Fri Apr 10 08:32:15 2020           Page 170
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          9452	.L4760:
                          9453	#4614:             }
                          9454	#4615:          }
                          9455	#4616:       }
                          9456	#4617: #endif /* FBL_ENABLE_SYSTEM_CHECK || FBL_ENABLE_PROCESSED_DATA_LENGTH */
                          9457	#4618:    }
                          9458	#4620:    if (kFblMemStatus_Ok == retVal)
                          9459	#4621:    {
                          9460	#4622: #if defined( FBL_MEM_ENABLE_PREAMBLE_HANDLING )
                          9461	#4623:       /*
                          9462	#4624:          Active fill buffer may change
                          9463	#4625:          Store preamble so operation is transparent for caller
                          9464	#4626:       */
                          9465	#4627:       FblMemStorePreamble();
                          9466	#line4627
                          9467	..lin.1acf134f..a4baacb4.0_180::
                          9468	.LDWlin180:
00000e3e 78000001         9469		se_bl	FblMemStorePreamble
                          9470	#4628: #endif /* FBL_MEM_ENABLE_PREAMBLE_HANDLING */
                          9471	#4630:       /* Queue the active buffer for further processing */
                          9472	#4631:       retVal = FblMemQueueBuffer(buffer, offset, length);
                          9473	#line4631
                          9474	..lin.1acf134f..a4baacb4.0_181::
                          9475	.LDWlin181:
00000e42 01c3             9476		se_mr	r3, r28
00000e44 01f4             9477		se_mr	r4, r31
00000e46 01d5             9478		se_mr	r5, r29
00000e48 78000001         9479		se_bl	FblMemQueueBuffer
00000e4c 013f             9480		se_mr	r31, r3
                          9481	#4632:       if (kFblMemStatus_Ok == retVal)
                          9482	#line4632
                          9483	..lin.1acf134f..a4baacb4.0_182::
                          9484	.LDWlin182:
00000e4e 2a03             9485		se_cmpi	r3, 0
00000e50 e200             9486		se_bne	.L4761
                          9487	#4633:       {
                          9488	#4634: #if defined( FBL_MEM_ENABLE_INPUT_LENGTH )
                          9489	#4635:          /* Keep track of expected input data length */
                          9490	#4636:          gSegInfo.inputLength -= inputLength;
                          9491	#4637: #endif /* FBL_MEM_ENABLE_INPUT_LENGTH */
                          9492	#4639: #if defined( FBL_MEM_ENABLE_INPUT_DATA_FLUSH )
                          9493	#4640:          {
                          9494	#4641:             /* Directly process all input data */
                          9495	#4642:             FblMemFlushQueueByPrio(kFblMemJobPrio_Write);
                          9496	#line4642
                          9497	..lin.1acf134f..a4baacb4.0_183::
                          9498	.LDWlin183:
00000e52 4813             9499		se_li	r3, 1
00000e54 78000001         9500		se_bl	FblMemFlushQueueByPrio
                          9501	#line4646
                          9502	..lin.1acf134f..a4baacb4.0_184::
                          9503	.LDWlin184:
00000e58 70e0e000         9504		e_lis	r7, %hiadj(fblMemProgState)
00000e5c 50e70000         9505		e_lwz	r7, %lo(fblMemProgState)(r7)
                          9506	#4643:          }
                          9507	#4645:          /* Check for programming error */

                                   Fri Apr 10 08:32:15 2020           Page 171
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          9508	#4646:          if (kFblMemProgState_Error == fblMemProgState)
00000e60 2a17             9509		se_cmpi	r7, 1
00000e62 e200             9510		se_bne	.L4763
                          9511	#line4647
                          9512	..lin.1acf134f..a4baacb4.0_185::
                          9513	.LDWlin185:
00000e64 73e0e000         9514		e_lis	r31, %hiadj(gErrorStatus)
00000e68 53ff0000         9515		e_lwz	r31, %lo(gErrorStatus)(r31)
                          9516	#4647:          {
                          9517	#4648:             retVal = gErrorStatus;
00000e6c e800             9518		se_b	.L4761
                          9519	.L4763:
                          9520	#4649:          }
                          9521	#4650:          else
                          9522	#4651: #endif /* FBL_MEM_ENABLE_INPUT_DATA_FLUSH */
                          9523	#4652:          {
                          9524	#4653: #if defined( FBL_ENABLE_UNALIGNED_DATA_TRANSFER ) || \
                          9525	#4654:     defined( FBL_MEM_ENABLE_SEGMENTED_INPUT_BUFFER )
                          9526	#4655:             /* Restore default offset to align actual data to platform requirements */
                          9527	#4656:             activeJob         = FblMemGetPendingInputJob();
                          9528	#4657:             activeJob->offset = FBL_MEM_PREAMBLE_OFFSET(FBL_MEM_PREAMBLE_LENGTH);
                          9529	#line4657
                          9530	..lin.1acf134f..a4baacb4.0_186::
                          9531	.LDWlin186:
00000e6e 7380e000         9532		e_lis	r28, %hiadj(gInputJobs+12)
00000e72 1f9c000c         9533		e_add16i	r28, r28, %lo(gInputJobs+12)
00000e76 4820             9534		se_li	r0, 2
00000e78 d00c             9535		se_stw	r0, 0(r28)
                          9536	#4659: # if defined( FBL_ENABLE_UNALIGNED_DATA_TRANSFER )
                          9537	#4660:             /* Remainder handling neither required for volatile memory nor for processed data */
                          9538	#4661:             if (kFblMemType_RAM == gSegInfo.input.type)
00000e7a c40e             9539		se_lwz	r0, 16(r30)
00000e7c 2a00             9540		se_cmpi	r0, 0
00000e7e e600             9541		se_beq	.L4761
                          9542	#4662:             {
                          9543	#4663:             }
                          9544	#4664:             else
                          9545	#4665: #  if defined( FBL_ENABLE_DATA_PROCESSING )
                          9546	#4666:             if (kFblOk == __ApplFblMemIsDataProcessingRequired(gSegInfo.input.dataFormat))
                          9547	#4667:             {
                          9548	#4668:             }
                          9549	#4669:             else
                          9550	#4670: #  endif /* FBL_ENABLE_DATA_PROCESSING */
                          9551	#4671: #  if defined( FBL_MEM_ENABLE_STREAM_OUTPUT )
                          9552	#4672:             if (kFblOk == __ApplFblMemIsStreamOutputRequired(gSegInfo.input.dataFormat))
                          9553	#4673:             {
                          9554	#4674:             }
                          9555	#4675:             else
                          9556	#4676: #  endif /* FBL_MEM_ENABLE_STREAM_OUTPUT */
                          9557	#4677:             {
                          9558	#4678:                /* Align active input buffer to current remainder */
                          9559	#4679:                activeJob->offset += FblMemGetWriteRemainder(gSegInfo.inputAddress, length);
                          9560	#line4679
                          9561	..lin.1acf134f..a4baacb4.0_187::
                          9562	.LDWlin187:
00000e80 c93e             9563		se_lwz	r3, 36(r30)

                                   Fri Apr 10 08:32:15 2020           Page 172
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
00000e82 01d4             9564		se_mr	r4, r29
00000e84 78000001         9565		se_bl	FblMemGetSpecificRemainder
00000e88 c90e             9566		se_lwz	r0, 36(r30)
00000e8a 2013             9567		se_addi	r3, 2
                          9568	#4681:                /* Update sliding input address */
                          9569	#4682:                gSegInfo.inputAddress += length;
                          9570	#line4682
                          9571	..lin.1acf134f..a4baacb4.0_188::
                          9572	.LDWlin188:
00000e8c d03c             9573		se_stw	r3, 0(r28)
00000e8e 04d0             9574		se_add	r0, r29
00000e90 d90e             9575		se_stw	r0, 36(r30)
                          9576	.L4761:
                          9577	#4683:             }
                          9578	#4684: # endif /* FBL_ENABLE_UNALIGNED_DATA_TRANSFER */
                          9579	#4685: #endif /* FBL_ENABLE_UNALIGNED_DATA_TRANSFER || FBL_MEM_ENABLE_SEGMENTED_INPUT_BUFFER */
                          9580	#4686:          }
                          9581	#4687:       }
                          9582	#4689: #if defined( FBL_MEM_ENABLE_PREAMBLE_HANDLING )
                          9583	#4690:       /*
                          9584	#4691:          Active fill buffer may have changed
                          9585	#4692:          Restore previously stored preamble so operation is transparent for caller
                          9586	#4693:       */
                          9587	#4694:       FblMemRestorePreamble();
00000e92 78000001         9588		se_bl	FblMemRestorePreamble
                          9589	#4695: #endif /* FBL_MEM_ENABLE_PREAMBLE_HANDLING */
                          9590	#4696:    }
                          9591	#4698:    if (kFblMemStatus_Ok == retVal)
                          9592	#line4698
                          9593	..lin.1acf134f..a4baacb4.0_189::
                          9594	.LDWlin189:
00000e96 2a0f             9595		se_cmpi	r31, 0
00000e98 e200             9596		se_bne	.L4769
                          9597	#4699:    {
                          9598	#4700: #if defined( FBL_MEM_ENABLE_INPUT_LENGTH )
                          9599	#4701:       /* No more data is expected, all data has been processed within the last chunk of data */
                          9600	#4702:       if (gSegInfo.inputLength == 0u)
                          9601	#4703:       {
                          9602	#4704:          FblMemSetAllowed(FBL_MEM_ALLOWED_SEGMENT_END);
                          9603	#4705:       }
                          9604	#4706:       else
                          9605	#4707: #endif /* FBL_MEM_ENABLE_INPUT_LENGTH */
                          9606	#4708:       {
                          9607	#4709:          /* Allow additional data or segment end indication */
                          9608	#4710:          FblMemSetAllowed(FBL_MEM_ALLOWED_DATA_IND | FBL_MEM_ALLOWED_SEGMENT_END);
                          9609	#line4710
                          9610	..lin.1acf134f..a4baacb4.0_190::
                          9611	.LDWlin190:
00000e9a 48c0             9612		se_li	r0, 12
00000e9c 70e0e000         9613		e_lis	r7, %hiadj(gAllowedInd)
00000ea0 54070000         9614		e_stw	r0, %lo(gAllowedInd)(r7)
                          9615	.L4769:
                          9616	#4711:       }
                          9617	#4712:    }
                          9618	#4714:    return retVal;
00000ea4 01f3             9619		se_mr	r3, r31

                                   Fri Apr 10 08:32:15 2020           Page 173
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          9620	#	    .ef
                          9621	.LDW39:
00000ea6 c701             9622		se_lwz	r0, 28(sp)
00000ea8 1b810808         9623		e_lmw	r28, 8(sp)
00000eac 2171             9624		se_addi	sp, 24
00000eae 0090             9625		se_mtlr	r0
00000eb0 0004             9626		se_blr
                          9627		.global	__ghs_eofn_FblMemDataIndication
                          9628	__ghs_eofn_FblMemDataIndication:
                          9629		.type	FblMemDataIndication,@function
                          9630		.size	FblMemDataIndication,$-FblMemDataIndication
                          9631		.align	1
                          9632	
                          9633	#function:			FblMemDataIndication
                          9634	#stack frame size:		24
                          9635	#link area offset:		0
                          9636	#local storage area offset:	8
                          9637	#gpr save area offset:		8
                          9638	#
                          9639	#retVal	r31	local
                          9640	
                          9641	#buffer	r28	param
                          9642	#offset	r31	param
                          9643	#length	r29	param
                          9644	
                          9645		.data
                          9646		.section ".vletext", "vax"
                          9647		.vle
                          9648		.vle
                          9649	
                          9650	#4715: }
                          9651	
                          9652	#4717: /***********************************************************************************************************************
                          9653	#4718:  *  FblMemTask
                          9654	#4719:  **********************************************************************************************************************/
                          9655	#4720: /*! \brief    Perform background tasks
                          9656	#4721:  *  \details  If pipelined programming is configured pending buffers are processed until the operation is suspended by
                          9657	#4722:  *            a Rx notification
                          9658	#4723:  *  \pre      FblMemInitPowerOn executed before
                          9659	#4724:  **********************************************************************************************************************/
                          9660		.align	1
                          9661		.align	1
                          9662	..gh.f.p.0.a.1.r.0.e.42:
                          9663		.type	..gh.f.p.0.a.1.r.0.e.42,@object
                          9664		.size	..gh.f.p.0.a.1.r.0.e.42,0
                          9665		.global	FblMemTask
                          9666	FblMemTask:
                          9667	#	    .bf
                          9668	.LDW49:
                          9669	#4725: void FblMemTask( void )
                          9670	#4726: {
                          9671	#4727: }
                          9672	#	    .ef
                          9673	.LDW59:
00000eb2 0004             9674		se_blr
                          9675		.global	__ghs_eofn_FblMemTask

                                   Fri Apr 10 08:32:15 2020           Page 174
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          9676	__ghs_eofn_FblMemTask:
                          9677		.type	FblMemTask,@function
                          9678		.size	FblMemTask,$-FblMemTask
                          9679		.align	1
                          9680	
                          9681	#function:			FblMemTask
                          9682	#stack frame size:		0
                          9683	#
                          9684	
                          9685		.data
                          9686		.section ".vletext", "vax"
                          9687		.vle
                          9688		.vle
                          9689	
                          9690	
                          9691	#4729: /***********************************************************************************************************************
                          9692	#4730:  *  FblMemFlushInputData
                          9693	#4731:  **********************************************************************************************************************/
                          9694	#4732: /*! \brief    Flush any pending input data
                          9695	#4733:  *  \details  Process and program any pending input data passed via DataIndication. Pipelined verification tasks
                          9696	#4734:  *            may still be pending afterwards.
                          9697	#4735:  *  \pre      FblMemInitPowerOn executed before
                          9698	#4736:  **********************************************************************************************************************/
                          9699		.align	1
                          9700		.align	1
                          9701	..gh.f.p.0.a.1.r.0.e.43:
                          9702		.type	..gh.f.p.0.a.1.r.0.e.43,@object
                          9703		.size	..gh.f.p.0.a.1.r.0.e.43,0
                          9704		.global	FblMemFlushInputData
                          9705	FblMemFlushInputData:
                          9706	#	    .bf
                          9707	.LDW69:
                          9708	#4737: void FblMemFlushInputData( void )
                          9709	#4738: {
                          9710	#4739:    /* Process all pending input data */
                          9711	#4740:    FblMemFlushQueueByPrio(kFblMemJobPrio_Write);
00000eb4 4813             9712		se_li	r3, 1
00000eb6 78000000         9713		se_b	FblMemFlushQueueByPrio
                          9714	#4741: }
                          9715	#	    .ef
                          9716	.LDW79:
                          9717	..lin.1acf134f..3db815a4.0_191::
                          9718	.LDWlin191:
                          9719		.global	__ghs_eofn_FblMemFlushInputData
                          9720	__ghs_eofn_FblMemFlushInputData:
                          9721		.type	FblMemFlushInputData,@function
                          9722		.size	FblMemFlushInputData,$-FblMemFlushInputData
                          9723		.align	1
                          9724	
                          9725	#function:			FblMemFlushInputData
                          9726	#stack frame size:		0
                          9727	#
                          9728	
                          9729		.data
                          9730		.section ".vletext", "vax"
                          9731		.vle

                                   Fri Apr 10 08:32:15 2020           Page 175
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          9732		.vle
                          9733	
                          9734	
                          9735	#4743: # define FBLLIB_MEM_RAMCODE_START_SEC_CODE
                          9736	#4744: # include "MemMap.h" /* PRQA S 5087 */ /* MD_MSR_19.1 */
                          9737	#4746: /***********************************************************************************************************************
                          9738	#4747:  *  FblMemResumeIndication
                          9739	#4748:  **********************************************************************************************************************/
                          9740	#4749: /*! \brief    Resume suspended operation
                          9741	#4750:  *  \details  If pipelined programming is configured a pending operation which was suspended earlier through a RX
                          9742	#4751:  *            notification will be resumed
                          9743	#4752:  *  \pre      FblMemInitPowerOn executed before
                          9744	#4753:  **********************************************************************************************************************/
                          9745		.align	1
                          9746		.align	1
                          9747	..gh.f.p.0.a.1.r.0.e.44:
                          9748		.type	..gh.f.p.0.a.1.r.0.e.44,@object
                          9749		.size	..gh.f.p.0.a.1.r.0.e.44,0
                          9750		.global	FblMemResumeIndication
                          9751	FblMemResumeIndication:
                          9752	#	    .bf
                          9753	.LDW89:
                          9754	#4754: void FblMemResumeIndication( void )
                          9755	#4755: {
                          9756	#4756: }
                          9757	#	    .ef
                          9758	.LDW99:
00000eba 0004             9759		se_blr
                          9760		.global	__ghs_eofn_FblMemResumeIndication
                          9761	__ghs_eofn_FblMemResumeIndication:
                          9762		.type	FblMemResumeIndication,@function
                          9763		.size	FblMemResumeIndication,$-FblMemResumeIndication
                          9764		.align	1
                          9765	
                          9766	#function:			FblMemResumeIndication
                          9767	#stack frame size:		0
                          9768	#
                          9769	
                          9770		.data
                          9771		.section ".vletext", "vax"
                          9772		.vle
                          9773		.vle
                          9774	
                          9775	
                          9776	#4759: # define FBLLIB_MEM_RAMCODE_STOP_SEC_CODE
                          9777	#4760: # include "MemMap.h" /* PRQA S 5087 */ /* MD_MSR_19.1 */
                          9778	#4764: /***********************************************************************************************************************
                          9779	#4765:  *  FblMemEraseRegion
                          9780	#4766:  **********************************************************************************************************************/
                          9781	#4767: /*! \brief      Performs erase operation in non-volatile memory
                          9782	#4768:  *  \details    All memory segments fully or partially covered by given region are affected. Gaps in the memory segment
                          9783	#4769:  *              definition are skipped.
                          9784	#4770:  *  \pre        Memory driver initialized
                          9785	#4771:  *  \param[in]  eraseAddress Start address of erase region
                          9786	#4772:  *  \param[in]  eraseLength Length of erase region
                          9787	#4773:  *  \return     Result of operation (potentially remapped to OEM specific NRC)

                                   Fri Apr 10 08:32:15 2020           Page 176
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          9788	#4774:  **********************************************************************************************************************/
                          9789		.align	1
                          9790		.align	1
                          9791	..gh.f.p.4.a.1.r.0.e.45:
                          9792		.type	..gh.f.p.4.a.1.r.0.e.45,@object
                          9793		.size	..gh.f.p.4.a.1.r.0.e.45,0
                          9794		.global	FblMemEraseRegion
                          9795	FblMemEraseRegion:
                          9796	#	    .bf
                          9797	.LDW001:
                          9798	#4775: tFblMemStatus FblMemEraseRegion( tFblAddress eraseAddress, tFblLength eraseLength ) /* PRQA S 1505 */ /* MD_FblMem_1505 */
                          9799	#4776: {
                          9800	#4777:    tFblMemStatus  retVal;
                          9801	#4779: #if defined( FBL_MEM_ENABLE_PROGRESS_INFO )
                          9802	#4780:    /* Disable progress information */
                          9803	#4781:    gProgressState = kFblMemProgressState_Disabled;
                          9804	#4782: #endif /* FBL_MEM_ENABLE_PROGRESS_INFO */
                          9805	#4784:    retVal = FblMemEraseRegionInternal(eraseAddress, eraseLength);
00000ebc 78000000         9806		se_b	FblMemEraseRegionInternal
                          9807	#4786:    return retVal;
                          9808	#	    .ef
                          9809	.LDW101:
                          9810	..lin.1acf134f..5082adcc.0_192::
                          9811	.LDWlin192:
                          9812		.global	__ghs_eofn_FblMemEraseRegion
                          9813	__ghs_eofn_FblMemEraseRegion:
                          9814		.type	FblMemEraseRegion,@function
                          9815		.size	FblMemEraseRegion,$-FblMemEraseRegion
                          9816		.align	1
                          9817	
                          9818	#function:			FblMemEraseRegion
                          9819	#stack frame size:		0
                          9820	#
                          9821	
                          9822	#eraseAddress	none	param
                          9823	#eraseLength	none	param
                          9824	
                          9825		.data
                          9826		.section ".vletext", "vax"
                          9827		.vle
                          9828		.vle
                          9829	
                          9830	#4787: }  /* PRQA S 2006 */ /* MD_MSR_14.7 */
                          9831	
                          9832	#4789: /***********************************************************************************************************************
                          9833	#4790:  *  FblMemProgramBuffer
                          9834	#4791:  **********************************************************************************************************************/
                          9835	#4792: /*! \brief         Performs program operation to non-volatile memory
                          9836	#4793:  *  \details       If the length is not aligned to the segment size the odd bytes are padded with the configured fill
                          9837	#4794:  *                 character.
                          9838	#4795:  *                 Programming may be suspended by an external event. In this case parameter programLength will be
                          9839	#4796:  *                 updated to reflect the length actually programmed
                          9840	#4797:  *  \pre           Memory driver initialized, address aligned to memory segment size
                          9841	#4798:  *  \param[in]     programAddress Program address
                          9842	#4799:  *  \param[in,out] programLength Length of data (output: length actually programmed)
                          9843	#4800:  *  \param[in,out] programData Pointer to program data (contents are padded in case length is not aligned to memory

                                   Fri Apr 10 08:32:15 2020           Page 177
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          9844	#4801:  *                  segment size!)
                          9845	#4802:  *  \return        Result of operation (potentially remapped to OEM specific NRC)
                          9846	#4803:  **********************************************************************************************************************/
                          9847		.align	1
                          9848		.align	1
                          9849	..gh.f.p.5.a.1.r.0.e.46:
                          9850		.type	..gh.f.p.5.a.1.r.0.e.46,@object
                          9851		.size	..gh.f.p.5.a.1.r.0.e.46,0
                          9852		.global	FblMemProgramBuffer
                          9853	FblMemProgramBuffer:
00000ec0 182106f0         9854		e_stwu	sp, -16(sp)
00000ec4 1bc10908         9855		e_stmw	r30, 8(sp)
00000ec8 0080             9856		se_mflr	r0
00000eca d501             9857		se_stw	r0, 20(sp)
                          9858	#	    .bf
                          9859	.LDW201:
                          9860	#4804: tFblMemStatus FblMemProgramBuffer( tFblAddress programAddress, /* PRQA S 1505 */ /* MD_FblMem_1505 */
                          9861	#4805:    V_MEMRAM1 tFblLength V_MEMRAM2 V_MEMRAM3 * programLength, tFblMemRamData programData )
                          9862	#4806: {
                          9863	#4807:    tFblMemProgState activeProgState;
                          9864	#4808:    tFblMemStatus retVal;
                          9865	#4810:    {
                          9866	#4811:       /* Remember active programming state */
                          9867	#4812:       activeProgState = fblMemProgState;
00000ecc 4856             9868		se_li	r6, 5
00000ece 73e0e000         9869		e_lis	r31, %hiadj(fblMemProgState)
00000ed2 1fff0000         9870		e_add16i	r31, r31, %lo(fblMemProgState)
                          9871	#4814:       /* Operation potentially paused during previous execution cycle */
                          9872	#4815:       fblMemProgState   = kFblMemProgState_Pending;
00000ed6 c0ef             9873		se_lwz	r30, 0(r31)
00000ed8 d06f             9874		se_stw	r6, 0(r31)
                          9875	#4817:       /* Perform actual programming */
                          9876	#4818:       retVal = FblMemProgramBufferInternal(programAddress, programLength, programData, kFblMemProgState_Pending);
00000eda 78000001         9877		se_bl	FblMemProgramBufferInternal
                          9878	#4820:       /* Restore previous programming state */
                          9879	#4821:       fblMemProgState = activeProgState;
                          9880	#line4821
                          9881	..lin.1acf134f..d412346a.0_193::
                          9882	.LDWlin193:
00000ede d0ef             9883		se_stw	r30, 0(r31)
                          9884	#4822:    }
                          9885	#4824:    return retVal;
                          9886	#	    .ef
                          9887	.LDW301:
00000ee0 c501             9888		se_lwz	r0, 20(sp)
00000ee2 1bc10808         9889		e_lmw	r30, 8(sp)
00000ee6 20f1             9890		se_addi	sp, 16
00000ee8 0090             9891		se_mtlr	r0
00000eea 0004             9892		se_blr
                          9893		.global	__ghs_eofn_FblMemProgramBuffer
                          9894	__ghs_eofn_FblMemProgramBuffer:
                          9895		.type	FblMemProgramBuffer,@function
                          9896		.size	FblMemProgramBuffer,$-FblMemProgramBuffer
                          9897		.align	1
                          9898	
                          9899	#function:			FblMemProgramBuffer

                                   Fri Apr 10 08:32:15 2020           Page 178
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          9900	#stack frame size:		16
                          9901	#link area offset:		0
                          9902	#local storage area offset:	8
                          9903	#gpr save area offset:		8
                          9904	#
                          9905	#activeProgState	r30	local
                          9906	
                          9907	#programAddress	none	param
                          9908	#programLength	none	param
                          9909	#programData	none	param
                          9910	
                          9911		.data
                          9912		.section ".vletext", "vax"
                          9913		.vle
                          9914		.vle
                          9915	
                          9916	#4825: }
                          9917	
                          9918	#4827: /***********************************************************************************************************************
                          9919	#4828:  *  FblMemSetInteger
                          9920	#4829:  **********************************************************************************************************************/
                          9921	#4830: /*! \brief      Convert given integer value to big-endian byte array
                          9922	#4831:  *  \param[in]  count Number of relevant bytes
                          9923	#4832:  *  \param[in]  input Input value
                          9924	#4833:  *  \param[out] buffer Pointer to output buffer
                          9925	#4834:  **********************************************************************************************************************/
                          9926		.align	1
                          9927		.align	1
                          9928	..gh.f.p.5.a.1.r.0.e.47:
                          9929		.type	..gh.f.p.5.a.1.r.0.e.47,@object
                          9930		.size	..gh.f.p.5.a.1.r.0.e.47,0
                          9931		.global	FblMemSetInteger
                          9932	FblMemSetInteger:
                          9933	#	    .bf
                          9934	.LDW401:
                          9935	#4835: void FblMemSetInteger( vuintx count, vuint32 input, tFblMemRamData buffer ) /* PRQA S 1505 */ /* MD_FblMem_1505 */
                          9936	#4836: {
                          9937	#4837:    /* Loop relevant bytes */
                          9938	#4838:    while (count > 0u)
00000eec e800             9939		se_b	.L5202
                          9940	.L5204:
                          9941	#4839:    {
                          9942	#4840:       count--;
                          9943	#line4840
                          9944	..lin.1acf134f..db902fb2.0_194::
                          9945	.LDWlin194:
00000eee 2403             9946		se_subi	r3, 1
                          9947	#4841:       /* Store most significant byte first */
                          9948	#4842:       buffer[count] = (vuint8)(input & 0xFFu);
00000ef0 7c8519ae         9949		stbx	r4, r5, r3
                          9950	#4843:       /* Shift in next byte */
                          9951	#4844:       input >>= 8u;
00000ef4 6884             9952		se_srwi	r4, 8
                          9953	.L5202:
00000ef6 2a03             9954		se_cmpi	r3, 0
00000ef8 e200             9955		se_bne	.L5204

                                   Fri Apr 10 08:32:15 2020           Page 179
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          9956	#4845:    }
                          9957	#4846: }
                          9958	#	    .ef
                          9959	.LDW501:
                          9960	#line4846
                          9961	..lin.1acf134f..db902fb2.0_195::
                          9962	.LDWlin195:
00000efa 0004             9963		se_blr
                          9964		.global	__ghs_eofn_FblMemSetInteger
                          9965	__ghs_eofn_FblMemSetInteger:
                          9966		.type	FblMemSetInteger,@function
                          9967		.size	FblMemSetInteger,$-FblMemSetInteger
                          9968		.align	1
                          9969	
                          9970	#function:			FblMemSetInteger
                          9971	#stack frame size:		0
                          9972	#
                          9973	
                          9974	#count	r3	param
                          9975	#input	r4	param
                          9976	#buffer	r5	param
                          9977	
                          9978		.data
                          9979		.section ".vletext", "vax"
                          9980		.vle
                          9981		.vle
                          9982	
                          9983	
                          9984	#4848: /***********************************************************************************************************************
                          9985	#4849:  *  FblMemGetInteger
                          9986	#4850:  **********************************************************************************************************************/
                          9987	#4851: /*! \brief      Convert given big-endian byte array to integer value
                          9988	#4852:  *  \param[in]  count Number of relevant bytes
                          9989	#4853:  *  \param[in]  buffer Pointer to input buffer
                          9990	#4854:  *  \return     Integer value
                          9991	#4855:  **********************************************************************************************************************/
                          9992		.align	1
                          9993		.align	1
                          9994	..gh.f.p.4.a.1.r.0.e.48:
                          9995		.type	..gh.f.p.4.a.1.r.0.e.48,@object
                          9996		.size	..gh.f.p.4.a.1.r.0.e.48,0
                          9997		.global	FblMemGetInteger
                          9998	FblMemGetInteger:
                          9999	#	    .bf
                          10000	.LDW601:
                          10001	#4856: vuint32 FblMemGetInteger( vuintx count, tFblMemConstRamData buffer )
                          10002	#4857: {
                          10003	#4858:    vuint32 output;
                          10004	#4859:    vuintx idx;
                          10005	#4861:    output = 0u;
00000efc 4800             10006		se_li	r0, 0
                          10007	#4862:    idx    = 0u;
00000efe 0107             10008		se_mr	r7, r0
                          10009	#4864:    /* Loop relevant bytes */
                          10010	#4865:    while (count > 0u)
00000f00 e800             10011		se_b	.L5270

                                   Fri Apr 10 08:32:15 2020           Page 180
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          10012	.L5272:
                          10013	#4866:    {
                          10014	#4867:       /* Most significant byte first */
                          10015	#4868:       output <<= 8u;
                          10016	#line4868
                          10017	..lin.1acf134f..ab116226.0_196::
                          10018	.LDWlin196:
00000f02 7cc438ae         10019		lbzx	r6, r4, r7
                          10020	#4869:       /* Add current byte */
                          10021	#4870:       output |= (vuint32)buffer[idx];
00000f06 6c80             10022		se_slwi	r0, 8
00000f08 2007             10023		se_addi	r7, 1
                          10024	#4872:       idx++;
00000f0a 2403             10025		se_subi	r3, 1
                          10026	#4873:       count--;
00000f0c 4460             10027		se_or	r0, r6
                          10028	.L5270:
00000f0e 2a03             10029		se_cmpi	r3, 0
00000f10 e200             10030		se_bne	.L5272
                          10031	#4874:    }
                          10032	#4876:    return output;
                          10033	#line4876
                          10034	..lin.1acf134f..ab116226.0_197::
                          10035	.LDWlin197:
00000f12 0103             10036		se_mr	r3, r0
                          10037	#	    .ef
                          10038	.LDW701:
00000f14 0004             10039		se_blr
                          10040		.global	__ghs_eofn_FblMemGetInteger
                          10041	__ghs_eofn_FblMemGetInteger:
                          10042		.type	FblMemGetInteger,@function
                          10043		.size	FblMemGetInteger,$-FblMemGetInteger
                          10044		.align	1
                          10045	
                          10046	#function:			FblMemGetInteger
                          10047	#stack frame size:		0
                          10048	#
                          10049	#output	r0	local
                          10050	#idx	r7	local
                          10051	
                          10052	#count	r3	param
                          10053	#buffer	r4	param
                          10054	
                          10055		.data
                          10056		.section ".vletext", "vax"
                          10057		.vle
                          10058		.vle
                          10059	
                          10060	#4877: }
                          10061		.align	1
                          10062	#FlashBlock	FlashBlock	import
                          10063	#kNrOfFlashBlock	kNrOfFlashBlock	import
                          10064	#memDrvLst	memDrvLst	import
                          10065	#errStatErrorCode	errStatErrorCode	import
                          10066	#errStatFblStates	errStatFblStates	import
                          10067	#errStatFlashDrvErrorCode	errStatFlashDrvErrorCode	import

                                   Fri Apr 10 08:32:15 2020           Page 181
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          10068	#errStatDescriptor	errStatDescriptor	import
                          10069	#memSegment	memSegment	import
                          10070	#fblDiagStates	fblDiagStates	import
                          10071	#gAllowedInd	gAllowedInd	static
                          10072	#gErrorStatus	gErrorStatus	static
                          10073	#gBlockInfo	gBlockInfo	static
                          10074	#gSegInfo	gSegInfo	static
                          10075	#gPreambleBuffer	gPreambleBuffer	static
                          10076	#gRemainderBuffer	gRemainderBuffer	static
                          10077	#gBasicInputBuffer	gBasicInputBuffer	static
                          10078	#gInputJobs	gInputJobs	static
                          10079	#gWriteFinalizeJob	gWriteFinalizeJob	static
                          10080	#gGapFillJob	gGapFillJob	static
                          10081	#gGapFillBuffer	gGapFillBuffer	static
                          10082	#gProcessingQueue	gProcessingQueue	static
                          10083	#gJobPrio	gJobPrio	static
                          10084	
                          10085		.data
                          10086		.section ".bss","awb"
                          10087		.align	2
                          10088		.global	fblMemProgState
00001274                  10089	fblMemProgState:	.space	4
                          10090		.type	fblMemProgState,@object
                          10091		.size	fblMemProgState,4
                          10092		.data
                          10093		.note ".PPC.EMB.apuinfo",""
00000000 00000008         10094		.long	0x00000008
00000004 00000004         10095		.long	4
00000008 00000002         10096		.long	0x00000002
                          10097		# "APUinfo\000"
0000000c 41505569         10098		.byte	65,80,85,105
00000010 6e666f00         10099		.byte	110,102,111,0
00000014 01040001         10100		.long	0x01040001
                          10101		.ghsnote version,20
                          10102		.ghsnote tools,3
                          10103		.ghsnote options,644
                          10104		.section ".vletext", "vax"
                          10105		.vle
                          10106		.vle
                          10107		.align	1
                          10108	..eof.C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem...43.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl..5E8FB07E..0::
                          10109		.section	.debug_info
                          10110	.Ldw_begin:
00000000 00003f6d         10111		.long	.Ldw_end-.Ldw_begin-4
00000004 0002             10112		.byte	0,2
00000006 00000000         10113		.long	.Ldw_abbr_begin
0000000a 04               10114		.byte	4
                          10115		.section	.debug_abbrev
                          10116	.Ldw_abbr_begin:
                          10117		.section	.debug_info
0000000b 01               10118		.byte	1
0000000c 00000000         10119		.long	..bof.C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem...43.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl..5E8FB07E..0
00000010 00000000         10120		.long	..eof.C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem...43.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl..5E8FB07E..0
00000014 2e2e2f2e2e2f2e2e 10121		.strz	"../../../BSW/Fbl/fbl_mem.c"
0000001c 2f4253572f46626c
00000024 2f66626c5f6d656d
0000002c 2e6300          
0000002f 433a5c566563746f 10122		.strz	"C:\\Vector\\CBD1800772_D00_Mpc57xx\\Demo\\DemoFbl\\Appl"
00000037 725c434244313830
0000003f 303737325f443030
00000047 5f4d706335377878
0000004f 5c44656d6f5c4465
00000057 6d6f46626c5c4170
0000005f 706c00          
00000062 4748532043203230 10123		.strz	"GHS C 2017.5.4 [dual]"
0000006a 31372e352e34205b
00000072 6475616c5d00    

                                   Fri Apr 10 08:32:15 2020           Page 182
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
00000078 0001             10124		.byte	0,1
0000007a 00000000         10125		.long	.Ldw_line_begin
0000007e 00000000         10126		.long	.Ldw_macinfo_begin
00000082 00               10127		.byte	0
                          10128	
                          10129		.section	.debug_abbrev
00000000 01               10130		.byte	1
00000001 11               10131		.byte	17
00000002 01               10132		.byte	1
00000003 1101             10133		.byte	17,1
00000005 1201             10134		.byte	18,1
00000007 0308             10135		.byte	3,8
00000009 1b08             10136		.byte	27,8
0000000b 2508             10137		.byte	37,8
0000000d 1305             10138		.byte	19,5
0000000f 1006             10139		.byte	16,6
00000011 4306             10140		.byte	67,6
00000013 420b             10141		.byte	66,11
00000015 0000             10142		.byte	0,0
                          10143	
                          10144		.section	.debug_line
                          10145	.Ldw_line_begin:
00000000 00001591         10146		.long	.Ldw_line_end-.Ldw_line_begin-4
00000004 0002             10147		.byte	0,2
00000006 000005f0         10148		.long	.Ldw_lpro_end-.Ldw_lpro_begin
                          10149	.Ldw_lpro_begin:
0000000a 01               10150		.byte	1
0000000b 00               10151		.byte	0
0000000c 00               10152		.byte	0
0000000d 04               10153		.byte	4
0000000e 0a               10154		.byte	10
0000000f 000101           10155		.byte	0,1,1
00000012 010100           10156		.byte	1,1,0
00000015 000001           10157		.byte	0,0,1
00000018 00               10158		.byte	0
00000019 2e2e2f2e2e2f2e2e 10159		.strz	"../../../BSW/Fbl/fbl_mem.c"
00000021 2f4253572f46626c
00000029 2f66626c5f6d656d
00000031 2e6300          
00000034 000000           10160		.byte	0,0,0
00000037 696e636c7564655c 10161		.strz	"include\\fbl_inc.h"
0000003f 66626c5f696e632e
00000047 6800            
00000049 000000           10162		.byte	0,0,0
0000004c 2e2e2f2e2e2f2e2e 10163		.strz	"../../../bsw/fbl/v_ver.h"
00000054 2f6273772f66626c
0000005c 2f765f7665722e68
00000064 00              
00000065 000000           10164		.byte	0,0,0
00000068 67656e646174615c 10165		.strz	"gendata\\v_cfg.h"
00000070 765f6366672e6800
00000078 000000           10166		.byte	0,0,0
0000007b 67656e646174615c 10167		.strz	"gendata\\v_inc.h"
00000083 765f696e632e6800
0000008b 000000           10168		.byte	0,0,0
0000008e 67656e646174615c 10169		.strz	"gendata\\v_par.h"
00000096 765f7061722e6800
0000009e 000000           10170		.byte	0,0,0
000000a1 2e2e2f2e2e2f2e2e 10171		.strz	"../../../bsw/_common/v_def.h"
000000a9 2f6273772f5f636f
000000b1 6d6d6f6e2f765f64
000000b9 65662e6800      
000000be 000000           10172		.byte	0,0,0
000000c1 2e2e2f2e2e2f2e2e 10173		.strz	"../../../bsw/secmod/SecM.h"
000000c9 2f6273772f736563
000000d1 6d6f642f5365634d
000000d9 2e6800          
000000dc 000000           10174		.byte	0,0,0
000000df 2e2e2f2e2e2f2e2e 10175		.strz	"../../../bsw/secmod/Sec.h"
000000e7 2f6273772f736563
000000ef 6d6f642f5365632e
000000f7 6800            
000000f9 000000           10176		.byte	0,0,0
000000fc 2e2e2f2e2e2f2e2e 10177		.strz	"../../../bsw/secmod/Sec_Inc.h"
00000104 2f6273772f736563
0000010c 6d6f642f5365635f
00000114 496e632e6800    
0000011a 000000           10178		.byte	0,0,0
0000011d 67656e646174615c 10179		.strz	"gendata\\SecM_cfg.h"
00000125 5365634d5f636667
0000012d 2e6800          

                                   Fri Apr 10 08:32:15 2020           Page 183
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
00000130 000000           10180		.byte	0,0,0
00000133 2e2e2f2e2e2f2e2e 10181		.strz	"../../../bsw/secmod/Sec_Types.h"
0000013b 2f6273772f736563
00000143 6d6f642f5365635f
0000014b 54797065732e6800
00000153 000000           10182		.byte	0,0,0
00000156 67656e646174615c 10183		.strz	"gendata\\SecMPar.h"
0000015e 5365634d5061722e
00000166 6800            
00000168 000000           10184		.byte	0,0,0
0000016b 2e2e2f2e2e2f2e2e 10185		.strz	"../../../bsw/secmod/SecM_inc.h"
00000173 2f6273772f736563
0000017b 6d6f642f5365634d
00000183 5f696e632e6800  
0000018a 000000           10186		.byte	0,0,0
0000018d 2e2e2f2e2e2f2e2e 10187		.strz	"../../../bsw/secmod/Sec_Crc.h"
00000195 2f6273772f736563
0000019d 6d6f642f5365635f
000001a5 4372632e6800    
000001ab 000000           10188		.byte	0,0,0
000001ae 2e2e2f2e2e2f2e2e 10189		.strz	"../../../bsw/secmod/Sec_SeedKey.h"
000001b6 2f6273772f736563
000001be 6d6f642f5365635f
000001c6 536565644b65792e
000001ce 6800            
000001d0 000000           10190		.byte	0,0,0
000001d3 696e636c7564655c 10191		.strz	"include\\Sec_SeedKey_Cfg.h"
000001db 5365635f53656564
000001e3 4b65795f4366672e
000001eb 6800            
000001ed 000000           10192		.byte	0,0,0
000001f0 2e2e2f2e2e2f2e2e 10193		.strz	"../../../bsw/secmod/Sec_Verification.h"
000001f8 2f6273772f736563
00000200 6d6f642f5365635f
00000208 5665726966696361
00000210 74696f6e2e6800  
00000217 000000           10194		.byte	0,0,0
0000021a 2e2e2f2e2e2f2e2e 10195		.strz	"../../../bsw/fbl/fbl_def.h"
00000222 2f6273772f66626c
0000022a 2f66626c5f646566
00000232 2e6800          
00000235 000000           10196		.byte	0,0,0
00000238 67656e646174615c 10197		.strz	"gendata\\fbl_cfg.h"
00000240 66626c5f6366672e
00000248 6800            
0000024a 000000           10198		.byte	0,0,0
0000024d 2e2e2f2e2e2f2e2e 10199		.strz	"../../../bsw/fbl/fbl_assert.h"
00000255 2f6273772f66626c
0000025d 2f66626c5f617373
00000265 6572742e6800    
0000026b 000000           10200		.byte	0,0,0
0000026e 2e2e2f2e2e2f2e2e 10201		.strz	"../../../bsw/fbl/fbl_assert_oem.h"
00000276 2f6273772f66626c
0000027e 2f66626c5f617373
00000286 6572745f6f656d2e
0000028e 6800            
00000290 000000           10202		.byte	0,0,0
00000293 67656e646174615c 10203		.strz	"gendata\\fbl_mtab.h"
0000029b 66626c5f6d746162
000002a3 2e6800          
000002a6 000000           10204		.byte	0,0,0
000002a9 696e636c7564655c 10205		.strz	"include\\MemMap.h"
000002b1 4d656d4d61702e68
000002b9 00              
000002ba 000000           10206		.byte	0,0,0
000002bd 2e2e2f2e2e2f2e2e 10207		.strz	"../../../bsw/flash/flashdrv.h"
000002c5 2f6273772f666c61
000002cd 73682f666c617368
000002d5 6472762e6800    
000002db 000000           10208		.byte	0,0,0
000002de 2e2e2f2e2e2f2e2e 10209		.strz	"../../../bsw/flash_xd1/flashdrv_xd1.h"
000002e6 2f6273772f666c61
000002ee 73685f7864312f66
000002f6 6c6173686472765f
000002fe 7864312e6800    
00000304 000000           10210		.byte	0,0,0
00000307 2e2e2f2e2e2f2e2e 10211		.strz	"../../../bsw/fbl/fbl_wd.h"
0000030f 2f6273772f66626c
00000317 2f66626c5f77642e
0000031f 6800            
00000321 000000           10212		.byte	0,0,0
00000324 2e2e2f2e2e2f2e2e 10213		.strz	"../../../bsw/fbl/iotypes.h"
0000032c 2f6273772f66626c
00000334 2f696f7479706573
0000033c 2e6800          
0000033f 000000           10214		.byte	0,0,0
00000342 2e2e2f2e2e2f2e2e 10215		.strz	"../../../bsw/fbl/fbl_mio.h"
0000034a 2f6273772f66626c
00000352 2f66626c5f6d696f
0000035a 2e6800          
0000035d 000000           10216		.byte	0,0,0
00000360 2e2e2f2e2e2f2e2e 10217		.strz	"../../../bsw/fbl/fbl_flio.h"
00000368 2f6273772f66626c
00000370 2f66626c5f666c69
00000378 6f2e6800        
0000037c 000000           10218		.byte	0,0,0
0000037f 2e2e2f2e2e2f2e2e 10219		.strz	"../../../bsw/fbl/fbl_flio_xd1.h"
00000387 2f6273772f66626c
0000038f 2f66626c5f666c69
00000397 6f5f7864312e6800
0000039f 000000           10220		.byte	0,0,0
000003a2 2e2e2f2e2e2f2e2e 10221		.strz	"../../../bsw/eep/EepInc.h"
000003aa 2f6273772f656570
000003b2 2f456570496e632e
000003ba 6800            
000003bc 000000           10222		.byte	0,0,0
000003bf 2e2e2f2e2e2f2e2e 10223		.strz	"../../../bsw/eep/EepIO.h"
000003c7 2f6273772f656570
000003cf 2f456570494f2e68
000003d7 00              
000003d8 000000           10224		.byte	0,0,0
000003db 2e2e2f2e2e2f2e2e 10225		.strz	"../../../bsw/fbl/applvect.h"
000003e3 2f6273772f66626c
000003eb 2f6170706c766563
000003f3 742e6800        
000003f7 000000           10226		.byte	0,0,0
000003fa 2e2e2f2e2e2f2e2e 10227		.strz	"../../../bsw/fbl/fbl_cw.h"
00000402 2f6273772f66626c
0000040a 2f66626c5f63772e
00000412 6800            
00000414 000000           10228		.byte	0,0,0
00000417 67656e646174615c 10229		.strz	"gendata\\fbl_cw_cfg.h"
0000041f 66626c5f63775f63
00000427 66672e6800      
0000042c 000000           10230		.byte	0,0,0
0000042f 2e2e2f2e2e2f2e2e 10231		.strz	"../../../bsw/fbl/fbl_hw.h"
00000437 2f6273772f66626c
0000043f 2f66626c5f68772e
00000447 6800            
00000449 000000           10232		.byte	0,0,0
0000044c 2e2e2f2e2e2f2e2e 10233		.strz	"../../../bsw/fbl/fbl_sfr.h"
00000454 2f6273772f66626c
0000045c 2f66626c5f736672
00000464 2e6800          
00000467 000000           10234		.byte	0,0,0
0000046a 67656e646174615c 10235		.strz	"gendata\\ftp_cfg.h"
00000472 6674705f6366672e
0000047a 6800            

                                   Fri Apr 10 08:32:15 2020           Page 184
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
0000047c 000000           10236		.byte	0,0,0
0000047f 2e2e2f2e2e2f2e2e 10237		.strz	"../../../bsw/fbl/fbl_tp.h"
00000487 2f6273772f66626c
0000048f 2f66626c5f74702e
00000497 6800            
00000499 000000           10238		.byte	0,0,0
0000049c 696e636c7564655c 10239		.strz	"include\\WrapNv_inc.h"
000004a4 577261704e765f69
000004ac 6e632e6800      
000004b1 000000           10240		.byte	0,0,0
000004b4 2e2e2f2e2e2f2e2e 10241		.strz	"../../../bsw/wrapnv/WrapNv.h"
000004bc 2f6273772f777261
000004c4 706e762f57726170
000004cc 4e762e6800      
000004d1 000000           10242		.byte	0,0,0
000004d4 67656e646174615c 10243		.strz	"gendata\\WrapNv_cfg.h"
000004dc 577261704e765f63
000004e4 66672e6800      
000004e9 000000           10244		.byte	0,0,0
000004ec 67656e646174615c 10245		.strz	"gendata\\fbl_apfb.h"
000004f4 66626c5f61706662
000004fc 2e6800          
000004ff 000000           10246		.byte	0,0,0
00000502 2e2e2f2e2e2f2e2e 10247		.strz	"../../../bsw/fbl/fbl_diag.h"
0000050a 2f6273772f66626c
00000512 2f66626c5f646961
0000051a 672e6800        
0000051e 000000           10248		.byte	0,0,0
00000521 2e2e2f2e2e2f2e2e 10249		.strz	"../../../bsw/fbl/fbl_diag_oem.h"
00000529 2f6273772f66626c
00000531 2f66626c5f646961
00000539 675f6f656d2e6800
00000541 000000           10250		.byte	0,0,0
00000544 2e2e2f2e2e2f2e2e 10251		.strz	"../../../bsw/fbl/fbl_mem.h"
0000054c 2f6273772f66626c
00000554 2f66626c5f6d656d
0000055c 2e6800          
0000055f 000000           10252		.byte	0,0,0
00000562 2e2e2f2e2e2f2e2e 10253		.strz	"../../../bsw/fbl/fbl_mem_oem.h"
0000056a 2f6273772f66626c
00000572 2f66626c5f6d656d
0000057a 5f6f656d2e6800  
00000581 000000           10254		.byte	0,0,0
00000584 696e636c7564655c 10255		.strz	"include\\fbl_ap.h"
0000058c 66626c5f61702e68
00000594 00              
00000595 000000           10256		.byte	0,0,0
00000598 696e636c7564655c 10257		.strz	"include\\fbl_apwd.h"
000005a0 66626c5f61707764
000005a8 2e6800          
000005ab 000000           10258		.byte	0,0,0
000005ae 696e636c7564655c 10259		.strz	"include\\fbl_apdi.h"
000005b6 66626c5f61706469
000005be 2e6800          
000005c1 000000           10260		.byte	0,0,0
000005c4 696e636c7564655c 10261		.strz	"include\\fbl_apnv.h"
000005cc 66626c5f61706e76
000005d4 2e6800          
000005d7 000000           10262		.byte	0,0,0
000005da 2e2e2f2e2e2f2e2e 10263		.strz	"../../../bsw/fbl/fbl_main.h"
000005e2 2f6273772f66626c
000005ea 2f66626c5f6d6169
000005f2 6e2e6800        
000005f6 000000           10264		.byte	0,0,0
000005f9 00               10265		.byte	0
                          10266	.Ldw_lpro_end:
                          10267		.section	.debug_macinfo
                          10268	.Ldw_macinfo_begin:
                          10269		.section	.debug_frame
                          10270	.LDW_5d27e08:
00000000 0000008c         10271		.long	.LDW_unq_2-.LDW_unq_1
                          10272	.LDW_unq_1:
00000004 ffffffff         10273		.byte	255,255,255,255
00000008 01               10274		.byte	1
00000009 00               10275		.byte	0
0000000a 01               10276		.byte	1
0000000b 01               10277		.byte	1
0000000c 6c               10278		.byte	108
0000000d 0c               10279		.byte	12
0000000e 01               10280		.byte	1
0000000f 00               10281		.byte	0
00000010 07               10282		.byte	7
00000011 00               10283		.byte	0
00000012 07               10284		.byte	7
00000013 01               10285		.byte	1
00000014 07               10286		.byte	7
00000015 02               10287		.byte	2
00000016 07               10288		.byte	7
00000017 03               10289		.byte	3
00000018 07               10290		.byte	7
00000019 04               10291		.byte	4

                                   Fri Apr 10 08:32:15 2020           Page 185
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
0000001a 07               10292		.byte	7
0000001b 05               10293		.byte	5
0000001c 07               10294		.byte	7
0000001d 06               10295		.byte	6
0000001e 07               10296		.byte	7
0000001f 07               10297		.byte	7
00000020 07               10298		.byte	7
00000021 08               10299		.byte	8
00000022 07               10300		.byte	7
00000023 09               10301		.byte	9
00000024 07               10302		.byte	7
00000025 0a               10303		.byte	10
00000026 07               10304		.byte	7
00000027 0b               10305		.byte	11
00000028 07               10306		.byte	7
00000029 0c               10307		.byte	12
0000002a 07               10308		.byte	7
0000002b 0d               10309		.byte	13
0000002c 07               10310		.byte	7
0000002d 0e               10311		.byte	14
0000002e 07               10312		.byte	7
0000002f 0f               10313		.byte	15
00000030 07               10314		.byte	7
00000031 10               10315		.byte	16
00000032 07               10316		.byte	7
00000033 11               10317		.byte	17
00000034 07               10318		.byte	7
00000035 12               10319		.byte	18
00000036 07               10320		.byte	7
00000037 13               10321		.byte	19
00000038 07               10322		.byte	7
00000039 14               10323		.byte	20
0000003a 07               10324		.byte	7
0000003b 15               10325		.byte	21
0000003c 07               10326		.byte	7
0000003d 16               10327		.byte	22
0000003e 07               10328		.byte	7
0000003f 17               10329		.byte	23
00000040 07               10330		.byte	7
00000041 18               10331		.byte	24
00000042 07               10332		.byte	7
00000043 19               10333		.byte	25
00000044 07               10334		.byte	7
00000045 1a               10335		.byte	26
00000046 07               10336		.byte	7
00000047 1b               10337		.byte	27
00000048 07               10338		.byte	7
00000049 1c               10339		.byte	28
0000004a 07               10340		.byte	7
0000004b 1d               10341		.byte	29
0000004c 07               10342		.byte	7
0000004d 1e               10343		.byte	30
0000004e 07               10344		.byte	7
0000004f 1f               10345		.byte	31
00000050 07               10346		.byte	7
00000051 20               10347		.byte	32

                                   Fri Apr 10 08:32:15 2020           Page 186
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
00000052 07               10348		.byte	7
00000053 21               10349		.byte	33
00000054 07               10350		.byte	7
00000055 22               10351		.byte	34
00000056 07               10352		.byte	7
00000057 23               10353		.byte	35
00000058 07               10354		.byte	7
00000059 24               10355		.byte	36
0000005a 07               10356		.byte	7
0000005b 25               10357		.byte	37
0000005c 07               10358		.byte	7
0000005d 26               10359		.byte	38
0000005e 07               10360		.byte	7
0000005f 27               10361		.byte	39
00000060 07               10362		.byte	7
00000061 28               10363		.byte	40
00000062 07               10364		.byte	7
00000063 29               10365		.byte	41
00000064 07               10366		.byte	7
00000065 2a               10367		.byte	42
00000066 07               10368		.byte	7
00000067 2b               10369		.byte	43
00000068 07               10370		.byte	7
00000069 2c               10371		.byte	44
0000006a 07               10372		.byte	7
0000006b 2d               10373		.byte	45
0000006c 07               10374		.byte	7
0000006d 2e               10375		.byte	46
0000006e 07               10376		.byte	7
0000006f 2f               10377		.byte	47
00000070 07               10378		.byte	7
00000071 30               10379		.byte	48
00000072 07               10380		.byte	7
00000073 31               10381		.byte	49
00000074 07               10382		.byte	7
00000075 32               10383		.byte	50
00000076 07               10384		.byte	7
00000077 33               10385		.byte	51
00000078 07               10386		.byte	7
00000079 34               10387		.byte	52
0000007a 07               10388		.byte	7
0000007b 35               10389		.byte	53
0000007c 07               10390		.byte	7
0000007d 36               10391		.byte	54
0000007e 07               10392		.byte	7
0000007f 37               10393		.byte	55
00000080 07               10394		.byte	7
00000081 38               10395		.byte	56
00000082 07               10396		.byte	7
00000083 39               10397		.byte	57
00000084 07               10398		.byte	7
00000085 3a               10399		.byte	58
00000086 07               10400		.byte	7
00000087 3b               10401		.byte	59
00000088 07               10402		.byte	7
00000089 3c               10403		.byte	60

                                   Fri Apr 10 08:32:15 2020           Page 187
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
0000008a 07               10404		.byte	7
0000008b 3d               10405		.byte	61
0000008c 07               10406		.byte	7
0000008d 3e               10407		.byte	62
0000008e 07               10408		.byte	7
0000008f 3f               10409		.byte	63
                          10410	.LDW_unq_2:
                          10411		.section	.debug_info
                          10412	.LDW_4aac928:
00000083 27               10413		.byte	39
00000084 756e7369676e6564 10414		.strz	"unsigned char"
0000008c 206368617200    
00000092 08               10415		.byte	8
00000093 01               10416		.byte	1
                          10417	
                          10418		.section	.debug_abbrev
00000017 27               10419		.byte	39
00000018 24               10420		.byte	36
00000019 00               10421		.byte	0
0000001a 0308             10422		.byte	3,8
0000001c 3e0b             10423		.byte	62,11
0000001e 0b0b             10424		.byte	11,11
00000020 0000             10425		.byte	0,0
                          10426	
                          10427		.section	.debug_info
                          10428	.LDW_4aac7a0:
00000094 46               10429		.byte	70
00000095 00000000         10430		.long	.LDW_5d29e78
00000099 01               10431		.byte	1
                          10432	
                          10433		.section	.debug_abbrev
00000022 46               10434		.byte	70
00000023 15               10435		.byte	21
00000024 01               10436		.byte	1
00000025 4910             10437		.byte	73,16
00000027 270c             10438		.byte	39,12
00000029 0000             10439		.byte	0,0
                          10440	
                          10441		.section	.debug_info
0000009a 00               10442		.byte	0
                          10443	
                          10444	.LDW_4aaca40:
0000009b 47               10445		.byte	71
0000009c 01               10446		.byte	1
                          10447	
                          10448		.section	.debug_abbrev
0000002b 47               10449		.byte	71
0000002c 15               10450		.byte	21
0000002d 01               10451		.byte	1
0000002e 270c             10452		.byte	39,12
00000030 0000             10453		.byte	0,0
                          10454	
                          10455		.section	.debug_info
0000009d 00               10456		.byte	0
                          10457	
                          10458	.LDW_4aac768:
0000009e 47               10459		.byte	71

                                   Fri Apr 10 08:32:15 2020           Page 188
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
0000009f 01               10460		.byte	1
                          10461	
000000a0 00               10462		.byte	0
                          10463	
                          10464	.LDW_4aac6c0:
000000a1 31               10465		.byte	49
000000a2 00000000         10466		.long	.LDW_5d29e20
                          10467	
                          10468		.section	.debug_abbrev
00000032 31               10469		.byte	49
00000033 0f               10470		.byte	15
00000034 00               10471		.byte	0
00000035 4910             10472		.byte	73,16
00000037 0000             10473		.byte	0,0
                          10474	
                          10475		.section	.debug_info
                          10476	.LDW_4ae9948:
000000a6 2b               10477		.byte	43
000000a7 00000000         10478		.long	.LDW_4ae98f0
                          10479	
                          10480		.section	.debug_abbrev
00000039 2b               10481		.byte	43
0000003a 26               10482		.byte	38
0000003b 00               10483		.byte	0
0000003c 4910             10484		.byte	73,16
0000003e 0000             10485		.byte	0,0
                          10486	
                          10487		.section	.debug_info
                          10488	.LDW_4aaca78:
000000ab 31               10489		.byte	49
000000ac 00000000         10490		.long	.LDW_4ae9948
                          10491	
                          10492	.LDW_4aac6f8:
000000b0 46               10493		.byte	70
000000b1 00000000         10494		.long	.LDW_4aeb9a0
000000b5 01               10495		.byte	1
                          10496	
                          10497	.LDW_4aa3658:
000000b6 14               10498		.byte	20
000000b7 00000000         10499		.long	.LDW_4aaca78
000000bb 00               10500		.byte	0
                          10501	
                          10502		.section	.debug_abbrev
00000040 14               10503		.byte	20
00000041 05               10504		.byte	5
00000042 00               10505		.byte	0
00000043 4910             10506		.byte	73,16
00000045 4b0c             10507		.byte	75,12
00000047 0000             10508		.byte	0,0
                          10509	
                          10510		.section	.debug_info
000000bc 00               10511		.byte	0
                          10512	
                          10513	.LDW_4aac880:
000000bd 47               10514		.byte	71
000000be 01               10515		.byte	1

                                   Fri Apr 10 08:32:15 2020           Page 189
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          10516	
000000bf 00               10517		.byte	0
                          10518	
                          10519	.LDW_4aac7d8:
000000c0 27               10520		.byte	39
000000c1 756e7369676e6564 10521		.strz	"unsigned long"
000000c9 206c6f6e6700    
000000cf 07               10522		.byte	7
000000d0 04               10523		.byte	4
                          10524	
                          10525	.LDW_4aac848:
000000d1 46               10526		.byte	70
000000d2 00000000         10527		.long	.LDW_4aea750
000000d6 01               10528		.byte	1
                          10529	
000000d7 00               10530		.byte	0
                          10531	
                          10532	.LDW_4aac730:
000000d8 31               10533		.byte	49
000000d9 00000000         10534		.long	.LDW_5c3d280
                          10535	
                          10536	.LDW_4aac8b8:
000000dd 47               10537		.byte	71
000000de 01               10538		.byte	1
                          10539	
                          10540	.LDW_4aa3358:
000000df 14               10541		.byte	20
000000e0 00000000         10542		.long	.LDW_4aac730
000000e4 00               10543		.byte	0
                          10544	
                          10545	.LDW_4aa3328:
000000e5 14               10546		.byte	20
000000e6 00000000         10547		.long	.LDW_5c3d8b0
000000ea 00               10548		.byte	0
                          10549	
000000eb 00               10550		.byte	0
                          10551	
                          10552	.LDW_4aac998:
000000ec 46               10553		.byte	70
000000ed 00000000         10554		.long	.LDW_5c3d8b0
000000f1 01               10555		.byte	1
                          10556	
                          10557	.LDW_4aa3628:
000000f2 14               10558		.byte	20
000000f3 00000000         10559		.long	.LDW_4aac730
000000f7 00               10560		.byte	0
                          10561	
                          10562	.LDW_4aa35c8:
000000f8 14               10563		.byte	20
000000f9 00000000         10564		.long	.LDW_5c3d8b0
000000fd 00               10565		.byte	0
                          10566	
                          10567	.LDW_4aa36b8:
000000fe 14               10568		.byte	20
000000ff 00000000         10569		.long	.LDW_5c3d8b0
00000103 00               10570		.byte	0
                          10571	

                                   Fri Apr 10 08:32:15 2020           Page 190
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
00000104 00               10572		.byte	0
                          10573	
                          10574	.LDW_4aac538:
00000105 46               10575		.byte	70
00000106 00000000         10576		.long	.LDW_5c3d8b0
0000010a 01               10577		.byte	1
                          10578	
                          10579	.LDW_4aa3148:
0000010b 14               10580		.byte	20
0000010c 00000000         10581		.long	.LDW_4aac730
00000110 00               10582		.byte	0
                          10583	
                          10584	.LDW_4aa3418:
00000111 14               10585		.byte	20
00000112 00000000         10586		.long	.LDW_5c3d8b0
00000116 00               10587		.byte	0
                          10588	
00000117 00               10589		.byte	0
                          10590	
                          10591	.LDW_4aac810:
00000118 46               10592		.byte	70
00000119 00000000         10593		.long	.LDW_5c3d8b0
0000011d 01               10594		.byte	1
                          10595	
                          10596	.LDW_4aa32f8:
0000011e 14               10597		.byte	20
0000011f 00000000         10598		.long	.LDW_4aac730
00000123 00               10599		.byte	0
                          10600	
                          10601	.LDW_4aa3478:
00000124 14               10602		.byte	20
00000125 00000000         10603		.long	.LDW_5c3d8b0
00000129 00               10604		.byte	0
                          10605	
                          10606	.LDW_4aa31a8:
0000012a 14               10607		.byte	20
0000012b 00000000         10608		.long	.LDW_5c3d388
0000012f 00               10609		.byte	0
                          10610	
00000130 00               10611		.byte	0
                          10612	
                          10613	.LDW_4aac688:
00000131 31               10614		.byte	49
00000132 00000000         10615		.long	.LDW_4ae98f0
                          10616	
                          10617	.LDW_4aac9d0:
00000136 46               10618		.byte	70
00000137 00000000         10619		.long	.LDW_5c3d8b0
0000013b 01               10620		.byte	1
                          10621	
                          10622	.LDW_4aa34a8:
0000013c 14               10623		.byte	20
0000013d 00000000         10624		.long	.LDW_4aac730
00000141 00               10625		.byte	0
                          10626	
                          10627	.LDW_4aa3178:

                                   Fri Apr 10 08:32:15 2020           Page 191
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
00000142 14               10628		.byte	20
00000143 00000000         10629		.long	.LDW_5c3d388
00000147 00               10630		.byte	0
                          10631	
                          10632	.LDW_4aa3688:
00000148 14               10633		.byte	20
00000149 00000000         10634		.long	.LDW_4aac688
0000014d 00               10635		.byte	0
                          10636	
0000014e 00               10637		.byte	0
                          10638	
                          10639	.LDW_4aac500:
0000014f 46               10640		.byte	70
00000150 00000000         10641		.long	.LDW_5c3d8b0
00000154 01               10642		.byte	1
                          10643	
                          10644	.LDW_4aa3598:
00000155 14               10645		.byte	20
00000156 00000000         10646		.long	.LDW_4aac730
0000015a 00               10647		.byte	0
                          10648	
                          10649	.LDW_4aa3808:
0000015b 14               10650		.byte	20
0000015c 00000000         10651		.long	.LDW_4aac688
00000160 00               10652		.byte	0
                          10653	
                          10654	.LDW_4aa3838:
00000161 14               10655		.byte	20
00000162 00000000         10656		.long	.LDW_4ae9b80
00000166 00               10657		.byte	0
                          10658	
00000167 00               10659		.byte	0
                          10660	
                          10661	.LDW_4aac3b0:
00000168 47               10662		.byte	71
00000169 01               10663		.byte	1
                          10664	
                          10665	.LDW_4aa36e8:
0000016a 14               10666		.byte	20
0000016b 00000000         10667		.long	.LDW_4aac688
0000016f 00               10668		.byte	0
                          10669	
                          10670	.LDW_4aa3868:
00000170 14               10671		.byte	20
00000171 00000000         10672		.long	.LDW_4aeb9a0
00000175 00               10673		.byte	0
                          10674	
                          10675	.LDW_4aa3718:
00000176 14               10676		.byte	20
00000177 00000000         10677		.long	.LDW_5d9c170
0000017b 00               10678		.byte	0
                          10679	
                          10680	.LDW_4aa3748:
0000017c 14               10681		.byte	20
0000017d 00000000         10682		.long	.LDW_5d9c958
00000181 00               10683		.byte	0

                                   Fri Apr 10 08:32:15 2020           Page 192
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          10684	
00000182 00               10685		.byte	0
                          10686	
                          10687	.LDW_4aac5a8:
00000183 47               10688		.byte	71
00000184 01               10689		.byte	1
                          10690	
00000185 00               10691		.byte	0
                          10692	
                          10693	.LDW_4aac3e8:
00000186 47               10694		.byte	71
00000187 01               10695		.byte	1
                          10696	
00000188 00               10697		.byte	0
                          10698	
                          10699	.LDW_4aac420:
00000189 46               10700		.byte	70
0000018a 00000000         10701		.long	.LDW_4aeb9a0
0000018e 01               10702		.byte	1
                          10703	
0000018f 00               10704		.byte	0
                          10705	
                          10706	.LDW_4aac458:
00000190 47               10707		.byte	71
00000191 01               10708		.byte	1
                          10709	
00000192 00               10710		.byte	0
                          10711	
                          10712	.LDW_4aac490:
00000193 47               10713		.byte	71
00000194 01               10714		.byte	1
                          10715	
00000195 00               10716		.byte	0
                          10717	
                          10718	.LDW_4aac4c8:
00000196 46               10719		.byte	70
00000197 00000000         10720		.long	.LDW_5d9c170
0000019b 01               10721		.byte	1
                          10722	
                          10723	.LDW_5dad400:
0000019c 14               10724		.byte	20
0000019d 00000000         10725		.long	.LDW_5d9ca08
000001a1 00               10726		.byte	0
                          10727	
                          10728	.LDW_5dad4f0:
000001a2 14               10729		.byte	20
000001a3 00000000         10730		.long	.LDW_5d9c170
000001a7 00               10731		.byte	0
                          10732	
000001a8 00               10733		.byte	0
                          10734	
                          10735	.LDW_4aac570:
000001a9 27               10736		.byte	39
000001aa 73686f727400     10737		.strz	"short"
000001b0 05               10738		.byte	5
000001b1 02               10739		.byte	2

                                   Fri Apr 10 08:32:15 2020           Page 193
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          10740	
                          10741	.LDW_4aac618:
000001b2 46               10742		.byte	70
000001b3 00000000         10743		.long	.LDW_5d9c170
000001b7 01               10744		.byte	1
                          10745	
                          10746	.LDW_5dad5b0:
000001b8 14               10747		.byte	20
000001b9 00000000         10748		.long	.LDW_5d9ca08
000001bd 00               10749		.byte	0
                          10750	
                          10751	.LDW_5dad550:
000001be 14               10752		.byte	20
000001bf 00000000         10753		.long	.LDW_5d9c170
000001c3 00               10754		.byte	0
                          10755	
                          10756	.LDW_5dad640:
000001c4 14               10757		.byte	20
000001c5 00000000         10758		.long	.LDW_4aeb9a0
000001c9 00               10759		.byte	0
                          10760	
000001ca 00               10761		.byte	0
                          10762	
                          10763	.LDW_5d9cc70:
000001cb 2b               10764		.byte	43
000001cc 00000000         10765		.long	.LDW_5d9c170
                          10766	
                          10767	.LDW_4aacb20:
000001d0 31               10768		.byte	49
000001d1 00000000         10769		.long	.LDW_5d9cc70
                          10770	
                          10771	.LDW_5d9cf88:
000001d5 2b               10772		.byte	43
000001d6 00000000         10773		.long	.LDW_5d29e20
                          10774	
                          10775	.LDW_4aacab0:
000001da 31               10776		.byte	49
000001db 00000000         10777		.long	.LDW_5d9cf88
                          10778	
                          10779	.LDW_4aacae8:
000001df 46               10780		.byte	70
000001e0 00000000         10781		.long	.LDW_4aea750
000001e4 01               10782		.byte	1
                          10783	
                          10784	.LDW_5dad280:
000001e5 14               10785		.byte	20
000001e6 00000000         10786		.long	.LDW_5d9ca08
000001ea 00               10787		.byte	0
                          10788	
                          10789	.LDW_5dad4c0:
000001eb 14               10790		.byte	20
000001ec 00000000         10791		.long	.LDW_4aacb20
000001f0 00               10792		.byte	0
                          10793	
                          10794	.LDW_5dad490:
000001f1 14               10795		.byte	20

                                   Fri Apr 10 08:32:15 2020           Page 194
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
000001f2 00000000         10796		.long	.LDW_5d9ce80
000001f6 00               10797		.byte	0
                          10798	
000001f7 00               10799		.byte	0
                          10800	
                          10801	.LDW_5dbefc0:
000001f8 46               10802		.byte	70
000001f9 00000000         10803		.long	.LDW_4aea750
000001fd 01               10804		.byte	1
                          10805	
                          10806	.LDW_5dad580:
000001fe 14               10807		.byte	20
000001ff 00000000         10808		.long	.LDW_5d9ca08
00000203 00               10809		.byte	0
                          10810	
                          10811	.LDW_5dad310:
00000204 14               10812		.byte	20
00000205 00000000         10813		.long	.LDW_5d9c170
00000209 00               10814		.byte	0
                          10815	
0000020a 00               10816		.byte	0
                          10817	
                          10818	.LDW_5dbf308:
0000020b 27               10819		.byte	39
0000020c 756e7369676e6564 10820		.strz	"unsigned short"
00000214 2073686f727400  
0000021b 07               10821		.byte	7
0000021c 02               10822		.byte	2
                          10823	
                          10824	.LDW_5dbf340:
0000021d 31               10825		.byte	49
0000021e 00000000         10826		.long	.LDW_5d9c170
                          10827	
                          10828	.LDW_5dbeff8:
00000222 46               10829		.byte	70
00000223 00000000         10830		.long	.LDW_4aea750
00000227 01               10831		.byte	1
                          10832	
                          10833	.LDW_5dad670:
00000228 14               10834		.byte	20
00000229 00000000         10835		.long	.LDW_5d9ca08
0000022d 00               10836		.byte	0
                          10837	
                          10838	.LDW_5dad1f0:
0000022e 14               10839		.byte	20
0000022f 00000000         10840		.long	.LDW_5dbf340
00000233 00               10841		.byte	0
                          10842	
                          10843	.LDW_5dad1c0:
00000234 14               10844		.byte	20
00000235 00000000         10845		.long	.LDW_4aeb9a0
00000239 00               10846		.byte	0
                          10847	
                          10848	.LDW_5dad610:
0000023a 14               10849		.byte	20
0000023b 00000000         10850		.long	.LDW_5dbfda8
0000023f 00               10851		.byte	0

                                   Fri Apr 10 08:32:15 2020           Page 195
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          10852	
00000240 00               10853		.byte	0
                          10854	
                          10855	.LDW_5dbf1b8:
00000241 46               10856		.byte	70
00000242 00000000         10857		.long	.LDW_5d9c170
00000246 01               10858		.byte	1
                          10859	
                          10860	.LDW_5dad6a0:
00000247 14               10861		.byte	20
00000248 00000000         10862		.long	.LDW_5d9ca08
0000024c 00               10863		.byte	0
                          10864	
                          10865	.LDW_5dad0d0:
0000024d 14               10866		.byte	20
0000024e 00000000         10867		.long	.LDW_5d9c170
00000252 00               10868		.byte	0
                          10869	
00000253 00               10870		.byte	0
                          10871	
                          10872	.LDW_5dbed20:
00000254 46               10873		.byte	70
00000255 00000000         10874		.long	.LDW_4aea750
00000259 01               10875		.byte	1
                          10876	
                          10877	.LDW_5dad130:
0000025a 14               10878		.byte	20
0000025b 00000000         10879		.long	.LDW_4aaca78
0000025f 00               10880		.byte	0
                          10881	
                          10882	.LDW_5dad2e0:
00000260 14               10883		.byte	20
00000261 00000000         10884		.long	.LDW_5dbf340
00000265 00               10885		.byte	0
                          10886	
                          10887	.LDW_5dad190:
00000266 14               10888		.byte	20
00000267 00000000         10889		.long	.LDW_5dbf7d0
0000026b 00               10890		.byte	0
                          10891	
0000026c 00               10892		.byte	0
                          10893	
                          10894	.LDW_5dbedc8:
0000026d 46               10895		.byte	70
0000026e 00000000         10896		.long	.LDW_4aea750
00000272 01               10897		.byte	1
                          10898	
                          10899	.LDW_5dad370:
00000273 14               10900		.byte	20
00000274 00000000         10901		.long	.LDW_4aac688
00000278 00               10902		.byte	0
                          10903	
                          10904	.LDW_5dad430:
00000279 14               10905		.byte	20
0000027a 00000000         10906		.long	.LDW_5dbf7d0
0000027e 00               10907		.byte	0

                                   Fri Apr 10 08:32:15 2020           Page 196
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          10908	
0000027f 00               10909		.byte	0
                          10910	
                          10911	.LDW_5dbece8:
00000280 47               10912		.byte	71
00000281 01               10913		.byte	1
                          10914	
                          10915	.LDW_5dad700:
00000282 14               10916		.byte	20
00000283 00000000         10917		.long	.LDW_5dbf7d0
00000287 00               10918		.byte	0
                          10919	
00000288 00               10920		.byte	0
                          10921	
                          10922	.LDW_5dbef88:
00000289 47               10923		.byte	71
0000028a 01               10924		.byte	1
                          10925	
                          10926	.LDW_5dad760:
0000028b 14               10927		.byte	20
0000028c 00000000         10928		.long	.LDW_5c3d388
00000290 00               10929		.byte	0
                          10930	
00000291 00               10931		.byte	0
                          10932	
                          10933	.LDW_5dbed58:
00000292 46               10934		.byte	70
00000293 00000000         10935		.long	.LDW_4aea750
00000297 01               10936		.byte	1
                          10937	
                          10938	.LDW_5dad7c0:
00000298 14               10939		.byte	20
00000299 00000000         10940		.long	.LDW_5d9ce80
0000029d 00               10941		.byte	0
                          10942	
                          10943	.LDW_5dad7f0:
0000029e 14               10944		.byte	20
0000029f 00000000         10945		.long	.LDW_5d9c170
000002a3 00               10946		.byte	0
                          10947	
                          10948	.LDW_5dad820:
000002a4 14               10949		.byte	20
000002a5 00000000         10950		.long	.LDW_5d9c170
000002a9 00               10951		.byte	0
                          10952	
000002aa 00               10953		.byte	0
                          10954	
                          10955	.LDW_5dbf030:
000002ab 46               10956		.byte	70
000002ac 00000000         10957		.long	.LDW_5df09a8
000002b0 01               10958		.byte	1
                          10959	
                          10960	.LDW_5df1bd0:
000002b1 14               10961		.byte	20
000002b2 00000000         10962		.long	.LDW_5df0f28
000002b6 00               10963		.byte	0

                                   Fri Apr 10 08:32:15 2020           Page 197
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          10964	
                          10965	.LDW_5df1ba0:
000002b7 14               10966		.byte	20
000002b8 00000000         10967		.long	.LDW_5df0f28
000002bc 00               10968		.byte	0
                          10969	
000002bd 00               10970		.byte	0
                          10971	
                          10972	.LDW_5dbf068:
000002be 46               10973		.byte	70
000002bf 00000000         10974		.long	.LDW_4aeb9a0
000002c3 01               10975		.byte	1
                          10976	
                          10977	.LDW_5df1ae0:
000002c4 14               10978		.byte	20
000002c5 00000000         10979		.long	.LDW_5d9c170
000002c9 00               10980		.byte	0
                          10981	
                          10982	.LDW_5df1c60:
000002ca 14               10983		.byte	20
000002cb 00000000         10984		.long	.LDW_5df0f80
000002cf 00               10985		.byte	0
                          10986	
000002d0 00               10987		.byte	0
                          10988	
                          10989	.LDW_5dbee00:
000002d1 46               10990		.byte	70
000002d2 00000000         10991		.long	.LDW_4aeb9a0
000002d6 01               10992		.byte	1
                          10993	
000002d7 00               10994		.byte	0
                          10995	
                          10996	.LDW_5dbf0a0:
000002d8 46               10997		.byte	70
000002d9 00000000         10998		.long	.LDW_4aeb9a0
000002dd 01               10999		.byte	1
                          11000	
000002de 00               11001		.byte	0
                          11002	
                          11003	.LDW_5dbf0d8:
000002df 47               11004		.byte	71
000002e0 01               11005		.byte	1
                          11006	
000002e1 00               11007		.byte	0
                          11008	
                          11009	.LDW_5dbee70:
000002e2 46               11010		.byte	70
000002e3 00000000         11011		.long	.LDW_4aeb9a0
000002e7 01               11012		.byte	1
                          11013	
000002e8 00               11014		.byte	0
                          11015	
                          11016	.LDW_5df0c10:
000002e9 2b               11017		.byte	43
000002ea 00000000         11018		.long	.LDW_5df0e78
                          11019	

                                   Fri Apr 10 08:32:15 2020           Page 198
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          11020	.LDW_5dbf180:
000002ee 31               11021		.byte	49
000002ef 00000000         11022		.long	.LDW_5df0c10
                          11023	
                          11024	.LDW_5dbf378:
000002f3 46               11025		.byte	70
000002f4 00000000         11026		.long	.LDW_4aea750
000002f8 01               11027		.byte	1
                          11028	
                          11029	.LDW_5df1570:
000002f9 14               11030		.byte	20
000002fa 00000000         11031		.long	.LDW_5dbf180
000002fe 00               11032		.byte	0
                          11033	
000002ff 00               11034		.byte	0
                          11035	
                          11036	.LDW_5dbed90:
00000300 31               11037		.byte	49
00000301 00000000         11038		.long	.LDW_5df0e78
                          11039	
                          11040	.LDW_5dbf110:
00000305 46               11041		.byte	70
00000306 00000000         11042		.long	.LDW_4aea750
0000030a 01               11043		.byte	1
                          11044	
                          11045	.LDW_5df1930:
0000030b 14               11046		.byte	20
0000030c 00000000         11047		.long	.LDW_5dbed90
00000310 00               11048		.byte	0
                          11049	
00000311 00               11050		.byte	0
                          11051	
                          11052	.LDW_5dbf148:
00000312 46               11053		.byte	70
00000313 00000000         11054		.long	.LDW_4aea750
00000317 01               11055		.byte	1
                          11056	
00000318 00               11057		.byte	0
                          11058	
                          11059	.LDW_5df0b60:
00000319 2b               11060		.byte	43
0000031a 00000000         11061		.long	.LDW_5df06e8
                          11062	
                          11063	.LDW_5dbf260:
0000031e 31               11064		.byte	49
0000031f 00000000         11065		.long	.LDW_5df0b60
                          11066	
                          11067	.LDW_5dbecb0:
00000323 31               11068		.byte	49
00000324 00000000         11069		.long	.LDW_5df0798
                          11070	
                          11071	.LDW_5dbf1f0:
00000328 46               11072		.byte	70
00000329 00000000         11073		.long	.LDW_4aea750
0000032d 01               11074		.byte	1
                          11075	

                                   Fri Apr 10 08:32:15 2020           Page 199
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          11076	.LDW_5df19f0:
0000032e 14               11077		.byte	20
0000032f 00000000         11078		.long	.LDW_5dbf260
00000333 00               11079		.byte	0
                          11080	
                          11081	.LDW_5df15a0:
00000334 14               11082		.byte	20
00000335 00000000         11083		.long	.LDW_5dbecb0
00000339 00               11084		.byte	0
                          11085	
0000033a 00               11086		.byte	0
                          11087	
                          11088	.LDW_5dbee38:
0000033b 31               11089		.byte	49
0000033c 00000000         11090		.long	.LDW_5df13f8
                          11091	
                          11092	.LDW_5df1030:
00000340 2b               11093		.byte	43
00000341 00000000         11094		.long	.LDW_5df0fd8
                          11095	
                          11096	.LDW_5dbf228:
00000345 31               11097		.byte	49
00000346 00000000         11098		.long	.LDW_5df1030
                          11099	
                          11100	.LDW_5dbf298:
0000034a 46               11101		.byte	70
0000034b 00000000         11102		.long	.LDW_4aea750
0000034f 01               11103		.byte	1
                          11104	
                          11105	.LDW_5df1a80:
00000350 14               11106		.byte	20
00000351 00000000         11107		.long	.LDW_5dbf228
00000355 00               11108		.byte	0
                          11109	
00000356 00               11110		.byte	0
                          11111	
                          11112	.LDW_5dbef50:
00000357 46               11113		.byte	70
00000358 00000000         11114		.long	.LDW_4aea750
0000035c 01               11115		.byte	1
                          11116	
                          11117	.LDW_5df18a0:
0000035d 14               11118		.byte	20
0000035e 00000000         11119		.long	.LDW_5dbf340
00000362 00               11120		.byte	0
                          11121	
00000363 00               11122		.byte	0
                          11123	
                          11124	.LDW_5dbf2d0:
00000364 46               11125		.byte	70
00000365 00000000         11126		.long	.LDW_4aea750
00000369 01               11127		.byte	1
                          11128	
                          11129	.LDW_5df17b0:
0000036a 14               11130		.byte	20
0000036b 00000000         11131		.long	.LDW_5d9ce80

                                   Fri Apr 10 08:32:15 2020           Page 200
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
0000036f 00               11132		.byte	0
                          11133	
                          11134	.LDW_5df18d0:
00000370 14               11135		.byte	20
00000371 00000000         11136		.long	.LDW_5d9c170
00000375 00               11137		.byte	0
                          11138	
                          11139	.LDW_5df16f0:
00000376 14               11140		.byte	20
00000377 00000000         11141		.long	.LDW_5d9c170
0000037b 00               11142		.byte	0
                          11143	
0000037c 00               11144		.byte	0
                          11145	
                          11146	.LDW_5dbeea8:
0000037d 47               11147		.byte	71
0000037e 01               11148		.byte	1
                          11149	
0000037f 00               11150		.byte	0
                          11151	
                          11152	.LDW_5dbeee0:
00000380 47               11153		.byte	71
00000381 01               11154		.byte	1
                          11155	
00000382 00               11156		.byte	0
                          11157	
                          11158	.LDW_5dbef18:
00000383 47               11159		.byte	71
00000384 01               11160		.byte	1
                          11161	
00000385 00               11162		.byte	0
                          11163	
                          11164	.LDW_5dbf3b0:
00000386 46               11165		.byte	70
00000387 00000000         11166		.long	.LDW_4aea750
0000038b 01               11167		.byte	1
                          11168	
                          11169	.LDW_5df19c0:
0000038c 14               11170		.byte	20
0000038d 00000000         11171		.long	.LDW_5d9ca08
00000391 00               11172		.byte	0
                          11173	
                          11174	.LDW_5df14e0:
00000392 14               11175		.byte	20
00000393 00000000         11176		.long	.LDW_5d9c170
00000397 00               11177		.byte	0
                          11178	
00000398 00               11179		.byte	0
                          11180	
                          11181	.LDW_5dbf3e8:
00000399 46               11182		.byte	70
0000039a 00000000         11183		.long	.LDW_4aea750
0000039e 01               11184		.byte	1
                          11185	
                          11186	.LDW_5df1720:
0000039f 14               11187		.byte	20

                                   Fri Apr 10 08:32:15 2020           Page 201
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
000003a0 00000000         11188		.long	.LDW_5d9ca08
000003a4 00               11189		.byte	0
                          11190	
                          11191	.LDW_5df1510:
000003a5 14               11192		.byte	20
000003a6 00000000         11193		.long	.LDW_5dbf340
000003aa 00               11194		.byte	0
                          11195	
                          11196	.LDW_5df15d0:
000003ab 14               11197		.byte	20
000003ac 00000000         11198		.long	.LDW_4aeb9a0
000003b0 00               11199		.byte	0
                          11200	
000003b1 00               11201		.byte	0
                          11202	
                          11203	.LDW_5dbf420:
000003b2 47               11204		.byte	71
000003b3 01               11205		.byte	1
                          11206	
                          11207	.LDW_5df1660:
000003b4 14               11208		.byte	20
000003b5 00000000         11209		.long	.LDW_4ae9b80
000003b9 00               11210		.byte	0
                          11211	
                          11212	.LDW_5df1690:
000003ba 14               11213		.byte	20
000003bb 00000000         11214		.long	.LDW_4ae9b80
000003bf 00               11215		.byte	0
                          11216	
                          11217	.LDW_5df16c0:
000003c0 14               11218		.byte	20
000003c1 00000000         11219		.long	.LDW_4aeb9a0
000003c5 00               11220		.byte	0
                          11221	
000003c6 00               11222		.byte	0
                          11223	
                          11224	.LDW_5e3d378:
000003c7 46               11225		.byte	70
000003c8 00000000         11226		.long	.LDW_4ae9b80
000003cc 01               11227		.byte	1
                          11228	
                          11229	.LDW_5df1780:
000003cd 14               11230		.byte	20
000003ce 00000000         11231		.long	.LDW_4ae9b80
000003d2 00               11232		.byte	0
                          11233	
                          11234	.LDW_5e3d798:
000003d3 14               11235		.byte	20
000003d4 00000000         11236		.long	.LDW_5d9ce80
000003d8 00               11237		.byte	0
                          11238	
000003d9 00               11239		.byte	0
                          11240	
                          11241	.LDW_5e3cea8:
000003da 31               11242		.byte	49
000003db 00000000         11243		.long	.LDW_5df0740

                                   Fri Apr 10 08:32:15 2020           Page 202
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          11244	
                          11245	.LDW_5e1a2d8:
000003df 2b               11246		.byte	43
000003e0 00000000         11247		.long	.LDW_5df0740
                          11248	
                          11249	.LDW_5e3cd58:
000003e4 31               11250		.byte	49
000003e5 00000000         11251		.long	.LDW_5e1a2d8
                          11252	
                          11253	.LDW_5e3cff8:
000003e9 27               11254		.byte	39
000003ea 766f69642a00     11255		.strz	"void*"
000003f0 01               11256		.byte	1
000003f1 04               11257		.byte	4
                          11258	
                          11259	.LDW_5e1abc8:
000003f2 2c               11260		.byte	44
                          11261	
                          11262		.section	.debug_abbrev
00000049 2c               11263		.byte	44
0000004a 26               11264		.byte	38
0000004b 00               11265		.byte	0
0000004c 0000             11266		.byte	0,0
                          11267	
                          11268		.section	.debug_info
                          11269	.LDW_5e3d030:
000003f3 31               11270		.byte	49
000003f4 00000000         11271		.long	.LDW_5e1abc8
                          11272	
                          11273	.LDW_5e3d260:
000003f8 31               11274		.byte	49
000003f9 00000000         11275		.long	.LDW_5df1240
                          11276	
                          11277	.LDW_5e3d0a0:
000003fd 47               11278		.byte	71
000003fe 01               11279		.byte	1
                          11280	
000003ff 00               11281		.byte	0
                          11282	
                          11283	.LDW_5e3cee0:
00000400 31               11284		.byte	49
00000401 00000000         11285		.long	.LDW_5e3d0a0
                          11286	
                          11287	.LDW_5e3d068:
00000405 46               11288		.byte	70
00000406 00000000         11289		.long	.LDW_5e1a800
0000040a 01               11290		.byte	1
                          11291	
                          11292	.LDW_5e3d5e8:
0000040b 14               11293		.byte	20
0000040c 00000000         11294		.long	.LDW_5e1ac78
00000410 00               11295		.byte	0
                          11296	
                          11297	.LDW_5e3da08:
00000411 14               11298		.byte	20
00000412 00000000         11299		.long	.LDW_5e1a280

                                   Fri Apr 10 08:32:15 2020           Page 203
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
00000416 00               11300		.byte	0
                          11301	
                          11302	.LDW_5e3d918:
00000417 14               11303		.byte	20
00000418 00000000         11304		.long	.LDW_5e1a800
0000041c 00               11305		.byte	0
                          11306	
0000041d 00               11307		.byte	0
                          11308	
                          11309	.LDW_5e3d0d8:
0000041e 31               11310		.byte	49
0000041f 00000000         11311		.long	.LDW_5e3d068
                          11312	
                          11313	.LDW_5e3d3e8:
00000423 27               11314		.byte	39
00000424 696e7400         11315		.strz	"int"
00000428 05               11316		.byte	5
00000429 04               11317		.byte	4
                          11318	
                          11319	.LDW_5e3f108:
0000042a 3c               11320		.byte	60
0000042b 00               11321		.byte	0
0000042c 01               11322		.byte	1
0000042d 00000000         11323		.long	.LDW_5df0740
                          11324	
                          11325		.section	.debug_abbrev
0000004e 3c               11326		.byte	60
0000004f 01               11327		.byte	1
00000050 01               11328		.byte	1
00000051 090b             11329		.byte	9,11
00000053 0b0f             11330		.byte	11,15
00000055 4910             11331		.byte	73,16
00000057 0000             11332		.byte	0,0
                          11333	
                          11334		.section	.debug_info
00000431 34               11335		.byte	52
00000432 00000000         11336		.long	.LDW_5e3d3e8
00000436 04               11337		.byte	4
00000437 00               11338		.byte	0
00000438 00               11339		.byte	0
                          11340	
                          11341		.section	.debug_abbrev
00000059 34               11342		.byte	52
0000005a 21               11343		.byte	33
0000005b 00               11344		.byte	0
0000005c 4910             11345		.byte	73,16
0000005e 0b0f             11346		.byte	11,15
00000060 220d             11347		.byte	34,13
00000062 2f0d             11348		.byte	47,13
00000064 0000             11349		.byte	0,0
                          11350	
                          11351		.section	.debug_info
00000439 00               11352		.byte	0
                          11353	
                          11354	.LDW_5e3ce00:
0000043a 31               11355		.byte	49

                                   Fri Apr 10 08:32:15 2020           Page 204
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
0000043b 00000000         11356		.long	.LDW_5e3e760
                          11357	
                          11358	.LDW_5e3d228:
0000043f 31               11359		.byte	49
00000440 00000000         11360		.long	.LDW_5e1a800
                          11361	
                          11362	.LDW_5e3f268:
00000444 47               11363		.byte	71
00000445 01               11364		.byte	1
                          11365	
00000446 00               11366		.byte	0
                          11367	
                          11368	.LDW_5e3f230:
00000447 31               11369		.byte	49
00000448 00000000         11370		.long	.LDW_5e3f268
                          11371	
                          11372	.LDW_5e3f3f0:
0000044c 46               11373		.byte	70
0000044d 00000000         11374		.long	.LDW_5d9cf30
00000451 01               11375		.byte	1
                          11376	
                          11377	.LDW_5e3d6a8:
00000452 14               11378		.byte	20
00000453 00000000         11379		.long	.LDW_5e3cff8
00000457 00               11380		.byte	0
                          11381	
00000458 00               11382		.byte	0
                          11383	
                          11384	.LDW_5e3f428:
00000459 31               11385		.byte	49
0000045a 00000000         11386		.long	.LDW_5e3f3f0
                          11387	
                          11388	.LDW_5e3f738:
0000045e 46               11389		.byte	70
0000045f 00000000         11390		.long	.LDW_5d9cf30
00000463 01               11391		.byte	1
                          11392	
                          11393	.LDW_5e3d8b8:
00000464 14               11394		.byte	20
00000465 00000000         11395		.long	.LDW_5e3cff8
00000469 00               11396		.byte	0
                          11397	
0000046a 00               11398		.byte	0
                          11399	
                          11400	.LDW_5e3f460:
0000046b 31               11401		.byte	49
0000046c 00000000         11402		.long	.LDW_5e3f738
                          11403	
                          11404	.LDW_5e3f818:
00000470 46               11405		.byte	70
00000471 00000000         11406		.long	.LDW_5d9cf30
00000475 01               11407		.byte	1
                          11408	
                          11409	.LDW_5e3d8e8:
00000476 14               11410		.byte	20
00000477 00000000         11411		.long	.LDW_5d2aa98

                                   Fri Apr 10 08:32:15 2020           Page 205
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
0000047b 00               11412		.byte	0
                          11413	
                          11414	.LDW_5e3d528:
0000047c 14               11415		.byte	20
0000047d 00000000         11416		.long	.LDW_5d2a990
00000481 00               11417		.byte	0
                          11418	
                          11419	.LDW_5e3d588:
00000482 14               11420		.byte	20
00000483 00000000         11421		.long	.LDW_5d2a468
00000487 00               11422		.byte	0
                          11423	
00000488 00               11424		.byte	0
                          11425	
                          11426	.LDW_5e3f498:
00000489 31               11427		.byte	49
0000048a 00000000         11428		.long	.LDW_5e3f818
                          11429	
                          11430	.LDW_5e3f508:
0000048e 46               11431		.byte	70
0000048f 00000000         11432		.long	.LDW_5d9cf30
00000493 01               11433		.byte	1
                          11434	
                          11435	.LDW_5e3d708:
00000494 14               11436		.byte	20
00000495 00000000         11437		.long	.LDW_5d2aa98
00000499 00               11438		.byte	0
                          11439	
                          11440	.LDW_5e3d9d8:
0000049a 14               11441		.byte	20
0000049b 00000000         11442		.long	.LDW_5d2a990
0000049f 00               11443		.byte	0
                          11444	
                          11445	.LDW_5e3d9a8:
000004a0 14               11446		.byte	20
000004a1 00000000         11447		.long	.LDW_5d2a468
000004a5 00               11448		.byte	0
                          11449	
000004a6 00               11450		.byte	0
                          11451	
                          11452	.LDW_5e3f8c0:
000004a7 31               11453		.byte	49
000004a8 00000000         11454		.long	.LDW_5e3f508
                          11455	
                          11456	.LDW_5e3f930:
000004ac 46               11457		.byte	70
000004ad 00000000         11458		.long	.LDW_5d9cf30
000004b1 01               11459		.byte	1
                          11460	
                          11461	.LDW_5e3d738:
000004b2 14               11462		.byte	20
000004b3 00000000         11463		.long	.LDW_5d2a990
000004b7 00               11464		.byte	0
                          11465	
                          11466	.LDW_5e3da38:
000004b8 14               11467		.byte	20

                                   Fri Apr 10 08:32:15 2020           Page 206
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
000004b9 00000000         11468		.long	.LDW_5d2a468
000004bd 00               11469		.byte	0
                          11470	
000004be 00               11471		.byte	0
                          11472	
                          11473	.LDW_5e3f8f8:
000004bf 31               11474		.byte	49
000004c0 00000000         11475		.long	.LDW_5e3f930
                          11476	
                          11477	.LDW_5d2b500:
000004c4 31               11478		.byte	49
000004c5 00000000         11479		.long	.LDW_5d2e050
                          11480	
                          11481	.LDW_5d2b0d8:
000004c9 46               11482		.byte	70
000004ca 00000000         11483		.long	.LDW_5df0798
000004ce 01               11484		.byte	1
                          11485	
                          11486	.LDW_5e420e0:
000004cf 14               11487		.byte	20
000004d0 00000000         11488		.long	.LDW_5d2b500
000004d4 00               11489		.byte	0
                          11490	
000004d5 00               11491		.byte	0
                          11492	
                          11493	.LDW_5d2b6c0:
000004d6 31               11494		.byte	49
000004d7 00000000         11495		.long	.LDW_5d2b0d8
                          11496	
                          11497	.LDW_5d2b3e8:
000004db 31               11498		.byte	49
000004dc 00000000         11499		.long	.LDW_5d2e158
                          11500	
                          11501	.LDW_5d2b618:
000004e0 46               11502		.byte	70
000004e1 00000000         11503		.long	.LDW_5df0798
000004e5 01               11504		.byte	1
                          11505	
                          11506	.LDW_5e42380:
000004e6 14               11507		.byte	20
000004e7 00000000         11508		.long	.LDW_5d2b3e8
000004eb 00               11509		.byte	0
                          11510	
000004ec 00               11511		.byte	0
                          11512	
                          11513	.LDW_5d2b0a0:
000004ed 31               11514		.byte	49
000004ee 00000000         11515		.long	.LDW_5d2b618
                          11516	
                          11517	.LDW_5d2b298:
000004f2 31               11518		.byte	49
000004f3 00000000         11519		.long	.LDW_5d2e0a8
                          11520	
                          11521	.LDW_5d2d108:
000004f7 3c               11522		.byte	60
000004f8 00               11523		.byte	0

                                   Fri Apr 10 08:32:15 2020           Page 207
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
000004f9 9020             11524		.byte	144,32
000004fb 00000000         11525		.long	.LDW_5d29e20
                          11526	
000004ff 34               11527		.byte	52
00000500 00000000         11528		.long	.LDW_5e3d3e8
00000504 04               11529		.byte	4
00000505 00               11530		.byte	0
00000506 8f20             11531		.byte	143,32
                          11532	
00000508 00               11533		.byte	0
                          11534	
                          11535	.LDW_5d2d218:
00000509 3c               11536		.byte	60
0000050a 00               11537		.byte	0
0000050b 8002             11538		.byte	128,2
0000050d 00000000         11539		.long	.LDW_5d29e20
                          11540	
00000511 34               11541		.byte	52
00000512 00000000         11542		.long	.LDW_5e3d3e8
00000516 04               11543		.byte	4
00000517 00               11544		.byte	0
00000518 ff01             11545		.byte	255,1
                          11546	
0000051a 00               11547		.byte	0
                          11548	
                          11549	.LDW_5d2d5d0:
0000051b 3c               11550		.byte	60
0000051c 00               11551		.byte	0
0000051d 08               11552		.byte	8
0000051e 00000000         11553		.long	.LDW_5d29e20
                          11554	
00000522 34               11555		.byte	52
00000523 00000000         11556		.long	.LDW_5e3d3e8
00000527 04               11557		.byte	4
00000528 00               11558		.byte	0
00000529 07               11559		.byte	7
                          11560	
0000052a 00               11561		.byte	0
                          11562	
                          11563	.LDW_5e45f38:
0000052b 2b               11564		.byte	43
0000052c 00000000         11565		.long	.LDW_5d2dc88
                          11566	
                          11567	.LDW_5d2cf70:
00000530 3c               11568		.byte	60
00000531 00               11569		.byte	0
00000532 9001             11570		.byte	144,1
00000534 00000000         11571		.long	.LDW_5e45f38
                          11572	
00000538 34               11573		.byte	52
00000539 00000000         11574		.long	.LDW_5e3d3e8
0000053d 04               11575		.byte	4
0000053e 00               11576		.byte	0
0000053f 0b               11577		.byte	11
                          11578	
00000540 00               11579		.byte	0

                                   Fri Apr 10 08:32:15 2020           Page 208
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          11580	
                          11581	.LDW_5e45ac0:
00000541 2b               11582		.byte	43
00000542 00000000         11583		.long	.LDW_5d2a360
                          11584	
                          11585	.LDW_5d2cee8:
00000546 3c               11586		.byte	60
00000547 00               11587		.byte	0
00000548 30               11588		.byte	48
00000549 00000000         11589		.long	.LDW_5e45ac0
                          11590	
0000054d 34               11591		.byte	52
0000054e 00000000         11592		.long	.LDW_5e3d3e8
00000552 04               11593		.byte	4
00000553 00               11594		.byte	0
00000554 01               11595		.byte	1
                          11596	
00000555 00               11597		.byte	0
                          11598	
                          11599	.LDW_5d2c888:
00000556 3c               11600		.byte	60
00000557 00               11601		.byte	0
00000558 04               11602		.byte	4
00000559 00000000         11603		.long	.LDW_5e40628
                          11604	
0000055d 34               11605		.byte	52
0000055e 00000000         11606		.long	.LDW_5e3d3e8
00000562 04               11607		.byte	4
00000563 00               11608		.byte	0
00000564 00               11609		.byte	0
                          11610	
00000565 00               11611		.byte	0
                          11612	
                          11613	.LDW_5d2d6e0:
00000566 3c               11614		.byte	60
00000567 00               11615		.byte	0
00000568 02               11616		.byte	2
00000569 00000000         11617		.long	.LDW_5d29e20
                          11618	
0000056d 34               11619		.byte	52
0000056e 00000000         11620		.long	.LDW_5e3d3e8
00000572 04               11621		.byte	4
00000573 00               11622		.byte	0
00000574 01               11623		.byte	1
                          11624	
00000575 00               11625		.byte	0
                          11626	
                          11627	.LDW_5d2cff8:
00000576 3c               11628		.byte	60
00000577 00               11629		.byte	0
00000578 9820             11630		.byte	152,32
0000057a 00000000         11631		.long	.LDW_5d2e418
                          11632	
0000057e 34               11633		.byte	52
0000057f 00000000         11634		.long	.LDW_5e3d3e8
00000583 04               11635		.byte	4

                                   Fri Apr 10 08:32:15 2020           Page 209
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
00000584 00               11636		.byte	0
00000585 00               11637		.byte	0
                          11638	
00000586 00               11639		.byte	0
                          11640	
                          11641	.LDW_5d2d190:
00000587 3c               11642		.byte	60
00000588 00               11643		.byte	0
00000589 28               11644		.byte	40
0000058a 00000000         11645		.long	.LDW_4ae98f0
                          11646	
0000058e 34               11647		.byte	52
0000058f 00000000         11648		.long	.LDW_5e3d3e8
00000593 04               11649		.byte	4
00000594 00               11650		.byte	0
00000595 00               11651		.byte	0
                          11652	
00000596 00               11653		.byte	0
                          11654	
                          11655	.LDW_5d2d2a0:
00000597 3c               11656		.byte	60
00000598 00               11657		.byte	0
00000599 28               11658		.byte	40
0000059a 00000000         11659		.long	.LDW_4ae98f0
                          11660	
0000059e 34               11661		.byte	52
0000059f 00000000         11662		.long	.LDW_5e3d3e8
000005a3 04               11663		.byte	4
000005a4 00               11664		.byte	0
000005a5 00               11665		.byte	0
                          11666	
000005a6 34               11667		.byte	52
000005a7 00000000         11668		.long	.LDW_5e3d3e8
000005ab 04               11669		.byte	4
000005ac 00               11670		.byte	0
000005ad 00               11671		.byte	0
                          11672	
000005ae 00               11673		.byte	0
                          11674	
                          11675	.LDW_5d2c800:
000005af 3c               11676		.byte	60
000005b0 00               11677		.byte	0
000005b1 50               11678		.byte	80
000005b2 00000000         11679		.long	.LDW_5c3d280
                          11680	
000005b6 34               11681		.byte	52
000005b7 00000000         11682		.long	.LDW_5e3d3e8
000005bb 04               11683		.byte	4
000005bc 00               11684		.byte	0
000005bd 04               11685		.byte	4
                          11686	
000005be 00               11687		.byte	0
                          11688	
                          11689	.LDW_5e46568:
000005bf 2b               11690		.byte	43
000005c0 00000000         11691		.long	.LDW_5c3d388

                                   Fri Apr 10 08:32:15 2020           Page 210
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          11692	
                          11693	.LDW_5d2cc40:
000005c4 3c               11694		.byte	60
000005c5 00               11695		.byte	0
000005c6 04               11696		.byte	4
000005c7 00000000         11697		.long	.LDW_5e46568
                          11698	
000005cb 34               11699		.byte	52
000005cc 00000000         11700		.long	.LDW_5e3d3e8
000005d0 04               11701		.byte	4
000005d1 00               11702		.byte	0
000005d2 03               11703		.byte	3
                          11704	
000005d3 00               11705		.byte	0
                          11706	
                          11707	.LDW_5e47550:
000005d4 46               11708		.byte	70
000005d5 00000000         11709		.long	.LDW_5d9cf30
000005d9 01               11710		.byte	1
                          11711	
                          11712	.LDW_5e420b0:
000005da 14               11713		.byte	20
000005db 00000000         11714		.long	.LDW_5d2aa98
000005df 00               11715		.byte	0
                          11716	
                          11717	.LDW_5e42830:
000005e0 14               11718		.byte	20
000005e1 00000000         11719		.long	.LDW_5d2a990
000005e5 00               11720		.byte	0
                          11721	
                          11722	.LDW_5e42980:
000005e6 14               11723		.byte	20
000005e7 00000000         11724		.long	.LDW_5d2a468
000005eb 00               11725		.byte	0
                          11726	
000005ec 00               11727		.byte	0
                          11728	
                          11729	.LDW_5e47400:
000005ed 46               11730		.byte	70
000005ee 00000000         11731		.long	.LDW_5d9cf30
000005f2 01               11732		.byte	1
                          11733	
                          11734	.LDW_5e42890:
000005f3 14               11735		.byte	20
000005f4 00000000         11736		.long	.LDW_5d2a990
000005f8 00               11737		.byte	0
                          11738	
                          11739	.LDW_5e42620:
000005f9 14               11740		.byte	20
000005fa 00000000         11741		.long	.LDW_5d2a468
000005fe 00               11742		.byte	0
                          11743	
000005ff 00               11744		.byte	0
                          11745	
                          11746	.LDW_5e47d20:
00000600 27               11747		.byte	39

                                   Fri Apr 10 08:32:15 2020           Page 211
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
00000601 756e7369676e6564 11748		.strz	"unsigned int"
00000609 20696e7400      
0000060e 07               11749		.byte	7
0000060f 04               11750		.byte	4
                          11751	
                          11752	.LDW_5e477a8:
00000610 46               11753		.byte	70
00000611 00000000         11754		.long	.LDW_5e3cff8
00000615 01               11755		.byte	1
                          11756	
                          11757	.LDW_5e42ce0:
00000616 14               11758		.byte	20
00000617 00000000         11759		.long	.LDW_5e3cff8
0000061b 00               11760		.byte	0
                          11761	
                          11762	.LDW_5e42d40:
0000061c 14               11763		.byte	20
0000061d 00000000         11764		.long	.LDW_5e3d030
00000621 00               11765		.byte	0
                          11766	
                          11767	.LDW_5e42e00:
00000622 14               11768		.byte	20
00000623 00000000         11769		.long	.LDW_5e47d20
00000627 00               11770		.byte	0
                          11771	
00000628 00               11772		.byte	0
                          11773	
                          11774	.LDW_5e4a8b0:
00000629 46               11775		.byte	70
0000062a 00000000         11776		.long	.LDW_5d29e20
0000062e 01               11777		.byte	1
                          11778	
0000062f 00               11779		.byte	0
                          11780	
                          11781	.LDW_5e4a920:
00000630 47               11782		.byte	71
00000631 01               11783		.byte	1
                          11784	
                          11785	.LDW_5e4b8a0:
00000632 14               11786		.byte	20
00000633 00000000         11787		.long	.LDW_5d29e20
00000637 00               11788		.byte	0
                          11789	
00000638 00               11790		.byte	0
                          11791	
                          11792	.LDW_5e4aa70:
00000639 46               11793		.byte	70
0000063a 00000000         11794		.long	.LDW_5d9cb10
0000063e 01               11795		.byte	1
                          11796	
                          11797	.LDW_5e4b870:
0000063f 14               11798		.byte	20
00000640 00000000         11799		.long	.LDW_5d9ca08
00000644 00               11800		.byte	0
                          11801	
00000645 00               11802		.byte	0
                          11803	

                                   Fri Apr 10 08:32:15 2020           Page 212
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          11804	.LDW_5e4aaa8:
00000646 46               11805		.byte	70
00000647 00000000         11806		.long	.LDW_5df09a8
0000064b 01               11807		.byte	1
                          11808	
0000064c 00               11809		.byte	0
                          11810	
                          11811	.LDW_5e4a648:
0000064d 46               11812		.byte	70
0000064e 00000000         11813		.long	.LDW_5df09a8
00000652 01               11814		.byte	1
                          11815	
00000653 00               11816		.byte	0
                          11817	
                          11818	.LDW_5e4a098:
00000654 47               11819		.byte	71
00000655 01               11820		.byte	1
                          11821	
                          11822	.LDW_5e4b690:
00000656 14               11823		.byte	20
00000657 00000000         11824		.long	.LDW_5d29e20
0000065b 00               11825		.byte	0
                          11826	
0000065c 00               11827		.byte	0
                          11828	
                          11829	.LDW_5d29e20:
0000065d 2a               11830		.byte	42
0000065e 7675696e743800   11831		.strz	"vuint8"
00000665 9b04             11832		.byte	155,4
00000667 18               11833		.byte	24
00000668 07               11834		.byte	7
00000669 00000000         11835		.long	.LDW_4aac928
                          11836	
                          11837		.section	.debug_abbrev
00000066 2a               11838		.byte	42
00000067 16               11839		.byte	22
00000068 00               11840		.byte	0
00000069 0308             11841		.byte	3,8
0000006b 3b0f             11842		.byte	59,15
0000006d 390f             11843		.byte	57,15
0000006f 3a0f             11844		.byte	58,15
00000071 4910             11845		.byte	73,16
00000073 0000             11846		.byte	0,0
                          11847	
                          11848		.section	.debug_info
                          11849	.LDW_5d9ccc8:
0000066d 2a               11850		.byte	42
0000066e 7675696e74313600 11851		.strz	"vuint16"
00000676 a604             11852		.byte	166,4
00000678 18               11853		.byte	24
00000679 07               11854		.byte	7
0000067a 00000000         11855		.long	.LDW_5dbf308
                          11856	
                          11857	.LDW_5d9cb10:
0000067e 2a               11858		.byte	42
0000067f 7673696e74313600 11859		.strz	"vsint16"

                                   Fri Apr 10 08:32:15 2020           Page 213
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
00000687 ab04             11860		.byte	171,4
00000689 18               11861		.byte	24
0000068a 07               11862		.byte	7
0000068b 00000000         11863		.long	.LDW_4aac570
                          11864	
                          11865	.LDW_4ae9b80:
0000068f 2a               11866		.byte	42
00000690 7675696e74333200 11867		.strz	"vuint32"
00000698 b204             11868		.byte	178,4
0000069a 18               11869		.byte	24
0000069b 07               11870		.byte	7
0000069c 00000000         11871		.long	.LDW_4aac7d8
                          11872	
                          11873	.LDW_5df0740:
000006a0 2a               11874		.byte	42
000006a1 5365634d5f427974 11875		.strz	"SecM_ByteType"
000006a9 655479706500    
000006af 9802             11876		.byte	152,2
000006b1 11               11877		.byte	17
000006b2 0c               11878		.byte	12
000006b3 00000000         11879		.long	.LDW_5d29e20
                          11880	
                          11881	.LDW_5e1a228:
000006b7 2a               11882		.byte	42
000006b8 5365634d5f53686f 11883		.strz	"SecM_ShortType"
000006c0 72745479706500  
000006c7 9a02             11884		.byte	154,2
000006c9 11               11885		.byte	17
000006ca 0c               11886		.byte	12
000006cb 00000000         11887		.long	.LDW_5d9ccc8
                          11888	
                          11889	.LDW_5e1a280:
000006cf 2a               11890		.byte	42
000006d0 5365634d5f52616d 11891		.strz	"SecM_RamDataType"
000006d8 4461746154797065
000006e0 00              
000006e1 9d02             11892		.byte	157,2
000006e3 3d               11893		.byte	61
000006e4 0c               11894		.byte	12
000006e5 00000000         11895		.long	.LDW_5e3cea8
                          11896	
                          11897	.LDW_5e1a960:
000006e9 2a               11898		.byte	42
000006ea 5365634d5f436f6e 11899		.strz	"SecM_ConstRamDataType"
000006f2 737452616d446174
000006fa 615479706500    
00000700 9f02             11900		.byte	159,2
00000702 3d               11901		.byte	61
00000703 0c               11902		.byte	12
00000704 00000000         11903		.long	.LDW_5e3cd58
                          11904	
                          11905	.LDW_5e1ab18:
00000708 2a               11906		.byte	42
00000709 5365634d5f566f69 11907		.strz	"SecM_VoidPtrType"
00000711 6450747254797065
00000719 00              
0000071a a302             11908		.byte	163,2
0000071c 3d               11909		.byte	61
0000071d 0c               11910		.byte	12
0000071e 00000000         11911		.long	.LDW_5e3cff8
                          11912	
                          11913	.LDW_5df0c68:
00000722 2a               11914		.byte	42
00000723 5365634d5f537461 11915		.strz	"SecM_StatusType"
0000072b 7475735479706500

                                   Fri Apr 10 08:32:15 2020           Page 214
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
00000733 ac02             11916		.byte	172,2
00000735 17               11917		.byte	23
00000736 0c               11918		.byte	12
00000737 00000000         11919		.long	.LDW_5df0740
                          11920	
                          11921	.LDW_5e1ab70:
0000073b 2a               11922		.byte	42
0000073c 5365634d5f576f72 11923		.strz	"SecM_WordType"
00000744 645479706500    
0000074a ae02             11924		.byte	174,2
0000074c 11               11925		.byte	17
0000074d 0c               11926		.byte	12
0000074e 00000000         11927		.long	.LDW_4ae9b80
                          11928	
                          11929	.LDW_5e1aac0:
00000752 2a               11930		.byte	42
00000753 5365634d5f4c656e 11931		.strz	"SecM_LengthType"
0000075b 6774685479706500
00000763 b002             11932		.byte	176,2
00000765 18               11933		.byte	24
00000766 0c               11934		.byte	12
00000767 00000000         11935		.long	.LDW_5e1a228
                          11936	
                          11937	.LDW_5e1ac78:
0000076b 2a               11938		.byte	42
0000076c 5365634d5f416464 11939		.strz	"SecM_AddrType"
00000774 725479706500    
0000077a b302             11940		.byte	179,2
0000077c 17               11941		.byte	23
0000077d 0c               11942		.byte	12
0000077e 00000000         11943		.long	.LDW_5e1ab70
                          11944	
                          11945	.LDW_5e1a800:
00000782 2a               11946		.byte	42
00000783 5365634d5f53697a 11947		.strz	"SecM_SizeType"
0000078b 655479706500    
00000791 b502             11948		.byte	181,2
00000793 17               11949		.byte	23
00000794 0c               11950		.byte	12
00000795 00000000         11951		.long	.LDW_5e1ab70
                          11952	
                          11953	.LDW_5df1190:
00000799 43               11954		.byte	67
0000079a b902             11955		.byte	185,2
0000079c 01               11956		.byte	1
0000079d 0c               11957		.byte	12
0000079e 0c               11958		.byte	12
0000079f 01               11959		.byte	1
                          11960	
                          11961		.section	.debug_abbrev
00000075 43               11962		.byte	67
00000076 13               11963		.byte	19
00000077 01               11964		.byte	1
00000078 3b0f             11965		.byte	59,15
0000007a 390f             11966		.byte	57,15
0000007c 3a0f             11967		.byte	58,15
0000007e 0b0f             11968		.byte	11,15
00000080 320b             11969		.byte	50,11
00000082 0000             11970		.byte	0,0
                          11971	

                                   Fri Apr 10 08:32:15 2020           Page 215
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          11972		.section	.debug_info
                          11973	.LDW_5b63080:
000007a0 25               11974		.byte	37
000007a1 7472616e73666572 11975		.strz	"transferredAddress"
000007a9 7265644164647265
000007b1 737300          
000007b4 ba02             11976		.byte	186,2
000007b6 12               11977		.byte	18
000007b7 0c               11978		.byte	12
000007b8 00000000         11979		.long	.LDW_5e1ac78
000007bc 0223             11980		.byte	2,35
000007be 00               11981		.byte	0
000007bf 01               11982		.byte	1
                          11983	
                          11984		.section	.debug_abbrev
00000084 25               11985		.byte	37
00000085 0d               11986		.byte	13
00000086 00               11987		.byte	0
00000087 0308             11988		.byte	3,8
00000089 3b0f             11989		.byte	59,15
0000008b 390f             11990		.byte	57,15
0000008d 3a0f             11991		.byte	58,15
0000008f 4910             11992		.byte	73,16
00000091 380a             11993		.byte	56,10
00000093 320b             11994		.byte	50,11
00000095 0000             11995		.byte	0,0
                          11996	
                          11997		.section	.debug_info
                          11998	.LDW_5b63428:
000007c0 25               11999		.byte	37
000007c1 7461726765744164 12000		.strz	"targetAddress"
000007c9 647265737300    
000007cf bb02             12001		.byte	187,2
000007d1 12               12002		.byte	18
000007d2 0c               12003		.byte	12
000007d3 00000000         12004		.long	.LDW_5e1ac78
000007d7 0223             12005		.byte	2,35
000007d9 04               12006		.byte	4
000007da 01               12007		.byte	1
                          12008	
                          12009	.LDW_5b63158:
000007db 25               12010		.byte	37
000007dc 6c656e67746800   12011		.strz	"length"
000007e3 bc02             12012		.byte	188,2
000007e5 12               12013		.byte	18
000007e6 0c               12014		.byte	12
000007e7 00000000         12015		.long	.LDW_5e1a800
000007eb 0223             12016		.byte	2,35
000007ed 08               12017		.byte	8
000007ee 01               12018		.byte	1
                          12019	
000007ef 00               12020		.byte	0
                          12021	
                          12022	.LDW_5df1240:
000007f0 2a               12023		.byte	42
000007f1 464c5f5365676d65 12024		.strz	"FL_SegmentInfoType"
000007f9 6e74496e666f5479
00000801 706500          
00000804 bd02             12025		.byte	189,2
00000806 03               12026		.byte	3
00000807 0c               12027		.byte	12

                                   Fri Apr 10 08:32:15 2020           Page 216
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
00000808 00000000         12028		.long	.LDW_5df1190
                          12029	
                          12030	.LDW_5e1a9b8:
0000080c 43               12031		.byte	67
0000080d c102             12032		.byte	193,2
0000080f 01               12033		.byte	1
00000810 0c               12034		.byte	12
00000811 08               12035		.byte	8
00000812 01               12036		.byte	1
                          12037	
                          12038	.LDW_5b63668:
00000813 25               12039		.byte	37
00000814 6e724f665365676d 12040		.strz	"nrOfSegments"
0000081c 656e747300      
00000821 c302             12041		.byte	195,2
00000823 19               12042		.byte	25
00000824 0c               12043		.byte	12
00000825 00000000         12044		.long	.LDW_5df0740
00000829 0223             12045		.byte	2,35
0000082b 00               12046		.byte	0
0000082c 01               12047		.byte	1
                          12048	
                          12049	.LDW_5b636f8:
0000082d 25               12050		.byte	37
0000082e 7365676d656e7449 12051		.strz	"segmentInfo"
00000836 6e666f00        
0000083a c602             12052		.byte	198,2
0000083c 37               12053		.byte	55
0000083d 0c               12054		.byte	12
0000083e 00000000         12055		.long	.LDW_5e3d260
00000842 0223             12056		.byte	2,35
00000844 04               12057		.byte	4
00000845 01               12058		.byte	1
                          12059	
00000846 00               12060		.byte	0
                          12061	
                          12062	.LDW_5e1a858:
00000847 2a               12063		.byte	42
00000848 464c5f5365676d65 12064		.strz	"FL_SegmentListType"
00000850 6e744c6973745479
00000858 706500          
0000085b c702             12065		.byte	199,2
0000085d 03               12066		.byte	3
0000085e 0c               12067		.byte	12
0000085f 00000000         12068		.long	.LDW_5e1a9b8
                          12069	
                          12070	.LDW_5e1a8b0:
00000863 2a               12071		.byte	42
00000864 464c5f5744547269 12072		.strz	"FL_WDTriggerFctType"
0000086c 6767657246637454
00000874 79706500        
00000878 ca02             12073		.byte	202,2
0000087a 11               12074		.byte	17
0000087b 0c               12075		.byte	12
0000087c 00000000         12076		.long	.LDW_5e3cee0
                          12077	
                          12078	.LDW_5e1aa68:
00000880 2a               12079		.byte	42
00000881 464c5f526561644d 12080		.strz	"FL_ReadMemoryFctType"
00000889 656d6f7279466374
00000891 5479706500      
00000896 cc02             12081		.byte	204,2
00000898 1a               12082		.byte	26
00000899 0c               12083		.byte	12

                                   Fri Apr 10 08:32:15 2020           Page 217
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
0000089a 00000000         12084		.long	.LDW_5e3d0d8
                          12085	
                          12086	.LDW_5e3e238:
0000089e 43               12087		.byte	67
0000089f 9103             12088		.byte	145,3
000008a1 01               12089		.byte	1
000008a2 0c               12090		.byte	12
000008a3 08               12091		.byte	8
000008a4 01               12092		.byte	1
                          12093	
                          12094	.LDW_5b63230:
000008a5 25               12095		.byte	37
000008a6 64696765737400   12096		.strz	"digest"
000008ad 9203             12097		.byte	146,3
000008af 13               12098		.byte	19
000008b0 0c               12099		.byte	12
000008b1 00000000         12100		.long	.LDW_5e3f108
000008b5 0223             12101		.byte	2,35
000008b7 00               12102		.byte	0
000008b8 01               12103		.byte	1
                          12104	
                          12105	.LDW_5b63398:
000008b9 25               12106		.byte	37
000008ba 64756d6d7900     12107		.strz	"dummy"
000008c0 9303             12108		.byte	147,3
000008c2 13               12109		.byte	19
000008c3 0c               12110		.byte	12
000008c4 00000000         12111		.long	.LDW_5e1ab70
000008c8 0223             12112		.byte	2,35
000008ca 04               12113		.byte	4
000008cb 01               12114		.byte	1
                          12115	
000008cc 00               12116		.byte	0
                          12117	
                          12118	.LDW_5e3e760:
000008cd 2a               12119		.byte	42
000008ce 5365634d5f426173 12120		.strz	"SecM_BasicWkspType"
000008d6 6963576b73705479
000008de 706500          
000008e1 9403             12121		.byte	148,3
000008e3 03               12122		.byte	3
000008e4 0c               12123		.byte	12
000008e5 00000000         12124		.long	.LDW_5e3e238
                          12125	
                          12126	.LDW_5e3e290:
000008e9 2a               12127		.byte	42
000008ea 5365634d5f576f72 12128		.strz	"SecM_WorkspacePtrType"
000008f2 6b73706163655074
000008fa 725479706500    
00000900 9703             12129		.byte	151,3
00000902 3c               12130		.byte	60
00000903 0c               12131		.byte	12
00000904 00000000         12132		.long	.LDW_5e3ce00
                          12133	
                          12134	.LDW_5e3e4f8:
00000908 43               12135		.byte	67
00000909 9b03             12136		.byte	155,3
0000090b 01               12137		.byte	1
0000090c 0c               12138		.byte	12
0000090d 08               12139		.byte	8

                                   Fri Apr 10 08:32:15 2020           Page 218
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
0000090e 01               12140		.byte	1
                          12141	
                          12142	.LDW_5b63278:
0000090f 25               12143		.byte	37
00000910 6461746100       12144		.strz	"data"
00000915 9d03             12145		.byte	157,3
00000917 1c               12146		.byte	28
00000918 0c               12147		.byte	12
00000919 00000000         12148		.long	.LDW_5e3e290
0000091d 0223             12149		.byte	2,35
0000091f 00               12150		.byte	0
00000920 01               12151		.byte	1
                          12152	
                          12153	.LDW_5b633e0:
00000921 25               12154		.byte	37
00000922 73697a6500       12155		.strz	"size"
00000927 9f03             12156		.byte	159,3
00000929 1c               12157		.byte	28
0000092a 0c               12158		.byte	12
0000092b 00000000         12159		.long	.LDW_5e1aac0
0000092f 0223             12160		.byte	2,35
00000931 04               12161		.byte	4
00000932 01               12162		.byte	1
                          12163	
00000933 00               12164		.byte	0
                          12165	
                          12166	.LDW_5e3ea78:
00000934 2a               12167		.byte	42
00000935 5365634d5f576f72 12168		.strz	"SecM_WorkspaceType"
0000093d 6b73706163655479
00000945 706500          
00000948 a003             12169		.byte	160,3
0000094a 03               12170		.byte	3
0000094b 0c               12171		.byte	12
0000094c 00000000         12172		.long	.LDW_5e3e4f8
                          12173	
                          12174	.LDW_5e3eb28:
00000950 2a               12175		.byte	42
00000951 5365634d5f437263 12176		.strz	"SecM_Crc32Type"
00000959 33325479706500  
00000960 9201             12177		.byte	146,1
00000962 19               12178		.byte	25
00000963 0f               12179		.byte	15
00000964 00000000         12180		.long	.LDW_5e1ab70
                          12181	
                          12182	.LDW_5e3e2e8:
00000968 2a               12183		.byte	42
00000969 5365634d5f435243 12184		.strz	"SecM_CRCType"
00000971 5479706500      
00000976 9801             12185		.byte	152,1
00000978 19               12186		.byte	25
00000979 0f               12187		.byte	15
0000097a 00000000         12188		.long	.LDW_5e3eb28
                          12189	
                          12190	.LDW_5e3eef0:
0000097e 2a               12191		.byte	42
0000097f 5365634d5f566572 12192		.strz	"SecM_VerifyDataType"
00000987 6966794461746154
0000098f 79706500        
00000993 d803             12193		.byte	216,3
00000995 1f               12194		.byte	31
00000996 12               12195		.byte	18

                                   Fri Apr 10 08:32:15 2020           Page 219
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
00000997 00000000         12196		.long	.LDW_5e1a960
                          12197	
                          12198	.LDW_5e3ee40:
0000099b 2a               12199		.byte	42
0000099c 5365634d5f526573 12200		.strz	"SecM_ResultBufferType"
000009a4 756c744275666665
000009ac 725479706500    
000009b2 dc03             12201		.byte	220,3
000009b4 1f               12202		.byte	31
000009b5 12               12203		.byte	18
000009b6 00000000         12204		.long	.LDW_5e1a800
                          12205	
                          12206	.LDW_5e3ef48:
000009ba 2a               12207		.byte	42
000009bb 5365634d5f566572 12208		.strz	"SecM_VerifyKeyType"
000009c3 6966794b65795479
000009cb 706500          
000009ce df03             12209		.byte	223,3
000009d0 1f               12210		.byte	31
000009d1 12               12211		.byte	18
000009d2 00000000         12212		.long	.LDW_5e1ab18
                          12213	
                          12214	.LDW_5e3eff8:
000009d6 43               12215		.byte	67
000009d7 ec03             12216		.byte	236,3
000009d9 01               12217		.byte	1
000009da 12               12218		.byte	18
000009db 2c               12219		.byte	44
000009dc 01               12220		.byte	1
                          12221	
                          12222	.LDW_5b63038:
000009dd 25               12223		.byte	37
000009de 7365676d656e744c 12224		.strz	"segmentList"
000009e6 69737400        
000009ea ef03             12225		.byte	239,3
000009ec 19               12226		.byte	25
000009ed 12               12227		.byte	18
000009ee 00000000         12228		.long	.LDW_5e1a858
000009f2 0223             12229		.byte	2,35
000009f4 00               12230		.byte	0
000009f5 01               12231		.byte	1
                          12232	
                          12233	.LDW_5b632c0:
000009f6 25               12234		.byte	37
000009f7 626c6f636b537461 12235		.strz	"blockStartAddress"
000009ff 7274416464726573
00000a07 7300            
00000a09 f103             12236		.byte	241,3
00000a0b 19               12237		.byte	25
00000a0c 12               12238		.byte	18
00000a0d 00000000         12239		.long	.LDW_5e1ac78
00000a11 0223             12240		.byte	2,35
00000a13 08               12241		.byte	8
00000a14 01               12242		.byte	1
                          12243	
                          12244	.LDW_5b63590:
00000a15 25               12245		.byte	37
00000a16 626c6f636b4c656e 12246		.strz	"blockLength"
00000a1e 67746800        
00000a22 f303             12247		.byte	243,3
00000a24 19               12248		.byte	25
00000a25 12               12249		.byte	18
00000a26 00000000         12250		.long	.LDW_5e1a800
00000a2a 0223             12251		.byte	2,35

                                   Fri Apr 10 08:32:15 2020           Page 220
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
00000a2c 0c               12252		.byte	12
00000a2d 01               12253		.byte	1
                          12254	
                          12255	.LDW_5b63860:
00000a2e 25               12256		.byte	37
00000a2f 7665726966696361 12257		.strz	"verificationData"
00000a37 74696f6e44617461
00000a3f 00              
00000a40 f503             12258		.byte	245,3
00000a42 19               12259		.byte	25
00000a43 12               12260		.byte	18
00000a44 00000000         12261		.long	.LDW_5e3eef0
00000a48 0223             12262		.byte	2,35
00000a4a 10               12263		.byte	16
00000a4b 01               12264		.byte	1
                          12265	
                          12266	.LDW_5b62ff0:
00000a4c 25               12267		.byte	37
00000a4d 637263546f74616c 12268		.strz	"crcTotal"
00000a55 00              
00000a56 f703             12269		.byte	247,3
00000a58 19               12270		.byte	25
00000a59 12               12271		.byte	18
00000a5a 00000000         12272		.long	.LDW_5e3e2e8
00000a5e 0223             12273		.byte	2,35
00000a60 14               12274		.byte	20
00000a61 01               12275		.byte	1
                          12276	
                          12277	.LDW_5b63350:
00000a62 25               12278		.byte	37
00000a63 7764547269676765 12279		.strz	"wdTriggerFct"
00000a6b 7246637400      
00000a70 f903             12280		.byte	249,3
00000a72 19               12281		.byte	25
00000a73 12               12282		.byte	18
00000a74 00000000         12283		.long	.LDW_5e1a8b0
00000a78 0223             12284		.byte	2,35
00000a7a 18               12285		.byte	24
00000a7b 01               12286		.byte	1
                          12287	
                          12288	.LDW_5b634b8:
00000a7c 25               12289		.byte	37
00000a7d 726561644d656d6f 12290		.strz	"readMemory"
00000a85 727900          
00000a88 fb03             12291		.byte	251,3
00000a8a 19               12292		.byte	25
00000a8b 12               12293		.byte	18
00000a8c 00000000         12294		.long	.LDW_5e1aa68
00000a90 0223             12295		.byte	2,35
00000a92 1c               12296		.byte	28
00000a93 01               12297		.byte	1
                          12298	
                          12299	.LDW_5b63500:
00000a94 25               12300		.byte	37
00000a95 776f726b73706163 12301		.strz	"workspace"
00000a9d 6500            
00000a9f fe03             12302		.byte	254,3
00000aa1 19               12303		.byte	25
00000aa2 12               12304		.byte	18
00000aa3 00000000         12305		.long	.LDW_5e3ea78
00000aa7 0223             12306		.byte	2,35
00000aa9 20               12307		.byte	32

                                   Fri Apr 10 08:32:15 2020           Page 221
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
00000aaa 01               12308		.byte	1
                          12309	
                          12310	.LDW_5b63aa0:
00000aab 25               12311		.byte	37
00000aac 6b657900         12312		.strz	"key"
00000ab0 8004             12313		.byte	128,4
00000ab2 19               12314		.byte	25
00000ab3 12               12315		.byte	18
00000ab4 00000000         12316		.long	.LDW_5e3ef48
00000ab8 0223             12317		.byte	2,35
00000aba 28               12318		.byte	40
00000abb 01               12319		.byte	1
                          12320	
00000abc 00               12321		.byte	0
                          12322	
                          12323	.LDW_5e3ece0:
00000abd 2a               12324		.byte	42
00000abe 5365634d5f566572 12325		.strz	"SecM_VerifyParamType"
00000ac6 696679506172616d
00000ace 5479706500      
00000ad3 8104             12326		.byte	129,4
00000ad5 03               12327		.byte	3
00000ad6 12               12328		.byte	18
00000ad7 00000000         12329		.long	.LDW_5e3eff8
                          12330	
                          12331	.LDW_5e3ee98:
00000adb 43               12332		.byte	67
00000adc 8504             12333		.byte	133,4
00000ade 01               12334		.byte	1
00000adf 12               12335		.byte	18
00000ae0 08               12336		.byte	8
00000ae1 01               12337		.byte	1
                          12338	
                          12339	.LDW_5b63c50:
00000ae2 25               12340		.byte	37
00000ae3 736967526573756c 12341		.strz	"sigResultBuffer"
00000aeb 7442756666657200
00000af3 8604             12342		.byte	134,4
00000af5 1a               12343		.byte	26
00000af6 12               12344		.byte	18
00000af7 00000000         12345		.long	.LDW_5e3ee40
00000afb 0223             12346		.byte	2,35
00000afd 00               12347		.byte	0
00000afe 01               12348		.byte	1
                          12349	
                          12350	.LDW_5b63b30:
00000aff 25               12351		.byte	37
00000b00 6c656e67746800   12352		.strz	"length"
00000b07 8704             12353		.byte	135,4
00000b09 1a               12354		.byte	26
00000b0a 12               12355		.byte	18
00000b0b 00000000         12356		.long	.LDW_5e1a800
00000b0f 0223             12357		.byte	2,35
00000b11 04               12358		.byte	4
00000b12 01               12359		.byte	1
                          12360	
00000b13 00               12361		.byte	0
                          12362	
                          12363	.LDW_5e3efa0:

                                   Fri Apr 10 08:32:15 2020           Page 222
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
00000b14 2a               12364		.byte	42
00000b15 5365634d5f536967 12365		.strz	"SecM_SignatureType"
00000b1d 6e61747572655479
00000b25 706500          
00000b28 8804             12366		.byte	136,4
00000b2a 03               12367		.byte	3
00000b2b 12               12368		.byte	18
00000b2c 00000000         12369		.long	.LDW_5e3ee98
                          12370	
                          12371	.LDW_5e3f050:
00000b30 43               12372		.byte	67
00000b31 8c04             12373		.byte	140,4
00000b33 01               12374		.byte	1
00000b34 12               12375		.byte	18
00000b35 20               12376		.byte	32
00000b36 01               12377		.byte	1
                          12378	
                          12379	.LDW_5b63e00:
00000b37 25               12380		.byte	37
00000b38 63757272656e7448 12381		.strz	"currentHash"
00000b40 61736800        
00000b44 8e04             12382		.byte	142,4
00000b46 19               12383		.byte	25
00000b47 12               12384		.byte	18
00000b48 00000000         12385		.long	.LDW_5e3efa0
00000b4c 0223             12386		.byte	2,35
00000b4e 00               12387		.byte	0
00000b4f 01               12388		.byte	1
                          12389	
                          12390	.LDW_5b63c08:
00000b50 25               12391		.byte	37
00000b51 63757272656e7444 12392		.strz	"currentDataLength"
00000b59 6174614c656e6774
00000b61 6800            
00000b63 9004             12393		.byte	144,4
00000b65 32               12394		.byte	50
00000b66 12               12395		.byte	18
00000b67 00000000         12396		.long	.LDW_5e3d228
00000b6b 0223             12397		.byte	2,35
00000b6d 08               12398		.byte	8
00000b6e 01               12399		.byte	1
                          12400	
                          12401	.LDW_5b63b78:
00000b6f 25               12402		.byte	37
00000b70 7369675374617465 12403		.strz	"sigState"
00000b78 00              
00000b79 9204             12404		.byte	146,4
00000b7b 19               12405		.byte	25
00000b7c 12               12406		.byte	18
00000b7d 00000000         12407		.long	.LDW_5df0c68
00000b81 0223             12408		.byte	2,35
00000b83 0c               12409		.byte	12
00000b84 01               12410		.byte	1
                          12411	
                          12412	.LDW_5b638f0:
00000b85 25               12413		.byte	37
00000b86 736967536f757263 12414		.strz	"sigSourceBuffer"
00000b8e 6542756666657200
00000b96 9404             12415		.byte	148,4
00000b98 19               12416		.byte	25
00000b99 12               12417		.byte	18
00000b9a 00000000         12418		.long	.LDW_5e3eef0
00000b9e 0223             12419		.byte	2,35

                                   Fri Apr 10 08:32:15 2020           Page 223
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
00000ba0 10               12420		.byte	16
00000ba1 01               12421		.byte	1
                          12422	
                          12423	.LDW_5b63f68:
00000ba2 25               12424		.byte	37
00000ba3 7369674279746543 12425		.strz	"sigByteCount"
00000bab 6f756e7400      
00000bb0 9604             12426		.byte	150,4
00000bb2 19               12427		.byte	25
00000bb3 12               12428		.byte	18
00000bb4 00000000         12429		.long	.LDW_5e1aac0
00000bb8 0223             12430		.byte	2,35
00000bba 14               12431		.byte	20
00000bbb 01               12432		.byte	1
                          12433	
                          12434	.LDW_5b63ed8:
00000bbc 25               12435		.byte	37
00000bbd 7764547269676765 12436		.strz	"wdTriggerFct"
00000bc5 7246637400      
00000bca 9804             12437		.byte	152,4
00000bcc 19               12438		.byte	25
00000bcd 12               12439		.byte	18
00000bce 00000000         12440		.long	.LDW_5e1a8b0
00000bd2 0223             12441		.byte	2,35
00000bd4 18               12442		.byte	24
00000bd5 01               12443		.byte	1
                          12444	
                          12445	.LDW_5b63e90:
00000bd6 25               12446		.byte	37
00000bd7 6b657900         12447		.strz	"key"
00000bdb 9b04             12448		.byte	155,4
00000bdd 19               12449		.byte	25
00000bde 12               12450		.byte	18
00000bdf 00000000         12451		.long	.LDW_5e3ef48
00000be3 0223             12452		.byte	2,35
00000be5 1c               12453		.byte	28
00000be6 01               12454		.byte	1
                          12455	
00000be7 00               12456		.byte	0
                          12457	
                          12458	.LDW_5e3f0a8:
00000be8 2a               12459		.byte	42
00000be9 5365634d5f536967 12460		.strz	"SecM_SignatureParamType"
00000bf1 6e61747572655061
00000bf9 72616d5479706500
00000c01 9c04             12461		.byte	156,4
00000c03 03               12462		.byte	3
00000c04 12               12463		.byte	18
00000c05 00000000         12464		.long	.LDW_5e3f050
                          12465	
                          12466	.LDW_5e40628:
00000c09 2a               12467		.byte	42
00000c0a 7446626c53746174 12468		.strz	"tFblStateBitmap"
00000c12 654269746d617000
00000c1a 8402             12469		.byte	132,2
00000c1c 11               12470		.byte	17
00000c1d 13               12471		.byte	19
00000c1e 00000000         12472		.long	.LDW_4ae9b80
                          12473	
                          12474	.LDW_5df09a8:
00000c22 2a               12475		.byte	42

                                   Fri Apr 10 08:32:15 2020           Page 224
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
00000c23 7446626c52657375 12476		.strz	"tFblResult"
00000c2b 6c7400          
00000c2e 9f02             12477		.byte	159,2
00000c30 10               12478		.byte	16
00000c31 13               12479		.byte	19
00000c32 00000000         12480		.long	.LDW_5d29e20
                          12481	
                          12482	.LDW_5d9c220:
00000c36 2a               12483		.byte	42
00000c37 46424c5f41444452 12484		.strz	"FBL_ADDR_TYPE"
00000c3f 5f5459504500    
00000c45 ae02             12485		.byte	174,2
00000c47 11               12486		.byte	17
00000c48 13               12487		.byte	19
00000c49 00000000         12488		.long	.LDW_4ae9b80
                          12489	
                          12490	.LDW_5d9c850:
00000c4d 2a               12491		.byte	42
00000c4e 46424c5f4d454d53 12492		.strz	"FBL_MEMSIZE_TYPE"
00000c56 495a455f54595045
00000c5e 00              
00000c5f af02             12493		.byte	175,2
00000c61 11               12494		.byte	17
00000c62 13               12495		.byte	19
00000c63 00000000         12496		.long	.LDW_4ae9b80
                          12497	
                          12498	.LDW_5d9ca08:
00000c67 2a               12499		.byte	42
00000c68 7446626c41646472 12500		.strz	"tFblAddress"
00000c70 65737300        
00000c74 b902             12501		.byte	185,2
00000c76 1d               12502		.byte	29
00000c77 13               12503		.byte	19
00000c78 00000000         12504		.long	.LDW_5d9c220
                          12505	
                          12506	.LDW_5d9c170:
00000c7c 2a               12507		.byte	42
00000c7d 7446626c4c656e67 12508		.strz	"tFblLength"
00000c85 746800          
00000c88 ba02             12509		.byte	186,2
00000c8a 1d               12510		.byte	29
00000c8b 13               12511		.byte	19
00000c8c 00000000         12512		.long	.LDW_5d9c850
                          12513	
                          12514	.LDW_5e40100:
00000c90 2a               12515		.byte	42
00000c91 744578706f727446 12516		.strz	"tExportFct"
00000c99 637400          
00000c9c ca02             12517		.byte	202,2
00000c9e 1b               12518		.byte	27
00000c9f 13               12519		.byte	19
00000ca0 00000000         12520		.long	.LDW_5e3f230
                          12521	
                          12522	.LDW_5e3fd90:
00000ca4 42               12523		.byte	66
00000ca5 74426c6f636b4465 12524		.strz	"tBlockDescriptorTag"
00000cad 7363726970746f72
00000cb5 54616700        
00000cb9 48               12525		.byte	72
00000cba 10               12526		.byte	16
00000cbb 17               12527		.byte	23
00000cbc 18               12528		.byte	24
00000cbd 01               12529		.byte	1
                          12530	
                          12531		.section	.debug_abbrev

                                   Fri Apr 10 08:32:15 2020           Page 225
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
00000097 42               12532		.byte	66
00000098 13               12533		.byte	19
00000099 01               12534		.byte	1
0000009a 0308             12535		.byte	3,8
0000009c 3b0f             12536		.byte	59,15
0000009e 390f             12537		.byte	57,15
000000a0 3a0f             12538		.byte	58,15
000000a2 0b0f             12539		.byte	11,15
000000a4 320b             12540		.byte	50,11
000000a6 0000             12541		.byte	0,0
                          12542	
                          12543		.section	.debug_info
                          12544	.LDW_5b63db8:
00000cbe 25               12545		.byte	37
00000cbf 626c6f636b4e7200 12546		.strz	"blockNr"
00000cc7 4a               12547		.byte	74
00000cc8 0a               12548		.byte	10
00000cc9 17               12549		.byte	23
00000cca 00000000         12550		.long	.LDW_5d29e20
00000cce 0223             12551		.byte	2,35
00000cd0 00               12552		.byte	0
00000cd1 01               12553		.byte	1
                          12554	
                          12555	.LDW_5b63e48:
00000cd2 25               12556		.byte	37
00000cd3 626c6f636b547970 12557		.strz	"blockType"
00000cdb 6500            
00000cdd 4b               12558		.byte	75
00000cde 0b               12559		.byte	11
00000cdf 17               12560		.byte	23
00000ce0 00000000         12561		.long	.LDW_4ae9b80
00000ce4 0223             12562		.byte	2,35
00000ce6 04               12563		.byte	4
00000ce7 01               12564		.byte	1
                          12565	
                          12566	.LDW_5b63938:
00000ce8 25               12567		.byte	37
00000ce9 626c6f636b537461 12568		.strz	"blockStartAddress"
00000cf1 7274416464726573
00000cf9 7300            
00000cfb 4c               12569		.byte	76
00000cfc 0f               12570		.byte	15
00000cfd 17               12571		.byte	23
00000cfe 00000000         12572		.long	.LDW_5d9ca08
00000d02 0223             12573		.byte	2,35
00000d04 08               12574		.byte	8
00000d05 01               12575		.byte	1
                          12576	
                          12577	.LDW_5b63980:
00000d06 25               12578		.byte	37
00000d07 626c6f636b4c656e 12579		.strz	"blockLength"
00000d0f 67746800        
00000d13 4d               12580		.byte	77
00000d14 0e               12581		.byte	14
00000d15 17               12582		.byte	23
00000d16 00000000         12583		.long	.LDW_5d9c170
00000d1a 0223             12584		.byte	2,35
00000d1c 0c               12585		.byte	12
00000d1d 01               12586		.byte	1
                          12587	

                                   Fri Apr 10 08:32:15 2020           Page 226
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          12588	.LDW_5b63a10:
00000d1e 25               12589		.byte	37
00000d1f 6d617850726f6741 12590		.strz	"maxProgAttempts"
00000d27 7474656d70747300
00000d2f 4e               12591		.byte	78
00000d30 0b               12592		.byte	11
00000d31 17               12593		.byte	23
00000d32 00000000         12594		.long	.LDW_5d9ccc8
00000d36 0223             12595		.byte	2,35
00000d38 10               12596		.byte	16
00000d39 01               12597		.byte	1
                          12598	
                          12599	.LDW_5b639c8:
00000d3a 25               12600		.byte	37
00000d3b 7665726966794f75 12601		.strz	"verifyOutput"
00000d43 7470757400      
00000d48 4f               12602		.byte	79
00000d49 0e               12603		.byte	14
00000d4a 17               12604		.byte	23
00000d4b 00000000         12605		.long	.LDW_5e40100
00000d4f 0223             12606		.byte	2,35
00000d51 14               12607		.byte	20
00000d52 01               12608		.byte	1
                          12609	
00000d53 00               12610		.byte	0
                          12611	
                          12612	.LDW_5e3fde8:
00000d54 2a               12613		.byte	42
00000d55 74426c6f636b4465 12614		.strz	"tBlockDescriptor"
00000d5d 7363726970746f72
00000d65 00              
00000d66 50               12615		.byte	80
00000d67 03               12616		.byte	3
00000d68 17               12617		.byte	23
00000d69 00000000         12618		.long	.LDW_5e3fd90
                          12619	
                          12620	.LDW_5d2a990:
00000d6d 2a               12621		.byte	42
00000d6e 494f5f53697a6554 12622		.strz	"IO_SizeType"
00000d76 79706500        
00000d7a 5e               12623		.byte	94
00000d7b 13               12624		.byte	19
00000d7c 1c               12625		.byte	28
00000d7d 00000000         12626		.long	.LDW_4ae9b80
                          12627	
                          12628	.LDW_5d2a468:
00000d81 2a               12629		.byte	42
00000d82 494f5f506f736974 12630		.strz	"IO_PositionType"
00000d8a 696f6e5479706500
00000d92 5f               12631		.byte	95
00000d93 13               12632		.byte	19
00000d94 1c               12633		.byte	28
00000d95 00000000         12634		.long	.LDW_4ae9b80
                          12635	
                          12636	.LDW_5d9cf30:
00000d99 2a               12637		.byte	42
00000d9a 494f5f4572726f72 12638		.strz	"IO_ErrorType"
00000da2 5479706500      
00000da7 65               12639		.byte	101
00000da8 13               12640		.byte	19
00000da9 1c               12641		.byte	28
00000daa 00000000         12642		.long	.LDW_5d9ccc8
                          12643	

                                   Fri Apr 10 08:32:15 2020           Page 227
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          12644	.LDW_5d2aa98:
00000dae 2a               12645		.byte	42
00000daf 494f5f4d656d5074 12646		.strz	"IO_MemPtrType"
00000db7 725479706500    
00000dbd 66               12647		.byte	102
00000dbe 13               12648		.byte	19
00000dbf 1c               12649		.byte	28
00000dc0 00000000         12650		.long	.LDW_4aac6c0
                          12651	
                          12652	.LDW_5d2a780:
00000dc4 2a               12653		.byte	42
00000dc5 7444727646637449 12654		.strz	"tDrvFctInit"
00000dcd 6e697400        
00000dd1 8b02             12655		.byte	139,2
00000dd3 23               12656		.byte	35
00000dd4 1d               12657		.byte	29
00000dd5 00000000         12658		.long	.LDW_5e3f428
                          12659	
                          12660	.LDW_5d2a048:
00000dd9 2a               12661		.byte	42
00000dda 7444727646637444 12662		.strz	"tDrvFctDeinit"
00000de2 65696e697400    
00000de8 8c02             12663		.byte	140,2
00000dea 23               12664		.byte	35
00000deb 1d               12665		.byte	29
00000dec 00000000         12666		.long	.LDW_5e3f460
                          12667	
                          12668	.LDW_5d2aa40:
00000df0 2a               12669		.byte	42
00000df1 7444727646637452 12670		.strz	"tDrvFctRead"
00000df9 65616400        
00000dfd 8d02             12671		.byte	141,2
00000dff 23               12672		.byte	35
00000e00 1d               12673		.byte	29
00000e01 00000000         12674		.long	.LDW_5e3f498
                          12675	
                          12676	.LDW_5d2a308:
00000e05 2a               12677		.byte	42
00000e06 7444727646637457 12678		.strz	"tDrvFctWrite"
00000e0e 7269746500      
00000e13 8e02             12679		.byte	142,2
00000e15 23               12680		.byte	35
00000e16 1d               12681		.byte	29
00000e17 00000000         12682		.long	.LDW_5e3f8c0
                          12683	
                          12684	.LDW_5d2a4c0:
00000e1b 2a               12685		.byte	42
00000e1c 7444727646637445 12686		.strz	"tDrvFctErase"
00000e24 7261736500      
00000e29 8f02             12687		.byte	143,2
00000e2b 23               12688		.byte	35
00000e2c 1d               12689		.byte	29
00000e2d 00000000         12690		.long	.LDW_5e3f8f8
                          12691	
                          12692	.LDW_5d2a0a0:
00000e31 43               12693		.byte	67
00000e32 9302             12694		.byte	147,2
00000e34 01               12695		.byte	1
00000e35 1d               12696		.byte	29
00000e36 18               12697		.byte	24
00000e37 01               12698		.byte	1
                          12699	

                                   Fri Apr 10 08:32:15 2020           Page 228
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          12700	.LDW_5e416c0:
00000e38 25               12701		.byte	37
00000e39 696e697400       12702		.strz	"init"
00000e3e 9402             12703		.byte	148,2
00000e40 13               12704		.byte	19
00000e41 1d               12705		.byte	29
00000e42 00000000         12706		.long	.LDW_5d2a780
00000e46 0223             12707		.byte	2,35
00000e48 00               12708		.byte	0
00000e49 01               12709		.byte	1
                          12710	
                          12711	.LDW_5e41708:
00000e4a 25               12712		.byte	37
00000e4b 6465696e697400   12713		.strz	"deinit"
00000e52 9502             12714		.byte	149,2
00000e54 13               12715		.byte	19
00000e55 1d               12716		.byte	29
00000e56 00000000         12717		.long	.LDW_5d2a048
00000e5a 0223             12718		.byte	2,35
00000e5c 04               12719		.byte	4
00000e5d 01               12720		.byte	1
                          12721	
                          12722	.LDW_5e41438:
00000e5e 25               12723		.byte	37
00000e5f 657261736500     12724		.strz	"erase"
00000e65 9602             12725		.byte	150,2
00000e67 13               12726		.byte	19
00000e68 1d               12727		.byte	29
00000e69 00000000         12728		.long	.LDW_5d2a4c0
00000e6d 0223             12729		.byte	2,35
00000e6f 08               12730		.byte	8
00000e70 01               12731		.byte	1
                          12732	
                          12733	.LDW_5e41750:
00000e71 25               12734		.byte	37
00000e72 777269746500     12735		.strz	"write"
00000e78 9702             12736		.byte	151,2
00000e7a 13               12737		.byte	19
00000e7b 1d               12738		.byte	29
00000e7c 00000000         12739		.long	.LDW_5d2a308
00000e80 0223             12740		.byte	2,35
00000e82 0c               12741		.byte	12
00000e83 01               12742		.byte	1
                          12743	
                          12744	.LDW_5e41828:
00000e84 25               12745		.byte	37
00000e85 7265616400       12746		.strz	"read"
00000e8a 9802             12747		.byte	152,2
00000e8c 13               12748		.byte	19
00000e8d 1d               12749		.byte	29
00000e8e 00000000         12750		.long	.LDW_5d2aa40
00000e92 0223             12751		.byte	2,35
00000e94 10               12752		.byte	16
00000e95 01               12753		.byte	1
                          12754	
                          12755	.LDW_5e417e0:

                                   Fri Apr 10 08:32:15 2020           Page 229
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
00000e96 25               12756		.byte	37
00000e97 7365676d656e7453 12757		.strz	"segmentSize"
00000e9f 697a6500        
00000ea3 9902             12758		.byte	153,2
00000ea5 13               12759		.byte	19
00000ea6 1d               12760		.byte	29
00000ea7 00000000         12761		.long	.LDW_5d9ccc8
00000eab 0223             12762		.byte	2,35
00000ead 14               12763		.byte	20
00000eae 01               12764		.byte	1
                          12765	
00000eaf 00               12766		.byte	0
                          12767	
                          12768	.LDW_5d2a360:
00000eb0 2a               12769		.byte	42
00000eb1 744d656d44727600 12770		.strz	"tMemDrv"
00000eb9 9a02             12771		.byte	154,2
00000ebb 03               12772		.byte	3
00000ebc 1d               12773		.byte	29
00000ebd 00000000         12774		.long	.LDW_5d2a0a0
                          12775	
                          12776	.LDW_5d2df48:
00000ec1 42               12777		.byte	66
00000ec2 74466c617368426c 12778		.strz	"tFlashBlockTag"
00000eca 6f636b54616700  
00000ed1 38               12779		.byte	56
00000ed2 10               12780		.byte	16
00000ed3 2c               12781		.byte	44
00000ed4 0c               12782		.byte	12
00000ed5 01               12783		.byte	1
                          12784	
                          12785	.LDW_5d2be78:
00000ed6 25               12786		.byte	37
00000ed7 626567696e00     12787		.strz	"begin"
00000edd 3a               12788		.byte	58
00000ede 0f               12789		.byte	15
00000edf 2c               12790		.byte	44
00000ee0 00000000         12791		.long	.LDW_5d9ca08
00000ee4 0223             12792		.byte	2,35
00000ee6 00               12793		.byte	0
00000ee7 01               12794		.byte	1
                          12795	
                          12796	.LDW_5d2bf98:
00000ee8 25               12797		.byte	37
00000ee9 656e6400         12798		.strz	"end"
00000eed 3b               12799		.byte	59
00000eee 0f               12800		.byte	15
00000eef 2c               12801		.byte	44
00000ef0 00000000         12802		.long	.LDW_5d9ca08
00000ef4 0223             12803		.byte	2,35
00000ef6 04               12804		.byte	4
00000ef7 01               12805		.byte	1
                          12806	
                          12807	.LDW_5d2bfe0:
00000ef8 25               12808		.byte	37
00000ef9 64657669636500   12809		.strz	"device"
00000f00 3c               12810		.byte	60
00000f01 0a               12811		.byte	10

                                   Fri Apr 10 08:32:15 2020           Page 230
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
00000f02 2c               12812		.byte	44
00000f03 00000000         12813		.long	.LDW_5d29e20
00000f07 0223             12814		.byte	2,35
00000f09 08               12815		.byte	8
00000f0a 01               12816		.byte	1
                          12817	
00000f0b 00               12818		.byte	0
                          12819	
                          12820	.LDW_5d2dc88:
00000f0c 2a               12821		.byte	42
00000f0d 74466c617368426c 12822		.strz	"tFlashBlock"
00000f15 6f636b00        
00000f19 3d               12823		.byte	61
00000f1a 03               12824		.byte	3
00000f1b 2c               12825		.byte	44
00000f1c 00000000         12826		.long	.LDW_5d2df48
                          12827	
                          12828	.LDW_5df0798:
00000f20 2a               12829		.byte	42
00000f21 7446626c4d656d56 12830		.strz	"tFblMemVerifyStatus"
00000f29 6572696679537461
00000f31 74757300        
00000f35 a804             12831		.byte	168,4
00000f37 3a               12832		.byte	58
00000f38 2f               12833		.byte	47
00000f39 00000000         12834		.long	.LDW_5df0c68
                          12835	
                          12836	.LDW_5d2e050:
00000f3d 2a               12837		.byte	42
00000f3e 7446626c4d656d56 12838		.strz	"tFblMemVerifyParamInput"
00000f46 6572696679506172
00000f4e 616d496e70757400
00000f56 ad04             12839		.byte	173,4
00000f58 3a               12840		.byte	58
00000f59 2f               12841		.byte	47
00000f5a 00000000         12842		.long	.LDW_5e3f0a8
                          12843	
                          12844	.LDW_5d2e158:
00000f5e 2a               12845		.byte	42
00000f5f 7446626c4d656d56 12846		.strz	"tFblMemVerifyParamOutput"
00000f67 6572696679506172
00000f6f 616d4f7574707574
00000f77 00              
00000f78 b204             12847		.byte	178,4
00000f7a 3a               12848		.byte	58
00000f7b 2f               12849		.byte	47
00000f7c 00000000         12850		.long	.LDW_5e3ece0
                          12851	
                          12852	.LDW_5d2dfa0:
00000f80 2a               12853		.byte	42
00000f81 7446626c4d656d56 12854		.strz	"tFblMemVerifyWdFct"
00000f89 6572696679576446
00000f91 637400          
00000f94 cb04             12855		.byte	203,4
00000f96 3a               12856		.byte	58
00000f97 2f               12857		.byte	47
00000f98 00000000         12858		.long	.LDW_5e1a8b0
                          12859	
                          12860	.LDW_5d2d918:
00000f9c 2a               12861		.byte	42
00000f9d 7446626c4d656d56 12862		.strz	"tFblMemVerifyReadFct"
00000fa5 6572696679526561
00000fad 6446637400      
00000fb2 d004             12863		.byte	208,4
00000fb4 3a               12864		.byte	58
00000fb5 2f               12865		.byte	47
00000fb6 00000000         12866		.long	.LDW_5e1aa68
                          12867	

                                   Fri Apr 10 08:32:15 2020           Page 231
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          12868	.LDW_5d2dce0:
00000fba 2a               12869		.byte	42
00000fbb 7446626c4d656d56 12870		.strz	"tFblMemVerifyFctInput"
00000fc3 6572696679466374
00000fcb 496e70757400    
00000fd1 d504             12871		.byte	213,4
00000fd3 2d               12872		.byte	45
00000fd4 2f               12873		.byte	47
00000fd5 00000000         12874		.long	.LDW_5d2b6c0
                          12875	
                          12876	.LDW_5d2d8c0:
00000fd9 2a               12877		.byte	42
00000fda 7446626c4d656d56 12878		.strz	"tFblMemVerifyFctOutput"
00000fe2 6572696679466374
00000fea 4f757470757400  
00000ff1 da04             12879		.byte	218,4
00000ff3 2d               12880		.byte	45
00000ff4 2f               12881		.byte	47
00000ff5 00000000         12882		.long	.LDW_5d2b0a0
                          12883	
                          12884	.LDW_5d2e0a8:
00000ff9 2a               12885		.byte	42
00000ffa 7446626c4d656d53 12886		.strz	"tFblMemSegmentList"
00001002 65676d656e744c69
0000100a 737400          
0000100d e004             12887		.byte	224,4
0000100f 3a               12888		.byte	58
00001010 2f               12889		.byte	47
00001011 00000000         12890		.long	.LDW_5e1a858
                          12891	
                          12892	.LDW_5df13f8:
00001015 2a               12893		.byte	42
00001016 7446626c4d656d53 12894		.strz	"tFblMemSegmentListEntry"
0000101e 65676d656e744c69
00001026 7374456e74727900
0000102e e504             12895		.byte	229,4
00001030 3a               12896		.byte	58
00001031 2f               12897		.byte	47
00001032 00000000         12898		.long	.LDW_5df1240
                          12899	
                          12900	.LDW_4ae9c30:
00001036 30               12901		.byte	48
00001037 00               12902		.byte	0
00001038 ea04             12903		.byte	234,4
0000103a 01               12904		.byte	1
0000103b 2f               12905		.byte	47
0000103c 04               12906		.byte	4
0000103d 01               12907		.byte	1
                          12908	
                          12909		.section	.debug_abbrev
000000a8 30               12910		.byte	48
000000a9 04               12911		.byte	4
000000aa 01               12912		.byte	1
000000ab 0308             12913		.byte	3,8
000000ad 3b0f             12914		.byte	59,15
000000af 390f             12915		.byte	57,15
000000b1 3a0f             12916		.byte	58,15
000000b3 0b0f             12917		.byte	11,15
000000b5 320b             12918		.byte	50,11
000000b7 0000             12919		.byte	0,0
                          12920	
                          12921		.section	.debug_info
                          12922	.LDW_4ae9c88:
0000103e 2f               12923		.byte	47

                                   Fri Apr 10 08:32:15 2020           Page 232
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
0000103f 6b46626c4d656d53 12924		.strz	"kFblMemStatus_Ok"
00001047 74617475735f4f6b
0000104f 00              
00001050 ed04             12925		.byte	237,4
00001052 04               12926		.byte	4
00001053 2f               12927		.byte	47
00001054 00               12928		.byte	0
                          12929	
                          12930		.section	.debug_abbrev
000000b9 2f               12931		.byte	47
000000ba 28               12932		.byte	40
000000bb 00               12933		.byte	0
000000bc 0308             12934		.byte	3,8
000000be 3b0f             12935		.byte	59,15
000000c0 390f             12936		.byte	57,15
000000c2 3a0f             12937		.byte	58,15
000000c4 1c0d             12938		.byte	28,13
000000c6 0000             12939		.byte	0,0
                          12940	
                          12941		.section	.debug_info
                          12942	.LDW_4ae9cc8:
00001055 2f               12943		.byte	47
00001056 6b46626c4d656d53 12944		.strz	"kFblMemStatus_Failed"
0000105e 74617475735f4661
00001066 696c656400      
0000106b ee04             12945		.byte	238,4
0000106d 05               12946		.byte	5
0000106e 2f               12947		.byte	47
0000106f 22               12948		.byte	34
                          12949	
                          12950	.LDW_4ae9d08:
00001070 2f               12951		.byte	47
00001071 6b46626c4d656d53 12952		.strz	"kFblMemStatus_BlockEraseSequence"
00001079 74617475735f426c
00001081 6f636b4572617365
00001089 53657175656e6365
00001091 00              
00001092 f004             12953		.byte	240,4
00001094 05               12954		.byte	5
00001095 2f               12955		.byte	47
00001096 24               12956		.byte	36
                          12957	
                          12958	.LDW_4ae9d48:
00001097 2f               12959		.byte	47
00001098 6b46626c4d656d53 12960		.strz	"kFblMemStatus_BlockStartSequence"
000010a0 74617475735f426c
000010a8 6f636b5374617274
000010b0 53657175656e6365
000010b8 00              
000010b9 f204             12961		.byte	242,4
000010bb 05               12962		.byte	5
000010bc 2f               12963		.byte	47
000010bd 24               12964		.byte	36
                          12965	
                          12966	.LDW_4ae9d88:
000010be 2f               12967		.byte	47
000010bf 6b46626c4d656d53 12968		.strz	"kFblMemStatus_BlockStartParam"
000010c7 74617475735f426c
000010cf 6f636b5374617274
000010d7 506172616d00    
000010dd f304             12969		.byte	243,4
000010df 05               12970		.byte	5
000010e0 2f               12971		.byte	47
000010e1 22               12972		.byte	34
                          12973	
                          12974	.LDW_4ae9dc8:
000010e2 2f               12975		.byte	47
000010e3 6b46626c4d656d53 12976		.strz	"kFblMemStatus_BlockEndSequence"
000010eb 74617475735f426c
000010f3 6f636b456e645365
000010fb 7175656e636500  
00001102 f504             12977		.byte	245,4
00001104 05               12978		.byte	5
00001105 2f               12979		.byte	47

                                   Fri Apr 10 08:32:15 2020           Page 233
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
00001106 24               12980		.byte	36
                          12981	
                          12982	.LDW_4ae9e08:
00001107 2f               12983		.byte	47
00001108 6b46626c4d656d53 12984		.strz	"kFblMemStatus_BlockEndVerifyFinalize"
00001110 74617475735f426c
00001118 6f636b456e645665
00001120 7269667946696e61
00001128 6c697a6500      
0000112d f604             12985		.byte	246,4
0000112f 05               12986		.byte	5
00001130 2f               12987		.byte	47
00001131 f200             12988		.byte	242,0
                          12989	
                          12990	.LDW_4ae9e48:
00001133 2f               12991		.byte	47
00001134 6b46626c4d656d53 12992		.strz	"kFblMemStatus_BlockVerifySequence"
0000113c 74617475735f426c
00001144 6f636b5665726966
0000114c 7953657175656e63
00001154 6500            
00001156 f804             12993		.byte	248,4
00001158 05               12994		.byte	5
00001159 2f               12995		.byte	47
0000115a 24               12996		.byte	36
                          12997	
                          12998	.LDW_4ae9e88:
0000115b 2f               12999		.byte	47
0000115c 6b46626c4d656d53 13000		.strz	"kFblMemStatus_BlockVerifyInputVerify"
00001164 74617475735f426c
0000116c 6f636b5665726966
00001174 79496e7075745665
0000117c 7269667900      
00001181 f904             13001		.byte	249,4
00001183 05               13002		.byte	5
00001184 2f               13003		.byte	47
00001185 10               13004		.byte	16
                          13005	
                          13006	.LDW_4ae9ec8:
00001186 2f               13007		.byte	47
00001187 6b46626c4d656d53 13008		.strz	"kFblMemStatus_BlockVerifyProcessedVerify"
0000118f 74617475735f426c
00001197 6f636b5665726966
0000119f 7950726f63657373
000011a7 6564566572696679
000011af 00              
000011b0 fa04             13009		.byte	250,4
000011b2 05               13010		.byte	5
000011b3 2f               13011		.byte	47
000011b4 10               13012		.byte	16
                          13013	
                          13014	.LDW_4ae9f08:
000011b5 2f               13015		.byte	47
000011b6 6b46626c4d656d53 13016		.strz	"kFblMemStatus_BlockVerifyPipeVerify"
000011be 74617475735f426c
000011c6 6f636b5665726966
000011ce 7950697065566572
000011d6 69667900        
000011da fb04             13017		.byte	251,4
000011dc 05               13018		.byte	5
000011dd 2f               13019		.byte	47
000011de 10               13020		.byte	16
                          13021	
                          13022	.LDW_4aea130:
000011df 2f               13023		.byte	47
000011e0 6b46626c4d656d53 13024		.strz	"kFblMemStatus_BlockVerifyOutputVerify"
000011e8 74617475735f426c
000011f0 6f636b5665726966
000011f8 794f757470757456
00001200 657269667900    
00001206 fc04             13025		.byte	252,4
00001208 05               13026		.byte	5
00001209 2f               13027		.byte	47
0000120a 10               13028		.byte	16
                          13029	
                          13030	.LDW_4aea4b0:
0000120b 2f               13031		.byte	47
0000120c 6b46626c4d656d53 13032		.strz	"kFblMemStatus_SegmentStartSequence"
00001214 74617475735f5365
0000121c 676d656e74537461
00001224 727453657175656e
0000122c 636500          
0000122f fe04             13033		.byte	254,4
00001231 05               13034		.byte	5
00001232 2f               13035		.byte	47

                                   Fri Apr 10 08:32:15 2020           Page 234
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
00001233 24               13036		.byte	36
                          13037	
                          13038	.LDW_4aea670:
00001234 2f               13039		.byte	47
00001235 6b46626c4d656d53 13040		.strz	"kFblMemStatus_SegmentStartDataProcInit"
0000123d 74617475735f5365
00001245 676d656e74537461
0000124d 7274446174615072
00001255 6f63496e697400  
0000125c ff04             13041		.byte	255,4
0000125e 05               13042		.byte	5
0000125f 2f               13043		.byte	47
00001260 f000             13044		.byte	240,0
                          13045	
                          13046	.LDW_4aea470:
00001262 2f               13047		.byte	47
00001263 6b46626c4d656d53 13048		.strz	"kFblMemStatus_SegmentStartStreamOutInit"
0000126b 74617475735f5365
00001273 676d656e74537461
0000127b 727453747265616d
00001283 4f7574496e697400
0000128b 8005             13049		.byte	128,5
0000128d 05               13050		.byte	5
0000128e 2f               13051		.byte	47
0000128f f000             13052		.byte	240,0
                          13053	
                          13054	.LDW_4aea2f0:
00001291 2f               13055		.byte	47
00001292 6b46626c4d656d53 13056		.strz	"kFblMemStatus_SegmentStartVerifyInit"
0000129a 74617475735f5365
000012a2 676d656e74537461
000012aa 7274566572696679
000012b2 496e697400      
000012b7 8105             13057		.byte	129,5
000012b9 05               13058		.byte	5
000012ba 2f               13059		.byte	47
000012bb 22               13060		.byte	34
                          13061	
                          13062	.LDW_4aea530:
000012bc 2f               13063		.byte	47
000012bd 6b46626c4d656d53 13064		.strz	"kFblMemStatus_SegmentStartVerifyCompute"
000012c5 74617475735f5365
000012cd 676d656e74537461
000012d5 7274566572696679
000012dd 436f6d7075746500
000012e5 8205             13065		.byte	130,5
000012e7 05               13066		.byte	5
000012e8 2f               13067		.byte	47
000012e9 f200             13068		.byte	242,0
                          13069	
                          13070	.LDW_4aea4f0:
000012eb 2f               13071		.byte	47
000012ec 6b46626c4d656d53 13072		.strz	"kFblMemStatus_SegmentStartSegmentCount"
000012f4 74617475735f5365
000012fc 676d656e74537461
00001304 72745365676d656e
0000130c 74436f756e7400  
00001313 8305             13073		.byte	131,5
00001315 05               13074		.byte	5
00001316 2f               13075		.byte	47
00001317 31               13076		.byte	49
                          13077	
                          13078	.LDW_4ae9ff0:
00001318 2f               13079		.byte	47
00001319 6b46626c4d656d53 13080		.strz	"kFblMemStatus_SegmentEndSequence"
00001321 74617475735f5365
00001329 676d656e74456e64
00001331 53657175656e6365
00001339 00              
0000133a 8505             13081		.byte	133,5
0000133c 05               13082		.byte	5
0000133d 2f               13083		.byte	47
0000133e 24               13084		.byte	36
                          13085	
                          13086	.LDW_4aea0b0:
0000133f 2f               13087		.byte	47
00001340 6b46626c4d656d53 13088		.strz	"kFblMemStatus_SegmentEndInsufficientData"
00001348 74617475735f5365
00001350 676d656e74456e64
00001358 496e737566666963
00001360 69656e7444617461
00001368 00              
00001369 8605             13089		.byte	134,5
0000136b 05               13090		.byte	5
0000136c 2f               13091		.byte	47

                                   Fri Apr 10 08:32:15 2020           Page 235
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
0000136d 24               13092		.byte	36
                          13093	
                          13094	.LDW_4aea570:
0000136e 2f               13095		.byte	47
0000136f 6b46626c4d656d53 13096		.strz	"kFblMemStatus_SegmentEndPost"
00001377 74617475735f5365
0000137f 676d656e74456e64
00001387 506f737400      
0000138c 8705             13097		.byte	135,5
0000138e 05               13098		.byte	5
0000138f 2f               13099		.byte	47
00001390 22               13100		.byte	34
                          13101	
                          13102	.LDW_4aea5b0:
00001391 2f               13103		.byte	47
00001392 6b46626c4d656d53 13104		.strz	"kFblMemStatus_DataIndSequence"
0000139a 74617475735f4461
000013a2 7461496e64536571
000013aa 75656e636500    
000013b0 8905             13105		.byte	137,5
000013b2 05               13106		.byte	5
000013b3 2f               13107		.byte	47
000013b4 24               13108		.byte	36
                          13109	
                          13110	.LDW_4aea330:
000013b5 2f               13111		.byte	47
000013b6 6b46626c4d656d53 13112		.strz	"kFblMemStatus_DataIndParam"
000013be 74617475735f4461
000013c6 7461496e64506172
000013ce 616d00          
000013d1 8a05             13113		.byte	138,5
000013d3 05               13114		.byte	5
000013d4 2f               13115		.byte	47
000013d5 f200             13116		.byte	242,0
                          13117	
                          13118	.LDW_4aea430:
000013d7 2f               13119		.byte	47
000013d8 6b46626c4d656d53 13120		.strz	"kFblMemStatus_DataIndOverflow"
000013e0 74617475735f4461
000013e8 7461496e644f7665
000013f0 72666c6f7700    
000013f6 8b05             13121		.byte	139,5
000013f8 05               13122		.byte	5
000013f9 2f               13123		.byte	47
000013fa f100             13124		.byte	241,0
                          13125	
                          13126	.LDW_4aea070:
000013fc 2f               13127		.byte	47
000013fd 6b46626c4d656d53 13128		.strz	"kFblMemStatus_DataProc"
00001405 74617475735f4461
0000140d 746150726f6300  
00001414 8d05             13129		.byte	141,5
00001416 05               13130		.byte	5
00001417 2f               13131		.byte	47
00001418 f200             13132		.byte	242,0
                          13133	
                          13134	.LDW_4aea5f0:
0000141a 2f               13135		.byte	47
0000141b 6b46626c4d656d53 13136		.strz	"kFblMemStatus_DataProcConsume"
00001423 74617475735f4461
0000142b 746150726f63436f
00001433 6e73756d6500    
00001439 8e05             13137		.byte	142,5
0000143b 05               13138		.byte	5
0000143c 2f               13139		.byte	47
0000143d f200             13140		.byte	242,0
                          13141	
                          13142	.LDW_4aea1f0:
0000143f 2f               13143		.byte	47
00001440 6b46626c4d656d53 13144		.strz	"kFblMemStatus_DataProcDeinit"
00001448 74617475735f4461
00001450 746150726f634465
00001458 696e697400      
0000145d 8f05             13145		.byte	143,5
0000145f 05               13146		.byte	5
00001460 2f               13147		.byte	47

                                   Fri Apr 10 08:32:15 2020           Page 236
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
00001461 22               13148		.byte	34
                          13149	
                          13150	.LDW_4aea370:
00001462 2f               13151		.byte	47
00001463 6b46626c4d656d53 13152		.strz	"kFblMemStatus_StreamOutput"
0000146b 74617475735f5374
00001473 7265616d4f757470
0000147b 757400          
0000147e 9105             13153		.byte	145,5
00001480 05               13154		.byte	5
00001481 2f               13155		.byte	47
00001482 f200             13156		.byte	242,0
                          13157	
                          13158	.LDW_4aea630:
00001484 2f               13159		.byte	47
00001485 6b46626c4d656d53 13160		.strz	"kFblMemStatus_StreamOutputConsume"
0000148d 74617475735f5374
00001495 7265616d4f757470
0000149d 7574436f6e73756d
000014a5 6500            
000014a7 9205             13161		.byte	146,5
000014a9 05               13162		.byte	5
000014aa 2f               13163		.byte	47
000014ab f200             13164		.byte	242,0
                          13165	
                          13166	.LDW_4aea030:
000014ad 2f               13167		.byte	47
000014ae 6b46626c4d656d53 13168		.strz	"kFblMemStatus_StreamOutputOverflow"
000014b6 74617475735f5374
000014be 7265616d4f757470
000014c6 75744f766572666c
000014ce 6f7700          
000014d1 9305             13169		.byte	147,5
000014d3 05               13170		.byte	5
000014d4 2f               13171		.byte	47
000014d5 f100             13172		.byte	241,0
                          13173	
                          13174	.LDW_4aea6b0:
000014d7 2f               13175		.byte	47
000014d8 6b46626c4d656d53 13176		.strz	"kFblMemStatus_StreamOutputDeinit"
000014e0 74617475735f5374
000014e8 7265616d4f757470
000014f0 75744465696e6974
000014f8 00              
000014f9 9405             13177		.byte	148,5
000014fb 05               13178		.byte	5
000014fc 2f               13179		.byte	47
000014fd 22               13180		.byte	34
                          13181	
                          13182	.LDW_4aea6f0:
000014fe 2f               13183		.byte	47
000014ff 6b46626c4d656d53 13184		.strz	"kFblMemStatus_DriverResumeWrite"
00001507 74617475735f4472
0000150f 6976657252657375
00001517 6d65577269746500
0000151f 9605             13185		.byte	150,5
00001521 05               13186		.byte	5
00001522 2f               13187		.byte	47
00001523 f200             13188		.byte	242,0
                          13189	
                          13190	.LDW_4ae9f70:
00001525 2f               13191		.byte	47
00001526 6b46626c4d656d53 13192		.strz	"kFblMemStatus_DriverWrite"
0000152e 74617475735f4472
00001536 6976657257726974
0000153e 6500            
00001540 9705             13193		.byte	151,5
00001542 05               13194		.byte	5
00001543 2f               13195		.byte	47
00001544 f200             13196		.byte	242,0
                          13197	
                          13198	.LDW_4ae9fb0:
00001546 2f               13199		.byte	47
00001547 6b46626c4d656d53 13200		.strz	"kFblMemStatus_DriverErase"
0000154f 74617475735f4472
00001557 6976657245726173
0000155f 6500            
00001561 9805             13201		.byte	152,5
00001563 05               13202		.byte	5
00001564 2f               13203		.byte	47

                                   Fri Apr 10 08:32:15 2020           Page 237
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
00001565 f200             13204		.byte	242,0
                          13205	
                          13206	.LDW_4aea0f0:
00001567 2f               13207		.byte	47
00001568 6b46626c4d656d53 13208		.strz	"kFblMemStatus_DriverRemainder"
00001570 74617475735f4472
00001578 6976657252656d61
00001580 696e64657200    
00001586 9905             13209		.byte	153,5
00001588 05               13210		.byte	5
00001589 2f               13211		.byte	47
0000158a f200             13212		.byte	242,0
                          13213	
                          13214	.LDW_4aea170:
0000158c 2f               13215		.byte	47
0000158d 6b46626c4d656d53 13216		.strz	"kFblMemStatus_DriverSuspendWrite"
00001595 74617475735f4472
0000159d 6976657253757370
000015a5 656e645772697465
000015ad 00              
000015ae 9a05             13217		.byte	154,5
000015b0 05               13218		.byte	5
000015b1 2f               13219		.byte	47
000015b2 f200             13220		.byte	242,0
                          13221	
                          13222	.LDW_4aea1b0:
000015b4 2f               13223		.byte	47
000015b5 6b46626c4d656d53 13224		.strz	"kFblMemStatus_ProgramOverflow"
000015bd 74617475735f5072
000015c5 6f6772616d4f7665
000015cd 72666c6f7700    
000015d3 9c05             13225		.byte	156,5
000015d5 05               13226		.byte	5
000015d6 2f               13227		.byte	47
000015d7 f100             13228		.byte	241,0
                          13229	
                          13230	.LDW_4aea230:
000015d9 2f               13231		.byte	47
000015da 6b46626c4d656d53 13232		.strz	"kFblMemStatus_ProgramOutsideFbt"
000015e2 74617475735f5072
000015ea 6f6772616d4f7574
000015f2 7369646546627400
000015fa 9d05             13233		.byte	157,5
000015fc 05               13234		.byte	5
000015fd 2f               13235		.byte	47
000015fe f100             13236		.byte	241,0
                          13237	
                          13238	.LDW_4aea3b0:
00001600 2f               13239		.byte	47
00001601 6b46626c4d656d53 13240		.strz	"kFblMemStatus_ProgramUnalignedAddress"
00001609 74617475735f5072
00001611 6f6772616d556e61
00001619 6c69676e65644164
00001621 647265737300    
00001627 9e05             13241		.byte	158,5
00001629 05               13242		.byte	5
0000162a 2f               13243		.byte	47
0000162b f200             13244		.byte	242,0
                          13245	
                          13246	.LDW_4aea270:
0000162d 2f               13247		.byte	47
0000162e 6b46626c4d656d53 13248		.strz	"kFblMemStatus_ProgramDriverNotReady"
00001636 74617475735f5072
0000163e 6f6772616d447269
00001646 7665724e6f745265
0000164e 61647900        
00001652 9f05             13249		.byte	159,5
00001654 05               13250		.byte	5
00001655 2f               13251		.byte	47
00001656 24               13252		.byte	36
                          13253	
                          13254	.LDW_4aea2b0:
00001657 2f               13255		.byte	47
00001658 6b46626c4d656d53 13256		.strz	"kFblMemStatus_ProgramPreWrite"
00001660 74617475735f5072
00001668 6f6772616d507265
00001670 577269746500    
00001676 a005             13257		.byte	160,5
00001678 05               13258		.byte	5
00001679 2f               13259		.byte	47

                                   Fri Apr 10 08:32:15 2020           Page 238
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
0000167a f200             13260		.byte	242,0
                          13261	
                          13262	.LDW_4aea3f0:
0000167c 2f               13263		.byte	47
0000167d 6b46626c4d656d53 13264		.strz	"kFblMemStatus_ProgramPostWrite"
00001685 74617475735f5072
0000168d 6f6772616d506f73
00001695 74577269746500  
0000169c a105             13265		.byte	161,5
0000169e 05               13266		.byte	5
0000169f 2f               13267		.byte	47
000016a0 f200             13268		.byte	242,0
                          13269	
                          13270	.LDW_5c0e228:
000016a2 2f               13271		.byte	47
000016a3 6b46626c4d656d53 13272		.strz	"kFblMemStatus_EraseOutsideFbt"
000016ab 74617475735f4572
000016b3 6173654f75747369
000016bb 646546627400    
000016c1 a305             13273		.byte	163,5
000016c3 05               13274		.byte	5
000016c4 2f               13275		.byte	47
000016c5 31               13276		.byte	49
                          13277	
                          13278	.LDW_5c0e468:
000016c6 2f               13279		.byte	47
000016c7 6b46626c4d656d53 13280		.strz	"kFblMemStatus_EraseDriverNotReady"
000016cf 74617475735f4572
000016d7 6173654472697665
000016df 724e6f7452656164
000016e7 7900            
000016e9 a405             13281		.byte	164,5
000016eb 05               13282		.byte	5
000016ec 2f               13283		.byte	47
000016ed 22               13284		.byte	34
                          13285	
                          13286	.LDW_5c0e5a8:
000016ee 2f               13287		.byte	47
000016ef 6b46626c4d656d53 13288		.strz	"kFblMemStatus_ErasePreErase"
000016f7 74617475735f4572
000016ff 6173655072654572
00001707 61736500        
0000170b a505             13289		.byte	165,5
0000170d 05               13290		.byte	5
0000170e 2f               13291		.byte	47
0000170f 22               13292		.byte	34
                          13293	
                          13294	.LDW_5c0e728:
00001710 2f               13295		.byte	47
00001711 6b46626c4d656d53 13296		.strz	"kFblMemStatus_ErasePostErase"
00001719 74617475735f4572
00001721 617365506f737445
00001729 7261736500      
0000172e a605             13297		.byte	166,5
00001730 05               13298		.byte	5
00001731 2f               13299		.byte	47
00001732 22               13300		.byte	34
                          13301	
                          13302	.LDW_5c0e928:
00001733 2f               13303		.byte	47
00001734 6b46626c4d656d53 13304		.strz	"kFblMemStatus_VerifyCompute"
0000173c 74617475735f5665
00001744 72696679436f6d70
0000174c 75746500        
00001750 a805             13305		.byte	168,5
00001752 05               13306		.byte	5
00001753 2f               13307		.byte	47
00001754 f200             13308		.byte	242,0
                          13309	
                          13310	.LDW_5c0e3e8:
00001756 2f               13311		.byte	47
00001757 6b46626c4d656d53 13312		.strz	"kFblMemStatus_VerifyFinalize"
0000175f 74617475735f5665
00001767 7269667946696e61
0000176f 6c697a6500      
00001774 a905             13313		.byte	169,5
00001776 05               13314		.byte	5
00001777 2f               13315		.byte	47

                                   Fri Apr 10 08:32:15 2020           Page 239
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
00001778 f200             13316		.byte	242,0
                          13317	
                          13318	.LDW_5c0e5e8:
0000177a 2f               13319		.byte	47
0000177b 6b46626c4d656d53 13320		.strz	"kFblMemStatus_PassThroughLocal"
00001783 74617475735f5061
0000178b 73735468726f7567
00001793 684c6f63616c00  
0000179a ab05             13321		.byte	171,5
0000179c 05               13322		.byte	5
0000179d 2f               13323		.byte	47
0000179e 22               13324		.byte	34
                          13325	
                          13326	.LDW_5c0e4a8:
0000179f 2f               13327		.byte	47
000017a0 6b46626c4d656d53 13328		.strz	"kFblMemStatus_PassThroughRemote"
000017a8 74617475735f5061
000017b0 73735468726f7567
000017b8 6852656d6f746500
000017c0 ac05             13329		.byte	172,5
000017c2 05               13330		.byte	5
000017c3 2f               13331		.byte	47
000017c4 22               13332		.byte	34
                          13333	
000017c5 00               13334		.byte	0
                          13335	
                          13336	.LDW_4aea750:
000017c6 2a               13337		.byte	42
000017c7 7446626c4d656d53 13338		.strz	"tFblMemStatus"
000017cf 746174757300    
000017d5 ad05             13339		.byte	173,5
000017d7 03               13340		.byte	3
000017d8 2f               13341		.byte	47
000017d9 00000000         13342		.long	.LDW_4ae9c30
                          13343	
                          13344	.LDW_5d2d9c8:
000017dd 30               13345		.byte	48
000017de 00               13346		.byte	0
000017df b105             13347		.byte	177,5
000017e1 01               13348		.byte	1
000017e2 2f               13349		.byte	47
000017e3 04               13350		.byte	4
000017e4 01               13351		.byte	1
                          13352	
                          13353	.LDW_5c0e1e8:
000017e5 2f               13354		.byte	47
000017e6 6b46626c4d656d54 13355		.strz	"kFblMemType_RAM"
000017ee 7970655f52414d00
000017f6 b205             13356		.byte	178,5
000017f8 04               13357		.byte	4
000017f9 2f               13358		.byte	47
000017fa 00               13359		.byte	0
                          13360	
                          13361	.LDW_5c0e368:
000017fb 2f               13362		.byte	47
000017fc 6b46626c4d656d54 13363		.strz	"kFblMemType_ROM"
00001804 7970655f524f4d00
0000180c b305             13364		.byte	179,5
0000180e 04               13365		.byte	4
0000180f 2f               13366		.byte	47
00001810 01               13367		.byte	1
                          13368	
00001811 00               13369		.byte	0
                          13370	
                          13371	.LDW_5d2dde8:

                                   Fri Apr 10 08:32:15 2020           Page 240
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
00001812 2a               13372		.byte	42
00001813 7446626c4d656d54 13373		.strz	"tFblMemType"
0000181b 79706500        
0000181f b405             13374		.byte	180,5
00001821 03               13375		.byte	3
00001822 2f               13376		.byte	47
00001823 00000000         13377		.long	.LDW_5d2d9c8
                          13378	
                          13379	.LDW_5dbfca0:
00001827 30               13380		.byte	48
00001828 00               13381		.byte	0
00001829 b805             13382		.byte	184,5
0000182b 01               13383		.byte	1
0000182c 2f               13384		.byte	47
0000182d 04               13385		.byte	4
0000182e 01               13386		.byte	1
                          13387	
                          13388	.LDW_5c0e8e8:
0000182f 2f               13389		.byte	47
00001830 6b46626c4d656d50 13390		.strz	"kFblMemProgState_Idle"
00001838 726f675374617465
00001840 5f49646c6500    
00001846 b905             13391		.byte	185,5
00001848 04               13392		.byte	4
00001849 2f               13393		.byte	47
0000184a 00               13394		.byte	0
                          13395	
                          13396	.LDW_5c0e668:
0000184b 2f               13397		.byte	47
0000184c 6b46626c4d656d50 13398		.strz	"kFblMemProgState_Error"
00001854 726f675374617465
0000185c 5f4572726f7200  
00001863 ba05             13399		.byte	186,5
00001865 04               13400		.byte	4
00001866 2f               13401		.byte	47
00001867 01               13402		.byte	1
                          13403	
                          13404	.LDW_5c0e328:
00001868 2f               13405		.byte	47
00001869 6b46626c4d656d50 13406		.strz	"kFblMemProgState_Suspended"
00001871 726f675374617465
00001879 5f53757370656e64
00001881 656400          
00001884 bb05             13407		.byte	187,5
00001886 04               13408		.byte	4
00001887 2f               13409		.byte	47
00001888 02               13410		.byte	2
                          13411	
                          13412	.LDW_5c0e7a8:
00001889 2f               13413		.byte	47
0000188a 6b46626c4d656d50 13414		.strz	"kFblMemProgState_SuspendPending"
00001892 726f675374617465
0000189a 5f53757370656e64
000018a2 50656e64696e6700
000018aa bc05             13415		.byte	188,5
000018ac 04               13416		.byte	4
000018ad 2f               13417		.byte	47
000018ae 03               13418		.byte	3
                          13419	
                          13420	.LDW_5c0e968:
000018af 2f               13421		.byte	47
000018b0 6b46626c4d656d50 13422		.strz	"kFblMemProgState_Checkpoint"
000018b8 726f675374617465
000018c0 5f436865636b706f
000018c8 696e7400        
000018cc bd05             13423		.byte	189,5
000018ce 04               13424		.byte	4
000018cf 2f               13425		.byte	47
000018d0 04               13426		.byte	4
                          13427	

                                   Fri Apr 10 08:32:15 2020           Page 241
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          13428	.LDW_5c0e768:
000018d1 2f               13429		.byte	47
000018d2 6b46626c4d656d50 13430		.strz	"kFblMemProgState_Pending"
000018da 726f675374617465
000018e2 5f50656e64696e67
000018ea 00              
000018eb be05             13431		.byte	190,5
000018ed 04               13432		.byte	4
000018ee 2f               13433		.byte	47
000018ef 05               13434		.byte	5
                          13435	
000018f0 00               13436		.byte	0
                          13437	
                          13438	.LDW_5dbfda8:
000018f1 2a               13439		.byte	42
000018f2 7446626c4d656d50 13440		.strz	"tFblMemProgState"
000018fa 726f675374617465
00001902 00              
00001903 bf05             13441		.byte	191,5
00001905 03               13442		.byte	3
00001906 2f               13443		.byte	47
00001907 00000000         13444		.long	.LDW_5dbfca0
                          13445	
                          13446	.LDW_4aeb9a0:
0000190b 2a               13447		.byte	42
0000190c 7446626c4d656d52 13448		.strz	"tFblMemRamData"
00001914 616d4461746100  
0000191b c205             13449		.byte	194,5
0000191d 37               13450		.byte	55
0000191e 2f               13451		.byte	47
0000191f 00000000         13452		.long	.LDW_4aac6c0
                          13453	
                          13454	.LDW_5d9ce80:
00001923 2a               13455		.byte	42
00001924 7446626c4d656d43 13456		.strz	"tFblMemConstRamData"
0000192c 6f6e737452616d44
00001934 61746100        
00001938 c405             13457		.byte	196,5
0000193a 37               13458		.byte	55
0000193b 2f               13459		.byte	47
0000193c 00000000         13460		.long	.LDW_4aacab0
                          13461	
                          13462	.LDW_5d2de98:
00001940 2a               13463		.byte	42
00001941 7446626c4d656d44 13464		.strz	"tFblMemDfi"
00001949 666900          
0000194c c705             13465		.byte	199,5
0000194e 10               13466		.byte	16
0000194f 2f               13467		.byte	47
00001950 00000000         13468		.long	.LDW_5d29e20
                          13469	
                          13470	.LDW_5d2da20:
00001954 43               13471		.byte	67
00001955 cb05             13472		.byte	203,5
00001957 01               13473		.byte	1
00001958 2f               13474		.byte	47
00001959 08               13475		.byte	8
0000195a 01               13476		.byte	1
                          13477	
                          13478	.LDW_5d2b920:
0000195b 25               13479		.byte	37
0000195c 66756e6374696f6e 13480		.strz	"function"
00001964 00              
00001965 cc05             13481		.byte	204,5
00001967 1f               13482		.byte	31
00001968 2f               13483		.byte	47

                                   Fri Apr 10 08:32:15 2020           Page 242
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
00001969 00000000         13484		.long	.LDW_5d2dce0
0000196d 0223             13485		.byte	2,35
0000196f 00               13486		.byte	0
00001970 01               13487		.byte	1
                          13488	
                          13489	.LDW_5d2c028:
00001971 25               13490		.byte	37
00001972 706172616d00     13491		.strz	"param"
00001978 cd05             13492		.byte	205,5
0000197a 3e               13493		.byte	62
0000197b 2f               13494		.byte	47
0000197c 00000000         13495		.long	.LDW_5d2b500
00001980 0223             13496		.byte	2,35
00001982 04               13497		.byte	4
00001983 01               13498		.byte	1
                          13499	
00001984 00               13500		.byte	0
                          13501	
                          13502	.LDW_5d2da78:
00001985 2a               13503		.byte	42
00001986 7446626c4d656d56 13504		.strz	"tFblMemVerifyRoutineInput"
0000198e 6572696679526f75
00001996 74696e65496e7075
0000199e 7400            
000019a0 ce05             13505		.byte	206,5
000019a2 03               13506		.byte	3
000019a3 2f               13507		.byte	47
000019a4 00000000         13508		.long	.LDW_5d2da20
                          13509	
                          13510	.LDW_5d2e260:
000019a8 43               13511		.byte	67
000019a9 d205             13512		.byte	210,5
000019ab 01               13513		.byte	1
000019ac 2f               13514		.byte	47
000019ad 08               13515		.byte	8
000019ae 01               13516		.byte	1
                          13517	
                          13518	.LDW_5d2b9f8:
000019af 25               13519		.byte	37
000019b0 66756e6374696f6e 13520		.strz	"function"
000019b8 00              
000019b9 d305             13521		.byte	211,5
000019bb 1f               13522		.byte	31
000019bc 2f               13523		.byte	47
000019bd 00000000         13524		.long	.LDW_5d2d8c0
000019c1 0223             13525		.byte	2,35
000019c3 00               13526		.byte	0
000019c4 01               13527		.byte	1
                          13528	
                          13529	.LDW_5e430a0:
000019c5 25               13530		.byte	37
000019c6 706172616d00     13531		.strz	"param"
000019cc d405             13532		.byte	212,5
000019ce 3e               13533		.byte	62
000019cf 2f               13534		.byte	47
000019d0 00000000         13535		.long	.LDW_5d2b3e8
000019d4 0223             13536		.byte	2,35
000019d6 04               13537		.byte	4
000019d7 01               13538		.byte	1
                          13539	

                                   Fri Apr 10 08:32:15 2020           Page 243
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
000019d8 00               13540		.byte	0
                          13541	
                          13542	.LDW_5d2dad0:
000019d9 2a               13543		.byte	42
000019da 7446626c4d656d56 13544		.strz	"tFblMemVerifyRoutineOutput"
000019e2 6572696679526f75
000019ea 74696e654f757470
000019f2 757400          
000019f5 d505             13545		.byte	213,5
000019f7 03               13546		.byte	3
000019f8 2f               13547		.byte	47
000019f9 00000000         13548		.long	.LDW_5d2e260
                          13549	
                          13550	.LDW_5df0a58:
000019fd 43               13551		.byte	67
000019fe d905             13552		.byte	217,5
00001a00 01               13553		.byte	1
00001a01 2f               13554		.byte	47
00001a02 3c               13555		.byte	60
00001a03 01               13556		.byte	1
                          13557	
                          13558	.LDW_5e435f8:
00001a04 25               13559		.byte	37
00001a05 7461726765744164 13560		.strz	"targetAddress"
00001a0d 647265737300    
00001a13 da05             13561		.byte	218,5
00001a15 1f               13562		.byte	31
00001a16 2f               13563		.byte	47
00001a17 00000000         13564		.long	.LDW_5d9ca08
00001a1b 0223             13565		.byte	2,35
00001a1d 00               13566		.byte	0
00001a1e 01               13567		.byte	1
                          13568	
                          13569	.LDW_5e43640:
00001a1f 25               13570		.byte	37
00001a20 7461726765744c65 13571		.strz	"targetLength"
00001a28 6e67746800      
00001a2d db05             13572		.byte	219,5
00001a2f 1f               13573		.byte	31
00001a30 2f               13574		.byte	47
00001a31 00000000         13575		.long	.LDW_5d9c170
00001a35 0223             13576		.byte	2,35
00001a37 04               13577		.byte	4
00001a38 01               13578		.byte	1
                          13579	
                          13580	.LDW_5e430e8:
00001a39 25               13581		.byte	37
00001a3a 6c6f676963616c41 13582		.strz	"logicalAddress"
00001a42 64647265737300  
00001a49 dd05             13583		.byte	221,5
00001a4b 1f               13584		.byte	31
00001a4c 2f               13585		.byte	47
00001a4d 00000000         13586		.long	.LDW_5d9ca08
00001a51 0223             13587		.byte	2,35
00001a53 08               13588		.byte	8
00001a54 01               13589		.byte	1
                          13590	
                          13591	.LDW_5e436d0:
00001a55 25               13592		.byte	37
00001a56 6c6f676963616c4c 13593		.strz	"logicalLength"
00001a5e 656e67746800    
00001a64 de05             13594		.byte	222,5
00001a66 1f               13595		.byte	31

                                   Fri Apr 10 08:32:15 2020           Page 244
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
00001a67 2f               13596		.byte	47
00001a68 00000000         13597		.long	.LDW_5d9c170
00001a6c 0223             13598		.byte	2,35
00001a6e 0c               13599		.byte	12
00001a6f 01               13600		.byte	1
                          13601	
                          13602	.LDW_5e43208:
00001a70 25               13603		.byte	37
00001a71 766572696679526f 13604		.strz	"verifyRoutineInput"
00001a79 7574696e65496e70
00001a81 757400          
00001a84 df05             13605		.byte	223,5
00001a86 1f               13606		.byte	31
00001a87 2f               13607		.byte	47
00001a88 00000000         13608		.long	.LDW_5d2da78
00001a8c 0223             13609		.byte	2,35
00001a8e 10               13610		.byte	16
00001a8f 01               13611		.byte	1
                          13612	
                          13613	.LDW_5e43058:
00001a90 25               13614		.byte	37
00001a91 766572696679526f 13615		.strz	"verifyRoutineProcessed"
00001a99 7574696e6550726f
00001aa1 63657373656400  
00001aa8 e005             13616		.byte	224,5
00001aaa 1f               13617		.byte	31
00001aab 2f               13618		.byte	47
00001aac 00000000         13619		.long	.LDW_5d2da78
00001ab0 0223             13620		.byte	2,35
00001ab2 18               13621		.byte	24
00001ab3 01               13622		.byte	1
                          13623	
                          13624	.LDW_5e42f38:
00001ab4 25               13625		.byte	37
00001ab5 766572696679526f 13626		.strz	"verifyRoutinePipe"
00001abd 7574696e65506970
00001ac5 6500            
00001ac7 e105             13627		.byte	225,5
00001ac9 1f               13628		.byte	31
00001aca 2f               13629		.byte	47
00001acb 00000000         13630		.long	.LDW_5d2da78
00001acf 0223             13631		.byte	2,35
00001ad1 20               13632		.byte	32
00001ad2 01               13633		.byte	1
                          13634	
                          13635	.LDW_5e43520:
00001ad3 25               13636		.byte	37
00001ad4 766572696679526f 13637		.strz	"verifyRoutineOutput"
00001adc 7574696e654f7574
00001ae4 70757400        
00001ae8 e205             13638		.byte	226,5
00001aea 1f               13639		.byte	31
00001aeb 2f               13640		.byte	47
00001aec 00000000         13641		.long	.LDW_5d2dad0
00001af0 0223             13642		.byte	2,35
00001af2 28               13643		.byte	40
00001af3 01               13644		.byte	1
                          13645	
                          13646	.LDW_5e43400:
00001af4 25               13647		.byte	37
00001af5 7265616446637400 13648		.strz	"readFct"
00001afd e305             13649		.byte	227,5
00001aff 1f               13650		.byte	31
00001b00 2f               13651		.byte	47

                                   Fri Apr 10 08:32:15 2020           Page 245
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
00001b01 00000000         13652		.long	.LDW_5d2d918
00001b05 0223             13653		.byte	2,35
00001b07 30               13654		.byte	48
00001b08 01               13655		.byte	1
                          13656	
                          13657	.LDW_5e43718:
00001b09 25               13658		.byte	37
00001b0a 7365676d656e744c 13659		.strz	"segmentList"
00001b12 69737400        
00001b16 e405             13660		.byte	228,5
00001b18 37               13661		.byte	55
00001b19 2f               13662		.byte	47
00001b1a 00000000         13663		.long	.LDW_5d2b298
00001b1e 0223             13664		.byte	2,35
00001b20 34               13665		.byte	52
00001b21 01               13666		.byte	1
                          13667	
                          13668	.LDW_5e43328:
00001b22 25               13669		.byte	37
00001b23 6d61785365676d65 13670		.strz	"maxSegments"
00001b2b 6e747300        
00001b2f e505             13671		.byte	229,5
00001b31 1f               13672		.byte	31
00001b32 2f               13673		.byte	47
00001b33 00000000         13674		.long	.LDW_5d29e20
00001b37 0223             13675		.byte	2,35
00001b39 38               13676		.byte	56
00001b3a 01               13677		.byte	1
                          13678	
00001b3b 00               13679		.byte	0
                          13680	
                          13681	.LDW_5df0e78:
00001b3c 2a               13682		.byte	42
00001b3d 7446626c4d656d42 13683		.strz	"tFblMemBlockInfo"
00001b45 6c6f636b496e666f
00001b4d 00              
00001b4e e605             13684		.byte	230,5
00001b50 03               13685		.byte	3
00001b51 2f               13686		.byte	47
00001b52 00000000         13687		.long	.LDW_5df0a58
                          13688	
                          13689	.LDW_5d2db28:
00001b56 43               13690		.byte	67
00001b57 ea05             13691		.byte	234,5
00001b59 01               13692		.byte	1
00001b5a 2f               13693		.byte	47
00001b5b 08               13694		.byte	8
00001b5c 01               13695		.byte	1
                          13696	
                          13697	.LDW_5e43130:
00001b5d 25               13698		.byte	37
00001b5e 6461746100       13699		.strz	"data"
00001b63 eb05             13700		.byte	235,5
00001b65 13               13701		.byte	19
00001b66 2f               13702		.byte	47
00001b67 00000000         13703		.long	.LDW_4aeb9a0
00001b6b 0223             13704		.byte	2,35
00001b6d 00               13705		.byte	0
00001b6e 01               13706		.byte	1
                          13707	

                                   Fri Apr 10 08:32:15 2020           Page 246
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          13708	.LDW_5e43760:
00001b6f 25               13709		.byte	37
00001b70 6c656e67746800   13710		.strz	"length"
00001b77 ec05             13711		.byte	236,5
00001b79 13               13712		.byte	19
00001b7a 2f               13713		.byte	47
00001b7b 00000000         13714		.long	.LDW_5d9c170
00001b7f 0223             13715		.byte	2,35
00001b81 04               13716		.byte	4
00001b82 01               13717		.byte	1
                          13718	
00001b83 00               13719		.byte	0
                          13720	
                          13721	.LDW_5d2d810:
00001b84 2a               13722		.byte	42
00001b85 7446626c4d656d56 13723		.strz	"tFblMemVerifyData"
00001b8d 6572696679446174
00001b95 6100            
00001b97 ed05             13724		.byte	237,5
00001b99 03               13725		.byte	3
00001b9a 2f               13726		.byte	47
00001b9b 00000000         13727		.long	.LDW_5d2db28
                          13728	
                          13729	.LDW_5df0690:
00001b9f 43               13730		.byte	67
00001ba0 f105             13731		.byte	241,5
00001ba2 01               13732		.byte	1
00001ba3 2f               13733		.byte	47
00001ba4 20               13734		.byte	32
00001ba5 01               13735		.byte	1
                          13736	
                          13737	.LDW_5e435b0:
00001ba6 25               13738		.byte	37
00001ba7 7665726966794461 13739		.strz	"verifyDataInput"
00001baf 7461496e70757400
00001bb7 f205             13740		.byte	242,5
00001bb9 19               13741		.byte	25
00001bba 2f               13742		.byte	47
00001bbb 00000000         13743		.long	.LDW_5d2d810
00001bbf 0223             13744		.byte	2,35
00001bc1 00               13745		.byte	0
00001bc2 01               13746		.byte	1
                          13747	
                          13748	.LDW_5e43568:
00001bc3 25               13749		.byte	37
00001bc4 7665726966794461 13750		.strz	"verifyDataProcessed"
00001bcc 746150726f636573
00001bd4 73656400        
00001bd8 f305             13751		.byte	243,5
00001bda 19               13752		.byte	25
00001bdb 2f               13753		.byte	47
00001bdc 00000000         13754		.long	.LDW_5d2d810
00001be0 0223             13755		.byte	2,35
00001be2 08               13756		.byte	8
00001be3 01               13757		.byte	1
                          13758	
                          13759	.LDW_5e43448:
00001be4 25               13760		.byte	37
00001be5 7665726966794461 13761		.strz	"verifyDataPipe"
00001bed 74615069706500  
00001bf4 f405             13762		.byte	244,5
00001bf6 19               13763		.byte	25

                                   Fri Apr 10 08:32:15 2020           Page 247
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
00001bf7 2f               13764		.byte	47
00001bf8 00000000         13765		.long	.LDW_5d2d810
00001bfc 0223             13766		.byte	2,35
00001bfe 10               13767		.byte	16
00001bff 01               13768		.byte	1
                          13769	
                          13770	.LDW_5e43490:
00001c00 25               13771		.byte	37
00001c01 7665726966794461 13772		.strz	"verifyDataOutput"
00001c09 74614f7574707574
00001c11 00              
00001c12 f505             13773		.byte	245,5
00001c14 19               13774		.byte	25
00001c15 2f               13775		.byte	47
00001c16 00000000         13776		.long	.LDW_5d2d810
00001c1a 0223             13777		.byte	2,35
00001c1c 18               13778		.byte	24
00001c1d 01               13779		.byte	1
                          13780	
00001c1e 00               13781		.byte	0
                          13782	
                          13783	.LDW_5df06e8:
00001c1f 2a               13784		.byte	42
00001c20 7446626c4d656d42 13785		.strz	"tFblMemBlockVerifyData"
00001c28 6c6f636b56657269
00001c30 66794461746100  
00001c37 f605             13786		.byte	246,5
00001c39 03               13787		.byte	3
00001c3a 2f               13788		.byte	47
00001c3b 00000000         13789		.long	.LDW_5df0690
                          13790	
                          13791	.LDW_5df12f0:
00001c3f 43               13792		.byte	67
00001c40 fa05             13793		.byte	250,5
00001c42 01               13794		.byte	1
00001c43 2f               13795		.byte	47
00001c44 18               13796		.byte	24
00001c45 01               13797		.byte	1
                          13798	
                          13799	.LDW_5e433b8:
00001c46 25               13800		.byte	37
00001c47 7461726765744164 13801		.strz	"targetAddress"
00001c4f 647265737300    
00001c55 fb05             13802		.byte	251,5
00001c57 13               13803		.byte	19
00001c58 2f               13804		.byte	47
00001c59 00000000         13805		.long	.LDW_5d9ca08
00001c5d 0223             13806		.byte	2,35
00001c5f 00               13807		.byte	0
00001c60 01               13808		.byte	1
                          13809	
                          13810	.LDW_5e43688:
00001c61 25               13811		.byte	37
00001c62 7461726765744c65 13812		.strz	"targetLength"
00001c6a 6e67746800      
00001c6f fc05             13813		.byte	252,5
00001c71 13               13814		.byte	19
00001c72 2f               13815		.byte	47
00001c73 00000000         13816		.long	.LDW_5d9c170
00001c77 0223             13817		.byte	2,35
00001c79 04               13818		.byte	4
00001c7a 01               13819		.byte	1

                                   Fri Apr 10 08:32:15 2020           Page 248
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          13820	
                          13821	.LDW_5e42ef0:
00001c7b 25               13822		.byte	37
00001c7c 6c6f676963616c41 13823		.strz	"logicalAddress"
00001c84 64647265737300  
00001c8b fe05             13824		.byte	254,5
00001c8d 13               13825		.byte	19
00001c8e 2f               13826		.byte	47
00001c8f 00000000         13827		.long	.LDW_5d9ca08
00001c93 0223             13828		.byte	2,35
00001c95 08               13829		.byte	8
00001c96 01               13830		.byte	1
                          13831	
                          13832	.LDW_5e42ea8:
00001c97 25               13833		.byte	37
00001c98 6c6f676963616c4c 13834		.strz	"logicalLength"
00001ca0 656e67746800    
00001ca6 ff05             13835		.byte	255,5
00001ca8 13               13836		.byte	19
00001ca9 2f               13837		.byte	47
00001caa 00000000         13838		.long	.LDW_5d9c170
00001cae 0223             13839		.byte	2,35
00001cb0 0c               13840		.byte	12
00001cb1 01               13841		.byte	1
                          13842	
                          13843	.LDW_5e434d8:
00001cb2 25               13844		.byte	37
00001cb3 7479706500       13845		.strz	"type"
00001cb8 8106             13846		.byte	129,6
00001cba 13               13847		.byte	19
00001cbb 2f               13848		.byte	47
00001cbc 00000000         13849		.long	.LDW_5d2dde8
00001cc0 0223             13850		.byte	2,35
00001cc2 10               13851		.byte	16
00001cc3 01               13852		.byte	1
                          13853	
                          13854	.LDW_5e42f80:
00001cc4 25               13855		.byte	37
00001cc5 64617461466f726d 13856		.strz	"dataFormat"
00001ccd 617400          
00001cd0 8206             13857		.byte	130,6
00001cd2 13               13858		.byte	19
00001cd3 2f               13859		.byte	47
00001cd4 00000000         13860		.long	.LDW_5d2de98
00001cd8 0223             13861		.byte	2,35
00001cda 14               13862		.byte	20
00001cdb 01               13863		.byte	1
                          13864	
00001cdc 00               13865		.byte	0
                          13866	
                          13867	.LDW_5df0fd8:
00001cdd 2a               13868		.byte	42
00001cde 7446626c4d656d53 13869		.strz	"tFblMemSegmentInfo"
00001ce6 65676d656e74496e
00001cee 666f00          
00001cf1 8306             13870		.byte	131,6
00001cf3 03               13871		.byte	3
00001cf4 2f               13872		.byte	47
00001cf5 00000000         13873		.long	.LDW_5df12f0
                          13874	
                          13875	.LDW_5d29e78:

                                   Fri Apr 10 08:32:15 2020           Page 249
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
00001cf9 2a               13876		.byte	42
00001cfa 7446626c4d656d54 13877		.strz	"tFblMemTriggerStatus"
00001d02 7269676765725374
00001d0a 6174757300      
00001d0f 8706             13878		.byte	135,6
00001d11 2b               13879		.byte	43
00001d12 2f               13880		.byte	47
00001d13 00000000         13881		.long	.LDW_5d29e20
                          13882	
                          13883	.LDW_5df0f80:
00001d17 2a               13884		.byte	42
00001d18 7446626c4d656d49 13885		.strz	"tFblMemInputSource"
00001d20 6e707574536f7572
00001d28 636500          
00001d2b 8d06             13886		.byte	141,6
00001d2d 10               13887		.byte	16
00001d2e 2f               13888		.byte	47
00001d2f 00000000         13889		.long	.LDW_4ae9b80
                          13890	
                          13891	.LDW_5df0f28:
00001d33 2a               13892		.byte	42
00001d34 7446626c4d656d41 13893		.strz	"tFblMemAllowedInd"
00001d3c 6c6c6f776564496e
00001d44 6400            
00001d46 cd05             13894		.byte	205,5
00001d48 10               13895		.byte	16
00001d49 01               13896		.byte	1
00001d4a 00000000         13897		.long	.LDW_4ae9b80
                          13898	
                          13899	.LDW_5d9c590:
00001d4e 30               13900		.byte	48
00001d4f 00               13901		.byte	0
00001d50 d205             13902		.byte	210,5
00001d52 01               13903		.byte	1
00001d53 01               13904		.byte	1
00001d54 04               13905		.byte	4
00001d55 01               13906		.byte	1
                          13907	
                          13908	.LDW_5c0e868:
00001d56 2f               13909		.byte	47
00001d57 6b46626c4d656d4a 13910		.strz	"kFblMemJobType_InputWrite"
00001d5f 6f62547970655f49
00001d67 6e70757457726974
00001d6f 6500            
00001d71 d305             13911		.byte	211,5
00001d73 04               13912		.byte	4
00001d74 01               13913		.byte	1
00001d75 00               13914		.byte	0
                          13915	
                          13916	.LDW_5c0e628:
00001d76 2f               13917		.byte	47
00001d77 6b46626c4d656d4a 13918		.strz	"kFblMemJobType_WriteFinalize"
00001d7f 6f62547970655f57
00001d87 7269746546696e61
00001d8f 6c697a6500      
00001d94 d505             13919		.byte	213,5
00001d96 06               13920		.byte	6
00001d97 01               13921		.byte	1
00001d98 01               13922		.byte	1
                          13923	
                          13924	.LDW_5c0e2e8:
00001d99 2f               13925		.byte	47
00001d9a 6b46626c4d656d4a 13926		.strz	"kFblMemJobType_GapFill"
00001da2 6f62547970655f47
00001daa 617046696c6c00  
00001db1 e205             13927		.byte	226,5
00001db3 06               13928		.byte	6
00001db4 01               13929		.byte	1
00001db5 02               13930		.byte	2
                          13931	

                                   Fri Apr 10 08:32:15 2020           Page 250
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          13932	.LDW_5c0e828:
00001db6 2f               13933		.byte	47
00001db7 6b46626c4d656d4a 13934		.strz	"kFblMemJobType_Max"
00001dbf 6f62547970655f4d
00001dc7 617800          
00001dca e405             13935		.byte	228,5
00001dcc 06               13936		.byte	6
00001dcd 01               13937		.byte	1
00001dce 03               13938		.byte	3
                          13939	
00001dcf 00               13940		.byte	0
                          13941	
                          13942	.LDW_5d9c958:
00001dd0 2a               13943		.byte	42
00001dd1 7446626c4d656d4a 13944		.strz	"tFblMemJobType"
00001dd9 6f625479706500  
00001de0 e505             13945		.byte	229,5
00001de2 03               13946		.byte	3
00001de3 01               13947		.byte	1
00001de4 00000000         13948		.long	.LDW_5d9c590
                          13949	
                          13950	.LDW_5dbf6c8:
00001de8 30               13951		.byte	48
00001de9 00               13952		.byte	0
00001dea eb05             13953		.byte	235,5
00001dec 01               13954		.byte	1
00001ded 01               13955		.byte	1
00001dee 04               13956		.byte	4
00001def 01               13957		.byte	1
                          13958	
                          13959	.LDW_5c0e6a8:
00001df0 2f               13960		.byte	47
00001df1 6b46626c4d656d4f 13961		.strz	"kFblMemOperationMode_Normal"
00001df9 7065726174696f6e
00001e01 4d6f64655f4e6f72
00001e09 6d616c00        
00001e0d ec05             13962		.byte	236,5
00001e0f 04               13963		.byte	4
00001e10 01               13964		.byte	1
00001e11 00               13965		.byte	0
                          13966	
                          13967	.LDW_5c0e7e8:
00001e12 2f               13968		.byte	47
00001e13 6b46626c4d656d4f 13969		.strz	"kFblMemOperationMode_Finalize"
00001e1b 7065726174696f6e
00001e23 4d6f64655f46696e
00001e2b 616c697a6500    
00001e31 ed05             13970		.byte	237,5
00001e33 04               13971		.byte	4
00001e34 01               13972		.byte	1
00001e35 01               13973		.byte	1
                          13974	
                          13975	.LDW_5c0e1a8:
00001e36 2f               13976		.byte	47
00001e37 6b46626c4d656d4f 13977		.strz	"kFblMemOperationMode_Unconditional"
00001e3f 7065726174696f6e
00001e47 4d6f64655f556e63
00001e4f 6f6e646974696f6e
00001e57 616c00          
00001e5a ee05             13978		.byte	238,5
00001e5c 04               13979		.byte	4
00001e5d 01               13980		.byte	1
00001e5e 02               13981		.byte	2
                          13982	
00001e5f 00               13983		.byte	0
                          13984	
                          13985	.LDW_5dbf7d0:
00001e60 2a               13986		.byte	42
00001e61 7446626c4d656d4f 13987		.strz	"tFblMemOperationMode"
00001e69 7065726174696f6e
00001e71 4d6f646500      

                                   Fri Apr 10 08:32:15 2020           Page 251
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
00001e76 ef05             13988		.byte	239,5
00001e78 03               13989		.byte	3
00001e79 01               13990		.byte	1
00001e7a 00000000         13991		.long	.LDW_5dbf6c8
                          13992	
                          13993	.LDW_5d2e730:
00001e7e 43               13994		.byte	67
00001e7f f205             13995		.byte	242,5
00001e81 09               13996		.byte	9
00001e82 01               13997		.byte	1
00001e83 9820             13998		.byte	152,32
00001e85 01               13999		.byte	1
                          14000	
                          14001	.LDW_5e43178:
00001e86 25               14002		.byte	37
00001e87 63616e6172794672 14003		.strz	"canaryFront"
00001e8f 6f6e7400        
00001e93 f205             14004		.byte	242,5
00001e95 09               14005		.byte	9
00001e96 01               14006		.byte	1
00001e97 00000000         14007		.long	.LDW_4ae9b80
00001e9b 0223             14008		.byte	2,35
00001e9d 00               14009		.byte	0
00001e9e 01               14010		.byte	1
                          14011	
                          14012	.LDW_5e431c0:
00001e9f 25               14013		.byte	37
00001ea0 6461746100       14014		.strz	"data"
00001ea5 f205             14015		.byte	242,5
00001ea7 09               14016		.byte	9
00001ea8 01               14017		.byte	1
00001ea9 00000000         14018		.long	.LDW_5d2d108
00001ead 0223             14019		.byte	2,35
00001eaf 04               14020		.byte	4
00001eb0 01               14021		.byte	1
                          14022	
                          14023	.LDW_5e43250:
00001eb1 25               14024		.byte	37
00001eb2 63616e6172794261 14025		.strz	"canaryBack"
00001eba 636b00          
00001ebd f205             14026		.byte	242,5
00001ebf 09               14027		.byte	9
00001ec0 01               14028		.byte	1
00001ec1 00000000         14029		.long	.LDW_4ae9b80
00001ec5 0323             14030		.byte	3,35
00001ec7 9420             14031		.byte	148,32
00001ec9 01               14032		.byte	1
                          14033	
00001eca 00               14034		.byte	0
                          14035	
                          14036	.LDW_5d2e418:
00001ecb 2a               14037		.byte	42
00001ecc 7446626c4d656d49 14038		.strz	"tFblMemInputBuffer"
00001ed4 6e70757442756666
00001edc 657200          
00001edf f205             14039		.byte	242,5
00001ee1 46               14040		.byte	70
00001ee2 01               14041		.byte	1
00001ee3 00000000         14042		.long	.LDW_5d2e730
                          14043	

                                   Fri Apr 10 08:32:15 2020           Page 252
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          14044	.LDW_5d2e310:
00001ee7 43               14045		.byte	67
00001ee8 f905             14046		.byte	249,5
00001eea 09               14047		.byte	9
00001eeb 01               14048		.byte	1
00001eec 8802             14049		.byte	136,2
00001eee 01               14050		.byte	1
                          14051	
                          14052	.LDW_5e43298:
00001eef 25               14053		.byte	37
00001ef0 63616e6172794672 14054		.strz	"canaryFront"
00001ef8 6f6e7400        
00001efc f905             14055		.byte	249,5
00001efe 09               14056		.byte	9
00001eff 01               14057		.byte	1
00001f00 00000000         14058		.long	.LDW_4ae9b80
00001f04 0223             14059		.byte	2,35
00001f06 00               14060		.byte	0
00001f07 01               14061		.byte	1
                          14062	
                          14063	.LDW_5e43370:
00001f08 25               14064		.byte	37
00001f09 6461746100       14065		.strz	"data"
00001f0e f905             14066		.byte	249,5
00001f10 09               14067		.byte	9
00001f11 01               14068		.byte	1
00001f12 00000000         14069		.long	.LDW_5d2d218
00001f16 0223             14070		.byte	2,35
00001f18 04               14071		.byte	4
00001f19 01               14072		.byte	1
                          14073	
                          14074	.LDW_5e432e0:
00001f1a 25               14075		.byte	37
00001f1b 63616e6172794261 14076		.strz	"canaryBack"
00001f23 636b00          
00001f26 f905             14077		.byte	249,5
00001f28 09               14078		.byte	9
00001f29 01               14079		.byte	1
00001f2a 00000000         14080		.long	.LDW_4ae9b80
00001f2e 0323             14081		.byte	3,35
00001f30 8402             14082		.byte	132,2
00001f32 01               14083		.byte	1
                          14084	
00001f33 00               14085		.byte	0
                          14086	
                          14087	.LDW_5d2e788:
00001f34 2a               14088		.byte	42
00001f35 7446626c4d656d47 14089		.strz	"tFblMemGapFillBuffer"
00001f3d 617046696c6c4275
00001f45 6666657200      
00001f4a f905             14090		.byte	249,5
00001f4c 46               14091		.byte	70
00001f4d 01               14092		.byte	1
00001f4e 00000000         14093		.long	.LDW_5d2e310
                          14094	
                          14095	.LDW_5d2e520:
00001f52 43               14096		.byte	67
00001f53 fd05             14097		.byte	253,5
00001f55 09               14098		.byte	9
00001f56 01               14099		.byte	1

                                   Fri Apr 10 08:32:15 2020           Page 253
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
00001f57 10               14100		.byte	16
00001f58 01               14101		.byte	1
                          14102	
                          14103	.LDW_5e43b08:
00001f59 25               14104		.byte	37
00001f5a 63616e6172794672 14105		.strz	"canaryFront"
00001f62 6f6e7400        
00001f66 fd05             14106		.byte	253,5
00001f68 09               14107		.byte	9
00001f69 01               14108		.byte	1
00001f6a 00000000         14109		.long	.LDW_4ae9b80
00001f6e 0223             14110		.byte	2,35
00001f70 00               14111		.byte	0
00001f71 01               14112		.byte	1
                          14113	
                          14114	.LDW_5e43d48:
00001f72 25               14115		.byte	37
00001f73 6461746100       14116		.strz	"data"
00001f78 fd05             14117		.byte	253,5
00001f7a 09               14118		.byte	9
00001f7b 01               14119		.byte	1
00001f7c 00000000         14120		.long	.LDW_5d2d5d0
00001f80 0223             14121		.byte	2,35
00001f82 04               14122		.byte	4
00001f83 01               14123		.byte	1
                          14124	
                          14125	.LDW_5e43d90:
00001f84 25               14126		.byte	37
00001f85 63616e6172794261 14127		.strz	"canaryBack"
00001f8d 636b00          
00001f90 fd05             14128		.byte	253,5
00001f92 09               14129		.byte	9
00001f93 01               14130		.byte	1
00001f94 00000000         14131		.long	.LDW_4ae9b80
00001f98 0223             14132		.byte	2,35
00001f9a 0c               14133		.byte	12
00001f9b 01               14134		.byte	1
                          14135	
00001f9c 00               14136		.byte	0
                          14137	
                          14138	.LDW_5d2e368:
00001f9d 2a               14139		.byte	42
00001f9e 7446626c4d656d52 14140		.strz	"tFblMemRemainderBuffer"
00001fa6 656d61696e646572
00001fae 42756666657200  
00001fb5 fd05             14141		.byte	253,5
00001fb7 46               14142		.byte	70
00001fb8 01               14143		.byte	1
00001fb9 00000000         14144		.long	.LDW_5d2e520
                          14145	
                          14146	.LDW_4ae9898:
00001fbd 43               14147		.byte	67
00001fbe 8206             14148		.byte	130,6
00001fc0 01               14149		.byte	1
00001fc1 01               14150		.byte	1
00001fc2 28               14151		.byte	40
00001fc3 01               14152		.byte	1
                          14153	
                          14154	.LDW_5e43be0:
00001fc4 25               14155		.byte	37

                                   Fri Apr 10 08:32:15 2020           Page 254
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
00001fc5 62756666657200   14156		.strz	"buffer"
00001fcc 8306             14157		.byte	131,6
00001fce 19               14158		.byte	25
00001fcf 01               14159		.byte	1
00001fd0 00000000         14160		.long	.LDW_4aeb9a0
00001fd4 0223             14161		.byte	2,35
00001fd6 00               14162		.byte	0
00001fd7 01               14163		.byte	1
                          14164	
                          14165	.LDW_5e437a8:
00001fd8 25               14166		.byte	37
00001fd9 746f74616c53697a 14167		.strz	"totalSize"
00001fe1 6500            
00001fe3 8406             14168		.byte	132,6
00001fe5 19               14169		.byte	25
00001fe6 01               14170		.byte	1
00001fe7 00000000         14171		.long	.LDW_5d9c170
00001feb 0223             14172		.byte	2,35
00001fed 04               14173		.byte	4
00001fee 01               14174		.byte	1
                          14175	
                          14176	.LDW_5e43dd8:
00001fef 25               14177		.byte	37
00001ff0 6e657453697a6500 14178		.strz	"netSize"
00001ff8 8506             14179		.byte	133,6
00001ffa 19               14180		.byte	25
00001ffb 01               14181		.byte	1
00001ffc 00000000         14182		.long	.LDW_5d9c170
00002000 0223             14183		.byte	2,35
00002002 08               14184		.byte	8
00002003 01               14185		.byte	1
                          14186	
                          14187	.LDW_5e43b50:
00002004 25               14188		.byte	37
00002005 6f666673657400   14189		.strz	"offset"
0000200c 8606             14190		.byte	134,6
0000200e 19               14191		.byte	25
0000200f 01               14192		.byte	1
00002010 00000000         14193		.long	.LDW_5d9c170
00002014 0223             14194		.byte	2,35
00002016 0c               14195		.byte	12
00002017 01               14196		.byte	1
                          14197	
                          14198	.LDW_5e439a0:
00002018 25               14199		.byte	37
00002019 706f736974696f6e 14200		.strz	"position"
00002021 00              
00002022 8706             14201		.byte	135,6
00002024 19               14202		.byte	25
00002025 01               14203		.byte	1
00002026 00000000         14204		.long	.LDW_5d9c170
0000202a 0223             14205		.byte	2,35
0000202c 10               14206		.byte	16
0000202d 01               14207		.byte	1
                          14208	
                          14209	.LDW_5e439e8:
0000202e 25               14210		.byte	37
0000202f 7573656400       14211		.strz	"used"

                                   Fri Apr 10 08:32:15 2020           Page 255
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
00002034 8806             14212		.byte	136,6
00002036 19               14213		.byte	25
00002037 01               14214		.byte	1
00002038 00000000         14215		.long	.LDW_5d9c170
0000203c 0223             14216		.byte	2,35
0000203e 14               14217		.byte	20
0000203f 01               14218		.byte	1
                          14219	
                          14220	.LDW_5e43ac0:
00002040 25               14221		.byte	37
00002041 6261736541646472 14222		.strz	"baseAddress"
00002049 65737300        
0000204d 8a06             14223		.byte	138,6
0000204f 19               14224		.byte	25
00002050 01               14225		.byte	1
00002051 00000000         14226		.long	.LDW_5d9ca08
00002055 0223             14227		.byte	2,35
00002057 18               14228		.byte	24
00002058 01               14229		.byte	1
                          14230	
                          14231	.LDW_5e43d00:
00002059 25               14232		.byte	37
0000205a 7479706500       14233		.strz	"type"
0000205f 8c06             14234		.byte	140,6
00002061 19               14235		.byte	25
00002062 01               14236		.byte	1
00002063 00000000         14237		.long	.LDW_5d9c958
00002067 0223             14238		.byte	2,35
00002069 1c               14239		.byte	28
0000206a 01               14240		.byte	1
                          14241	
                          14242	.LDW_5e43a78:
0000206b 25               14243		.byte	37
0000206c 636f6d706c657469 14244		.strz	"completion"
00002074 6f6e00          
00002077 8d06             14245		.byte	141,6
00002079 19               14246		.byte	25
0000207a 01               14247		.byte	1
0000207b 00000000         14248		.long	.LDW_5dbf7d0
0000207f 0223             14249		.byte	2,35
00002081 20               14250		.byte	32
00002082 01               14251		.byte	1
                          14252	
                          14253	.LDW_5e43cb8:
00002083 25               14254		.byte	37
00002084 7365676d656e7449 14255		.strz	"segmentIndex"
0000208c 6e64657800      
00002091 8e06             14256		.byte	142,6
00002093 19               14257		.byte	25
00002094 01               14258		.byte	1
00002095 00000000         14259		.long	.LDW_4ae9b80
00002099 0223             14260		.byte	2,35
0000209b 24               14261		.byte	36
0000209c 01               14262		.byte	1
                          14263	
0000209d 00               14264		.byte	0
                          14265	
                          14266	.LDW_4ae98f0:
0000209e 2a               14267		.byte	42

                                   Fri Apr 10 08:32:15 2020           Page 256
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
0000209f 7446626c4d656d4a 14268		.strz	"tFblMemJob"
000020a7 6f6200          
000020aa 8f06             14269		.byte	143,6
000020ac 03               14270		.byte	3
000020ad 01               14271		.byte	1
000020ae 00000000         14272		.long	.LDW_4ae9898
                          14273	
                          14274	.LDW_5d2e3c0:
000020b2 43               14275		.byte	67
000020b3 9306             14276		.byte	147,6
000020b5 01               14277		.byte	1
000020b6 01               14278		.byte	1
000020b7 34               14279		.byte	52
000020b8 01               14280		.byte	1
                          14281	
                          14282	.LDW_5e43880:
000020b9 25               14283		.byte	37
000020ba 696e70757400     14284		.strz	"input"
000020c0 9406             14285		.byte	148,6
000020c2 19               14286		.byte	25
000020c3 01               14287		.byte	1
000020c4 00000000         14288		.long	.LDW_5df0fd8
000020c8 0223             14289		.byte	2,35
000020ca 00               14290		.byte	0
000020cb 01               14291		.byte	1
                          14292	
                          14293	.LDW_5e43b98:
000020cc 25               14294		.byte	37
000020cd 7772697465416464 14295		.strz	"writeAddress"
000020d5 7265737300      
000020da 9606             14296		.byte	150,6
000020dc 19               14297		.byte	25
000020dd 01               14298		.byte	1
000020de 00000000         14299		.long	.LDW_5d9ca08
000020e2 0223             14300		.byte	2,35
000020e4 18               14301		.byte	24
000020e5 01               14302		.byte	1
                          14303	
                          14304	.LDW_5e438c8:
000020e6 25               14305		.byte	37
000020e7 777269746552656d 14306		.strz	"writeRemainder"
000020ef 61696e64657200  
000020f6 9706             14307		.byte	151,6
000020f8 19               14308		.byte	25
000020f9 01               14309		.byte	1
000020fa 00000000         14310		.long	.LDW_5d9c170
000020fe 0223             14311		.byte	2,35
00002100 1c               14312		.byte	28
00002101 01               14313		.byte	1
                          14314	
                          14315	.LDW_5e43e20:
00002102 25               14316		.byte	37
00002103 77726974654c656e 14317		.strz	"writeLength"
0000210b 67746800        
0000210f 9806             14318		.byte	152,6
00002111 19               14319		.byte	25
00002112 01               14320		.byte	1
00002113 00000000         14321		.long	.LDW_5d9c170
00002117 0223             14322		.byte	2,35
00002119 20               14323		.byte	32

                                   Fri Apr 10 08:32:15 2020           Page 257
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
0000211a 01               14324		.byte	1
                          14325	
                          14326	.LDW_5e437f0:
0000211b 25               14327		.byte	37
0000211c 696e707574416464 14328		.strz	"inputAddress"
00002124 7265737300      
00002129 9d06             14329		.byte	157,6
0000212b 19               14330		.byte	25
0000212c 01               14331		.byte	1
0000212d 00000000         14332		.long	.LDW_5d9c170
00002131 0223             14333		.byte	2,35
00002133 24               14334		.byte	36
00002134 01               14335		.byte	1
                          14336	
                          14337	.LDW_5e43838:
00002135 25               14338		.byte	37
00002136 6a6f625479706500 14339		.strz	"jobType"
0000213e a506             14340		.byte	165,6
00002140 19               14341		.byte	25
00002141 01               14342		.byte	1
00002142 00000000         14343		.long	.LDW_5d9c958
00002146 0223             14344		.byte	2,35
00002148 28               14345		.byte	40
00002149 01               14346		.byte	1
                          14347	
                          14348	.LDW_5e43910:
0000214a 25               14349		.byte	37
0000214b 6f776e496e646578 14350		.strz	"ownIndex"
00002153 00              
00002154 a706             14351		.byte	167,6
00002156 19               14352		.byte	25
00002157 01               14353		.byte	1
00002158 00000000         14354		.long	.LDW_4ae9b80
0000215c 0223             14355		.byte	2,35
0000215e 2c               14356		.byte	44
0000215f 01               14357		.byte	1
                          14358	
                          14359	.LDW_5e43a30:
00002160 25               14360		.byte	37
00002161 6e657874496e6465 14361		.strz	"nextIndex"
00002169 7800            
0000216b a806             14362		.byte	168,6
0000216d 19               14363		.byte	25
0000216e 01               14364		.byte	1
0000216f 00000000         14365		.long	.LDW_4ae9b80
00002173 0223             14366		.byte	2,35
00002175 30               14367		.byte	48
00002176 01               14368		.byte	1
                          14369	
00002177 00               14370		.byte	0
                          14371	
                          14372	.LDW_5d2e5d0:
00002178 2a               14373		.byte	42
00002179 7446626c4d656d53 14374		.strz	"tFblMemSegmentInternal"
00002181 65676d656e74496e
00002189 7465726e616c00  
00002190 a906             14375		.byte	169,6
00002192 03               14376		.byte	3
00002193 01               14377		.byte	1
00002194 00000000         14378		.long	.LDW_5d2e3c0
                          14379	

                                   Fri Apr 10 08:32:15 2020           Page 258
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          14380	.LDW_5c3d388:
00002198 2a               14381		.byte	42
00002199 7446626c4d656d51 14382		.strz	"tFblMemQueuePrio"
000021a1 756575655072696f
000021a9 00              
000021aa ad06             14383		.byte	173,6
000021ac 10               14384		.byte	16
000021ad 01               14385		.byte	1
000021ae 00000000         14386		.long	.LDW_5d29e20
                          14387	
                          14388	.LDW_5d2e470:
000021b2 30               14389		.byte	48
000021b3 00               14390		.byte	0
000021b4 b106             14391		.byte	177,6
000021b6 01               14392		.byte	1
000021b7 01               14393		.byte	1
000021b8 04               14394		.byte	4
000021b9 01               14395		.byte	1
                          14396	
                          14397	.LDW_5c0e6e8:
000021ba 2f               14398		.byte	47
000021bb 6b46626c4d656d4a 14399		.strz	"kFblMemJobPrio_Lowest"
000021c3 6f625072696f5f4c
000021cb 6f7765737400    
000021d1 b206             14400		.byte	178,6
000021d3 04               14401		.byte	4
000021d4 01               14402		.byte	1
000021d5 00               14403		.byte	0
                          14404	
                          14405	.LDW_5c0e268:
000021d6 2f               14406		.byte	47
000021d7 6b46626c4d656d4a 14407		.strz	"kFblMemJobPrio_Write"
000021df 6f625072696f5f57
000021e7 7269746500      
000021ec b306             14408		.byte	179,6
000021ee 04               14409		.byte	4
000021ef 01               14410		.byte	1
000021f0 01               14411		.byte	1
                          14412	
                          14413	.LDW_5c0e4e8:
000021f1 2f               14414		.byte	47
000021f2 6b46626c4d656d4a 14415		.strz	"kFblMemJobPrio_GapFill"
000021fa 6f625072696f5f47
00002202 617046696c6c00  
00002209 b506             14416		.byte	181,6
0000220b 04               14417		.byte	4
0000220c 01               14418		.byte	1
0000220d 02               14419		.byte	2
                          14420	
                          14421	.LDW_5c0e8a8:
0000220e 2f               14422		.byte	47
0000220f 6b46626c4d656d4a 14423		.strz	"kFblMemJobPrio_WriteFinalize"
00002217 6f625072696f5f57
0000221f 7269746546696e61
00002227 6c697a6500      
0000222c b806             14424		.byte	184,6
0000222e 04               14425		.byte	4
0000222f 01               14426		.byte	1
00002230 03               14427		.byte	3
                          14428	
                          14429	.LDW_5c0e2a8:
00002231 2f               14430		.byte	47
00002232 6b46626c4d656d4a 14431		.strz	"kFblMemJobPrio_Input"
0000223a 6f625072696f5f49
00002242 6e70757400      
00002247 c006             14432		.byte	192,6
00002249 04               14433		.byte	4
0000224a 01               14434		.byte	1
0000224b 04               14435		.byte	4

                                   Fri Apr 10 08:32:15 2020           Page 259
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          14436	
                          14437	.LDW_5c0e3a8:
0000224c 2f               14438		.byte	47
0000224d 6b46626c4d656d4a 14439		.strz	"kFblMemJobPrio_InputWrite"
00002255 6f625072696f5f49
0000225d 6e70757457726974
00002265 6500            
00002267 c206             14440		.byte	194,6
00002269 04               14441		.byte	4
0000226a 01               14442		.byte	1
0000226b 04               14443		.byte	4
                          14444	
                          14445	.LDW_5c0e428:
0000226c 2f               14446		.byte	47
0000226d 6b46626c4d656d4a 14447		.strz	"kFblMemJobPrio_Highest"
00002275 6f625072696f5f48
0000227d 69676865737400  
00002284 d506             14448		.byte	213,6
00002286 04               14449		.byte	4
00002287 01               14450		.byte	1
00002288 ff01             14451		.byte	255,1
                          14452	
0000228a 00               14453		.byte	0
                          14454	
                          14455	.LDW_5d2e4c8:
0000228b 2a               14456		.byte	42
0000228c 7446626c4d656d4a 14457		.strz	"tFblMemJobPrio"
00002294 6f625072696f00  
0000229b d606             14458		.byte	214,6
0000229d 03               14459		.byte	3
0000229e 01               14460		.byte	1
0000229f 00000000         14461		.long	.LDW_5d2e470
                          14462	
                          14463	.LDW_5c3d8b0:
000022a3 2a               14464		.byte	42
000022a4 7446626c4d656d51 14465		.strz	"tFblMemQueueHandle"
000022ac 7565756548616e64
000022b4 6c6500          
000022b7 da06             14466		.byte	218,6
000022b9 10               14467		.byte	16
000022ba 01               14468		.byte	1
000022bb 00000000         14469		.long	.LDW_4ae9b80
                          14470	
                          14471	.LDW_5c3d750:
000022bf 43               14472		.byte	67
000022c0 de06             14473		.byte	222,6
000022c2 01               14474		.byte	1
000022c3 01               14475		.byte	1
000022c4 10               14476		.byte	16
000022c5 01               14477		.byte	1
                          14478	
                          14479	.LDW_5e43958:
000022c6 25               14480		.byte	37
000022c7 6a6f6200         14481		.strz	"job"
000022cb df06             14482		.byte	223,6
000022cd 31               14483		.byte	49
000022ce 01               14484		.byte	1
000022cf 00000000         14485		.long	.LDW_4aac688
000022d3 0223             14486		.byte	2,35
000022d5 00               14487		.byte	0
000022d6 01               14488		.byte	1
                          14489	
                          14490	.LDW_5e43c28:
000022d7 25               14491		.byte	37

                                   Fri Apr 10 08:32:15 2020           Page 260
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
000022d8 7072696f00       14492		.strz	"prio"
000022dd e006             14493		.byte	224,6
000022df 31               14494		.byte	49
000022e0 01               14495		.byte	1
000022e1 00000000         14496		.long	.LDW_5c3d388
000022e5 0223             14497		.byte	2,35
000022e7 04               14498		.byte	4
000022e8 01               14499		.byte	1
                          14500	
                          14501	.LDW_5e43c70:
000022e9 25               14502		.byte	37
000022ea 7072657600       14503		.strz	"prev"
000022ef e106             14504		.byte	225,6
000022f1 31               14505		.byte	49
000022f2 01               14506		.byte	1
000022f3 00000000         14507		.long	.LDW_5c3d8b0
000022f7 0223             14508		.byte	2,35
000022f9 08               14509		.byte	8
000022fa 01               14510		.byte	1
                          14511	
                          14512	.LDW_5e44528:
000022fb 25               14513		.byte	37
000022fc 6e65787400       14514		.strz	"next"
00002301 e206             14515		.byte	226,6
00002303 31               14516		.byte	49
00002304 01               14517		.byte	1
00002305 00000000         14518		.long	.LDW_5c3d8b0
00002309 0223             14519		.byte	2,35
0000230b 0c               14520		.byte	12
0000230c 01               14521		.byte	1
                          14522	
0000230d 00               14523		.byte	0
                          14524	
                          14525	.LDW_5c3d280:
0000230e 2a               14526		.byte	42
0000230f 7446626c4d656d51 14527		.strz	"tFblMemQueueEntry"
00002317 75657565456e7472
0000231f 7900            
00002321 e306             14528		.byte	227,6
00002323 03               14529		.byte	3
00002324 01               14530		.byte	1
00002325 00000000         14531		.long	.LDW_5c3d750
                          14532	
                          14533	.LDW_5e45c20:
00002329 07               14534		.byte	7
0000232a 466c617368426c6f 14535		.strz	"FlashBlock"
00002332 636b00          
00002335 42               14536		.byte	66
00002336 3b               14537		.byte	59
00002337 2c               14538		.byte	44
00002338 00000000         14539		.long	.LDW_5d2cf70
0000233c 01               14540		.byte	1
0000233d 01               14541		.byte	1
                          14542	
                          14543		.section	.debug_abbrev
000000c8 07               14544		.byte	7
000000c9 34               14545		.byte	52
000000ca 00               14546		.byte	0
000000cb 0308             14547		.byte	3,8

                                   Fri Apr 10 08:32:15 2020           Page 261
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
000000cd 3b0f             14548		.byte	59,15
000000cf 390f             14549		.byte	57,15
000000d1 3a0f             14550		.byte	58,15
000000d3 4910             14551		.byte	73,16
000000d5 3f0c             14552		.byte	63,12
000000d7 3c0c             14553		.byte	60,12
000000d9 0000             14554		.byte	0,0
                          14555	
                          14556		.section	.debug_info
                          14557	.LDW_5e45d80:
0000233e 07               14558		.byte	7
0000233f 6b4e724f66466c61 14559		.strz	"kNrOfFlashBlock"
00002347 7368426c6f636b00
0000234f 43               14560		.byte	67
00002350 36               14561		.byte	54
00002351 2c               14562		.byte	44
00002352 00000000         14563		.long	.LDW_5d9cf88
00002356 01               14564		.byte	1
00002357 01               14565		.byte	1
                          14566	
                          14567	.LDW_5e46040:
00002358 07               14568		.byte	7
00002359 6d656d4472764c73 14569		.strz	"memDrvLst"
00002361 7400            
00002363 45               14570		.byte	69
00002364 37               14571		.byte	55
00002365 2c               14572		.byte	44
00002366 00000000         14573		.long	.LDW_5d2cee8
0000236a 01               14574		.byte	1
0000236b 01               14575		.byte	1
                          14576	
                          14577	.LDW_5e46358:
0000236c 07               14578		.byte	7
0000236d 6572725374617445 14579		.strz	"errStatErrorCode"
00002375 72726f72436f6465
0000237d 00              
0000237e f102             14580		.byte	241,2
00002380 43               14581		.byte	67
00002381 2e               14582		.byte	46
00002382 00000000         14583		.long	.LDW_5d9ccc8
00002386 01               14584		.byte	1
00002387 01               14585		.byte	1
                          14586	
                          14587	.LDW_5e46098:
00002388 07               14588		.byte	7
00002389 6572725374617446 14589		.strz	"errStatFblStates"
00002391 626c537461746573
00002399 00              
0000239a f202             14590		.byte	242,2
0000239c 43               14591		.byte	67
0000239d 2e               14592		.byte	46
0000239e 00000000         14593		.long	.LDW_5d9ccc8
000023a2 01               14594		.byte	1
000023a3 01               14595		.byte	1
                          14596	
                          14597	.LDW_5e459b8:
000023a4 07               14598		.byte	7
000023a5 6572725374617446 14599		.strz	"errStatFlashDrvErrorCode"
000023ad 6c61736844727645
000023b5 72726f72436f6465
000023bd 00              
000023be f502             14600		.byte	245,2
000023c0 43               14601		.byte	67
000023c1 2e               14602		.byte	46
000023c2 00000000         14603		.long	.LDW_5d9ccc8

                                   Fri Apr 10 08:32:15 2020           Page 262
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
000023c6 01               14604		.byte	1
000023c7 01               14605		.byte	1
                          14606	
                          14607	.LDW_5e460f0:
000023c8 07               14608		.byte	7
000023c9 6572725374617444 14609		.strz	"errStatDescriptor"
000023d1 657363726970746f
000023d9 7200            
000023db f602             14610		.byte	246,2
000023dd 43               14611		.byte	67
000023de 2e               14612		.byte	46
000023df 00000000         14613		.long	.LDW_5e3fde8
000023e3 01               14614		.byte	1
000023e4 01               14615		.byte	1
                          14616	
                          14617	.LDW_5e46148:
000023e5 07               14618		.byte	7
000023e6 6d656d5365676d65 14619		.strz	"memSegment"
000023ee 6e7400          
000023f1 e403             14620		.byte	228,3
000023f3 43               14621		.byte	67
000023f4 2d               14622		.byte	45
000023f5 00000000         14623		.long	.LDW_5d9cb10
000023f9 01               14624		.byte	1
000023fa 01               14625		.byte	1
                          14626	
                          14627	.LDW_5e461a0:
000023fb 07               14628		.byte	7
000023fc 66626c4469616753 14629		.strz	"fblDiagStates"
00002404 746174657300    
0000240a e803             14630		.byte	232,3
0000240c 43               14631		.byte	67
0000240d 2d               14632		.byte	45
0000240e 00000000         14633		.long	.LDW_5d2c888
00002412 01               14634		.byte	1
00002413 01               14635		.byte	1
                          14636	
                          14637	.LDW_5e45a68:
00002414 06               14638		.byte	6
00002415 66626c4d656d5072 14639		.strz	"fblMemProgState"
0000241d 6f67537461746500
00002425 8f07             14640		.byte	143,7
00002427 3e               14641		.byte	62
00002428 01               14642		.byte	1
00002429 00000000         14643		.long	.LDW_5dbfda8
0000242d 01               14644		.byte	1
0000242e 00               14645		.byte	0
0000242f 0503             14646		.byte	5,3
00002431 00000000         14647		.long	fblMemProgState
                          14648	
                          14649		.section	.debug_abbrev
000000db 06               14650		.byte	6
000000dc 34               14651		.byte	52
000000dd 00               14652		.byte	0
000000de 0308             14653		.byte	3,8
000000e0 3b0f             14654		.byte	59,15
000000e2 390f             14655		.byte	57,15
000000e4 3a0f             14656		.byte	58,15
000000e6 4910             14657		.byte	73,16
000000e8 3f0c             14658		.byte	63,12
000000ea 3c0c             14659		.byte	60,12

                                   Fri Apr 10 08:32:15 2020           Page 263
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
000000ec 020a             14660		.byte	2,10
000000ee 0000             14661		.byte	0,0
                          14662	
                          14663		.section	.debug_info
                          14664	.LDW_5e45bc8:
00002435 06               14665		.byte	6
00002436 67416c6c6f776564 14666		.strz	"gAllowedInd"
0000243e 496e6400        
00002442 9807             14667		.byte	152,7
00002444 3e               14668		.byte	62
00002445 01               14669		.byte	1
00002446 00000000         14670		.long	.LDW_5df0f28
0000244a 00               14671		.byte	0
0000244b 00               14672		.byte	0
0000244c 0503             14673		.byte	5,3
0000244e 00000000         14674		.long	gAllowedInd..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
                          14675	
                          14676	.LDW_5e45c78:
00002452 06               14677		.byte	6
00002453 674572726f725374 14678		.strz	"gErrorStatus"
0000245b 6174757300      
00002460 9a07             14679		.byte	154,7
00002462 3e               14680		.byte	62
00002463 01               14681		.byte	1
00002464 00000000         14682		.long	.LDW_4aea750
00002468 00               14683		.byte	0
00002469 00               14684		.byte	0
0000246a 0503             14685		.byte	5,3
0000246c 00000000         14686		.long	gErrorStatus..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
                          14687	
                          14688	.LDW_5e46510:
00002470 06               14689		.byte	6
00002471 67426c6f636b496e 14690		.strz	"gBlockInfo"
00002479 666f00          
0000247c 9f07             14691		.byte	159,7
0000247e 3e               14692		.byte	62
0000247f 01               14693		.byte	1
00002480 00000000         14694		.long	.LDW_5df0e78
00002484 00               14695		.byte	0
00002485 00               14696		.byte	0
00002486 0503             14697		.byte	5,3
00002488 00000000         14698		.long	gBlockInfo..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
                          14699	
                          14700	.LDW_5e46da8:
0000248c 06               14701		.byte	6
0000248d 67536567496e666f 14702		.strz	"gSegInfo"
00002495 00              
00002496 a307             14703		.byte	163,7
00002498 3e               14704		.byte	62
00002499 01               14705		.byte	1
0000249a 00000000         14706		.long	.LDW_5d2e5d0
0000249e 00               14707		.byte	0
0000249f 00               14708		.byte	0
000024a0 0503             14709		.byte	5,3
000024a2 00000000         14710		.long	gSegInfo..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
                          14711	
                          14712	.LDW_5e46e00:
000024a6 06               14713		.byte	6
000024a7 67507265616d626c 14714		.strz	"gPreambleBuffer"
000024af 6542756666657200
000024b7 b107             14715		.byte	177,7

                                   Fri Apr 10 08:32:15 2020           Page 264
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
000024b9 3e               14716		.byte	62
000024ba 01               14717		.byte	1
000024bb 00000000         14718		.long	.LDW_5d2d6e0
000024bf 00               14719		.byte	0
000024c0 00               14720		.byte	0
000024c1 0503             14721		.byte	5,3
000024c3 00000000         14722		.long	gPreambleBuffer..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
                          14723	
                          14724	.LDW_5e46a90:
000024c7 06               14725		.byte	6
000024c8 6752656d61696e64 14726		.strz	"gRemainderBuffer"
000024d0 6572427566666572
000024d8 00              
000024d9 b607             14727		.byte	182,7
000024db 3e               14728		.byte	62
000024dc 01               14729		.byte	1
000024dd 00000000         14730		.long	.LDW_5d2e368
000024e1 00               14731		.byte	0
000024e2 00               14732		.byte	0
000024e3 0503             14733		.byte	5,3
000024e5 00000000         14734		.long	gRemainderBuffer..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
                          14735	
                          14736	.LDW_5e46cf8:
000024e9 06               14737		.byte	6
000024ea 674261736963496e 14738		.strz	"gBasicInputBuffer"
000024f2 7075744275666665
000024fa 7200            
000024fc bf07             14739		.byte	191,7
000024fe 3e               14740		.byte	62
000024ff 01               14741		.byte	1
00002500 00000000         14742		.long	.LDW_5d2cff8
00002504 00               14743		.byte	0
00002505 00               14744		.byte	0
00002506 0503             14745		.byte	5,3
00002508 00000000         14746		.long	gBasicInputBuffer..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
                          14747	
                          14748	.LDW_5e46720:
0000250c 06               14749		.byte	6
0000250d 67496e7075744a6f 14750		.strz	"gInputJobs"
00002515 627300          
00002518 c107             14751		.byte	193,7
0000251a 3e               14752		.byte	62
0000251b 01               14753		.byte	1
0000251c 00000000         14754		.long	.LDW_5d2d2a0
00002520 00               14755		.byte	0
00002521 00               14756		.byte	0
00002522 0503             14757		.byte	5,3
00002524 00000000         14758		.long	gInputJobs..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
                          14759	
                          14760	.LDW_5e46b98:
00002528 06               14761		.byte	6
00002529 6757726974654669 14762		.strz	"gWriteFinalizeJob"
00002531 6e616c697a654a6f
00002539 6200            
0000253b c507             14763		.byte	197,7
0000253d 3e               14764		.byte	62
0000253e 01               14765		.byte	1
0000253f 00000000         14766		.long	.LDW_4ae98f0
00002543 00               14767		.byte	0
00002544 00               14768		.byte	0
00002545 0503             14769		.byte	5,3
00002547 00000000         14770		.long	gWriteFinalizeJob..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
                          14771	

                                   Fri Apr 10 08:32:15 2020           Page 265
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          14772	.LDW_5e46ae8:
0000254b 06               14773		.byte	6
0000254c 6747617046696c6c 14774		.strz	"gGapFillJob"
00002554 4a6f6200        
00002558 e807             14775		.byte	232,7
0000255a 3e               14776		.byte	62
0000255b 01               14777		.byte	1
0000255c 00000000         14778		.long	.LDW_4ae98f0
00002560 00               14779		.byte	0
00002561 00               14780		.byte	0
00002562 0503             14781		.byte	5,3
00002564 00000000         14782		.long	gGapFillJob..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
                          14783	
                          14784	.LDW_5e46bf0:
00002568 06               14785		.byte	6
00002569 6747617046696c6c 14786		.strz	"gGapFillBuffer"
00002571 42756666657200  
00002578 e907             14787		.byte	233,7
0000257a 3e               14788		.byte	62
0000257b 01               14789		.byte	1
0000257c 00000000         14790		.long	.LDW_5d2e788
00002580 00               14791		.byte	0
00002581 00               14792		.byte	0
00002582 0503             14793		.byte	5,3
00002584 00000000         14794		.long	gGapFillBuffer..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
                          14795	
                          14796	.LDW_5e46b40:
00002588 06               14797		.byte	6
00002589 6750726f63657373 14798		.strz	"gProcessingQueue"
00002591 696e675175657565
00002599 00              
0000259a ff07             14799		.byte	255,7
0000259c 3e               14800		.byte	62
0000259d 01               14801		.byte	1
0000259e 00000000         14802		.long	.LDW_5d2c800
000025a2 00               14803		.byte	0
000025a3 00               14804		.byte	0
000025a4 0503             14805		.byte	5,3
000025a6 00000000         14806		.long	gProcessingQueue..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
                          14807	
                          14808	.LDW_5e46778:
000025aa 06               14809		.byte	6
000025ab 674a6f625072696f 14810		.strz	"gJobPrio"
000025b3 00              
000025b4 8b08             14811		.byte	139,8
000025b6 37               14812		.byte	55
000025b7 01               14813		.byte	1
000025b8 00000000         14814		.long	.LDW_5d2cc40
000025bc 00               14815		.byte	0
000025bd 00               14816		.byte	0
000025be 0503             14817		.byte	5,3
000025c0 00000000         14818		.long	gJobPrio..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
                          14819	
                          14820	.LDW_5e2ca28:
000025c4 18               14821		.byte	24
000025c5 4d656d4472697665 14822		.strz	"MemDriver_RWriteSync"
000025cd 725f525772697465
000025d5 53796e6300      
000025da a902             14823		.byte	169,2
000025dc 19               14824		.byte	25
000025dd 1d               14825		.byte	29
000025de 00000000         14826		.long	.LDW_5d9cf30
000025e2 01               14827		.byte	1

                                   Fri Apr 10 08:32:15 2020           Page 266
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
000025e3 00               14828		.byte	0
000025e4 01               14829		.byte	1
000025e5 01               14830		.byte	1
000025e6 00               14831		.byte	0
000025e7 01               14832		.byte	1
                          14833	
                          14834		.section	.debug_abbrev
000000f0 18               14835		.byte	24
000000f1 2e               14836		.byte	46
000000f2 01               14837		.byte	1
000000f3 0308             14838		.byte	3,8
000000f5 3b0f             14839		.byte	59,15
000000f7 390f             14840		.byte	57,15
000000f9 3a0f             14841		.byte	58,15
000000fb 4910             14842		.byte	73,16
000000fd 3c0c             14843		.byte	60,12
000000ff 200b             14844		.byte	32,11
00000101 3f0c             14845		.byte	63,12
00000103 320b             14846		.byte	50,11
00000105 4c0b             14847		.byte	76,11
00000107 270c             14848		.byte	39,12
00000109 0000             14849		.byte	0,0
                          14850	
                          14851		.section	.debug_info
000025e8 00               14852		.byte	0
                          14853	
                          14854	.LDW_5e2c010:
000025e9 18               14855		.byte	24
000025ea 4d656d4472697665 14856		.strz	"MemDriver_REraseSync"
000025f2 725f524572617365
000025fa 53796e6300      
000025ff aa02             14857		.byte	170,2
00002601 19               14858		.byte	25
00002602 1d               14859		.byte	29
00002603 00000000         14860		.long	.LDW_5d9cf30
00002607 01               14861		.byte	1
00002608 00               14862		.byte	0
00002609 01               14863		.byte	1
0000260a 01               14864		.byte	1
0000260b 00               14865		.byte	0
0000260c 01               14866		.byte	1
                          14867	
0000260d 00               14868		.byte	0
                          14869	
                          14870	.LDW_5e485f0:
0000260e 18               14871		.byte	24
0000260f 46626c4f776e4d65 14872		.strz	"FblOwnMemcpy"
00002617 6d63707900      
0000261c fc03             14873		.byte	252,3
0000261e 07               14874		.byte	7
0000261f 25               14875		.byte	37
00002620 00000000         14876		.long	.LDW_5e3cff8
00002624 01               14877		.byte	1
00002625 00               14878		.byte	0
00002626 01               14879		.byte	1
00002627 01               14880		.byte	1
00002628 00               14881		.byte	0
00002629 01               14882		.byte	1
                          14883	

                                   Fri Apr 10 08:32:15 2020           Page 267
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
0000262a 00               14884		.byte	0
                          14885	
                          14886	.LDW_5e49268:
0000262b 18               14887		.byte	24
0000262c 46626c5265616c54 14888		.strz	"FblRealTimeSupport"
00002634 696d65537570706f
0000263c 727400          
0000263f ba03             14889		.byte	186,3
00002641 0d               14890		.byte	13
00002642 2d               14891		.byte	45
00002643 00000000         14892		.long	.LDW_5d29e20
00002647 01               14893		.byte	1
00002648 00               14894		.byte	0
00002649 01               14895		.byte	1
0000264a 01               14896		.byte	1
0000264b 00               14897		.byte	0
0000264c 01               14898		.byte	1
                          14899	
0000264d 00               14900		.byte	0
                          14901	
                          14902	.LDW_5e49430:
0000264e 17               14903		.byte	23
0000264f 4469616745785243 14904		.strz	"DiagExRCRResponsePending"
00002657 52526573706f6e73
0000265f 6550656e64696e67
00002667 00              
00002668 bb03             14905		.byte	187,3
0000266a 0d               14906		.byte	13
0000266b 2d               14907		.byte	45
0000266c 01               14908		.byte	1
0000266d 00               14909		.byte	0
0000266e 01               14910		.byte	1
0000266f 01               14911		.byte	1
00002670 00               14912		.byte	0
00002671 01               14913		.byte	1
                          14914	
                          14915		.section	.debug_abbrev
0000010b 17               14916		.byte	23
0000010c 2e               14917		.byte	46
0000010d 01               14918		.byte	1
0000010e 0308             14919		.byte	3,8
00000110 3b0f             14920		.byte	59,15
00000112 390f             14921		.byte	57,15
00000114 3a0f             14922		.byte	58,15
00000116 3c0c             14923		.byte	60,12
00000118 200b             14924		.byte	32,11
0000011a 3f0c             14925		.byte	63,12
0000011c 320b             14926		.byte	50,11
0000011e 4c0b             14927		.byte	76,11
00000120 270c             14928		.byte	39,12
00000122 0000             14929		.byte	0,0
                          14930	
                          14931		.section	.debug_info
00002672 00               14932		.byte	0
                          14933	
                          14934	.LDW_5e4d7d8:
00002673 18               14935		.byte	24
00002674 46626c4d656d5365 14936		.strz	"FblMemSegmentNrGet"
0000267c 676d656e744e7247
00002684 657400          
00002687 c603             14937		.byte	198,3
00002689 0d               14938		.byte	13
0000268a 2d               14939		.byte	45

                                   Fri Apr 10 08:32:15 2020           Page 268
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
0000268b 00000000         14940		.long	.LDW_5d9cb10
0000268f 01               14941		.byte	1
00002690 00               14942		.byte	0
00002691 01               14943		.byte	1
00002692 01               14944		.byte	1
00002693 00               14945		.byte	0
00002694 01               14946		.byte	1
                          14947	
00002695 00               14948		.byte	0
                          14949	
                          14950	.LDW_5e4ddc8:
00002696 18               14951		.byte	24
00002697 46626c446961674d 14952		.strz	"FblDiagMemPreWrite"
0000269f 656d507265577269
000026a7 746500          
000026aa cb03             14953		.byte	203,3
000026ac 0d               14954		.byte	13
000026ad 2d               14955		.byte	45
000026ae 00000000         14956		.long	.LDW_5df09a8
000026b2 01               14957		.byte	1
000026b3 00               14958		.byte	0
000026b4 01               14959		.byte	1
000026b5 01               14960		.byte	1
000026b6 00               14961		.byte	0
000026b7 01               14962		.byte	1
                          14963	
000026b8 00               14964		.byte	0
                          14965	
                          14966	.LDW_5e4db68:
000026b9 18               14967		.byte	24
000026ba 46626c446961674d 14968		.strz	"FblDiagMemPostWrite"
000026c2 656d506f73745772
000026ca 69746500        
000026ce cc03             14969		.byte	204,3
000026d0 0d               14970		.byte	13
000026d1 2d               14971		.byte	45
000026d2 00000000         14972		.long	.LDW_5df09a8
000026d6 01               14973		.byte	1
000026d7 00               14974		.byte	0
000026d8 01               14975		.byte	1
000026d9 01               14976		.byte	1
000026da 00               14977		.byte	0
000026db 01               14978		.byte	1
                          14979	
000026dc 00               14980		.byte	0
                          14981	
                          14982	.LDW_5e4c900:
000026dd 17               14983		.byte	23
000026de 4170706c46626c46 14984		.strz	"ApplFblFatalError"
000026e6 6174616c4572726f
000026ee 7200            
000026f0 c402             14985		.byte	196,2
000026f2 06               14986		.byte	6
000026f3 31               14987		.byte	49
000026f4 01               14988		.byte	1
000026f5 00               14989		.byte	0
000026f6 01               14990		.byte	1
000026f7 01               14991		.byte	1
000026f8 00               14992		.byte	0
000026f9 01               14993		.byte	1
                          14994	
000026fa 00               14995		.byte	0

                                   Fri Apr 10 08:32:15 2020           Page 269
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          14996	
                          14997	.LDW_5d29ed0:
000026fb 16               14998		.byte	22
000026fc 46626c4d656d5472 14999		.strz	"FblMemTriggerWatchdogExt"
00002704 6967676572576174
0000270c 6368646f67457874
00002714 00              
00002715 cd09             15000		.byte	205,9
00002717 1d               15001		.byte	29
00002718 01               15002		.byte	1
00002719 00000000         15003		.long	.LDW_5d29e78
0000271d 00000000         15004		.long	FblMemTriggerWatchdogExt..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
00002721 00000000         15005		.long	__ghs_eofn_FblMemTriggerWatchdogExt
00002725 0151             15006		.byte	1,81
00002727 03               15007		.byte	3
00002728 00               15008		.byte	0
00002729 00               15009		.byte	0
0000272a 00               15010		.byte	0
0000272b 00               15011		.byte	0
0000272c 00               15012		.byte	0
0000272d 00               15013		.byte	0
0000272e 00               15014		.byte	0
0000272f 01               15015		.byte	1
00002730 00               15016		.byte	0
00002731 01               15017		.byte	1
                          15018	
                          15019		.section	.debug_abbrev
00000124 16               15020		.byte	22
00000125 2e               15021		.byte	46
00000126 01               15022		.byte	1
00000127 0308             15023		.byte	3,8
00000129 3b0f             15024		.byte	59,15
0000012b 390f             15025		.byte	57,15
0000012d 3a0f             15026		.byte	58,15
0000012f 4910             15027		.byte	73,16
00000131 1101             15028		.byte	17,1
00000133 1201             15029		.byte	18,1
00000135 400a             15030		.byte	64,10
00000137 8341             15031		.byte	131,65
00000139 0f               15032		.byte	15
0000013a 8741             15033		.byte	135,65
0000013c 0d               15034		.byte	13
0000013d 8541             15035		.byte	133,65
0000013f 0f               15036		.byte	15
00000140 8641             15037		.byte	134,65
00000142 0d               15038		.byte	13
00000143 9241             15039		.byte	146,65
00000145 0f               15040		.byte	15
00000146 3c0c             15041		.byte	60,12
00000148 200b             15042		.byte	32,11
0000014a 3f0c             15043		.byte	63,12
0000014c 320b             15044		.byte	50,11
0000014e 4c0b             15045		.byte	76,11
00000150 270c             15046		.byte	39,12
00000152 0000             15047		.byte	0,0
                          15048	
                          15049		.section	.debug_frame
                          15050	.LDW_5c0e568:
00000090 00000014         15051		.long	.LDW_unq_4-.LDW_unq_3

                                   Fri Apr 10 08:32:15 2020           Page 270
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          15052	.LDW_unq_3:
00000094 00000000         15053		.long	.LDW_5d27e08
00000098 00000000         15054		.long	FblMemTriggerWatchdogExt..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
0000009c 00000004         15055		.long	__ghs_eofn_FblMemTriggerWatchdogExt-FblMemTriggerWatchdogExt..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
000000a0 01               15056		.byte	1
000000a1 00000000         15057		.long	.LDW11
000000a5 00               15058		.byte	0
000000a6 00               15059		.byte	0
000000a7 00               15060		.byte	0
                          15061	.LDW_unq_4:
                          15062		.section	.debug_line
000005fa 000502           15063		.byte	0,5,2
000005fd 00000000         15064		.long	FblMemTriggerWatchdogExt..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
00000601 06               15065		.byte	6
00000602 03               15066		.byte	3
00000603 d309             15067		.byte	211,9
00000605 02               15068		.byte	2
00000606 00               15069		.byte	0
00000607 01               15070		.byte	1
00000608 02               15071		.byte	2
00000609 04               15072		.byte	4
0000060a 000101           15073		.byte	0,1,1
                          15074		.section	.debug_info
                          15075	.LDW_4aa32c8:
00002732 1f               15076		.byte	31
00002733 00000000         15077		.long	.LDW01
00002737 00000000         15078		.long	.LDW11
                          15079	
                          15080		.section	.debug_abbrev
00000154 1f               15081		.byte	31
00000155 0b               15082		.byte	11
00000156 01               15083		.byte	1
00000157 1101             15084		.byte	17,1
00000159 1201             15085		.byte	18,1
0000015b 0000             15086		.byte	0,0
                          15087	
                          15088		.section	.debug_info
                          15089	.LDW_5d29f68:
0000273b 07               15090		.byte	7
0000273c 726573756c7400   15091		.strz	"result"
00002743 cf09             15092		.byte	207,9
00002745 19               15093		.byte	25
00002746 01               15094		.byte	1
00002747 00000000         15095		.long	.LDW_5d29e78
0000274b 00               15096		.byte	0
0000274c 00               15097		.byte	0
                          15098	
0000274d 00               15099		.byte	0
                          15100	
0000274e 00               15101		.byte	0
                          15102	
                          15103	.LDW_4aeb768:
0000274f 15               15104		.byte	21
00002750 46626c4d656d5472 15105		.strz	"FblMemTriggerWatchdog"
00002758 6967676572576174
00002760 6368646f6700    
00002766 e409             15106		.byte	228,9
00002768 0d               15107		.byte	13

                                   Fri Apr 10 08:32:15 2020           Page 271
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
00002769 01               15108		.byte	1
0000276a 00000000         15109		.long	FblMemTriggerWatchdog..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
0000276e 00000000         15110		.long	__ghs_eofn_FblMemTriggerWatchdog
00002772 0151             15111		.byte	1,81
00002774 03               15112		.byte	3
00002775 00               15113		.byte	0
00002776 00               15114		.byte	0
00002777 00               15115		.byte	0
00002778 00               15116		.byte	0
00002779 00               15117		.byte	0
0000277a 00               15118		.byte	0
0000277b 00               15119		.byte	0
0000277c 01               15120		.byte	1
0000277d 00               15121		.byte	0
0000277e 01               15122		.byte	1
                          15123	
                          15124		.section	.debug_abbrev
0000015d 15               15125		.byte	21
0000015e 2e               15126		.byte	46
0000015f 01               15127		.byte	1
00000160 0308             15128		.byte	3,8
00000162 3b0f             15129		.byte	59,15
00000164 390f             15130		.byte	57,15
00000166 3a0f             15131		.byte	58,15
00000168 1101             15132		.byte	17,1
0000016a 1201             15133		.byte	18,1
0000016c 400a             15134		.byte	64,10
0000016e 8341             15135		.byte	131,65
00000170 0f               15136		.byte	15
00000171 8741             15137		.byte	135,65
00000173 0d               15138		.byte	13
00000174 8541             15139		.byte	133,65
00000176 0f               15140		.byte	15
00000177 8641             15141		.byte	134,65
00000179 0d               15142		.byte	13
0000017a 9241             15143		.byte	146,65
0000017c 0f               15144		.byte	15
0000017d 3c0c             15145		.byte	60,12
0000017f 200b             15146		.byte	32,11
00000181 3f0c             15147		.byte	63,12
00000183 320b             15148		.byte	50,11
00000185 4c0b             15149		.byte	76,11
00000187 270c             15150		.byte	39,12
00000189 0000             15151		.byte	0,0
                          15152	
                          15153		.section	.debug_frame
                          15154	.LDW_5c0e9e8:
000000a8 00000014         15155		.long	.LDW_unq_6-.LDW_unq_5
                          15156	.LDW_unq_5:
000000ac 00000000         15157		.long	.LDW_5d27e08
000000b0 00000000         15158		.long	FblMemTriggerWatchdog..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
000000b4 00000002         15159		.long	__ghs_eofn_FblMemTriggerWatchdog-FblMemTriggerWatchdog..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
000000b8 01               15160		.byte	1
000000b9 00000000         15161		.long	.LDW31
000000bd 00               15162		.byte	0
000000be 00               15163		.byte	0

                                   Fri Apr 10 08:32:15 2020           Page 272
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
000000bf 00               15164		.byte	0
                          15165	.LDW_unq_6:
                          15166		.section	.debug_line
0000060d 000502           15167		.byte	0,5,2
00000610 00000000         15168		.long	FblMemTriggerWatchdog..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
00000614 06               15169		.byte	6
00000615 03               15170		.byte	3
00000616 e509             15171		.byte	229,9
00000618 02               15172		.byte	2
00000619 00               15173		.byte	0
0000061a 01               15174		.byte	1
0000061b 000502           15175		.byte	0,5,2
0000061e 00000000         15176		.long	__ghs_eofn_FblMemTriggerWatchdog
00000622 0b               15177		.byte	11
00000623 000101           15178		.byte	0,1,1
                          15179		.section	.debug_info
                          15180	.LDW_4aa33b8:
0000277f 1f               15181		.byte	31
00002780 00000000         15182		.long	.LDW21
00002784 00000000         15183		.long	.LDW31
                          15184	
00002788 00               15185		.byte	0
                          15186	
00002789 00               15187		.byte	0
                          15188	
                          15189	.LDW_4aed9e8:
0000278a 15               15190		.byte	21
0000278b 46626c4d656d5265 15191		.strz	"FblMemResponsePending"
00002793 73706f6e73655065
0000279b 6e64696e6700    
000027a1 f109             15192		.byte	241,9
000027a3 0d               15193		.byte	13
000027a4 01               15194		.byte	1
000027a5 00000000         15195		.long	FblMemResponsePending..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
000027a9 00000000         15196		.long	__ghs_eofn_FblMemResponsePending
000027ad 0151             15197		.byte	1,81
000027af 03               15198		.byte	3
000027b0 00               15199		.byte	0
000027b1 00               15200		.byte	0
000027b2 00               15201		.byte	0
000027b3 00               15202		.byte	0
000027b4 00               15203		.byte	0
000027b5 00               15204		.byte	0
000027b6 00               15205		.byte	0
000027b7 01               15206		.byte	1
000027b8 00               15207		.byte	0
000027b9 01               15208		.byte	1
                          15209	
                          15210		.section	.debug_frame
                          15211	.LDW_5c0f128:
000000c0 00000014         15212		.long	.LDW_unq_8-.LDW_unq_7
                          15213	.LDW_unq_7:
000000c4 00000000         15214		.long	.LDW_5d27e08
000000c8 00000000         15215		.long	FblMemResponsePending..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
000000cc 0000001a         15216		.long	__ghs_eofn_FblMemResponsePending-FblMemResponsePending..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
000000d0 01               15217		.byte	1
000000d1 00000000         15218		.long	.LDW51
000000d5 00               15219		.byte	0

                                   Fri Apr 10 08:32:15 2020           Page 273
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
000000d6 00               15220		.byte	0
000000d7 00               15221		.byte	0
                          15222	.LDW_unq_8:
                          15223		.section	.debug_line
00000626 000502           15224		.byte	0,5,2
00000629 00000000         15225		.long	FblMemResponsePending..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
0000062d 06               15226		.byte	6
0000062e 03               15227		.byte	3
0000062f f109             15228		.byte	241,9
00000631 02               15229		.byte	2
00000632 00               15230		.byte	0
00000633 01               15231		.byte	1
00000634 03               15232		.byte	3
00000635 05               15233		.byte	5
00000636 02               15234		.byte	2
00000637 08               15235		.byte	8
00000638 01               15236		.byte	1
00000639 000502           15237		.byte	0,5,2
0000063c 00000000         15238		.long	.LDWlin2
00000640 0c               15239		.byte	12
00000641 0c               15240		.byte	12
00000642 23               15241		.byte	35
00000643 02               15242		.byte	2
00000644 00               15243		.byte	0
00000645 0d               15244		.byte	13
00000646 02               15245		.byte	2
00000647 02               15246		.byte	2
00000648 000101           15247		.byte	0,1,1
                          15248		.section	.debug_info
                          15249	.LDW_4aa3508:
000027ba 1f               15250		.byte	31
000027bb 00000000         15251		.long	.LDW41
000027bf 00000000         15252		.long	.LDW51
                          15253	
000027c3 00               15254		.byte	0
                          15255	
000027c4 00               15256		.byte	0
                          15257	
                          15258	.LDW_4ae99a0:
000027c5 16               15259		.byte	22
000027c6 46626c4d656d4765 15260		.strz	"FblMemGetBuffer"
000027ce 7442756666657200
000027d6 8a0a             15261		.byte	138,10
000027d8 17               15262		.byte	23
000027d9 01               15263		.byte	1
000027da 00000000         15264		.long	.LDW_4aeb9a0
000027de 00000000         15265		.long	FblMemGetBuffer..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
000027e2 00000000         15266		.long	__ghs_eofn_FblMemGetBuffer
000027e6 0151             15267		.byte	1,81
000027e8 808080800c       15268		.byte	128,128,128,128,12
000027ed 08               15269		.byte	8
000027ee 00               15270		.byte	0
000027ef 10               15271		.byte	16
000027f0 00               15272		.byte	0
000027f1 00               15273		.byte	0
000027f2 00               15274		.byte	0
000027f3 00               15275		.byte	0

                                   Fri Apr 10 08:32:15 2020           Page 274
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
000027f4 01               15276		.byte	1
000027f5 00               15277		.byte	0
000027f6 01               15278		.byte	1
                          15279	
                          15280		.section	.debug_frame
                          15281	.LDW_5c0ed28:
000000d8 00000014         15282		.long	.LDW_unq_a-.LDW_unq_9
                          15283	.LDW_unq_9:
000000dc 00000000         15284		.long	.LDW_5d27e08
000000e0 00000000         15285		.long	FblMemGetBuffer..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
000000e4 0000004a         15286		.long	__ghs_eofn_FblMemGetBuffer-FblMemGetBuffer..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
000000e8 01               15287		.byte	1
000000e9 00000000         15288		.long	.LDW71
000000ed 00               15289		.byte	0
000000ee 00               15290		.byte	0
000000ef 00               15291		.byte	0
                          15292	.LDW_unq_a:
                          15293		.section	.debug_line
0000064b 000502           15294		.byte	0,5,2
0000064e 00000000         15295		.long	FblMemGetBuffer..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
00000652 06               15296		.byte	6
00000653 03               15297		.byte	3
00000654 8a0a             15298		.byte	138,10
00000656 02               15299		.byte	2
00000657 00               15300		.byte	0
00000658 01               15301		.byte	1
00000659 03               15302		.byte	3
0000065a 04               15303		.byte	4
0000065b 02               15304		.byte	2
0000065c 0e               15305		.byte	14
0000065d 01               15306		.byte	1
0000065e 15               15307		.byte	21
0000065f 000502           15308		.byte	0,5,2
00000662 00000000         15309		.long	.LDWlin3
00000666 0b               15310		.byte	11
00000667 0c               15311		.byte	12
00000668 000502           15312		.byte	0,5,2
0000066b 00000000         15313		.long	.LDWlin4
0000066f 0b               15314		.byte	11
00000670 000502           15315		.byte	0,5,2
00000673 00000000         15316		.long	.LDWlin5
00000677 03               15317		.byte	3
00000678 04               15318		.byte	4
00000679 02               15319		.byte	2
0000067a 00               15320		.byte	0
0000067b 01               15321		.byte	1
0000067c 1b               15322		.byte	27
0000067d 02               15323		.byte	2
0000067e 00               15324		.byte	0
0000067f 0d               15325		.byte	13
00000680 06               15326		.byte	6
00000681 02               15327		.byte	2
00000682 02               15328		.byte	2
00000683 02               15329		.byte	2
00000684 0c               15330		.byte	12
00000685 000101           15331		.byte	0,1,1

                                   Fri Apr 10 08:32:15 2020           Page 275
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          15332		.section	.debug_info
                          15333	.LDW_4ae9a38:
000027f7 11               15334		.byte	17
000027f8 6a6f6200         15335		.strz	"job"
000027fc 8a0a             15336		.byte	138,10
000027fe 59               15337		.byte	89
000027ff 01               15338		.byte	1
00002800 00000000         15339		.long	.LDW_4aaca78
00002804 00               15340		.byte	0
00002805 016e             15341		.byte	1,110
                          15342	
                          15343		.section	.debug_abbrev
0000018b 11               15344		.byte	17
0000018c 05               15345		.byte	5
0000018d 00               15346		.byte	0
0000018e 0308             15347		.byte	3,8
00000190 3b0f             15348		.byte	59,15
00000192 390f             15349		.byte	57,15
00000194 3a0f             15350		.byte	58,15
00000196 4910             15351		.byte	73,16
00000198 4b0c             15352		.byte	75,12
0000019a 020a             15353		.byte	2,10
0000019c 0000             15354		.byte	0,0
                          15355	
                          15356		.section	.debug_info
                          15357	.LDW_4aa3208:
00002807 1f               15358		.byte	31
00002808 00000000         15359		.long	.LDW61
0000280c 00000000         15360		.long	.LDW71
                          15361	
                          15362	.LDW_4ae9a90:
00002810 06               15363		.byte	6
00002811 6a6f624275666665 15364		.strz	"jobBuffer"
00002819 7200            
0000281b 8c0a             15365		.byte	140,10
0000281d 13               15366		.byte	19
0000281e 01               15367		.byte	1
0000281f 00000000         15368		.long	.LDW_4aeb9a0
00002823 00               15369		.byte	0
00002824 00               15370		.byte	0
00002825 016f             15371		.byte	1,111
                          15372	
00002827 00               15373		.byte	0
                          15374	
00002828 00               15375		.byte	0
                          15376	
                          15377	.LDW_4ae9ae8:
00002829 15               15378		.byte	21
0000282a 46626c4d656d496e 15379		.strz	"FblMemInitBufferIntegrity"
00002832 6974427566666572
0000283a 496e746567726974
00002842 7900            
00002844 aa0a             15380		.byte	170,10
00002846 0d               15381		.byte	13
00002847 01               15382		.byte	1
00002848 00000000         15383		.long	FblMemInitBufferIntegrity..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
0000284c 00000000         15384		.long	__ghs_eofn_FblMemInitBufferIntegrity
00002850 0151             15385		.byte	1,81
00002852 03               15386		.byte	3
00002853 00               15387		.byte	0

                                   Fri Apr 10 08:32:15 2020           Page 276
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
00002854 00               15388		.byte	0
00002855 00               15389		.byte	0
00002856 00               15390		.byte	0
00002857 00               15391		.byte	0
00002858 00               15392		.byte	0
00002859 00               15393		.byte	0
0000285a 01               15394		.byte	1
0000285b 00               15395		.byte	0
0000285c 01               15396		.byte	1
                          15397	
                          15398		.section	.debug_frame
                          15399	.LDW_5c0eca8:
000000f0 00000014         15400		.long	.LDW_unq_c-.LDW_unq_b
                          15401	.LDW_unq_b:
000000f4 00000000         15402		.long	.LDW_5d27e08
000000f8 00000000         15403		.long	FblMemInitBufferIntegrity..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
000000fc 00000032         15404		.long	__ghs_eofn_FblMemInitBufferIntegrity-FblMemInitBufferIntegrity..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
00000100 01               15405		.byte	1
00000101 00000000         15406		.long	.LDW91
00000105 00               15407		.byte	0
00000106 00               15408		.byte	0
00000107 00               15409		.byte	0
                          15410	.LDW_unq_c:
                          15411		.section	.debug_line
00000688 000502           15412		.byte	0,5,2
0000068b 00000000         15413		.long	FblMemInitBufferIntegrity..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
0000068f 06               15414		.byte	6
00000690 03               15415		.byte	3
00000691 ae0a             15416		.byte	174,10
00000693 02               15417		.byte	2
00000694 00               15418		.byte	0
00000695 01               15419		.byte	1
00000696 0c               15420		.byte	12
00000697 53               15421		.byte	83
00000698 1b               15422		.byte	27
00000699 03               15423		.byte	3
0000069a 0a               15424		.byte	10
0000069b 02               15425		.byte	2
0000069c 00               15426		.byte	0
0000069d 01               15427		.byte	1
0000069e 33               15428		.byte	51
0000069f 03               15429		.byte	3
000006a0 05               15430		.byte	5
000006a1 02               15431		.byte	2
000006a2 02               15432		.byte	2
000006a3 01               15433		.byte	1
000006a4 33               15434		.byte	51
000006a5 1c               15435		.byte	28
000006a6 02               15436		.byte	2
000006a7 02               15437		.byte	2
000006a8 000101           15438		.byte	0,1,1
                          15439		.section	.debug_info
                          15440	.LDW_4aa3238:
0000285d 1f               15441		.byte	31
0000285e 00000000         15442		.long	.LDW81
00002862 00000000         15443		.long	.LDW91

                                   Fri Apr 10 08:32:15 2020           Page 277
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          15444	
                          15445	.LDW_4ae9bd8:
00002866 07               15446		.byte	7
00002867 69647800         15447		.strz	"idx"
0000286b ac0a             15448		.byte	172,10
0000286d 0b               15449		.byte	11
0000286e 01               15450		.byte	1
0000286f 00000000         15451		.long	.LDW_4ae9b80
00002873 00               15452		.byte	0
00002874 00               15453		.byte	0
                          15454	
00002875 00               15455		.byte	0
                          15456	
00002876 00               15457		.byte	0
                          15458	
                          15459	.LDW_4aea7a8:
00002877 16               15460		.byte	22
00002878 46626c4d656d5665 15461		.strz	"FblMemVerifyBufferIntegrity"
00002880 7269667942756666
00002888 6572496e74656772
00002890 69747900        
00002894 d20a             15462		.byte	210,10
00002896 16               15463		.byte	22
00002897 01               15464		.byte	1
00002898 00000000         15465		.long	.LDW_4aea750
0000289c 00000000         15466		.long	FblMemVerifyBufferIntegrity..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
000028a0 00000000         15467		.long	__ghs_eofn_FblMemVerifyBufferIntegrity
000028a4 0151             15468		.byte	1,81
000028a6 03               15469		.byte	3
000028a7 00               15470		.byte	0
000028a8 00               15471		.byte	0
000028a9 00               15472		.byte	0
000028aa 00               15473		.byte	0
000028ab 00               15474		.byte	0
000028ac 00               15475		.byte	0
000028ad 00               15476		.byte	0
000028ae 01               15477		.byte	1
000028af 00               15478		.byte	0
000028b0 01               15479		.byte	1
                          15480	
                          15481		.section	.debug_frame
                          15482	.LDW_5c0ece8:
00000108 00000014         15483		.long	.LDW_unq_e-.LDW_unq_d
                          15484	.LDW_unq_d:
0000010c 00000000         15485		.long	.LDW_5d27e08
00000110 00000000         15486		.long	FblMemVerifyBufferIntegrity..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
00000114 0000005c         15487		.long	__ghs_eofn_FblMemVerifyBufferIntegrity-FblMemVerifyBufferIntegrity..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
00000118 01               15488		.byte	1
00000119 00000000         15489		.long	.LDW12
0000011d 00               15490		.byte	0
0000011e 00               15491		.byte	0
0000011f 00               15492		.byte	0
                          15493	.LDW_unq_e:
                          15494		.section	.debug_line
000006ab 000502           15495		.byte	0,5,2
000006ae 00000000         15496		.long	FblMemVerifyBufferIntegrity..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
000006b2 06               15497		.byte	6
000006b3 03               15498		.byte	3
000006b4 d70a             15499		.byte	215,10

                                   Fri Apr 10 08:32:15 2020           Page 278
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
000006b6 02               15500		.byte	2
000006b7 00               15501		.byte	0
000006b8 01               15502		.byte	1
000006b9 03               15503		.byte	3
000006ba 04               15504		.byte	4
000006bb 02               15505		.byte	2
000006bc 04               15506		.byte	4
000006bd 01               15507		.byte	1
000006be 0c               15508		.byte	12
000006bf 94               15509		.byte	148
000006c0 03               15510		.byte	3
000006c1 0a               15511		.byte	10
000006c2 02               15512		.byte	2
000006c3 00               15513		.byte	0
000006c4 01               15514		.byte	1
000006c5 3b               15515		.byte	59
000006c6 03               15516		.byte	3
000006c7 05               15517		.byte	5
000006c8 02               15518		.byte	2
000006c9 0c               15519		.byte	12
000006ca 01               15520		.byte	1
000006cb 43               15521		.byte	67
000006cc 2d               15522		.byte	45
000006cd 000502           15523		.byte	0,5,2
000006d0 00000000         15524		.long	.LDWlin6
000006d4 0b               15525		.byte	11
000006d5 0b               15526		.byte	11
000006d6 13               15527		.byte	19
000006d7 02               15528		.byte	2
000006d8 00               15529		.byte	0
000006d9 0c               15530		.byte	12
000006da 02               15531		.byte	2
000006db 02               15532		.byte	2
000006dc 000101           15533		.byte	0,1,1
                          15534		.section	.debug_info
                          15535	.LDW_4aa3298:
000028b1 1f               15536		.byte	31
000028b2 00000000         15537		.long	.LDW02
000028b6 00000000         15538		.long	.LDW12
                          15539	
                          15540	.LDW_4aea840:
000028ba 06               15541		.byte	6
000028bb 72657456616c00   15542		.strz	"retVal"
000028c2 d40a             15543		.byte	212,10
000028c4 13               15544		.byte	19
000028c5 01               15545		.byte	1
000028c6 00000000         15546		.long	.LDW_4aea750
000028ca 00               15547		.byte	0
000028cb 00               15548		.byte	0
000028cc 0153             15549		.byte	1,83
                          15550	
                          15551	.LDW_5c3d1a8:
000028ce 06               15552		.byte	6
000028cf 6167677265676174 15553		.strz	"aggregated"
000028d7 656400          
000028da d50a             15554		.byte	213,10
000028dc 13               15555		.byte	19

                                   Fri Apr 10 08:32:15 2020           Page 279
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
000028dd 01               15556		.byte	1
000028de 00000000         15557		.long	.LDW_4ae9b80
000028e2 00               15558		.byte	0
000028e3 00               15559		.byte	0
000028e4 0157             15560		.byte	1,87
                          15561	
                          15562	.LDW_5c3d7a8:
000028e6 07               15563		.byte	7
000028e7 69647800         15564		.strz	"idx"
000028eb d60a             15565		.byte	214,10
000028ed 13               15566		.byte	19
000028ee 01               15567		.byte	1
000028ef 00000000         15568		.long	.LDW_4ae9b80
000028f3 00               15569		.byte	0
000028f4 00               15570		.byte	0
                          15571	
000028f5 00               15572		.byte	0
                          15573	
000028f6 00               15574		.byte	0
                          15575	
                          15576	.LDW_5c3da08:
000028f7 15               15577		.byte	21
000028f8 46626c4d656d5175 15578		.strz	"FblMemQueueInit"
00002900 657565496e697400
00002908 880b             15579		.byte	136,11
0000290a 0d               15580		.byte	13
0000290b 01               15581		.byte	1
0000290c 00000000         15582		.long	FblMemQueueInit..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
00002910 00000000         15583		.long	__ghs_eofn_FblMemQueueInit
00002914 0151             15584		.byte	1,81
00002916 03               15585		.byte	3
00002917 00               15586		.byte	0
00002918 00               15587		.byte	0
00002919 00               15588		.byte	0
0000291a 00               15589		.byte	0
0000291b 00               15590		.byte	0
0000291c 00               15591		.byte	0
0000291d 00               15592		.byte	0
0000291e 01               15593		.byte	1
0000291f 00               15594		.byte	0
00002920 01               15595		.byte	1
                          15596	
                          15597		.section	.debug_frame
                          15598	.LDW_5c0ed68:
00000120 00000014         15599		.long	.LDW_unq_10-.LDW_unq_f
                          15600	.LDW_unq_f:
00000124 00000000         15601		.long	.LDW_5d27e08
00000128 00000000         15602		.long	FblMemQueueInit..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
0000012c 0000003a         15603		.long	__ghs_eofn_FblMemQueueInit-FblMemQueueInit..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
00000130 01               15604		.byte	1
00000131 00000000         15605		.long	.LDW32
00000135 00               15606		.byte	0
00000136 00               15607		.byte	0
00000137 00               15608		.byte	0
                          15609	.LDW_unq_10:
                          15610		.section	.debug_line
000006df 000502           15611		.byte	0,5,2

                                   Fri Apr 10 08:32:15 2020           Page 280
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
000006e2 00000000         15612		.long	FblMemQueueInit..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
000006e6 06               15613		.byte	6
000006e7 03               15614		.byte	3
000006e8 8e0b             15615		.byte	142,11
000006ea 02               15616		.byte	2
000006eb 00               15617		.byte	0
000006ec 01               15618		.byte	1
000006ed 1b               15619		.byte	27
000006ee 14               15620		.byte	20
000006ef 13               15621		.byte	19
000006f0 03               15622		.byte	3
000006f1 04               15623		.byte	4
000006f2 02               15624		.byte	2
000006f3 04               15625		.byte	4
000006f4 01               15626		.byte	1
000006f5 1b               15627		.byte	27
000006f6 15               15628		.byte	21
000006f7 000502           15629		.byte	0,5,2
000006fa 00000000         15630		.long	.LDWlin7
000006fe 0c               15631		.byte	12
000006ff 1d               15632		.byte	29
00000700 23               15633		.byte	35
00000701 14               15634		.byte	20
00000702 1b               15635		.byte	27
00000703 14               15636		.byte	20
00000704 03               15637		.byte	3
00000705 75               15638		.byte	117
00000706 02               15639		.byte	2
00000707 02               15640		.byte	2
00000708 01               15641		.byte	1
00000709 000502           15642		.byte	0,5,2
0000070c 00000000         15643		.long	.LDWlin8
00000710 03               15644		.byte	3
00000711 0c               15645		.byte	12
00000712 02               15646		.byte	2
00000713 00               15647		.byte	0
00000714 01               15648		.byte	1
00000715 0d               15649		.byte	13
00000716 33               15650		.byte	51
00000717 02               15651		.byte	2
00000718 02               15652		.byte	2
00000719 000101           15653		.byte	0,1,1
                          15654		.section	.debug_info
                          15655	.LDW_5c3d5f0:
00002921 11               15656		.byte	17
00002922 717565756500     15657		.strz	"queue"
00002928 880b             15658		.byte	136,11
0000292a 50               15659		.byte	80
0000292b 01               15660		.byte	1
0000292c 00000000         15661		.long	.LDW_4aac730
00002930 00               15662		.byte	0
00002931 0153             15663		.byte	1,83
                          15664	
                          15665	.LDW_5c3d908:
00002933 11               15666		.byte	17
00002934 6c656e67746800   15667		.strz	"length"

                                   Fri Apr 10 08:32:15 2020           Page 281
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
0000293b 880b             15668		.byte	136,11
0000293d 6a               15669		.byte	106
0000293e 01               15670		.byte	1
0000293f 00000000         15671		.long	.LDW_5c3d8b0
00002943 00               15672		.byte	0
00002944 0154             15673		.byte	1,84
                          15674	
                          15675	.LDW_4aa3268:
00002946 1f               15676		.byte	31
00002947 00000000         15677		.long	.LDW22
0000294b 00000000         15678		.long	.LDW32
                          15679	
                          15680	.LDW_5c3d6a0:
0000294f 06               15681		.byte	6
00002950 68616e646c6500   15682		.strz	"handle"
00002957 8a0b             15683		.byte	138,11
00002959 17               15684		.byte	23
0000295a 01               15685		.byte	1
0000295b 00000000         15686		.long	.LDW_5c3d8b0
0000295f 00               15687		.byte	0
00002960 00               15688		.byte	0
00002961 0150             15689		.byte	1,80
                          15690	
                          15691	.LDW_5c3d858:
00002963 06               15692		.byte	6
00002964 7072657648616e64 15693		.strz	"prevHandle"
0000296c 6c6500          
0000296f 8b0b             15694		.byte	139,11
00002971 17               15695		.byte	23
00002972 01               15696		.byte	1
00002973 00000000         15697		.long	.LDW_5c3d8b0
00002977 00               15698		.byte	0
00002978 00               15699		.byte	0
00002979 0155             15700		.byte	1,85
                          15701	
                          15702	.LDW_5c3d960:
0000297b 06               15703		.byte	6
0000297c 6e65787448616e64 15704		.strz	"nextHandle"
00002984 6c6500          
00002987 8c0b             15705		.byte	140,11
00002989 17               15706		.byte	23
0000298a 01               15707		.byte	1
0000298b 00000000         15708		.long	.LDW_5c3d8b0
0000298f 00               15709		.byte	0
00002990 00               15710		.byte	0
00002991 0156             15711		.byte	1,86
                          15712	
00002993 00               15713		.byte	0
                          15714	
00002994 00               15715		.byte	0
                          15716	
                          15717	.LDW_5c3daa0:
00002995 16               15718		.byte	22
00002996 46626c4d656d5175 15719		.strz	"FblMemQueueMove"
0000299e 6575654d6f766500
000029a6 b80b             15720		.byte	184,11
000029a8 1b               15721		.byte	27
000029a9 01               15722		.byte	1
000029aa 00000000         15723		.long	.LDW_5c3d8b0

                                   Fri Apr 10 08:32:15 2020           Page 282
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
000029ae 00000000         15724		.long	FblMemQueueMove..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
000029b2 00000000         15725		.long	__ghs_eofn_FblMemQueueMove
000029b6 0151             15726		.byte	1,81
000029b8 808080f00f       15727		.byte	128,128,128,240,15
000029bd 0c               15728		.byte	12
000029be 00               15729		.byte	0
000029bf 28               15730		.byte	40
000029c0 00               15731		.byte	0
000029c1 00               15732		.byte	0
000029c2 00               15733		.byte	0
000029c3 00               15734		.byte	0
000029c4 01               15735		.byte	1
000029c5 00               15736		.byte	0
000029c6 01               15737		.byte	1
                          15738	
                          15739		.section	.debug_frame
                          15740	.LDW_5c0f0a8:
00000138 00000014         15741		.long	.LDW_unq_12-.LDW_unq_11
                          15742	.LDW_unq_11:
0000013c 00000000         15743		.long	.LDW_5d27e08
00000140 00000000         15744		.long	FblMemQueueMove..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
00000144 0000005e         15745		.long	__ghs_eofn_FblMemQueueMove-FblMemQueueMove..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
00000148 01               15746		.byte	1
00000149 00000000         15747		.long	.LDW52
0000014d 00               15748		.byte	0
0000014e 00               15749		.byte	0
0000014f 00               15750		.byte	0
                          15751	.LDW_unq_12:
                          15752		.section	.debug_line
0000071c 000502           15753		.byte	0,5,2
0000071f 00000000         15754		.long	FblMemQueueMove..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
00000723 06               15755		.byte	6
00000724 03               15756		.byte	3
00000725 b90b             15757		.byte	185,11
00000727 02               15758		.byte	2
00000728 00               15759		.byte	0
00000729 01               15760		.byte	1
0000072a 03               15761		.byte	3
0000072b 06               15762		.byte	6
0000072c 02               15763		.byte	2
0000072d 12               15764		.byte	18
0000072e 01               15765		.byte	1
0000072f 000502           15766		.byte	0,5,2
00000732 00000000         15767		.long	.LDWlin9
00000736 0b               15768		.byte	11
00000737 0d               15769		.byte	13
00000738 0c               15770		.byte	12
00000739 0c               15771		.byte	12
0000073a 2b               15772		.byte	43
0000073b 1d               15773		.byte	29
0000073c 000502           15774		.byte	0,5,2
0000073f 00000000         15775		.long	.LDWlin10
00000743 0d               15776		.byte	13
00000744 13               15777		.byte	19
00000745 2d               15778		.byte	45
00000746 25               15779		.byte	37

                                   Fri Apr 10 08:32:15 2020           Page 283
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
00000747 13               15780		.byte	19
00000748 13               15781		.byte	19
00000749 13               15782		.byte	19
0000074a 23               15783		.byte	35
0000074b 02               15784		.byte	2
0000074c 00               15785		.byte	0
0000074d 0c               15786		.byte	12
0000074e 06               15787		.byte	6
0000074f 02               15788		.byte	2
00000750 02               15789		.byte	2
00000751 02               15790		.byte	2
00000752 0e               15791		.byte	14
00000753 000101           15792		.byte	0,1,1
                          15793		.section	.debug_info
                          15794	.LDW_5c3d438:
000029c7 11               15795		.byte	17
000029c8 717565756500     15796		.strz	"queue"
000029ce b80b             15797		.byte	184,11
000029d0 5e               15798		.byte	94
000029d1 01               15799		.byte	1
000029d2 00000000         15800		.long	.LDW_4aac730
000029d6 00               15801		.byte	0
000029d7 016c             15802		.byte	1,108
                          15803	
                          15804	.LDW_5c3d540:
000029d9 11               15805		.byte	17
000029da 68616e646c6500   15806		.strz	"handle"
000029e1 b90b             15807		.byte	185,11
000029e3 17               15808		.byte	23
000029e4 01               15809		.byte	1
000029e5 00000000         15810		.long	.LDW_5c3d8b0
000029e9 00               15811		.byte	0
000029ea 016d             15812		.byte	1,109
                          15813	
                          15814	.LDW_5c3d800:
000029ec 11               15815		.byte	17
000029ed 707265764e657700 15816		.strz	"prevNew"
000029f5 b90b             15817		.byte	185,11
000029f7 32               15818		.byte	50
000029f8 01               15819		.byte	1
000029f9 00000000         15820		.long	.LDW_5c3d8b0
000029fd 00               15821		.byte	0
000029fe 016b             15822		.byte	1,107
                          15823	
                          15824	.LDW_4aa3538:
00002a00 1f               15825		.byte	31
00002a01 00000000         15826		.long	.LDW42
00002a05 00000000         15827		.long	.LDW52
                          15828	
                          15829	.LDW_5c3d6f8:
00002a09 06               15830		.byte	6
00002a0a 707265764f6c6400 15831		.strz	"prevOld"
00002a12 bb0b             15832		.byte	187,11
00002a14 17               15833		.byte	23
00002a15 01               15834		.byte	1
00002a16 00000000         15835		.long	.LDW_5c3d8b0

                                   Fri Apr 10 08:32:15 2020           Page 284
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
00002a1a 00               15836		.byte	0
00002a1b 00               15837		.byte	0
00002a1c 016a             15838		.byte	1,106
                          15839	
                          15840	.LDW_5c3d228:
00002a1e 06               15841		.byte	6
00002a1f 6e6578744f6c6400 15842		.strz	"nextOld"
00002a27 bc0b             15843		.byte	188,11
00002a29 17               15844		.byte	23
00002a2a 01               15845		.byte	1
00002a2b 00000000         15846		.long	.LDW_5c3d8b0
00002a2f 00               15847		.byte	0
00002a30 00               15848		.byte	0
00002a31 016e             15849		.byte	1,110
                          15850	
                          15851	.LDW_5c3d2d8:
00002a33 06               15852		.byte	6
00002a34 6e6578744e657700 15853		.strz	"nextNew"
00002a3c bd0b             15854		.byte	189,11
00002a3e 17               15855		.byte	23
00002a3f 01               15856		.byte	1
00002a40 00000000         15857		.long	.LDW_5c3d8b0
00002a44 00               15858		.byte	0
00002a45 00               15859		.byte	0
00002a46 0157             15860		.byte	1,87
                          15861	
00002a48 00               15862		.byte	0
                          15863	
00002a49 00               15864		.byte	0
                          15865	
                          15866	.LDW_5c3db38:
00002a4a 16               15867		.byte	22
00002a4b 46626c4d656d5175 15868		.strz	"FblMemQueueRemove"
00002a53 65756552656d6f76
00002a5b 6500            
00002a5d ea0b             15869		.byte	234,11
00002a5f 1b               15870		.byte	27
00002a60 01               15871		.byte	1
00002a61 00000000         15872		.long	.LDW_5c3d8b0
00002a65 00000000         15873		.long	FblMemQueueRemove..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
00002a69 00000000         15874		.long	__ghs_eofn_FblMemQueueRemove
00002a6d 0151             15875		.byte	1,81
00002a6f 03               15876		.byte	3
00002a70 00               15877		.byte	0
00002a71 00               15878		.byte	0
00002a72 00               15879		.byte	0
00002a73 00               15880		.byte	0
00002a74 00               15881		.byte	0
00002a75 00               15882		.byte	0
00002a76 00               15883		.byte	0
00002a77 01               15884		.byte	1
00002a78 00               15885		.byte	0
00002a79 01               15886		.byte	1
                          15887	
                          15888		.section	.debug_frame
                          15889	.LDW_5c0e9a8:
00000150 00000014         15890		.long	.LDW_unq_14-.LDW_unq_13
                          15891	.LDW_unq_13:

                                   Fri Apr 10 08:32:15 2020           Page 285
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
00000154 00000000         15892		.long	.LDW_5d27e08
00000158 00000000         15893		.long	FblMemQueueRemove..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
0000015c 00000004         15894		.long	__ghs_eofn_FblMemQueueRemove-FblMemQueueRemove..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
00000160 01               15895		.byte	1
00000161 00000000         15896		.long	.LDW72
00000165 00               15897		.byte	0
00000166 00               15898		.byte	0
00000167 00               15899		.byte	0
                          15900	.LDW_unq_14:
                          15901		.section	.debug_line
00000756 000502           15902		.byte	0,5,2
00000759 00000000         15903		.long	FblMemQueueRemove..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
0000075d 06               15904		.byte	6
0000075e 03               15905		.byte	3
0000075f ee0b             15906		.byte	238,11
00000761 02               15907		.byte	2
00000762 00               15908		.byte	0
00000763 01               15909		.byte	1
00000764 06               15910		.byte	6
00000765 000502           15911		.byte	0,5,2
00000768 00000000         15912		.long	__ghs_eofn_FblMemQueueRemove
0000076c 02               15913		.byte	2
0000076d 00               15914		.byte	0
0000076e 000101           15915		.byte	0,1,1
                          15916		.section	.debug_info
                          15917	.LDW_5c3d330:
00002a7a 11               15918		.byte	17
00002a7b 717565756500     15919		.strz	"queue"
00002a81 ea0b             15920		.byte	234,11
00002a83 60               15921		.byte	96
00002a84 01               15922		.byte	1
00002a85 00000000         15923		.long	.LDW_4aac730
00002a89 00               15924		.byte	0
00002a8a 0153             15925		.byte	1,83
                          15926	
                          15927	.LDW_5c3d490:
00002a8c 11               15928		.byte	17
00002a8d 68616e646c6500   15929		.strz	"handle"
00002a94 eb0b             15930		.byte	235,11
00002a96 17               15931		.byte	23
00002a97 01               15932		.byte	1
00002a98 00000000         15933		.long	.LDW_5c3d8b0
00002a9c 00               15934		.byte	0
00002a9d 0154             15935		.byte	1,84
                          15936	
                          15937	.LDW_4aa35f8:
00002a9f 1f               15938		.byte	31
00002aa0 00000000         15939		.long	.LDW62
00002aa4 00000000         15940		.long	.LDW72
                          15941	
00002aa8 00               15942		.byte	0
                          15943	
00002aa9 00               15944		.byte	0
                          15945	
                          15946	.LDW_5c3dbd0:
00002aaa 16               15947		.byte	22

                                   Fri Apr 10 08:32:15 2020           Page 286
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
00002aab 46626c4d656d5175 15948		.strz	"FblMemQueuePrioUpdate"
00002ab3 6575655072696f55
00002abb 706461746500    
00002ac1 fd0b             15949		.byte	253,11
00002ac3 1b               15950		.byte	27
00002ac4 01               15951		.byte	1
00002ac5 00000000         15952		.long	.LDW_5c3d8b0
00002ac9 00000000         15953		.long	FblMemQueuePrioUpdate..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
00002acd 00000000         15954		.long	__ghs_eofn_FblMemQueuePrioUpdate
00002ad1 0151             15955		.byte	1,81
00002ad3 808080800e       15956		.byte	128,128,128,128,14
00002ad8 0c               15957		.byte	12
00002ad9 00               15958		.byte	0
00002ada 18               15959		.byte	24
00002adb 00               15960		.byte	0
00002adc 00               15961		.byte	0
00002add 00               15962		.byte	0
00002ade 00               15963		.byte	0
00002adf 01               15964		.byte	1
00002ae0 00               15965		.byte	0
00002ae1 01               15966		.byte	1
                          15967	
                          15968		.section	.debug_frame
                          15969	.LDW_5c0ee28:
00000168 00000014         15970		.long	.LDW_unq_16-.LDW_unq_15
                          15971	.LDW_unq_15:
0000016c 00000000         15972		.long	.LDW_5d27e08
00000170 00000000         15973		.long	FblMemQueuePrioUpdate..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
00000174 0000003c         15974		.long	__ghs_eofn_FblMemQueuePrioUpdate-FblMemQueuePrioUpdate..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
00000178 01               15975		.byte	1
00000179 00000000         15976		.long	.LDW92
0000017d 00               15977		.byte	0
0000017e 00               15978		.byte	0
0000017f 00               15979		.byte	0
                          15980	.LDW_unq_16:
                          15981		.section	.debug_line
00000771 000502           15982		.byte	0,5,2
00000774 00000000         15983		.long	FblMemQueuePrioUpdate..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
00000778 06               15984		.byte	6
00000779 03               15985		.byte	3
0000077a fe0b             15986		.byte	254,11
0000077c 02               15987		.byte	2
0000077d 00               15988		.byte	0
0000077e 01               15989		.byte	1
0000077f 03               15990		.byte	3
00000780 04               15991		.byte	4
00000781 02               15992		.byte	2
00000782 12               15993		.byte	18
00000783 01               15994		.byte	1
00000784 03               15995		.byte	3
00000785 04               15996		.byte	4
00000786 02               15997		.byte	2
00000787 02               15998		.byte	2
00000788 01               15999		.byte	1
00000789 000502           16000		.byte	0,5,2
0000078c 00000000         16001		.long	.LDWlin12
00000790 0c               16002		.byte	12
00000791 03               16003		.byte	3

                                   Fri Apr 10 08:32:15 2020           Page 287
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
00000792 7e               16004		.byte	126
00000793 02               16005		.byte	2
00000794 02               16006		.byte	2
00000795 01               16007		.byte	1
00000796 000502           16008		.byte	0,5,2
00000799 00000000         16009		.long	.LDWlin13
0000079d 0d               16010		.byte	13
0000079e 0d               16011		.byte	13
0000079f 000502           16012		.byte	0,5,2
000007a2 00000000         16013		.long	.LDWlin14
000007a6 0c               16014		.byte	12
000007a7 2c               16015		.byte	44
000007a8 06               16016		.byte	6
000007a9 02               16017		.byte	2
000007aa 02               16018		.byte	2
000007ab 02               16019		.byte	2
000007ac 0c               16020		.byte	12
000007ad 000101           16021		.byte	0,1,1
                          16022		.section	.debug_info
                          16023	.LDW_5c3d3e0:
00002ae2 11               16024		.byte	17
00002ae3 717565756500     16025		.strz	"queue"
00002ae9 fd0b             16026		.byte	253,11
00002aeb 64               16027		.byte	100
00002aec 01               16028		.byte	1
00002aed 00000000         16029		.long	.LDW_4aac730
00002af1 00               16030		.byte	0
00002af2 016e             16031		.byte	1,110
                          16032	
                          16033	.LDW_5c3d4e8:
00002af4 11               16034		.byte	17
00002af5 68616e646c6500   16035		.strz	"handle"
00002afc fe0b             16036		.byte	254,11
00002afe 17               16037		.byte	23
00002aff 01               16038		.byte	1
00002b00 00000000         16039		.long	.LDW_5c3d8b0
00002b04 00               16040		.byte	0
00002b05 016f             16041		.byte	1,111
                          16042	
                          16043	.LDW_5c3d598:
00002b07 11               16044		.byte	17
00002b08 7072696f00       16045		.strz	"prio"
00002b0d fe0b             16046		.byte	254,11
00002b0f 30               16047		.byte	48
00002b10 01               16048		.byte	1
00002b11 00000000         16049		.long	.LDW_5c3d388
00002b15 00               16050		.byte	0
00002b16 016d             16051		.byte	1,109
                          16052	
                          16053	.LDW_4aa3448:
00002b18 1f               16054		.byte	31
00002b19 00000000         16055		.long	.LDW82
00002b1d 00000000         16056		.long	.LDW92
                          16057	
                          16058	.LDW_5c3d648:
00002b21 06               16059		.byte	6

                                   Fri Apr 10 08:32:15 2020           Page 288
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
00002b22 7072657648616e64 16060		.strz	"prevHandle"
00002b2a 6c6500          
00002b2d 800c             16061		.byte	128,12
00002b2f 17               16062		.byte	23
00002b30 01               16063		.byte	1
00002b31 00000000         16064		.long	.LDW_5c3d8b0
00002b35 00               16065		.byte	0
00002b36 00               16066		.byte	0
00002b37 0155             16067		.byte	1,85
                          16068	
00002b39 00               16069		.byte	0
                          16070	
00002b3a 00               16071		.byte	0
                          16072	
                          16073	.LDW_5c3dc68:
00002b3b 16               16074		.byte	22
00002b3c 46626c4d656d5175 16075		.strz	"FblMemQueuePrioInsert"
00002b44 6575655072696f49
00002b4c 6e7365727400    
00002b52 a00c             16076		.byte	160,12
00002b54 1b               16077		.byte	27
00002b55 01               16078		.byte	1
00002b56 00000000         16079		.long	.LDW_5c3d8b0
00002b5a 00000000         16080		.long	FblMemQueuePrioInsert..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
00002b5e 00000000         16081		.long	__ghs_eofn_FblMemQueuePrioInsert
00002b62 0151             16082		.byte	1,81
00002b64 808080800e       16083		.byte	128,128,128,128,14
00002b69 0c               16084		.byte	12
00002b6a 00               16085		.byte	0
00002b6b 18               16086		.byte	24
00002b6c 00               16087		.byte	0
00002b6d 00               16088		.byte	0
00002b6e 00               16089		.byte	0
00002b6f 00               16090		.byte	0
00002b70 01               16091		.byte	1
00002b71 00               16092		.byte	0
00002b72 01               16093		.byte	1
                          16094	
                          16095		.section	.debug_frame
                          16096	.LDW_5c0ef28:
00000180 00000014         16097		.long	.LDW_unq_18-.LDW_unq_17
                          16098	.LDW_unq_17:
00000184 00000000         16099		.long	.LDW_5d27e08
00000188 00000000         16100		.long	FblMemQueuePrioInsert..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
0000018c 0000003a         16101		.long	__ghs_eofn_FblMemQueuePrioInsert-FblMemQueuePrioInsert..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
00000190 01               16102		.byte	1
00000191 00000000         16103		.long	.LDW13
00000195 00               16104		.byte	0
00000196 00               16105		.byte	0
00000197 00               16106		.byte	0
                          16107	.LDW_unq_18:
                          16108		.section	.debug_line
000007b0 000502           16109		.byte	0,5,2
000007b3 00000000         16110		.long	FblMemQueuePrioInsert..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
000007b7 06               16111		.byte	6
000007b8 03               16112		.byte	3
000007b9 a10c             16113		.byte	161,12
000007bb 02               16114		.byte	2
000007bc 00               16115		.byte	0

                                   Fri Apr 10 08:32:15 2020           Page 289
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
000007bd 01               16116		.byte	1
000007be 03               16117		.byte	3
000007bf 04               16118		.byte	4
000007c0 02               16119		.byte	2
000007c1 12               16120		.byte	18
000007c2 01               16121		.byte	1
000007c3 000502           16122		.byte	0,5,2
000007c6 00000000         16123		.long	.LDWlin15
000007ca 0d               16124		.byte	13
000007cb 000502           16125		.byte	0,5,2
000007ce 00000000         16126		.long	.LDWlin16
000007d2 0c               16127		.byte	12
000007d3 2c               16128		.byte	44
000007d4 02               16129		.byte	2
000007d5 0c               16130		.byte	12
000007d6 000101           16131		.byte	0,1,1
                          16132		.section	.debug_info
                          16133	.LDW_5d9c488:
00002b73 11               16134		.byte	17
00002b74 717565756500     16135		.strz	"queue"
00002b7a a00c             16136		.byte	160,12
00002b7c 64               16137		.byte	100
00002b7d 01               16138		.byte	1
00002b7e 00000000         16139		.long	.LDW_4aac730
00002b82 00               16140		.byte	0
00002b83 016f             16141		.byte	1,111
                          16142	
                          16143	.LDW_5d9c328:
00002b85 11               16144		.byte	17
00002b86 7072696f00       16145		.strz	"prio"
00002b8b a10c             16146		.byte	161,12
00002b8d 15               16147		.byte	21
00002b8e 01               16148		.byte	1
00002b8f 00000000         16149		.long	.LDW_5c3d388
00002b93 00               16150		.byte	0
00002b94 016d             16151		.byte	1,109
                          16152	
                          16153	.LDW_5d9c538:
00002b96 11               16154		.byte	17
00002b97 6a6f6200         16155		.strz	"job"
00002b9b a10c             16156		.byte	161,12
00002b9d 46               16157		.byte	70
00002b9e 01               16158		.byte	1
00002b9f 00000000         16159		.long	.LDW_4aac688
00002ba3 00               16160		.byte	0
00002ba4 016e             16161		.byte	1,110
                          16162	
                          16163	.LDW_4aa34d8:
00002ba6 1f               16164		.byte	31
00002ba7 00000000         16165		.long	.LDW03
00002bab 00000000         16166		.long	.LDW13
                          16167	
                          16168	.LDW_5d9cab8:
00002baf 07               16169		.byte	7
00002bb0 68616e646c6500   16170		.strz	"handle"
00002bb7 a30c             16171		.byte	163,12

                                   Fri Apr 10 08:32:15 2020           Page 290
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
00002bb9 17               16172		.byte	23
00002bba 01               16173		.byte	1
00002bbb 00000000         16174		.long	.LDW_5c3d8b0
00002bbf 00               16175		.byte	0
00002bc0 00               16176		.byte	0
                          16177	
00002bc1 00               16178		.byte	0
                          16179	
00002bc2 00               16180		.byte	0
                          16181	
                          16182	.LDW_5c3dd00:
00002bc3 16               16183		.byte	22
00002bc4 46626c4d656d5175 16184		.strz	"FblMemQueueDefaultPrioInsert"
00002bcc 6575654465666175
00002bd4 6c745072696f496e
00002bdc 7365727400      
00002be1 bc0c             16185		.byte	188,12
00002be3 1b               16186		.byte	27
00002be4 01               16187		.byte	1
00002be5 00000000         16188		.long	.LDW_5c3d8b0
00002be9 00000000         16189		.long	FblMemQueueDefaultPrioInsert..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
00002bed 00000000         16190		.long	__ghs_eofn_FblMemQueueDefaultPrioInsert
00002bf1 0151             16191		.byte	1,81
00002bf3 808080800e       16192		.byte	128,128,128,128,14
00002bf8 0c               16193		.byte	12
00002bf9 00               16194		.byte	0
00002bfa 18               16195		.byte	24
00002bfb 00               16196		.byte	0
00002bfc 00               16197		.byte	0
00002bfd 00               16198		.byte	0
00002bfe 00               16199		.byte	0
00002bff 01               16200		.byte	1
00002c00 00               16201		.byte	0
00002c01 01               16202		.byte	1
                          16203	
                          16204		.section	.debug_frame
                          16205	.LDW_5c0eee8:
00000198 00000014         16206		.long	.LDW_unq_1a-.LDW_unq_19
                          16207	.LDW_unq_19:
0000019c 00000000         16208		.long	.LDW_5d27e08
000001a0 00000000         16209		.long	FblMemQueueDefaultPrioInsert..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
000001a4 0000003e         16210		.long	__ghs_eofn_FblMemQueueDefaultPrioInsert-FblMemQueueDefaultPrioInsert..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
000001a8 01               16211		.byte	1
000001a9 00000000         16212		.long	.LDW33
000001ad 00               16213		.byte	0
000001ae 00               16214		.byte	0
000001af 00               16215		.byte	0
                          16216	.LDW_unq_1a:
                          16217		.section	.debug_line
000007d9 000502           16218		.byte	0,5,2
000007dc 00000000         16219		.long	FblMemQueueDefaultPrioInsert..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
000007e0 06               16220		.byte	6
000007e1 03               16221		.byte	3
000007e2 bd0c             16222		.byte	189,12
000007e4 02               16223		.byte	2
000007e5 00               16224		.byte	0
000007e6 01               16225		.byte	1
000007e7 54               16226		.byte	84
000007e8 000502           16227		.byte	0,5,2

                                   Fri Apr 10 08:32:15 2020           Page 291
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
000007eb 00000000         16228		.long	.LDWlin17
000007ef 0d               16229		.byte	13
000007f0 14               16230		.byte	20
000007f1 06               16231		.byte	6
000007f2 000502           16232		.byte	0,5,2
000007f5 00000000         16233		.long	.LDWlin18
000007f9 02               16234		.byte	2
000007fa 00               16235		.byte	0
000007fb 02               16236		.byte	2
000007fc 0c               16237		.byte	12
000007fd 000101           16238		.byte	0,1,1
                          16239		.section	.debug_info
                          16240	.LDW_5d9c900:
00002c02 11               16241		.byte	17
00002c03 717565756500     16242		.strz	"queue"
00002c09 bc0c             16243		.byte	188,12
00002c0b 6b               16244		.byte	107
00002c0c 01               16245		.byte	1
00002c0d 00000000         16246		.long	.LDW_4aac730
00002c11 00               16247		.byte	0
00002c12 016d             16248		.byte	1,109
                          16249	
                          16250	.LDW_5d9c7a0:
00002c14 11               16251		.byte	17
00002c15 6a6f6200         16252		.strz	"job"
00002c19 bd0c             16253		.byte	189,12
00002c1b 2f               16254		.byte	47
00002c1c 01               16255		.byte	1
00002c1d 00000000         16256		.long	.LDW_4aac688
00002c21 00               16257		.byte	0
00002c22 016f             16258		.byte	1,111
                          16259	
                          16260	.LDW_5d9c7f8:
00002c24 11               16261		.byte	17
00002c25 7365676d656e7449 16262		.strz	"segmentIndex"
00002c2d 6e64657800      
00002c32 bd0c             16263		.byte	189,12
00002c34 3b               16264		.byte	59
00002c35 01               16265		.byte	1
00002c36 00000000         16266		.long	.LDW_4ae9b80
00002c3a 00               16267		.byte	0
00002c3b 016e             16268		.byte	1,110
                          16269	
                          16270	.LDW_4aa37d8:
00002c3d 1f               16271		.byte	31
00002c3e 00000000         16272		.long	.LDW23
00002c42 00000000         16273		.long	.LDW33
                          16274	
00002c46 00               16275		.byte	0
                          16276	
00002c47 00               16277		.byte	0
                          16278	
                          16279	.LDW_5c3dd98:
00002c48 15               16280		.byte	21
00002c49 46626c4d656d496e 16281		.strz	"FblMemInitJob"
00002c51 69744a6f6200    
00002c57 d40c             16282		.byte	212,12
00002c59 0d               16283		.byte	13

                                   Fri Apr 10 08:32:15 2020           Page 292
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
00002c5a 01               16284		.byte	1
00002c5b 00000000         16285		.long	FblMemInitJob..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
00002c5f 00000000         16286		.long	__ghs_eofn_FblMemInitJob
00002c63 0151             16287		.byte	1,81
00002c65 03               16288		.byte	3
00002c66 00               16289		.byte	0
00002c67 00               16290		.byte	0
00002c68 00               16291		.byte	0
00002c69 00               16292		.byte	0
00002c6a 00               16293		.byte	0
00002c6b 00               16294		.byte	0
00002c6c 00               16295		.byte	0
00002c6d 01               16296		.byte	1
00002c6e 00               16297		.byte	0
00002c6f 01               16298		.byte	1
                          16299	
                          16300		.section	.debug_frame
                          16301	.LDW_5c0ee68:
000001b0 00000014         16302		.long	.LDW_unq_1c-.LDW_unq_1b
                          16303	.LDW_unq_1b:
000001b4 00000000         16304		.long	.LDW_5d27e08
000001b8 00000000         16305		.long	FblMemInitJob..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
000001bc 00000014         16306		.long	__ghs_eofn_FblMemInitJob-FblMemInitJob..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
000001c0 01               16307		.byte	1
000001c1 00000000         16308		.long	.LDW53
000001c5 00               16309		.byte	0
000001c6 00               16310		.byte	0
000001c7 00               16311		.byte	0
                          16312	.LDW_unq_1c:
                          16313		.section	.debug_line
00000800 000502           16314		.byte	0,5,2
00000803 00000000         16315		.long	FblMemInitJob..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
00000807 06               16316		.byte	6
00000808 03               16317		.byte	3
00000809 d70c             16318		.byte	215,12
0000080b 02               16319		.byte	2
0000080c 00               16320		.byte	0
0000080d 01               16321		.byte	1
0000080e 13               16322		.byte	19
0000080f 13               16323		.byte	19
00000810 14               16324		.byte	20
00000811 1b               16325		.byte	27
00000812 13               16326		.byte	19
00000813 14               16327		.byte	20
00000814 14               16328		.byte	20
00000815 13               16329		.byte	19
00000816 02               16330		.byte	2
00000817 02               16331		.byte	2
00000818 000101           16332		.byte	0,1,1
                          16333		.section	.debug_info
                          16334	.LDW_5d9c0c0:
00002c70 11               16335		.byte	17
00002c71 6a6f6200         16336		.strz	"job"
00002c75 d40c             16337		.byte	212,12
00002c77 47               16338		.byte	71
00002c78 01               16339		.byte	1

                                   Fri Apr 10 08:32:15 2020           Page 293
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
00002c79 00000000         16340		.long	.LDW_4aac688
00002c7d 00               16341		.byte	0
00002c7e 0153             16342		.byte	1,83
                          16343	
                          16344	.LDW_5d9c9b0:
00002c80 11               16345		.byte	17
00002c81 62756666657200   16346		.strz	"buffer"
00002c88 d40c             16347		.byte	212,12
00002c8a 5b               16348		.byte	91
00002c8b 01               16349		.byte	1
00002c8c 00000000         16350		.long	.LDW_4aeb9a0
00002c90 00               16351		.byte	0
00002c91 0154             16352		.byte	1,84
                          16353	
                          16354	.LDW_5d9c640:
00002c93 11               16355		.byte	17
00002c94 73697a6500       16356		.strz	"size"
00002c99 d40c             16357		.byte	212,12
00002c9b 6e               16358		.byte	110
00002c9c 01               16359		.byte	1
00002c9d 00000000         16360		.long	.LDW_5d9c170
00002ca1 00               16361		.byte	0
00002ca2 0155             16362		.byte	1,85
                          16363	
                          16364	.LDW_5d9c380:
00002ca4 11               16365		.byte	17
00002ca5 7479706500       16366		.strz	"type"
00002caa d50c             16367		.byte	213,12
00002cac 13               16368		.byte	19
00002cad 01               16369		.byte	1
00002cae 00000000         16370		.long	.LDW_5d9c958
00002cb2 00               16371		.byte	0
00002cb3 0156             16372		.byte	1,86
                          16373	
                          16374	.LDW_4aa3778:
00002cb5 1f               16375		.byte	31
00002cb6 00000000         16376		.long	.LDW43
00002cba 00000000         16377		.long	.LDW53
                          16378	
00002cbe 00               16379		.byte	0
                          16380	
00002cbf 00               16381		.byte	0
                          16382	
                          16383	.LDW_5c3de30:
00002cc0 15               16384		.byte	21
00002cc1 46626c4d656d496e 16385		.strz	"FblMemInitInputQueue"
00002cc9 6974496e70757451
00002cd1 7565756500      
00002cd6 ec0c             16386		.byte	236,12
00002cd8 0d               16387		.byte	13
00002cd9 01               16388		.byte	1
00002cda 00000000         16389		.long	FblMemInitInputQueue..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
00002cde 00000000         16390		.long	__ghs_eofn_FblMemInitInputQueue
00002ce2 0151             16391		.byte	1,81
00002ce4 00               16392		.byte	0
00002ce5 08               16393		.byte	8
00002ce6 00               16394		.byte	0
00002ce7 08               16395		.byte	8

                                   Fri Apr 10 08:32:15 2020           Page 294
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
00002ce8 00               16396		.byte	0
00002ce9 00               16397		.byte	0
00002cea 00               16398		.byte	0
00002ceb 00               16399		.byte	0
00002cec 01               16400		.byte	1
00002ced 00               16401		.byte	0
00002cee 01               16402		.byte	1
                          16403	
                          16404		.section	.debug_frame
                          16405	.LDW_5c0eda8:
000001c8 00000014         16406		.long	.LDW_unq_1e-.LDW_unq_1d
                          16407	.LDW_unq_1d:
000001cc 00000000         16408		.long	.LDW_5d27e08
000001d0 00000000         16409		.long	FblMemInitInputQueue..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
000001d4 00000030         16410		.long	__ghs_eofn_FblMemInitInputQueue-FblMemInitInputQueue..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
000001d8 01               16411		.byte	1
000001d9 00000000         16412		.long	.LDW73
000001dd 00               16413		.byte	0
000001de 00               16414		.byte	0
000001df 00               16415		.byte	0
                          16416	.LDW_unq_1e:
                          16417		.section	.debug_line
0000081b 000502           16418		.byte	0,5,2
0000081e 00000000         16419		.long	FblMemInitInputQueue..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
00000822 06               16420		.byte	6
00000823 03               16421		.byte	3
00000824 ec0c             16422		.byte	236,12
00000826 02               16423		.byte	2
00000827 00               16424		.byte	0
00000828 01               16425		.byte	1
00000829 03               16426		.byte	3
0000082a 0b               16427		.byte	11
0000082b 02               16428		.byte	2
0000082c 08               16429		.byte	8
0000082d 01               16430		.byte	1
0000082e 000502           16431		.byte	0,5,2
00000831 00000000         16432		.long	.LDWlin19
00000835 0d               16433		.byte	13
00000836 1c               16434		.byte	28
00000837 1d               16435		.byte	29
00000838 02               16436		.byte	2
00000839 08               16437		.byte	8
0000083a 000101           16438		.byte	0,1,1
                          16439		.section	.debug_info
                          16440	.LDW_4aa37a8:
00002cef 1f               16441		.byte	31
00002cf0 00000000         16442		.long	.LDW63
00002cf4 00000000         16443		.long	.LDW73
                          16444	
                          16445	.LDW_5d9c8a8:
00002cf8 07               16446		.byte	7
00002cf9 69647800         16447		.strz	"idx"
00002cfd ee0c             16448		.byte	238,12
00002cff 0b               16449		.byte	11
00002d00 01               16450		.byte	1
00002d01 00000000         16451		.long	.LDW_4ae9b80

                                   Fri Apr 10 08:32:15 2020           Page 295
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
00002d05 00               16452		.byte	0
00002d06 00               16453		.byte	0
                          16454	
                          16455	.LDW_5d9c118:
00002d07 07               16456		.byte	7
00002d08 61637475616c4261 16457		.strz	"actualBasicIdx"
00002d10 73696349647800  
00002d17 ef0c             16458		.byte	239,12
00002d19 0b               16459		.byte	11
00002d1a 01               16460		.byte	1
00002d1b 00000000         16461		.long	.LDW_4ae9b80
00002d1f 00               16462		.byte	0
00002d20 00               16463		.byte	0
                          16464	
00002d21 00               16465		.byte	0
                          16466	
00002d22 00               16467		.byte	0
                          16468	
                          16469	.LDW_5c3dec8:
00002d23 15               16470		.byte	21
00002d24 46626c4d656d496e 16471		.strz	"FblMemInitStates"
00002d2c 6974537461746573
00002d34 00              
00002d35 880d             16472		.byte	136,13
00002d37 0d               16473		.byte	13
00002d38 01               16474		.byte	1
00002d39 00000000         16475		.long	FblMemInitStates..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
00002d3d 00000000         16476		.long	__ghs_eofn_FblMemInitStates
00002d41 0151             16477		.byte	1,81
00002d43 03               16478		.byte	3
00002d44 00               16479		.byte	0
00002d45 00               16480		.byte	0
00002d46 00               16481		.byte	0
00002d47 00               16482		.byte	0
00002d48 00               16483		.byte	0
00002d49 00               16484		.byte	0
00002d4a 00               16485		.byte	0
00002d4b 01               16486		.byte	1
00002d4c 00               16487		.byte	0
00002d4d 01               16488		.byte	1
                          16489	
                          16490		.section	.debug_frame
                          16491	.LDW_5c0f0e8:
000001e0 00000014         16492		.long	.LDW_unq_20-.LDW_unq_1f
                          16493	.LDW_unq_1f:
000001e4 00000000         16494		.long	.LDW_5d27e08
000001e8 00000000         16495		.long	FblMemInitStates..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
000001ec 0000001c         16496		.long	__ghs_eofn_FblMemInitStates-FblMemInitStates..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
000001f0 01               16497		.byte	1
000001f1 00000000         16498		.long	.LDW93
000001f5 00               16499		.byte	0
000001f6 00               16500		.byte	0
000001f7 00               16501		.byte	0
                          16502	.LDW_unq_20:
                          16503		.section	.debug_line
0000083d 000502           16504		.byte	0,5,2
00000840 00000000         16505		.long	FblMemInitStates..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
00000844 06               16506		.byte	6
00000845 03               16507		.byte	3

                                   Fri Apr 10 08:32:15 2020           Page 296
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
00000846 8a0d             16508		.byte	138,13
00000848 02               16509		.byte	2
00000849 00               16510		.byte	0
0000084a 01               16511		.byte	1
0000084b 33               16512		.byte	51
0000084c 2d               16513		.byte	45
0000084d 2b               16514		.byte	43
0000084e 02               16515		.byte	2
0000084f 02               16516		.byte	2
00000850 000101           16517		.byte	0,1,1
                          16518		.section	.debug_info
                          16519	.LDW_5dad100:
00002d4e 1f               16520		.byte	31
00002d4f 00000000         16521		.long	.LDW83
00002d53 00000000         16522		.long	.LDW93
                          16523	
00002d57 00               16524		.byte	0
                          16525	
00002d58 00               16526		.byte	0
                          16527	
                          16528	.LDW_5c3df60:
00002d59 16               16529		.byte	22
00002d5a 46626c4d656d496e 16530		.strz	"FblMemInitInternal"
00002d62 6974496e7465726e
00002d6a 616c00          
00002d6d 990d             16531		.byte	153,13
00002d6f 17               16532		.byte	23
00002d70 01               16533		.byte	1
00002d71 00000000         16534		.long	.LDW_4aeb9a0
00002d75 00000000         16535		.long	FblMemInitInternal..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
00002d79 00000000         16536		.long	__ghs_eofn_FblMemInitInternal
00002d7d 0151             16537		.byte	1,81
00002d7f 00               16538		.byte	0
00002d80 08               16539		.byte	8
00002d81 00               16540		.byte	0
00002d82 08               16541		.byte	8
00002d83 00               16542		.byte	0
00002d84 00               16543		.byte	0
00002d85 00               16544		.byte	0
00002d86 00               16545		.byte	0
00002d87 01               16546		.byte	1
00002d88 00               16547		.byte	0
00002d89 01               16548		.byte	1
                          16549	
                          16550		.section	.debug_frame
                          16551	.LDW_5c0eea8:
000001f8 00000014         16552		.long	.LDW_unq_22-.LDW_unq_21
                          16553	.LDW_unq_21:
000001fc 00000000         16554		.long	.LDW_5d27e08
00000200 00000000         16555		.long	FblMemInitInternal..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
00000204 00000048         16556		.long	__ghs_eofn_FblMemInitInternal-FblMemInitInternal..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
00000208 01               16557		.byte	1
00000209 00000000         16558		.long	.LDW34
0000020d 00               16559		.byte	0
0000020e 00               16560		.byte	0
0000020f 00               16561		.byte	0
                          16562	.LDW_unq_22:
                          16563		.section	.debug_line

                                   Fri Apr 10 08:32:15 2020           Page 297
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
00000853 000502           16564		.byte	0,5,2
00000856 00000000         16565		.long	FblMemInitInternal..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
0000085a 06               16566		.byte	6
0000085b 03               16567		.byte	3
0000085c 990d             16568		.byte	153,13
0000085e 02               16569		.byte	2
0000085f 00               16570		.byte	0
00000860 01               16571		.byte	1
00000861 2d               16572		.byte	45
00000862 000502           16573		.byte	0,5,2
00000865 00000000         16574		.long	.LDWlin21
00000869 03               16575		.byte	3
0000086a 04               16576		.byte	4
0000086b 02               16577		.byte	2
0000086c 00               16578		.byte	0
0000086d 01               16579		.byte	1
0000086e 000502           16580		.byte	0,5,2
00000871 00000000         16581		.long	.LDWlin22
00000875 0c               16582		.byte	12
00000876 000502           16583		.byte	0,5,2
00000879 00000000         16584		.long	.LDWlin23
0000087d 0d               16585		.byte	13
0000087e 000502           16586		.byte	0,5,2
00000881 00000000         16587		.long	.LDWlin24
00000885 03               16588		.byte	3
00000886 10               16589		.byte	16
00000887 02               16590		.byte	2
00000888 00               16591		.byte	0
00000889 01               16592		.byte	1
0000088a 000502           16593		.byte	0,5,2
0000088d 00000000         16594		.long	.LDWlin25
00000891 03               16595		.byte	3
00000892 08               16596		.byte	8
00000893 02               16597		.byte	2
00000894 00               16598		.byte	0
00000895 01               16599		.byte	1
00000896 34               16600		.byte	52
00000897 06               16601		.byte	6
00000898 000502           16602		.byte	0,5,2
0000089b 00000000         16603		.long	.LDWlin26
0000089f 02               16604		.byte	2
000008a0 00               16605		.byte	0
000008a1 02               16606		.byte	2
000008a2 08               16607		.byte	8
000008a3 000101           16608		.byte	0,1,1
                          16609		.section	.debug_info
                          16610	.LDW_5dad3d0:
00002d8a 1f               16611		.byte	31
00002d8b 00000000         16612		.long	.LDW24
00002d8f 00000000         16613		.long	.LDW34
                          16614	
00002d93 00               16615		.byte	0
                          16616	
00002d94 00               16617		.byte	0
                          16618	
                          16619	.LDW_5dadbd8:

                                   Fri Apr 10 08:32:15 2020           Page 298
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
00002d95 15               16620		.byte	21
00002d96 46626c4d656d5374 16621		.strz	"FblMemStorePreamble"
00002d9e 6f7265507265616d
00002da6 626c6500        
00002daa cc0d             16622		.byte	204,13
00002dac 0d               16623		.byte	13
00002dad 01               16624		.byte	1
00002dae 00000000         16625		.long	FblMemStorePreamble..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
00002db2 00000000         16626		.long	__ghs_eofn_FblMemStorePreamble
00002db6 0151             16627		.byte	1,81
00002db8 00               16628		.byte	0
00002db9 08               16629		.byte	8
00002dba 00               16630		.byte	0
00002dbb 08               16631		.byte	8
00002dbc 00               16632		.byte	0
00002dbd 00               16633		.byte	0
00002dbe 00               16634		.byte	0
00002dbf 00               16635		.byte	0
00002dc0 01               16636		.byte	1
00002dc1 00               16637		.byte	0
00002dc2 01               16638		.byte	1
                          16639	
                          16640		.section	.debug_frame
                          16641	.LDW_5c0ea28:
00000210 00000014         16642		.long	.LDW_unq_24-.LDW_unq_23
                          16643	.LDW_unq_23:
00000214 00000000         16644		.long	.LDW_5d27e08
00000218 00000000         16645		.long	FblMemStorePreamble..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
0000021c 00000022         16646		.long	__ghs_eofn_FblMemStorePreamble-FblMemStorePreamble..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
00000220 01               16647		.byte	1
00000221 00000000         16648		.long	.LDW54
00000225 00               16649		.byte	0
00000226 00               16650		.byte	0
00000227 00               16651		.byte	0
                          16652	.LDW_unq_24:
                          16653		.section	.debug_line
000008a6 000502           16654		.byte	0,5,2
000008a9 00000000         16655		.long	FblMemStorePreamble..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
000008ad 06               16656		.byte	6
000008ae 03               16657		.byte	3
000008af cc0d             16658		.byte	204,13
000008b1 02               16659		.byte	2
000008b2 00               16660		.byte	0
000008b3 01               16661		.byte	1
000008b4 03               16662		.byte	3
000008b5 07               16663		.byte	7
000008b6 02               16664		.byte	2
000008b7 08               16665		.byte	8
000008b8 01               16666		.byte	1
000008b9 000502           16667		.byte	0,5,2
000008bc 00000000         16668		.long	.LDWlin27
000008c0 0b               16669		.byte	11
000008c1 02               16670		.byte	2
000008c2 08               16671		.byte	8
000008c3 000101           16672		.byte	0,1,1
                          16673		.section	.debug_info
                          16674	.LDW_5dad2b0:
00002dc3 1f               16675		.byte	31

                                   Fri Apr 10 08:32:15 2020           Page 299
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
00002dc4 00000000         16676		.long	.LDW44
00002dc8 00000000         16677		.long	.LDW54
                          16678	
00002dcc 00               16679		.byte	0
                          16680	
00002dcd 00               16681		.byte	0
                          16682	
                          16683	.LDW_5dae0c0:
00002dce 15               16684		.byte	21
00002dcf 46626c4d656d5265 16685		.strz	"FblMemRestorePreamble"
00002dd7 73746f7265507265
00002ddf 616d626c6500    
00002de5 e00d             16686		.byte	224,13
00002de7 0d               16687		.byte	13
00002de8 01               16688		.byte	1
00002de9 00000000         16689		.long	FblMemRestorePreamble..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
00002ded 00000000         16690		.long	__ghs_eofn_FblMemRestorePreamble
00002df1 0151             16691		.byte	1,81
00002df3 00               16692		.byte	0
00002df4 08               16693		.byte	8
00002df5 00               16694		.byte	0
00002df6 08               16695		.byte	8
00002df7 00               16696		.byte	0
00002df8 00               16697		.byte	0
00002df9 00               16698		.byte	0
00002dfa 00               16699		.byte	0
00002dfb 01               16700		.byte	1
00002dfc 00               16701		.byte	0
00002dfd 01               16702		.byte	1
                          16703	
                          16704		.section	.debug_frame
                          16705	.LDW_5c0ef68:
00000228 00000014         16706		.long	.LDW_unq_26-.LDW_unq_25
                          16707	.LDW_unq_25:
0000022c 00000000         16708		.long	.LDW_5d27e08
00000230 00000000         16709		.long	FblMemRestorePreamble..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
00000234 00000020         16710		.long	__ghs_eofn_FblMemRestorePreamble-FblMemRestorePreamble..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
00000238 01               16711		.byte	1
00000239 00000000         16712		.long	.LDW74
0000023d 00               16713		.byte	0
0000023e 00               16714		.byte	0
0000023f 00               16715		.byte	0
                          16716	.LDW_unq_26:
                          16717		.section	.debug_line
000008c6 000502           16718		.byte	0,5,2
000008c9 00000000         16719		.long	FblMemRestorePreamble..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
000008cd 06               16720		.byte	6
000008ce 03               16721		.byte	3
000008cf e00d             16722		.byte	224,13
000008d1 02               16723		.byte	2
000008d2 00               16724		.byte	0
000008d3 01               16725		.byte	1
000008d4 2c               16726		.byte	44
000008d5 000502           16727		.byte	0,5,2
000008d8 00000000         16728		.long	.LDWlin28
000008dc 0b               16729		.byte	11
000008dd 02               16730		.byte	2
000008de 08               16731		.byte	8

                                   Fri Apr 10 08:32:15 2020           Page 300
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
000008df 000101           16732		.byte	0,1,1
                          16733		.section	.debug_info
                          16734	.LDW_5dad250:
00002dfe 1f               16735		.byte	31
00002dff 00000000         16736		.long	.LDW64
00002e03 00000000         16737		.long	.LDW74
                          16738	
00002e07 00               16739		.byte	0
                          16740	
00002e08 00               16741		.byte	0
                          16742	
                          16743	.LDW_5dae6b0:
00002e09 16               16744		.byte	22
00002e0a 46626c4d656d5061 16745		.strz	"FblMemPadLength"
00002e12 644c656e67746800
00002e1a 9e0e             16746		.byte	158,14
00002e1c 13               16747		.byte	19
00002e1d 01               16748		.byte	1
00002e1e 00000000         16749		.long	.LDW_5d9c170
00002e22 00000000         16750		.long	FblMemPadLength..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
00002e26 00000000         16751		.long	__ghs_eofn_FblMemPadLength
00002e2a 0151             16752		.byte	1,81
00002e2c 808080c00f       16753		.byte	128,128,128,192,15
00002e31 0c               16754		.byte	12
00002e32 00               16755		.byte	0
00002e33 20               16756		.byte	32
00002e34 00               16757		.byte	0
00002e35 00               16758		.byte	0
00002e36 00               16759		.byte	0
00002e37 00               16760		.byte	0
00002e38 01               16761		.byte	1
00002e39 00               16762		.byte	0
00002e3a 01               16763		.byte	1
                          16764	
                          16765		.section	.debug_frame
                          16766	.LDW_5c0ea68:
00000240 00000014         16767		.long	.LDW_unq_28-.LDW_unq_27
                          16768	.LDW_unq_27:
00000244 00000000         16769		.long	.LDW_5d27e08
00000248 00000000         16770		.long	FblMemPadLength..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
0000024c 0000006a         16771		.long	__ghs_eofn_FblMemPadLength-FblMemPadLength..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
00000250 01               16772		.byte	1
00000251 00000000         16773		.long	.LDW94
00000255 00               16774		.byte	0
00000256 00               16775		.byte	0
00000257 00               16776		.byte	0
                          16777	.LDW_unq_28:
                          16778		.section	.debug_line
000008e2 000502           16779		.byte	0,5,2
000008e5 00000000         16780		.long	FblMemPadLength..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
000008e9 06               16781		.byte	6
000008ea 03               16782		.byte	3
000008eb 9e0e             16783		.byte	158,14
000008ed 02               16784		.byte	2
000008ee 00               16785		.byte	0
000008ef 01               16786		.byte	1
000008f0 03               16787		.byte	3

                                   Fri Apr 10 08:32:15 2020           Page 301
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
000008f1 08               16788		.byte	8
000008f2 02               16789		.byte	2
000008f3 10               16790		.byte	16
000008f4 01               16791		.byte	1
000008f5 15               16792		.byte	21
000008f6 000502           16793		.byte	0,5,2
000008f9 00000000         16794		.long	.LDWlin29
000008fd 0b               16795		.byte	11
000008fe 0b               16796		.byte	11
000008ff 13               16797		.byte	19
00000900 02               16798		.byte	2
00000901 00               16799		.byte	0
00000902 0d               16800		.byte	13
00000903 1d               16801		.byte	29
00000904 1d               16802		.byte	29
00000905 25               16803		.byte	37
00000906 25               16804		.byte	37
00000907 000502           16805		.byte	0,5,2
0000090a 00000000         16806		.long	.LDWlin30
0000090e 0b               16807		.byte	11
0000090f 0c               16808		.byte	12
00000910 03               16809		.byte	3
00000911 04               16810		.byte	4
00000912 02               16811		.byte	2
00000913 1e               16812		.byte	30
00000914 01               16813		.byte	1
00000915 15               16814		.byte	21
00000916 000502           16815		.byte	0,5,2
00000919 00000000         16816		.long	.LDWlin31
0000091d 0b               16817		.byte	11
0000091e 0b               16818		.byte	11
0000091f 13               16819		.byte	19
00000920 02               16820		.byte	2
00000921 00               16821		.byte	0
00000922 0d               16822		.byte	13
00000923 13               16823		.byte	19
00000924 02               16824		.byte	2
00000925 00               16825		.byte	0
00000926 0d               16826		.byte	13
00000927 14               16827		.byte	20
00000928 06               16828		.byte	6
00000929 02               16829		.byte	2
0000092a 02               16830		.byte	2
0000092b 02               16831		.byte	2
0000092c 0c               16832		.byte	12
0000092d 000101           16833		.byte	0,1,1
                          16834		.section	.debug_info
                          16835	.LDW_5d9c3d8:
00002e3b 11               16836		.byte	17
00002e3c 6164647265737300 16837		.strz	"address"
00002e44 9e0e             16838		.byte	158,14
00002e46 30               16839		.byte	48
00002e47 01               16840		.byte	1
00002e48 00000000         16841		.long	.LDW_5d9ca08
00002e4c 00               16842		.byte	0
00002e4d 016e             16843		.byte	1,110

                                   Fri Apr 10 08:32:15 2020           Page 302
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          16844	
                          16845	.LDW_5d9c430:
00002e4f 11               16846		.byte	17
00002e50 6c656e67746800   16847		.strz	"length"
00002e57 9e0e             16848		.byte	158,14
00002e59 44               16849		.byte	68
00002e5a 01               16850		.byte	1
00002e5b 00000000         16851		.long	.LDW_5d9c170
00002e5f 00               16852		.byte	0
00002e60 016d             16853		.byte	1,109
                          16854	
                          16855	.LDW_5dad160:
00002e62 1f               16856		.byte	31
00002e63 00000000         16857		.long	.LDW84
00002e67 00000000         16858		.long	.LDW94
                          16859	
                          16860	.LDW_5d9c5e8:
00002e6b 06               16861		.byte	6
00002e6c 6c6f63616c416464 16862		.strz	"localAddress"
00002e74 7265737300      
00002e79 a00e             16863		.byte	160,14
00002e7b 10               16864		.byte	16
00002e7c 01               16865		.byte	1
00002e7d 00000000         16866		.long	.LDW_5d9c170
00002e81 00               16867		.byte	0
00002e82 00               16868		.byte	0
00002e83 016e             16869		.byte	1,110
                          16870	
                          16871	.LDW_5d9c1c8:
00002e85 06               16872		.byte	6
00002e86 6c6f63616c4c656e 16873		.strz	"localLength"
00002e8e 67746800        
00002e92 a10e             16874		.byte	161,14
00002e94 10               16875		.byte	16
00002e95 01               16876		.byte	1
00002e96 00000000         16877		.long	.LDW_5d9c170
00002e9a 00               16878		.byte	0
00002e9b 00               16879		.byte	0
00002e9c 0150             16880		.byte	1,80
                          16881	
                          16882	.LDW_5d9ca60:
00002e9e 06               16883		.byte	6
00002e9f 7061644c656e00   16884		.strz	"padLen"
00002ea6 a20e             16885		.byte	162,14
00002ea8 10               16886		.byte	16
00002ea9 01               16887		.byte	1
00002eaa 00000000         16888		.long	.LDW_5d9c170
00002eae 00               16889		.byte	0
00002eaf 00               16890		.byte	0
00002eb0 016f             16891		.byte	1,111
                          16892	
                          16893	.LDW_5d9c6f0:
00002eb2 06               16894		.byte	6
00002eb3 616c69676e4d6173 16895		.strz	"alignMask"
00002ebb 6b00            
00002ebd a30e             16896		.byte	163,14
00002ebf 10               16897		.byte	16
00002ec0 01               16898		.byte	1
00002ec1 00000000         16899		.long	.LDW_5d9ca08

                                   Fri Apr 10 08:32:15 2020           Page 303
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
00002ec5 00               16900		.byte	0
00002ec6 00               16901		.byte	0
00002ec7 0150             16902		.byte	1,80
                          16903	
                          16904	.LDW_5d9c748:
00002ec9 06               16905		.byte	6
00002eca 6f6c645365676d65 16906		.strz	"oldSegment"
00002ed2 6e7400          
00002ed5 a40e             16907		.byte	164,14
00002ed7 10               16908		.byte	16
00002ed8 01               16909		.byte	1
00002ed9 00000000         16910		.long	.LDW_5d9cb10
00002edd 00               16911		.byte	0
00002ede 00               16912		.byte	0
00002edf 016c             16913		.byte	1,108
                          16914	
00002ee1 00               16915		.byte	0
                          16916	
00002ee2 00               16917		.byte	0
                          16918	
                          16919	.LDW_5daeb70:
00002ee3 16               16920		.byte	22
00002ee4 46626c4d656d5061 16921		.strz	"FblMemPadBuffer"
00002eec 6442756666657200
00002ef4 df0e             16922		.byte	223,14
00002ef6 13               16923		.byte	19
00002ef7 01               16924		.byte	1
00002ef8 00000000         16925		.long	.LDW_5d9c170
00002efc 00000000         16926		.long	FblMemPadBuffer..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
00002f00 00000000         16927		.long	__ghs_eofn_FblMemPadBuffer
00002f04 0151             16928		.byte	1,81
00002f06 8080808008       16929		.byte	128,128,128,128,8
00002f0b 0c               16930		.byte	12
00002f0c 00               16931		.byte	0
00002f0d 10               16932		.byte	16
00002f0e 00               16933		.byte	0
00002f0f 00               16934		.byte	0
00002f10 00               16935		.byte	0
00002f11 00               16936		.byte	0
00002f12 01               16937		.byte	1
00002f13 00               16938		.byte	0
00002f14 01               16939		.byte	1
                          16940	
                          16941		.section	.debug_frame
                          16942	.LDW_5c0eaa8:
00000258 00000014         16943		.long	.LDW_unq_2a-.LDW_unq_29
                          16944	.LDW_unq_29:
0000025c 00000000         16945		.long	.LDW_5d27e08
00000260 00000000         16946		.long	FblMemPadBuffer..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
00000264 0000002e         16947		.long	__ghs_eofn_FblMemPadBuffer-FblMemPadBuffer..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
00000268 01               16948		.byte	1
00000269 00000000         16949		.long	.LDW15
0000026d 00               16950		.byte	0
0000026e 00               16951		.byte	0
0000026f 00               16952		.byte	0
                          16953	.LDW_unq_2a:
                          16954		.section	.debug_line
00000930 000502           16955		.byte	0,5,2

                                   Fri Apr 10 08:32:15 2020           Page 304
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
00000933 00000000         16956		.long	FblMemPadBuffer..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
00000937 06               16957		.byte	6
00000938 03               16958		.byte	3
00000939 df0e             16959		.byte	223,14
0000093b 02               16960		.byte	2
0000093c 00               16961		.byte	0
0000093d 01               16962		.byte	1
0000093e 03               16963		.byte	3
0000093f 06               16964		.byte	6
00000940 02               16965		.byte	2
00000941 0c               16966		.byte	12
00000942 01               16967		.byte	1
00000943 000502           16968		.byte	0,5,2
00000946 00000000         16969		.long	.LDWlin32
0000094a 03               16970		.byte	3
0000094b 04               16971		.byte	4
0000094c 02               16972		.byte	2
0000094d 00               16973		.byte	0
0000094e 01               16974		.byte	1
0000094f 000502           16975		.byte	0,5,2
00000952 00000000         16976		.long	.LDWlin33
00000956 0b               16977		.byte	11
00000957 0c               16978		.byte	12
00000958 15               16979		.byte	21
00000959 02               16980		.byte	2
0000095a 02               16981		.byte	2
0000095b 000502           16982		.byte	0,5,2
0000095e 00000000         16983		.long	.LDWlin34
00000962 03               16984		.byte	3
00000963 07               16985		.byte	7
00000964 02               16986		.byte	2
00000965 00               16987		.byte	0
00000966 01               16988		.byte	1
00000967 03               16989		.byte	3
00000968 79               16990		.byte	121
00000969 02               16991		.byte	2
0000096a 06               16992		.byte	6
0000096b 01               16993		.byte	1
0000096c 000502           16994		.byte	0,5,2
0000096f 00000000         16995		.long	.LDWlin35
00000973 03               16996		.byte	3
00000974 08               16997		.byte	8
00000975 02               16998		.byte	2
00000976 00               16999		.byte	0
00000977 01               17000		.byte	1
00000978 0b               17001		.byte	11
00000979 02               17002		.byte	2
0000097a 00               17003		.byte	0
0000097b 0c               17004		.byte	12
0000097c 02               17005		.byte	2
0000097d 0a               17006		.byte	10
0000097e 000101           17007		.byte	0,1,1
                          17008		.section	.debug_info
                          17009	.LDW_5d9c278:
00002f15 11               17010		.byte	17
00002f16 6164647265737300 17011		.strz	"address"

                                   Fri Apr 10 08:32:15 2020           Page 305
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
00002f1e df0e             17012		.byte	223,14
00002f20 30               17013		.byte	48
00002f21 01               17014		.byte	1
00002f22 00000000         17015		.long	.LDW_5d9ca08
00002f26 00               17016		.byte	0
00002f27 0153             17017		.byte	1,83
                          17018	
                          17019	.LDW_5d9c2d0:
00002f29 11               17020		.byte	17
00002f2a 6c656e67746800   17021		.strz	"length"
00002f31 df0e             17022		.byte	223,14
00002f33 44               17023		.byte	68
00002f34 01               17024		.byte	1
00002f35 00000000         17025		.long	.LDW_5d9c170
00002f39 00               17026		.byte	0
00002f3a 0154             17027		.byte	1,84
                          17028	
                          17029	.LDW_5d9cb68:
00002f3c 11               17030		.byte	17
00002f3d 6461746100       17031		.strz	"data"
00002f42 df0e             17032		.byte	223,14
00002f44 5b               17033		.byte	91
00002f45 01               17034		.byte	1
00002f46 00000000         17035		.long	.LDW_4aeb9a0
00002f4a 00               17036		.byte	0
00002f4b 016f             17037		.byte	1,111
                          17038	
                          17039	.LDW_5dad5e0:
00002f4d 1f               17040		.byte	31
00002f4e 00000000         17041		.long	.LDW05
00002f52 00000000         17042		.long	.LDW15
                          17043	
                          17044	.LDW_5d9c4e0:
00002f56 06               17045		.byte	6
00002f57 7061644275666665 17046		.strz	"padBuffer"
00002f5f 7200            
00002f61 e10e             17047		.byte	225,14
00002f63 13               17048		.byte	19
00002f64 01               17049		.byte	1
00002f65 00000000         17050		.long	.LDW_4aeb9a0
00002f69 00               17051		.byte	0
00002f6a 00               17052		.byte	0
00002f6b 016f             17053		.byte	1,111
                          17054	
                          17055	.LDW_5d9c698:
00002f6d 06               17056		.byte	6
00002f6e 7061644c656e00   17057		.strz	"padLen"
00002f75 e20e             17058		.byte	226,14
00002f77 0f               17059		.byte	15
00002f78 01               17060		.byte	1
00002f79 00000000         17061		.long	.LDW_5d9c170
00002f7d 00               17062		.byte	0
00002f7e 00               17063		.byte	0
00002f7f 0153             17064		.byte	1,83
                          17065	
                          17066	.LDW_5d9ced8:
00002f81 06               17067		.byte	6

                                   Fri Apr 10 08:32:15 2020           Page 306
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
00002f82 69647800         17068		.strz	"idx"
00002f86 e30e             17069		.byte	227,14
00002f88 0f               17070		.byte	15
00002f89 01               17071		.byte	1
00002f8a 00000000         17072		.long	.LDW_5d9c170
00002f8e 00               17073		.byte	0
00002f8f 00               17074		.byte	0
00002f90 0150             17075		.byte	1,80
                          17076	
00002f92 00               17077		.byte	0
                          17078	
00002f93 00               17079		.byte	0
                          17080	
                          17081	.LDW_5dae4e8:
00002f94 16               17082		.byte	22
00002f95 46626c4d656d436f 17083		.strz	"FblMemCopyBuffer"
00002f9d 7079427566666572
00002fa5 00              
00002fa6 9d0f             17084		.byte	157,15
00002fa8 16               17085		.byte	22
00002fa9 01               17086		.byte	1
00002faa 00000000         17087		.long	.LDW_4aea750
00002fae 00000000         17088		.long	FblMemCopyBuffer..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
00002fb2 00000000         17089		.long	__ghs_eofn_FblMemCopyBuffer
00002fb6 0151             17090		.byte	1,81
00002fb8 00               17091		.byte	0
00002fb9 08               17092		.byte	8
00002fba 00               17093		.byte	0
00002fbb 08               17094		.byte	8
00002fbc 00               17095		.byte	0
00002fbd 00               17096		.byte	0
00002fbe 00               17097		.byte	0
00002fbf 00               17098		.byte	0
00002fc0 01               17099		.byte	1
00002fc1 00               17100		.byte	0
00002fc2 01               17101		.byte	1
                          17102	
                          17103		.section	.debug_frame
                          17104	.LDW_5c0efa8:
00000270 00000014         17105		.long	.LDW_unq_2c-.LDW_unq_2b
                          17106	.LDW_unq_2b:
00000274 00000000         17107		.long	.LDW_5d27e08
00000278 00000000         17108		.long	FblMemCopyBuffer..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
0000027c 0000001c         17109		.long	__ghs_eofn_FblMemCopyBuffer-FblMemCopyBuffer..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
00000280 01               17110		.byte	1
00000281 00000000         17111		.long	.LDW35
00000285 00               17112		.byte	0
00000286 00               17113		.byte	0
00000287 00               17114		.byte	0
                          17115	.LDW_unq_2c:
                          17116		.section	.debug_line
00000981 000502           17117		.byte	0,5,2
00000984 00000000         17118		.long	FblMemCopyBuffer..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
00000988 06               17119		.byte	6
00000989 03               17120		.byte	3
0000098a 9e0f             17121		.byte	158,15
0000098c 02               17122		.byte	2
0000098d 00               17123		.byte	0

                                   Fri Apr 10 08:32:15 2020           Page 307
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
0000098e 01               17124		.byte	1
0000098f 34               17125		.byte	52
00000990 2c               17126		.byte	44
00000991 06               17127		.byte	6
00000992 02               17128		.byte	2
00000993 02               17129		.byte	2
00000994 02               17130		.byte	2
00000995 08               17131		.byte	8
00000996 000101           17132		.byte	0,1,1
                          17133		.section	.debug_info
                          17134	.LDW_5d9cfe0:
00002fc3 11               17135		.byte	17
00002fc4 70726f6772616d41 17136		.strz	"programAddress"
00002fcc 64647265737300  
00002fd3 9d0f             17137		.byte	157,15
00002fd5 34               17138		.byte	52
00002fd6 01               17139		.byte	1
00002fd7 00000000         17140		.long	.LDW_5d9ca08
00002fdb 00               17141		.byte	0
00002fdc 0153             17142		.byte	1,83
                          17143	
                          17144	.LDW_5d9cbc0:
00002fde 11               17145		.byte	17
00002fdf 70726f6772616d4c 17146		.strz	"programLength"
00002fe7 656e67746800    
00002fed 9e0f             17147		.byte	158,15
00002fef 35               17148		.byte	53
00002ff0 01               17149		.byte	1
00002ff1 00000000         17150		.long	.LDW_4aacb20
00002ff5 00               17151		.byte	0
00002ff6 0150             17152		.byte	1,80
                          17153	
                          17154	.LDW_5d9d038:
00002ff8 11               17155		.byte	17
00002ff9 70726f6772616d44 17156		.strz	"programData"
00003001 61746100        
00003005 9e0f             17157		.byte	158,15
00003007 58               17158		.byte	88
00003008 01               17159		.byte	1
00003009 00000000         17160		.long	.LDW_5d9ce80
0000300d 00               17161		.byte	0
0000300e 0155             17162		.byte	1,85
                          17163	
                          17164	.LDW_5dad520:
00003010 1f               17165		.byte	31
00003011 00000000         17166		.long	.LDW25
00003015 00000000         17167		.long	.LDW35
                          17168	
00003019 00               17169		.byte	0
                          17170	
0000301a 00               17171		.byte	0
                          17172	
                          17173	.LDW_5dae748:
0000301b 16               17174		.byte	22
0000301c 46626c4d656d4572 17175		.strz	"FblMemEraseRegionInternal"
00003024 617365526567696f
0000302c 6e496e7465726e61
00003034 6c00            
00003036 b10f             17176		.byte	177,15
00003038 16               17177		.byte	22
00003039 01               17178		.byte	1
0000303a 00000000         17179		.long	.LDW_4aea750

                                   Fri Apr 10 08:32:15 2020           Page 308
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
0000303e 00000000         17180		.long	FblMemEraseRegionInternal..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
00003042 00000000         17181		.long	__ghs_eofn_FblMemEraseRegionInternal
00003046 0151             17182		.byte	1,81
00003048 808080fc0f       17183		.byte	128,128,128,252,15
0000304d 0c               17184		.byte	12
0000304e 00               17185		.byte	0
0000304f 30               17186		.byte	48
00003050 00               17187		.byte	0
00003051 00               17188		.byte	0
00003052 00               17189		.byte	0
00003053 00               17190		.byte	0
00003054 01               17191		.byte	1
00003055 00               17192		.byte	0
00003056 01               17193		.byte	1
                          17194	
                          17195		.section	.debug_frame
                          17196	.LDW_5c0eb28:
00000288 00000014         17197		.long	.LDW_unq_2e-.LDW_unq_2d
                          17198	.LDW_unq_2d:
0000028c 00000000         17199		.long	.LDW_5d27e08
00000290 00000000         17200		.long	FblMemEraseRegionInternal..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
00000294 000000ea         17201		.long	__ghs_eofn_FblMemEraseRegionInternal-FblMemEraseRegionInternal..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
00000298 01               17202		.byte	1
00000299 00000000         17203		.long	.LDW55
0000029d 00               17204		.byte	0
0000029e 00               17205		.byte	0
0000029f 00               17206		.byte	0
                          17207	.LDW_unq_2e:
                          17208		.section	.debug_line
00000999 000502           17209		.byte	0,5,2
0000099c 00000000         17210		.long	FblMemEraseRegionInternal..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
000009a0 06               17211		.byte	6
000009a1 03               17212		.byte	3
000009a2 b10f             17213		.byte	177,15
000009a4 02               17214		.byte	2
000009a5 00               17215		.byte	0
000009a6 01               17216		.byte	1
000009a7 03               17217		.byte	3
000009a8 0b               17218		.byte	11
000009a9 02               17219		.byte	2
000009aa 0c               17220		.byte	12
000009ab 01               17221		.byte	1
000009ac 1c               17222		.byte	28
000009ad 13               17223		.byte	19
000009ae 55               17224		.byte	85
000009af 000502           17225		.byte	0,5,2
000009b2 00000000         17226		.long	.LDWlin36
000009b6 0b               17227		.byte	11
000009b7 0b               17228		.byte	11
000009b8 03               17229		.byte	3
000009b9 24               17230		.byte	36
000009ba 02               17231		.byte	2
000009bb 02               17232		.byte	2
000009bc 01               17233		.byte	1
000009bd 03               17234		.byte	3
000009be 09               17235		.byte	9

                                   Fri Apr 10 08:32:15 2020           Page 309
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
000009bf 02               17236		.byte	2
000009c0 00               17237		.byte	0
000009c1 01               17238		.byte	1
000009c2 0c               17239		.byte	12
000009c3 0c               17240		.byte	12
000009c4 000502           17241		.byte	0,5,2
000009c7 00000000         17242		.long	.LDWlin37
000009cb 03               17243		.byte	3
000009cc 51               17244		.byte	81
000009cd 02               17245		.byte	2
000009ce 00               17246		.byte	0
000009cf 01               17247		.byte	1
000009d0 0c               17248		.byte	12
000009d1 0b               17249		.byte	11
000009d2 14               17250		.byte	20
000009d3 000502           17251		.byte	0,5,2
000009d6 00000000         17252		.long	.LDWlin38
000009da 0d               17253		.byte	13
000009db 000502           17254		.byte	0,5,2
000009de 00000000         17255		.long	.LDWlin39
000009e2 0c               17256		.byte	12
000009e3 000502           17257		.byte	0,5,2
000009e6 00000000         17258		.long	.LDWlin40
000009ea 0d               17259		.byte	13
000009eb 03               17260		.byte	3
000009ec 0d               17261		.byte	13
000009ed 02               17262		.byte	2
000009ee 04               17263		.byte	4
000009ef 01               17264		.byte	1
000009f0 6b               17265		.byte	107
000009f1 000502           17266		.byte	0,5,2
000009f4 00000000         17267		.long	.LDWlin41
000009f8 0b               17268		.byte	11
000009f9 0b               17269		.byte	11
000009fa 2c               17270		.byte	44
000009fb 000502           17271		.byte	0,5,2
000009fe 00000000         17272		.long	.LDWlin42
00000a02 03               17273		.byte	3
00000a03 05               17274		.byte	5
00000a04 02               17275		.byte	2
00000a05 00               17276		.byte	0
00000a06 01               17277		.byte	1
00000a07 02               17278		.byte	2
00000a08 00               17279		.byte	0
00000a09 0d               17280		.byte	13
00000a0a 33               17281		.byte	51
00000a0b 000502           17282		.byte	0,5,2
00000a0e 00000000         17283		.long	.LDWlin43
00000a12 0b               17284		.byte	11
00000a13 0b               17285		.byte	11
00000a14 000502           17286		.byte	0,5,2
00000a17 00000000         17287		.long	.LDWlin44
00000a1b 03               17288		.byte	3
00000a1c 07               17289		.byte	7
00000a1d 02               17290		.byte	2
00000a1e 00               17291		.byte	0

                                   Fri Apr 10 08:32:15 2020           Page 310
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
00000a1f 01               17292		.byte	1
00000a20 02               17293		.byte	2
00000a21 00               17294		.byte	0
00000a22 0b               17295		.byte	11
00000a23 0c               17296		.byte	12
00000a24 0b               17297		.byte	11
00000a25 13               17298		.byte	19
00000a26 13               17299		.byte	19
00000a27 02               17300		.byte	2
00000a28 00               17301		.byte	0
00000a29 03               17302		.byte	3
00000a2a 0e               17303		.byte	14
00000a2b 02               17304		.byte	2
00000a2c 00               17305		.byte	0
00000a2d 01               17306		.byte	1
00000a2e 000502           17307		.byte	0,5,2
00000a31 00000000         17308		.long	.LDWlin45
00000a35 03               17309		.byte	3
00000a36 04               17310		.byte	4
00000a37 02               17311		.byte	2
00000a38 00               17312		.byte	0
00000a39 01               17313		.byte	1
00000a3a 02               17314		.byte	2
00000a3b 00               17315		.byte	0
00000a3c 0d               17316		.byte	13
00000a3d 03               17317		.byte	3
00000a3e 04               17318		.byte	4
00000a3f 02               17319		.byte	2
00000a40 0a               17320		.byte	10
00000a41 01               17321		.byte	1
00000a42 06               17322		.byte	6
00000a43 000502           17323		.byte	0,5,2
00000a46 00000000         17324		.long	.LDWlin46
00000a4a 03               17325		.byte	3
00000a4b 77               17326		.byte	119
00000a4c 02               17327		.byte	2
00000a4d 00               17328		.byte	0
00000a4e 01               17329		.byte	1
00000a4f 06               17330		.byte	6
00000a50 03               17331		.byte	3
00000a51 0a               17332		.byte	10
00000a52 02               17333		.byte	2
00000a53 00               17334		.byte	0
00000a54 01               17335		.byte	1
00000a55 0b               17336		.byte	11
00000a56 000502           17337		.byte	0,5,2
00000a59 00000000         17338		.long	.LDWlin47
00000a5d 0c               17339		.byte	12
00000a5e 02               17340		.byte	2
00000a5f 00               17341		.byte	0
00000a60 03               17342		.byte	3
00000a61 0d               17343		.byte	13
00000a62 02               17344		.byte	2
00000a63 00               17345		.byte	0
00000a64 01               17346		.byte	1
00000a65 000502           17347		.byte	0,5,2

                                   Fri Apr 10 08:32:15 2020           Page 311
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
00000a68 00000000         17348		.long	.LDWlin48
00000a6c 0b               17349		.byte	11
00000a6d 0c               17350		.byte	12
00000a6e 000502           17351		.byte	0,5,2
00000a71 00000000         17352		.long	.LDWlin49
00000a75 0c               17353		.byte	12
00000a76 02               17354		.byte	2
00000a77 00               17355		.byte	0
00000a78 03               17356		.byte	3
00000a79 0b               17357		.byte	11
00000a7a 02               17358		.byte	2
00000a7b 00               17359		.byte	0
00000a7c 01               17360		.byte	1
00000a7d 1b               17361		.byte	27
00000a7e 03               17362		.byte	3
00000a7f 937f             17363		.byte	147,127
00000a81 02               17364		.byte	2
00000a82 06               17365		.byte	6
00000a83 01               17366		.byte	1
00000a84 06               17367		.byte	6
00000a85 000502           17368		.byte	0,5,2
00000a88 00000000         17369		.long	.LDWlin50
00000a8c 03               17370		.byte	3
00000a8d f100             17371		.byte	241,0
00000a8f 02               17372		.byte	2
00000a90 00               17373		.byte	0
00000a91 01               17374		.byte	1
00000a92 03               17375		.byte	3
00000a93 6f               17376		.byte	111
00000a94 02               17377		.byte	2
00000a95 00               17378		.byte	0
00000a96 01               17379		.byte	1
00000a97 03               17380		.byte	3
00000a98 63               17381		.byte	99
00000a99 02               17382		.byte	2
00000a9a 00               17383		.byte	0
00000a9b 01               17384		.byte	1
00000a9c 03               17385		.byte	3
00000a9d 0b               17386		.byte	11
00000a9e 02               17387		.byte	2
00000a9f 00               17388		.byte	0
00000aa0 01               17389		.byte	1
00000aa1 03               17390		.byte	3
00000aa2 50               17391		.byte	80
00000aa3 02               17392		.byte	2
00000aa4 00               17393		.byte	0
00000aa5 01               17394		.byte	1
00000aa6 03               17395		.byte	3
00000aa7 0d               17396		.byte	13
00000aa8 02               17397		.byte	2
00000aa9 00               17398		.byte	0
00000aaa 01               17399		.byte	1
00000aab 03               17400		.byte	3
00000aac 55               17401		.byte	85
00000aad 02               17402		.byte	2
00000aae 00               17403		.byte	0

                                   Fri Apr 10 08:32:15 2020           Page 312
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
00000aaf 01               17404		.byte	1
00000ab0 02               17405		.byte	2
00000ab1 02               17406		.byte	2
00000ab2 02               17407		.byte	2
00000ab3 0e               17408		.byte	14
00000ab4 000101           17409		.byte	0,1,1
                          17410		.section	.debug_info
                          17411	.LDW_5d9cc18:
00003057 11               17412		.byte	17
00003058 6572617365416464 17413		.strz	"eraseAddress"
00003060 7265737300      
00003065 b10f             17414		.byte	177,15
00003067 3d               17415		.byte	61
00003068 01               17416		.byte	1
00003069 00000000         17417		.long	.LDW_5d9ca08
0000306d 00               17418		.byte	0
0000306e 016f             17419		.byte	1,111
                          17420	
                          17421	.LDW_5d9cd20:
00003070 11               17422		.byte	17
00003071 65726173654c656e 17423		.strz	"eraseLength"
00003079 67746800        
0000307d b10f             17424		.byte	177,15
0000307f 56               17425		.byte	86
00003080 01               17426		.byte	1
00003081 00000000         17427		.long	.LDW_5d9c170
00003085 00               17428		.byte	0
00003086 0154             17429		.byte	1,84
                          17430	
                          17431	.LDW_5dad3a0:
00003088 1f               17432		.byte	31
00003089 00000000         17433		.long	.LDW45
0000308d 00000000         17434		.long	.LDW55
                          17435	
                          17436	.LDW_5d9cd78:
00003091 06               17437		.byte	6
00003092 72657456616c00   17438		.strz	"retVal"
00003099 b30f             17439		.byte	179,15
0000309b 13               17440		.byte	19
0000309c 01               17441		.byte	1
0000309d 00000000         17442		.long	.LDW_4aea750
000030a1 00               17443		.byte	0
000030a2 00               17444		.byte	0
000030a3 0167             17445		.byte	1,103
                          17446	
                          17447	.LDW_5d9cdd0:
000030a5 06               17448		.byte	6
000030a6 666c617368457272 17449		.strz	"flashErrorCode"
000030ae 6f72436f646500  
000030b5 b40f             17450		.byte	180,15
000030b7 13               17451		.byte	19
000030b8 01               17452		.byte	1
000030b9 00000000         17453		.long	.LDW_5d9cf30
000030bd 00               17454		.byte	0
000030be 00               17455		.byte	0
000030bf 016f             17456		.byte	1,111
                          17457	
                          17458	.LDW_5d9ce28:
000030c1 06               17459		.byte	6

                                   Fri Apr 10 08:32:15 2020           Page 313
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
000030c2 657261736552656d 17460		.strz	"eraseRemainder"
000030ca 61696e64657200  
000030d1 b50f             17461		.byte	181,15
000030d3 13               17462		.byte	19
000030d4 01               17463		.byte	1
000030d5 00000000         17464		.long	.LDW_5d9c170
000030d9 00               17465		.byte	0
000030da 00               17466		.byte	0
000030db 016e             17467		.byte	1,110
                          17468	
                          17469	.LDW_5dbfe00:
000030dd 06               17470		.byte	6
000030de 63757272656e744c 17471		.strz	"currentLength"
000030e6 656e67746800    
000030ec b60f             17472		.byte	182,15
000030ee 13               17473		.byte	19
000030ef 01               17474		.byte	1
000030f0 00000000         17475		.long	.LDW_5d9c170
000030f4 00               17476		.byte	0
000030f5 00               17477		.byte	0
000030f6 0168             17478		.byte	1,104
                          17479	
                          17480	.LDW_5dbfa90:
000030f8 06               17481		.byte	6
000030f9 64697374616e6365 17482		.strz	"distance"
00003101 00              
00003102 b70f             17483		.byte	183,15
00003104 13               17484		.byte	19
00003105 01               17485		.byte	1
00003106 00000000         17486		.long	.LDW_5d9c170
0000310a 00               17487		.byte	0
0000310b 00               17488		.byte	0
0000310c 0150             17489		.byte	1,80
                          17490	
                          17491	.LDW_5dbf510:
0000310e 06               17492		.byte	6
0000310f 6e6578744d656d53 17493		.strz	"nextMemSegment"
00003117 65676d656e7400  
0000311e b80f             17494		.byte	184,15
00003120 13               17495		.byte	19
00003121 01               17496		.byte	1
00003122 00000000         17497		.long	.LDW_5d9cb10
00003126 00               17498		.byte	0
00003127 00               17499		.byte	0
00003128 016d             17500		.byte	1,109
                          17501	
0000312a 00               17502		.byte	0
                          17503	
0000312b 00               17504		.byte	0
                          17505	
                          17506	.LDW_5daead8:
0000312c 16               17507		.byte	22
0000312d 46626c4d656d5072 17508		.strz	"FblMemProgramBufferInternal"
00003135 6f6772616d427566
0000313d 666572496e746572
00003145 6e616c00        
00003149 d510             17509		.byte	213,16
0000314b 16               17510		.byte	22
0000314c 01               17511		.byte	1
0000314d 00000000         17512		.long	.LDW_4aea750
00003151 00000000         17513		.long	FblMemProgramBufferInternal..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
00003155 00000000         17514		.long	__ghs_eofn_FblMemProgramBufferInternal
00003159 0151             17515		.byte	1,81

                                   Fri Apr 10 08:32:15 2020           Page 314
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
0000315b 808080fe0f       17516		.byte	128,128,128,254,15
00003160 08               17517		.byte	8
00003161 00               17518		.byte	0
00003162 30               17519		.byte	48
00003163 00               17520		.byte	0
00003164 00               17521		.byte	0
00003165 00               17522		.byte	0
00003166 00               17523		.byte	0
00003167 01               17524		.byte	1
00003168 00               17525		.byte	0
00003169 01               17526		.byte	1
                          17527	
                          17528		.section	.debug_frame
                          17529	.LDW_5c0eb68:
000002a0 00000014         17530		.long	.LDW_unq_30-.LDW_unq_2f
                          17531	.LDW_unq_2f:
000002a4 00000000         17532		.long	.LDW_5d27e08
000002a8 00000000         17533		.long	FblMemProgramBufferInternal..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
000002ac 0000010c         17534		.long	__ghs_eofn_FblMemProgramBufferInternal-FblMemProgramBufferInternal..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
000002b0 01               17535		.byte	1
000002b1 00000000         17536		.long	.LDW75
000002b5 00               17537		.byte	0
000002b6 00               17538		.byte	0
000002b7 00               17539		.byte	0
                          17540	.LDW_unq_30:
                          17541		.section	.debug_line
00000ab7 000502           17542		.byte	0,5,2
00000aba 00000000         17543		.long	FblMemProgramBufferInternal..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
00000abe 06               17544		.byte	6
00000abf 03               17545		.byte	3
00000ac0 d610             17546		.byte	214,16
00000ac2 02               17547		.byte	2
00000ac3 00               17548		.byte	0
00000ac4 01               17549		.byte	1
00000ac5 03               17550		.byte	3
00000ac6 12               17551		.byte	18
00000ac7 02               17552		.byte	2
00000ac8 12               17553		.byte	18
00000ac9 01               17554		.byte	1
00000aca 1b               17555		.byte	27
00000acb 03               17556		.byte	3
00000acc 04               17557		.byte	4
00000acd 02               17558		.byte	2
00000ace 04               17559		.byte	4
00000acf 01               17560		.byte	1
00000ad0 14               17561		.byte	20
00000ad1 15               17562		.byte	21
00000ad2 000502           17563		.byte	0,5,2
00000ad5 00000000         17564		.long	.LDWlin51
00000ad9 0d               17565		.byte	13
00000ada 000502           17566		.byte	0,5,2
00000add 00000000         17567		.long	.LDWlin52
00000ae1 03               17568		.byte	3
00000ae2 05               17569		.byte	5
00000ae3 02               17570		.byte	2
00000ae4 00               17571		.byte	0

                                   Fri Apr 10 08:32:15 2020           Page 315
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
00000ae5 01               17572		.byte	1
00000ae6 000502           17573		.byte	0,5,2
00000ae9 00000000         17574		.long	.LDWlin53
00000aed 03               17575		.byte	3
00000aee 04               17576		.byte	4
00000aef 02               17577		.byte	2
00000af0 00               17578		.byte	0
00000af1 01               17579		.byte	1
00000af2 03               17580		.byte	3
00000af3 05               17581		.byte	5
00000af4 02               17582		.byte	2
00000af5 08               17583		.byte	8
00000af6 01               17584		.byte	1
00000af7 45               17585		.byte	69
00000af8 000502           17586		.byte	0,5,2
00000afb 00000000         17587		.long	.LDWlin54
00000aff 0b               17588		.byte	11
00000b00 0b               17589		.byte	11
00000b01 000502           17590		.byte	0,5,2
00000b04 00000000         17591		.long	.LDWlin55
00000b08 0c               17592		.byte	12
00000b09 02               17593		.byte	2
00000b0a 00               17594		.byte	0
00000b0b 03               17595		.byte	3
00000b0c 0d               17596		.byte	13
00000b0d 02               17597		.byte	2
00000b0e 00               17598		.byte	0
00000b0f 01               17599		.byte	1
00000b10 000502           17600		.byte	0,5,2
00000b13 00000000         17601		.long	.LDWlin56
00000b17 0b               17602		.byte	11
00000b18 0d               17603		.byte	13
00000b19 02               17604		.byte	2
00000b1a 00               17605		.byte	0
00000b1b 0d               17606		.byte	13
00000b1c 25               17607		.byte	37
00000b1d 000502           17608		.byte	0,5,2
00000b20 00000000         17609		.long	.LDWlin57
00000b24 03               17610		.byte	3
00000b25 04               17611		.byte	4
00000b26 02               17612		.byte	2
00000b27 00               17613		.byte	0
00000b28 01               17614		.byte	1
00000b29 0c               17615		.byte	12
00000b2a 03               17616		.byte	3
00000b2b 05               17617		.byte	5
00000b2c 02               17618		.byte	2
00000b2d 00               17619		.byte	0
00000b2e 01               17620		.byte	1
00000b2f 000502           17621		.byte	0,5,2
00000b32 00000000         17622		.long	.LDWlin58
00000b36 0b               17623		.byte	11
00000b37 03               17624		.byte	3
00000b38 75               17625		.byte	117
00000b39 02               17626		.byte	2
00000b3a 02               17627		.byte	2

                                   Fri Apr 10 08:32:15 2020           Page 316
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
00000b3b 01               17628		.byte	1
00000b3c 03               17629		.byte	3
00000b3d 0c               17630		.byte	12
00000b3e 02               17631		.byte	2
00000b3f 00               17632		.byte	0
00000b40 01               17633		.byte	1
00000b41 02               17634		.byte	2
00000b42 00               17635		.byte	0
00000b43 03               17636		.byte	3
00000b44 0e               17637		.byte	14
00000b45 02               17638		.byte	2
00000b46 00               17639		.byte	0
00000b47 01               17640		.byte	1
00000b48 000502           17641		.byte	0,5,2
00000b4b 00000000         17642		.long	.LDWlin59
00000b4f 03               17643		.byte	3
00000b50 04               17644		.byte	4
00000b51 02               17645		.byte	2
00000b52 00               17646		.byte	0
00000b53 01               17647		.byte	1
00000b54 02               17648		.byte	2
00000b55 00               17649		.byte	0
00000b56 03               17650		.byte	3
00000b57 04               17651		.byte	4
00000b58 02               17652		.byte	2
00000b59 00               17653		.byte	0
00000b5a 01               17654		.byte	1
00000b5b 03               17655		.byte	3
00000b5c 09               17656		.byte	9
00000b5d 02               17657		.byte	2
00000b5e 0e               17658		.byte	14
00000b5f 01               17659		.byte	1
00000b60 06               17660		.byte	6
00000b61 000502           17661		.byte	0,5,2
00000b64 00000000         17662		.long	.LDWlin60
00000b68 03               17663		.byte	3
00000b69 71               17664		.byte	113
00000b6a 02               17665		.byte	2
00000b6b 00               17666		.byte	0
00000b6c 01               17667		.byte	1
00000b6d 06               17668		.byte	6
00000b6e 03               17669		.byte	3
00000b6f 10               17670		.byte	16
00000b70 02               17671		.byte	2
00000b71 00               17672		.byte	0
00000b72 01               17673		.byte	1
00000b73 0d               17674		.byte	13
00000b74 02               17675		.byte	2
00000b75 00               17676		.byte	0
00000b76 03               17677		.byte	3
00000b77 0e               17678		.byte	14
00000b78 02               17679		.byte	2
00000b79 00               17680		.byte	0
00000b7a 01               17681		.byte	1
00000b7b 000502           17682		.byte	0,5,2
00000b7e 00000000         17683		.long	.LDWlin61

                                   Fri Apr 10 08:32:15 2020           Page 317
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
00000b82 0b               17684		.byte	11
00000b83 0b               17685		.byte	11
00000b84 000502           17686		.byte	0,5,2
00000b87 00000000         17687		.long	.LDWlin62
00000b8b 03               17688		.byte	3
00000b8c 0d               17689		.byte	13
00000b8d 02               17690		.byte	2
00000b8e 00               17691		.byte	0
00000b8f 01               17692		.byte	1
00000b90 0c               17693		.byte	12
00000b91 0c               17694		.byte	12
00000b92 000502           17695		.byte	0,5,2
00000b95 00000000         17696		.long	.LDWlin63
00000b99 0d               17697		.byte	13
00000b9a 000502           17698		.byte	0,5,2
00000b9d 00000000         17699		.long	.LDWlin64
00000ba1 03               17700		.byte	3
00000ba2 6e               17701		.byte	110
00000ba3 02               17702		.byte	2
00000ba4 00               17703		.byte	0
00000ba5 01               17704		.byte	1
00000ba6 02               17705		.byte	2
00000ba7 00               17706		.byte	0
00000ba8 03               17707		.byte	3
00000ba9 04               17708		.byte	4
00000baa 02               17709		.byte	2
00000bab 00               17710		.byte	0
00000bac 01               17711		.byte	1
00000bad 14               17712		.byte	20
00000bae 000502           17713		.byte	0,5,2
00000bb1 00000000         17714		.long	.LDWlin65
00000bb5 0b               17715		.byte	11
00000bb6 0c               17716		.byte	12
00000bb7 13               17717		.byte	19
00000bb8 03               17718		.byte	3
00000bb9 09               17719		.byte	9
00000bba 02               17720		.byte	2
00000bbb 02               17721		.byte	2
00000bbc 01               17722		.byte	1
00000bbd 02               17723		.byte	2
00000bbe 00               17724		.byte	0
00000bbf 03               17725		.byte	3
00000bc0 fc7e             17726		.byte	252,126
00000bc2 02               17727		.byte	2
00000bc3 00               17728		.byte	0
00000bc4 01               17729		.byte	1
00000bc5 000502           17730		.byte	0,5,2
00000bc8 00000000         17731		.long	.LDWlin66
00000bcc 03               17732		.byte	3
00000bcd 8601             17733		.byte	134,1
00000bcf 02               17734		.byte	2
00000bd0 00               17735		.byte	0
00000bd1 01               17736		.byte	1
00000bd2 0d               17737		.byte	13
00000bd3 06               17738		.byte	6
00000bd4 24               17739		.byte	36

                                   Fri Apr 10 08:32:15 2020           Page 318
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
00000bd5 03               17740		.byte	3
00000bd6 65               17741		.byte	101
00000bd7 02               17742		.byte	2
00000bd8 00               17743		.byte	0
00000bd9 01               17744		.byte	1
00000bda 03               17745		.byte	3
00000bdb 5d               17746		.byte	93
00000bdc 02               17747		.byte	2
00000bdd 00               17748		.byte	0
00000bde 01               17749		.byte	1
00000bdf 03               17750		.byte	3
00000be0 11               17751		.byte	17
00000be1 02               17752		.byte	2
00000be2 00               17753		.byte	0
00000be3 01               17754		.byte	1
00000be4 03               17755		.byte	3
00000be5 4a               17756		.byte	74
00000be6 02               17757		.byte	2
00000be7 00               17758		.byte	0
00000be8 01               17759		.byte	1
00000be9 03               17760		.byte	3
00000bea 6f               17761		.byte	111
00000beb 02               17762		.byte	2
00000bec 00               17763		.byte	0
00000bed 01               17764		.byte	1
00000bee 03               17765		.byte	3
00000bef f200             17766		.byte	242,0
00000bf1 02               17767		.byte	2
00000bf2 00               17768		.byte	0
00000bf3 01               17769		.byte	1
00000bf4 02               17770		.byte	2
00000bf5 02               17771		.byte	2
00000bf6 02               17772		.byte	2
00000bf7 0e               17773		.byte	14
00000bf8 000101           17774		.byte	0,1,1
                          17775		.section	.debug_info
                          17776	.LDW_5dbf618:
0000316a 11               17777		.byte	17
0000316b 70726f6772616d41 17778		.strz	"programAddress"
00003173 64647265737300  
0000317a d510             17779		.byte	213,16
0000317c 3f               17780		.byte	63
0000317d 01               17781		.byte	1
0000317e 00000000         17782		.long	.LDW_5d9ca08
00003182 00               17783		.byte	0
00003183 016e             17784		.byte	1,110
                          17785	
                          17786	.LDW_5dbf568:
00003185 11               17787		.byte	17
00003186 70726f6772616d4c 17788		.strz	"programLength"
0000318e 656e67746800    
00003194 d610             17789		.byte	214,16
00003196 2f               17790		.byte	47
00003197 01               17791		.byte	1
00003198 00000000         17792		.long	.LDW_5dbf340
0000319c 00               17793		.byte	0
0000319d 016c             17794		.byte	1,108
                          17795	

                                   Fri Apr 10 08:32:15 2020           Page 319
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          17796	.LDW_5dbfe58:
0000319f 11               17797		.byte	17
000031a0 70726f6772616d44 17798		.strz	"programData"
000031a8 61746100        
000031ac d610             17799		.byte	214,16
000031ae 4d               17800		.byte	77
000031af 01               17801		.byte	1
000031b0 00000000         17802		.long	.LDW_4aeb9a0
000031b4 00               17803		.byte	0
000031b5 0169             17804		.byte	1,105
                          17805	
                          17806	.LDW_5dbfb98:
000031b7 11               17807		.byte	17
000031b8 636865636b506f69 17808		.strz	"checkPointState"
000031c0 6e74537461746500
000031c8 d610             17809		.byte	214,16
000031ca 6b               17810		.byte	107
000031cb 01               17811		.byte	1
000031cc 00000000         17812		.long	.LDW_5dbfda8
000031d0 00               17813		.byte	0
000031d1 0156             17814		.byte	1,86
                          17815	
                          17816	.LDW_5dad220:
000031d3 1f               17817		.byte	31
000031d4 00000000         17818		.long	.LDW65
000031d8 00000000         17819		.long	.LDW75
                          17820	
                          17821	.LDW_5dbf9e0:
000031dc 06               17822		.byte	6
000031dd 72657456616c00   17823		.strz	"retVal"
000031e4 d810             17824		.byte	216,16
000031e6 16               17825		.byte	22
000031e7 01               17826		.byte	1
000031e8 00000000         17827		.long	.LDW_4aea750
000031ec 00               17828		.byte	0
000031ed 00               17829		.byte	0
000031ee 0167             17830		.byte	1,103
                          17831	
                          17832	.LDW_5dbf930:
000031f0 06               17833		.byte	6
000031f1 63757272656e744c 17834		.strz	"currentLength"
000031f9 656e67746800    
000031ff d910             17835		.byte	217,16
00003201 16               17836		.byte	22
00003202 01               17837		.byte	1
00003203 00000000         17838		.long	.LDW_5d9c170
00003207 00               17839		.byte	0
00003208 00               17840		.byte	0
00003209 016f             17841		.byte	1,111
                          17842	
                          17843	.LDW_5dbf5c0:
0000320b 06               17844		.byte	6
0000320c 6c6f63616c4c656e 17845		.strz	"localLength"
00003214 67746800        
00003218 da10             17846		.byte	218,16
0000321a 16               17847		.byte	22
0000321b 01               17848		.byte	1
0000321c 00000000         17849		.long	.LDW_5d9c170
00003220 00               17850		.byte	0
00003221 00               17851		.byte	0

                                   Fri Apr 10 08:32:15 2020           Page 320
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
00003222 016d             17852		.byte	1,109
                          17853	
                          17854	.LDW_5dbff08:
00003224 06               17855		.byte	6
00003225 7365674c656e6774 17856		.strz	"segLength"
0000322d 6800            
0000322f db10             17857		.byte	219,16
00003231 16               17858		.byte	22
00003232 01               17859		.byte	1
00003233 00000000         17860		.long	.LDW_5d9c170
00003237 00               17861		.byte	0
00003238 00               17862		.byte	0
00003239 0150             17863		.byte	1,80
                          17864	
                          17865	.LDW_5dbfeb0:
0000323b 06               17866		.byte	6
0000323c 7061644c656e6774 17867		.strz	"padLength"
00003244 6800            
00003246 dc10             17868		.byte	220,16
00003248 16               17869		.byte	22
00003249 01               17870		.byte	1
0000324a 00000000         17871		.long	.LDW_5d9c170
0000324e 00               17872		.byte	0
0000324f 00               17873		.byte	0
00003250 0166             17874		.byte	1,102
                          17875	
                          17876	.LDW_5dbff60:
00003252 06               17877		.byte	6
00003253 627566666572496e 17878		.strz	"bufferIndex"
0000325b 64657800        
0000325f dd10             17879		.byte	221,16
00003261 16               17880		.byte	22
00003262 01               17881		.byte	1
00003263 00000000         17882		.long	.LDW_5d9c170
00003267 00               17883		.byte	0
00003268 00               17884		.byte	0
00003269 016b             17885		.byte	1,107
                          17886	
                          17887	.LDW_5dbfcf8:
0000326b 07               17888		.byte	7
0000326c 7061644f66667365 17889		.strz	"padOffset"
00003274 7400            
00003276 de10             17890		.byte	222,16
00003278 16               17891		.byte	22
00003279 01               17892		.byte	1
0000327a 00000000         17893		.long	.LDW_5d9c170
0000327e 00               17894		.byte	0
0000327f 00               17895		.byte	0
                          17896	
                          17897	.LDW_5dbf4b8:
00003280 06               17898		.byte	6
00003281 666c617368457272 17899		.strz	"flashErrorCode"
00003289 6f72436f646500  
00003290 df10             17900		.byte	223,16
00003292 16               17901		.byte	22
00003293 01               17902		.byte	1
00003294 00000000         17903		.long	.LDW_5d9cf30
00003298 00               17904		.byte	0
00003299 00               17905		.byte	0
0000329a 0168             17906		.byte	1,104
                          17907	

                                   Fri Apr 10 08:32:15 2020           Page 321
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
0000329c 00               17908		.byte	0
                          17909	
0000329d 00               17910		.byte	0
                          17911	
                          17912	.LDW_5dae7e0:
0000329e 16               17913		.byte	22
0000329f 46626c4d656d4765 17914		.strz	"FblMemGetSpecificRemainder"
000032a7 7453706563696669
000032af 6352656d61696e64
000032b7 657200          
000032ba 8b12             17915		.byte	139,18
000032bc 13               17916		.byte	19
000032bd 01               17917		.byte	1
000032be 00000000         17918		.long	.LDW_5d9c170
000032c2 00000000         17919		.long	FblMemGetSpecificRemainder..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
000032c6 00000000         17920		.long	__ghs_eofn_FblMemGetSpecificRemainder
000032ca 0151             17921		.byte	1,81
000032cc 808080c00f       17922		.byte	128,128,128,192,15
000032d1 0c               17923		.byte	12
000032d2 00               17924		.byte	0
000032d3 20               17925		.byte	32
000032d4 00               17926		.byte	0
000032d5 00               17927		.byte	0
000032d6 00               17928		.byte	0
000032d7 00               17929		.byte	0
000032d8 01               17930		.byte	1
000032d9 00               17931		.byte	0
000032da 01               17932		.byte	1
                          17933	
                          17934		.section	.debug_frame
                          17935	.LDW_5c0f068:
000002b8 00000014         17936		.long	.LDW_unq_32-.LDW_unq_31
                          17937	.LDW_unq_31:
000002bc 00000000         17938		.long	.LDW_5d27e08
000002c0 00000000         17939		.long	FblMemGetSpecificRemainder..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
000002c4 00000056         17940		.long	__ghs_eofn_FblMemGetSpecificRemainder-FblMemGetSpecificRemainder..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
000002c8 01               17941		.byte	1
000002c9 00000000         17942		.long	.LDW95
000002cd 00               17943		.byte	0
000002ce 00               17944		.byte	0
000002cf 00               17945		.byte	0
                          17946	.LDW_unq_32:
                          17947		.section	.debug_line
00000bfb 000502           17948		.byte	0,5,2
00000bfe 00000000         17949		.long	FblMemGetSpecificRemainder..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
00000c02 06               17950		.byte	6
00000c03 03               17951		.byte	3
00000c04 8b12             17952		.byte	139,18
00000c06 02               17953		.byte	2
00000c07 00               17954		.byte	0
00000c08 01               17955		.byte	1
00000c09 03               17956		.byte	3
00000c0a 05               17957		.byte	5
00000c0b 02               17958		.byte	2
00000c0c 0e               17959		.byte	14
00000c0d 01               17960		.byte	1
00000c0e 1d               17961		.byte	29
00000c0f 2b               17962		.byte	43
00000c10 24               17963		.byte	36

                                   Fri Apr 10 08:32:15 2020           Page 322
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
00000c11 000502           17964		.byte	0,5,2
00000c14 00000000         17965		.long	.LDWlin67
00000c18 0b               17966		.byte	11
00000c19 0c               17967		.byte	12
00000c1a 93               17968		.byte	147
00000c1b 02               17969		.byte	2
00000c1c 00               17970		.byte	0
00000c1d 0d               17971		.byte	13
00000c1e 14               17972		.byte	20
00000c1f 06               17973		.byte	6
00000c20 02               17974		.byte	2
00000c21 02               17975		.byte	2
00000c22 02               17976		.byte	2
00000c23 0c               17977		.byte	12
00000c24 000101           17978		.byte	0,1,1
                          17979		.section	.debug_info
                          17980	.LDW_5dbfa38:
000032db 11               17981		.byte	17
000032dc 6164647265737300 17982		.strz	"address"
000032e4 8b12             17983		.byte	139,18
000032e6 3b               17984		.byte	59
000032e7 01               17985		.byte	1
000032e8 00000000         17986		.long	.LDW_5d9ca08
000032ec 00               17987		.byte	0
000032ed 016f             17988		.byte	1,111
                          17989	
                          17990	.LDW_5dbf778:
000032ef 11               17991		.byte	17
000032f0 6c656e67746800   17992		.strz	"length"
000032f7 8b12             17993		.byte	139,18
000032f9 4f               17994		.byte	79
000032fa 01               17995		.byte	1
000032fb 00000000         17996		.long	.LDW_5d9c170
000032ff 00               17997		.byte	0
00003300 016e             17998		.byte	1,110
                          17999	
                          18000	.LDW_5dad460:
00003302 1f               18001		.byte	31
00003303 00000000         18002		.long	.LDW85
00003307 00000000         18003		.long	.LDW95
                          18004	
                          18005	.LDW_5dbfae8:
0000330b 06               18006		.byte	6
0000330c 72656d61696e6465 18007		.strz	"remainder"
00003314 7200            
00003316 8d12             18008		.byte	141,18
00003318 10               18009		.byte	16
00003319 01               18010		.byte	1
0000331a 00000000         18011		.long	.LDW_5d9c170
0000331e 00               18012		.byte	0
0000331f 00               18013		.byte	0
00003320 016d             18014		.byte	1,109
                          18015	
                          18016	.LDW_5dbf670:
00003322 06               18017		.byte	6
00003323 74656d705365676d 18018		.strz	"tempSegment"
0000332b 656e7400        
0000332f 8e12             18019		.byte	142,18

                                   Fri Apr 10 08:32:15 2020           Page 323
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
00003331 10               18020		.byte	16
00003332 01               18021		.byte	1
00003333 00000000         18022		.long	.LDW_5d9cb10
00003337 00               18023		.byte	0
00003338 00               18024		.byte	0
00003339 016b             18025		.byte	1,107
                          18026	
0000333b 00               18027		.byte	0
                          18028	
0000333c 00               18029		.byte	0
                          18030	
                          18031	.LDW_5daea40:
0000333d 16               18032		.byte	22
0000333e 46626c4d656d5072 18033		.strz	"FblMemProgramStream"
00003346 6f6772616d537472
0000334e 65616d00        
00003352 e512             18034		.byte	229,18
00003354 16               18035		.byte	22
00003355 01               18036		.byte	1
00003356 00000000         18037		.long	.LDW_4aea750
0000335a 00000000         18038		.long	FblMemProgramStream..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
0000335e 00000000         18039		.long	__ghs_eofn_FblMemProgramStream
00003362 0151             18040		.byte	1,81
00003364 808080f80f       18041		.byte	128,128,128,248,15
00003369 10               18042		.byte	16
0000336a 00               18043		.byte	0
0000336b 30               18044		.byte	48
0000336c 00               18045		.byte	0
0000336d 00               18046		.byte	0
0000336e 00               18047		.byte	0
0000336f 00               18048		.byte	0
00003370 01               18049		.byte	1
00003371 00               18050		.byte	0
00003372 01               18051		.byte	1
                          18052	
                          18053		.section	.debug_frame
                          18054	.LDW_5c0efe8:
000002d0 00000014         18055		.long	.LDW_unq_34-.LDW_unq_33
                          18056	.LDW_unq_33:
000002d4 00000000         18057		.long	.LDW_5d27e08
000002d8 00000000         18058		.long	FblMemProgramStream..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
000002dc 0000010e         18059		.long	__ghs_eofn_FblMemProgramStream-FblMemProgramStream..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
000002e0 01               18060		.byte	1
000002e1 00000000         18061		.long	.LDW16
000002e5 00               18062		.byte	0
000002e6 00               18063		.byte	0
000002e7 00               18064		.byte	0
                          18065	.LDW_unq_34:
                          18066		.section	.debug_line
00000c27 000502           18067		.byte	0,5,2
00000c2a 00000000         18068		.long	FblMemProgramStream..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
00000c2e 06               18069		.byte	6
00000c2f 03               18070		.byte	3
00000c30 e612             18071		.byte	230,18
00000c32 02               18072		.byte	2
00000c33 00               18073		.byte	0
00000c34 01               18074		.byte	1
00000c35 03               18075		.byte	3

                                   Fri Apr 10 08:32:15 2020           Page 324
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
00000c36 11               18076		.byte	17
00000c37 02               18077		.byte	2
00000c38 12               18078		.byte	18
00000c39 01               18079		.byte	1
00000c3a 000502           18080		.byte	0,5,2
00000c3d 00000000         18081		.long	.LDWlin68
00000c41 0d               18082		.byte	13
00000c42 1c               18083		.byte	28
00000c43 000502           18084		.byte	0,5,2
00000c46 00000000         18085		.long	.LDWlin69
00000c4a 0d               18086		.byte	13
00000c4b 25               18087		.byte	37
00000c4c 000502           18088		.byte	0,5,2
00000c4f 00000000         18089		.long	.LDWlin70
00000c53 0b               18090		.byte	11
00000c54 03               18091		.byte	3
00000c55 09               18092		.byte	9
00000c56 02               18093		.byte	2
00000c57 00               18094		.byte	0
00000c58 01               18095		.byte	1
00000c59 000502           18096		.byte	0,5,2
00000c5c 00000000         18097		.long	.LDWlin71
00000c60 0d               18098		.byte	13
00000c61 3d               18099		.byte	61
00000c62 2c               18100		.byte	44
00000c63 2d               18101		.byte	45
00000c64 000502           18102		.byte	0,5,2
00000c67 00000000         18103		.long	.LDWlin72
00000c6b 03               18104		.byte	3
00000c6c 07               18105		.byte	7
00000c6d 02               18106		.byte	2
00000c6e 00               18107		.byte	0
00000c6f 01               18108		.byte	1
00000c70 0c               18109		.byte	12
00000c71 0c               18110		.byte	12
00000c72 0c               18111		.byte	12
00000c73 000502           18112		.byte	0,5,2
00000c76 00000000         18113		.long	.LDWlin73
00000c7a 03               18114		.byte	3
00000c7b 05               18115		.byte	5
00000c7c 02               18116		.byte	2
00000c7d 00               18117		.byte	0
00000c7e 01               18118		.byte	1
00000c7f 2b               18119		.byte	43
00000c80 0c               18120		.byte	12
00000c81 02               18121		.byte	2
00000c82 00               18122		.byte	0
00000c83 0d               18123		.byte	13
00000c84 1c               18124		.byte	28
00000c85 02               18125		.byte	2
00000c86 00               18126		.byte	0
00000c87 0b               18127		.byte	11
00000c88 02               18128		.byte	2
00000c89 00               18129		.byte	0
00000c8a 0d               18130		.byte	13
00000c8b 03               18131		.byte	3

                                   Fri Apr 10 08:32:15 2020           Page 325
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
00000c8c 05               18132		.byte	5
00000c8d 02               18133		.byte	2
00000c8e 04               18134		.byte	4
00000c8f 01               18135		.byte	1
00000c90 000502           18136		.byte	0,5,2
00000c93 00000000         18137		.long	.LDWlin74
00000c97 03               18138		.byte	3
00000c98 04               18139		.byte	4
00000c99 02               18140		.byte	2
00000c9a 00               18141		.byte	0
00000c9b 01               18142		.byte	1
00000c9c 0b               18143		.byte	11
00000c9d 000502           18144		.byte	0,5,2
00000ca0 00000000         18145		.long	.LDWlin75
00000ca4 0b               18146		.byte	11
00000ca5 0c               18147		.byte	12
00000ca6 03               18148		.byte	3
00000ca7 05               18149		.byte	5
00000ca8 02               18150		.byte	2
00000ca9 00               18151		.byte	0
00000caa 01               18152		.byte	1
00000cab 000502           18153		.byte	0,5,2
00000cae 00000000         18154		.long	.LDWlin76
00000cb2 0b               18155		.byte	11
00000cb3 0c               18156		.byte	12
00000cb4 000502           18157		.byte	0,5,2
00000cb7 00000000         18158		.long	.LDWlin77
00000cbb 0b               18159		.byte	11
00000cbc 0c               18160		.byte	12
00000cbd 0c               18161		.byte	12
00000cbe 000502           18162		.byte	0,5,2
00000cc1 00000000         18163		.long	.LDWlin78
00000cc5 0b               18164		.byte	11
00000cc6 02               18165		.byte	2
00000cc7 00               18166		.byte	0
00000cc8 0b               18167		.byte	11
00000cc9 02               18168		.byte	2
00000cca 00               18169		.byte	0
00000ccb 0d               18170		.byte	13
00000ccc 000502           18171		.byte	0,5,2
00000ccf 00000000         18172		.long	.LDWlin79
00000cd3 0b               18173		.byte	11
00000cd4 0c               18174		.byte	12
00000cd5 000502           18175		.byte	0,5,2
00000cd8 00000000         18176		.long	.LDWlin80
00000cdc 0d               18177		.byte	13
00000cdd 2c               18178		.byte	44
00000cde 03               18179		.byte	3
00000cdf 08               18180		.byte	8
00000ce0 02               18181		.byte	2
00000ce1 06               18182		.byte	6
00000ce2 01               18183		.byte	1
00000ce3 000502           18184		.byte	0,5,2
00000ce6 00000000         18185		.long	.LDWlin81
00000cea 0b               18186		.byte	11
00000ceb 0c               18187		.byte	12

                                   Fri Apr 10 08:32:15 2020           Page 326
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
00000cec 14               18188		.byte	20
00000ced 000502           18189		.byte	0,5,2
00000cf0 00000000         18190		.long	.LDWlin82
00000cf4 0b               18191		.byte	11
00000cf5 0c               18192		.byte	12
00000cf6 000502           18193		.byte	0,5,2
00000cf9 00000000         18194		.long	.LDWlin83
00000cfd 0b               18195		.byte	11
00000cfe 0c               18196		.byte	12
00000cff 24               18197		.byte	36
00000d00 000502           18198		.byte	0,5,2
00000d03 00000000         18199		.long	.LDWlin84
00000d07 0b               18200		.byte	11
00000d08 0c               18201		.byte	12
00000d09 0c               18202		.byte	12
00000d0a 14               18203		.byte	20
00000d0b 02               18204		.byte	2
00000d0c 00               18205		.byte	0
00000d0d 03               18206		.byte	3
00000d0e 05               18207		.byte	5
00000d0f 02               18208		.byte	2
00000d10 00               18209		.byte	0
00000d11 01               18210		.byte	1
00000d12 02               18211		.byte	2
00000d13 00               18212		.byte	0
00000d14 0c               18213		.byte	12
00000d15 06               18214		.byte	6
00000d16 02               18215		.byte	2
00000d17 02               18216		.byte	2
00000d18 02               18217		.byte	2
00000d19 0e               18218		.byte	14
00000d1a 000101           18219		.byte	0,1,1
                          18220		.section	.debug_info
                          18221	.LDW_5dbfb40:
00003373 11               18222		.byte	17
00003374 70726f6772616d4a 18223		.strz	"programJob"
0000337c 6f6200          
0000337f e512             18224		.byte	229,18
00003381 5c               18225		.byte	92
00003382 01               18226		.byte	1
00003383 00000000         18227		.long	.LDW_4aaca78
00003387 00               18228		.byte	0
00003388 016d             18229		.byte	1,109
                          18230	
                          18231	.LDW_5dbf828:
0000338a 11               18232		.byte	17
0000338b 70726f6772616d4c 18233		.strz	"programLength"
00003393 656e67746800    
00003399 e612             18234		.byte	230,18
0000339b 2f               18235		.byte	47
0000339c 01               18236		.byte	1
0000339d 00000000         18237		.long	.LDW_5dbf340
000033a1 00               18238		.byte	0
000033a2 016c             18239		.byte	1,108
                          18240	
                          18241	.LDW_5dbf720:
000033a4 11               18242		.byte	17
000033a5 6d6f646500       18243		.strz	"mode"

                                   Fri Apr 10 08:32:15 2020           Page 327
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
000033aa e612             18244		.byte	230,18
000033ac 53               18245		.byte	83
000033ad 01               18246		.byte	1
000033ae 00000000         18247		.long	.LDW_5dbf7d0
000033b2 00               18248		.byte	0
000033b3 016a             18249		.byte	1,106
                          18250	
                          18251	.LDW_5dad340:
000033b5 1f               18252		.byte	31
000033b6 00000000         18253		.long	.LDW06
000033ba 00000000         18254		.long	.LDW16
                          18255	
                          18256	.LDW_5dbfbf0:
000033be 06               18257		.byte	6
000033bf 72657456616c00   18258		.strz	"retVal"
000033c6 e812             18259		.byte	232,18
000033c8 13               18260		.byte	19
000033c9 01               18261		.byte	1
000033ca 00000000         18262		.long	.LDW_4aea750
000033ce 00               18263		.byte	0
000033cf 00               18264		.byte	0
000033d0 016d             18265		.byte	1,109
                          18266	
                          18267	.LDW_5dbfd50:
000033d2 06               18268		.byte	6
000033d3 70726f6772616d44 18269		.strz	"programData"
000033db 61746100        
000033df e912             18270		.byte	233,18
000033e1 13               18271		.byte	19
000033e2 01               18272		.byte	1
000033e3 00000000         18273		.long	.LDW_4aeb9a0
000033e7 00               18274		.byte	0
000033e8 00               18275		.byte	0
000033e9 0168             18276		.byte	1,104
                          18277	
                          18278	.LDW_5dbf880:
000033eb 06               18279		.byte	6
000033ec 6c6f63616c4c656e 18280		.strz	"localLength"
000033f4 67746800        
000033f8 ea12             18281		.byte	234,18
000033fa 13               18282		.byte	19
000033fb 01               18283		.byte	1
000033fc 00000000         18284		.long	.LDW_5d9c170
00003400 00               18285		.byte	0
00003401 00               18286		.byte	0
00003402 0271             18287		.byte	2,113
00003404 08               18288		.byte	8
                          18289	
                          18290	.LDW_5dbfc48:
00003405 06               18291		.byte	6
00003406 726571756573744c 18292		.strz	"requestLength"
0000340e 656e67746800    
00003414 ec12             18293		.byte	236,18
00003416 13               18294		.byte	19
00003417 01               18295		.byte	1
00003418 00000000         18296		.long	.LDW_5d9c170
0000341c 00               18297		.byte	0
0000341d 00               18298		.byte	0
0000341e 016a             18299		.byte	1,106

                                   Fri Apr 10 08:32:15 2020           Page 328
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          18300	
                          18301	.LDW_5dbf8d8:
00003420 06               18302		.byte	6
00003421 72656d61696e6465 18303		.strz	"remainder"
00003429 7200            
0000342b ed12             18304		.byte	237,18
0000342d 13               18305		.byte	19
0000342e 01               18306		.byte	1
0000342f 00000000         18307		.long	.LDW_5d9c170
00003433 00               18308		.byte	0
00003434 00               18309		.byte	0
00003435 016e             18310		.byte	1,110
                          18311	
00003437 00               18312		.byte	0
                          18313	
00003438 00               18314		.byte	0
                          18315	
                          18316	.LDW_5dadc98:
00003439 16               18317		.byte	22
0000343a 46626c4d656d5072 18318		.strz	"FblMemProcessJob"
00003442 6f636573734a6f62
0000344a 00              
0000344b ee14             18319		.byte	238,20
0000344d 16               18320		.byte	22
0000344e 01               18321		.byte	1
0000344f 00000000         18322		.long	.LDW_4aea750
00003453 00000000         18323		.long	FblMemProcessJob..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
00003457 00000000         18324		.long	__ghs_eofn_FblMemProcessJob
0000345b 0151             18325		.byte	1,81
0000345d 808080c00f       18326		.byte	128,128,128,192,15
00003462 14               18327		.byte	20
00003463 00               18328		.byte	0
00003464 28               18329		.byte	40
00003465 00               18330		.byte	0
00003466 00               18331		.byte	0
00003467 00               18332		.byte	0
00003468 00               18333		.byte	0
00003469 01               18334		.byte	1
0000346a 00               18335		.byte	0
0000346b 01               18336		.byte	1
                          18337	
                          18338		.section	.debug_frame
                          18339	.LDW_5c0f028:
000002e8 00000014         18340		.long	.LDW_unq_36-.LDW_unq_35
                          18341	.LDW_unq_35:
000002ec 00000000         18342		.long	.LDW_5d27e08
000002f0 00000000         18343		.long	FblMemProcessJob..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
000002f4 00000144         18344		.long	__ghs_eofn_FblMemProcessJob-FblMemProcessJob..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
000002f8 01               18345		.byte	1
000002f9 00000000         18346		.long	.LDW36
000002fd 00               18347		.byte	0
000002fe 00               18348		.byte	0
000002ff 00               18349		.byte	0
                          18350	.LDW_unq_36:
                          18351		.section	.debug_line
00000d1d 000502           18352		.byte	0,5,2
00000d20 00000000         18353		.long	FblMemProcessJob..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
00000d24 06               18354		.byte	6
00000d25 03               18355		.byte	3

                                   Fri Apr 10 08:32:15 2020           Page 329
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
00000d26 ee14             18356		.byte	238,20
00000d28 02               18357		.byte	2
00000d29 00               18358		.byte	0
00000d2a 01               18359		.byte	1
00000d2b 03               18360		.byte	3
00000d2c 20               18361		.byte	32
00000d2d 02               18362		.byte	2
00000d2e 0e               18363		.byte	14
00000d2f 01               18364		.byte	1
00000d30 000502           18365		.byte	0,5,2
00000d33 00000000         18366		.long	.LDWlin85
00000d37 03               18367		.byte	3
00000d38 09               18368		.byte	9
00000d39 02               18369		.byte	2
00000d3a 00               18370		.byte	0
00000d3b 01               18371		.byte	1
00000d3c 1d               18372		.byte	29
00000d3d 000502           18373		.byte	0,5,2
00000d40 00000000         18374		.long	.LDWlin86
00000d44 03               18375		.byte	3
00000d45 cc02             18376		.byte	204,2
00000d47 02               18377		.byte	2
00000d48 00               18378		.byte	0
00000d49 01               18379		.byte	1
00000d4a 02               18380		.byte	2
00000d4b 00               18381		.byte	0
00000d4c 0b               18382		.byte	11
00000d4d 02               18383		.byte	2
00000d4e 00               18384		.byte	0
00000d4f 03               18385		.byte	3
00000d50 0d               18386		.byte	13
00000d51 02               18387		.byte	2
00000d52 00               18388		.byte	0
00000d53 01               18389		.byte	1
00000d54 0b               18390		.byte	11
00000d55 0d               18391		.byte	13
00000d56 1c               18392		.byte	28
00000d57 000502           18393		.byte	0,5,2
00000d5a 00000000         18394		.long	.LDWlin87
00000d5e 03               18395		.byte	3
00000d5f 977e             18396		.byte	151,126
00000d61 02               18397		.byte	2
00000d62 00               18398		.byte	0
00000d63 01               18399		.byte	1
00000d64 0d               18400		.byte	13
00000d65 000502           18401		.byte	0,5,2
00000d68 00000000         18402		.long	.LDWlin88
00000d6c 0b               18403		.byte	11
00000d6d 0b               18404		.byte	11
00000d6e 1c               18405		.byte	28
00000d6f 03               18406		.byte	3
00000d70 0e               18407		.byte	14
00000d71 02               18408		.byte	2
00000d72 08               18409		.byte	8
00000d73 01               18410		.byte	1
00000d74 02               18411		.byte	2

                                   Fri Apr 10 08:32:15 2020           Page 330
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
00000d75 00               18412		.byte	0
00000d76 0d               18413		.byte	13
00000d77 000502           18414		.byte	0,5,2
00000d7a 00000000         18415		.long	.LDWlin89
00000d7e 03               18416		.byte	3
00000d7f 11               18417		.byte	17
00000d80 02               18418		.byte	2
00000d81 00               18419		.byte	0
00000d82 01               18420		.byte	1
00000d83 000502           18421		.byte	0,5,2
00000d86 00000000         18422		.long	.LDWlin90
00000d8a 03               18423		.byte	3
00000d8b da00             18424		.byte	218,0
00000d8d 02               18425		.byte	2
00000d8e 00               18426		.byte	0
00000d8f 01               18427		.byte	1
00000d90 0b               18428		.byte	11
00000d91 0c               18429		.byte	12
00000d92 24               18430		.byte	36
00000d93 14               18431		.byte	20
00000d94 1d               18432		.byte	29
00000d95 55               18433		.byte	85
00000d96 000502           18434		.byte	0,5,2
00000d99 00000000         18435		.long	.LDWlin91
00000d9d 0b               18436		.byte	11
00000d9e 03               18437		.byte	3
00000d9f 05               18438		.byte	5
00000da0 02               18439		.byte	2
00000da1 00               18440		.byte	0
00000da2 01               18441		.byte	1
00000da3 55               18442		.byte	85
00000da4 000502           18443		.byte	0,5,2
00000da7 00000000         18444		.long	.LDWlin92
00000dab 0b               18445		.byte	11
00000dac 0b               18446		.byte	11
00000dad 000502           18447		.byte	0,5,2
00000db0 00000000         18448		.long	.LDWlin93
00000db4 0b               18449		.byte	11
00000db5 0c               18450		.byte	12
00000db6 0c               18451		.byte	12
00000db7 000502           18452		.byte	0,5,2
00000dba 00000000         18453		.long	.LDWlin94
00000dbe 0b               18454		.byte	11
00000dbf 0c               18455		.byte	12
00000dc0 14               18456		.byte	20
00000dc1 000502           18457		.byte	0,5,2
00000dc4 00000000         18458		.long	.LDWlin95
00000dc8 0b               18459		.byte	11
00000dc9 0d               18460		.byte	13
00000dca 13               18461		.byte	19
00000dcb 1b               18462		.byte	27
00000dcc 06               18463		.byte	6
00000dcd 000502           18464		.byte	0,5,2
00000dd0 00000000         18465		.long	.LDWlin96
00000dd4 03               18466		.byte	3
00000dd5 05               18467		.byte	5

                                   Fri Apr 10 08:32:15 2020           Page 331
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
00000dd6 02               18468		.byte	2
00000dd7 00               18469		.byte	0
00000dd8 01               18470		.byte	1
00000dd9 06               18471		.byte	6
00000dda 0c               18472		.byte	12
00000ddb 02               18473		.byte	2
00000ddc 00               18474		.byte	0
00000ddd 0b               18475		.byte	11
00000dde 0c               18476		.byte	12
00000ddf 0c               18477		.byte	12
00000de0 06               18478		.byte	6
00000de1 03               18479		.byte	3
00000de2 7a               18480		.byte	122
00000de3 02               18481		.byte	2
00000de4 04               18482		.byte	4
00000de5 01               18483		.byte	1
00000de6 06               18484		.byte	6
00000de7 03               18485		.byte	3
00000de8 07               18486		.byte	7
00000de9 02               18487		.byte	2
00000dea 00               18488		.byte	0
00000deb 01               18489		.byte	1
00000dec 1b               18490		.byte	27
00000ded 02               18491		.byte	2
00000dee 00               18492		.byte	0
00000def 0b               18493		.byte	11
00000df0 02               18494		.byte	2
00000df1 00               18495		.byte	0
00000df2 0b               18496		.byte	11
00000df3 02               18497		.byte	2
00000df4 00               18498		.byte	0
00000df5 0c               18499		.byte	12
00000df6 000502           18500		.byte	0,5,2
00000df9 00000000         18501		.long	.LDWlin97
00000dfd 0b               18502		.byte	11
00000dfe 0c               18503		.byte	12
00000dff 000502           18504		.byte	0,5,2
00000e02 00000000         18505		.long	.LDWlin98
00000e06 0b               18506		.byte	11
00000e07 0b               18507		.byte	11
00000e08 1b               18508		.byte	27
00000e09 02               18509		.byte	2
00000e0a 00               18510		.byte	0
00000e0b 0d               18511		.byte	13
00000e0c 3c               18512		.byte	60
00000e0d 000502           18513		.byte	0,5,2
00000e10 00000000         18514		.long	.LDWlin99
00000e14 0b               18515		.byte	11
00000e15 0b               18516		.byte	11
00000e16 1b               18517		.byte	27
00000e17 02               18518		.byte	2
00000e18 00               18519		.byte	0
00000e19 0d               18520		.byte	13
00000e1a 000502           18521		.byte	0,5,2
00000e1d 00000000         18522		.long	.LDWlin100
00000e21 0b               18523		.byte	11

                                   Fri Apr 10 08:32:15 2020           Page 332
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
00000e22 0c               18524		.byte	12
00000e23 000502           18525		.byte	0,5,2
00000e26 00000000         18526		.long	.LDWlin101
00000e2a 0d               18527		.byte	13
00000e2b 03               18528		.byte	3
00000e2c 17               18529		.byte	23
00000e2d 02               18530		.byte	2
00000e2e 08               18531		.byte	8
00000e2f 01               18532		.byte	1
00000e30 02               18533		.byte	2
00000e31 00               18534		.byte	0
00000e32 0d               18535		.byte	13
00000e33 2b               18536		.byte	43
00000e34 25               18537		.byte	37
00000e35 000502           18538		.byte	0,5,2
00000e38 00000000         18539		.long	.LDWlin102
00000e3c 0b               18540		.byte	11
00000e3d 0b               18541		.byte	11
00000e3e 000502           18542		.byte	0,5,2
00000e41 00000000         18543		.long	.LDWlin103
00000e45 0b               18544		.byte	11
00000e46 0c               18545		.byte	12
00000e47 1b               18546		.byte	27
00000e48 02               18547		.byte	2
00000e49 00               18548		.byte	0
00000e4a 0b               18549		.byte	11
00000e4b 02               18550		.byte	2
00000e4c 00               18551		.byte	0
00000e4d 03               18552		.byte	3
00000e4e 04               18553		.byte	4
00000e4f 02               18554		.byte	2
00000e50 00               18555		.byte	0
00000e51 01               18556		.byte	1
00000e52 06               18557		.byte	6
00000e53 02               18558		.byte	2
00000e54 02               18559		.byte	2
00000e55 02               18560		.byte	2
00000e56 0e               18561		.byte	14
00000e57 000101           18562		.byte	0,1,1
                          18563		.section	.debug_info
                          18564	.LDW_5dbf988:
0000346c 11               18565		.byte	17
0000346d 6163746976654a6f 18566		.strz	"activeJob"
00003475 6200            
00003477 ee14             18567		.byte	238,20
00003479 53               18568		.byte	83
0000347a 01               18569		.byte	1
0000347b 00000000         18570		.long	.LDW_4aac688
0000347f 00               18571		.byte	0
00003480 016e             18572		.byte	1,110
                          18573	
                          18574	.LDW_5dc0278:
00003482 11               18575		.byte	17
00003483 6d6f646500       18576		.strz	"mode"
00003488 ee14             18577		.byte	238,20
0000348a 73               18578		.byte	115
0000348b 01               18579		.byte	1

                                   Fri Apr 10 08:32:15 2020           Page 333
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
0000348c 00000000         18580		.long	.LDW_5dbf7d0
00003490 00               18581		.byte	0
00003491 0154             18582		.byte	1,84
                          18583	
                          18584	.LDW_5dad6d0:
00003493 1f               18585		.byte	31
00003494 00000000         18586		.long	.LDW26
00003498 00000000         18587		.long	.LDW36
                          18588	
                          18589	.LDW_5dc0380:
0000349c 06               18590		.byte	6
0000349d 61637475616c4c65 18591		.strz	"actualLength"
000034a5 6e67746800      
000034aa f014             18592		.byte	240,20
000034ac 13               18593		.byte	19
000034ad 01               18594		.byte	1
000034ae 00000000         18595		.long	.LDW_5d9c170
000034b2 00               18596		.byte	0
000034b3 00               18597		.byte	0
000034b4 0271             18598		.byte	2,113
000034b6 0c               18599		.byte	12
                          18600	
                          18601	.LDW_5dc0220:
000034b7 06               18602		.byte	6
000034b8 66696c6c41646472 18603		.strz	"fillAddress"
000034c0 65737300        
000034c4 8015             18604		.byte	128,21
000034c6 10               18605		.byte	16
000034c7 01               18606		.byte	1
000034c8 00000000         18607		.long	.LDW_5d9ca08
000034cc 00               18608		.byte	0
000034cd 00               18609		.byte	0
000034ce 016f             18610		.byte	1,111
                          18611	
                          18612	.LDW_5dc00c0:
000034d0 06               18613		.byte	6
000034d1 66696c6c4c656e67 18614		.strz	"fillLength"
000034d9 746800          
000034dc 8115             18615		.byte	129,21
000034de 10               18616		.byte	16
000034df 01               18617		.byte	1
000034e0 00000000         18618		.long	.LDW_5d9c170
000034e4 00               18619		.byte	0
000034e5 00               18620		.byte	0
000034e6 0271             18621		.byte	2,113
000034e8 08               18622		.byte	8
                          18623	
                          18624	.LDW_5dc0118:
000034e9 06               18625		.byte	6
000034ea 74656d704c656e67 18626		.strz	"tempLength"
000034f2 746800          
000034f5 8215             18627		.byte	130,21
000034f7 10               18628		.byte	16
000034f8 01               18629		.byte	1
000034f9 00000000         18630		.long	.LDW_5d9c170
000034fd 00               18631		.byte	0
000034fe 00               18632		.byte	0
000034ff 0150             18633		.byte	1,80
                          18634	
                          18635	.LDW_5dc01c8:

                                   Fri Apr 10 08:32:15 2020           Page 334
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
00003501 06               18636		.byte	6
00003502 66696e616c697a65 18637		.strz	"finalizeStream"
0000350a 53747265616d00  
00003511 8415             18638		.byte	132,21
00003513 19               18639		.byte	25
00003514 01               18640		.byte	1
00003515 00000000         18641		.long	.LDW_5dbf7d0
00003519 00               18642		.byte	0
0000351a 00               18643		.byte	0
0000351b 0155             18644		.byte	1,85
                          18645	
0000351d 00               18646		.byte	0
                          18647	
0000351e 00               18648		.byte	0
                          18649	
                          18650	.LDW_5dae3b8:
0000351f 15               18651		.byte	21
00003520 46626c4d656d5072 18652		.strz	"FblMemProcessQueue"
00003528 6f63657373517565
00003530 756500          
00003533 9b18             18653		.byte	155,24
00003535 0d               18654		.byte	13
00003536 01               18655		.byte	1
00003537 00000000         18656		.long	FblMemProcessQueue..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
0000353b 00000000         18657		.long	__ghs_eofn_FblMemProcessQueue
0000353f 0151             18658		.byte	1,81
00003541 808080c00f       18659		.byte	128,128,128,192,15
00003546 0c               18660		.byte	12
00003547 00               18661		.byte	0
00003548 20               18662		.byte	32
00003549 00               18663		.byte	0
0000354a 00               18664		.byte	0
0000354b 00               18665		.byte	0
0000354c 00               18666		.byte	0
0000354d 01               18667		.byte	1
0000354e 00               18668		.byte	0
0000354f 01               18669		.byte	1
                          18670	
                          18671		.section	.debug_frame
                          18672	.LDW_5c0ec68:
00000300 00000014         18673		.long	.LDW_unq_38-.LDW_unq_37
                          18674	.LDW_unq_37:
00000304 00000000         18675		.long	.LDW_5d27e08
00000308 00000000         18676		.long	FblMemProcessQueue..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
0000030c 00000076         18677		.long	__ghs_eofn_FblMemProcessQueue-FblMemProcessQueue..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
00000310 01               18678		.byte	1
00000311 00000000         18679		.long	.LDW56
00000315 00               18680		.byte	0
00000316 00               18681		.byte	0
00000317 00               18682		.byte	0
                          18683	.LDW_unq_38:
                          18684		.section	.debug_line
00000e5a 000502           18685		.byte	0,5,2
00000e5d 00000000         18686		.long	FblMemProcessQueue..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
00000e61 06               18687		.byte	6
00000e62 03               18688		.byte	3
00000e63 9b18             18689		.byte	155,24
00000e65 02               18690		.byte	2
00000e66 00               18691		.byte	0

                                   Fri Apr 10 08:32:15 2020           Page 335
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
00000e67 01               18692		.byte	1
00000e68 03               18693		.byte	3
00000e69 06               18694		.byte	6
00000e6a 02               18695		.byte	2
00000e6b 0e               18696		.byte	14
00000e6c 01               18697		.byte	1
00000e6d 000502           18698		.byte	0,5,2
00000e70 00000000         18699		.long	.LDWlin104
00000e74 03               18700		.byte	3
00000e75 0c               18701		.byte	12
00000e76 02               18702		.byte	2
00000e77 00               18703		.byte	0
00000e78 01               18704		.byte	1
00000e79 000502           18705		.byte	0,5,2
00000e7c 00000000         18706		.long	.LDWlin105
00000e80 0b               18707		.byte	11
00000e81 0c               18708		.byte	12
00000e82 0c               18709		.byte	12
00000e83 0c               18710		.byte	12
00000e84 1b               18711		.byte	27
00000e85 02               18712		.byte	2
00000e86 00               18713		.byte	0
00000e87 03               18714		.byte	3
00000e88 08               18715		.byte	8
00000e89 02               18716		.byte	2
00000e8a 00               18717		.byte	0
00000e8b 01               18718		.byte	1
00000e8c 000502           18719		.byte	0,5,2
00000e8f 00000000         18720		.long	.LDWlin106
00000e93 0b               18721		.byte	11
00000e94 0d               18722		.byte	13
00000e95 33               18723		.byte	51
00000e96 03               18724		.byte	3
00000e97 07               18725		.byte	7
00000e98 02               18726		.byte	2
00000e99 08               18727		.byte	8
00000e9a 01               18728		.byte	1
00000e9b 000502           18729		.byte	0,5,2
00000e9e 00000000         18730		.long	.LDWlin107
00000ea2 0b               18731		.byte	11
00000ea3 0c               18732		.byte	12
00000ea4 000502           18733		.byte	0,5,2
00000ea7 00000000         18734		.long	.LDWlin108
00000eab 0c               18735		.byte	12
00000eac 0d               18736		.byte	13
00000ead 000502           18737		.byte	0,5,2
00000eb0 00000000         18738		.long	.LDWlin109
00000eb4 0c               18739		.byte	12
00000eb5 000502           18740		.byte	0,5,2
00000eb8 00000000         18741		.long	.LDWlin110
00000ebc 0c               18742		.byte	12
00000ebd 0c               18743		.byte	12
00000ebe 000502           18744		.byte	0,5,2
00000ec1 00000000         18745		.long	.LDWlin111
00000ec5 0b               18746		.byte	11
00000ec6 02               18747		.byte	2

                                   Fri Apr 10 08:32:15 2020           Page 336
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
00000ec7 00               18748		.byte	0
00000ec8 0c               18749		.byte	12
00000ec9 02               18750		.byte	2
00000eca 00               18751		.byte	0
00000ecb 0b               18752		.byte	11
00000ecc 0c               18753		.byte	12
00000ecd 0c               18754		.byte	12
00000ece 1c               18755		.byte	28
00000ecf 02               18756		.byte	2
00000ed0 00               18757		.byte	0
00000ed1 0c               18758		.byte	12
00000ed2 02               18759		.byte	2
00000ed3 00               18760		.byte	0
00000ed4 0b               18761		.byte	11
00000ed5 02               18762		.byte	2
00000ed6 0c               18763		.byte	12
00000ed7 000101           18764		.byte	0,1,1
                          18765		.section	.debug_info
                          18766	.LDW_5dc03d8:
00003550 11               18767		.byte	17
00003551 6d6f646500       18768		.strz	"mode"
00003556 9b18             18769		.byte	155,24
00003558 36               18770		.byte	54
00003559 01               18771		.byte	1
0000355a 00000000         18772		.long	.LDW_5dbf7d0
0000355e 00               18773		.byte	0
0000355f 016c             18774		.byte	1,108
                          18775	
                          18776	.LDW_5dad730:
00003561 1f               18777		.byte	31
00003562 00000000         18778		.long	.LDW46
00003566 00000000         18779		.long	.LDW56
                          18780	
                          18781	.LDW_5dc02d0:
0000356a 06               18782		.byte	6
0000356b 6163746976654861 18783		.strz	"activeHandle"
00003573 6e646c6500      
00003578 9e18             18784		.byte	158,24
0000357a 17               18785		.byte	23
0000357b 01               18786		.byte	1
0000357c 00000000         18787		.long	.LDW_5c3d8b0
00003580 00               18788		.byte	0
00003581 00               18789		.byte	0
00003582 016b             18790		.byte	1,107
                          18791	
                          18792	.LDW_5dc0328:
00003584 06               18793		.byte	6
00003585 6163746976654a6f 18794		.strz	"activeJob"
0000358d 6200            
0000358f a018             18795		.byte	160,24
00003591 2f               18796		.byte	47
00003592 01               18797		.byte	1
00003593 00000000         18798		.long	.LDW_4aac688
00003597 00               18799		.byte	0
00003598 00               18800		.byte	0
00003599 016e             18801		.byte	1,110
                          18802	
0000359b 00               18803		.byte	0

                                   Fri Apr 10 08:32:15 2020           Page 337
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          18804	
0000359c 00               18805		.byte	0
                          18806	
                          18807	.LDW_5dae158:
0000359d 15               18808		.byte	21
0000359e 46626c4d656d466c 18809		.strz	"FblMemFlushQueueByPrio"
000035a6 7573685175657565
000035ae 42795072696f00  
000035b5 ef18             18810		.byte	239,24
000035b7 0d               18811		.byte	13
000035b8 01               18812		.byte	1
000035b9 00000000         18813		.long	FblMemFlushQueueByPrio..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
000035bd 00000000         18814		.long	__ghs_eofn_FblMemFlushQueueByPrio
000035c1 0151             18815		.byte	1,81
000035c3 8080808008       18816		.byte	128,128,128,128,8
000035c8 0c               18817		.byte	12
000035c9 00               18818		.byte	0
000035ca 10               18819		.byte	16
000035cb 00               18820		.byte	0
000035cc 00               18821		.byte	0
000035cd 00               18822		.byte	0
000035ce 00               18823		.byte	0
000035cf 01               18824		.byte	1
000035d0 00               18825		.byte	0
000035d1 01               18826		.byte	1
                          18827	
                          18828		.section	.debug_frame
                          18829	.LDW_5c0eae8:
00000318 00000014         18830		.long	.LDW_unq_3a-.LDW_unq_39
                          18831	.LDW_unq_39:
0000031c 00000000         18832		.long	.LDW_5d27e08
00000320 00000000         18833		.long	FblMemFlushQueueByPrio..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
00000324 0000003c         18834		.long	__ghs_eofn_FblMemFlushQueueByPrio-FblMemFlushQueueByPrio..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
00000328 01               18835		.byte	1
00000329 00000000         18836		.long	.LDW76
0000032d 00               18837		.byte	0
0000032e 00               18838		.byte	0
0000032f 00               18839		.byte	0
                          18840	.LDW_unq_3a:
                          18841		.section	.debug_line
00000eda 000502           18842		.byte	0,5,2
00000edd 00000000         18843		.long	FblMemFlushQueueByPrio..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
00000ee1 06               18844		.byte	6
00000ee2 03               18845		.byte	3
00000ee3 ef18             18846		.byte	239,24
00000ee5 02               18847		.byte	2
00000ee6 00               18848		.byte	0
00000ee7 01               18849		.byte	1
00000ee8 03               18850		.byte	3
00000ee9 0a               18851		.byte	10
00000eea 02               18852		.byte	2
00000eeb 0c               18853		.byte	12
00000eec 01               18854		.byte	1
00000eed 000502           18855		.byte	0,5,2
00000ef0 00000000         18856		.long	.LDWlin112
00000ef4 03               18857		.byte	3
00000ef5 08               18858		.byte	8
00000ef6 02               18859		.byte	2

                                   Fri Apr 10 08:32:15 2020           Page 338
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
00000ef7 00               18860		.byte	0
00000ef8 01               18861		.byte	1
00000ef9 000502           18862		.byte	0,5,2
00000efc 00000000         18863		.long	.LDWlin113
00000f00 03               18864		.byte	3
00000f01 78               18865		.byte	120
00000f02 02               18866		.byte	2
00000f03 00               18867		.byte	0
00000f04 01               18868		.byte	1
00000f05 000502           18869		.byte	0,5,2
00000f08 00000000         18870		.long	.LDWlin114
00000f0c 03               18871		.byte	3
00000f0d 09               18872		.byte	9
00000f0e 02               18873		.byte	2
00000f0f 00               18874		.byte	0
00000f10 01               18875		.byte	1
00000f11 0b               18876		.byte	11
00000f12 02               18877		.byte	2
00000f13 0a               18878		.byte	10
00000f14 000101           18879		.byte	0,1,1
                          18880		.section	.debug_info
                          18881	.LDW_5dc0170:
000035d2 11               18882		.byte	17
000035d3 7072696f00       18883		.strz	"prio"
000035d8 ef18             18884		.byte	239,24
000035da 36               18885		.byte	54
000035db 01               18886		.byte	1
000035dc 00000000         18887		.long	.LDW_5c3d388
000035e0 00               18888		.byte	0
000035e1 016f             18889		.byte	1,111
                          18890	
                          18891	.LDW_5dad790:
000035e3 1f               18892		.byte	31
000035e4 00000000         18893		.long	.LDW66
000035e8 00000000         18894		.long	.LDW76
                          18895	
000035ec 00               18896		.byte	0
                          18897	
000035ed 00               18898		.byte	0
                          18899	
                          18900	.LDW_5dae1f0:
000035ee 16               18901		.byte	22
000035ef 46626c4d656d5175 18902		.strz	"FblMemQueueBuffer"
000035f7 6575654275666665
000035ff 7200            
00003601 9719             18903		.byte	151,25
00003603 16               18904		.byte	22
00003604 01               18905		.byte	1
00003605 00000000         18906		.long	.LDW_4aea750
00003609 00000000         18907		.long	FblMemQueueBuffer..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
0000360d 00000000         18908		.long	__ghs_eofn_FblMemQueueBuffer
00003611 0151             18909		.byte	1,81
00003613 808080800f       18910		.byte	128,128,128,128,15
00003618 08               18911		.byte	8
00003619 00               18912		.byte	0
0000361a 18               18913		.byte	24
0000361b 00               18914		.byte	0
0000361c 00               18915		.byte	0

                                   Fri Apr 10 08:32:15 2020           Page 339
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
0000361d 00               18916		.byte	0
0000361e 00               18917		.byte	0
0000361f 01               18918		.byte	1
00003620 00               18919		.byte	0
00003621 01               18920		.byte	1
                          18921	
                          18922		.section	.debug_frame
                          18923	.LDW_5c0ebe8:
00000330 00000014         18924		.long	.LDW_unq_3c-.LDW_unq_3b
                          18925	.LDW_unq_3b:
00000334 00000000         18926		.long	.LDW_5d27e08
00000338 00000000         18927		.long	FblMemQueueBuffer..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
0000033c 0000007e         18928		.long	__ghs_eofn_FblMemQueueBuffer-FblMemQueueBuffer..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
00000340 01               18929		.byte	1
00000341 00000000         18930		.long	.LDW96
00000345 00               18931		.byte	0
00000346 00               18932		.byte	0
00000347 00               18933		.byte	0
                          18934	.LDW_unq_3c:
                          18935		.section	.debug_line
00000f17 000502           18936		.byte	0,5,2
00000f1a 00000000         18937		.long	FblMemQueueBuffer..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
00000f1e 06               18938		.byte	6
00000f1f 03               18939		.byte	3
00000f20 9719             18940		.byte	151,25
00000f22 02               18941		.byte	2
00000f23 00               18942		.byte	0
00000f24 01               18943		.byte	1
00000f25 03               18944		.byte	3
00000f26 17               18945		.byte	23
00000f27 02               18946		.byte	2
00000f28 12               18947		.byte	18
00000f29 01               18948		.byte	1
00000f2a 000502           18949		.byte	0,5,2
00000f2d 00000000         18950		.long	.LDWlin115
00000f31 03               18951		.byte	3
00000f32 04               18952		.byte	4
00000f33 02               18953		.byte	2
00000f34 00               18954		.byte	0
00000f35 01               18955		.byte	1
00000f36 0b               18956		.byte	11
00000f37 000502           18957		.byte	0,5,2
00000f3a 00000000         18958		.long	.LDWlin116
00000f3e 0b               18959		.byte	11
00000f3f 03               18960		.byte	3
00000f40 07               18961		.byte	7
00000f41 02               18962		.byte	2
00000f42 00               18963		.byte	0
00000f43 01               18964		.byte	1
00000f44 0d               18965		.byte	13
00000f45 000502           18966		.byte	0,5,2
00000f48 00000000         18967		.long	.LDWlin117
00000f4c 0b               18968		.byte	11
00000f4d 0c               18969		.byte	12
00000f4e 33               18970		.byte	51
00000f4f 03               18971		.byte	3

                                   Fri Apr 10 08:32:15 2020           Page 340
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
00000f50 08               18972		.byte	8
00000f51 02               18973		.byte	2
00000f52 02               18974		.byte	2
00000f53 01               18975		.byte	1
00000f54 03               18976		.byte	3
00000f55 09               18977		.byte	9
00000f56 02               18978		.byte	2
00000f57 0a               18979		.byte	10
00000f58 01               18980		.byte	1
00000f59 000502           18981		.byte	0,5,2
00000f5c 00000000         18982		.long	.LDWlin118
00000f60 03               18983		.byte	3
00000f61 07               18984		.byte	7
00000f62 02               18985		.byte	2
00000f63 00               18986		.byte	0
00000f64 01               18987		.byte	1
00000f65 1c               18988		.byte	28
00000f66 02               18989		.byte	2
00000f67 00               18990		.byte	0
00000f68 0d               18991		.byte	13
00000f69 2b               18992		.byte	43
00000f6a 02               18993		.byte	2
00000f6b 00               18994		.byte	0
00000f6c 0c               18995		.byte	12
00000f6d 02               18996		.byte	2
00000f6e 0c               18997		.byte	12
00000f6f 000101           18998		.byte	0,1,1
                          18999		.section	.debug_info
                          19000	.LDW_5dc0430:
00003622 11               19001		.byte	17
00003623 62756666657200   19002		.strz	"buffer"
0000362a 9719             19003		.byte	151,25
0000362c 3d               19004		.byte	61
0000362d 01               19005		.byte	1
0000362e 00000000         19006		.long	.LDW_5d9ce80
00003632 00               19007		.byte	0
00003633 016c             19008		.byte	1,108
                          19009	
                          19010	.LDW_5dbffb8:
00003635 11               19011		.byte	17
00003636 6f666673657400   19012		.strz	"offset"
0000363d 9719             19013		.byte	151,25
0000363f 50               19014		.byte	80
00003640 01               19015		.byte	1
00003641 00000000         19016		.long	.LDW_5d9c170
00003645 00               19017		.byte	0
00003646 016f             19018		.byte	1,111
                          19019	
                          19020	.LDW_5dc0010:
00003648 11               19021		.byte	17
00003649 6c656e67746800   19022		.strz	"length"
00003650 9719             19023		.byte	151,25
00003652 63               19024		.byte	99
00003653 01               19025		.byte	1
00003654 00000000         19026		.long	.LDW_5d9c170
00003658 00               19027		.byte	0

                                   Fri Apr 10 08:32:15 2020           Page 341
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
00003659 016d             19028		.byte	1,109
                          19029	
                          19030	.LDW_5dad850:
0000365b 1f               19031		.byte	31
0000365c 00000000         19032		.long	.LDW86
00003660 00000000         19033		.long	.LDW96
                          19034	
                          19035	.LDW_5dc0068:
00003664 06               19036		.byte	6
00003665 72657456616c00   19037		.strz	"retVal"
0000366c 9919             19038		.byte	153,25
0000366e 13               19039		.byte	19
0000366f 01               19040		.byte	1
00003670 00000000         19041		.long	.LDW_4aea750
00003674 00               19042		.byte	0
00003675 00               19043		.byte	0
00003676 0153             19044		.byte	1,83
                          19045	
                          19046	.LDW_5df0d70:
00003678 07               19047		.byte	7
00003679 6163746976654a6f 19048		.strz	"activeJob"
00003681 6200            
00003683 9a19             19049		.byte	154,25
00003685 2f               19050		.byte	47
00003686 01               19051		.byte	1
00003687 00000000         19052		.long	.LDW_4aac688
0000368b 00               19053		.byte	0
0000368c 00               19054		.byte	0
                          19055	
0000368d 00               19056		.byte	0
                          19057	
0000368e 00               19058		.byte	0
                          19059	
                          19060	.LDW_5dae618:
0000368f 16               19061		.byte	22
00003690 46626c4d656d4368 19062		.strz	"FblMemCheckAllowed"
00003698 65636b416c6c6f77
000036a0 656400          
000036a3 f019             19063		.byte	240,25
000036a5 13               19064		.byte	19
000036a6 01               19065		.byte	1
000036a7 00000000         19066		.long	.LDW_5df09a8
000036ab 00000000         19067		.long	FblMemCheckAllowed..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
000036af 00000000         19068		.long	__ghs_eofn_FblMemCheckAllowed
000036b3 0151             19069		.byte	1,81
000036b5 808080800c       19070		.byte	128,128,128,128,12
000036ba 08               19071		.byte	8
000036bb 00               19072		.byte	0
000036bc 10               19073		.byte	16
000036bd 00               19074		.byte	0
000036be 00               19075		.byte	0
000036bf 00               19076		.byte	0
000036c0 00               19077		.byte	0
000036c1 01               19078		.byte	1
000036c2 00               19079		.byte	0
000036c3 01               19080		.byte	1
                          19081	
                          19082		.section	.debug_frame
                          19083	.LDW_5c0eba8:

                                   Fri Apr 10 08:32:15 2020           Page 342
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
00000348 00000014         19084		.long	.LDW_unq_3e-.LDW_unq_3d
                          19085	.LDW_unq_3d:
0000034c 00000000         19086		.long	.LDW_5d27e08
00000350 00000000         19087		.long	FblMemCheckAllowed..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
00000354 0000003e         19088		.long	__ghs_eofn_FblMemCheckAllowed-FblMemCheckAllowed..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
00000358 01               19089		.byte	1
00000359 00000000         19090		.long	.LDW17
0000035d 00               19091		.byte	0
0000035e 00               19092		.byte	0
0000035f 00               19093		.byte	0
                          19094	.LDW_unq_3e:
                          19095		.section	.debug_line
00000f72 000502           19096		.byte	0,5,2
00000f75 00000000         19097		.long	FblMemCheckAllowed..C.3A.5CVector.5CCBD1800772_D00_Mpc57xx.5CDemo.5CDemoFbl.5CAppl.5Cobj.5Cfbl_mem.
00000f79 06               19098		.byte	6
00000f7a 03               19099		.byte	3
00000f7b f019             19100		.byte	240,25
00000f7d 02               19101		.byte	2
00000f7e 00               19102		.byte	0
00000f7f 01               19103		.byte	1
00000f80 03               19104		.byte	3
00000f81 07               19105		.byte	7
00000f82 02               19106		.byte	2
00000f83 10               19107		.byte	16
00000f84 01               19108		.byte	1
00000f85 000502           19109		.byte	0,5,2
00000f88 00000000         19110		.long	.LDWlin119
00000f8c 03               19111		.byte	3
00000f8d 04               19112		.byte	4
00000f8e 02               19113		.byte	2
00000f8f 00               19114		.byte	0
00000f90 01               19115		.byte	1
00000f91 000502           19116		.byte	0,5,2
00000f94 00000000         19117		.long	.LDWlin120
00000f98 0b               19118		.byte	11
00000f99 0c               19119		.byte	12
00000f9a 13               19120		.byte	19
00000f9b 000502           19121		.byte	0,5,2
00000f9e 00000000         19122		.long	.LDWlin121
00000fa2 0b               19123		.byte	11
00000fa3 0c               19124		.byte	12
00000fa4 0c               19125		.byte	12
00000fa5 13               19126		.byte	19
00000fa6 1b               19127		.byte	27
00000fa7 02               19128		.byte	2
00000fa8 00               19129		.byte	0
00000fa9 0c               19130		.byte	12
00000faa 02               19131		.byte	2
00000fab 0c               19132		.byte	12
00000fac 000101           19133		.byte	0,1,1
                          19134		.section	.debug_info
                          19135	.LDW_5df08a0:
000036c4 11               19136		.byte	17
000036c5 636865636b00     19137		.strz	"check"
000036cb f019             19138		.byte	240,25
000036cd 39               19139		.byte	57

                                   Fri Apr 10 08:32:15 2020           Page 343
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
000036ce 01               19140		.byte	1
000036cf 00000000         19141		.long	.LDW_5df0f28
000036d3 00               19142		.byte	0
000036d4 016f             19143		.byte	1,111
                          19144	
                          19145	.LDW_5df07f0:
000036d6 11               19146		.byte	17
000036d7 636c65617200     19147		.strz	"clear"
000036dd f019             19148		.byte	240,25
000036df 52               19149		.byte	82
000036e0 01               19150		.byte	1
000036e1 00000000         19151		.long	.LDW_5df0f28
000036e5 00               19152		.byte	0
000036e6 016e             19153		.byte	1,110
                          19154	
                          19155	.LDW_5df1c30:
000036e8 1f               19156		.byte	31
000036e9 00000000         19157		.long	.LDW07
000036ed 00000000         19158		.long	.LDW17
                          19159	
                          19160	.LDW_5df0530:
000036f1 06               19161		.byte	6
000036f2 72657456616c00   19162		.strz	"retVal"
000036f9 f219             19163		.byte	242,25
000036fb 0f               19164		.byte	15
000036fc 01               19165		.byte	1
000036fd 00000000         19166		.long	.LDW_5df09a8
00003701 00               19167		.byte	0
00003702 00               19168		.byte	0
00003703 0153             19169		.byte	1,83
                          19170	
00003705 00               19171		.byte	0
                          19172	
00003706 00               19173		.byte	0
                          19174	
                          19175	.LDW_5dae9a8:
00003707 16               19176		.byte	22
00003708 46626c4d656d496e 19177		.strz	"FblMemInitPowerOnExt"
00003710 6974506f7765724f
00003718 6e45787400      
0000371d 851c             19178		.byte	133,28
0000371f 10               19179		.byte	16
00003720 01               19180		.byte	1
00003721 00000000         19181		.long	.LDW_4aeb9a0
00003725 00000000         19182		.long	FblMemInitPowerOnExt
00003729 00000000         19183		.long	__ghs_eofn_FblMemInitPowerOnExt
0000372d 0151             19184		.byte	1,81
0000372f 00               19185		.byte	0
00003730 08               19186		.byte	8
00003731 00               19187		.byte	0
00003732 08               19188		.byte	8
00003733 00               19189		.byte	0
00003734 00               19190		.byte	0
00003735 00               19191		.byte	0
00003736 01               19192		.byte	1
00003737 01               19193		.byte	1
00003738 00               19194		.byte	0
00003739 01               19195		.byte	1

                                   Fri Apr 10 08:32:15 2020           Page 344
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          19196	
                          19197		.section	.debug_frame
                          19198	.LDW_5c0ec28:
00000360 00000014         19199		.long	.LDW_unq_40-.LDW_unq_3f
                          19200	.LDW_unq_3f:
00000364 00000000         19201		.long	.LDW_5d27e08
00000368 00000000         19202		.long	FblMemInitPowerOnExt
0000036c 0000003a         19203		.long	__ghs_eofn_FblMemInitPowerOnExt-FblMemInitPowerOnExt
00000370 01               19204		.byte	1
00000371 00000000         19205		.long	.LDW37
00000375 00               19206		.byte	0
00000376 00               19207		.byte	0
00000377 00               19208		.byte	0
                          19209	.LDW_unq_40:
                          19210		.section	.debug_line
00000faf 000502           19211		.byte	0,5,2
00000fb2 00000000         19212		.long	FblMemInitPowerOnExt
00000fb6 06               19213		.byte	6
00000fb7 03               19214		.byte	3
00000fb8 851c             19215		.byte	133,28
00000fba 02               19216		.byte	2
00000fbb 00               19217		.byte	0
00000fbc 01               19218		.byte	1
00000fbd 03               19219		.byte	3
00000fbe 18               19220		.byte	24
00000fbf 02               19221		.byte	2
00000fc0 08               19222		.byte	8
00000fc1 01               19223		.byte	1
00000fc2 03               19224		.byte	3
00000fc3 2e               19225		.byte	46
00000fc4 02               19226		.byte	2
00000fc5 00               19227		.byte	0
00000fc6 01               19228		.byte	1
00000fc7 000502           19229		.byte	0,5,2
00000fca 00000000         19230		.long	.LDWlin122
00000fce 0d               19231		.byte	13
00000fcf 0c               19232		.byte	12
00000fd0 03               19233		.byte	3
00000fd1 7e               19234		.byte	126
00000fd2 02               19235		.byte	2
00000fd3 0c               19236		.byte	12
00000fd4 01               19237		.byte	1
00000fd5 000502           19238		.byte	0,5,2
00000fd8 00000000         19239		.long	.LDWlin123
00000fdc 0d               19240		.byte	13
00000fdd 03               19241		.byte	3
00000fde 0c               19242		.byte	12
00000fdf 02               19243		.byte	2
00000fe0 00               19244		.byte	0
00000fe1 01               19245		.byte	1
00000fe2 06               19246		.byte	6
00000fe3 000502           19247		.byte	0,5,2
00000fe6 00000000         19248		.long	.LDWlin124
00000fea 02               19249		.byte	2
00000feb 00               19250		.byte	0
00000fec 02               19251		.byte	2

                                   Fri Apr 10 08:32:15 2020           Page 345
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
00000fed 08               19252		.byte	8
00000fee 000101           19253		.byte	0,1,1
                          19254		.section	.debug_info
                          19255	.LDW_5df0d18:
0000373a 11               19256		.byte	17
0000373b 707265616d626c65 19257		.strz	"preambleLen"
00003743 4c656e00        
00003747 851c             19258		.byte	133,28
00003749 31               19259		.byte	49
0000374a 01               19260		.byte	1
0000374b 00000000         19261		.long	.LDW_5d9c170
0000374f 00               19262		.byte	0
00003750 0153             19263		.byte	1,83
                          19264	
                          19265	.LDW_5df0ed0:
00003752 11               19266		.byte	17
00003753 736f757263654861 19267		.strz	"sourceHandle"
0000375b 6e646c6500      
00003760 851c             19268		.byte	133,28
00003762 51               19269		.byte	81
00003763 01               19270		.byte	1
00003764 00000000         19271		.long	.LDW_5df0f80
00003768 00               19272		.byte	0
00003769 0154             19273		.byte	1,84
                          19274	
                          19275	.LDW_5df1b10:
0000376b 1f               19276		.byte	31
0000376c 00000000         19277		.long	.LDW27
00003770 00000000         19278		.long	.LDW37
                          19279	
                          19280	.LDW_5df0638:
00003774 06               19281		.byte	6
00003775 69647800         19282		.strz	"idx"
00003779 881c             19283		.byte	136,28
0000377b 0b               19284		.byte	11
0000377c 01               19285		.byte	1
0000377d 00000000         19286		.long	.LDW_4ae9b80
00003781 00               19287		.byte	0
00003782 00               19288		.byte	0
00003783 0154             19289		.byte	1,84
                          19290	
00003785 00               19291		.byte	0
                          19292	
00003786 00               19293		.byte	0
                          19294	
                          19295	.LDW_5dadd30:
00003787 16               19296		.byte	22
00003788 46626c4d656d496e 19297		.strz	"FblMemInitPowerOn"
00003790 6974506f7765724f
00003798 6e00            
0000379a e71c             19298		.byte	231,28
0000379c 10               19299		.byte	16
0000379d 01               19300		.byte	1
0000379e 00000000         19301		.long	.LDW_4aeb9a0
000037a2 00000000         19302		.long	FblMemInitPowerOn
000037a6 00000000         19303		.long	__ghs_eofn_FblMemInitPowerOn
000037aa 0151             19304		.byte	1,81
000037ac 03               19305		.byte	3
000037ad 00               19306		.byte	0
000037ae 00               19307		.byte	0

                                   Fri Apr 10 08:32:15 2020           Page 346
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
000037af 00               19308		.byte	0
000037b0 00               19309		.byte	0
000037b1 00               19310		.byte	0
000037b2 00               19311		.byte	0
000037b3 01               19312		.byte	1
000037b4 01               19313		.byte	1
000037b5 00               19314		.byte	0
000037b6 01               19315		.byte	1
                          19316	
                          19317		.section	.debug_frame
                          19318	.LDW_5ec5c38:
00000378 00000014         19319		.long	.LDW_unq_42-.LDW_unq_41
                          19320	.LDW_unq_41:
0000037c 00000000         19321		.long	.LDW_5d27e08
00000380 00000000         19322		.long	FblMemInitPowerOn
00000384 00000006         19323		.long	__ghs_eofn_FblMemInitPowerOn-FblMemInitPowerOn
00000388 01               19324		.byte	1
00000389 00000000         19325		.long	.LDW57
0000038d 00               19326		.byte	0
0000038e 00               19327		.byte	0
0000038f 00               19328		.byte	0
                          19329	.LDW_unq_42:
                          19330		.section	.debug_line
00000ff1 000502           19331		.byte	0,5,2
00000ff4 00000000         19332		.long	FblMemInitPowerOn
00000ff8 06               19333		.byte	6
00000ff9 03               19334		.byte	3
00000ffa e91c             19335		.byte	233,28
00000ffc 02               19336		.byte	2
00000ffd 00               19337		.byte	0
00000ffe 01               19338		.byte	1
00000fff 06               19339		.byte	6
00001000 000502           19340		.byte	0,5,2
00001003 00000000         19341		.long	__ghs_eofn_FblMemInitPowerOn
00001007 02               19342		.byte	2
00001008 00               19343		.byte	0
00001009 000101           19344		.byte	0,1,1
                          19345		.section	.debug_info
                          19346	.LDW_5df1b40:
000037b7 1f               19347		.byte	31
000037b8 00000000         19348		.long	.LDW47
000037bc 00000000         19349		.long	.LDW57
                          19350	
000037c0 00               19351		.byte	0
                          19352	
000037c1 00               19353		.byte	0
                          19354	
                          19355	.LDW_5dae878:
000037c2 16               19356		.byte	22
000037c3 46626c4d656d496e 19357		.strz	"FblMemInit"
000037cb 697400          
000037ce f51c             19358		.byte	245,28
000037d0 10               19359		.byte	16
000037d1 01               19360		.byte	1
000037d2 00000000         19361		.long	.LDW_4aeb9a0
000037d6 00000000         19362		.long	FblMemInit
000037da 00000000         19363		.long	__ghs_eofn_FblMemInit

                                   Fri Apr 10 08:32:15 2020           Page 347
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
000037de 0151             19364		.byte	1,81
000037e0 8080808008       19365		.byte	128,128,128,128,8
000037e5 0c               19366		.byte	12
000037e6 00               19367		.byte	0
000037e7 10               19368		.byte	16
000037e8 00               19369		.byte	0
000037e9 00               19370		.byte	0
000037ea 00               19371		.byte	0
000037eb 01               19372		.byte	1
000037ec 01               19373		.byte	1
000037ed 00               19374		.byte	0
000037ee 01               19375		.byte	1
                          19376	
                          19377		.section	.debug_frame
                          19378	.LDW_5ec55b8:
00000390 00000014         19379		.long	.LDW_unq_44-.LDW_unq_43
                          19380	.LDW_unq_43:
00000394 00000000         19381		.long	.LDW_5d27e08
00000398 00000000         19382		.long	FblMemInit
0000039c 00000024         19383		.long	__ghs_eofn_FblMemInit-FblMemInit
000003a0 01               19384		.byte	1
000003a1 00000000         19385		.long	.LDW77
000003a5 00               19386		.byte	0
000003a6 00               19387		.byte	0
000003a7 00               19388		.byte	0
                          19389	.LDW_unq_44:
                          19390		.section	.debug_line
0000100c 000502           19391		.byte	0,5,2
0000100f 00000000         19392		.long	FblMemInit
00001013 06               19393		.byte	6
00001014 03               19394		.byte	3
00001015 f51c             19395		.byte	245,28
00001017 02               19396		.byte	2
00001018 00               19397		.byte	0
00001019 01               19398		.byte	1
0000101a 03               19399		.byte	3
0000101b 08               19400		.byte	8
0000101c 02               19401		.byte	2
0000101d 0a               19402		.byte	10
0000101e 01               19403		.byte	1
0000101f 000502           19404		.byte	0,5,2
00001022 00000000         19405		.long	.LDWlin126
00001026 03               19406		.byte	3
00001027 04               19407		.byte	4
00001028 02               19408		.byte	2
00001029 00               19409		.byte	0
0000102a 01               19410		.byte	1
0000102b 000502           19411		.byte	0,5,2
0000102e 00000000         19412		.long	.LDWlin127
00001032 03               19413		.byte	3
00001033 07               19414		.byte	7
00001034 02               19415		.byte	2
00001035 00               19416		.byte	0
00001036 01               19417		.byte	1
00001037 000502           19418		.byte	0,5,2
0000103a 00000000         19419		.long	.LDWlin128

                                   Fri Apr 10 08:32:15 2020           Page 348
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
0000103e 0d               19420		.byte	13
0000103f 06               19421		.byte	6
00001040 02               19422		.byte	2
00001041 02               19423		.byte	2
00001042 02               19424		.byte	2
00001043 0a               19425		.byte	10
00001044 000101           19426		.byte	0,1,1
                          19427		.section	.debug_info
                          19428	.LDW_5df1b70:
000037ef 1f               19429		.byte	31
000037f0 00000000         19430		.long	.LDW67
000037f4 00000000         19431		.long	.LDW77
                          19432	
                          19433	.LDW_5df0a00:
000037f8 07               19434		.byte	7
000037f9 6163746976654275 19435		.strz	"activeBuffer"
00003801 6666657200      
00003806 f71c             19436		.byte	247,28
00003808 13               19437		.byte	19
00003809 01               19438		.byte	1
0000380a 00000000         19439		.long	.LDW_4aeb9a0
0000380e 00               19440		.byte	0
0000380f 00               19441		.byte	0
                          19442	
00003810 00               19443		.byte	0
                          19444	
00003811 00               19445		.byte	0
                          19446	
                          19447	.LDW_5dae910:
00003812 15               19448		.byte	21
00003813 46626c4d656d4465 19449		.strz	"FblMemDeinit"
0000381b 696e697400      
00003820 951d             19450		.byte	149,29
00003822 06               19451		.byte	6
00003823 01               19452		.byte	1
00003824 00000000         19453		.long	FblMemDeinit
00003828 00000000         19454		.long	__ghs_eofn_FblMemDeinit
0000382c 0151             19455		.byte	1,81
0000382e 03               19456		.byte	3
0000382f 00               19457		.byte	0
00003830 00               19458		.byte	0
00003831 00               19459		.byte	0
00003832 00               19460		.byte	0
00003833 00               19461		.byte	0
00003834 00               19462		.byte	0
00003835 01               19463		.byte	1
00003836 01               19464		.byte	1
00003837 00               19465		.byte	0
00003838 01               19466		.byte	1
                          19467	
                          19468		.section	.debug_frame
                          19469	.LDW_5ec5c78:
000003a8 00000014         19470		.long	.LDW_unq_46-.LDW_unq_45
                          19471	.LDW_unq_45:
000003ac 00000000         19472		.long	.LDW_5d27e08
000003b0 00000000         19473		.long	FblMemDeinit
000003b4 00000004         19474		.long	__ghs_eofn_FblMemDeinit-FblMemDeinit
000003b8 01               19475		.byte	1

                                   Fri Apr 10 08:32:15 2020           Page 349
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
000003b9 00000000         19476		.long	.LDW97
000003bd 00               19477		.byte	0
000003be 00               19478		.byte	0
000003bf 00               19479		.byte	0
                          19480	.LDW_unq_46:
                          19481		.section	.debug_line
00001047 000502           19482		.byte	0,5,2
0000104a 00000000         19483		.long	FblMemDeinit
0000104e 06               19484		.byte	6
0000104f 03               19485		.byte	3
00001050 971d             19486		.byte	151,29
00001052 02               19487		.byte	2
00001053 00               19488		.byte	0
00001054 01               19489		.byte	1
00001055 000502           19490		.byte	0,5,2
00001058 00000000         19491		.long	__ghs_eofn_FblMemDeinit
0000105c 0b               19492		.byte	11
0000105d 000101           19493		.byte	0,1,1
                          19494		.section	.debug_info
                          19495	.LDW_5df1c00:
00003839 1f               19496		.byte	31
0000383a 00000000         19497		.long	.LDW87
0000383e 00000000         19498		.long	.LDW97
                          19499	
00003842 00               19500		.byte	0
                          19501	
00003843 00               19502		.byte	0
                          19503	
                          19504	.LDW_5daddc8:
00003844 16               19505		.byte	22
00003845 46626c4d656d4765 19506		.strz	"FblMemGetActiveBuffer"
0000384d 7441637469766542
00003855 756666657200    
0000385b b31d             19507		.byte	179,29
0000385d 10               19508		.byte	16
0000385e 01               19509		.byte	1
0000385f 00000000         19510		.long	.LDW_4aeb9a0
00003863 00000000         19511		.long	FblMemGetActiveBuffer
00003867 00000000         19512		.long	__ghs_eofn_FblMemGetActiveBuffer
0000386b 0151             19513		.byte	1,81
0000386d 03               19514		.byte	3
0000386e 00               19515		.byte	0
0000386f 00               19516		.byte	0
00003870 00               19517		.byte	0
00003871 00               19518		.byte	0
00003872 00               19519		.byte	0
00003873 00               19520		.byte	0
00003874 01               19521		.byte	1
00003875 01               19522		.byte	1
00003876 00               19523		.byte	0
00003877 01               19524		.byte	1
                          19525	
                          19526		.section	.debug_frame
                          19527	.LDW_5c0ede8:
000003c0 00000014         19528		.long	.LDW_unq_48-.LDW_unq_47
                          19529	.LDW_unq_47:
000003c4 00000000         19530		.long	.LDW_5d27e08
000003c8 00000000         19531		.long	FblMemGetActiveBuffer

                                   Fri Apr 10 08:32:15 2020           Page 350
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
000003cc 00000010         19532		.long	__ghs_eofn_FblMemGetActiveBuffer-FblMemGetActiveBuffer
000003d0 01               19533		.byte	1
000003d1 00000000         19534		.long	.LDW14
000003d5 00               19535		.byte	0
000003d6 00               19536		.byte	0
000003d7 00               19537		.byte	0
                          19538	.LDW_unq_48:
                          19539		.section	.debug_line
00001060 000502           19540		.byte	0,5,2
00001063 00000000         19541		.long	FblMemGetActiveBuffer
00001067 06               19542		.byte	6
00001068 03               19543		.byte	3
00001069 b91d             19544		.byte	185,29
0000106b 02               19545		.byte	2
0000106c 00               19546		.byte	0
0000106d 01               19547		.byte	1
0000106e 3d               19548		.byte	61
0000106f 06               19549		.byte	6
00001070 000502           19550		.byte	0,5,2
00001073 00000000         19551		.long	__ghs_eofn_FblMemGetActiveBuffer
00001077 02               19552		.byte	2
00001078 00               19553		.byte	0
00001079 000101           19554		.byte	0,1,1
                          19555		.section	.debug_info
                          19556	.LDW_5df1960:
00003878 1f               19557		.byte	31
00003879 00000000         19558		.long	.LDW04
0000387d 00000000         19559		.long	.LDW14
                          19560	
                          19561	.LDW_5df0dc8:
00003881 07               19562		.byte	7
00003882 696e7075744a6f62 19563		.strz	"inputJob"
0000388a 00              
0000388b b51d             19564		.byte	181,29
0000388d 2f               19565		.byte	47
0000388e 01               19566		.byte	1
0000388f 00000000         19567		.long	.LDW_4aac688
00003893 00               19568		.byte	0
00003894 00               19569		.byte	0
                          19570	
00003895 00               19571		.byte	0
                          19572	
00003896 00               19573		.byte	0
                          19574	
                          19575	.LDW_5dae028:
00003897 16               19576		.byte	22
00003898 46626c4d656d426c 19577		.strz	"FblMemBlockEraseIndication"
000038a0 6f636b4572617365
000038a8 496e646963617469
000038b0 6f6e00          
000038b3 c91d             19578		.byte	201,29
000038b5 0f               19579		.byte	15
000038b6 01               19580		.byte	1
000038b7 00000000         19581		.long	.LDW_4aea750
000038bb 00000000         19582		.long	FblMemBlockEraseIndication
000038bf 00000000         19583		.long	__ghs_eofn_FblMemBlockEraseIndication
000038c3 0151             19584		.byte	1,81
000038c5 8080808008       19585		.byte	128,128,128,128,8
000038ca 0c               19586		.byte	12
000038cb 00               19587		.byte	0

                                   Fri Apr 10 08:32:15 2020           Page 351
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
000038cc 10               19588		.byte	16
000038cd 00               19589		.byte	0
000038ce 00               19590		.byte	0
000038cf 00               19591		.byte	0
000038d0 01               19592		.byte	1
000038d1 01               19593		.byte	1
000038d2 00               19594		.byte	0
000038d3 01               19595		.byte	1
                          19596	
                          19597		.section	.debug_frame
                          19598	.LDW_5ec57f8:
000003d8 00000014         19599		.long	.LDW_unq_4a-.LDW_unq_49
                          19600	.LDW_unq_49:
000003dc 00000000         19601		.long	.LDW_5d27e08
000003e0 00000000         19602		.long	FblMemBlockEraseIndication
000003e4 0000003a         19603		.long	__ghs_eofn_FblMemBlockEraseIndication-FblMemBlockEraseIndication
000003e8 01               19604		.byte	1
000003e9 00000000         19605		.long	.LDW18
000003ed 00               19606		.byte	0
000003ee 00               19607		.byte	0
000003ef 00               19608		.byte	0
                          19609	.LDW_unq_4a:
                          19610		.section	.debug_line
0000107c 000502           19611		.byte	0,5,2
0000107f 00000000         19612		.long	FblMemBlockEraseIndication
00001083 06               19613		.byte	6
00001084 03               19614		.byte	3
00001085 c91d             19615		.byte	201,29
00001087 02               19616		.byte	2
00001088 00               19617		.byte	0
00001089 01               19618		.byte	1
0000108a 03               19619		.byte	3
0000108b 04               19620		.byte	4
0000108c 02               19621		.byte	2
0000108d 0c               19622		.byte	12
0000108e 01               19623		.byte	1
0000108f 000502           19624		.byte	0,5,2
00001092 00000000         19625		.long	.LDWlin130
00001096 0b               19626		.byte	11
00001097 0b               19627		.byte	11
00001098 000502           19628		.byte	0,5,2
0000109b 00000000         19629		.long	.LDWlin131
0000109f 0b               19630		.byte	11
000010a0 0c               19631		.byte	12
000010a1 03               19632		.byte	3
000010a2 0d               19633		.byte	13
000010a3 02               19634		.byte	2
000010a4 00               19635		.byte	0
000010a5 01               19636		.byte	1
000010a6 000502           19637		.byte	0,5,2
000010a9 00000000         19638		.long	.LDWlin132
000010ad 03               19639		.byte	3
000010ae 06               19640		.byte	6
000010af 02               19641		.byte	2
000010b0 00               19642		.byte	0
000010b1 01               19643		.byte	1

                                   Fri Apr 10 08:32:15 2020           Page 352
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
000010b2 02               19644		.byte	2
000010b3 00               19645		.byte	0
000010b4 0c               19646		.byte	12
000010b5 000502           19647		.byte	0,5,2
000010b8 00000000         19648		.long	.LDWlin133
000010bc 0b               19649		.byte	11
000010bd 0c               19650		.byte	12
000010be 33               19651		.byte	51
000010bf 02               19652		.byte	2
000010c0 00               19653		.byte	0
000010c1 0c               19654		.byte	12
000010c2 02               19655		.byte	2
000010c3 0a               19656		.byte	10
000010c4 000101           19657		.byte	0,1,1
                          19658		.section	.debug_info
                          19659	.LDW_5df0cc0:
000038d4 11               19660		.byte	17
000038d5 626c6f636b00     19661		.strz	"block"
000038db c91d             19662		.byte	201,29
000038dd 62               19663		.byte	98
000038de 01               19664		.byte	1
000038df 00000000         19665		.long	.LDW_5dbf180
000038e3 00               19666		.byte	0
000038e4 016f             19667		.byte	1,111
                          19668	
                          19669	.LDW_5df1540:
000038e6 1f               19670		.byte	31
000038e7 00000000         19671		.long	.LDW08
000038eb 00000000         19672		.long	.LDW18
                          19673	
                          19674	.LDW_5df0e20:
000038ef 06               19675		.byte	6
000038f0 72657456616c00   19676		.strz	"retVal"
000038f7 cb1d             19677		.byte	203,29
000038f9 13               19678		.byte	19
000038fa 01               19679		.byte	1
000038fb 00000000         19680		.long	.LDW_4aea750
000038ff 00               19681		.byte	0
00003900 00               19682		.byte	0
00003901 0153             19683		.byte	1,83
                          19684	
00003903 00               19685		.byte	0
                          19686	
00003904 00               19687		.byte	0
                          19688	
                          19689	.LDW_5dade60:
00003905 16               19690		.byte	22
00003906 46626c4d656d426c 19691		.strz	"FblMemBlockStartIndication"
0000390e 6f636b5374617274
00003916 496e646963617469
0000391e 6f6e00          
00003921 fc1d             19692		.byte	252,29
00003923 0f               19693		.byte	15
00003924 01               19694		.byte	1
00003925 00000000         19695		.long	.LDW_4aea750
00003929 00000000         19696		.long	FblMemBlockStartIndication
0000392d 00000000         19697		.long	__ghs_eofn_FblMemBlockStartIndication
00003931 0151             19698		.byte	1,81
00003933 808080800e       19699		.byte	128,128,128,128,14

                                   Fri Apr 10 08:32:15 2020           Page 353
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
00003938 0c               19700		.byte	12
00003939 00               19701		.byte	0
0000393a 18               19702		.byte	24
0000393b 00               19703		.byte	0
0000393c 00               19704		.byte	0
0000393d 00               19705		.byte	0
0000393e 01               19706		.byte	1
0000393f 01               19707		.byte	1
00003940 00               19708		.byte	0
00003941 01               19709		.byte	1
                          19710	
                          19711		.section	.debug_frame
                          19712	.LDW_5ec5678:
000003f0 00000014         19713		.long	.LDW_unq_4c-.LDW_unq_4b
                          19714	.LDW_unq_4b:
000003f4 00000000         19715		.long	.LDW_5d27e08
000003f8 00000000         19716		.long	FblMemBlockStartIndication
000003fc 0000005e         19717		.long	__ghs_eofn_FblMemBlockStartIndication-FblMemBlockStartIndication
00000400 01               19718		.byte	1
00000401 00000000         19719		.long	.LDW38
00000405 00               19720		.byte	0
00000406 00               19721		.byte	0
00000407 00               19722		.byte	0
                          19723	.LDW_unq_4c:
                          19724		.section	.debug_line
000010c7 000502           19725		.byte	0,5,2
000010ca 00000000         19726		.long	FblMemBlockStartIndication
000010ce 06               19727		.byte	6
000010cf 03               19728		.byte	3
000010d0 fc1d             19729		.byte	252,29
000010d2 02               19730		.byte	2
000010d3 00               19731		.byte	0
000010d4 01               19732		.byte	1
000010d5 03               19733		.byte	3
000010d6 0b               19734		.byte	11
000010d7 02               19735		.byte	2
000010d8 0e               19736		.byte	14
000010d9 01               19737		.byte	1
000010da 15               19738		.byte	21
000010db 000502           19739		.byte	0,5,2
000010de 00000000         19740		.long	.LDWlin134
000010e2 0b               19741		.byte	11
000010e3 0b               19742		.byte	11
000010e4 000502           19743		.byte	0,5,2
000010e7 00000000         19744		.long	.LDWlin135
000010eb 0b               19745		.byte	11
000010ec 0c               19746		.byte	12
000010ed 03               19747		.byte	3
000010ee 05               19748		.byte	5
000010ef 02               19749		.byte	2
000010f0 00               19750		.byte	0
000010f1 01               19751		.byte	1
000010f2 000502           19752		.byte	0,5,2
000010f5 00000000         19753		.long	.LDWlin136
000010f9 0b               19754		.byte	11
000010fa 0b               19755		.byte	11

                                   Fri Apr 10 08:32:15 2020           Page 354
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
000010fb 0d               19756		.byte	13
000010fc 0b               19757		.byte	11
000010fd 000502           19758		.byte	0,5,2
00001100 00000000         19759		.long	.LDWlin137
00001104 0b               19760		.byte	11
00001105 02               19761		.byte	2
00001106 00               19762		.byte	0
00001107 0c               19763		.byte	12
00001108 02               19764		.byte	2
00001109 00               19765		.byte	0
0000110a 0c               19766		.byte	12
0000110b 0b               19767		.byte	11
0000110c 0d               19768		.byte	13
0000110d 03               19769		.byte	3
0000110e 04               19770		.byte	4
0000110f 02               19771		.byte	2
00001110 12               19772		.byte	18
00001111 01               19773		.byte	1
00001112 03               19774		.byte	3
00001113 04               19775		.byte	4
00001114 02               19776		.byte	2
00001115 04               19777		.byte	4
00001116 01               19778		.byte	1
00001117 25               19779		.byte	37
00001118 3b               19780		.byte	59
00001119 02               19781		.byte	2
0000111a 00               19782		.byte	0
0000111b 0c               19783		.byte	12
0000111c 06               19784		.byte	6
0000111d 02               19785		.byte	2
0000111e 02               19786		.byte	2
0000111f 02               19787		.byte	2
00001120 0c               19788		.byte	12
00001121 000101           19789		.byte	0,1,1
                          19790		.section	.debug_info
                          19791	.LDW_5df04d8:
00003942 11               19792		.byte	17
00003943 626c6f636b00     19793		.strz	"block"
00003949 fc1d             19794		.byte	252,29
0000394b 5c               19795		.byte	92
0000394c 01               19796		.byte	1
0000394d 00000000         19797		.long	.LDW_5dbed90
00003951 00               19798		.byte	0
00003952 016d             19799		.byte	1,109
                          19800	
                          19801	.LDW_5df1a20:
00003954 1f               19802		.byte	31
00003955 00000000         19803		.long	.LDW28
00003959 00000000         19804		.long	.LDW38
                          19805	
                          19806	.LDW_5df0ab0:
0000395d 06               19807		.byte	6
0000395e 72657456616c00   19808		.strz	"retVal"
00003965 fe1d             19809		.byte	254,29
00003967 16               19810		.byte	22
00003968 01               19811		.byte	1

                                   Fri Apr 10 08:32:15 2020           Page 355
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
00003969 00000000         19812		.long	.LDW_4aea750
0000396d 00               19813		.byte	0
0000396e 00               19814		.byte	0
0000396f 016f             19815		.byte	1,111
                          19816	
00003971 00               19817		.byte	0
                          19818	
00003972 00               19819		.byte	0
                          19820	
                          19821	.LDW_5dadef8:
00003973 16               19822		.byte	22
00003974 46626c4d656d426c 19823		.strz	"FblMemBlockEndIndication"
0000397c 6f636b456e64496e
00003984 6469636174696f6e
0000398c 00              
0000398d bd1e             19824		.byte	189,30
0000398f 0f               19825		.byte	15
00003990 01               19826		.byte	1
00003991 00000000         19827		.long	.LDW_4aea750
00003995 00000000         19828		.long	FblMemBlockEndIndication
00003999 00000000         19829		.long	__ghs_eofn_FblMemBlockEndIndication
0000399d 0151             19830		.byte	1,81
0000399f 808080c00f       19831		.byte	128,128,128,192,15
000039a4 0c               19832		.byte	12
000039a5 00               19833		.byte	0
000039a6 20               19834		.byte	32
000039a7 00               19835		.byte	0
000039a8 00               19836		.byte	0
000039a9 00               19837		.byte	0
000039aa 01               19838		.byte	1
000039ab 01               19839		.byte	1
000039ac 00               19840		.byte	0
000039ad 01               19841		.byte	1
                          19842	
                          19843		.section	.debug_frame
                          19844	.LDW_5ec5d78:
00000408 00000014         19845		.long	.LDW_unq_4e-.LDW_unq_4d
                          19846	.LDW_unq_4d:
0000040c 00000000         19847		.long	.LDW_5d27e08
00000410 00000000         19848		.long	FblMemBlockEndIndication
00000414 000000a4         19849		.long	__ghs_eofn_FblMemBlockEndIndication-FblMemBlockEndIndication
00000418 01               19850		.byte	1
00000419 00000000         19851		.long	.LDW58
0000041d 00               19852		.byte	0
0000041e 00               19853		.byte	0
0000041f 00               19854		.byte	0
                          19855	.LDW_unq_4e:
                          19856		.section	.debug_line
00001124 000502           19857		.byte	0,5,2
00001127 00000000         19858		.long	FblMemBlockEndIndication
0000112b 06               19859		.byte	6
0000112c 03               19860		.byte	3
0000112d bd1e             19861		.byte	189,30
0000112f 02               19862		.byte	2
00001130 00               19863		.byte	0
00001131 01               19864		.byte	1
00001132 03               19865		.byte	3
00001133 07               19866		.byte	7
00001134 02               19867		.byte	2

                                   Fri Apr 10 08:32:15 2020           Page 356
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
00001135 0c               19868		.byte	12
00001136 01               19869		.byte	1
00001137 15               19870		.byte	21
00001138 000502           19871		.byte	0,5,2
0000113b 00000000         19872		.long	.LDWlin138
0000113f 0b               19873		.byte	11
00001140 0b               19874		.byte	11
00001141 000502           19875		.byte	0,5,2
00001144 00000000         19876		.long	.LDWlin139
00001148 0b               19877		.byte	11
00001149 0c               19878		.byte	12
0000114a 0d               19879		.byte	13
0000114b 000502           19880		.byte	0,5,2
0000114e 00000000         19881		.long	.LDWlin140
00001152 0b               19882		.byte	11
00001153 0c               19883		.byte	12
00001154 63               19884		.byte	99
00001155 15               19885		.byte	21
00001156 000502           19886		.byte	0,5,2
00001159 00000000         19887		.long	.LDWlin141
0000115d 03               19888		.byte	3
0000115e 05               19889		.byte	5
0000115f 02               19890		.byte	2
00001160 00               19891		.byte	0
00001161 01               19892		.byte	1
00001162 6d               19893		.byte	109
00001163 000502           19894		.byte	0,5,2
00001166 00000000         19895		.long	.LDWlin142
0000116a 0b               19896		.byte	11
0000116b 0c               19897		.byte	12
0000116c 14               19898		.byte	20
0000116d 03               19899		.byte	3
0000116e 0d               19900		.byte	13
0000116f 02               19901		.byte	2
00001170 08               19902		.byte	8
00001171 01               19903		.byte	1
00001172 000502           19904		.byte	0,5,2
00001175 00000000         19905		.long	.LDWlin143
00001179 0d               19906		.byte	13
0000117a 35               19907		.byte	53
0000117b 000502           19908		.byte	0,5,2
0000117e 00000000         19909		.long	.LDWlin144
00001182 0b               19910		.byte	11
00001183 02               19911		.byte	2
00001184 00               19912		.byte	0
00001185 0b               19913		.byte	11
00001186 02               19914		.byte	2
00001187 00               19915		.byte	0
00001188 03               19916		.byte	3
00001189 0c               19917		.byte	12
0000118a 02               19918		.byte	2
0000118b 00               19919		.byte	0
0000118c 01               19920		.byte	1
0000118d 02               19921		.byte	2
0000118e 00               19922		.byte	0
0000118f 0c               19923		.byte	12

                                   Fri Apr 10 08:32:15 2020           Page 357
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
00001190 0b               19924		.byte	11
00001191 0c               19925		.byte	12
00001192 33               19926		.byte	51
00001193 02               19927		.byte	2
00001194 00               19928		.byte	0
00001195 0c               19929		.byte	12
00001196 06               19930		.byte	6
00001197 02               19931		.byte	2
00001198 02               19932		.byte	2
00001199 02               19933		.byte	2
0000119a 0c               19934		.byte	12
0000119b 000101           19935		.byte	0,1,1
                          19936		.section	.debug_info
                          19937	.LDW_5df1a50:
000039ae 1f               19938		.byte	31
000039af 00000000         19939		.long	.LDW48
000039b3 00000000         19940		.long	.LDW58
                          19941	
                          19942	.LDW_5df0588:
000039b7 06               19943		.byte	6
000039b8 72657456616c00   19944		.strz	"retVal"
000039bf bf1e             19945		.byte	191,30
000039c1 12               19946		.byte	18
000039c2 01               19947		.byte	1
000039c3 00000000         19948		.long	.LDW_4aea750
000039c7 00               19949		.byte	0
000039c8 00               19950		.byte	0
000039c9 016d             19951		.byte	1,109
                          19952	
                          19953	.LDW_5df05e0:
000039cb 06               19954		.byte	6
000039cc 6261736541646472 19955		.strz	"baseAddress"
000039d4 65737300        
000039d8 c11e             19956		.byte	193,30
000039da 10               19957		.byte	16
000039db 01               19958		.byte	1
000039dc 00000000         19959		.long	.LDW_5d9ca08
000039e0 00               19960		.byte	0
000039e1 00               19961		.byte	0
000039e2 016e             19962		.byte	1,110
                          19963	
                          19964	.LDW_5df08f8:
000039e4 06               19965		.byte	6
000039e5 626173654c656e67 19966		.strz	"baseLength"
000039ed 746800          
000039f0 c21e             19967		.byte	194,30
000039f2 10               19968		.byte	16
000039f3 01               19969		.byte	1
000039f4 00000000         19970		.long	.LDW_5d9c170
000039f8 00               19971		.byte	0
000039f9 00               19972		.byte	0
000039fa 016f             19973		.byte	1,111
                          19974	
000039fc 00               19975		.byte	0
                          19976	
000039fd 00               19977		.byte	0
                          19978	
                          19979	.LDW_5dadf90:

                                   Fri Apr 10 08:32:15 2020           Page 358
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
000039fe 16               19980		.byte	22
000039ff 46626c4d656d426c 19981		.strz	"FblMemBlockVerify"
00003a07 6f636b5665726966
00003a0f 7900            
00003a11 9c1f             19982		.byte	156,31
00003a13 0f               19983		.byte	15
00003a14 01               19984		.byte	1
00003a15 00000000         19985		.long	.LDW_4aea750
00003a19 00000000         19986		.long	FblMemBlockVerify
00003a1d 00000000         19987		.long	__ghs_eofn_FblMemBlockVerify
00003a21 0151             19988		.byte	1,81
00003a23 808080800f       19989		.byte	128,128,128,128,15
00003a28 08               19990		.byte	8
00003a29 00               19991		.byte	0
00003a2a 18               19992		.byte	24
00003a2b 00               19993		.byte	0
00003a2c 00               19994		.byte	0
00003a2d 00               19995		.byte	0
00003a2e 01               19996		.byte	1
00003a2f 01               19997		.byte	1
00003a30 00               19998		.byte	0
00003a31 01               19999		.byte	1
                          20000	
                          20001		.section	.debug_frame
                          20002	.LDW_5ec5838:
00000420 00000014         20003		.long	.LDW_unq_50-.LDW_unq_4f
                          20004	.LDW_unq_4f:
00000424 00000000         20005		.long	.LDW_5d27e08
00000428 00000000         20006		.long	FblMemBlockVerify
0000042c 00000094         20007		.long	__ghs_eofn_FblMemBlockVerify-FblMemBlockVerify
00000430 01               20008		.byte	1
00000431 00000000         20009		.long	.LDW78
00000435 00               20010		.byte	0
00000436 00               20011		.byte	0
00000437 00               20012		.byte	0
                          20013	.LDW_unq_50:
                          20014		.section	.debug_line
0000119e 000502           20015		.byte	0,5,2
000011a1 00000000         20016		.long	FblMemBlockVerify
000011a5 06               20017		.byte	6
000011a6 03               20018		.byte	3
000011a7 9d1f             20019		.byte	157,31
000011a9 02               20020		.byte	2
000011aa 00               20021		.byte	0
000011ab 01               20022		.byte	1
000011ac 03               20023		.byte	3
000011ad 12               20024		.byte	18
000011ae 02               20025		.byte	2
000011af 10               20026		.byte	16
000011b0 01               20027		.byte	1
000011b1 13               20028		.byte	19
000011b2 15               20029		.byte	21
000011b3 000502           20030		.byte	0,5,2
000011b6 00000000         20031		.long	.LDWlin145
000011ba 0b               20032		.byte	11
000011bb 0b               20033		.byte	11
000011bc 000502           20034		.byte	0,5,2
000011bf 00000000         20035		.long	.LDWlin146

                                   Fri Apr 10 08:32:15 2020           Page 359
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
000011c3 0b               20036		.byte	11
000011c4 0c               20037		.byte	12
000011c5 03               20038		.byte	3
000011c6 05               20039		.byte	5
000011c7 02               20040		.byte	2
000011c8 00               20041		.byte	0
000011c9 01               20042		.byte	1
000011ca 000502           20043		.byte	0,5,2
000011cd 00000000         20044		.long	.LDWlin147
000011d1 0b               20045		.byte	11
000011d2 0d               20046		.byte	13
000011d3 03               20047		.byte	3
000011d4 0f               20048		.byte	15
000011d5 02               20049		.byte	2
000011d6 0c               20050		.byte	12
000011d7 01               20051		.byte	1
000011d8 1c               20052		.byte	28
000011d9 1c               20053		.byte	28
000011da 03               20054		.byte	3
000011db 05               20055		.byte	5
000011dc 02               20056		.byte	2
000011dd 04               20057		.byte	4
000011de 01               20058		.byte	1
000011df 45               20059		.byte	69
000011e0 03               20060		.byte	3
000011e1 05               20061		.byte	5
000011e2 02               20062		.byte	2
000011e3 0a               20063		.byte	10
000011e4 01               20064		.byte	1
000011e5 23               20065		.byte	35
000011e6 000502           20066		.byte	0,5,2
000011e9 00000000         20067		.long	.LDWlin148
000011ed 0b               20068		.byte	11
000011ee 0b               20069		.byte	11
000011ef 000502           20070		.byte	0,5,2
000011f2 00000000         20071		.long	.LDWlin149
000011f6 0b               20072		.byte	11
000011f7 02               20073		.byte	2
000011f8 00               20074		.byte	0
000011f9 0b               20075		.byte	11
000011fa 02               20076		.byte	2
000011fb 00               20077		.byte	0
000011fc 03               20078		.byte	3
000011fd 0d               20079		.byte	13
000011fe 02               20080		.byte	2
000011ff 00               20081		.byte	0
00001200 01               20082		.byte	1
00001201 02               20083		.byte	2
00001202 00               20084		.byte	0
00001203 0c               20085		.byte	12
00001204 0b               20086		.byte	11
00001205 0c               20087		.byte	12
00001206 4b               20088		.byte	75
00001207 02               20089		.byte	2
00001208 00               20090		.byte	0
00001209 0c               20091		.byte	12

                                   Fri Apr 10 08:32:15 2020           Page 360
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
0000120a 000502           20092		.byte	0,5,2
0000120d 00000000         20093		.long	.LDWlin150
00001211 0b               20094		.byte	11
00001212 0c               20095		.byte	12
00001213 13               20096		.byte	19
00001214 02               20097		.byte	2
00001215 00               20098		.byte	0
00001216 0c               20099		.byte	12
00001217 06               20100		.byte	6
00001218 02               20101		.byte	2
00001219 02               20102		.byte	2
0000121a 02               20103		.byte	2
0000121b 0c               20104		.byte	12
0000121c 000101           20105		.byte	0,1,1
                          20106		.section	.debug_info
                          20107	.LDW_5df0848:
00003a32 11               20108		.byte	17
00003a33 7665726966794461 20109		.strz	"verifyData"
00003a3b 746100          
00003a3e 9c1f             20110		.byte	156,31
00003a40 5f               20111		.byte	95
00003a41 01               20112		.byte	1
00003a42 00000000         20113		.long	.LDW_5dbf260
00003a46 00               20114		.byte	0
00003a47 016c             20115		.byte	1,108
                          20116	
                          20117	.LDW_5df0950:
00003a49 11               20118		.byte	17
00003a4a 7665726966795265 20119		.strz	"verifyResult"
00003a52 73756c7400      
00003a57 9d1f             20120		.byte	157,31
00003a59 38               20121		.byte	56
00003a5a 01               20122		.byte	1
00003a5b 00000000         20123		.long	.LDW_5dbecb0
00003a5f 00               20124		.byte	0
00003a60 016e             20125		.byte	1,110
                          20126	
                          20127	.LDW_5df17e0:
00003a62 1f               20128		.byte	31
00003a63 00000000         20129		.long	.LDW68
00003a67 00000000         20130		.long	.LDW78
                          20131	
                          20132	.LDW_5df0b08:
00003a6b 06               20133		.byte	6
00003a6c 72657456616c00   20134		.strz	"retVal"
00003a73 9f1f             20135		.byte	159,31
00003a75 12               20136		.byte	18
00003a76 01               20137		.byte	1
00003a77 00000000         20138		.long	.LDW_4aea750
00003a7b 00               20139		.byte	0
00003a7c 00               20140		.byte	0
00003a7d 016f             20141		.byte	1,111
                          20142	
                          20143	.LDW_5df0bb8:
00003a7f 06               20144		.byte	6
00003a80 6c6f63616c526573 20145		.strz	"localResult"
00003a88 756c7400        
00003a8c a01f             20146		.byte	160,31
00003a8e 18               20147		.byte	24

                                   Fri Apr 10 08:32:15 2020           Page 361
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
00003a8f 01               20148		.byte	1
00003a90 00000000         20149		.long	.LDW_5df0798
00003a94 00               20150		.byte	0
00003a95 00               20151		.byte	0
00003a96 016d             20152		.byte	1,109
                          20153	
                          20154	.LDW_5df1298:
00003a98 06               20155		.byte	6
00003a99 6c6173745365676d 20156		.strz	"lastSegment"
00003aa1 656e7400        
00003aa5 a41f             20157		.byte	164,31
00003aa7 3c               20158		.byte	60
00003aa8 01               20159		.byte	1
00003aa9 00000000         20160		.long	.LDW_5dbee38
00003aad 00               20161		.byte	0
00003aae 00               20162		.byte	0
00003aaf 0157             20163		.byte	1,87
                          20164	
00003ab1 00               20165		.byte	0
                          20166	
00003ab2 00               20167		.byte	0
                          20168	
                          20169	.LDW_5dae450:
00003ab3 16               20170		.byte	22
00003ab4 46626c4d656d5365 20171		.strz	"FblMemSegmentStartIndication"
00003abc 676d656e74537461
00003ac4 7274496e64696361
00003acc 74696f6e00      
00003ad1 9820             20172		.byte	152,32
00003ad3 0f               20173		.byte	15
00003ad4 01               20174		.byte	1
00003ad5 00000000         20175		.long	.LDW_4aea750
00003ad9 00000000         20176		.long	FblMemSegmentStartIndication
00003add 00000000         20177		.long	__ghs_eofn_FblMemSegmentStartIndication
00003ae1 0151             20178		.byte	1,81
00003ae3 808080c00f       20179		.byte	128,128,128,192,15
00003ae8 0c               20180		.byte	12
00003ae9 00               20181		.byte	0
00003aea 20               20182		.byte	32
00003aeb 00               20183		.byte	0
00003aec 00               20184		.byte	0
00003aed 00               20185		.byte	0
00003aee 01               20186		.byte	1
00003aef 01               20187		.byte	1
00003af0 00               20188		.byte	0
00003af1 01               20189		.byte	1
                          20190	
                          20191		.section	.debug_frame
                          20192	.LDW_5ec58b8:
00000438 00000014         20193		.long	.LDW_unq_52-.LDW_unq_51
                          20194	.LDW_unq_51:
0000043c 00000000         20195		.long	.LDW_5d27e08
00000440 00000000         20196		.long	FblMemSegmentStartIndication
00000444 000000fa         20197		.long	__ghs_eofn_FblMemSegmentStartIndication-FblMemSegmentStartIndication
00000448 01               20198		.byte	1
00000449 00000000         20199		.long	.LDW98
0000044d 00               20200		.byte	0
0000044e 00               20201		.byte	0
0000044f 00               20202		.byte	0
                          20203	.LDW_unq_52:

                                   Fri Apr 10 08:32:15 2020           Page 362
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          20204		.section	.debug_line
0000121f 000502           20205		.byte	0,5,2
00001222 00000000         20206		.long	FblMemSegmentStartIndication
00001226 06               20207		.byte	6
00001227 03               20208		.byte	3
00001228 9820             20209		.byte	152,32
0000122a 02               20210		.byte	2
0000122b 00               20211		.byte	0
0000122c 01               20212		.byte	1
0000122d 03               20213		.byte	3
0000122e 0b               20214		.byte	11
0000122f 02               20215		.byte	2
00001230 0e               20216		.byte	14
00001231 01               20217		.byte	1
00001232 03               20218		.byte	3
00001233 06               20219		.byte	6
00001234 02               20220		.byte	2
00001235 04               20221		.byte	4
00001236 01               20222		.byte	1
00001237 03               20223		.byte	3
00001238 04               20224		.byte	4
00001239 02               20225		.byte	2
0000123a 08               20226		.byte	8
0000123b 01               20227		.byte	1
0000123c 000502           20228		.byte	0,5,2
0000123f 00000000         20229		.long	.LDWlin151
00001243 0b               20230		.byte	11
00001244 0b               20231		.byte	11
00001245 000502           20232		.byte	0,5,2
00001248 00000000         20233		.long	.LDWlin152
0000124c 0b               20234		.byte	11
0000124d 0c               20235		.byte	12
0000124e 000502           20236		.byte	0,5,2
00001251 00000000         20237		.long	.LDWlin153
00001255 0b               20238		.byte	11
00001256 0c               20239		.byte	12
00001257 000502           20240		.byte	0,5,2
0000125a 00000000         20241		.long	.LDWlin154
0000125e 0b               20242		.byte	11
0000125f 0d               20243		.byte	13
00001260 03               20244		.byte	3
00001261 19               20245		.byte	25
00001262 02               20246		.byte	2
00001263 00               20247		.byte	0
00001264 01               20248		.byte	1
00001265 000502           20249		.byte	0,5,2
00001268 00000000         20250		.long	.LDWlin155
0000126c 0b               20251		.byte	11
0000126d 03               20252		.byte	3
0000126e 0f               20253		.byte	15
0000126f 02               20254		.byte	2
00001270 00               20255		.byte	0
00001271 01               20256		.byte	1
00001272 000502           20257		.byte	0,5,2
00001275 00000000         20258		.long	.LDWlin156
00001279 0c               20259		.byte	12

                                   Fri Apr 10 08:32:15 2020           Page 363
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
0000127a 02               20260		.byte	2
0000127b 00               20261		.byte	0
0000127c 03               20262		.byte	3
0000127d 2f               20263		.byte	47
0000127e 02               20264		.byte	2
0000127f 00               20265		.byte	0
00001280 01               20266		.byte	1
00001281 0b               20267		.byte	11
00001282 0c               20268		.byte	12
00001283 000502           20269		.byte	0,5,2
00001286 00000000         20270		.long	.LDWlin157
0000128a 0b               20271		.byte	11
0000128b 0c               20272		.byte	12
0000128c 000502           20273		.byte	0,5,2
0000128f 00000000         20274		.long	.LDWlin158
00001293 0b               20275		.byte	11
00001294 0c               20276		.byte	12
00001295 13               20277		.byte	19
00001296 000502           20278		.byte	0,5,2
00001299 00000000         20279		.long	.LDWlin159
0000129d 0b               20280		.byte	11
0000129e 0c               20281		.byte	12
0000129f 0c               20282		.byte	12
000012a0 3b               20283		.byte	59
000012a1 13               20284		.byte	19
000012a2 02               20285		.byte	2
000012a3 00               20286		.byte	0
000012a4 0d               20287		.byte	13
000012a5 000502           20288		.byte	0,5,2
000012a8 00000000         20289		.long	.LDWlin160
000012ac 0d               20290		.byte	13
000012ad 000502           20291		.byte	0,5,2
000012b0 00000000         20292		.long	.LDWlin161
000012b4 0b               20293		.byte	11
000012b5 000502           20294		.byte	0,5,2
000012b8 00000000         20295		.long	.LDWlin162
000012bc 03               20296		.byte	3
000012bd 05               20297		.byte	5
000012be 02               20298		.byte	2
000012bf 00               20299		.byte	0
000012c0 01               20300		.byte	1
000012c1 55               20301		.byte	85
000012c2 000502           20302		.byte	0,5,2
000012c5 00000000         20303		.long	.LDWlin163
000012c9 0b               20304		.byte	11
000012ca 0c               20305		.byte	12
000012cb 14               20306		.byte	20
000012cc 03               20307		.byte	3
000012cd 09               20308		.byte	9
000012ce 02               20309		.byte	2
000012cf 08               20310		.byte	8
000012d0 01               20311		.byte	1
000012d1 000502           20312		.byte	0,5,2
000012d4 00000000         20313		.long	.LDWlin164
000012d8 0c               20314		.byte	12
000012d9 02               20315		.byte	2

                                   Fri Apr 10 08:32:15 2020           Page 364
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
000012da 00               20316		.byte	0
000012db 0b               20317		.byte	11
000012dc 02               20318		.byte	2
000012dd 00               20319		.byte	0
000012de 0b               20320		.byte	11
000012df 02               20321		.byte	2
000012e0 00               20322		.byte	0
000012e1 03               20323		.byte	3
000012e2 0c               20324		.byte	12
000012e3 02               20325		.byte	2
000012e4 00               20326		.byte	0
000012e5 01               20327		.byte	1
000012e6 02               20328		.byte	2
000012e7 00               20329		.byte	0
000012e8 0c               20330		.byte	12
000012e9 0b               20331		.byte	11
000012ea 0c               20332		.byte	12
000012eb 35               20333		.byte	53
000012ec 1b               20334		.byte	27
000012ed 03               20335		.byte	3
000012ee 06               20336		.byte	6
000012ef 02               20337		.byte	2
000012f0 02               20338		.byte	2
000012f1 01               20339		.byte	1
000012f2 03               20340		.byte	3
000012f3 04               20341		.byte	4
000012f4 02               20342		.byte	2
000012f5 04               20343		.byte	4
000012f6 01               20344		.byte	1
000012f7 03               20345		.byte	3
000012f8 07               20346		.byte	7
000012f9 02               20347		.byte	2
000012fa 02               20348		.byte	2
000012fb 01               20349		.byte	1
000012fc 23               20350		.byte	35
000012fd 1d               20351		.byte	29
000012fe 2b               20352		.byte	43
000012ff 02               20353		.byte	2
00001300 00               20354		.byte	0
00001301 0c               20355		.byte	12
00001302 06               20356		.byte	6
00001303 02               20357		.byte	2
00001304 02               20358		.byte	2
00001305 02               20359		.byte	2
00001306 0c               20360		.byte	12
00001307 000101           20361		.byte	0,1,1
                          20362		.section	.debug_info
                          20363	.LDW_5df1348:
00003af2 11               20364		.byte	17
00003af3 7365676d656e7400 20365		.strz	"segment"
00003afb 9820             20366		.byte	152,32
00003afd 66               20367		.byte	102
00003afe 01               20368		.byte	1
00003aff 00000000         20369		.long	.LDW_5dbf228
00003b03 00               20370		.byte	0
00003b04 016b             20371		.byte	1,107

                                   Fri Apr 10 08:32:15 2020           Page 365
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          20372	
                          20373	.LDW_5df1870:
00003b06 1f               20374		.byte	31
00003b07 00000000         20375		.long	.LDW88
00003b0b 00000000         20376		.long	.LDW98
                          20377	
                          20378	.LDW_5df11e8:
00003b0f 06               20379		.byte	6
00003b10 72657456616c00   20380		.strz	"retVal"
00003b17 9a20             20381		.byte	154,32
00003b19 16               20382		.byte	22
00003b1a 01               20383		.byte	1
00003b1b 00000000         20384		.long	.LDW_4aea750
00003b1f 00               20385		.byte	0
00003b20 00               20386		.byte	0
00003b21 016d             20387		.byte	1,109
                          20388	
                          20389	.LDW_5df1088:
00003b23 06               20390		.byte	6
00003b24 6261736541646472 20391		.strz	"baseAddress"
00003b2c 65737300        
00003b30 9c20             20392		.byte	156,32
00003b32 10               20393		.byte	16
00003b33 01               20394		.byte	1
00003b34 00000000         20395		.long	.LDW_5d9ca08
00003b38 00               20396		.byte	0
00003b39 00               20397		.byte	0
00003b3a 016e             20398		.byte	1,110
                          20399	
                          20400	.LDW_5df10e0:
00003b3c 06               20401		.byte	6
00003b3d 626173654c656e67 20402		.strz	"baseLength"
00003b45 746800          
00003b48 9d20             20403		.byte	157,32
00003b4a 10               20404		.byte	16
00003b4b 01               20405		.byte	1
00003b4c 00000000         20406		.long	.LDW_5d9c170
00003b50 00               20407		.byte	0
00003b51 00               20408		.byte	0
00003b52 016f             20409		.byte	1,111
                          20410	
00003b54 00               20411		.byte	0
                          20412	
00003b55 00               20413		.byte	0
                          20414	
                          20415	.LDW_5dae580:
00003b56 16               20416		.byte	22
00003b57 46626c4d656d5365 20417		.strz	"FblMemSegmentEndIndication"
00003b5f 676d656e74456e64
00003b67 496e646963617469
00003b6f 6f6e00          
00003b72 8122             20418		.byte	129,34
00003b74 0f               20419		.byte	15
00003b75 01               20420		.byte	1
00003b76 00000000         20421		.long	.LDW_4aea750
00003b7a 00000000         20422		.long	FblMemSegmentEndIndication
00003b7e 00000000         20423		.long	__ghs_eofn_FblMemSegmentEndIndication
00003b82 0151             20424		.byte	1,81
00003b84 808080c00f       20425		.byte	128,128,128,192,15
00003b89 0c               20426		.byte	12
00003b8a 00               20427		.byte	0

                                   Fri Apr 10 08:32:15 2020           Page 366
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
00003b8b 20               20428		.byte	32
00003b8c 00               20429		.byte	0
00003b8d 00               20430		.byte	0
00003b8e 00               20431		.byte	0
00003b8f 01               20432		.byte	1
00003b90 01               20433		.byte	1
00003b91 00               20434		.byte	0
00003b92 01               20435		.byte	1
                          20436	
                          20437		.section	.debug_frame
                          20438	.LDW_5ec5cb8:
00000450 00000014         20439		.long	.LDW_unq_54-.LDW_unq_53
                          20440	.LDW_unq_53:
00000454 00000000         20441		.long	.LDW_5d27e08
00000458 00000000         20442		.long	FblMemSegmentEndIndication
0000045c 000000cc         20443		.long	__ghs_eofn_FblMemSegmentEndIndication-FblMemSegmentEndIndication
00000460 01               20444		.byte	1
00000461 00000000         20445		.long	.LDW19
00000465 00               20446		.byte	0
00000466 00               20447		.byte	0
00000467 00               20448		.byte	0
                          20449	.LDW_unq_54:
                          20450		.section	.debug_line
0000130a 000502           20451		.byte	0,5,2
0000130d 00000000         20452		.long	FblMemSegmentEndIndication
00001311 06               20453		.byte	6
00001312 03               20454		.byte	3
00001313 8122             20455		.byte	129,34
00001315 02               20456		.byte	2
00001316 00               20457		.byte	0
00001317 01               20458		.byte	1
00001318 03               20459		.byte	3
00001319 0b               20460		.byte	11
0000131a 02               20461		.byte	2
0000131b 0e               20462		.byte	14
0000131c 01               20463		.byte	1
0000131d 15               20464		.byte	21
0000131e 000502           20465		.byte	0,5,2
00001321 00000000         20466		.long	.LDWlin165
00001325 0b               20467		.byte	11
00001326 0b               20468		.byte	11
00001327 000502           20469		.byte	0,5,2
0000132a 00000000         20470		.long	.LDWlin166
0000132e 0b               20471		.byte	11
0000132f 0c               20472		.byte	12
00001330 03               20473		.byte	3
00001331 04               20474		.byte	4
00001332 02               20475		.byte	2
00001333 00               20476		.byte	0
00001334 01               20477		.byte	1
00001335 000502           20478		.byte	0,5,2
00001338 00000000         20479		.long	.LDWlin167
0000133c 03               20480		.byte	3
0000133d 0c               20481		.byte	12
0000133e 02               20482		.byte	2
0000133f 00               20483		.byte	0

                                   Fri Apr 10 08:32:15 2020           Page 367
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
00001340 01               20484		.byte	1
00001341 000502           20485		.byte	0,5,2
00001344 00000000         20486		.long	.LDWlin168
00001348 0b               20487		.byte	11
00001349 03               20488		.byte	3
0000134a 20               20489		.byte	32
0000134b 02               20490		.byte	2
0000134c 00               20491		.byte	0
0000134d 01               20492		.byte	1
0000134e 000502           20493		.byte	0,5,2
00001351 00000000         20494		.long	.LDWlin169
00001355 03               20495		.byte	3
00001356 0c               20496		.byte	12
00001357 02               20497		.byte	2
00001358 00               20498		.byte	0
00001359 01               20499		.byte	1
0000135a 000502           20500		.byte	0,5,2
0000135d 00000000         20501		.long	.LDWlin170
00001361 0c               20502		.byte	12
00001362 0c               20503		.byte	12
00001363 1b               20504		.byte	27
00001364 02               20505		.byte	2
00001365 00               20506		.byte	0
00001366 0b               20507		.byte	11
00001367 02               20508		.byte	2
00001368 00               20509		.byte	0
00001369 03               20510		.byte	3
0000136a 07               20511		.byte	7
0000136b 02               20512		.byte	2
0000136c 00               20513		.byte	0
0000136d 01               20514		.byte	1
0000136e 000502           20515		.byte	0,5,2
00001371 00000000         20516		.long	.LDWlin171
00001375 0d               20517		.byte	13
00001376 000502           20518		.byte	0,5,2
00001379 00000000         20519		.long	.LDWlin172
0000137d 0b               20520		.byte	11
0000137e 2c               20521		.byte	44
0000137f 000502           20522		.byte	0,5,2
00001382 00000000         20523		.long	.LDWlin173
00001386 0b               20524		.byte	11
00001387 0d               20525		.byte	13
00001388 03               20526		.byte	3
00001389 0b               20527		.byte	11
0000138a 02               20528		.byte	2
0000138b 00               20529		.byte	0
0000138c 01               20530		.byte	1
0000138d 000502           20531		.byte	0,5,2
00001390 00000000         20532		.long	.LDWlin174
00001394 0c               20533		.byte	12
00001395 0b               20534		.byte	11
00001396 13               20535		.byte	19
00001397 02               20536		.byte	2
00001398 00               20537		.byte	0
00001399 03               20538		.byte	3
0000139a 10               20539		.byte	16

                                   Fri Apr 10 08:32:15 2020           Page 368
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
0000139b 02               20540		.byte	2
0000139c 00               20541		.byte	0
0000139d 01               20542		.byte	1
0000139e 03               20543		.byte	3
0000139f 05               20544		.byte	5
000013a0 02               20545		.byte	2
000013a1 06               20546		.byte	6
000013a2 01               20547		.byte	1
000013a3 53               20548		.byte	83
000013a4 1b               20549		.byte	27
000013a5 1b               20550		.byte	27
000013a6 1b               20551		.byte	27
000013a7 03               20552		.byte	3
000013a8 06               20553		.byte	6
000013a9 02               20554		.byte	2
000013aa 04               20555		.byte	4
000013ab 01               20556		.byte	1
000013ac 02               20557		.byte	2
000013ad 00               20558		.byte	0
000013ae 03               20559		.byte	3
000013af 06               20560		.byte	6
000013b0 02               20561		.byte	2
000013b1 00               20562		.byte	0
000013b2 01               20563		.byte	1
000013b3 03               20564		.byte	3
000013b4 08               20565		.byte	8
000013b5 02               20566		.byte	2
000013b6 0a               20567		.byte	10
000013b7 01               20568		.byte	1
000013b8 000502           20569		.byte	0,5,2
000013bb 00000000         20570		.long	.LDWlin175
000013bf 0c               20571		.byte	12
000013c0 02               20572		.byte	2
000013c1 00               20573		.byte	0
000013c2 0d               20574		.byte	13
000013c3 000502           20575		.byte	0,5,2
000013c6 00000000         20576		.long	.LDWlin176
000013ca 0b               20577		.byte	11
000013cb 0c               20578		.byte	12
000013cc 33               20579		.byte	51
000013cd 02               20580		.byte	2
000013ce 00               20581		.byte	0
000013cf 0c               20582		.byte	12
000013d0 06               20583		.byte	6
000013d1 02               20584		.byte	2
000013d2 02               20585		.byte	2
000013d3 02               20586		.byte	2
000013d4 0c               20587		.byte	12
000013d5 000101           20588		.byte	0,1,1
                          20589		.section	.debug_info
                          20590	.LDW_5df1138:
00003b93 11               20591		.byte	17
00003b94 77726974654c656e 20592		.strz	"writeLength"
00003b9c 67746800        
00003ba0 8122             20593		.byte	129,34
00003ba2 56               20594		.byte	86
00003ba3 01               20595		.byte	1

                                   Fri Apr 10 08:32:15 2020           Page 369
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
00003ba4 00000000         20596		.long	.LDW_5dbf340
00003ba8 00               20597		.byte	0
00003ba9 016d             20598		.byte	1,109
                          20599	
                          20600	.LDW_5df1ab0:
00003bab 1f               20601		.byte	31
00003bac 00000000         20602		.long	.LDW09
00003bb0 00000000         20603		.long	.LDW19
                          20604	
                          20605	.LDW_5df13a0:
00003bb4 06               20606		.byte	6
00003bb5 72657456616c00   20607		.strz	"retVal"
00003bbc 8322             20608		.byte	131,34
00003bbe 12               20609		.byte	18
00003bbf 01               20610		.byte	1
00003bc0 00000000         20611		.long	.LDW_4aea750
00003bc4 00               20612		.byte	0
00003bc5 00               20613		.byte	0
00003bc6 016e             20614		.byte	1,110
                          20615	
                          20616	.LDW_5df1450:
00003bc8 07               20617		.byte	7
00003bc9 6163746976654a6f 20618		.strz	"activeJob"
00003bd1 6200            
00003bd3 8722             20619		.byte	135,34
00003bd5 2f               20620		.byte	47
00003bd6 01               20621		.byte	1
00003bd7 00000000         20622		.long	.LDW_4aac688
00003bdb 00               20623		.byte	0
00003bdc 00               20624		.byte	0
                          20625	
                          20626	.LDW_5e1a178:
00003bdd 06               20627		.byte	6
00003bde 6163746976655365 20628		.strz	"activeSegment"
00003be6 676d656e7400    
00003bec 8a22             20629		.byte	138,34
00003bee 3c               20630		.byte	60
00003bef 01               20631		.byte	1
00003bf0 00000000         20632		.long	.LDW_5dbee38
00003bf4 00               20633		.byte	0
00003bf5 00               20634		.byte	0
00003bf6 0156             20635		.byte	1,86
                          20636	
00003bf8 00               20637		.byte	0
                          20638	
00003bf9 00               20639		.byte	0
                          20640	
                          20641	.LDW_5dae288:
00003bfa 16               20642		.byte	22
00003bfb 46626c4d656d4461 20643		.strz	"FblMemDataIndication"
00003c03 7461496e64696361
00003c0b 74696f6e00      
00003c10 c323             20644		.byte	195,35
00003c12 0f               20645		.byte	15
00003c13 01               20646		.byte	1
00003c14 00000000         20647		.long	.LDW_4aea750
00003c18 00000000         20648		.long	FblMemDataIndication
00003c1c 00000000         20649		.long	__ghs_eofn_FblMemDataIndication
00003c20 0151             20650		.byte	1,81
00003c22 808080800f       20651		.byte	128,128,128,128,15

                                   Fri Apr 10 08:32:15 2020           Page 370
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
00003c27 08               20652		.byte	8
00003c28 00               20653		.byte	0
00003c29 18               20654		.byte	24
00003c2a 00               20655		.byte	0
00003c2b 00               20656		.byte	0
00003c2c 00               20657		.byte	0
00003c2d 01               20658		.byte	1
00003c2e 01               20659		.byte	1
00003c2f 00               20660		.byte	0
00003c30 01               20661		.byte	1
                          20662	
                          20663		.section	.debug_frame
                          20664	.LDW_5ec5d38:
00000468 00000014         20665		.long	.LDW_unq_56-.LDW_unq_55
                          20666	.LDW_unq_55:
0000046c 00000000         20667		.long	.LDW_5d27e08
00000470 00000000         20668		.long	FblMemDataIndication
00000474 000000b2         20669		.long	__ghs_eofn_FblMemDataIndication-FblMemDataIndication
00000478 01               20670		.byte	1
00000479 00000000         20671		.long	.LDW39
0000047d 00               20672		.byte	0
0000047e 00               20673		.byte	0
0000047f 00               20674		.byte	0
                          20675	.LDW_unq_56:
                          20676		.section	.debug_line
000013d8 000502           20677		.byte	0,5,2
000013db 00000000         20678		.long	FblMemDataIndication
000013df 06               20679		.byte	6
000013e0 03               20680		.byte	3
000013e1 c323             20681		.byte	195,35
000013e3 02               20682		.byte	2
000013e4 00               20683		.byte	0
000013e5 01               20684		.byte	1
000013e6 03               20685		.byte	3
000013e7 10               20686		.byte	16
000013e8 02               20687		.byte	2
000013e9 12               20688		.byte	18
000013ea 01               20689		.byte	1
000013eb 000502           20690		.byte	0,5,2
000013ee 00000000         20691		.long	.LDWlin177
000013f2 0b               20692		.byte	11
000013f3 0b               20693		.byte	11
000013f4 000502           20694		.byte	0,5,2
000013f7 00000000         20695		.long	.LDWlin178
000013fb 0b               20696		.byte	11
000013fc 0c               20697		.byte	12
000013fd 03               20698		.byte	3
000013fe 29               20699		.byte	41
000013ff 02               20700		.byte	2
00001400 00               20701		.byte	0
00001401 01               20702		.byte	1
00001402 000502           20703		.byte	0,5,2
00001405 00000000         20704		.long	.LDWlin179
00001409 0c               20705		.byte	12
0000140a 0b               20706		.byte	11
0000140b 000502           20707		.byte	0,5,2

                                   Fri Apr 10 08:32:15 2020           Page 371
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
0000140e 00000000         20708		.long	.LDWlin180
00001412 0b               20709		.byte	11
00001413 02               20710		.byte	2
00001414 00               20711		.byte	0
00001415 03               20712		.byte	3
00001416 04               20713		.byte	4
00001417 02               20714		.byte	2
00001418 00               20715		.byte	0
00001419 01               20716		.byte	1
0000141a 02               20717		.byte	2
0000141b 00               20718		.byte	0
0000141c 0c               20719		.byte	12
0000141d 0b               20720		.byte	11
0000141e 03               20721		.byte	3
0000141f 06               20722		.byte	6
00001420 02               20723		.byte	2
00001421 00               20724		.byte	0
00001422 01               20725		.byte	1
00001423 000502           20726		.byte	0,5,2
00001426 00000000         20727		.long	.LDWlin181
0000142a 03               20728		.byte	3
0000142b 04               20729		.byte	4
0000142c 02               20730		.byte	2
0000142d 00               20731		.byte	0
0000142e 01               20732		.byte	1
0000142f 000502           20733		.byte	0,5,2
00001432 00000000         20734		.long	.LDWlin182
00001436 0b               20735		.byte	11
00001437 000502           20736		.byte	0,5,2
0000143a 00000000         20737		.long	.LDWlin183
0000143e 0b               20738		.byte	11
0000143f 03               20739		.byte	3
00001440 09               20740		.byte	9
00001441 02               20741		.byte	2
00001442 00               20742		.byte	0
00001443 01               20743		.byte	1
00001444 000502           20744		.byte	0,5,2
00001447 00000000         20745		.long	.LDWlin184
0000144b 03               20746		.byte	3
0000144c 04               20747		.byte	4
0000144d 02               20748		.byte	2
0000144e 00               20749		.byte	0
0000144f 01               20750		.byte	1
00001450 02               20751		.byte	2
00001451 08               20752		.byte	8
00001452 000502           20753		.byte	0,5,2
00001455 00000000         20754		.long	.LDWlin185
00001459 0b               20755		.byte	11
0000145a 2b               20756		.byte	43
0000145b 000502           20757		.byte	0,5,2
0000145e 00000000         20758		.long	.LDWlin186
00001462 0b               20759		.byte	11
00001463 0d               20760		.byte	13
00001464 03               20761		.byte	3
00001465 05               20762		.byte	5
00001466 02               20763		.byte	2

                                   Fri Apr 10 08:32:15 2020           Page 372
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
00001467 00               20764		.byte	0
00001468 01               20765		.byte	1
00001469 03               20766		.byte	3
0000146a 04               20767		.byte	4
0000146b 02               20768		.byte	2
0000146c 0c               20769		.byte	12
0000146d 01               20770		.byte	1
0000146e 000502           20771		.byte	0,5,2
00001471 00000000         20772		.long	.LDWlin187
00001475 0b               20773		.byte	11
00001476 0b               20774		.byte	11
00001477 03               20775		.byte	3
00001478 0e               20776		.byte	14
00001479 02               20777		.byte	2
0000147a 00               20778		.byte	0
0000147b 01               20779		.byte	1
0000147c 0c               20780		.byte	12
0000147d 000502           20781		.byte	0,5,2
00001480 00000000         20782		.long	.LDWlin188
00001484 0d               20783		.byte	13
00001485 23               20784		.byte	35
00001486 02               20785		.byte	2
00001487 00               20786		.byte	0
00001488 0d               20787		.byte	13
00001489 02               20788		.byte	2
0000148a 00               20789		.byte	0
0000148b 0b               20790		.byte	11
0000148c 02               20791		.byte	2
0000148d 00               20792		.byte	0
0000148e 03               20793		.byte	3
0000148f 07               20794		.byte	7
00001490 02               20795		.byte	2
00001491 00               20796		.byte	0
00001492 01               20797		.byte	1
00001493 000502           20798		.byte	0,5,2
00001496 00000000         20799		.long	.LDWlin189
0000149a 0c               20800		.byte	12
0000149b 02               20801		.byte	2
0000149c 00               20802		.byte	0
0000149d 0c               20803		.byte	12
0000149e 000502           20804		.byte	0,5,2
000014a1 00000000         20805		.long	.LDWlin190
000014a5 0b               20806		.byte	11
000014a6 03               20807		.byte	3
000014a7 0b               20808		.byte	11
000014a8 02               20809		.byte	2
000014a9 00               20810		.byte	0
000014aa 01               20811		.byte	1
000014ab 34               20812		.byte	52
000014ac 02               20813		.byte	2
000014ad 00               20814		.byte	0
000014ae 0c               20815		.byte	12
000014af 06               20816		.byte	6
000014b0 02               20817		.byte	2
000014b1 02               20818		.byte	2
000014b2 02               20819		.byte	2

                                   Fri Apr 10 08:32:15 2020           Page 373
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
000014b3 0c               20820		.byte	12
000014b4 000101           20821		.byte	0,1,1
                          20822		.section	.debug_info
                          20823	.LDW_5e1a598:
00003c31 11               20824		.byte	17
00003c32 62756666657200   20825		.strz	"buffer"
00003c39 c323             20826		.byte	195,35
00003c3b 39               20827		.byte	57
00003c3c 01               20828		.byte	1
00003c3d 00000000         20829		.long	.LDW_5d9ce80
00003c41 00               20830		.byte	0
00003c42 016c             20831		.byte	1,108
                          20832	
                          20833	.LDW_5e19d58:
00003c44 11               20834		.byte	17
00003c45 6f666673657400   20835		.strz	"offset"
00003c4c c323             20836		.byte	195,35
00003c4e 4c               20837		.byte	76
00003c4f 01               20838		.byte	1
00003c50 00000000         20839		.long	.LDW_5d9c170
00003c54 00               20840		.byte	0
00003c55 016f             20841		.byte	1,111
                          20842	
                          20843	.LDW_5e19f10:
00003c57 11               20844		.byte	17
00003c58 6c656e67746800   20845		.strz	"length"
00003c5f c323             20846		.byte	195,35
00003c61 5f               20847		.byte	95
00003c62 01               20848		.byte	1
00003c63 00000000         20849		.long	.LDW_5d9c170
00003c67 00               20850		.byte	0
00003c68 016d             20851		.byte	1,109
                          20852	
                          20853	.LDW_5df1900:
00003c6a 1f               20854		.byte	31
00003c6b 00000000         20855		.long	.LDW29
00003c6f 00000000         20856		.long	.LDW39
                          20857	
                          20858	.LDW_5e1a540:
00003c73 06               20859		.byte	6
00003c74 72657456616c00   20860		.strz	"retVal"
00003c7b c523             20861		.byte	197,35
00003c7d 12               20862		.byte	18
00003c7e 01               20863		.byte	1
00003c7f 00000000         20864		.long	.LDW_4aea750
00003c83 00               20865		.byte	0
00003c84 00               20866		.byte	0
00003c85 016f             20867		.byte	1,111
                          20868	
                          20869	.LDW_5e1a7a8:
00003c87 07               20870		.byte	7
00003c88 6163746976654a6f 20871		.strz	"activeJob"
00003c90 6200            
00003c92 c823             20872		.byte	200,35
00003c94 2f               20873		.byte	47
00003c95 01               20874		.byte	1
00003c96 00000000         20875		.long	.LDW_4aac688

                                   Fri Apr 10 08:32:15 2020           Page 374
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
00003c9a 00               20876		.byte	0
00003c9b 00               20877		.byte	0
                          20878	
00003c9c 00               20879		.byte	0
                          20880	
00003c9d 00               20881		.byte	0
                          20882	
                          20883	.LDW_5dae320:
00003c9e 15               20884		.byte	21
00003c9f 46626c4d656d5461 20885		.strz	"FblMemTask"
00003ca7 736b00          
00003caa f524             20886		.byte	245,36
00003cac 06               20887		.byte	6
00003cad 01               20888		.byte	1
00003cae 00000000         20889		.long	FblMemTask
00003cb2 00000000         20890		.long	__ghs_eofn_FblMemTask
00003cb6 0151             20891		.byte	1,81
00003cb8 03               20892		.byte	3
00003cb9 00               20893		.byte	0
00003cba 00               20894		.byte	0
00003cbb 00               20895		.byte	0
00003cbc 00               20896		.byte	0
00003cbd 00               20897		.byte	0
00003cbe 00               20898		.byte	0
00003cbf 01               20899		.byte	1
00003cc0 01               20900		.byte	1
00003cc1 00               20901		.byte	0
00003cc2 01               20902		.byte	1
                          20903	
                          20904		.section	.debug_frame
                          20905	.LDW_5ec5bb8:
00000480 00000014         20906		.long	.LDW_unq_58-.LDW_unq_57
                          20907	.LDW_unq_57:
00000484 00000000         20908		.long	.LDW_5d27e08
00000488 00000000         20909		.long	FblMemTask
0000048c 00000002         20910		.long	__ghs_eofn_FblMemTask-FblMemTask
00000490 01               20911		.byte	1
00000491 00000000         20912		.long	.LDW59
00000495 00               20913		.byte	0
00000496 00               20914		.byte	0
00000497 00               20915		.byte	0
                          20916	.LDW_unq_58:
                          20917		.section	.debug_line
000014b7 000502           20918		.byte	0,5,2
000014ba 00000000         20919		.long	FblMemTask
000014be 06               20920		.byte	6
000014bf 03               20921		.byte	3
000014c0 f624             20922		.byte	246,36
000014c2 02               20923		.byte	2
000014c3 00               20924		.byte	0
000014c4 01               20925		.byte	1
000014c5 02               20926		.byte	2
000014c6 02               20927		.byte	2
000014c7 000101           20928		.byte	0,1,1
                          20929		.section	.debug_info
                          20930	.LDW_5df1990:
00003cc3 1f               20931		.byte	31

                                   Fri Apr 10 08:32:15 2020           Page 375
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
00003cc4 00000000         20932		.long	.LDW49
00003cc8 00000000         20933		.long	.LDW59
                          20934	
00003ccc 00               20935		.byte	0
                          20936	
00003ccd 00               20937		.byte	0
                          20938	
                          20939	.LDW_5e2b398:
00003cce 15               20940		.byte	21
00003ccf 46626c4d656d466c 20941		.strz	"FblMemFlushInputData"
00003cd7 757368496e707574
00003cdf 4461746100      
00003ce4 8125             20942		.byte	129,37
00003ce6 06               20943		.byte	6
00003ce7 01               20944		.byte	1
00003ce8 00000000         20945		.long	FblMemFlushInputData
00003cec 00000000         20946		.long	__ghs_eofn_FblMemFlushInputData
00003cf0 0151             20947		.byte	1,81
00003cf2 03               20948		.byte	3
00003cf3 00               20949		.byte	0
00003cf4 00               20950		.byte	0
00003cf5 00               20951		.byte	0
00003cf6 00               20952		.byte	0
00003cf7 00               20953		.byte	0
00003cf8 00               20954		.byte	0
00003cf9 01               20955		.byte	1
00003cfa 01               20956		.byte	1
00003cfb 00               20957		.byte	0
00003cfc 01               20958		.byte	1
                          20959	
                          20960		.section	.debug_frame
                          20961	.LDW_5ec5ab8:
00000498 00000014         20962		.long	.LDW_unq_5a-.LDW_unq_59
                          20963	.LDW_unq_59:
0000049c 00000000         20964		.long	.LDW_5d27e08
000004a0 00000000         20965		.long	FblMemFlushInputData
000004a4 00000006         20966		.long	__ghs_eofn_FblMemFlushInputData-FblMemFlushInputData
000004a8 01               20967		.byte	1
000004a9 00000000         20968		.long	.LDW79
000004ad 00               20969		.byte	0
000004ae 00               20970		.byte	0
000004af 00               20971		.byte	0
                          20972	.LDW_unq_5a:
                          20973		.section	.debug_line
000014ca 000502           20974		.byte	0,5,2
000014cd 00000000         20975		.long	FblMemFlushInputData
000014d1 06               20976		.byte	6
000014d2 03               20977		.byte	3
000014d3 8325             20978		.byte	131,37
000014d5 02               20979		.byte	2
000014d6 00               20980		.byte	0
000014d7 01               20981		.byte	1
000014d8 000502           20982		.byte	0,5,2
000014db 00000000         20983		.long	__ghs_eofn_FblMemFlushInputData
000014df 0b               20984		.byte	11
000014e0 000101           20985		.byte	0,1,1
                          20986		.section	.debug_info
                          20987	.LDW_5df1810:

                                   Fri Apr 10 08:32:15 2020           Page 376
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
00003cfd 1f               20988		.byte	31
00003cfe 00000000         20989		.long	.LDW69
00003d02 00000000         20990		.long	.LDW79
                          20991	
00003d06 00               20992		.byte	0
                          20993	
00003d07 00               20994		.byte	0
                          20995	
                          20996	.LDW_5e2af70:
00003d08 15               20997		.byte	21
00003d09 46626c4d656d5265 20998		.strz	"FblMemResumeIndication"
00003d11 73756d65496e6469
00003d19 636174696f6e00  
00003d20 9225             20999		.byte	146,37
00003d22 06               21000		.byte	6
00003d23 01               21001		.byte	1
00003d24 00000000         21002		.long	FblMemResumeIndication
00003d28 00000000         21003		.long	__ghs_eofn_FblMemResumeIndication
00003d2c 0151             21004		.byte	1,81
00003d2e 03               21005		.byte	3
00003d2f 00               21006		.byte	0
00003d30 00               21007		.byte	0
00003d31 00               21008		.byte	0
00003d32 00               21009		.byte	0
00003d33 00               21010		.byte	0
00003d34 00               21011		.byte	0
00003d35 01               21012		.byte	1
00003d36 01               21013		.byte	1
00003d37 00               21014		.byte	0
00003d38 01               21015		.byte	1
                          21016	
                          21017		.section	.debug_frame
                          21018	.LDW_5ec5bf8:
000004b0 00000014         21019		.long	.LDW_unq_5c-.LDW_unq_5b
                          21020	.LDW_unq_5b:
000004b4 00000000         21021		.long	.LDW_5d27e08
000004b8 00000000         21022		.long	FblMemResumeIndication
000004bc 00000002         21023		.long	__ghs_eofn_FblMemResumeIndication-FblMemResumeIndication
000004c0 01               21024		.byte	1
000004c1 00000000         21025		.long	.LDW99
000004c5 00               21026		.byte	0
000004c6 00               21027		.byte	0
000004c7 00               21028		.byte	0
                          21029	.LDW_unq_5c:
                          21030		.section	.debug_line
000014e3 000502           21031		.byte	0,5,2
000014e6 00000000         21032		.long	FblMemResumeIndication
000014ea 06               21033		.byte	6
000014eb 03               21034		.byte	3
000014ec 9325             21035		.byte	147,37
000014ee 02               21036		.byte	2
000014ef 00               21037		.byte	0
000014f0 01               21038		.byte	1
000014f1 02               21039		.byte	2
000014f2 02               21040		.byte	2
000014f3 000101           21041		.byte	0,1,1
                          21042		.section	.debug_info
                          21043	.LDW_5df1600:

                                   Fri Apr 10 08:32:15 2020           Page 377
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
00003d39 1f               21044		.byte	31
00003d3a 00000000         21045		.long	.LDW89
00003d3e 00000000         21046		.long	.LDW99
                          21047	
00003d42 00               21048		.byte	0
                          21049	
00003d43 00               21050		.byte	0
                          21051	
                          21052	.LDW_5e2b4c8:
00003d44 16               21053		.byte	22
00003d45 46626c4d656d4572 21054		.strz	"FblMemEraseRegion"
00003d4d 617365526567696f
00003d55 6e00            
00003d57 a725             21055		.byte	167,37
00003d59 0f               21056		.byte	15
00003d5a 01               21057		.byte	1
00003d5b 00000000         21058		.long	.LDW_4aea750
00003d5f 00000000         21059		.long	FblMemEraseRegion
00003d63 00000000         21060		.long	__ghs_eofn_FblMemEraseRegion
00003d67 0151             21061		.byte	1,81
00003d69 03               21062		.byte	3
00003d6a 00               21063		.byte	0
00003d6b 00               21064		.byte	0
00003d6c 00               21065		.byte	0
00003d6d 00               21066		.byte	0
00003d6e 00               21067		.byte	0
00003d6f 00               21068		.byte	0
00003d70 01               21069		.byte	1
00003d71 01               21070		.byte	1
00003d72 00               21071		.byte	0
00003d73 01               21072		.byte	1
                          21073	
                          21074		.section	.debug_frame
                          21075	.LDW_5ec5cf8:
000004c8 00000014         21076		.long	.LDW_unq_5e-.LDW_unq_5d
                          21077	.LDW_unq_5d:
000004cc 00000000         21078		.long	.LDW_5d27e08
000004d0 00000000         21079		.long	FblMemEraseRegion
000004d4 00000004         21080		.long	__ghs_eofn_FblMemEraseRegion-FblMemEraseRegion
000004d8 01               21081		.byte	1
000004d9 00000000         21082		.long	.LDW101
000004dd 00               21083		.byte	0
000004de 00               21084		.byte	0
000004df 00               21085		.byte	0
                          21086	.LDW_unq_5e:
                          21087		.section	.debug_line
000014f6 000502           21088		.byte	0,5,2
000014f9 00000000         21089		.long	FblMemEraseRegion
000014fd 06               21090		.byte	6
000014fe 03               21091		.byte	3
000014ff af25             21092		.byte	175,37
00001501 02               21093		.byte	2
00001502 00               21094		.byte	0
00001503 01               21095		.byte	1
00001504 000502           21096		.byte	0,5,2
00001507 00000000         21097		.long	__ghs_eofn_FblMemEraseRegion
0000150b 0c               21098		.byte	12
0000150c 000101           21099		.byte	0,1,1

                                   Fri Apr 10 08:32:15 2020           Page 378
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          21100		.section	.debug_info
                          21101	.LDW_5e1a070:
00003d74 11               21102		.byte	17
00003d75 6572617365416464 21103		.strz	"eraseAddress"
00003d7d 7265737300      
00003d82 a725             21104		.byte	167,37
00003d84 2e               21105		.byte	46
00003d85 01               21106		.byte	1
00003d86 00000000         21107		.long	.LDW_5d9ca08
00003d8a 00               21108		.byte	0
00003d8b 0153             21109		.byte	1,83
                          21110	
                          21111	.LDW_5e1a6f8:
00003d8d 11               21112		.byte	17
00003d8e 65726173654c656e 21113		.strz	"eraseLength"
00003d96 67746800        
00003d9a a725             21114		.byte	167,37
00003d9c 47               21115		.byte	71
00003d9d 01               21116		.byte	1
00003d9e 00000000         21117		.long	.LDW_5d9c170
00003da2 00               21118		.byte	0
00003da3 0154             21119		.byte	1,84
                          21120	
                          21121	.LDW_5df1840:
00003da5 1f               21122		.byte	31
00003da6 00000000         21123		.long	.LDW001
00003daa 00000000         21124		.long	.LDW101
                          21125	
                          21126	.LDW_5e1a6a0:
00003dae 07               21127		.byte	7
00003daf 72657456616c00   21128		.strz	"retVal"
00003db6 a925             21129		.byte	169,37
00003db8 13               21130		.byte	19
00003db9 01               21131		.byte	1
00003dba 00000000         21132		.long	.LDW_4aea750
00003dbe 00               21133		.byte	0
00003dbf 00               21134		.byte	0
                          21135	
00003dc0 00               21136		.byte	0
                          21137	
00003dc1 00               21138		.byte	0
                          21139	
                          21140	.LDW_5e2b008:
00003dc2 16               21141		.byte	22
00003dc3 46626c4d656d5072 21142		.strz	"FblMemProgramBuffer"
00003dcb 6f6772616d427566
00003dd3 66657200        
00003dd7 c425             21143		.byte	196,37
00003dd9 0f               21144		.byte	15
00003dda 01               21145		.byte	1
00003ddb 00000000         21146		.long	.LDW_4aea750
00003ddf 00000000         21147		.long	FblMemProgramBuffer
00003de3 00000000         21148		.long	__ghs_eofn_FblMemProgramBuffer
00003de7 0151             21149		.byte	1,81
00003de9 808080800c       21150		.byte	128,128,128,128,12
00003dee 08               21151		.byte	8
00003def 00               21152		.byte	0
00003df0 10               21153		.byte	16
00003df1 00               21154		.byte	0
00003df2 00               21155		.byte	0

                                   Fri Apr 10 08:32:15 2020           Page 379
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
00003df3 00               21156		.byte	0
00003df4 01               21157		.byte	1
00003df5 01               21158		.byte	1
00003df6 00               21159		.byte	0
00003df7 01               21160		.byte	1
                          21161	
                          21162		.section	.debug_frame
                          21163	.LDW_5ec59f8:
000004e0 00000014         21164		.long	.LDW_unq_60-.LDW_unq_5f
                          21165	.LDW_unq_5f:
000004e4 00000000         21166		.long	.LDW_5d27e08
000004e8 00000000         21167		.long	FblMemProgramBuffer
000004ec 0000002c         21168		.long	__ghs_eofn_FblMemProgramBuffer-FblMemProgramBuffer
000004f0 01               21169		.byte	1
000004f1 00000000         21170		.long	.LDW301
000004f5 00               21171		.byte	0
000004f6 00               21172		.byte	0
000004f7 00               21173		.byte	0
                          21174	.LDW_unq_60:
                          21175		.section	.debug_line
0000150f 000502           21176		.byte	0,5,2
00001512 00000000         21177		.long	FblMemProgramBuffer
00001516 06               21178		.byte	6
00001517 03               21179		.byte	3
00001518 c525             21180		.byte	197,37
0000151a 02               21181		.byte	2
0000151b 00               21182		.byte	0
0000151c 01               21183		.byte	1
0000151d 03               21184		.byte	3
0000151e 06               21185		.byte	6
0000151f 02               21186		.byte	2
00001520 0c               21187		.byte	12
00001521 01               21188		.byte	1
00001522 35               21189		.byte	53
00001523 1d               21190		.byte	29
00001524 000502           21191		.byte	0,5,2
00001527 00000000         21192		.long	.LDWlin193
0000152b 0d               21193		.byte	13
0000152c 15               21194		.byte	21
0000152d 02               21195		.byte	2
0000152e 0c               21196		.byte	12
0000152f 000101           21197		.byte	0,1,1
                          21198		.section	.debug_info
                          21199	.LDW_5e1a3e0:
00003df8 11               21200		.byte	17
00003df9 70726f6772616d41 21201		.strz	"programAddress"
00003e01 64647265737300  
00003e08 c425             21202		.byte	196,37
00003e0a 30               21203		.byte	48
00003e0b 01               21204		.byte	1
00003e0c 00000000         21205		.long	.LDW_5d9ca08
00003e10 00               21206		.byte	0
00003e11 0153             21207		.byte	1,83
                          21208	
                          21209	.LDW_5e1a5f0:
00003e13 11               21210		.byte	17
00003e14 70726f6772616d4c 21211		.strz	"programLength"
00003e1c 656e67746800    

                                   Fri Apr 10 08:32:15 2020           Page 380
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
00003e22 c525             21212		.byte	197,37
00003e24 2f               21213		.byte	47
00003e25 01               21214		.byte	1
00003e26 00000000         21215		.long	.LDW_5dbf340
00003e2a 00               21216		.byte	0
00003e2b 0154             21217		.byte	1,84
                          21218	
                          21219	.LDW_5e1a750:
00003e2d 11               21220		.byte	17
00003e2e 70726f6772616d44 21221		.strz	"programData"
00003e36 61746100        
00003e3a c525             21222		.byte	197,37
00003e3c 4d               21223		.byte	77
00003e3d 01               21224		.byte	1
00003e3e 00000000         21225		.long	.LDW_4aeb9a0
00003e42 00               21226		.byte	0
00003e43 0155             21227		.byte	1,85
                          21228	
                          21229	.LDW_5df1630:
00003e45 1f               21230		.byte	31
00003e46 00000000         21231		.long	.LDW201
00003e4a 00000000         21232		.long	.LDW301
                          21233	
                          21234	.LDW_5e1a438:
00003e4e 06               21235		.byte	6
00003e4f 6163746976655072 21236		.strz	"activeProgState"
00003e57 6f67537461746500
00003e5f c725             21237		.byte	199,37
00003e61 15               21238		.byte	21
00003e62 01               21239		.byte	1
00003e63 00000000         21240		.long	.LDW_5dbfda8
00003e67 00               21241		.byte	0
00003e68 00               21242		.byte	0
00003e69 016e             21243		.byte	1,110
                          21244	
                          21245	.LDW_5e19d00:
00003e6b 07               21246		.byte	7
00003e6c 72657456616c00   21247		.strz	"retVal"
00003e73 c825             21248		.byte	200,37
00003e75 12               21249		.byte	18
00003e76 01               21250		.byte	1
00003e77 00000000         21251		.long	.LDW_4aea750
00003e7b 00               21252		.byte	0
00003e7c 00               21253		.byte	0
                          21254	
00003e7d 00               21255		.byte	0
                          21256	
00003e7e 00               21257		.byte	0
                          21258	
                          21259	.LDW_5e2b728:
00003e7f 15               21260		.byte	21
00003e80 46626c4d656d5365 21261		.strz	"FblMemSetInteger"
00003e88 74496e7465676572
00003e90 00              
00003e91 e325             21262		.byte	227,37
00003e93 06               21263		.byte	6
00003e94 01               21264		.byte	1
00003e95 00000000         21265		.long	FblMemSetInteger
00003e99 00000000         21266		.long	__ghs_eofn_FblMemSetInteger
00003e9d 0151             21267		.byte	1,81

                                   Fri Apr 10 08:32:15 2020           Page 381
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
00003e9f 03               21268		.byte	3
00003ea0 00               21269		.byte	0
00003ea1 00               21270		.byte	0
00003ea2 00               21271		.byte	0
00003ea3 00               21272		.byte	0
00003ea4 00               21273		.byte	0
00003ea5 00               21274		.byte	0
00003ea6 01               21275		.byte	1
00003ea7 01               21276		.byte	1
00003ea8 00               21277		.byte	0
00003ea9 01               21278		.byte	1
                          21279	
                          21280		.section	.debug_frame
                          21281	.LDW_5ec5878:
000004f8 00000014         21282		.long	.LDW_unq_62-.LDW_unq_61
                          21283	.LDW_unq_61:
000004fc 00000000         21284		.long	.LDW_5d27e08
00000500 00000000         21285		.long	FblMemSetInteger
00000504 00000010         21286		.long	__ghs_eofn_FblMemSetInteger-FblMemSetInteger
00000508 01               21287		.byte	1
00000509 00000000         21288		.long	.LDW501
0000050d 00               21289		.byte	0
0000050e 00               21290		.byte	0
0000050f 00               21291		.byte	0
                          21292	.LDW_unq_62:
                          21293		.section	.debug_line
00001532 000502           21294		.byte	0,5,2
00001535 00000000         21295		.long	FblMemSetInteger
00001539 06               21296		.byte	6
0000153a 03               21297		.byte	3
0000153b e525             21298		.byte	229,37
0000153d 02               21299		.byte	2
0000153e 00               21300		.byte	0
0000153f 01               21301		.byte	1
00001540 000502           21302		.byte	0,5,2
00001543 00000000         21303		.long	.LDWlin194
00001547 0c               21304		.byte	12
00001548 14               21305		.byte	20
00001549 1c               21306		.byte	28
0000154a 03               21307		.byte	3
0000154b 7a               21308		.byte	122
0000154c 02               21309		.byte	2
0000154d 02               21310		.byte	2
0000154e 01               21311		.byte	1
0000154f 000502           21312		.byte	0,5,2
00001552 00000000         21313		.long	.LDWlin195
00001556 03               21314		.byte	3
00001557 07               21315		.byte	7
00001558 02               21316		.byte	2
00001559 00               21317		.byte	0
0000155a 01               21318		.byte	1
0000155b 0b               21319		.byte	11
0000155c 02               21320		.byte	2
0000155d 02               21321		.byte	2
0000155e 000101           21322		.byte	0,1,1
                          21323		.section	.debug_info

                                   Fri Apr 10 08:32:15 2020           Page 382
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
                          21324	.LDW_5e19db0:
00003eaa 11               21325		.byte	17
00003eab 636f756e7400     21326		.strz	"count"
00003eb1 e325             21327		.byte	227,37
00003eb3 1f               21328		.byte	31
00003eb4 01               21329		.byte	1
00003eb5 00000000         21330		.long	.LDW_4ae9b80
00003eb9 00               21331		.byte	0
00003eba 0153             21332		.byte	1,83
                          21333	
                          21334	.LDW_5e19e08:
00003ebc 11               21335		.byte	17
00003ebd 696e70757400     21336		.strz	"input"
00003ec3 e325             21337		.byte	227,37
00003ec5 2e               21338		.byte	46
00003ec6 01               21339		.byte	1
00003ec7 00000000         21340		.long	.LDW_4ae9b80
00003ecb 00               21341		.byte	0
00003ecc 0154             21342		.byte	1,84
                          21343	
                          21344	.LDW_5e1a1d0:
00003ece 11               21345		.byte	17
00003ecf 62756666657200   21346		.strz	"buffer"
00003ed6 e325             21347		.byte	227,37
00003ed8 44               21348		.byte	68
00003ed9 01               21349		.byte	1
00003eda 00000000         21350		.long	.LDW_4aeb9a0
00003ede 00               21351		.byte	0
00003edf 0155             21352		.byte	1,85
                          21353	
                          21354	.LDW_5df1750:
00003ee1 1f               21355		.byte	31
00003ee2 00000000         21356		.long	.LDW401
00003ee6 00000000         21357		.long	.LDW501
                          21358	
00003eea 00               21359		.byte	0
                          21360	
00003eeb 00               21361		.byte	0
                          21362	
                          21363	.LDW_5e2b0a0:
00003eec 16               21364		.byte	22
00003eed 46626c4d656d4765 21365		.strz	"FblMemGetInteger"
00003ef5 74496e7465676572
00003efd 00              
00003efe f825             21366		.byte	248,37
00003f00 09               21367		.byte	9
00003f01 01               21368		.byte	1
00003f02 00000000         21369		.long	.LDW_4ae9b80
00003f06 00000000         21370		.long	FblMemGetInteger
00003f0a 00000000         21371		.long	__ghs_eofn_FblMemGetInteger
00003f0e 0151             21372		.byte	1,81
00003f10 03               21373		.byte	3
00003f11 00               21374		.byte	0
00003f12 00               21375		.byte	0
00003f13 00               21376		.byte	0
00003f14 00               21377		.byte	0
00003f15 00               21378		.byte	0
00003f16 00               21379		.byte	0

                                   Fri Apr 10 08:32:15 2020           Page 383
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
00003f17 01               21380		.byte	1
00003f18 01               21381		.byte	1
00003f19 00               21382		.byte	0
00003f1a 01               21383		.byte	1
                          21384	
                          21385		.section	.debug_frame
                          21386	.LDW_5ec55f8:
00000510 00000014         21387		.long	.LDW_unq_64-.LDW_unq_63
                          21388	.LDW_unq_63:
00000514 00000000         21389		.long	.LDW_5d27e08
00000518 00000000         21390		.long	FblMemGetInteger
0000051c 0000001a         21391		.long	__ghs_eofn_FblMemGetInteger-FblMemGetInteger
00000520 01               21392		.byte	1
00000521 00000000         21393		.long	.LDW701
00000525 00               21394		.byte	0
00000526 00               21395		.byte	0
00000527 00               21396		.byte	0
                          21397	.LDW_unq_64:
                          21398		.section	.debug_line
00001561 000502           21399		.byte	0,5,2
00001564 00000000         21400		.long	FblMemGetInteger
00001568 06               21401		.byte	6
00001569 03               21402		.byte	3
0000156a fc25             21403		.byte	252,37
0000156c 02               21404		.byte	2
0000156d 00               21405		.byte	0
0000156e 01               21406		.byte	1
0000156f 13               21407		.byte	19
00001570 15               21408		.byte	21
00001571 000502           21409		.byte	0,5,2
00001574 00000000         21410		.long	.LDWlin196
00001578 0d               21411		.byte	13
00001579 1c               21412		.byte	28
0000157a 1c               21413		.byte	28
0000157b 03               21414		.byte	3
0000157c 79               21415		.byte	121
0000157d 02               21416		.byte	2
0000157e 02               21417		.byte	2
0000157f 01               21418		.byte	1
00001580 000502           21419		.byte	0,5,2
00001583 00000000         21420		.long	.LDWlin197
00001587 03               21421		.byte	3
00001588 09               21422		.byte	9
00001589 02               21423		.byte	2
0000158a 00               21424		.byte	0
0000158b 01               21425		.byte	1
0000158c 0c               21426		.byte	12
0000158d 06               21427		.byte	6
0000158e 02               21428		.byte	2
0000158f 02               21429		.byte	2
00001590 02               21430		.byte	2
00001591 02               21431		.byte	2
00001592 000101           21432		.byte	0,1,1
                          21433		.section	.debug_info
                          21434	.LDW_5e1a018:
00003f1b 11               21435		.byte	17

                                   Fri Apr 10 08:32:15 2020           Page 384
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
00003f1c 636f756e7400     21436		.strz	"count"
00003f22 f825             21437		.byte	248,37
00003f24 22               21438		.byte	34
00003f25 01               21439		.byte	1
00003f26 00000000         21440		.long	.LDW_4ae9b80
00003f2a 00               21441		.byte	0
00003f2b 0153             21442		.byte	1,83
                          21443	
                          21444	.LDW_5e1a0c8:
00003f2d 11               21445		.byte	17
00003f2e 62756666657200   21446		.strz	"buffer"
00003f35 f825             21447		.byte	248,37
00003f37 3d               21448		.byte	61
00003f38 01               21449		.byte	1
00003f39 00000000         21450		.long	.LDW_5d9ce80
00003f3d 00               21451		.byte	0
00003f3e 0154             21452		.byte	1,84
                          21453	
                          21454	.LDW_5e3da68:
00003f40 1f               21455		.byte	31
00003f41 00000000         21456		.long	.LDW601
00003f45 00000000         21457		.long	.LDW701
                          21458	
                          21459	.LDW_5e1a330:
00003f49 06               21460		.byte	6
00003f4a 6f757470757400   21461		.strz	"output"
00003f51 fa25             21462		.byte	250,37
00003f53 0c               21463		.byte	12
00003f54 01               21464		.byte	1
00003f55 00000000         21465		.long	.LDW_4ae9b80
00003f59 00               21466		.byte	0
00003f5a 00               21467		.byte	0
00003f5b 0150             21468		.byte	1,80
                          21469	
                          21470	.LDW_5e19eb8:
00003f5d 06               21471		.byte	6
00003f5e 69647800         21472		.strz	"idx"
00003f62 fb25             21473		.byte	251,37
00003f64 0b               21474		.byte	11
00003f65 01               21475		.byte	1
00003f66 00000000         21476		.long	.LDW_4ae9b80
00003f6a 00               21477		.byte	0
00003f6b 00               21478		.byte	0
00003f6c 0157             21479		.byte	1,87
                          21480	
00003f6e 00               21481		.byte	0
                          21482	
00003f6f 00               21483		.byte	0
                          21484	
00003f70 00               21485		.byte	0
                          21486	
                          21487		.section	.debug_line
                          21488	.Ldw_line_end:
                          21489		.section	.debug_macinfo
00000000 01               21490		.byte	1
00000001 00               21491		.byte	0

                                   Fri Apr 10 08:32:15 2020           Page 385
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
00000002 5f5f4c494e455f5f 21492		.strz	"__LINE__"
0000000a 00              
0000000b 01               21493		.byte	1
0000000c 00               21494		.byte	0
0000000d 5f5f46494c455f5f 21495		.strz	"__FILE__"
00000015 00              
00000016 03               21496		.byte	3
00000017 00               21497		.byte	0
00000018 01               21498		.byte	1
00000019 03               21499		.byte	3
0000001a a501             21500		.byte	165,1
0000001c 02               21501		.byte	2
0000001d 01               21502		.byte	1
0000001e 4a               21503		.byte	74
0000001f 5f5f46424c5f494e 21504		.strz	"__FBL_INC_H__ "
00000027 435f485f5f2000  
0000002e 03               21505		.byte	3
0000002f 59               21506		.byte	89
00000030 03               21507		.byte	3
00000031 01               21508		.byte	1
00000032 58               21509		.byte	88
00000033 5f46424c4c49425f 21510		.strz	"_FBLLIB_MEM_VERSION 0x0404u"
0000003b 4d454d5f56455253
00000043 494f4e2030783034
0000004b 30347500        
0000004f 01               21511		.byte	1
00000050 59               21512		.byte	89
00000051 5f46424c4c49425f 21513		.strz	"_FBLLIB_MEM_RELEASE_VERSION 0x00u"
00000059 4d454d5f52454c45
00000061 4153455f56455253
00000069 494f4e2030783030
00000071 7500            
00000073 04               21514		.byte	4
00000074 03               21515		.byte	3
00000075 5a               21516		.byte	90
00000076 04               21517		.byte	4
00000077 01               21518		.byte	1
00000078 30               21519		.byte	48
00000079 5647454e5f47454e 21520		.strz	"VGEN_GENY "
00000081 592000          
00000084 01               21521		.byte	1
00000085 4a               21522		.byte	74
00000086 435f435055545950 21523		.strz	"C_CPUTYPE_32BIT "
0000008e 455f333242495420
00000096 00              
00000097 01               21524		.byte	1
00000098 54               21525		.byte	84
00000099 435f435055545950 21526		.strz	"C_CPUTYPE_BIGENDIAN "
000000a1 455f424947454e44
000000a9 49414e2000      
000000ae 01               21527		.byte	1
000000af 59               21528		.byte	89
000000b0 435f435055545950 21529		.strz	"C_CPUTYPE_BITORDER_MSB2LSB "
000000b8 455f4249544f5244
000000c0 45525f4d5342324c
000000c8 53422000        
000000cc 01               21530		.byte	1
000000cd 63               21531		.byte	99
000000ce 565f454e41424c45 21532		.strz	"V_ENABLE_USE_DUMMY_STATEMENT "
000000d6 5f5553455f44554d
000000de 4d595f5354415445
000000e6 4d454e542000    
000000ec 01               21533		.byte	1
000000ed 8901             21534		.byte	137,1
000000ef 5647454e5f454e41 21535		.strz	"VGEN_ENABLE_CANFBL "
000000f7 424c455f43414e46
000000ff 424c2000        
00000103 01               21536		.byte	1
00000104 be01             21537		.byte	190,1
00000106 565f434f4d505f47 21538		.strz	"V_COMP_GHS_MPC5700 "
0000010e 48535f4d50433537
00000116 30302000        
0000011a 01               21539		.byte	1
0000011b bf01             21540		.byte	191,1
0000011d 565f4350555f4d50 21541		.strz	"V_CPU_MPC5700 "
00000125 43353730302000  
0000012c 01               21542		.byte	1
0000012d ca01             21543		.byte	202,1
0000012f 4d414749435f4e55 21544		.strz	"MAGIC_NUMBER 312540478"
00000137 4d42455220333132
0000013f 35343034373800  
00000146 04               21545		.byte	4
00000147 03               21546		.byte	3
00000148 5c               21547		.byte	92

                                   Fri Apr 10 08:32:15 2020           Page 386
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
00000149 05               21548		.byte	5
0000014a 03               21549		.byte	3
0000014b 31               21550		.byte	49
0000014c 06               21551		.byte	6
0000014d 03               21552		.byte	3
0000014e 34               21553		.byte	52
0000014f 07               21554		.byte	7
00000150 01               21555		.byte	1
00000151 8704             21556		.byte	135,4
00000153 565f4445465f5355 21557		.strz	"V_DEF_SUPPORTED_PLATFORM "
0000015b 50504f525445445f
00000163 504c4154464f524d
0000016b 2000            
0000016d 01               21558		.byte	1
0000016e e104             21559		.byte	225,4
00000170 7675696e74782076 21560		.strz	"vuintx vuint32"
00000178 75696e74333200  
0000017f 01               21561		.byte	1
00000180 da06             21562		.byte	218,6
00000182 4c4f43414c5f494e 21563		.strz	"LOCAL_INLINE static inline"
0000018a 4c494e4520737461
00000192 74696320696e6c69
0000019a 6e6500          
0000019d 01               21564		.byte	1
0000019e e406             21565		.byte	228,6
000001a0 565f4d454d524f4d 21566		.strz	"V_MEMROM0 "
000001a8 302000          
000001ab 01               21567		.byte	1
000001ac ec06             21568		.byte	236,6
000001ae 565f4d454d524f4d 21569		.strz	"V_MEMROM1 "
000001b6 312000          
000001b9 01               21570		.byte	1
000001ba f006             21571		.byte	240,6
000001bc 565f4d454d524f4d 21572		.strz	"V_MEMROM1_FAR "
000001c4 315f4641522000  
000001cb 01               21573		.byte	1
000001cc 8007             21574		.byte	128,7
000001ce 565f4d454d524f4d 21575		.strz	"V_MEMROM2 const"
000001d6 3220636f6e737400
000001de 01               21576		.byte	1
000001df 8307             21577		.byte	131,7
000001e1 4d454d4f52595f52 21578		.strz	"MEMORY_ROM V_MEMROM2"
000001e9 4f4d20565f4d454d
000001f1 524f4d3200      
000001f6 01               21579		.byte	1
000001f7 8a07             21580		.byte	138,7
000001f9 565f4d454d524f4d 21581		.strz	"V_MEMROM2_FAR const"
00000201 325f46415220636f
00000209 6e737400        
0000020d 01               21582		.byte	1
0000020e 9307             21583		.byte	147,7
00000210 565f4d454d524f4d 21584		.strz	"V_MEMROM3 "
00000218 332000          
0000021b 01               21585		.byte	1
0000021c 9907             21586		.byte	153,7
0000021e 565f4d454d52414d 21587		.strz	"V_MEMRAM0 "
00000226 302000          
00000229 01               21588		.byte	1
0000022a 9d07             21589		.byte	157,7
0000022c 565f4d454d52414d 21590		.strz	"V_MEMRAM1_NEAR "
00000234 315f4e4541522000
0000023c 01               21591		.byte	1
0000023d a107             21592		.byte	161,7
0000023f 565f4d454d52414d 21593		.strz	"V_MEMRAM1 "
00000247 312000          
0000024a 01               21594		.byte	1
0000024b ab07             21595		.byte	171,7
0000024d 565f4d454d52414d 21596		.strz	"V_MEMRAM2_NEAR "
00000255 325f4e4541522000
0000025d 01               21597		.byte	1
0000025e ae07             21598		.byte	174,7
00000260 4d454d4f52595f4e 21599		.strz	"MEMORY_NEAR V_MEMRAM2_NEAR"
00000268 45415220565f4d45
00000270 4d52414d325f4e45
00000278 415200          
0000027b 01               21600		.byte	1
0000027c b507             21601		.byte	181,7
0000027e 565f4d454d52414d 21602		.strz	"V_MEMRAM2 "
00000286 322000          
00000289 01               21603		.byte	1

                                   Fri Apr 10 08:32:15 2020           Page 387
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
0000028a bf07             21604		.byte	191,7
0000028c 565f4d454d52414d 21605		.strz	"V_MEMRAM2_FAR "
00000294 325f4641522000  
0000029b 01               21606		.byte	1
0000029c c207             21607		.byte	194,7
0000029e 4d454d4f52595f46 21608		.strz	"MEMORY_FAR V_MEMRAM2_FAR"
000002a6 415220565f4d454d
000002ae 52414d325f464152
000002b6 00              
000002b7 01               21609		.byte	1
000002b8 cc07             21610		.byte	204,7
000002ba 565f4d454d52414d 21611		.strz	"V_MEMRAM3 "
000002c2 332000          
000002c5 01               21612		.byte	1
000002c6 f907             21613		.byte	249,7
000002c8 565f4e554c4c2028 21614		.strz	"V_NULL ((void*)0)"
000002d0 28766f69642a2930
000002d8 2900            
000002da 01               21615		.byte	1
000002db fe07             21616		.byte	254,7
000002dd 4e554c4c20565f4e 21617		.strz	"NULL V_NULL"
000002e5 554c4c00        
000002e9 04               21618		.byte	4
000002ea 01               21619		.byte	1
000002eb 45               21620		.byte	69
000002ec 6b47454e79566572 21621		.strz	"kGENyVersionNumberOfBytes 10"
000002f4 73696f6e4e756d62
000002fc 65724f6642797465
00000304 7320313000      
00000309 04               21622		.byte	4
0000030a 04               21623		.byte	4
0000030b 03               21624		.byte	3
0000030c 60               21625		.byte	96
0000030d 08               21626		.byte	8
0000030e 03               21627		.byte	3
0000030f 44               21628		.byte	68
00000310 09               21629		.byte	9
00000311 03               21630		.byte	3
00000312 55               21631		.byte	85
00000313 0a               21632		.byte	10
00000314 01               21633		.byte	1
00000315 45               21634		.byte	69
00000316 5f5f5345435f494e 21635		.strz	"__SEC_INC_H__ "
0000031e 435f485f5f2000  
00000325 03               21636		.byte	3
00000326 56               21637		.byte	86
00000327 0b               21638		.byte	11
00000328 01               21639		.byte	1
00000329 2f               21640		.byte	47
0000032a 5345435f434c4153 21641		.strz	"SEC_CLASS_DDD 0"
00000332 535f444444203000
0000033a 01               21642		.byte	1
0000033b 30               21643		.byte	48
0000033c 5345435f434c4153 21644		.strz	"SEC_CLASS_C 1"
00000344 535f43203100    
0000034a 01               21645		.byte	1
0000034b 31               21646		.byte	49
0000034c 5345435f434c4153 21647		.strz	"SEC_CLASS_CCC 2"
00000354 535f434343203200
0000035c 01               21648		.byte	1
0000035d 32               21649		.byte	50
0000035e 5345435f434c4153 21650		.strz	"SEC_CLASS_VENDOR 3"
00000366 535f56454e444f52
0000036e 203300          
00000371 01               21651		.byte	1
00000372 39               21652		.byte	57
00000373 5345435f52495045 21653		.strz	"SEC_RIPEMD160 0"
0000037b 4d44313630203000
00000383 01               21654		.byte	1
00000384 3a               21655		.byte	58
00000385 5345435f53484131 21656		.strz	"SEC_SHA1 1"
0000038d 203100          
00000390 01               21657		.byte	1
00000391 3b               21658		.byte	59
00000392 5345435f53484132 21659		.strz	"SEC_SHA256 2"
0000039a 3536203200      

                                   Fri Apr 10 08:32:15 2020           Page 388
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
0000039f 01               21660		.byte	1
000003a0 44               21661		.byte	68
000003a1 5345435f4b45595f 21662		.strz	"SEC_KEY_TIMEOUT 0"
000003a9 54494d454f555420
000003b1 3000            
000003b3 01               21663		.byte	1
000003b4 48               21664		.byte	72
000003b5 5345435f48415348 21665		.strz	"SEC_HASH_ALGORITHM SEC_SHA1"
000003bd 5f414c474f524954
000003c5 484d205345435f53
000003cd 48413100        
000003d1 01               21666		.byte	1
000003d2 49               21667		.byte	73
000003d3 5345435f53454355 21668		.strz	"SEC_SECURITY_CLASS SEC_CLASS_DDD"
000003db 524954595f434c41
000003e3 5353205345435f43
000003eb 4c4153535f444444
000003f3 00              
000003f4 01               21669		.byte	1
000003f5 4f               21670		.byte	79
000003f6 5345435f454e4142 21671		.strz	"SEC_ENABLE_VERIFICATION_KEY_INTERNAL "
000003fe 4c455f5645524946
00000406 49434154494f4e5f
0000040e 4b45595f494e5445
00000416 524e414c2000    
0000041c 01               21672		.byte	1
0000041d 50               21673		.byte	80
0000041e 5345435f53495a45 21674		.strz	"SEC_SIZE_CHECKSUM_VENDOR 0"
00000426 5f434845434b5355
0000042e 4d5f56454e444f52
00000436 203000          
00000439 01               21675		.byte	1
0000043a 52               21676		.byte	82
0000043b 5345435f56455249 21677		.strz	"SEC_VERIFY_BYTES 64"
00000443 46595f4259544553
0000044b 20363400        
0000044f 01               21678		.byte	1
00000450 53               21679		.byte	83
00000451 5345435f454e4142 21680		.strz	"SEC_ENABLE_VERIFICATION_ADDRESS_LENGTH "
00000459 4c455f5645524946
00000461 49434154494f4e5f
00000469 414444524553535f
00000471 4c454e4754482000
00000479 01               21681		.byte	1
0000047a 54               21682		.byte	84
0000047b 5345435f454e4142 21683		.strz	"SEC_ENABLE_CRC_TOTAL "
00000483 4c455f4352435f54
0000048b 4f54414c2000    
00000491 01               21684		.byte	1
00000492 57               21685		.byte	87
00000493 5345435f5645525f 21686		.strz	"SEC_VER_SIG_OFFSET 0"
0000049b 5349475f4f464653
000004a3 4554203000      
000004a8 01               21687		.byte	1
000004a9 58               21688		.byte	88
000004aa 5345435f5645525f 21689		.strz	"SEC_VER_CRC_OFFSET 0"
000004b2 4352435f4f464653
000004ba 4554203000      
000004bf 04               21690		.byte	4
000004c0 03               21691		.byte	3
000004c1 59               21692		.byte	89
000004c2 0c               21693		.byte	12
000004c3 03               21694		.byte	3
000004c4 4d               21695		.byte	77
000004c5 0a               21696		.byte	10
000004c6 04               21697		.byte	4
000004c7 01               21698		.byte	1
000004c8 59               21699		.byte	89
000004c9 5345435f57415443 21700		.strz	"SEC_WATCHDOG_CYCLE_COUNT (0x20u)"
000004d1 48444f475f435943
000004d9 4c455f434f554e54
000004e1 2028307832307529
000004e9 00              
000004ea 01               21701		.byte	1
000004eb 60               21702		.byte	96
000004ec 5345435f454e4142 21703		.strz	"SEC_ENABLE_WORKSPACE_INTERNAL "
000004f4 4c455f574f524b53
000004fc 504143455f494e54
00000504 45524e414c2000  
0000050b 01               21704		.byte	1
0000050c 66               21705		.byte	102
0000050d 5345435f43484543 21706		.strz	"SEC_CHECKSUM_TYPE_CRC 0u"
00000515 4b53554d5f545950
0000051d 455f435243203075
00000525 00              
00000526 01               21707		.byte	1
00000527 6b               21708		.byte	107
00000528 5345435f43484543 21709		.strz	"SEC_CHECKSUM_TYPE_HASH (SEC_CHECKSUM_TYPE_CRC + 1u)"
00000530 4b53554d5f545950
00000538 455f484153482028
00000540 5345435f43484543
00000548 4b53554d5f545950
00000550 455f435243202b20
00000558 31752900        
0000055c 01               21710		.byte	1
0000055d 71               21711		.byte	113
0000055e 5345435f4d41435f 21712		.strz	"SEC_MAC_TYPE_HMAC 0u"
00000566 545950455f484d41
0000056e 4320307500      
00000573 01               21713		.byte	1
00000574 8601             21714		.byte	134,1
00000576 5345435f43524333 21715		.strz	"SEC_CRC32 0u"
0000057e 3220307500      

                                   Fri Apr 10 08:32:15 2020           Page 389
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
00000583 01               21716		.byte	1
00000584 8e01             21717		.byte	142,1
00000586 5345435f43524331 21718		.strz	"SEC_CRC16 (SEC_CRC32 + 1u)"
0000058e 3620285345435f43
00000596 52433332202b2031
0000059e 752900          
000005a1 01               21719		.byte	1
000005a2 ca01             21720		.byte	202,1
000005a4 5345435f5349474e 21721		.strz	"SEC_SIGNATURE_SCHEME_RSA_V15 0u"
000005ac 41545552455f5343
000005b4 48454d455f525341
000005bc 5f56313520307500
000005c4 01               21722		.byte	1
000005c5 dc01             21723		.byte	220,1
000005c7 5345434d5f4f4b20 21724		.strz	"SECM_OK 0x00u"
000005cf 307830307500    
000005d5 01               21725		.byte	1
000005d6 e301             21726		.byte	227,1
000005d8 5345435f43414c4c 21727		.strz	"SEC_CALL_TYPE "
000005e0 5f545950452000  
000005e7 04               21728		.byte	4
000005e8 03               21729		.byte	3
000005e9 5c               21730		.byte	92
000005ea 0d               21731		.byte	13
000005eb 03               21732		.byte	3
000005ec 2f               21733		.byte	47
000005ed 0e               21734		.byte	14
000005ee 04               21735		.byte	4
000005ef 04               21736		.byte	4
000005f0 04               21737		.byte	4
000005f1 03               21738		.byte	3
000005f2 58               21739		.byte	88
000005f3 0f               21740		.byte	15
000005f4 01               21741		.byte	1
000005f5 6d               21742		.byte	109
000005f6 5345435f4352435f 21743		.strz	"SEC_CRC_TYPE SEC_CRC32"
000005fe 5459504520534543
00000606 5f435243333200  
0000060d 01               21744		.byte	1
0000060e 78               21745		.byte	120
0000060f 5345435f454e4142 21746		.strz	"SEC_ENABLE_CRC_TYPE_CRC32 "
00000617 4c455f4352435f54
0000061f 5950455f43524333
00000627 322000          
0000062a 04               21747		.byte	4
0000062b 03               21748		.byte	3
0000062c 59               21749		.byte	89
0000062d 10               21750		.byte	16
0000062e 03               21751		.byte	3
0000062f 55               21752		.byte	85
00000630 11               21753		.byte	17
00000631 01               21754		.byte	1
00000632 3e               21755		.byte	62
00000633 5345435f53454544 21756		.strz	"SEC_SEED_LENGTH 8u"
0000063b 5f4c454e47544820
00000643 387500          
00000646 01               21757		.byte	1
00000647 40               21758		.byte	64
00000648 5345435f4b45595f 21759		.strz	"SEC_KEY_LENGTH 4u"
00000650 4c454e4754482034
00000658 7500            
0000065a 04               21760		.byte	4
0000065b 01               21761		.byte	1
0000065c 7e               21762		.byte	126
0000065d 5345435f50524e47 21763		.strz	"SEC_PRNG_LCG 0u"
00000665 5f4c434720307500
0000066d 01               21764		.byte	1
0000066e 8301             21765		.byte	131,1
00000670 5345435f50524e47 21766		.strz	"SEC_PRNG_FIPS186 (SEC_PRNG_LCG + 1u)"
00000678 5f46495053313836
00000680 20285345435f5052
00000688 4e475f4c4347202b
00000690 2031752900      
00000695 01               21767		.byte	1
00000696 8901             21768		.byte	137,1
00000698 5345435f50524e47 21769		.strz	"SEC_PRNG SEC_PRNG_LCG"
000006a0 205345435f50524e
000006a8 475f4c434700    
000006ae 04               21770		.byte	4
000006af 03               21771		.byte	3

                                   Fri Apr 10 08:32:15 2020           Page 390
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
000006b0 5a               21772		.byte	90
000006b1 12               21773		.byte	18
000006b2 01               21774		.byte	1
000006b3 ba01             21775		.byte	186,1
000006b5 5345435f53454355 21776		.strz	"SEC_SECURITY_CLASS_VERIFY SEC_SECURITY_CLASS"
000006bd 524954595f434c41
000006c5 53535f5645524946
000006cd 59205345435f5345
000006d5 4355524954595f43
000006dd 4c41535300      
000006e2 01               21777		.byte	1
000006e3 c001             21778		.byte	192,1
000006e5 5345435f53454355 21779		.strz	"SEC_SECURITY_CLASS_VERIFICATION SEC_SECURITY_CLASS"
000006ed 524954595f434c41
000006f5 53535f5645524946
000006fd 49434154494f4e20
00000705 5345435f53454355
0000070d 524954595f434c41
00000715 535300          
00000718 01               21780		.byte	1
00000719 c701             21781		.byte	199,1
0000071b 5345435f43484543 21782		.strz	"SEC_CHECKSUM_TYPE SEC_CHECKSUM_TYPE_CRC"
00000723 4b53554d5f545950
0000072b 45205345435f4348
00000733 45434b53554d5f54
0000073b 5950455f43524300
00000743 01               21783		.byte	1
00000744 cd01             21784		.byte	205,1
00000746 5345435f4d41435f 21785		.strz	"SEC_MAC_TYPE SEC_MAC_TYPE_HMAC"
0000074e 5459504520534543
00000756 5f4d41435f545950
0000075e 455f484d414300  
00000765 01               21786		.byte	1
00000766 d301             21787		.byte	211,1
00000768 5345435f5349474e 21788		.strz	"SEC_SIGNATURE_SCHEME SEC_SIGNATURE_SCHEME_RSA_V15"
00000770 41545552455f5343
00000778 48454d4520534543
00000780 5f5349474e415455
00000788 52455f534348454d
00000790 455f5253415f5631
00000798 3500            
0000079a 01               21789		.byte	1
0000079b fd01             21790		.byte	253,1
0000079d 5345435f454e4142 21791		.strz	"SEC_ENABLE_SECURITY_CLASS_DDD "
000007a5 4c455f5345435552
000007ad 4954595f434c4153
000007b5 535f4444442000  
000007bc 01               21792		.byte	1
000007bd 8f02             21793		.byte	143,2
000007bf 5345435f454e4142 21794		.strz	"SEC_ENABLE_CHECKSUM_TYPE_CRC "
000007c7 4c455f434845434b
000007cf 53554d5f54595045
000007d7 5f4352432000    
000007dd 01               21795		.byte	1
000007de db02             21796		.byte	219,2
000007e0 5345435f454e4142 21797		.strz	"SEC_ENABLE_VERIFY_CHECKSUM_CRC "
000007e8 4c455f5645524946
000007f0 595f434845434b53
000007f8 554d5f4352432000
00000800 04               21798		.byte	4
00000801 04               21799		.byte	4
00000802 04               21800		.byte	4
00000803 03               21801		.byte	3
00000804 62               21802		.byte	98
00000805 13               21803		.byte	19
00000806 03               21804		.byte	3
00000807 48               21805		.byte	72
00000808 14               21806		.byte	20
00000809 01               21807		.byte	1
0000080a 33               21808		.byte	51
0000080b 46424c5f5553455f 21809		.strz	"FBL_USE_OWN_MEMCPY "
00000813 4f574e5f4d454d43
0000081b 50592000        
0000081f 01               21810		.byte	1
00000820 34               21811		.byte	52
00000821 46424c5f57415443 21812		.strz	"FBL_WATCHDOG_ON "
00000829 48444f475f4f4e20
00000831 00              
00000832 01               21813		.byte	1
00000833 35               21814		.byte	53
00000834 46424c5f57415443 21815		.strz	"FBL_WATCHDOG_TIME (1 / FBL_REPEAT_CALL_CYCLE)"
0000083c 48444f475f54494d
00000844 45202831202f2046
0000084c 424c5f5245504541
00000854 545f43414c4c5f43
0000085c 59434c452900    
00000862 01               21816		.byte	1
00000863 36               21817		.byte	54
00000864 46424c5f48454144 21818		.strz	"FBL_HEADER_ADDRESS 0xFC0400u"
0000086c 45525f4144445245
00000874 5353203078464330
0000087c 3430307500      
00000881 01               21819		.byte	1
00000882 37               21820		.byte	55
00000883 46424c5f454e4142 21821		.strz	"FBL_ENABLE_APPL_TASK "
0000088b 4c455f4150504c5f
00000893 5441534b2000    
00000899 01               21822		.byte	1
0000089a 39               21823		.byte	57
0000089b 46424c5f44494147 21824		.strz	"FBL_DIAG_BUFFER_LENGTH 4095"
000008a3 5f4255464645525f
000008ab 4c454e4754482034
000008b3 30393500        
000008b7 01               21825		.byte	1
000008b8 3b               21826		.byte	59
000008b9 46424c5f44494147 21827		.strz	"FBL_DIAG_TIME_P3MAX (2000 / FBL_REPEAT_CALL_CYCLE)"
000008c1 5f54494d455f5033
000008c9 4d41582028323030
000008d1 30202f2046424c5f
000008d9 5245504541545f43
000008e1 414c4c5f4359434c
000008e9 452900          

                                   Fri Apr 10 08:32:15 2020           Page 391
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
000008ec 01               21828		.byte	1
000008ed 3c               21829		.byte	60
000008ee 46424c5f454e4142 21830		.strz	"FBL_ENABLE_SLEEPMODE "
000008f6 4c455f534c454550
000008fe 4d4f44452000    
00000904 01               21831		.byte	1
00000905 3e               21832		.byte	62
00000906 46424c5f454e4142 21833		.strz	"FBL_ENABLE_GAP_FILL "
0000090e 4c455f4741505f46
00000916 494c4c2000      
0000091b 01               21834		.byte	1
0000091c 3f               21835		.byte	63
0000091d 6b46696c6c436861 21836		.strz	"kFillChar 0xFFu"
00000925 7220307846467500
0000092d 01               21837		.byte	1
0000092e 40               21838		.byte	64
0000092f 46424c5f454e4142 21839		.strz	"FBL_ENABLE_MULTIPLE_MEM_DEVICES "
00000937 4c455f4d554c5449
0000093f 504c455f4d454d5f
00000947 4445564943455320
0000094f 00              
00000950 01               21840		.byte	1
00000951 41               21841		.byte	65
00000952 46424c5f4d454d44 21842		.strz	"FBL_MEMDRV_SEGMENT_SIZE 8"
0000095a 52565f5345474d45
00000962 4e545f53495a4520
0000096a 3800            
0000096c 01               21843		.byte	1
0000096d 42               21844		.byte	66
0000096e 46424c5f454e4142 21845		.strz	"FBL_ENABLE_PRESENCE_PATTERN "
00000976 4c455f5052455345
0000097e 4e43455f50415454
00000986 45524e2000      
0000098b 01               21846		.byte	1
0000098c 43               21847		.byte	67
0000098d 46424c5f454e4142 21848		.strz	"FBL_ENABLE_FBL_START "
00000995 4c455f46424c5f53
0000099d 544152542000    
000009a3 01               21849		.byte	1
000009a4 45               21850		.byte	69
000009a5 46424c5f44495341 21851		.strz	"FBL_DISABLE_USERSUBFUNCTION "
000009ad 424c455f55534552
000009b5 53554246554e4354
000009bd 494f4e2000      
000009c2 01               21852		.byte	1
000009c3 47               21853		.byte	71
000009c4 46424c5f4d544142 21854		.strz	"FBL_MTAB_NO_OF_BLOCKS 2"
000009cc 5f4e4f5f4f465f42
000009d4 4c4f434b53203200
000009dc 01               21855		.byte	1
000009dd 49               21856		.byte	73
000009de 46424c5f44495341 21857		.strz	"FBL_DISABLE_DATA_PROCESSING "
000009e6 424c455f44415441
000009ee 5f50524f43455353
000009f6 494e472000      
000009fb 01               21858		.byte	1
000009fc 51               21859		.byte	81
000009fd 46424c5f454e4142 21860		.strz	"FBL_ENABLE_SYSTEM_CHECK "
00000a05 4c455f5359535445
00000a0d 4d5f434845434b20
00000a15 00              
00000a16 01               21861		.byte	1
00000a17 52               21862		.byte	82
00000a18 46424c5f454e4142 21863		.strz	"FBL_ENABLE_DEBUG_STATUS "
00000a20 4c455f4445425547
00000a28 5f53544154555320
00000a30 00              
00000a31 01               21864		.byte	1
00000a32 53               21865		.byte	83
00000a33 46424c5f454e4142 21866		.strz	"FBL_ENABLE_ASSERTION "
00000a3b 4c455f4153534552
00000a43 54494f4e2000    
00000a49 01               21867		.byte	1
00000a4a 56               21868		.byte	86
00000a4b 46424c5f4d454d5f 21869		.strz	"FBL_MEM_ENABLE_VERIFY_OUTPUT "
00000a53 454e41424c455f56
00000a5b 45524946595f4f55
00000a63 545055542000    
00000a69 01               21870		.byte	1
00000a6a 57               21871		.byte	87
00000a6b 46424c5f4d454d5f 21872		.strz	"FBL_MEM_VERIFY_SEGMENTATION 0x40"
00000a73 5645524946595f53
00000a7b 45474d454e544154
00000a83 494f4e2030783430
00000a8b 00              
00000a8c 01               21873		.byte	1
00000a8d 5a               21874		.byte	90
00000a8e 46424c5f4d454d5f 21875		.strz	"FBL_MEM_WRITE_SEGMENTATION 0x0100"
00000a96 57524954455f5345
00000a9e 474d454e54415449
00000aa6 4f4e203078303130
00000aae 3000            
00000ab0 01               21876		.byte	1
00000ab1 5b               21877		.byte	91
00000ab2 46424c5f454e4142 21878		.strz	"FBL_ENABLE_UNALIGNED_DATA_TRANSFER "
00000aba 4c455f554e414c49
00000ac2 474e45445f444154
00000aca 415f5452414e5346
00000ad2 45522000        
00000ad6 01               21879		.byte	1
00000ad7 5f               21880		.byte	95
00000ad8 464c4153485f5349 21881		.strz	"FLASH_SIZE 1536"
00000ae0 5a45203135333600
00000ae8 01               21882		.byte	1
00000ae9 72               21883		.byte	114

                                   Fri Apr 10 08:32:15 2020           Page 392
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
00000aea 53574d5f44415441 21884		.strz	"SWM_DATA_MAX_NOAR 8"
00000af2 5f4d41585f4e4f41
00000afa 52203800        
00000afe 01               21885		.byte	1
00000aff 74               21886		.byte	116
00000b00 46424c5f454e4142 21887		.strz	"FBL_ENABLE_SEC_ACCESS_DELAY "
00000b08 4c455f5345435f41
00000b10 43434553535f4445
00000b18 4c41592000      
00000b1d 01               21888		.byte	1
00000b1e 8201             21889		.byte	130,1
00000b20 46424c5f454e4142 21890		.strz	"FBL_ENABLE_CAN_CONFIRMATION "
00000b28 4c455f43414e5f43
00000b30 4f4e4649524d4154
00000b38 494f4e2000      
00000b3d 01               21891		.byte	1
00000b3e 8301             21892		.byte	131,1
00000b40 46424c5f454e4142 21893		.strz	"FBL_ENABLE_SECMOD_VECTOR "
00000b48 4c455f5345434d4f
00000b50 445f564543544f52
00000b58 2000            
00000b5a 01               21894		.byte	1
00000b5b 8501             21895		.byte	133,1
00000b5d 46424c5f454e4142 21896		.strz	"FBL_ENABLE_WRAPPER_NV "
00000b65 4c455f5752415050
00000b6d 45525f4e562000  
00000b74 01               21897		.byte	1
00000b75 8d01             21898		.byte	141,1
00000b77 46424c5f454e4142 21899		.strz	"FBL_ENABLE_APPL_STATE_TASK "
00000b7f 4c455f4150504c5f
00000b87 53544154455f5441
00000b8f 534b2000        
00000b93 01               21900		.byte	1
00000b94 9001             21901		.byte	144,1
00000b96 46424c5f454e4142 21902		.strz	"FBL_ENABLE_APPL_TIMER_TASK "
00000b9e 4c455f4150504c5f
00000ba6 54494d45525f5441
00000bae 534b2000        
00000bb2 01               21903		.byte	1
00000bb3 9901             21904		.byte	153,1
00000bb5 46424c5f5346525f 21905		.strz	"FBL_SFR_SIU_TYPE 2u"
00000bbd 5349555f54595045
00000bc5 20327500        
00000bc9 01               21906		.byte	1
00000bca 9f01             21907		.byte	159,1
00000bcc 46424c5f4d455f42 21908		.strz	"FBL_ME_BASE 0xFFFB8000ul"
00000bd4 4153452030784646
00000bdc 464238303030756c
00000be4 00              
00000be5 01               21909		.byte	1
00000be6 a001             21910		.byte	160,1
00000be8 46424c5f434d555f 21911		.strz	"FBL_CMU_BASE 0xC3FE0100ul"
00000bf0 4241534520307843
00000bf8 3346453031303075
00000c00 6c00            
00000c02 01               21912		.byte	1
00000c03 a101             21913		.byte	161,1
00000c05 46424c5f434d555f 21914		.strz	"FBL_CMU_PLL_BASE 0xFFFB0200ul"
00000c0d 504c4c5f42415345
00000c15 2030784646464230
00000c1d 323030756c00    
00000c23 01               21915		.byte	1
00000c24 a201             21916		.byte	162,1
00000c26 46424c5f43474d5f 21917		.strz	"FBL_CGM_BASE 0xFFFB0000ul"
00000c2e 4241534520307846
00000c36 4646423030303075
00000c3e 6c00            
00000c40 01               21918		.byte	1
00000c41 a301             21919		.byte	163,1
00000c43 46424c5f52474d5f 21920		.strz	"FBL_RGM_BASE 0xFFFA8000ul"
00000c4b 4241534520307846
00000c53 4646413830303075
00000c5b 6c00            
00000c5d 01               21921		.byte	1
00000c5e a901             21922		.byte	169,1
00000c60 46424c5f5346525f 21923		.strz	"FBL_SFR_BASE_ADRESSES_PRECONFIGURED "
00000c68 424153455f414452
00000c70 45535345535f5052
00000c78 45434f4e46494755
00000c80 5245442000      
00000c85 04               21924		.byte	4
00000c86 03               21925		.byte	3
00000c87 5a               21926		.byte	90
00000c88 15               21927		.byte	21
00000c89 03               21928		.byte	3
00000c8a 54               21929		.byte	84
00000c8b 16               21930		.byte	22
00000c8c 04               21931		.byte	4
00000c8d 01               21932		.byte	1
00000c8e 5a               21933		.byte	90
00000c8f 46424c5f4445434c 21934		.strz	"FBL_DECL_ASSERT_EXTENDED_INFO(n) n"
00000c97 5f4153534552545f
00000c9f 455854454e444544
00000ca7 5f494e464f286e29
00000caf 206e00          
00000cb2 01               21935		.byte	1
00000cb3 5b               21936		.byte	91
00000cb4 46424c5f55534544 21937		.strz	"FBL_USED_ASSERT_EXTENDED_INFO(n) (n)"
00000cbc 5f4153534552545f
00000cc4 455854454e444544
00000ccc 5f494e464f286e29
00000cd4 20286e2900      
00000cd9 01               21938		.byte	1
00000cda 62               21939		.byte	98

                                   Fri Apr 10 08:32:15 2020           Page 393
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
00000cdb 6173736572744662 21940		.strz	"assertFblInternal(p,e) if (!(p)) ApplFblFatalError(FBL_USED_ASSERT_EXTENDED_INFO(e))"
00000ce3 6c496e7465726e61
00000ceb 6c28702c65292069
00000cf3 6620282128702929
00000cfb 204170706c46626c
00000d03 466174616c457272
00000d0b 6f722846424c5f55
00000d13 5345445f41535345
00000d1b 52545f455854454e
00000d23 4445445f494e464f
00000d2b 2865292900      
00000d30 04               21941		.byte	4
00000d31 01               21942		.byte	1
00000d32 6c               21943		.byte	108
00000d33 46424c5f4445465f 21944		.strz	"FBL_DEF_ENABLE_NON_KB_MAIN "
00000d3b 454e41424c455f4e
00000d43 4f4e5f4b425f4d41
00000d4b 494e2000        
00000d4f 01               21945		.byte	1
00000d50 7e               21946		.byte	126
00000d51 6b46626c4f6b2030 21947		.strz	"kFblOk 0x00u"
00000d59 7830307500      
00000d5e 01               21948		.byte	1
00000d5f 7f               21949		.byte	127
00000d60 6b46626c4661696c 21950		.strz	"kFblFailed 0x01u"
00000d68 6564203078303175
00000d70 00              
00000d71 01               21951		.byte	1
00000d72 9501             21952		.byte	149,1
00000d74 46424c5f52455045 21953		.strz	"FBL_REPEAT_CALL_CYCLE 1"
00000d7c 41545f43414c4c5f
00000d84 4359434c45203100
00000d8c 01               21954		.byte	1
00000d8d 9a01             21955		.byte	154,1
00000d8f 46424c5f43414c4c 21956		.strz	"FBL_CALL_TYPE "
00000d97 5f545950452000  
00000d9e 01               21957		.byte	1
00000d9f 9e01             21958		.byte	158,1
00000da1 565f43414c4c4241 21959		.strz	"V_CALLBACK_NEAR "
00000da9 434b5f4e45415220
00000db1 00              
00000db2 01               21960		.byte	1
00000db3 a101             21961		.byte	161,1
00000db5 565f4150495f4e45 21962		.strz	"V_API_NEAR "
00000dbd 41522000        
00000dc1 01               21963		.byte	1
00000dc2 d601             21964		.byte	214,1
00000dc4 46626c496e766572 21965		.strz	"FblInvertBits(x,type) ((type)~((type)(x)))"
00000dcc 744269747328782c
00000dd4 7479706529202828
00000ddc 74797065297e2828
00000de4 7479706529287829
00000dec 292900          
00000def 01               21966		.byte	1
00000df0 8502             21967		.byte	133,2
00000df2 46424c5f53544154 21968		.strz	"FBL_STATE_BITS 32"
00000dfa 455f424954532033
00000e02 3200            
00000e04 01               21969		.byte	1
00000e05 8f02             21970		.byte	143,2
00000e07 46424c5f53544154 21971		.strz	"FBL_STATE_MASK(bit) ((tFblStateBitmap)(1ul << ((bit) % FBL_STATE_BITS)))"
00000e0f 455f4d41534b2862
00000e17 6974292028287446
00000e1f 626c537461746542
00000e27 69746d6170292831
00000e2f 756c203c3c202828
00000e37 6269742920252046
00000e3f 424c5f5354415445
00000e47 5f42495453292929
00000e4f 00              
00000e50 01               21972		.byte	1
00000e51 9302             21973		.byte	147,2
00000e53 46424c5f53544154 21974		.strz	"FBL_STATE_INDEX(bit) ((bit) / FBL_STATE_BITS)"
00000e5b 455f494e44455828
00000e63 6269742920282862
00000e6b 697429202f204642
00000e73 4c5f53544154455f
00000e7b 424954532900    
00000e81 01               21975		.byte	1
00000e82 9702             21976		.byte	151,2
00000e84 46424c5f53544154 21977		.strz	"FBL_STATE_TEST(arr,bit) (((arr)[FBL_STATE_INDEX(bit)] & FBL_STATE_MASK(bit)) == FBL_STATE_MASK(bit))"
00000e8c 455f544553542861
00000e94 72722c6269742920
00000e9c 282828617272295b
00000ea4 46424c5f53544154
00000eac 455f494e44455828
00000eb4 626974295d202620
00000ebc 46424c5f53544154
00000ec4 455f4d41534b2862
00000ecc 69742929203d3d20
00000ed4 46424c5f53544154
00000edc 455f4d41534b2862
00000ee4 6974292900      
00000ee9 01               21978		.byte	1
00000eea b002             21979		.byte	176,2
00000eec 4d454d53495a455f 21980		.strz	"MEMSIZE_OK "
00000ef4 4f4b2000        
00000ef8 04               21981		.byte	4
00000ef9 03               21982		.byte	3
00000efa 68               21983		.byte	104
00000efb 17               21984		.byte	23
00000efc 01               21985		.byte	1
00000efd 3b               21986		.byte	59
00000efe 6b4e724f6656616c 21987		.strz	"kNrOfValidationBytes 1"
00000f06 69646174696f6e42
00000f0e 79746573203100  
00000f15 01               21988		.byte	1
00000f16 5c               21989		.byte	92
00000f17 46424c5f4c42545f 21990		.strz	"FBL_LBT_START_SEC_CONST "
00000f1f 53544152545f5345
00000f27 435f434f4e535420
00000f2f 00              
00000f30 03               21991		.byte	3
00000f31 5d               21992		.byte	93
00000f32 18               21993		.byte	24
00000f33 01               21994		.byte	1
00000f34 2b               21995		.byte	43

                                   Fri Apr 10 08:32:15 2020           Page 394
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
00000f35 46424c5f4d454d4d 21996		.strz	"FBL_MEMMAP_ERROR "
00000f3d 41505f4552524f52
00000f45 2000            
00000f47 04               21997		.byte	4
00000f48 01               21998		.byte	1
00000f49 5f               21999		.byte	95
00000f4a 46424c5f4c42545f 22000		.strz	"FBL_LBT_STOP_SEC_CONST "
00000f52 53544f505f534543
00000f5a 5f434f4e53542000
00000f62 03               22001		.byte	3
00000f63 60               22002		.byte	96
00000f64 18               22003		.byte	24
00000f65 01               22004		.byte	1
00000f66 2b               22005		.byte	43
00000f67 46424c5f4d454d4d 22006		.strz	"FBL_MEMMAP_ERROR "
00000f6f 41505f4552524f52
00000f77 2000            
00000f79 04               22007		.byte	4
00000f7a 04               22008		.byte	4
00000f7b 03               22009		.byte	3
00000f7c 6e               22010		.byte	110
00000f7d 19               22011		.byte	25
00000f7e 01               22012		.byte	1
00000f7f 54               22013		.byte	84
00000f80 464c4153485f5345 22014		.strz	"FLASH_SEGMENT_SIZE 8u"
00000f88 474d454e545f5349
00000f90 5a4520387500    
00000f96 04               22015		.byte	4
00000f97 03               22016		.byte	3
00000f98 6f               22017		.byte	111
00000f99 1a               22018		.byte	26
00000f9a 04               22019		.byte	4
00000f9b 03               22020		.byte	3
00000f9c 75               22021		.byte	117
00000f9d 1b               22022		.byte	27
00000f9e 01               22023		.byte	1
00000f9f 7c               22024		.byte	124
00000fa0 494e495457415443 22025		.strz	"INITWATCHDOG_START_SEC_CODE_EXPORT "
00000fa8 48444f475f535441
00000fb0 52545f5345435f43
00000fb8 4f44455f4558504f
00000fc0 52542000        
00000fc4 03               22026		.byte	3
00000fc5 7d               22027		.byte	125
00000fc6 18               22028		.byte	24
00000fc7 01               22029		.byte	1
00000fc8 2b               22030		.byte	43
00000fc9 46424c5f4d454d4d 22031		.strz	"FBL_MEMMAP_ERROR "
00000fd1 41505f4552524f52
00000fd9 2000            
00000fdb 04               22032		.byte	4
00000fdc 01               22033		.byte	1
00000fdd 8001             22034		.byte	128,1
00000fdf 494e495457415443 22035		.strz	"INITWATCHDOG_STOP_SEC_CODE_EXPORT "
00000fe7 48444f475f53544f
00000fef 505f5345435f434f
00000ff7 44455f4558504f52
00000fff 542000          
00001002 03               22036		.byte	3
00001003 8101             22037		.byte	129,1
00001005 18               22038		.byte	24
00001006 01               22039		.byte	1
00001007 2b               22040		.byte	43
00001008 46424c5f4d454d4d 22041		.strz	"FBL_MEMMAP_ERROR "
00001010 41505f4552524f52
00001018 2000            
0000101a 04               22042		.byte	4
0000101b 01               22043		.byte	1
0000101c 8301             22044		.byte	131,1
0000101e 4c4f4f4b464f5257 22045		.strz	"LOOKFORWATCHDOG_START_SEC_CODE_EXPORT "
00001026 41544348444f475f
0000102e 53544152545f5345
00001036 435f434f44455f45
0000103e 58504f52542000  
00001045 03               22046		.byte	3
00001046 8401             22047		.byte	132,1
00001048 18               22048		.byte	24
00001049 01               22049		.byte	1
0000104a 2b               22050		.byte	43
0000104b 46424c5f4d454d4d 22051		.strz	"FBL_MEMMAP_ERROR "
00001053 41505f4552524f52
0000105b 2000            

                                   Fri Apr 10 08:32:15 2020           Page 395
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
0000105d 04               22052		.byte	4
0000105e 01               22053		.byte	1
0000105f 8801             22054		.byte	136,1
00001061 4c4f4f4b464f5257 22055		.strz	"LOOKFORWATCHDOG_STOP_SEC_CODE_EXPORT "
00001069 41544348444f475f
00001071 53544f505f534543
00001079 5f434f44455f4558
00001081 504f52542000    
00001087 03               22056		.byte	3
00001088 8901             22057		.byte	137,1
0000108a 18               22058		.byte	24
0000108b 01               22059		.byte	1
0000108c 2b               22060		.byte	43
0000108d 46424c5f4d454d4d 22061		.strz	"FBL_MEMMAP_ERROR "
00001095 41505f4552524f52
0000109d 2000            
0000109f 04               22062		.byte	4
000010a0 01               22063		.byte	1
000010a1 8b01             22064		.byte	139,1
000010a3 4c4f4f4b464f5257 22065		.strz	"LOOKFORWATCHDOG_START_SEC_CODE_EXPORT "
000010ab 41544348444f475f
000010b3 53544152545f5345
000010bb 435f434f44455f45
000010c3 58504f52542000  
000010ca 03               22066		.byte	3
000010cb 8c01             22067		.byte	140,1
000010cd 18               22068		.byte	24
000010ce 01               22069		.byte	1
000010cf 2b               22070		.byte	43
000010d0 46424c5f4d454d4d 22071		.strz	"FBL_MEMMAP_ERROR "
000010d8 41505f4552524f52
000010e0 2000            
000010e2 04               22072		.byte	4
000010e3 01               22073		.byte	1
000010e4 9001             22074		.byte	144,1
000010e6 4c4f4f4b464f5257 22075		.strz	"LOOKFORWATCHDOG_STOP_SEC_CODE_EXPORT "
000010ee 41544348444f475f
000010f6 53544f505f534543
000010fe 5f434f44455f4558
00001106 504f52542000    
0000110c 03               22076		.byte	3
0000110d 9101             22077		.byte	145,1
0000110f 18               22078		.byte	24
00001110 01               22079		.byte	1
00001111 2b               22080		.byte	43
00001112 46424c5f4d454d4d 22081		.strz	"FBL_MEMMAP_ERROR "
0000111a 41505f4552524f52
00001122 2000            
00001124 04               22082		.byte	4
00001125 04               22083		.byte	4
00001126 03               22084		.byte	3
00001127 76               22085		.byte	118
00001128 1c               22086		.byte	28
00001129 01               22087		.byte	1
0000112a 4d               22088		.byte	77
0000112b 494f5f455f4f4b20 22089		.strz	"IO_E_OK ((vuint8)0x00u)"
00001133 28287675696e7438
0000113b 2930783030752900
00001143 04               22090		.byte	4
00001144 03               22091		.byte	3
00001145 7e               22092		.byte	126
00001146 1d               22093		.byte	29
00001147 01               22094		.byte	1
00001148 c101             22095		.byte	193,1
0000114a 4d656d4472697665 22096		.strz	"MemDriver_SegmentSize (memDrvLst[FlashBlock[memSegment].device].segmentSize)"
00001152 725f5365676d656e
0000115a 7453697a6520286d
00001162 656d4472764c7374
0000116a 5b466c617368426c
00001172 6f636b5b6d656d53
0000117a 65676d656e745d2e
00001182 6465766963655d2e
0000118a 7365676d656e7453
00001192 697a652900      
00001197 01               22097		.byte	1
00001198 ca01             22098		.byte	202,1
0000119a 46424c5f4d41585f 22099		.strz	"FBL_MAX_SEGMENT_SIZE_MIO FBL_MEMDRV_SEGMENT_SIZE"
000011a2 5345474d454e545f
000011aa 53495a455f4d494f
000011b2 2046424c5f4d454d
000011ba 4452565f5345474d
000011c2 454e545f53495a45
000011ca 00              
000011cb 01               22100		.byte	1
000011cc e601             22101		.byte	230,1
000011ce 46424c5f4d41585f 22102		.strz	"FBL_MAX_SEGMENT_SIZE FBL_MAX_SEGMENT_SIZE_MIO"
000011d6 5345474d454e545f
000011de 53495a452046424c
000011e6 5f4d41585f534547
000011ee 4d454e545f53495a
000011f6 455f4d494f00    
000011fc 01               22103		.byte	1
000011fd 8702             22104		.byte	135,2
000011ff 46424c5f4d494f5f 22105		.strz	"FBL_MIO_DEFAULT_FCT_PTR "
00001207 44454641554c545f
0000120f 4643545f50545220
00001217 00              
00001218 01               22106		.byte	1
00001219 a002             22107		.byte	160,2

                                   Fri Apr 10 08:32:15 2020           Page 396
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
0000121b 46424c4d494f5f53 22108		.strz	"FBLMIO_START_SEC_CODE "
00001223 544152545f534543
0000122b 5f434f44452000  
00001232 03               22109		.byte	3
00001233 a102             22110		.byte	161,2
00001235 18               22111		.byte	24
00001236 01               22112		.byte	1
00001237 2b               22113		.byte	43
00001238 46424c5f4d454d4d 22114		.strz	"FBL_MEMMAP_ERROR "
00001240 41505f4552524f52
00001248 2000            
0000124a 04               22115		.byte	4
0000124b 01               22116		.byte	1
0000124c b102             22117		.byte	177,2
0000124e 46424c4d494f5f53 22118		.strz	"FBLMIO_STOP_SEC_CODE "
00001256 544f505f5345435f
0000125e 434f44452000    
00001264 03               22119		.byte	3
00001265 b202             22120		.byte	178,2
00001267 18               22121		.byte	24
00001268 01               22122		.byte	1
00001269 2b               22123		.byte	43
0000126a 46424c5f4d454d4d 22124		.strz	"FBL_MEMMAP_ERROR "
00001272 41505f4552524f52
0000127a 2000            
0000127c 04               22125		.byte	4
0000127d 04               22126		.byte	4
0000127e 03               22127		.byte	3
0000127f 7f               22128		.byte	127
00001280 1e               22129		.byte	30
00001281 01               22130		.byte	1
00001282 66               22131		.byte	102
00001283 46424c464c494f5f 22132		.strz	"FBLFLIO_FLASHCODE_START_SEC_VAR "
0000128b 464c415348434f44
00001293 455f53544152545f
0000129b 5345435f56415220
000012a3 00              
000012a4 03               22133		.byte	3
000012a5 67               22134		.byte	103
000012a6 18               22135		.byte	24
000012a7 01               22136		.byte	1
000012a8 2b               22137		.byte	43
000012a9 46424c5f4d454d4d 22138		.strz	"FBL_MEMMAP_ERROR "
000012b1 41505f4552524f52
000012b9 2000            
000012bb 04               22139		.byte	4
000012bc 01               22140		.byte	1
000012bd 69               22141		.byte	105
000012be 46424c464c494f5f 22142		.strz	"FBLFLIO_FLASHCODE_STOP_SEC_VAR "
000012c6 464c415348434f44
000012ce 455f53544f505f53
000012d6 45435f5641522000
000012de 03               22143		.byte	3
000012df 6a               22144		.byte	106
000012e0 18               22145		.byte	24
000012e1 01               22146		.byte	1
000012e2 2b               22147		.byte	43
000012e3 46424c5f4d454d4d 22148		.strz	"FBL_MEMMAP_ERROR "
000012eb 41505f4552524f52
000012f3 2000            
000012f5 04               22149		.byte	4
000012f6 04               22150		.byte	4
000012f7 03               22151		.byte	3
000012f8 8001             22152		.byte	128,1
000012fa 1f               22153		.byte	31
000012fb 04               22154		.byte	4
000012fc 03               22155		.byte	3
000012fd 8101             22156		.byte	129,1
000012ff 20               22157		.byte	32
00001300 03               22158		.byte	3
00001301 2a               22159		.byte	42
00001302 02               22160		.byte	2
00001303 04               22161		.byte	4
00001304 03               22162		.byte	3
00001305 2b               22163		.byte	43

                                   Fri Apr 10 08:32:15 2020           Page 397
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
00001306 21               22164		.byte	33
00001307 01               22165		.byte	1
00001308 49               22166		.byte	73
00001309 45455044554d4d59 22167		.strz	"EEPDUMMY_FULL_START_SEC_CODE "
00001311 5f46554c4c5f5354
00001319 4152545f5345435f
00001321 434f44452000    
00001327 03               22168		.byte	3
00001328 4a               22169		.byte	74
00001329 18               22170		.byte	24
0000132a 01               22171		.byte	1
0000132b 2b               22172		.byte	43
0000132c 46424c5f4d454d4d 22173		.strz	"FBL_MEMMAP_ERROR "
00001334 41505f4552524f52
0000133c 2000            
0000133e 04               22174		.byte	4
0000133f 01               22175		.byte	1
00001340 54               22176		.byte	84
00001341 45455044554d4d59 22177		.strz	"EEPDUMMY_FULL_STOP_SEC_CODE "
00001349 5f46554c4c5f5354
00001351 4f505f5345435f43
00001359 4f44452000      
0000135e 03               22178		.byte	3
0000135f 55               22179		.byte	85
00001360 18               22180		.byte	24
00001361 01               22181		.byte	1
00001362 2b               22182		.byte	43
00001363 46424c5f4d454d4d 22183		.strz	"FBL_MEMMAP_ERROR "
0000136b 41505f4552524f52
00001373 2000            
00001375 04               22184		.byte	4
00001376 04               22185		.byte	4
00001377 04               22186		.byte	4
00001378 03               22187		.byte	3
00001379 8401             22188		.byte	132,1
0000137b 22               22189		.byte	34
0000137c 01               22190		.byte	1
0000137d 55               22191		.byte	85
0000137e 46424c5f4150504c 22192		.strz	"FBL_APPLVECT_START_SEC_CONST "
00001386 564543545f535441
0000138e 52545f5345435f43
00001396 4f4e53542000    
0000139c 03               22193		.byte	3
0000139d 56               22194		.byte	86
0000139e 18               22195		.byte	24
0000139f 01               22196		.byte	1
000013a0 2b               22197		.byte	43
000013a1 46424c5f4d454d4d 22198		.strz	"FBL_MEMMAP_ERROR "
000013a9 41505f4552524f52
000013b1 2000            
000013b3 04               22199		.byte	4
000013b4 01               22200		.byte	1
000013b5 5a               22201		.byte	90
000013b6 46424c5f4150504c 22202		.strz	"FBL_APPLVECT_STOP_SEC_CONST "
000013be 564543545f53544f
000013c6 505f5345435f434f
000013ce 4e53542000      
000013d3 03               22203		.byte	3
000013d4 5b               22204		.byte	91
000013d5 18               22205		.byte	24
000013d6 01               22206		.byte	1
000013d7 2b               22207		.byte	43
000013d8 46424c5f4d454d4d 22208		.strz	"FBL_MEMMAP_ERROR "
000013e0 41505f4552524f52
000013e8 2000            
000013ea 04               22209		.byte	4
000013eb 04               22210		.byte	4
000013ec 03               22211		.byte	3
000013ed 8801             22212		.byte	136,1
000013ef 23               22213		.byte	35
000013f0 03               22214		.byte	3
000013f1 3c               22215		.byte	60
000013f2 24               22216		.byte	36
000013f3 01               22217		.byte	1
000013f4 49               22218		.byte	73
000013f5 46424c5f43414e5f 22219		.strz	"FBL_CAN_NUMBER_OF_RX_ID 2u"
000013fd 4e554d4245525f4f
00001405 465f52585f494420
0000140d 327500          

                                   Fri Apr 10 08:32:15 2020           Page 398
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
00001410 01               22220		.byte	1
00001411 4a               22221		.byte	74
00001412 46424c5f43414e5f 22222		.strz	"FBL_CAN_NUMBER_OF_RANGES 0u"
0000141a 4e554d4245525f4f
00001422 465f52414e474553
0000142a 20307500        
0000142e 01               22223		.byte	1
0000142f 4b               22224		.byte	75
00001430 46424c5f4e554d42 22225		.strz	"FBL_NUMBER_OF_RX_ID (FBL_CAN_NUMBER_OF_RX_ID + FBL_CAN_NUMBER_OF_RANGES)"
00001438 45525f4f465f5258
00001440 5f4944202846424c
00001448 5f43414e5f4e554d
00001450 4245525f4f465f52
00001458 585f4944202b2046
00001460 424c5f43414e5f4e
00001468 554d4245525f4f46
00001470 5f52414e47455329
00001478 00              
00001479 01               22226		.byte	1
0000147a 54               22227		.byte	84
0000147b 46424c5f4e554d42 22228		.strz	"FBL_NUMBER_OF_TX_ID 1u"
00001483 45525f4f465f5458
0000148b 5f494420317500  
00001492 01               22229		.byte	1
00001493 57               22230		.byte	87
00001494 46424c5f43575f43 22231		.strz	"FBL_CW_CFG_START_SEC_CONST "
0000149c 46475f5354415254
000014a4 5f5345435f434f4e
000014ac 53542000        
000014b0 03               22232		.byte	3
000014b1 58               22233		.byte	88
000014b2 18               22234		.byte	24
000014b3 01               22235		.byte	1
000014b4 2b               22236		.byte	43
000014b5 46424c5f4d454d4d 22237		.strz	"FBL_MEMMAP_ERROR "
000014bd 41505f4552524f52
000014c5 2000            
000014c7 04               22238		.byte	4
000014c8 01               22239		.byte	1
000014c9 67               22240		.byte	103
000014ca 46424c5f43575f43 22241		.strz	"FBL_CW_CFG_STOP_SEC_CONST "
000014d2 46475f53544f505f
000014da 5345435f434f4e53
000014e2 542000          
000014e5 03               22242		.byte	3
000014e6 68               22243		.byte	104
000014e7 18               22244		.byte	24
000014e8 01               22245		.byte	1
000014e9 2b               22246		.byte	43
000014ea 46424c5f4d454d4d 22247		.strz	"FBL_MEMMAP_ERROR "
000014f2 41505f4552524f52
000014fa 2000            
000014fc 04               22248		.byte	4
000014fd 01               22249		.byte	1
000014fe 6d               22250		.byte	109
000014ff 46424c5f43575f45 22251		.strz	"FBL_CW_ENABLE_PHYSICAL_REQUEST_HANDLER "
00001507 4e41424c455f5048
0000150f 59534943414c5f52
00001517 4551554553545f48
0000151f 414e444c45522000
00001527 01               22252		.byte	1
00001528 6e               22253		.byte	110
00001529 46424c5f43575f45 22254		.strz	"FBL_CW_ENABLE_FUNCTIONAL_REQUEST_HANDLER "
00001531 4e41424c455f4655
00001539 4e4354494f4e414c
00001541 5f52455155455354
00001549 5f48414e444c4552
00001551 2000            
00001553 04               22255		.byte	4
00001554 03               22256		.byte	3
00001555 4d               22257		.byte	77
00001556 25               22258		.byte	37
00001557 03               22259		.byte	3
00001558 54               22260		.byte	84
00001559 26               22261		.byte	38
0000155a 04               22262		.byte	4
0000155b 01               22263		.byte	1
0000155c 74               22264		.byte	116
0000155d 4d554c5449504c45 22265		.strz	"MULTIPLE_RECEIVE_BUFFER "
00001565 5f52454345495645
0000156d 5f42554646455220
00001575 00              
00001576 01               22266		.byte	1
00001577 9902             22267		.byte	153,2
00001579 6b46626c43616e4d 22268		.strz	"kFblCanMaxMB 16"
00001581 61784d4220313600
00001589 01               22269		.byte	1
0000158a a102             22270		.byte	161,2
0000158c 4d454d4350592864 22271		.strz	"MEMCPY(dst,src,len) FblOwnMemcpy( (void *)(dst), (const void *)(src), (unsigned int)(len))"
00001594 73742c7372632c6c
0000159c 656e292046626c4f
000015a4 776e4d656d637079
000015ac 282028766f696420
000015b4 2a2928647374292c
000015bc 2028636f6e737420
000015c4 766f6964202a2928
000015cc 737263292c202875
000015d4 6e7369676e656420
000015dc 696e7429286c656e
000015e4 292900          
000015e7 01               22272		.byte	1
000015e8 cd03             22273		.byte	205,3
000015ea 46424c48575f5241 22274		.strz	"FBLHW_RAMCODE_START_SEC_CODE "
000015f2 4d434f44455f5354
000015fa 4152545f5345435f
00001602 434f44452000    
00001608 03               22275		.byte	3

                                   Fri Apr 10 08:32:15 2020           Page 399
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
00001609 ce03             22276		.byte	206,3
0000160b 18               22277		.byte	24
0000160c 01               22278		.byte	1
0000160d 2b               22279		.byte	43
0000160e 46424c5f4d454d4d 22280		.strz	"FBL_MEMMAP_ERROR "
00001616 41505f4552524f52
0000161e 2000            
00001620 04               22281		.byte	4
00001621 01               22282		.byte	1
00001622 d003             22283		.byte	208,3
00001624 46424c48575f5241 22284		.strz	"FBLHW_RAMCODE_STOP_SEC_CODE "
0000162c 4d434f44455f5354
00001634 4f505f5345435f43
0000163c 4f44452000      
00001641 03               22285		.byte	3
00001642 d103             22286		.byte	209,3
00001644 18               22287		.byte	24
00001645 01               22288		.byte	1
00001646 2b               22289		.byte	43
00001647 46424c5f4d454d4d 22290		.strz	"FBL_MEMMAP_ERROR "
0000164f 41505f4552524f52
00001657 2000            
00001659 04               22291		.byte	4
0000165a 01               22292		.byte	1
0000165b d703             22293		.byte	215,3
0000165d 46424c48575f5354 22294		.strz	"FBLHW_START_SEC_CODE "
00001665 4152545f5345435f
0000166d 434f44452000    
00001673 03               22295		.byte	3
00001674 d803             22296		.byte	216,3
00001676 18               22297		.byte	24
00001677 01               22298		.byte	1
00001678 2b               22299		.byte	43
00001679 46424c5f4d454d4d 22300		.strz	"FBL_MEMMAP_ERROR "
00001681 41505f4552524f52
00001689 2000            
0000168b 04               22301		.byte	4
0000168c 01               22302		.byte	1
0000168d da03             22303		.byte	218,3
0000168f 46424c48575f5354 22304		.strz	"FBLHW_STOP_SEC_CODE "
00001697 4f505f5345435f43
0000169f 4f44452000      
000016a4 03               22305		.byte	3
000016a5 db03             22306		.byte	219,3
000016a7 18               22307		.byte	24
000016a8 01               22308		.byte	1
000016a9 2b               22309		.byte	43
000016aa 46424c5f4d454d4d 22310		.strz	"FBL_MEMMAP_ERROR "
000016b2 41505f4552524f52
000016ba 2000            
000016bc 04               22311		.byte	4
000016bd 01               22312		.byte	1
000016be df03             22313		.byte	223,3
000016c0 46424c48575f4642 22314		.strz	"FBLHW_FBLCANTRANSMITTED_START_SEC_CODE "
000016c8 4c43414e5452414e
000016d0 534d49545445445f
000016d8 53544152545f5345
000016e0 435f434f44452000
000016e8 03               22315		.byte	3
000016e9 e003             22316		.byte	224,3
000016eb 18               22317		.byte	24
000016ec 01               22318		.byte	1
000016ed 2b               22319		.byte	43
000016ee 46424c5f4d454d4d 22320		.strz	"FBL_MEMMAP_ERROR "
000016f6 41505f4552524f52
000016fe 2000            
00001700 04               22321		.byte	4
00001701 01               22322		.byte	1
00001702 e203             22323		.byte	226,3
00001704 46424c48575f4642 22324		.strz	"FBLHW_FBLCANTRANSMITTED_STOP_SEC_CODE "
0000170c 4c43414e5452414e
00001714 534d49545445445f
0000171c 53544f505f534543
00001724 5f434f44452000  
0000172b 03               22325		.byte	3
0000172c e303             22326		.byte	227,3
0000172e 18               22327		.byte	24
0000172f 01               22328		.byte	1
00001730 2b               22329		.byte	43
00001731 46424c5f4d454d4d 22330		.strz	"FBL_MEMMAP_ERROR "
00001739 41505f4552524f52
00001741 2000            
00001743 04               22331		.byte	4

                                   Fri Apr 10 08:32:15 2020           Page 400
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
00001744 01               22332		.byte	1
00001745 e503             22333		.byte	229,3
00001747 46424c48575f5354 22334		.strz	"FBLHW_START_SEC_CODE "
0000174f 4152545f5345435f
00001757 434f44452000    
0000175d 03               22335		.byte	3
0000175e e603             22336		.byte	230,3
00001760 18               22337		.byte	24
00001761 01               22338		.byte	1
00001762 2b               22339		.byte	43
00001763 46424c5f4d454d4d 22340		.strz	"FBL_MEMMAP_ERROR "
0000176b 41505f4552524f52
00001773 2000            
00001775 04               22341		.byte	4
00001776 01               22342		.byte	1
00001777 e803             22343		.byte	232,3
00001779 46424c48575f5354 22344		.strz	"FBLHW_STOP_SEC_CODE "
00001781 4f505f5345435f43
00001789 4f44452000      
0000178e 03               22345		.byte	3
0000178f e903             22346		.byte	233,3
00001791 18               22347		.byte	24
00001792 01               22348		.byte	1
00001793 2b               22349		.byte	43
00001794 46424c5f4d454d4d 22350		.strz	"FBL_MEMMAP_ERROR "
0000179c 41505f4552524f52
000017a4 2000            
000017a6 04               22351		.byte	4
000017a7 01               22352		.byte	1
000017a8 f903             22353		.byte	249,3
000017aa 4d454d4350595f53 22354		.strz	"MEMCPY_START_SEC_CODE "
000017b2 544152545f534543
000017ba 5f434f44452000  
000017c1 03               22355		.byte	3
000017c2 fa03             22356		.byte	250,3
000017c4 18               22357		.byte	24
000017c5 01               22358		.byte	1
000017c6 2b               22359		.byte	43
000017c7 46424c5f4d454d4d 22360		.strz	"FBL_MEMMAP_ERROR "
000017cf 41505f4552524f52
000017d7 2000            
000017d9 04               22361		.byte	4
000017da 01               22362		.byte	1
000017db fd03             22363		.byte	253,3
000017dd 4d454d4350595f53 22364		.strz	"MEMCPY_STOP_SEC_CODE "
000017e5 544f505f5345435f
000017ed 434f44452000    
000017f3 03               22365		.byte	3
000017f4 fe03             22366		.byte	254,3
000017f6 18               22367		.byte	24
000017f7 01               22368		.byte	1
000017f8 2b               22369		.byte	43
000017f9 46424c5f4d454d4d 22370		.strz	"FBL_MEMMAP_ERROR "
00001801 41505f4552524f52
00001809 2000            
0000180b 04               22371		.byte	4
0000180c 04               22372		.byte	4
0000180d 03               22373		.byte	3
0000180e 4e               22374		.byte	78
0000180f 27               22375		.byte	39
00001810 01               22376		.byte	1
00001811 3b               22377		.byte	59
00001812 46424c5f54505f45 22378		.strz	"FBL_TP_ENABLE_ISO15765_2_2 "
0000181a 4e41424c455f4953
00001822 4f31353736355f32
0000182a 5f322000        
0000182e 01               22379		.byte	1
0000182f 41               22380		.byte	65
00001830 46424c5f54505f45 22381		.strz	"FBL_TP_ENABLE_CONFIRMATION_INTERRUPT "
00001838 4e41424c455f434f
00001840 4e4649524d415449
00001848 4f4e5f494e544552
00001850 525550542000    
00001856 04               22382		.byte	4
00001857 03               22383		.byte	3
00001858 4f               22384		.byte	79
00001859 28               22385		.byte	40
0000185a 01               22386		.byte	1
0000185b b101             22387		.byte	177,1

                                   Fri Apr 10 08:32:15 2020           Page 401
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
0000185d 46424c54505f5241 22388		.strz	"FBLTP_RAMCODE_START_SEC_CODE "
00001865 4d434f44455f5354
0000186d 4152545f5345435f
00001875 434f44452000    
0000187b 03               22389		.byte	3
0000187c b201             22390		.byte	178,1
0000187e 18               22391		.byte	24
0000187f 01               22392		.byte	1
00001880 2b               22393		.byte	43
00001881 46424c5f4d454d4d 22394		.strz	"FBL_MEMMAP_ERROR "
00001889 41505f4552524f52
00001891 2000            
00001893 04               22395		.byte	4
00001894 01               22396		.byte	1
00001895 c301             22397		.byte	195,1
00001897 46424c54505f5241 22398		.strz	"FBLTP_RAMCODE_STOP_SEC_CODE "
0000189f 4d434f44455f5354
000018a7 4f505f5345435f43
000018af 4f44452000      
000018b4 03               22399		.byte	3
000018b5 c401             22400		.byte	196,1
000018b7 18               22401		.byte	24
000018b8 01               22402		.byte	1
000018b9 2b               22403		.byte	43
000018ba 46424c5f4d454d4d 22404		.strz	"FBL_MEMMAP_ERROR "
000018c2 41505f4552524f52
000018ca 2000            
000018cc 04               22405		.byte	4
000018cd 04               22406		.byte	4
000018ce 01               22407		.byte	1
000018cf c601             22408		.byte	198,1
000018d1 46424c5f43575f46 22409		.strz	"FBL_CW_FULL_START_SEC_CODE "
000018d9 554c4c5f53544152
000018e1 545f5345435f434f
000018e9 44452000        
000018ed 03               22410		.byte	3
000018ee c701             22411		.byte	199,1
000018f0 18               22412		.byte	24
000018f1 01               22413		.byte	1
000018f2 2b               22414		.byte	43
000018f3 46424c5f4d454d4d 22415		.strz	"FBL_MEMMAP_ERROR "
000018fb 41505f4552524f52
00001903 2000            
00001905 04               22416		.byte	4
00001906 01               22417		.byte	1
00001907 cd01             22418		.byte	205,1
00001909 46424c5f43575f54 22419		.strz	"FBL_CW_TASK_START_SEC_CODE "
00001911 41534b5f53544152
00001919 545f5345435f434f
00001921 44452000        
00001925 03               22420		.byte	3
00001926 ce01             22421		.byte	206,1
00001928 18               22422		.byte	24
00001929 01               22423		.byte	1
0000192a 2b               22424		.byte	43
0000192b 46424c5f4d454d4d 22425		.strz	"FBL_MEMMAP_ERROR "
00001933 41505f4552524f52
0000193b 2000            
0000193d 04               22426		.byte	4
0000193e 01               22427		.byte	1
0000193f d101             22428		.byte	209,1
00001941 46424c5f43575f54 22429		.strz	"FBL_CW_TASK_STOP_SEC_CODE "
00001949 41534b5f53544f50
00001951 5f5345435f434f44
00001959 452000          
0000195c 03               22430		.byte	3
0000195d d201             22431		.byte	210,1
0000195f 18               22432		.byte	24
00001960 01               22433		.byte	1
00001961 2b               22434		.byte	43
00001962 46424c5f4d454d4d 22435		.strz	"FBL_MEMMAP_ERROR "
0000196a 41505f4552524f52
00001972 2000            
00001974 04               22436		.byte	4
00001975 01               22437		.byte	1
00001976 fa01             22438		.byte	250,1
00001978 46424c5f43575f46 22439		.strz	"FBL_CW_FULL_STOP_SEC_CODE "
00001980 554c4c5f53544f50
00001988 5f5345435f434f44
00001990 452000          
00001993 03               22440		.byte	3
00001994 fb01             22441		.byte	251,1
00001996 18               22442		.byte	24
00001997 01               22443		.byte	1

                                   Fri Apr 10 08:32:15 2020           Page 402
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
00001998 2b               22444		.byte	43
00001999 46424c5f4d454d4d 22445		.strz	"FBL_MEMMAP_ERROR "
000019a1 41505f4552524f52
000019a9 2000            
000019ab 04               22446		.byte	4
000019ac 04               22447		.byte	4
000019ad 03               22448		.byte	3
000019ae 8e01             22449		.byte	142,1
000019b0 29               22450		.byte	41
000019b1 03               22451		.byte	3
000019b2 39               22452		.byte	57
000019b3 2a               22453		.byte	42
000019b4 03               22454		.byte	3
000019b5 3b               22455		.byte	59
000019b6 2b               22456		.byte	43
000019b7 01               22457		.byte	1
000019b8 31               22458		.byte	49
000019b9 4e565f454e41424c 22459		.strz	"NV_ENABLE_ADDRESS_LOOKUP "
000019c1 455f414444524553
000019c9 535f4c4f4f4b5550
000019d1 2000            
000019d3 01               22460		.byte	1
000019d4 5f               22461		.byte	95
000019d5 6b45657053697a65 22462		.strz	"kEepSizeValidityFlags 0x01u"
000019dd 56616c6964697479
000019e5 466c616773203078
000019ed 30317500        
000019f1 04               22463		.byte	4
000019f2 04               22464		.byte	4
000019f3 04               22465		.byte	4
000019f4 03               22466		.byte	3
000019f5 9501             22467		.byte	149,1
000019f7 2c               22468		.byte	44
000019f8 01               22469		.byte	1
000019f9 40               22470		.byte	64
000019fa 46424c5f4642545f 22471		.strz	"FBL_FBT_START_SEC_CONST "
00001a02 53544152545f5345
00001a0a 435f434f4e535420
00001a12 00              
00001a13 03               22472		.byte	3
00001a14 41               22473		.byte	65
00001a15 18               22474		.byte	24
00001a16 01               22475		.byte	1
00001a17 2b               22476		.byte	43
00001a18 46424c5f4d454d4d 22477		.strz	"FBL_MEMMAP_ERROR "
00001a20 41505f4552524f52
00001a28 2000            
00001a2a 04               22478		.byte	4
00001a2b 01               22479		.byte	1
00001a2c 47               22480		.byte	71
00001a2d 46424c5f4642545f 22481		.strz	"FBL_FBT_STOP_SEC_CONST "
00001a35 53544f505f534543
00001a3d 5f434f4e53542000
00001a45 03               22482		.byte	3
00001a46 48               22483		.byte	72
00001a47 18               22484		.byte	24
00001a48 01               22485		.byte	1
00001a49 2b               22486		.byte	43
00001a4a 46424c5f4d454d4d 22487		.strz	"FBL_MEMMAP_ERROR "
00001a52 41505f4552524f52
00001a5a 2000            
00001a5c 04               22488		.byte	4
00001a5d 04               22489		.byte	4
00001a5e 03               22490		.byte	3
00001a5f a101             22491		.byte	161,1
00001a61 2d               22492		.byte	45
00001a62 03               22493		.byte	3
00001a63 4b               22494		.byte	75
00001a64 2e               22495		.byte	46
00001a65 01               22496		.byte	1
00001a66 56               22497		.byte	86
00001a67 46424c5f44494147 22498		.strz	"FBL_DIAG_ENABLE_CORE_SEGMENTHANDLING "
00001a6f 5f454e41424c455f
00001a77 434f52455f534547
00001a7f 4d454e5448414e44
00001a87 4c494e472000    
00001a8d 01               22499		.byte	1

                                   Fri Apr 10 08:32:15 2020           Page 403
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
00001a8e 61               22500		.byte	97
00001a8f 6b44696167537461 22501		.strz	"kDiagStateIdxSecurityKeyAllowed (kDiagLastCoreStateIdx + 1u)"
00001a97 7465496478536563
00001a9f 75726974794b6579
00001aa7 416c6c6f77656420
00001aaf 286b446961674c61
00001ab7 7374436f72655374
00001abf 617465496478202b
00001ac7 2031752900      
00001acc 01               22502		.byte	1
00001acd 62               22503		.byte	98
00001ace 6b44696167537461 22504		.strz	"kDiagStateIdxSecurityUnlock (kDiagStateIdxSecurityKeyAllowed + 1u)"
00001ad6 7465496478536563
00001ade 7572697479556e6c
00001ae6 6f636b20286b4469
00001aee 6167537461746549
00001af6 6478536563757269
00001afe 74794b6579416c6c
00001b06 6f776564202b2031
00001b0e 752900          
00001b11 01               22505		.byte	1
00001b12 63               22506		.byte	99
00001b13 6b44696167537461 22507		.strz	"kDiagStateIdxFingerprintValid (kDiagStateIdxSecurityUnlock + 1u)"
00001b1b 746549647846696e
00001b23 6765727072696e74
00001b2b 56616c696420286b
00001b33 4469616753746174
00001b3b 6549647853656375
00001b43 72697479556e6c6f
00001b4b 636b202b20317529
00001b53 00              
00001b54 01               22508		.byte	1
00001b55 64               22509		.byte	100
00001b56 6b44696167537461 22510		.strz	"kDiagStateIdxEraseSucceeded (kDiagStateIdxFingerprintValid + 1u)"
00001b5e 7465496478457261
00001b66 7365537563636565
00001b6e 64656420286b4469
00001b76 6167537461746549
00001b7e 647846696e676572
00001b86 7072696e7456616c
00001b8e 6964202b20317529
00001b96 00              
00001b97 01               22511		.byte	1
00001b98 65               22512		.byte	101
00001b99 6b44696167537461 22513		.strz	"kDiagStateIdxTransferDataAllowed (kDiagStateIdxEraseSucceeded + 1u)"
00001ba1 7465496478547261
00001ba9 6e73666572446174
00001bb1 61416c6c6f776564
00001bb9 20286b4469616753
00001bc1 7461746549647845
00001bc9 7261736553756363
00001bd1 6565646564202b20
00001bd9 31752900        
00001bdd 01               22514		.byte	1
00001bde 66               22515		.byte	102
00001bdf 6b44696167537461 22516		.strz	"kDiagStateIdxTransferDataSucceeded (kDiagStateIdxTransferDataAllowed + 1u)"
00001be7 7465496478547261
00001bef 6e73666572446174
00001bf7 6153756363656564
00001bff 656420286b446961
00001c07 6753746174654964
00001c0f 785472616e736665
00001c17 7244617461416c6c
00001c1f 6f776564202b2031
00001c27 752900          
00001c2a 01               22517		.byte	1
00001c2b 67               22518		.byte	103
00001c2c 6b44696167537461 22519		.strz	"kDiagStateIdxChecksumAllowed (kDiagStateIdxTransferDataSucceeded + 1u)"
00001c34 7465496478436865
00001c3c 636b73756d416c6c
00001c44 6f77656420286b44
00001c4c 6961675374617465
00001c54 4964785472616e73
00001c5c 6665724461746153
00001c64 7563636565646564
00001c6c 202b2031752900  
00001c73 01               22520		.byte	1
00001c74 69               22521		.byte	105
00001c75 6b446961674c6173 22522		.strz	"kDiagLastOemStateIdx kDiagStateIdxChecksumAllowed"
00001c7d 744f656d53746174
00001c85 65496478206b4469
00001c8d 6167537461746549
00001c95 6478436865636b73
00001c9d 756d416c6c6f7765
00001ca5 6400            
00001ca7 01               22523		.byte	1
00001ca8 ad02             22524		.byte	173,2
00001caa 46424c5f4552525f 22525		.strz	"FBL_ERR_FLASH_ERASE_ERROR 0x10u"
00001cb2 464c4153485f4552
00001cba 4153455f4552524f
00001cc2 5220307831307500
00001cca 01               22526		.byte	1
00001ccb ae02             22527		.byte	174,2
00001ccd 46424c5f4552525f 22528		.strz	"FBL_ERR_FLASH_PROG_ERROR 0x11u"
00001cd5 464c4153485f5052
00001cdd 4f475f4552524f52
00001ce5 20307831317500  
00001cec 01               22529		.byte	1
00001ced b302             22530		.byte	179,2
00001cef 46424c5f4552525f 22531		.strz	"FBL_ERR_TOO_MANY_SEGMENTS_IN_MODULE 0x22u"
00001cf7 544f4f5f4d414e59
00001cff 5f5345474d454e54
00001d07 535f494e5f4d4f44
00001d0f 554c452030783232
00001d17 7500            
00001d19 01               22532		.byte	1
00001d1a b402             22533		.byte	180,2
00001d1c 46424c5f4552525f 22534		.strz	"FBL_ERR_NO_MEMORY_REGION_FOUND 0x23u"
00001d24 4e4f5f4d454d4f52
00001d2c 595f524547494f4e
00001d34 5f464f554e442030
00001d3c 7832337500      
00001d41 01               22535		.byte	1
00001d42 c302             22536		.byte	195,2
00001d44 46424c5f4552525f 22537		.strz	"FBL_ERR_DATA_OVERFLOW 0x50u"
00001d4c 444154415f4f5645
00001d54 52464c4f57203078
00001d5c 35307500        
00001d60 01               22538		.byte	1
00001d61 c802             22539		.byte	200,2
00001d63 46626c4572725374 22540		.strz	"FblErrStatSetState(state) (errStatFblStates = (state))"
00001d6b 6174536574537461
00001d73 7465287374617465
00001d7b 2920286572725374
00001d83 617446626c537461
00001d8b 746573203d202873
00001d93 74617465292900  
00001d9a 01               22541		.byte	1
00001d9b c902             22542		.byte	201,2
00001d9d 46626c4572725374 22543		.strz	"FblErrStatSetFlashDrvError(error) (errStatFlashDrvErrorCode = (error))"
00001da5 6174536574466c61
00001dad 7368447276457272
00001db5 6f72286572726f72
00001dbd 2920286572725374
00001dc5 6174466c61736844
00001dcd 72764572726f7243
00001dd5 6f6465203d202865
00001ddd 72726f72292900  
00001de4 01               22544		.byte	1
00001de5 d002             22545		.byte	208,2
00001de7 46626c4572725374 22546		.strz	"FblErrStatSetError(error) (errStatErrorCode = (error))"
00001def 6174536574457272
00001df7 6f72286572726f72
00001dff 2920286572725374
00001e07 61744572726f7243
00001e0f 6f6465203d202865
00001e17 72726f72292900  
00001e1e 01               22547		.byte	1
00001e1f d202             22548		.byte	210,2
00001e21 46626c4572725374 22549		.strz	"FblErrStatSetAddress(address) (errStatDescriptor.blockStartAddress = (address))"
00001e29 6174536574416464
00001e31 7265737328616464
00001e39 7265737329202865
00001e41 7272537461744465
00001e49 7363726970746f72
00001e51 2e626c6f636b5374
00001e59 6172744164647265
00001e61 7373203d20286164
00001e69 6472657373292900
00001e71 04               22550		.byte	4
00001e72 01               22551		.byte	1
00001e73 5a               22552		.byte	90
00001e74 6b4469616743616c 22553		.strz	"kDiagCallCycle 1u"
00001e7c 6c4379636c652031
00001e84 7500            
00001e86 01               22554		.byte	1
00001e87 72               22555		.byte	114

                                   Fri Apr 10 08:32:15 2020           Page 404
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
00001e88 6b44696167537461 22556		.strz	"kDiagStateIdxRcrRpInProgress 8u"
00001e90 7465496478526372
00001e98 5270496e50726f67
00001ea0 7265737320387500
00001ea8 01               22557		.byte	1
00001ea9 7d               22558		.byte	125
00001eaa 6b44696167537461 22559		.strz	"kDiagStateIdxMemDriverInitialized 17u"
00001eb2 74654964784d656d
00001eba 447269766572496e
00001ec2 697469616c697a65
00001eca 642031377500    
00001ed0 01               22560		.byte	1
00001ed1 7f               22561		.byte	127
00001ed2 6b446961674c6173 22562		.strz	"kDiagLastCoreStateIdx kDiagStateIdxMemDriverInitialized"
00001eda 74436f7265537461
00001ee2 7465496478206b44
00001eea 6961675374617465
00001ef2 4964784d656d4472
00001efa 69766572496e6974
00001f02 69616c697a656400
00001f0a 01               22563		.byte	1
00001f0b 8201             22564		.byte	130,1
00001f0d 6b446961674e756d 22565		.strz	"kDiagNumberOfStates ( kDiagLastOemStateIdx + 1u )"
00001f15 6265724f66537461
00001f1d 7465732028206b44
00001f25 6961674c6173744f
00001f2d 656d537461746549
00001f35 6478202b20317520
00001f3d 2900            
00001f3f 01               22566		.byte	1
00001f40 8301             22567		.byte	131,1
00001f42 6b446961674e756d 22568		.strz	"kDiagNumberOfDispatchStates kDiagNumberOfStates"
00001f4a 6265724f66446973
00001f52 7061746368537461
00001f5a 746573206b446961
00001f62 674e756d6265724f
00001f6a 6653746174657300
00001f72 01               22569		.byte	1
00001f73 8c01             22570		.byte	140,1
00001f75 4765745263725270 22571		.strz	"GetRcrRpInProgress() GetDiagState( kDiagStateIdxRcrRpInProgress )"
00001f7d 496e50726f677265
00001f85 7373282920476574
00001f8d 4469616753746174
00001f95 6528206b44696167
00001f9d 5374617465496478
00001fa5 5263725270496e50
00001fad 726f677265737320
00001fb5 2900            
00001fb7 01               22572		.byte	1
00001fb8 c801             22573		.byte	200,1
00001fba 46424c5f44494147 22574		.strz	"FBL_DIAG_STATECHECK_ARRAYSIZE (((kDiagNumberOfDispatchStates - 1u) / FBL_STATE_BITS) + 1u)"
00001fc2 5f53544154454348
00001fca 45434b5f41525241
00001fd2 5953495a45202828
00001fda 286b446961674e75
00001fe2 6d6265724f664469
00001fea 7370617463685374
00001ff2 61746573202d2031
00001ffa 7529202f2046424c
00002002 5f53544154455f42
0000200a 49545329202b2031
00002012 752900          
00002015 01               22575		.byte	1
00002016 cb01             22576		.byte	203,1
00002018 4765744469616753 22577		.strz	"GetDiagState(state) FBL_STATE_TEST(fblDiagStates, (state))"
00002020 7461746528737461
00002028 7465292046424c5f
00002030 53544154455f5445
00002038 53542866626c4469
00002040 6167537461746573
00002048 2c20287374617465
00002050 292900          
00002053 01               22578		.byte	1
00002054 ae02             22579		.byte	174,2
00002056 6b44696167457272 22580		.strz	"kDiagErrorNone 0x00u"
0000205e 6f724e6f6e652030
00002066 7830307500      
0000206b 01               22581		.byte	1
0000206c af02             22582		.byte	175,2
0000206e 6b446961674e7263 22583		.strz	"kDiagNrcGeneralReject 0x10u"
00002076 47656e6572616c52
0000207e 656a656374203078
00002086 31307500        
0000208a 01               22584		.byte	1
0000208b b502             22585		.byte	181,2
0000208d 6b446961674e7263 22586		.strz	"kDiagNrcConditionsNotCorrect 0x22u"
00002095 436f6e646974696f
0000209d 6e734e6f74436f72
000020a5 7265637420307832
000020ad 327500          
000020b0 01               22587		.byte	1
000020b1 b602             22588		.byte	182,2
000020b3 6b446961674e7263 22589		.strz	"kDiagNrcRequestSequenceError 0x24u"
000020bb 5265717565737453
000020c3 657175656e636545
000020cb 72726f7220307832
000020d3 347500          
000020d6 01               22590		.byte	1
000020d7 b702             22591		.byte	183,2
000020d9 6b446961674e7263 22592		.strz	"kDiagNrcRequestOutOfRange 0x31u"
000020e1 526571756573744f
000020e9 75744f6652616e67
000020f1 6520307833317500
000020f9 01               22593		.byte	1
000020fa bc02             22594		.byte	188,2
000020fc 6b446961674e7263 22595		.strz	"kDiagNrcUploadDownloadNotAccepted 0x70u"
00002104 55706c6f6164446f
0000210c 776e6c6f61644e6f
00002114 7441636365707465
0000211c 6420307837307500
00002124 01               22596		.byte	1
00002125 bd02             22597		.byte	189,2
00002127 6b446961674e7263 22598		.strz	"kDiagNrcTransferDataSuspended 0x71u"
0000212f 5472616e73666572
00002137 4461746153757370
0000213f 656e646564203078
00002147 37317500        
0000214b 01               22599		.byte	1
0000214c be02             22600		.byte	190,2
0000214e 6b446961674e7263 22601		.strz	"kDiagNrcGeneralProgrammingFailure 0x72u"
00002156 47656e6572616c50
0000215e 726f6772616d6d69
00002166 6e674661696c7572
0000216e 6520307837327500
00002176 01               22602		.byte	1
00002177 e902             22603		.byte	233,2
00002179 6b44696167537562 22604		.strz	"kDiagSubNoEncryption 0x00u"
00002181 4e6f456e63727970
00002189 74696f6e20307830
00002191 307500          
00002194 01               22605		.byte	1
00002195 ea02             22606		.byte	234,2
00002197 6b44696167537562 22607		.strz	"kDiagSubNoCompression 0x00u"
0000219f 4e6f436f6d707265
000021a7 7373696f6e203078
000021af 30307500        
000021b3 01               22608		.byte	1
000021b4 eb02             22609		.byte	235,2
000021b6 6b44696167537562 22610		.strz	"kDiagSubNoDataProcessing ((kDiagSubNoCompression << 4u) | kDiagSubNoEncryption)"
000021be 4e6f446174615072
000021c6 6f63657373696e67
000021ce 2028286b44696167
000021d6 5375624e6f436f6d
000021de 7072657373696f6e
000021e6 203c3c2034752920
000021ee 7c206b4469616753
000021f6 75624e6f456e6372
000021fe 797074696f6e2900
00002206 01               22611		.byte	1

                                   Fri Apr 10 08:32:15 2020           Page 405
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
00002207 fe02             22612		.byte	254,2
00002209 6b466f7263655365 22613		.strz	"kForceSendResponsePending 0x01u"
00002211 6e64526573706f6e
00002219 736550656e64696e
00002221 6720307830317500
00002229 01               22614		.byte	1
0000222a cf03             22615		.byte	207,3
0000222c 46424c444941475f 22616		.strz	"FBLDIAG_RAMCODE_START_SEC_CODE "
00002234 52414d434f44455f
0000223c 53544152545f5345
00002244 435f434f44452000
0000224c 03               22617		.byte	3
0000224d d003             22618		.byte	208,3
0000224f 18               22619		.byte	24
00002250 01               22620		.byte	1
00002251 2b               22621		.byte	43
00002252 46424c5f4d454d4d 22622		.strz	"FBL_MEMMAP_ERROR "
0000225a 41505f4552524f52
00002262 2000            
00002264 04               22623		.byte	4
00002265 01               22624		.byte	1
00002266 dc03             22625		.byte	220,3
00002268 46424c444941475f 22626		.strz	"FBLDIAG_RAMCODE_STOP_SEC_CODE "
00002270 52414d434f44455f
00002278 53544f505f534543
00002280 5f434f44452000  
00002287 03               22627		.byte	3
00002288 dd03             22628		.byte	221,3
0000228a 18               22629		.byte	24
0000228b 01               22630		.byte	1
0000228c 2b               22631		.byte	43
0000228d 46424c5f4d454d4d 22632		.strz	"FBL_MEMMAP_ERROR "
00002295 41505f4552524f52
0000229d 2000            
0000229f 04               22633		.byte	4
000022a0 04               22634		.byte	4
000022a1 03               22635		.byte	3
000022a2 a301             22636		.byte	163,1
000022a4 2f               22637		.byte	47
000022a5 01               22638		.byte	1
000022a6 a301             22639		.byte	163,1
000022a8 46424c4c49425f4d 22640		.strz	"FBLLIB_MEM_VERSION 0x0404u"
000022b0 454d5f5645525349
000022b8 4f4e203078303430
000022c0 347500          
000022c3 01               22641		.byte	1
000022c4 a401             22642		.byte	164,1
000022c6 46424c4c49425f4d 22643		.strz	"FBLLIB_MEM_RELEASE_VERSION 0x00u"
000022ce 454d5f52454c4541
000022d6 53455f5645525349
000022de 4f4e203078303075
000022e6 00              
000022e7 01               22644		.byte	1
000022e8 a801             22645		.byte	168,1
000022ea 46424c5f4d454d5f 22646		.strz	"FBL_MEM_API_VERSION_MAJOR 0x04u"
000022f2 4150495f56455253
000022fa 494f4e5f4d414a4f
00002302 5220307830347500
0000230a 01               22647		.byte	1
0000230b aa01             22648		.byte	170,1
0000230d 46424c5f4d454d5f 22649		.strz	"FBL_MEM_API_VERSION_MINOR 0x03u"
00002315 4150495f56455253
0000231d 494f4e5f4d494e4f
00002325 5220307830337500
0000232d 03               22650		.byte	3
0000232e b201             22651		.byte	178,1
00002330 30               22652		.byte	48
00002331 01               22653		.byte	1
00002332 70               22654		.byte	112
00002333 46424c5f4d454d5f 22655		.strz	"FBL_MEM_API_REFERENCE_VERSION_MAJOR 0x04u"
0000233b 4150495f52454645
00002343 52454e43455f5645
0000234b 5253494f4e5f4d41
00002353 4a4f522030783034
0000235b 7500            
0000235d 01               22656		.byte	1
0000235e 72               22657		.byte	114
0000235f 46424c5f4d454d5f 22658		.strz	"FBL_MEM_API_REFERENCE_VERSION_MINOR 0x00u"
00002367 4150495f52454645
0000236f 52454e43455f5645
00002377 5253494f4e5f4d49
0000237f 4e4f522030783030
00002387 7500            
00002389 01               22659		.byte	1
0000238a 79               22660		.byte	121
0000238b 46424c5f4d454d5f 22661		.strz	"FBL_MEM_BUFFER_SIZE FBL_DIAG_BUFFER_LENGTH"
00002393 4255464645525f53
0000239b 495a452046424c5f
000023a3 444941475f425546
000023ab 4645525f4c454e47
000023b3 544800          
000023b6 01               22662		.byte	1
000023b7 7b               22663		.byte	123
000023b8 46424c5f4d454d5f 22664		.strz	"FBL_MEM_DEFAULT_PREAMBLE_LENGTH 2u"
000023c0 44454641554c545f
000023c8 505245414d424c45
000023d0 5f4c454e47544820
000023d8 327500          
000023db 01               22665		.byte	1
000023dc 7d               22666		.byte	125
000023dd 46424c5f4d454d5f 22667		.strz	"FBL_MEM_MAX_PREAMBLE_LENGTH 2u"
000023e5 4d41585f50524541
000023ed 4d424c455f4c454e
000023f5 47544820327500  

                                   Fri Apr 10 08:32:15 2020           Page 406
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
000023fc 01               22668		.byte	1
000023fd 8d01             22669		.byte	141,1
000023ff 5f5f4170706c4662 22670		.strz	"__ApplFblMemIsDataProcessingRequired(dataFormat) ((tFblResult)((kDiagSubNoDataProcessing == (dataFormat)) ? kFblFailed : kFblOk))"
00002407 6c4d656d49734461
0000240f 746150726f636573
00002417 73696e6752657175
0000241f 6972656428646174
00002427 61466f726d617429
0000242f 2028287446626c52
00002437 6573756c74292828
0000243f 6b44696167537562
00002447 4e6f446174615072
0000244f 6f63657373696e67
00002457 203d3d2028646174
0000245f 61466f726d617429
00002467 29203f206b46626c
0000246f 4661696c6564203a
00002477 206b46626c4f6b29
0000247f 2900            
00002481 01               22671		.byte	1
00002482 ad01             22672		.byte	173,1
00002484 5f5f4170706c4662 22673		.strz	"__ApplFblMemPreWrite() FblDiagMemPreWrite()"
0000248c 6c4d656d50726557
00002494 7269746528292046
0000249c 626c446961674d65
000024a4 6d50726557726974
000024ac 65282900        
000024b0 01               22674		.byte	1
000024b1 ae01             22675		.byte	174,1
000024b3 5f5f4170706c4662 22676		.strz	"__ApplFblMemPostWrite() FblDiagMemPostWrite()"
000024bb 6c4d656d506f7374
000024c3 5772697465282920
000024cb 46626c446961674d
000024d3 656d506f73745772
000024db 697465282900    
000024e1 01               22677		.byte	1
000024e2 b301             22678		.byte	179,1
000024e4 5f5f4170706c4662 22679		.strz	"__ApplFblMemPreErase() FblDiagMemPreWrite()"
000024ec 6c4d656d50726545
000024f4 7261736528292046
000024fc 626c446961674d65
00002504 6d50726557726974
0000250c 65282900        
00002510 01               22680		.byte	1
00002511 b401             22681		.byte	180,1
00002513 5f5f4170706c4662 22682		.strz	"__ApplFblMemPostErase() FblDiagMemPostWrite()"
0000251b 6c4d656d506f7374
00002523 4572617365282920
0000252b 46626c446961674d
00002533 656d506f73745772
0000253b 697465282900    
00002541 01               22683		.byte	1
00002542 bd01             22684		.byte	189,1
00002544 46424c5f4d454d5f 22685		.strz	"FBL_MEM_WD_TRIGGER_DEFAULT (FBL_NO_TRIGGER)"
0000254c 57445f5452494747
00002554 45525f4445464155
0000255c 4c54202846424c5f
00002564 4e4f5f5452494747
0000256c 45522900        
00002570 01               22686		.byte	1
00002571 c201             22687		.byte	194,1
00002573 46424c5f4d454d5f 22688		.strz	"FBL_MEM_TRIGGER_STATUS_OVERWRITE vuint8"
0000257b 545249474745525f
00002583 5354415455535f4f
0000258b 5645525752495445
00002593 207675696e743800
0000259b 01               22689		.byte	1
0000259c cc01             22690		.byte	204,1
0000259e 5f5f4170706c4662 22691		.strz	"__ApplFblMemAdaptiveRcrRp() FblRealTimeSupport()"
000025a6 6c4d656d41646170
000025ae 7469766552637252
000025b6 7028292046626c52
000025be 65616c54696d6553
000025c6 7570706f72742829
000025ce 00              
000025cf 01               22692		.byte	1
000025d0 d101             22693		.byte	209,1
000025d2 5f5f4170706c4662 22694		.strz	"__ApplFblMemIsRcrRpActive() ((tFblResult)(GetRcrRpInProgress() ? kFblOk : kFblFailed))"
000025da 6c4d656d49735263
000025e2 7252704163746976
000025ea 6528292028287446
000025f2 626c526573756c74
000025fa 2928476574526372
00002602 5270496e50726f67
0000260a 726573732829203f
00002612 206b46626c4f6b20
0000261a 3a206b46626c4661
00002622 696c6564292900  
00002629 01               22695		.byte	1
0000262a d601             22696		.byte	214,1
0000262c 5f5f4170706c4662 22697		.strz	"__ApplFblMemForcedRcrRp() DiagExRCRResponsePending(kForceSendResponsePending)"
00002634 6c4d656d466f7263
0000263c 6564526372527028
00002644 2920446961674578
0000264c 524352526573706f
00002654 6e736550656e6469
0000265c 6e67286b466f7263
00002664 6553656e64526573
0000266c 706f6e736550656e
00002674 64696e672900    
0000267a 01               22698		.byte	1
0000267b dd01             22699		.byte	221,1
0000267d 46424c5f4d454d5f 22700		.strz	"FBL_MEM_ENABLE_EXT_TRIGGER_OUTPUT_VERIFY "
00002685 454e41424c455f45
0000268d 58545f5452494747
00002695 45525f4f55545055
0000269d 545f564552494659
000026a5 2000            
000026a7 01               22701		.byte	1
000026a8 e601             22702		.byte	230,1
000026aa 46424c5f4d454d5f 22703		.strz	"FBL_MEM_ENABLE_STATUS_OVERWRITE "
000026b2 454e41424c455f53
000026ba 54415455535f4f56
000026c2 4552575249544520
000026ca 00              
000026cb 01               22704		.byte	1
000026cc ef01             22705		.byte	239,1
000026ce 46424c5f4d454d5f 22706		.strz	"FBL_MEM_STATUS_Ok kDiagErrorNone"
000026d6 5354415455535f4f
000026de 6b206b4469616745
000026e6 72726f724e6f6e65
000026ee 00              
000026ef 01               22707		.byte	1
000026f0 f001             22708		.byte	240,1
000026f2 46424c5f4d454d5f 22709		.strz	"FBL_MEM_STATUS_Failed kDiagNrcConditionsNotCorrect"
000026fa 5354415455535f46
00002702 61696c6564206b44
0000270a 6961674e7263436f
00002712 6e646974696f6e73
0000271a 4e6f74436f727265
00002722 637400          
00002725 01               22710		.byte	1
00002726 f201             22711		.byte	242,1
00002728 46424c5f4d454d5f 22712		.strz	"FBL_MEM_STATUS_BlockEraseSequence kDiagNrcRequestSequenceError"
00002730 5354415455535f42
00002738 6c6f636b45726173
00002740 6553657175656e63
00002748 65206b446961674e
00002750 7263526571756573
00002758 7453657175656e63
00002760 654572726f7200  
00002767 01               22713		.byte	1
00002768 f401             22714		.byte	244,1
0000276a 46424c5f4d454d5f 22715		.strz	"FBL_MEM_STATUS_BlockStartSequence kDiagNrcRequestSequenceError"
00002772 5354415455535f42
0000277a 6c6f636b53746172
00002782 7453657175656e63
0000278a 65206b446961674e
00002792 7263526571756573
0000279a 7453657175656e63
000027a2 654572726f7200  
000027a9 01               22716		.byte	1
000027aa f501             22717		.byte	245,1
000027ac 46424c5f4d454d5f 22718		.strz	"FBL_MEM_STATUS_BlockStartParam kDiagNrcConditionsNotCorrect"
000027b4 5354415455535f42
000027bc 6c6f636b53746172
000027c4 74506172616d206b
000027cc 446961674e726343
000027d4 6f6e646974696f6e
000027dc 734e6f74436f7272
000027e4 65637400        
000027e8 01               22719		.byte	1
000027e9 f701             22720		.byte	247,1
000027eb 46424c5f4d454d5f 22721		.strz	"FBL_MEM_STATUS_BlockEndSequence kDiagNrcRequestSequenceError"
000027f3 5354415455535f42
000027fb 6c6f636b456e6453
00002803 657175656e636520
0000280b 6b446961674e7263
00002813 5265717565737453
0000281b 657175656e636545
00002823 72726f7200      
00002828 01               22722		.byte	1
00002829 f801             22723		.byte	248,1

                                   Fri Apr 10 08:32:15 2020           Page 407
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
0000282b 46424c5f4d454d5f 22724		.strz	"FBL_MEM_STATUS_BlockEndVerifyFinalize kDiagNrcGeneralProgrammingFailure"
00002833 5354415455535f42
0000283b 6c6f636b456e6456
00002843 657269667946696e
0000284b 616c697a65206b44
00002853 6961674e72634765
0000285b 6e6572616c50726f
00002863 6772616d6d696e67
0000286b 4661696c75726500
00002873 01               22725		.byte	1
00002874 fa01             22726		.byte	250,1
00002876 46424c5f4d454d5f 22727		.strz	"FBL_MEM_STATUS_BlockVerifySequence kDiagNrcRequestSequenceError"
0000287e 5354415455535f42
00002886 6c6f636b56657269
0000288e 667953657175656e
00002896 6365206b44696167
0000289e 4e72635265717565
000028a6 737453657175656e
000028ae 63654572726f7200
000028b6 01               22728		.byte	1
000028b7 fb01             22729		.byte	251,1
000028b9 46424c5f4d454d5f 22730		.strz	"FBL_MEM_STATUS_BlockVerifyInputVerify kDiagNrcGeneralReject"
000028c1 5354415455535f42
000028c9 6c6f636b56657269
000028d1 6679496e70757456
000028d9 6572696679206b44
000028e1 6961674e72634765
000028e9 6e6572616c52656a
000028f1 65637400        
000028f5 01               22731		.byte	1
000028f6 fc01             22732		.byte	252,1
000028f8 46424c5f4d454d5f 22733		.strz	"FBL_MEM_STATUS_BlockVerifyProcessedVerify kDiagNrcGeneralReject"
00002900 5354415455535f42
00002908 6c6f636b56657269
00002910 667950726f636573
00002918 7365645665726966
00002920 79206b446961674e
00002928 726347656e657261
00002930 6c52656a65637400
00002938 01               22734		.byte	1
00002939 fd01             22735		.byte	253,1
0000293b 46424c5f4d454d5f 22736		.strz	"FBL_MEM_STATUS_BlockVerifyPipeVerify kDiagNrcGeneralReject"
00002943 5354415455535f42
0000294b 6c6f636b56657269
00002953 6679506970655665
0000295b 72696679206b4469
00002963 61674e726347656e
0000296b 6572616c52656a65
00002973 637400          
00002976 01               22737		.byte	1
00002977 fe01             22738		.byte	254,1
00002979 46424c5f4d454d5f 22739		.strz	"FBL_MEM_STATUS_BlockVerifyOutputVerify kDiagNrcGeneralReject"
00002981 5354415455535f42
00002989 6c6f636b56657269
00002991 66794f7574707574
00002999 566572696679206b
000029a1 446961674e726347
000029a9 656e6572616c5265
000029b1 6a65637400      
000029b6 01               22740		.byte	1
000029b7 8002             22741		.byte	128,2
000029b9 46424c5f4d454d5f 22742		.strz	"FBL_MEM_STATUS_SegmentStartSequence kDiagNrcRequestSequenceError"
000029c1 5354415455535f53
000029c9 65676d656e745374
000029d1 6172745365717565
000029d9 6e6365206b446961
000029e1 674e726352657175
000029e9 6573745365717565
000029f1 6e63654572726f72
000029f9 00              
000029fa 01               22743		.byte	1
000029fb 8102             22744		.byte	129,2
000029fd 46424c5f4d454d5f 22745		.strz	"FBL_MEM_STATUS_SegmentStartDataProcInit kDiagNrcUploadDownloadNotAccepted"
00002a05 5354415455535f53
00002a0d 65676d656e745374
00002a15 6172744461746150
00002a1d 726f63496e697420
00002a25 6b446961674e7263
00002a2d 55706c6f6164446f
00002a35 776e6c6f61644e6f
00002a3d 7441636365707465
00002a45 6400            
00002a47 01               22746		.byte	1
00002a48 8202             22747		.byte	130,2
00002a4a 46424c5f4d454d5f 22748		.strz	"FBL_MEM_STATUS_SegmentStartStreamOutInit kDiagNrcUploadDownloadNotAccepted"
00002a52 5354415455535f53
00002a5a 65676d656e745374
00002a62 6172745374726561
00002a6a 6d4f7574496e6974
00002a72 206b446961674e72
00002a7a 6355706c6f616444
00002a82 6f776e6c6f61644e
00002a8a 6f74416363657074
00002a92 656400          
00002a95 01               22749		.byte	1
00002a96 8302             22750		.byte	131,2
00002a98 46424c5f4d454d5f 22751		.strz	"FBL_MEM_STATUS_SegmentStartVerifyInit kDiagNrcConditionsNotCorrect"
00002aa0 5354415455535f53
00002aa8 65676d656e745374
00002ab0 6172745665726966
00002ab8 79496e6974206b44
00002ac0 6961674e7263436f
00002ac8 6e646974696f6e73
00002ad0 4e6f74436f727265
00002ad8 637400          
00002adb 01               22752		.byte	1
00002adc 8402             22753		.byte	132,2
00002ade 46424c5f4d454d5f 22754		.strz	"FBL_MEM_STATUS_SegmentStartVerifyCompute kDiagNrcGeneralProgrammingFailure"
00002ae6 5354415455535f53
00002aee 65676d656e745374
00002af6 6172745665726966
00002afe 79436f6d70757465
00002b06 206b446961674e72
00002b0e 6347656e6572616c
00002b16 50726f6772616d6d
00002b1e 696e674661696c75
00002b26 726500          
00002b29 01               22755		.byte	1
00002b2a 8502             22756		.byte	133,2
00002b2c 46424c5f4d454d5f 22757		.strz	"FBL_MEM_STATUS_SegmentStartSegmentCount kDiagNrcRequestOutOfRange"
00002b34 5354415455535f53
00002b3c 65676d656e745374
00002b44 6172745365676d65
00002b4c 6e74436f756e7420
00002b54 6b446961674e7263
00002b5c 526571756573744f
00002b64 75744f6652616e67
00002b6c 6500            
00002b6e 01               22758		.byte	1
00002b6f 8702             22759		.byte	135,2
00002b71 46424c5f4d454d5f 22760		.strz	"FBL_MEM_STATUS_SegmentEndSequence kDiagNrcRequestSequenceError"
00002b79 5354415455535f53
00002b81 65676d656e74456e
00002b89 6453657175656e63
00002b91 65206b446961674e
00002b99 7263526571756573
00002ba1 7453657175656e63
00002ba9 654572726f7200  
00002bb0 01               22761		.byte	1
00002bb1 8802             22762		.byte	136,2
00002bb3 46424c5f4d454d5f 22763		.strz	"FBL_MEM_STATUS_SegmentEndInsufficientData kDiagNrcRequestSequenceError"
00002bbb 5354415455535f53
00002bc3 65676d656e74456e
00002bcb 64496e7375666669
00002bd3 6369656e74446174
00002bdb 61206b446961674e
00002be3 7263526571756573
00002beb 7453657175656e63
00002bf3 654572726f7200  
00002bfa 01               22764		.byte	1
00002bfb 8902             22765		.byte	137,2
00002bfd 46424c5f4d454d5f 22766		.strz	"FBL_MEM_STATUS_SegmentEndPost kDiagNrcConditionsNotCorrect"
00002c05 5354415455535f53
00002c0d 65676d656e74456e
00002c15 64506f7374206b44
00002c1d 6961674e7263436f
00002c25 6e646974696f6e73
00002c2d 4e6f74436f727265
00002c35 637400          
00002c38 01               22767		.byte	1
00002c39 8b02             22768		.byte	139,2
00002c3b 46424c5f4d454d5f 22769		.strz	"FBL_MEM_STATUS_DataIndSequence kDiagNrcRequestSequenceError"
00002c43 5354415455535f44
00002c4b 617461496e645365
00002c53 7175656e6365206b
00002c5b 446961674e726352
00002c63 6571756573745365
00002c6b 7175656e63654572
00002c73 726f7200        
00002c77 01               22770		.byte	1
00002c78 8c02             22771		.byte	140,2
00002c7a 46424c5f4d454d5f 22772		.strz	"FBL_MEM_STATUS_DataIndParam kDiagNrcGeneralProgrammingFailure"
00002c82 5354415455535f44
00002c8a 617461496e645061
00002c92 72616d206b446961
00002c9a 674e726347656e65
00002ca2 72616c50726f6772
00002caa 616d6d696e674661
00002cb2 696c75726500    
00002cb8 01               22773		.byte	1
00002cb9 8d02             22774		.byte	141,2
00002cbb 46424c5f4d454d5f 22775		.strz	"FBL_MEM_STATUS_DataIndOverflow kDiagNrcTransferDataSuspended"
00002cc3 5354415455535f44
00002ccb 617461496e644f76
00002cd3 6572666c6f77206b
00002cdb 446961674e726354
00002ce3 72616e7366657244
00002ceb 6174615375737065
00002cf3 6e64656400      
00002cf8 01               22776		.byte	1
00002cf9 8f02             22777		.byte	143,2
00002cfb 46424c5f4d454d5f 22778		.strz	"FBL_MEM_STATUS_DataProc kDiagNrcGeneralProgrammingFailure"
00002d03 5354415455535f44
00002d0b 61746150726f6320
00002d13 6b446961674e7263
00002d1b 47656e6572616c50
00002d23 726f6772616d6d69
00002d2b 6e674661696c7572
00002d33 6500            
00002d35 01               22779		.byte	1

                                   Fri Apr 10 08:32:15 2020           Page 408
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
00002d36 9002             22780		.byte	144,2
00002d38 46424c5f4d454d5f 22781		.strz	"FBL_MEM_STATUS_DataProcConsume kDiagNrcGeneralProgrammingFailure"
00002d40 5354415455535f44
00002d48 61746150726f6343
00002d50 6f6e73756d65206b
00002d58 446961674e726347
00002d60 656e6572616c5072
00002d68 6f6772616d6d696e
00002d70 674661696c757265
00002d78 00              
00002d79 01               22782		.byte	1
00002d7a 9102             22783		.byte	145,2
00002d7c 46424c5f4d454d5f 22784		.strz	"FBL_MEM_STATUS_DataProcDeinit kDiagNrcConditionsNotCorrect"
00002d84 5354415455535f44
00002d8c 61746150726f6344
00002d94 65696e6974206b44
00002d9c 6961674e7263436f
00002da4 6e646974696f6e73
00002dac 4e6f74436f727265
00002db4 637400          
00002db7 01               22785		.byte	1
00002db8 9302             22786		.byte	147,2
00002dba 46424c5f4d454d5f 22787		.strz	"FBL_MEM_STATUS_StreamOutput kDiagNrcGeneralProgrammingFailure"
00002dc2 5354415455535f53
00002dca 747265616d4f7574
00002dd2 707574206b446961
00002dda 674e726347656e65
00002de2 72616c50726f6772
00002dea 616d6d696e674661
00002df2 696c75726500    
00002df8 01               22788		.byte	1
00002df9 9402             22789		.byte	148,2
00002dfb 46424c5f4d454d5f 22790		.strz	"FBL_MEM_STATUS_StreamOutputConsume kDiagNrcGeneralProgrammingFailure"
00002e03 5354415455535f53
00002e0b 747265616d4f7574
00002e13 707574436f6e7375
00002e1b 6d65206b44696167
00002e23 4e726347656e6572
00002e2b 616c50726f677261
00002e33 6d6d696e67466169
00002e3b 6c75726500      
00002e40 01               22791		.byte	1
00002e41 9502             22792		.byte	149,2
00002e43 46424c5f4d454d5f 22793		.strz	"FBL_MEM_STATUS_StreamOutputOverflow kDiagNrcTransferDataSuspended"
00002e4b 5354415455535f53
00002e53 747265616d4f7574
00002e5b 7075744f76657266
00002e63 6c6f77206b446961
00002e6b 674e72635472616e
00002e73 7366657244617461
00002e7b 53757370656e6465
00002e83 6400            
00002e85 01               22794		.byte	1
00002e86 9602             22795		.byte	150,2
00002e88 46424c5f4d454d5f 22796		.strz	"FBL_MEM_STATUS_StreamOutputDeinit kDiagNrcConditionsNotCorrect"
00002e90 5354415455535f53
00002e98 747265616d4f7574
00002ea0 7075744465696e69
00002ea8 74206b446961674e
00002eb0 7263436f6e646974
00002eb8 696f6e734e6f7443
00002ec0 6f727265637400  
00002ec7 01               22797		.byte	1
00002ec8 9802             22798		.byte	152,2
00002eca 46424c5f4d454d5f 22799		.strz	"FBL_MEM_STATUS_DriverResumeWrite kDiagNrcGeneralProgrammingFailure"
00002ed2 5354415455535f44
00002eda 7269766572526573
00002ee2 756d655772697465
00002eea 206b446961674e72
00002ef2 6347656e6572616c
00002efa 50726f6772616d6d
00002f02 696e674661696c75
00002f0a 726500          
00002f0d 01               22800		.byte	1
00002f0e 9902             22801		.byte	153,2
00002f10 46424c5f4d454d5f 22802		.strz	"FBL_MEM_STATUS_DriverWrite kDiagNrcGeneralProgrammingFailure"
00002f18 5354415455535f44
00002f20 7269766572577269
00002f28 7465206b44696167
00002f30 4e726347656e6572
00002f38 616c50726f677261
00002f40 6d6d696e67466169
00002f48 6c75726500      
00002f4d 01               22803		.byte	1
00002f4e 9a02             22804		.byte	154,2
00002f50 46424c5f4d454d5f 22805		.strz	"FBL_MEM_STATUS_DriverErase kDiagNrcGeneralProgrammingFailure"
00002f58 5354415455535f44
00002f60 7269766572457261
00002f68 7365206b44696167
00002f70 4e726347656e6572
00002f78 616c50726f677261
00002f80 6d6d696e67466169
00002f88 6c75726500      
00002f8d 01               22806		.byte	1
00002f8e 9b02             22807		.byte	155,2
00002f90 46424c5f4d454d5f 22808		.strz	"FBL_MEM_STATUS_DriverRemainder kDiagNrcGeneralProgrammingFailure"
00002f98 5354415455535f44
00002fa0 726976657252656d
00002fa8 61696e646572206b
00002fb0 446961674e726347
00002fb8 656e6572616c5072
00002fc0 6f6772616d6d696e
00002fc8 674661696c757265
00002fd0 00              
00002fd1 01               22809		.byte	1
00002fd2 9c02             22810		.byte	156,2
00002fd4 46424c5f4d454d5f 22811		.strz	"FBL_MEM_STATUS_DriverSuspendWrite kDiagNrcGeneralProgrammingFailure"
00002fdc 5354415455535f44
00002fe4 7269766572537573
00002fec 70656e6457726974
00002ff4 65206b446961674e
00002ffc 726347656e657261
00003004 6c50726f6772616d
0000300c 6d696e674661696c
00003014 75726500        
00003018 01               22812		.byte	1
00003019 9e02             22813		.byte	158,2
0000301b 46424c5f4d454d5f 22814		.strz	"FBL_MEM_STATUS_ProgramOverflow kDiagNrcTransferDataSuspended"
00003023 5354415455535f50
0000302b 726f6772616d4f76
00003033 6572666c6f77206b
0000303b 446961674e726354
00003043 72616e7366657244
0000304b 6174615375737065
00003053 6e64656400      
00003058 01               22815		.byte	1
00003059 9f02             22816		.byte	159,2
0000305b 46424c5f4d454d5f 22817		.strz	"FBL_MEM_STATUS_ProgramOutsideFbt kDiagNrcTransferDataSuspended"
00003063 5354415455535f50
0000306b 726f6772616d4f75
00003073 7473696465466274
0000307b 206b446961674e72
00003083 635472616e736665
0000308b 7244617461537573
00003093 70656e64656400  
0000309a 01               22818		.byte	1
0000309b a002             22819		.byte	160,2
0000309d 46424c5f4d454d5f 22820		.strz	"FBL_MEM_STATUS_ProgramUnalignedAddress kDiagNrcGeneralProgrammingFailure"
000030a5 5354415455535f50
000030ad 726f6772616d556e
000030b5 616c69676e656441
000030bd 646472657373206b
000030c5 446961674e726347
000030cd 656e6572616c5072
000030d5 6f6772616d6d696e
000030dd 674661696c757265
000030e5 00              
000030e6 01               22821		.byte	1
000030e7 a102             22822		.byte	161,2
000030e9 46424c5f4d454d5f 22823		.strz	"FBL_MEM_STATUS_ProgramDriverNotReady kDiagNrcRequestSequenceError"
000030f1 5354415455535f50
000030f9 726f6772616d4472
00003101 697665724e6f7452
00003109 65616479206b4469
00003111 61674e7263526571
00003119 7565737453657175
00003121 656e63654572726f
00003129 7200            
0000312b 01               22824		.byte	1
0000312c a202             22825		.byte	162,2
0000312e 46424c5f4d454d5f 22826		.strz	"FBL_MEM_STATUS_ProgramPreWrite kDiagNrcGeneralProgrammingFailure"
00003136 5354415455535f50
0000313e 726f6772616d5072
00003146 655772697465206b
0000314e 446961674e726347
00003156 656e6572616c5072
0000315e 6f6772616d6d696e
00003166 674661696c757265
0000316e 00              
0000316f 01               22827		.byte	1
00003170 a302             22828		.byte	163,2
00003172 46424c5f4d454d5f 22829		.strz	"FBL_MEM_STATUS_ProgramPostWrite kDiagNrcGeneralProgrammingFailure"
0000317a 5354415455535f50
00003182 726f6772616d506f
0000318a 7374577269746520
00003192 6b446961674e7263
0000319a 47656e6572616c50
000031a2 726f6772616d6d69
000031aa 6e674661696c7572
000031b2 6500            
000031b4 01               22830		.byte	1
000031b5 a502             22831		.byte	165,2
000031b7 46424c5f4d454d5f 22832		.strz	"FBL_MEM_STATUS_EraseOutsideFbt kDiagNrcRequestOutOfRange"
000031bf 5354415455535f45
000031c7 726173654f757473
000031cf 696465466274206b
000031d7 446961674e726352
000031df 6571756573744f75
000031e7 744f6652616e6765
000031ef 00              
000031f0 01               22833		.byte	1
000031f1 a602             22834		.byte	166,2
000031f3 46424c5f4d454d5f 22835		.strz	"FBL_MEM_STATUS_EraseDriverNotReady kDiagNrcConditionsNotCorrect"
000031fb 5354415455535f45
00003203 7261736544726976
0000320b 65724e6f74526561
00003213 6479206b44696167
0000321b 4e7263436f6e6469
00003223 74696f6e734e6f74
0000322b 436f727265637400

                                   Fri Apr 10 08:32:15 2020           Page 409
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
00003233 01               22836		.byte	1
00003234 a702             22837		.byte	167,2
00003236 46424c5f4d454d5f 22838		.strz	"FBL_MEM_STATUS_ErasePreErase kDiagNrcConditionsNotCorrect"
0000323e 5354415455535f45
00003246 7261736550726545
0000324e 72617365206b4469
00003256 61674e7263436f6e
0000325e 646974696f6e734e
00003266 6f74436f72726563
0000326e 7400            
00003270 01               22839		.byte	1
00003271 a802             22840		.byte	168,2
00003273 46424c5f4d454d5f 22841		.strz	"FBL_MEM_STATUS_ErasePostErase kDiagNrcConditionsNotCorrect"
0000327b 5354415455535f45
00003283 72617365506f7374
0000328b 4572617365206b44
00003293 6961674e7263436f
0000329b 6e646974696f6e73
000032a3 4e6f74436f727265
000032ab 637400          
000032ae 01               22842		.byte	1
000032af aa02             22843		.byte	170,2
000032b1 46424c5f4d454d5f 22844		.strz	"FBL_MEM_STATUS_VerifyCompute kDiagNrcGeneralProgrammingFailure"
000032b9 5354415455535f56
000032c1 6572696679436f6d
000032c9 70757465206b4469
000032d1 61674e726347656e
000032d9 6572616c50726f67
000032e1 72616d6d696e6746
000032e9 61696c75726500  
000032f0 01               22845		.byte	1
000032f1 ab02             22846		.byte	171,2
000032f3 46424c5f4d454d5f 22847		.strz	"FBL_MEM_STATUS_VerifyFinalize kDiagNrcGeneralProgrammingFailure"
000032fb 5354415455535f56
00003303 657269667946696e
0000330b 616c697a65206b44
00003313 6961674e72634765
0000331b 6e6572616c50726f
00003323 6772616d6d696e67
0000332b 4661696c75726500
00003333 01               22848		.byte	1
00003334 ad02             22849		.byte	173,2
00003336 46424c5f4d454d5f 22850		.strz	"FBL_MEM_STATUS_PassThroughLocal kDiagNrcConditionsNotCorrect"
0000333e 5354415455535f50
00003346 6173735468726f75
0000334e 67684c6f63616c20
00003356 6b446961674e7263
0000335e 436f6e646974696f
00003366 6e734e6f74436f72
0000336e 7265637400      
00003373 01               22851		.byte	1
00003374 ae02             22852		.byte	174,2
00003376 46424c5f4d454d5f 22853		.strz	"FBL_MEM_STATUS_PassThroughRemote kDiagNrcConditionsNotCorrect"
0000337e 5354415455535f50
00003386 6173735468726f75
0000338e 676852656d6f7465
00003396 206b446961674e72
0000339e 63436f6e64697469
000033a6 6f6e734e6f74436f
000033ae 727265637400    
000033b4 01               22854		.byte	1
000033b5 b302             22855		.byte	179,2
000033b7 46424c5f4d454d5f 22856		.strz	"FBL_MEM_ENABLE_EXT_STATUS "
000033bf 454e41424c455f45
000033c7 58545f5354415455
000033cf 532000          
000033d2 01               22857		.byte	1
000033d3 b602             22858		.byte	182,2
000033d5 46424c5f4d454d5f 22859		.strz	"FBL_MEM_EXT_STATUS_Ok(status) "
000033dd 4558545f53544154
000033e5 55535f4f6b287374
000033ed 61747573292000  
000033f4 01               22860		.byte	1
000033f5 b702             22861		.byte	183,2
000033f7 46424c5f4d454d5f 22862		.strz	"FBL_MEM_EXT_STATUS_Failed(status) "
000033ff 4558545f53544154
00003407 55535f4661696c65
0000340f 6428737461747573
00003417 292000          
0000341a 01               22863		.byte	1
0000341b b902             22864		.byte	185,2
0000341d 46424c5f4d454d5f 22865		.strz	"FBL_MEM_EXT_STATUS_BlockEraseSequence(status) "
00003425 4558545f53544154
0000342d 55535f426c6f636b
00003435 4572617365536571
0000343d 75656e6365287374
00003445 61747573292000  
0000344c 01               22866		.byte	1
0000344d bb02             22867		.byte	187,2
0000344f 46424c5f4d454d5f 22868		.strz	"FBL_MEM_EXT_STATUS_BlockStartSequence(status) "
00003457 4558545f53544154
0000345f 55535f426c6f636b
00003467 5374617274536571
0000346f 75656e6365287374
00003477 61747573292000  
0000347e 01               22869		.byte	1
0000347f bc02             22870		.byte	188,2
00003481 46424c5f4d454d5f 22871		.strz	"FBL_MEM_EXT_STATUS_BlockStartParam(status) "
00003489 4558545f53544154
00003491 55535f426c6f636b
00003499 5374617274506172
000034a1 616d287374617475
000034a9 73292000        
000034ad 01               22872		.byte	1
000034ae be02             22873		.byte	190,2
000034b0 46424c5f4d454d5f 22874		.strz	"FBL_MEM_EXT_STATUS_BlockEndSequence(status) "
000034b8 4558545f53544154
000034c0 55535f426c6f636b
000034c8 456e645365717565
000034d0 6e63652873746174
000034d8 7573292000      
000034dd 01               22875		.byte	1
000034de c102             22876		.byte	193,2
000034e0 46424c5f4d454d5f 22877		.strz	"FBL_MEM_EXT_STATUS_BlockVerifySequence(status) "
000034e8 4558545f53544154
000034f0 55535f426c6f636b
000034f8 5665726966795365
00003500 7175656e63652873
00003508 7461747573292000
00003510 01               22878		.byte	1
00003511 c602             22879		.byte	198,2
00003513 46424c5f4d454d5f 22880		.strz	"FBL_MEM_EXT_STATUS_BlockVerifyOutputVerify(status) "
0000351b 4558545f53544154
00003523 55535f426c6f636b
0000352b 5665726966794f75
00003533 7470757456657269
0000353b 6679287374617475
00003543 73292000        
00003547 01               22881		.byte	1
00003548 c802             22882		.byte	200,2
0000354a 46424c5f4d454d5f 22883		.strz	"FBL_MEM_EXT_STATUS_SegmentStartSequence(status) "
00003552 4558545f53544154
0000355a 55535f5365676d65
00003562 6e74537461727453
0000356a 657175656e636528
00003572 7374617475732920
0000357a 00              
0000357b 01               22884		.byte	1
0000357c c902             22885		.byte	201,2
0000357e 46424c5f4d454d5f 22886		.strz	"FBL_MEM_EXT_STATUS_SegmentStartDataProcInit(status) "
00003586 4558545f53544154
0000358e 55535f5365676d65
00003596 6e74537461727444
0000359e 61746150726f6349
000035a6 6e69742873746174
000035ae 7573292000      
000035b3 01               22887		.byte	1
000035b4 cd02             22888		.byte	205,2
000035b6 46424c5f4d454d5f 22889		.strz	"FBL_MEM_EXT_STATUS_SegmentStartSegmentCount(status) FblErrStatSetError(FBL_ERR_TOO_MANY_SEGMENTS_IN_MODULE)"
000035be 4558545f53544154
000035c6 55535f5365676d65
000035ce 6e74537461727453
000035d6 65676d656e74436f
000035de 756e742873746174
000035e6 7573292046626c45
000035ee 7272537461745365
000035f6 744572726f722846
000035fe 424c5f4552525f54
00003606 4f4f5f4d414e595f
0000360e 5345474d454e5453
00003616 5f494e5f4d4f4455
0000361e 4c452900        
00003622 01               22890		.byte	1
00003623 cf02             22891		.byte	207,2

                                   Fri Apr 10 08:32:15 2020           Page 410
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
00003625 46424c5f4d454d5f 22892		.strz	"FBL_MEM_EXT_STATUS_SegmentEndSequence(status) "
0000362d 4558545f53544154
00003635 55535f5365676d65
0000363d 6e74456e64536571
00003645 75656e6365287374
0000364d 61747573292000  
00003654 01               22893		.byte	1
00003655 d002             22894		.byte	208,2
00003657 46424c5f4d454d5f 22895		.strz	"FBL_MEM_EXT_STATUS_SegmentEndInsufficientData(status) "
0000365f 4558545f53544154
00003667 55535f5365676d65
0000366f 6e74456e64496e73
00003677 756666696369656e
0000367f 7444617461287374
00003687 61747573292000  
0000368e 01               22896		.byte	1
0000368f d302             22897		.byte	211,2
00003691 46424c5f4d454d5f 22898		.strz	"FBL_MEM_EXT_STATUS_DataIndSequence(status) "
00003699 4558545f53544154
000036a1 55535f4461746149
000036a9 6e6453657175656e
000036b1 6365287374617475
000036b9 73292000        
000036bd 01               22899		.byte	1
000036be d402             22900		.byte	212,2
000036c0 46424c5f4d454d5f 22901		.strz	"FBL_MEM_EXT_STATUS_DataIndParam(status) "
000036c8 4558545f53544154
000036d0 55535f4461746149
000036d8 6e64506172616d28
000036e0 7374617475732920
000036e8 00              
000036e9 01               22902		.byte	1
000036ea d502             22903		.byte	213,2
000036ec 46424c5f4d454d5f 22904		.strz	"FBL_MEM_EXT_STATUS_DataIndOverflow(status) FblErrStatSetState(FBL_ERR_DATA_OVERFLOW)"
000036f4 4558545f53544154
000036fc 55535f4461746149
00003704 6e644f766572666c
0000370c 6f77287374617475
00003714 73292046626c4572
0000371c 7253746174536574
00003724 5374617465284642
0000372c 4c5f4552525f4441
00003734 54415f4f56455246
0000373c 4c4f572900      
00003741 01               22905		.byte	1
00003742 e202             22906		.byte	226,2
00003744 46424c5f4d454d5f 22907		.strz	"FBL_MEM_EXT_STATUS_DriverWrite(status) { FblErrStatSetFlashDrvError(status); FblErrStatSetError(FBL_ERR_FLASH_PROG_ERROR); }"
0000374c 4558545f53544154
00003754 55535f4472697665
0000375c 7257726974652873
00003764 746174757329207b
0000376c 2046626c45727253
00003774 746174536574466c
0000377c 6173684472764572
00003784 726f722873746174
0000378c 7573293b2046626c
00003794 4572725374617453
0000379c 65744572726f7228
000037a4 46424c5f4552525f
000037ac 464c4153485f5052
000037b4 4f475f4552524f52
000037bc 293b207d00      
000037c1 01               22908		.byte	1
000037c2 e302             22909		.byte	227,2
000037c4 46424c5f4d454d5f 22910		.strz	"FBL_MEM_EXT_STATUS_DriverErase(status) { FblErrStatSetFlashDrvError(status); FblErrStatSetError(FBL_ERR_FLASH_ERASE_ERROR); }"
000037cc 4558545f53544154
000037d4 55535f4472697665
000037dc 7245726173652873
000037e4 746174757329207b
000037ec 2046626c45727253
000037f4 746174536574466c
000037fc 6173684472764572
00003804 726f722873746174
0000380c 7573293b2046626c
00003814 4572725374617453
0000381c 65744572726f7228
00003824 46424c5f4552525f
0000382c 464c4153485f4552
00003834 4153455f4552524f
0000383c 52293b207d00    
00003842 01               22911		.byte	1
00003843 e702             22912		.byte	231,2
00003845 46424c5f4d454d5f 22913		.strz	"FBL_MEM_EXT_STATUS_ProgramOverflow(status) FblErrStatSetState(FBL_ERR_DATA_OVERFLOW)"
0000384d 4558545f53544154
00003855 55535f50726f6772
0000385d 616d4f766572666c
00003865 6f77287374617475
0000386d 73292046626c4572
00003875 7253746174536574
0000387d 5374617465284642
00003885 4c5f4552525f4441
0000388d 54415f4f56455246
00003895 4c4f572900      
0000389a 01               22914		.byte	1
0000389b e802             22915		.byte	232,2
0000389d 46424c5f4d454d5f 22916		.strz	"FBL_MEM_EXT_STATUS_ProgramOutsideFbt(status) FblErrStatSetError(FBL_ERR_NO_MEMORY_REGION_FOUND)"
000038a5 4558545f53544154
000038ad 55535f50726f6772
000038b5 616d4f7574736964
000038bd 6546627428737461
000038c5 747573292046626c
000038cd 4572725374617453
000038d5 65744572726f7228
000038dd 46424c5f4552525f
000038e5 4e4f5f4d454d4f52
000038ed 595f524547494f4e
000038f5 5f464f554e442900
000038fd 01               22917		.byte	1
000038fe e902             22918		.byte	233,2
00003900 46424c5f4d454d5f 22919		.strz	"FBL_MEM_EXT_STATUS_ProgramUnalignedAddress(status) FblErrStatSetError(FBL_ERR_FLASH_PROG_ERROR)"
00003908 4558545f53544154
00003910 55535f50726f6772
00003918 616d556e616c6967
00003920 6e65644164647265
00003928 7373287374617475
00003930 73292046626c4572
00003938 7253746174536574
00003940 4572726f72284642
00003948 4c5f4552525f464c
00003950 4153485f50524f47
00003958 5f4552524f522900
00003960 01               22920		.byte	1
00003961 eb02             22921		.byte	235,2
00003963 46424c5f4d454d5f 22922		.strz	"FBL_MEM_EXT_STATUS_ProgramPreWrite(status) "
0000396b 4558545f53544154
00003973 55535f50726f6772
0000397b 616d507265577269
00003983 7465287374617475
0000398b 73292000        
0000398f 01               22923		.byte	1
00003990 ec02             22924		.byte	236,2
00003992 46424c5f4d454d5f 22925		.strz	"FBL_MEM_EXT_STATUS_ProgramPostWrite(status) "
0000399a 4558545f53544154
000039a2 55535f50726f6772
000039aa 616d506f73745772
000039b2 6974652873746174
000039ba 7573292000      
000039bf 01               22926		.byte	1
000039c0 ee02             22927		.byte	238,2
000039c2 46424c5f4d454d5f 22928		.strz	"FBL_MEM_EXT_STATUS_EraseOutsideFbt(status) FblErrStatSetError(FBL_ERR_NO_MEMORY_REGION_FOUND)"
000039ca 4558545f53544154
000039d2 55535f4572617365
000039da 4f75747369646546
000039e2 6274287374617475
000039ea 73292046626c4572
000039f2 7253746174536574
000039fa 4572726f72284642
00003a02 4c5f4552525f4e4f
00003a0a 5f4d454d4f52595f
00003a12 524547494f4e5f46
00003a1a 4f554e442900    
00003a20 01               22929		.byte	1
00003a21 f002             22930		.byte	240,2
00003a23 46424c5f4d454d5f 22931		.strz	"FBL_MEM_EXT_STATUS_ErasePreErase(status) "
00003a2b 4558545f53544154
00003a33 55535f4572617365
00003a3b 5072654572617365
00003a43 2873746174757329
00003a4b 2000            
00003a4d 01               22932		.byte	1
00003a4e f102             22933		.byte	241,2
00003a50 46424c5f4d454d5f 22934		.strz	"FBL_MEM_EXT_STATUS_ErasePostErase(status) "
00003a58 4558545f53544154
00003a60 55535f4572617365
00003a68 506f737445726173
00003a70 6528737461747573
00003a78 292000          
00003a7b 01               22935		.byte	1
00003a7c fa02             22936		.byte	250,2
00003a7e 46424c5f4d454d5f 22937		.strz	"FBL_MEM_EXT_STATUS_ProgramAddress(status) FblErrStatSetAddress(status)"
00003a86 4558545f53544154
00003a8e 55535f50726f6772
00003a96 616d416464726573
00003a9e 7328737461747573
00003aa6 292046626c457272
00003aae 5374617453657441
00003ab6 6464726573732873
00003abe 74617475732900  
00003ac5 01               22938		.byte	1
00003ac6 fb02             22939		.byte	251,2
00003ac8 46424c5f4d454d5f 22940		.strz	"FBL_MEM_EXT_STATUS_EraseAddress(status) FblErrStatSetAddress(status)"
00003ad0 4558545f53544154
00003ad8 55535f4572617365
00003ae0 4164647265737328
00003ae8 7374617475732920
00003af0 46626c4572725374
00003af8 6174536574416464
00003b00 7265737328737461
00003b08 7475732900      
00003b0d 04               22941		.byte	4
00003b0e 01               22942		.byte	1
00003b0f c201             22943		.byte	194,1
00003b11 46626c4d656d5461 22944		.strz	"FblMemTaskIsPending() (fblMemProgState >= kFblMemProgState_Suspended)"
00003b19 736b497350656e64
00003b21 696e672829202866
00003b29 626c4d656d50726f
00003b31 675374617465203e
00003b39 3d206b46626c4d65
00003b41 6d50726f67537461
00003b49 74655f5375737065
00003b51 6e6465642900    
00003b57 01               22945		.byte	1
00003b58 cc01             22946		.byte	204,1
00003b5a 46424c5f4d454d5f 22947		.strz	"FBL_MEM_SOURCE_HANDLE_DEFAULT 0u"
00003b62 534f555243455f48
00003b6a 414e444c455f4445
00003b72 4641554c54203075
00003b7a 00              

                                   Fri Apr 10 08:32:15 2020           Page 411
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
00003b7b 01               22948		.byte	1
00003b7c e901             22949		.byte	233,1
00003b7e 46424c5f4d454d5f 22950		.strz	"FBL_MEM_ENABLE_GAP_FILL "
00003b86 454e41424c455f47
00003b8e 41505f46494c4c20
00003b96 00              
00003b97 01               22951		.byte	1
00003b98 f901             22952		.byte	249,1
00003b9a 46424c5f4d454d5f 22953		.strz	"FBL_MEM_ENABLE_SEGMENT_HANDLING "
00003ba2 454e41424c455f53
00003baa 45474d454e545f48
00003bb2 414e444c494e4720
00003bba 00              
00003bbb 01               22954		.byte	1
00003bbc 8402             22955		.byte	132,2
00003bbe 46424c5f4d454d5f 22956		.strz	"FBL_MEM_ENABLE_GLOBAL_BLOCK_INFO "
00003bc6 454e41424c455f47
00003bce 4c4f42414c5f424c
00003bd6 4f434b5f494e464f
00003bde 2000            
00003be0 01               22957		.byte	1
00003be1 8f02             22958		.byte	143,2
00003be3 46424c5f4d454d5f 22959		.strz	"FBL_MEM_VERIFY_OK (tFblMemVerifyStatus)(SECM_OK)"
00003beb 5645524946595f4f
00003bf3 4b20287446626c4d
00003bfb 656d566572696679
00003c03 5374617475732928
00003c0b 5345434d5f4f4b29
00003c13 00              
00003c14 01               22960		.byte	1
00003c15 a902             22961		.byte	169,2
00003c17 46424c5f4d454d5f 22962		.strz	"FBL_MEM_STATUS_NAME(name) kFblMemStatus_ ## name"
00003c1f 5354415455535f4e
00003c27 414d45286e616d65
00003c2f 29206b46626c4d65
00003c37 6d5374617475735f
00003c3f 202323206e616d65
00003c47 00              
00003c48 01               22963		.byte	1
00003c49 aa02             22964		.byte	170,2
00003c4b 46424c5f4d454d5f 22965		.strz	"FBL_MEM_STATUS_DEFINE(name) FBL_MEM_STATUS_ ## name"
00003c53 5354415455535f44
00003c5b 4546494e45286e61
00003c63 6d65292046424c5f
00003c6b 4d454d5f53544154
00003c73 55535f202323206e
00003c7b 616d6500        
00003c7f 01               22966		.byte	1
00003c80 ae02             22967		.byte	174,2
00003c82 46424c5f4d454d5f 22968		.strz	"FBL_MEM_STATUS_DEFINITION(name) FBL_MEM_STATUS_NAME(name) = FBL_MEM_STATUS_DEFINE(name)"
00003c8a 5354415455535f44
00003c92 4546494e4954494f
00003c9a 4e286e616d652920
00003ca2 46424c5f4d454d5f
00003caa 5354415455535f4e
00003cb2 414d45286e616d65
00003cba 29203d2046424c5f
00003cc2 4d454d5f53544154
00003cca 55535f444546494e
00003cd2 45286e616d652900
00003cda 01               22969		.byte	1
00003cdb e006             22970		.byte	224,6
00003cdd 46424c4c49425f4d 22971		.strz	"FBLLIB_MEM_RAMCODE_START_SEC_CODE_EXPORT "
00003ce5 454d5f52414d434f
00003ced 44455f5354415254
00003cf5 5f5345435f434f44
00003cfd 455f4558504f5254
00003d05 2000            
00003d07 03               22972		.byte	3
00003d08 e106             22973		.byte	225,6
00003d0a 18               22974		.byte	24
00003d0b 01               22975		.byte	1
00003d0c 2b               22976		.byte	43
00003d0d 46424c5f4d454d4d 22977		.strz	"FBL_MEMMAP_ERROR "
00003d15 41505f4552524f52
00003d1d 2000            
00003d1f 04               22978		.byte	4
00003d20 01               22979		.byte	1
00003d21 e506             22980		.byte	229,6
00003d23 46424c4c49425f4d 22981		.strz	"FBLLIB_MEM_RAMCODE_STOP_SEC_CODE_EXPORT "
00003d2b 454d5f52414d434f
00003d33 44455f53544f505f
00003d3b 5345435f434f4445
00003d43 5f4558504f525420
00003d4b 00              
00003d4c 03               22982		.byte	3
00003d4d e606             22983		.byte	230,6
00003d4f 18               22984		.byte	24
00003d50 01               22985		.byte	1
00003d51 2b               22986		.byte	43
00003d52 46424c5f4d454d4d 22987		.strz	"FBL_MEMMAP_ERROR "
00003d5a 41505f4552524f52
00003d62 2000            
00003d64 04               22988		.byte	4
00003d65 01               22989		.byte	1
00003d66 f106             22990		.byte	241,6
00003d68 46424c4c49425f4d 22991		.strz	"FBLLIB_MEM_START_SEC_VAR_EXPORT "
00003d70 454d5f5354415254
00003d78 5f5345435f564152
00003d80 5f4558504f525420
00003d88 00              
00003d89 03               22992		.byte	3
00003d8a f206             22993		.byte	242,6
00003d8c 18               22994		.byte	24
00003d8d 01               22995		.byte	1
00003d8e 2b               22996		.byte	43
00003d8f 46424c5f4d454d4d 22997		.strz	"FBL_MEMMAP_ERROR "
00003d97 41505f4552524f52
00003d9f 2000            
00003da1 04               22998		.byte	4
00003da2 01               22999		.byte	1
00003da3 f606             23000		.byte	246,6
00003da5 46424c4c49425f4d 23001		.strz	"FBLLIB_MEM_STOP_SEC_VAR_EXPORT "
00003dad 454d5f53544f505f
00003db5 5345435f5641525f
00003dbd 4558504f52542000
00003dc5 03               23002		.byte	3
00003dc6 f706             23003		.byte	247,6

                                   Fri Apr 10 08:32:15 2020           Page 412
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
00003dc8 18               23004		.byte	24
00003dc9 01               23005		.byte	1
00003dca 2b               23006		.byte	43
00003dcb 46424c5f4d454d4d 23007		.strz	"FBL_MEMMAP_ERROR "
00003dd3 41505f4552524f52
00003ddb 2000            
00003ddd 04               23008		.byte	4
00003dde 04               23009		.byte	4
00003ddf 03               23010		.byte	3
00003de0 a901             23011		.byte	169,1
00003de2 31               23012		.byte	49
00003de3 01               23013		.byte	1
00003de4 ac02             23014		.byte	172,2
00003de6 46424c41505f5241 23015		.strz	"FBLAP_RAMCODE_START_SEC_CODE_EXPORT "
00003dee 4d434f44455f5354
00003df6 4152545f5345435f
00003dfe 434f44455f455850
00003e06 4f52542000      
00003e0b 03               23016		.byte	3
00003e0c ad02             23017		.byte	173,2
00003e0e 18               23018		.byte	24
00003e0f 01               23019		.byte	1
00003e10 2b               23020		.byte	43
00003e11 46424c5f4d454d4d 23021		.strz	"FBL_MEMMAP_ERROR "
00003e19 41505f4552524f52
00003e21 2000            
00003e23 04               23022		.byte	4
00003e24 01               23023		.byte	1
00003e25 af02             23024		.byte	175,2
00003e27 46424c41505f5241 23025		.strz	"FBLAP_RAMCODE_STOP_SEC_CODE_EXPORT "
00003e2f 4d434f44455f5354
00003e37 4f505f5345435f43
00003e3f 4f44455f4558504f
00003e47 52542000        
00003e4b 03               23026		.byte	3
00003e4c b002             23027		.byte	176,2
00003e4e 18               23028		.byte	24
00003e4f 01               23029		.byte	1
00003e50 2b               23030		.byte	43
00003e51 46424c5f4d454d4d 23031		.strz	"FBL_MEMMAP_ERROR "
00003e59 41505f4552524f52
00003e61 2000            
00003e63 04               23032		.byte	4
00003e64 04               23033		.byte	4
00003e65 03               23034		.byte	3
00003e66 aa01             23035		.byte	170,1
00003e68 32               23036		.byte	50
00003e69 01               23037		.byte	1
00003e6a 9402             23038		.byte	148,2
00003e6c 5744545249474745 23039		.strz	"WDTRIGGER_START_SEC_CODE_EXPORT "
00003e74 525f53544152545f
00003e7c 5345435f434f4445
00003e84 5f4558504f525420
00003e8c 00              
00003e8d 03               23040		.byte	3
00003e8e 9502             23041		.byte	149,2
00003e90 18               23042		.byte	24
00003e91 01               23043		.byte	1
00003e92 2b               23044		.byte	43
00003e93 46424c5f4d454d4d 23045		.strz	"FBL_MEMMAP_ERROR "
00003e9b 41505f4552524f52
00003ea3 2000            
00003ea5 04               23046		.byte	4
00003ea6 01               23047		.byte	1
00003ea7 9702             23048		.byte	151,2
00003ea9 5744545249474745 23049		.strz	"WDTRIGGER_STOP_SEC_CODE_EXPORT "
00003eb1 525f53544f505f53
00003eb9 45435f434f44455f
00003ec1 4558504f52542000
00003ec9 03               23050		.byte	3
00003eca 9802             23051		.byte	152,2
00003ecc 18               23052		.byte	24
00003ecd 01               23053		.byte	1
00003ece 2b               23054		.byte	43
00003ecf 46424c5f4d454d4d 23055		.strz	"FBL_MEMMAP_ERROR "
00003ed7 41505f4552524f52
00003edf 2000            
00003ee1 04               23056		.byte	4
00003ee2 04               23057		.byte	4
00003ee3 03               23058		.byte	3
00003ee4 ab01             23059		.byte	171,1

                                   Fri Apr 10 08:32:15 2020           Page 413
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
00003ee6 33               23060		.byte	51
00003ee7 04               23061		.byte	4
00003ee8 03               23062		.byte	3
00003ee9 ac01             23063		.byte	172,1
00003eeb 34               23064		.byte	52
00003eec 01               23065		.byte	1
00003eed f501             23066		.byte	245,1
00003eef 6b46626c50726573 23067		.strz	"kFblPresencePatternSize 4u"
00003ef7 656e636550617474
00003eff 65726e53697a6520
00003f07 347500          
00003f0a 04               23068		.byte	4
00003f0b 03               23069		.byte	3
00003f0c b201             23070		.byte	178,1
00003f0e 35               23071		.byte	53
00003f0f 01               23072		.byte	1
00003f10 47               23073		.byte	71
00003f11 6b46626c4d61696e 23074		.strz	"kFblMainNumberOfStates 7u"
00003f19 4e756d6265724f66
00003f21 5374617465732037
00003f29 7500            
00003f2b 01               23075		.byte	1
00003f2c 8701             23076		.byte	135,1
00003f2e 6b46626c4e6f4f66 23077		.strz	"kFblNoOfMagicBytes 8u"
00003f36 4d61676963427974
00003f3e 657320387500    
00003f44 01               23078		.byte	1
00003f45 e501             23079		.byte	229,1
00003f47 46424c4845414445 23080		.strz	"FBLHEADER_START_SEC_CONST "
00003f4f 525f53544152545f
00003f57 5345435f434f4e53
00003f5f 542000          
00003f62 03               23081		.byte	3
00003f63 e601             23082		.byte	230,1
00003f65 18               23083		.byte	24
00003f66 01               23084		.byte	1
00003f67 2b               23085		.byte	43
00003f68 46424c5f4d454d4d 23086		.strz	"FBL_MEMMAP_ERROR "
00003f70 41505f4552524f52
00003f78 2000            
00003f7a 04               23087		.byte	4
00003f7b 01               23088		.byte	1
00003f7c e801             23089		.byte	232,1
00003f7e 46424c4845414445 23090		.strz	"FBLHEADER_STOP_SEC_CONST "
00003f86 525f53544f505f53
00003f8e 45435f434f4e5354
00003f96 2000            
00003f98 03               23091		.byte	3
00003f99 e901             23092		.byte	233,1
00003f9b 18               23093		.byte	24
00003f9c 01               23094		.byte	1
00003f9d 2b               23095		.byte	43
00003f9e 46424c5f4d454d4d 23096		.strz	"FBL_MEMMAP_ERROR "
00003fa6 41505f4552524f52
00003fae 2000            
00003fb0 04               23097		.byte	4
00003fb1 01               23098		.byte	1
00003fb2 ec01             23099		.byte	236,1
00003fb4 46424c5f4d41494e 23100		.strz	"FBL_MAIN_MAGICFLAG_START_SEC_VAR "
00003fbc 5f4d41474943464c
00003fc4 41475f5354415254
00003fcc 5f5345435f564152
00003fd4 2000            
00003fd6 03               23101		.byte	3
00003fd7 ed01             23102		.byte	237,1
00003fd9 18               23103		.byte	24
00003fda 01               23104		.byte	1
00003fdb 2b               23105		.byte	43
00003fdc 46424c5f4d454d4d 23106		.strz	"FBL_MEMMAP_ERROR "
00003fe4 41505f4552524f52
00003fec 2000            
00003fee 04               23107		.byte	4
00003fef 01               23108		.byte	1
00003ff0 f301             23109		.byte	243,1
00003ff2 46424c5f4d41494e 23110		.strz	"FBL_MAIN_MAGICFLAG_STOP_SEC_VAR "
00003ffa 5f4d41474943464c
00004002 41475f53544f505f
0000400a 5345435f56415220
00004012 00              
00004013 03               23111		.byte	3
00004014 f401             23112		.byte	244,1
00004016 18               23113		.byte	24
00004017 01               23114		.byte	1
00004018 2b               23115		.byte	43

                                   Fri Apr 10 08:32:15 2020           Page 414
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
00004019 46424c5f4d454d4d 23116		.strz	"FBL_MEMMAP_ERROR "
00004021 41505f4552524f52
00004029 2000            
0000402b 04               23117		.byte	4
0000402c 01               23118		.byte	1
0000402d fc01             23119		.byte	252,1
0000402f 46424c5f4d41494e 23120		.strz	"FBL_MAIN_FBLSTART_START_SEC_CODE "
00004037 5f46424c53544152
0000403f 545f53544152545f
00004047 5345435f434f4445
0000404f 2000            
00004051 03               23121		.byte	3
00004052 fd01             23122		.byte	253,1
00004054 18               23123		.byte	24
00004055 01               23124		.byte	1
00004056 2b               23125		.byte	43
00004057 46424c5f4d454d4d 23126		.strz	"FBL_MEMMAP_ERROR "
0000405f 41505f4552524f52
00004067 2000            
00004069 04               23127		.byte	4
0000406a 01               23128		.byte	1
0000406b 8302             23129		.byte	131,2
0000406d 46424c5f4d41494e 23130		.strz	"FBL_MAIN_FBLSTART_STOP_SEC_CODE "
00004075 5f46424c53544152
0000407d 545f53544f505f53
00004085 45435f434f444520
0000408d 00              
0000408e 03               23131		.byte	3
0000408f 8402             23132		.byte	132,2
00004091 18               23133		.byte	24
00004092 01               23134		.byte	1
00004093 2b               23135		.byte	43
00004094 46424c5f4d454d4d 23136		.strz	"FBL_MEMMAP_ERROR "
0000409c 41505f4552524f52
000040a4 2000            
000040a6 04               23137		.byte	4
000040a7 04               23138		.byte	4
000040a8 04               23139		.byte	4
000040a9 01               23140		.byte	1
000040aa ca01             23141		.byte	202,1
000040ac 46424c5f4d454d5f 23142		.strz	"FBL_MEM_SEGMENT_SIZE FBL_MAX_SEGMENT_SIZE"
000040b4 5345474d454e545f
000040bc 53495a452046424c
000040c4 5f4d41585f534547
000040cc 4d454e545f53495a
000040d4 4500            
000040d6 01               23143		.byte	1
000040d7 d001             23144		.byte	208,1
000040d9 46424c5f4d454d5f 23145		.strz	"FBL_MEM_ENABLE_PREAMBLE_HANDLING "
000040e1 454e41424c455f50
000040e9 5245414d424c455f
000040f1 48414e444c494e47
000040f9 2000            
000040fb 01               23146		.byte	1
000040fc d801             23147		.byte	216,1
000040fe 46424c5f4d454d5f 23148		.strz	"FBL_MEM_ENABLE_REMAINDER_HANDLING "
00004106 454e41424c455f52
0000410e 454d41494e444552
00004116 5f48414e444c494e
0000411e 472000          
00004121 01               23149		.byte	1
00004122 8002             23150		.byte	128,2
00004124 46424c5f4d454d5f 23151		.strz	"FBL_MEM_ENABLE_VERIFICATION "
0000412c 454e41424c455f56
00004134 4552494649434154
0000413c 494f4e2000      
00004141 01               23152		.byte	1
00004142 8702             23153		.byte	135,2
00004144 46424c5f4d454d5f 23154		.strz	"FBL_MEM_VERIFY_INPUT_SEGMENTATION FBL_MEM_VERIFY_SEGMENTATION"
0000414c 5645524946595f49
00004154 4e5055545f534547
0000415c 4d454e544154494f
00004164 4e2046424c5f4d45
0000416c 4d5f564552494659
00004174 5f5345474d454e54
0000417c 4154494f4e00    
00004182 01               23155		.byte	1
00004183 8c02             23156		.byte	140,2
00004185 46424c5f4d454d5f 23157		.strz	"FBL_MEM_VERIFY_PIPELINED_SEGMENTATION FBL_MEM_VERIFY_SEGMENTATION"
0000418d 5645524946595f50
00004195 4950454c494e4544
0000419d 5f5345474d454e54
000041a5 4154494f4e204642
000041ad 4c5f4d454d5f5645
000041b5 524946595f534547
000041bd 4d454e544154494f
000041c5 4e00            
000041c7 01               23158		.byte	1
000041c8 9e02             23159		.byte	158,2
000041ca 46424c5f4d454d5f 23160		.strz	"FBL_MEM_ENABLE_RESPONSE_PENDING "
000041d2 454e41424c455f52
000041da 4553504f4e53455f
000041e2 50454e44494e4720
000041ea 00              
000041eb 01               23161		.byte	1
000041ec a102             23162		.byte	161,2
000041ee 46424c5f4d454d5f 23163		.strz	"FBL_MEM_ENABLE_INPUT_DATA_FLUSH "
000041f6 454e41424c455f49
000041fe 4e5055545f444154
00004206 415f464c55534820
0000420e 00              
0000420f 01               23164		.byte	1
00004210 ab02             23165		.byte	171,2
00004212 46424c5f4d454d5f 23166		.strz	"FBL_MEM_GAP_FILL_SEGMENTATION FBL_MEM_WRITE_SEGMENTATION"
0000421a 4741505f46494c4c
00004222 5f5345474d454e54
0000422a 4154494f4e204642
00004232 4c5f4d454d5f5752
0000423a 4954455f5345474d
00004242 454e544154494f4e
0000424a 00              
0000424b 01               23167		.byte	1
0000424c dc02             23168		.byte	220,2
0000424e 46424c5f4d454d5f 23169		.strz	"FBL_MEM_QUEUE_ENTRIES_INPUT 1u"
00004256 51554555455f454e
0000425e 54524945535f494e
00004266 50555420317500  
0000426d 01               23170		.byte	1
0000426e df02             23171		.byte	223,2

                                   Fri Apr 10 08:32:15 2020           Page 415
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
00004270 46424c5f4d454d5f 23172		.strz	"FBL_MEM_BUFFER_COUNT_INPUT ((FBL_MEM_QUEUE_ENTRIES_INPUT + FBL_MEM_SOURCE_COUNT) - 1u)"
00004278 4255464645525f43
00004280 4f554e545f494e50
00004288 555420282846424c
00004290 5f4d454d5f515545
00004298 55455f454e545249
000042a0 45535f494e505554
000042a8 202b2046424c5f4d
000042b0 454d5f534f555243
000042b8 455f434f554e5429
000042c0 202d2031752900  
000042c7 01               23173		.byte	1
000042c8 e102             23174		.byte	225,2
000042ca 46424c5f4d454d5f 23175		.strz	"FBL_MEM_QUEUE_ENTRIES_VERIFY_INPUT 0u"
000042d2 51554555455f454e
000042da 54524945535f5645
000042e2 524946595f494e50
000042ea 555420307500    
000042f0 01               23176		.byte	1
000042f1 e302             23177		.byte	227,2
000042f3 46424c5f4d454d5f 23178		.strz	"FBL_MEM_QUEUE_ENTRIES_VERIFY_PROCESSED 0u"
000042fb 51554555455f454e
00004303 54524945535f5645
0000430b 524946595f50524f
00004313 4345535345442030
0000431b 7500            
0000431d 01               23179		.byte	1
0000431e e502             23180		.byte	229,2
00004320 46424c5f4d454d5f 23181		.strz	"FBL_MEM_QUEUE_ENTRIES_VERIFY_PIPE 0u"
00004328 51554555455f454e
00004330 54524945535f5645
00004338 524946595f504950
00004340 4520307500      
00004345 01               23182		.byte	1
00004346 eb02             23183		.byte	235,2
00004348 46424c5f4d454d5f 23184		.strz	"FBL_MEM_QUEUE_ENTRIES_DATA_PROC 0u"
00004350 51554555455f454e
00004358 54524945535f4441
00004360 54415f50524f4320
00004368 307500          
0000436b 01               23185		.byte	1
0000436c f202             23186		.byte	242,2
0000436e 46424c5f4d454d5f 23187		.strz	"FBL_MEM_QUEUE_ENTRIES_STREAM_OUTPUT 0u"
00004376 51554555455f454e
0000437e 54524945535f5354
00004386 5245414d5f4f5554
0000438e 50555420307500  
00004395 01               23188		.byte	1
00004396 f802             23189		.byte	248,2
00004398 46424c5f4d454d5f 23190		.strz	"FBL_MEM_QUEUE_ENTRIES_REMAINDER 1u"
000043a0 51554555455f454e
000043a8 54524945535f5245
000043b0 4d41494e44455220
000043b8 317500          
000043bb 01               23191		.byte	1
000043bc fd02             23192		.byte	253,2
000043be 46424c5f4d454d5f 23193		.strz	"FBL_MEM_QUEUE_ENTRIES_CHECKPOINT 0u"
000043c6 51554555455f454e
000043ce 54524945535f4348
000043d6 45434b504f494e54
000043de 20307500        
000043e2 01               23194		.byte	1
000043e3 8103             23195		.byte	129,3
000043e5 46424c5f4d454d5f 23196		.strz	"FBL_MEM_QUEUE_ENTRIES_GAP_FILL 1u"
000043ed 51554555455f454e
000043f5 54524945535f4741
000043fd 505f46494c4c2031
00004405 7500            
00004407 01               23197		.byte	1
00004408 8703             23198		.byte	135,3
0000440a 46424c5f4d454d5f 23199		.byte	70,66,76,95,77,69,77,95,81,85,69,85,69,95,69,78,84,82,73,69,83,95,80,82,79,67,69,83,83,73,78,71,32,40,32,70,66,76,95,77,69,77,95,81,85,69,85,69,95,69,78,84,82,73,69,83,95,86,69,82,73
00004412 51554555455f454e
0000441a 54524945535f5052
00004422 4f43455353494e47
0000442a 20282046424c5f4d
00004432 454d5f5155455545
0000443a 5f454e5452494553
00004442 5f56455249      
00004447 46595f494e505554 23200		.byte	70,89,95,73,78,80,85,84,32,43,32,70,66,76,95,77,69,77,95,81,85,69,85,69,95,69,78,84,82,73,69,83,95,86,69,82,73,70,89,95,80,82,79,67,69,83,83,69,68,32,43,32,70,66,76,95,77,69,77,95,81
0000444f 202b2046424c5f4d
00004457 454d5f5155455545
0000445f 5f454e5452494553
00004467 5f5645524946595f
0000446f 50524f4345535345
00004477 44202b2046424c5f
0000447f 4d454d5f51      
00004484 554555455f454e54 23201		.byte	85,69,85,69,95,69,78,84,82,73,69,83,95,68,65,84,65,95,80,82,79,67,32,43,32,70,66,76,95,77,69,77,95,81,85,69,85,69,95,69,78,84,82,73,69,83,95,83,84,82,69,65,77,95,79,85,84,80,85,84,32
0000448c 524945535f444154
00004494 415f50524f43202b
0000449c 2046424c5f4d454d
000044a4 5f51554555455f45
000044ac 4e54524945535f53
000044b4 545245414d5f4f55
000044bc 5450555420      
000044c1 2b2046424c5f4d45 23202		.byte	43,32,70,66,76,95,77,69,77,95,81,85,69,85,69,95,69,78,84,82,73,69,83,95,73,78,80,85,84,32,43,32,70,66,76,95,77,69,77,95,81,85,69,85,69,95,69,78,84,82,73,69,83,95,86,69,82,73,70,89,95
000044c9 4d5f51554555455f
000044d1 454e54524945535f
000044d9 494e505554202b20
000044e1 46424c5f4d454d5f
000044e9 51554555455f454e
000044f1 54524945535f5645
000044f9 524946595f      
000044fe 50495045202b2046 23203		.byte	80,73,80,69,32,43,32,70,66,76,95,77,69,77,95,81,85,69,85,69,95,69,78,84,82,73,69,83,95,67,72,69,67,75,80,79,73,78,84,32,43,32,70,66,76,95,77,69,77,95,81,85,69,85,69,95,69,78,84,82,73
00004506 424c5f4d454d5f51
0000450e 554555455f454e54
00004516 524945535f434845
0000451e 434b504f494e5420
00004526 2b2046424c5f4d45
0000452e 4d5f51554555455f
00004536 454e545249      
0000453b 45535f4741505f46 23204		.byte	69,83,95,71,65,80,95,70,73,76,76,32,41,0
00004543 494c4c202900    
00004549 01               23205		.byte	1
0000454a 8e03             23206		.byte	142,3
0000454c 46424c5f4d454d5f 23207		.strz	"FBL_MEM_ENABLE_PROC_QUEUE "
00004554 454e41424c455f50
0000455c 524f435f51554555
00004564 452000          
00004567 01               23208		.byte	1
00004568 9003             23209		.byte	144,3
0000456a 46424c5f4d454d5f 23210		.strz	"FBL_MEM_QUEUE_ENTRIES_TOTAL (FBL_MEM_QUEUE_ENTRIES_PROCESSING + FBL_MEM_QUEUE_ENTRIES_REMAINDER)"
00004572 51554555455f454e
0000457a 54524945535f544f
00004582 54414c202846424c
0000458a 5f4d454d5f515545
00004592 55455f454e545249
0000459a 45535f50524f4345
000045a2 5353494e47202b20
000045aa 46424c5f4d454d5f
000045b2 51554555455f454e
000045ba 54524945535f5245
000045c2 4d41494e44455229
000045ca 00              
000045cb 01               23211		.byte	1
000045cc a203             23212		.byte	162,3
000045ce 46424c5f4d454d5f 23213		.strz	"FBL_MEM_RESERVED_QUEUE_ENTRIES 2u"
000045d6 5245534552564544
000045de 5f51554555455f45
000045e6 4e54524945532032
000045ee 7500            
000045f0 01               23214		.byte	1
000045f1 a403             23215		.byte	164,3
000045f3 46424c5f4d454d5f 23216		.strz	"FBL_MEM_QUEUE_HANDLE_HEAD_USED 0u"
000045fb 51554555455f4841
00004603 4e444c455f484541
0000460b 445f555345442030
00004613 7500            
00004615 01               23217		.byte	1
00004616 a503             23218		.byte	165,3
00004618 46424c5f4d454d5f 23219		.strz	"FBL_MEM_QUEUE_HANDLE_HEAD_FREE 1u"
00004620 51554555455f4841
00004628 4e444c455f484541
00004630 445f465245452031
00004638 7500            
0000463a 01               23220		.byte	1
0000463b aa03             23221		.byte	170,3
0000463d 46424c5f4d454d5f 23222		.strz	"FBL_MEM_QUEUE_SIZE_PROCESSING (FBL_MEM_RESERVED_QUEUE_ENTRIES + FBL_MEM_QUEUE_ENTRIES_TOTAL)"
00004645 51554555455f5349
0000464d 5a455f50524f4345
00004655 5353494e47202846
0000465d 424c5f4d454d5f52
00004665 455345525645445f
0000466d 51554555455f454e
00004675 5452494553202b20
0000467d 46424c5f4d454d5f
00004685 51554555455f454e
0000468d 54524945535f544f
00004695 54414c2900      
0000469a 01               23223		.byte	1
0000469b b003             23224		.byte	176,3
0000469d 46626c4d656d5175 23225		.strz	"FblMemQueueIsEmpty(queue) (FBL_MEM_QUEUE_HANDLE_HEAD_USED == (queue)[FBL_MEM_QUEUE_HANDLE_HEAD_USED].next)"
000046a5 6575654973456d70
000046ad 7479287175657565
000046b5 29202846424c5f4d
000046bd 454d5f5155455545
000046c5 5f48414e444c455f
000046cd 484541445f555345
000046d5 44203d3d20287175
000046dd 657565295b46424c
000046e5 5f4d454d5f515545
000046ed 55455f48414e444c
000046f5 455f484541445f55
000046fd 5345445d2e6e6578
00004705 742900          
00004708 01               23226		.byte	1
00004709 b103             23227		.byte	177,3

                                   Fri Apr 10 08:32:15 2020           Page 416
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
0000470b 46626c4d656d5175 23228		.strz	"FblMemQueueIsFull(queue) (FBL_MEM_QUEUE_HANDLE_HEAD_FREE == (queue)[FBL_MEM_QUEUE_HANDLE_HEAD_FREE].next)"
00004713 657565497346756c
0000471b 6c28717565756529
00004723 202846424c5f4d45
0000472b 4d5f51554555455f
00004733 48414e444c455f48
0000473b 4541445f46524545
00004743 203d3d2028717565
0000474b 7565295b46424c5f
00004753 4d454d5f51554555
0000475b 455f48414e444c45
00004763 5f484541445f4652
0000476b 45455d2e6e657874
00004773 2900            
00004775 01               23229		.byte	1
00004776 b403             23230		.byte	180,3
00004778 46626c4d656d5175 23231		.strz	"FblMemQueueGetFirstUsedHandle(queue) ((queue)[FBL_MEM_QUEUE_HANDLE_HEAD_USED].next)"
00004780 6575654765744669
00004788 7273745573656448
00004790 616e646c65287175
00004798 6575652920282871
000047a0 75657565295b4642
000047a8 4c5f4d454d5f5155
000047b0 4555455f48414e44
000047b8 4c455f484541445f
000047c0 555345445d2e6e65
000047c8 78742900        
000047cc 01               23232		.byte	1
000047cd b903             23233		.byte	185,3
000047cf 46626c4d656d5175 23234		.strz	"FblMemQueueGetEntry(queue,handle) ((queue)[handle])"
000047d7 657565476574456e
000047df 7472792871756575
000047e7 652c68616e646c65
000047ef 2920282871756575
000047f7 65295b68616e646c
000047ff 655d2900        
00004803 01               23235		.byte	1
00004804 bb03             23236		.byte	187,3
00004806 46626c4d656d5175 23237		.strz	"FblMemQueueGetFirstUsedEntry(queue) (FblMemQueueGetEntry((queue), FblMemQueueGetFirstUsedHandle(queue)))"
0000480e 6575654765744669
00004816 7273745573656445
0000481e 6e74727928717565
00004826 756529202846626c
0000482e 4d656d5175657565
00004836 476574456e747279
0000483e 2828717565756529
00004846 2c2046626c4d656d
0000484e 5175657565476574
00004856 4669727374557365
0000485e 6448616e646c6528
00004866 7175657565292929
0000486e 00              
0000486f 01               23238		.byte	1
00004870 c103             23239		.byte	193,3
00004872 46424c5f4d454d5f 23240		.strz	"FBL_MEM_QUEUE_PRIO_LOWEST 0x00u"
0000487a 51554555455f5052
00004882 494f5f4c4f574553
0000488a 5420307830307500
00004892 01               23241		.byte	1
00004893 c203             23242		.byte	194,3
00004895 46424c5f4d454d5f 23243		.strz	"FBL_MEM_QUEUE_PRIO_HIGHEST 0xFFu"
0000489d 51554555455f5052
000048a5 494f5f4849474845
000048ad 5354203078464675
000048b5 00              
000048b6 01               23244		.byte	1
000048b7 c703             23245		.byte	199,3
000048b9 46424c5f4d454d5f 23246		.strz	"FBL_MEM_JOB_NULL ((V_MEMRAM1 tFblMemJob V_MEMRAM2 V_MEMRAM3 *)V_NULL)"
000048c1 4a4f425f4e554c4c
000048c9 202828565f4d454d
000048d1 52414d3120744662
000048d9 6c4d656d4a6f6220
000048e1 565f4d454d52414d
000048e9 3220565f4d454d52
000048f1 414d33202a29565f
000048f9 4e554c4c2900    
000048ff 01               23247		.byte	1
00004900 ca03             23248		.byte	202,3
00004902 46626c4d656d4765 23249		.strz	"FblMemGetPendingInputJob() (&FBL_MEM_INPUT_JOB[0])"
0000490a 7450656e64696e67
00004912 496e7075744a6f62
0000491a 282920282646424c
00004922 5f4d454d5f494e50
0000492a 55545f4a4f425b30
00004932 5d2900          
00004935 01               23250		.byte	1
00004936 ce03             23251		.byte	206,3
00004938 46424c5f4d454d5f 23252		.strz	"FBL_MEM_VERIFY_STATUS_NULL ((V_MEMRAM1 tFblMemVerifyStatus V_MEMRAM2 V_MEMRAM3 *)V_NULL)"
00004940 5645524946595f53
00004948 54415455535f4e55
00004950 4c4c202828565f4d
00004958 454d52414d312074
00004960 46626c4d656d5665
00004968 7269667953746174
00004970 757320565f4d454d
00004978 52414d3220565f4d
00004980 454d52414d33202a
00004988 29565f4e554c4c29
00004990 00              
00004991 01               23253		.byte	1
00004992 d503             23254		.byte	213,3
00004994 46424c5f4d454d5f 23255		.strz	"FBL_MEM_VERIFY_FCT_OUTPUT_NULL ((tFblMemVerifyFctOutput)0)"
0000499c 5645524946595f46
000049a4 43545f4f55545055
000049ac 545f4e554c4c2028
000049b4 287446626c4d656d
000049bc 5665726966794663
000049c4 744f757470757429
000049cc 302900          
000049cf 01               23256		.byte	1
000049d0 db03             23257		.byte	219,3
000049d2 46626c4d656d4765 23258		.strz	"FblMemGetRemainder(address,length,segSize) ((tFblLength)(((address) + (tFblAddress)(length)) & ((tFblAddress)(segSize) - 1u)))"
000049da 7452656d61696e64
000049e2 6572286164647265
000049ea 73732c6c656e6774
000049f2 682c73656753697a
000049fa 6529202828744662
00004a02 6c4c656e67746829
00004a0a 2828286164647265
00004a12 737329202b202874
00004a1a 46626c4164647265
00004a22 737329286c656e67
00004a2a 7468292920262028
00004a32 287446626c416464
00004a3a 7265737329287365
00004a42 6753697a6529202d
00004a4a 20317529292900  
00004a51 01               23259		.byte	1
00004a52 e103             23260		.byte	225,3
00004a54 46626c4d656d4765 23261		.strz	"FblMemGetWriteRemainder(address,length) FblMemGetSpecificRemainder((address), (length))"
00004a5c 7457726974655265
00004a64 6d61696e64657228
00004a6c 616464726573732c
00004a74 6c656e6774682920
00004a7c 46626c4d656d4765
00004a84 7453706563696669
00004a8c 6352656d61696e64
00004a94 6572282861646472
00004a9c 657373292c20286c
00004aa4 656e677468292900
00004aac 01               23262		.byte	1
00004aad ea03             23263		.byte	234,3
00004aaf 46424c5f4d454d5f 23264		.strz	"FBL_MEM_REMAINDER_PADDING (FBL_MEM_SEGMENT_SIZE - 1u)"
00004ab7 52454d41494e4445
00004abf 525f50414444494e
00004ac7 47202846424c5f4d
00004acf 454d5f5345474d45
00004ad7 4e545f53495a4520
00004adf 2d2031752900    
00004ae5 01               23265		.byte	1
00004ae6 ec03             23266		.byte	236,3
00004ae8 46424c5f4d454d5f 23267		.strz	"FBL_MEM_WRITE_PADDING (FBL_MEM_SEGMENT_SIZE - 1u)"
00004af0 57524954455f5041
00004af8 4444494e47202846
00004b00 424c5f4d454d5f53
00004b08 45474d454e545f53
00004b10 495a45202d203175
00004b18 2900            
00004b1a 01               23268		.byte	1
00004b1b f203             23269		.byte	242,3
00004b1d 46424c5f4d454d5f 23270		.strz	"FBL_MEM_TOTAL_PADDING (FBL_MEM_REMAINDER_PADDING + FBL_MEM_WRITE_PADDING)"
00004b25 544f54414c5f5041
00004b2d 4444494e47202846
00004b35 424c5f4d454d5f52
00004b3d 454d41494e444552
00004b45 5f50414444494e47
00004b4d 202b2046424c5f4d
00004b55 454d5f5752495445
00004b5d 5f50414444494e47
00004b65 2900            
00004b67 01               23271		.byte	1
00004b68 f603             23272		.byte	246,3
00004b6a 46424c5f4d454d5f 23273		.strz	"FBL_MEM_CANARY_VALUE 0x42697264ul"
00004b72 43414e4152595f56
00004b7a 414c554520307834
00004b82 3236393732363475
00004b8a 6c00            
00004b8c 01               23274		.byte	1
00004b8d fb03             23275		.byte	251,3
00004b8f 46424c5f4d454d5f 23276		.strz	"FBL_MEM_PLATFORM_ALIGN 4u"
00004b97 504c4154464f524d
00004b9f 5f414c49474e2034
00004ba7 7500            
00004ba9 01               23277		.byte	1
00004baa 8404             23278		.byte	132,4
00004bac 46424c5f4d454d5f 23279		.strz	"FBL_MEM_ALIGNED_BUFFER_TYPE(size) struct { vuint32 canaryFront; vuint8 data[size]; vuint32 canaryBack; }"
00004bb4 414c49474e45445f
00004bbc 4255464645525f54
00004bc4 5950452873697a65
00004bcc 2920737472756374
00004bd4 207b207675696e74
00004bdc 33322063616e6172
00004be4 7946726f6e743b20
00004bec 7675696e74382064
00004bf4 6174615b73697a65
00004bfc 5d3b207675696e74
00004c04 33322063616e6172
00004c0c 794261636b3b207d
00004c14 00              
00004c15 01               23280		.byte	1
00004c16 a604             23281		.byte	166,4
00004c18 46424c5f4d454d5f 23282		.strz	"FBL_MEM_LENGTH_ALIGN(length,align) (((((length) - 1u) / (align)) + 1u) * (align))"
00004c20 4c454e4754485f41
00004c28 4c49474e286c656e
00004c30 6774682c616c6967
00004c38 6e29202828282828
00004c40 6c656e6774682920
00004c48 2d20317529202f20
00004c50 28616c69676e2929
00004c58 202b20317529202a
00004c60 2028616c69676e29
00004c68 2900            
00004c6a 01               23283		.byte	1

                                   Fri Apr 10 08:32:15 2020           Page 417
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
00004c6b a904             23284		.byte	169,4
00004c6d 46424c5f4d454d5f 23285		.strz	"FBL_MEM_PREAMBLE_ALIGN(length) FBL_MEM_LENGTH_ALIGN((length), FBL_MEM_PLATFORM_ALIGN)"
00004c75 505245414d424c45
00004c7d 5f414c49474e286c
00004c85 656e677468292046
00004c8d 424c5f4d454d5f4c
00004c95 454e4754485f414c
00004c9d 49474e28286c656e
00004ca5 677468292c204642
00004cad 4c5f4d454d5f504c
00004cb5 4154464f524d5f41
00004cbd 4c49474e2900    
00004cc3 01               23286		.byte	1
00004cc4 ab04             23287		.byte	171,4
00004cc6 46424c5f4d454d5f 23288		.strz	"FBL_MEM_PREAMBLE_OFFSET(length) (FBL_MEM_PREAMBLE_ALIGN(length) - (length))"
00004cce 505245414d424c45
00004cd6 5f4f464653455428
00004cde 6c656e6774682920
00004ce6 2846424c5f4d454d
00004cee 5f505245414d424c
00004cf6 455f414c49474e28
00004cfe 6c656e6774682920
00004d06 2d20286c656e6774
00004d0e 68292900        
00004d12 01               23289		.byte	1
00004d13 ad04             23290		.byte	173,4
00004d15 46424c5f4d454d5f 23291		.strz	"FBL_MEM_PADDED_BUFFER_SIZE (FBL_MEM_BUFFER_SIZE + (FBL_MEM_PLATFORM_ALIGN - 1u) + FBL_MEM_TOTAL_PADDING)"
00004d1d 5041444445445f42
00004d25 55464645525f5349
00004d2d 5a45202846424c5f
00004d35 4d454d5f42554646
00004d3d 45525f53495a4520
00004d45 2b202846424c5f4d
00004d4d 454d5f504c415446
00004d55 4f524d5f414c4947
00004d5d 4e202d2031752920
00004d65 2b2046424c5f4d45
00004d6d 4d5f544f54414c5f
00004d75 50414444494e4729
00004d7d 00              
00004d7e 01               23292		.byte	1
00004d7f b804             23293		.byte	184,4
00004d81 46424c5f4d454d5f 23294		.strz	"FBL_MEM_ACTIVE_SOURCE 0u"
00004d89 4143544956455f53
00004d91 4f55524345203075
00004d99 00              
00004d9a 01               23295		.byte	1
00004d9b bc04             23296		.byte	188,4
00004d9d 46424c5f4d454d5f 23297		.strz	"FBL_MEM_SOURCE_COUNT 1u"
00004da5 534f555243455f43
00004dad 4f554e5420317500
00004db5 01               23298		.byte	1
00004db6 c504             23299		.byte	197,4
00004db8 46424c5f4d454d5f 23300		.strz	"FBL_MEM_PREAMBLE_LENGTH FBL_MEM_DEFAULT_PREAMBLE_LENGTH"
00004dc0 505245414d424c45
00004dc8 5f4c454e47544820
00004dd0 46424c5f4d454d5f
00004dd8 44454641554c545f
00004de0 505245414d424c45
00004de8 5f4c454e47544800
00004df0 01               23301		.byte	1
00004df1 c904             23302		.byte	201,4
00004df3 46424c5f4d454d5f 23303		.strz	"FBL_MEM_INPUT_JOB gInputJobs[FBL_MEM_ACTIVE_SOURCE]"
00004dfb 494e5055545f4a4f
00004e03 422067496e707574
00004e0b 4a6f62735b46424c
00004e13 5f4d454d5f414354
00004e1b 4956455f534f5552
00004e23 43455d00        
00004e27 01               23304		.byte	1
00004e28 cc04             23305		.byte	204,4
00004e2a 46424c5f4d454d5f 23306		.strz	"FBL_MEM_ARRAY_SIZE(arr) (sizeof(arr) / sizeof((arr)[0]))"
00004e32 41525241595f5349
00004e3a 5a45286172722920
00004e42 2873697a656f6628
00004e4a 61727229202f2073
00004e52 697a656f66282861
00004e5a 7272295b305d2929
00004e62 00              
00004e63 01               23307		.byte	1
00004e64 d904             23308		.byte	217,4
00004e66 46626c4d656d4c69 23309		.strz	"FblMemLimitLength(inputLen,type,finalize) (inputLen)"
00004e6e 6d69744c656e6774
00004e76 6828696e7075744c
00004e7e 656e2c747970652c
00004e86 66696e616c697a65
00004e8e 292028696e707574
00004e96 4c656e2900      
00004e9b 01               23310		.byte	1
00004e9c df04             23311		.byte	223,4
00004e9e 5f5f4170706c4662 23312		.strz	"__ApplFblMemCopyBuffer(address,data,length) (void)MEMCPY((address), (data), (length))"
00004ea6 6c4d656d436f7079
00004eae 4275666665722861
00004eb6 6464726573732c64
00004ebe 6174612c6c656e67
00004ec6 7468292028766f69
00004ece 64294d454d435059
00004ed6 2828616464726573
00004ede 73292c2028646174
00004ee6 61292c20286c656e
00004eee 677468292900    
00004ef4 01               23313		.byte	1
00004ef5 e304             23314		.byte	227,4
00004ef7 46424c5f4d454d5f 23315		.strz	"FBL_MEM_BUFFER_NULL ((tFblMemRamData)V_NULL)"
00004eff 4255464645525f4e
00004f07 554c4c2028287446
00004f0f 626c4d656d52616d
00004f17 4461746129565f4e
00004f1f 554c4c2900      
00004f24 01               23316		.byte	1
00004f25 8505             23317		.byte	133,5
00004f27 46424c5f4d454d5f 23318		.strz	"FBL_MEM_ALLOWED_NONE 0x00u"
00004f2f 414c4c4f5745445f
00004f37 4e4f4e4520307830
00004f3f 307500          
00004f42 01               23319		.byte	1
00004f43 8605             23320		.byte	134,5
00004f45 46424c5f4d454d5f 23321		.strz	"FBL_MEM_ALLOWED_BLOCK_START 0x01u"
00004f4d 414c4c4f5745445f
00004f55 424c4f434b5f5354
00004f5d 4152542030783031
00004f65 7500            
00004f67 01               23322		.byte	1
00004f68 8705             23323		.byte	135,5
00004f6a 46424c5f4d454d5f 23324		.strz	"FBL_MEM_ALLOWED_SEGMENT_START 0x02u"
00004f72 414c4c4f5745445f
00004f7a 5345474d454e545f
00004f82 5354415254203078
00004f8a 30327500        
00004f8e 01               23325		.byte	1
00004f8f 8805             23326		.byte	136,5
00004f91 46424c5f4d454d5f 23327		.strz	"FBL_MEM_ALLOWED_DATA_IND 0x04u"
00004f99 414c4c4f5745445f
00004fa1 444154415f494e44
00004fa9 20307830347500  
00004fb0 01               23328		.byte	1
00004fb1 8905             23329		.byte	137,5
00004fb3 46424c5f4d454d5f 23330		.strz	"FBL_MEM_ALLOWED_SEGMENT_END 0x08u"
00004fbb 414c4c4f5745445f
00004fc3 5345474d454e545f
00004fcb 454e442030783038
00004fd3 7500            
00004fd5 01               23331		.byte	1
00004fd6 8a05             23332		.byte	138,5
00004fd8 46424c5f4d454d5f 23333		.strz	"FBL_MEM_ALLOWED_BLOCK_END 0x10u"
00004fe0 414c4c4f5745445f
00004fe8 424c4f434b5f454e
00004ff0 4420307831307500
00004ff8 01               23334		.byte	1
00004ff9 8b05             23335		.byte	139,5
00004ffb 46424c5f4d454d5f 23336		.strz	"FBL_MEM_ALLOWED_BLOCK_VERIFY 0x20u"
00005003 414c4c4f5745445f
0000500b 424c4f434b5f5645
00005013 5249465920307832
0000501b 307500          
0000501e 01               23337		.byte	1
0000501f 8c05             23338		.byte	140,5
00005021 46424c5f4d454d5f 23339		.strz	"FBL_MEM_ALLOWED_BLOCK_ERASE 0x40u"
00005029 414c4c4f5745445f
00005031 424c4f434b5f4552
00005039 4153452030783430
00005041 7500            

                                   Fri Apr 10 08:32:15 2020           Page 418
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
00005043 01               23340		.byte	1
00005044 9005             23341		.byte	144,5
00005046 46626c4d656d5265 23342		.strz	"FblMemResetAllowed() (FblMemSetAllowed(FBL_MEM_ALLOWED_NONE))"
0000504e 736574416c6c6f77
00005056 6564282920284662
0000505e 6c4d656d53657441
00005066 6c6c6f7765642846
0000506e 424c5f4d454d5f41
00005076 4c4c4f5745445f4e
0000507e 4f4e45292900    
00005084 01               23343		.byte	1
00005085 9205             23344		.byte	146,5
00005087 46626c4d656d5365 23345		.strz	"FblMemSetAllowed(mask) (gAllowedInd = (tFblMemAllowedInd)(mask))"
0000508f 74416c6c6f776564
00005097 286d61736b292028
0000509f 67416c6c6f776564
000050a7 496e64203d202874
000050af 46626c4d656d416c
000050b7 6c6f776564496e64
000050bf 29286d61736b2929
000050c7 00              
000050c8 01               23346		.byte	1
000050c9 9405             23347		.byte	148,5
000050cb 46626c4d656d4164 23348		.strz	"FblMemAddAllowed(mask) (gAllowedInd |= (tFblMemAllowedInd)(mask))"
000050d3 64416c6c6f776564
000050db 286d61736b292028
000050e3 67416c6c6f776564
000050eb 496e64207c3d2028
000050f3 7446626c4d656d41
000050fb 6c6c6f776564496e
00005103 6429286d61736b29
0000510b 2900            
0000510d 01               23349		.byte	1
0000510e 9605             23350		.byte	150,5
00005110 46626c4d656d436c 23351		.strz	"FblMemClrAllowed(mask) (gAllowedInd &= FblInvertBits(mask, tFblMemAllowedInd))"
00005118 72416c6c6f776564
00005120 286d61736b292028
00005128 67416c6c6f776564
00005130 496e6420263d2046
00005138 626c496e76657274
00005140 42697473286d6173
00005148 6b2c207446626c4d
00005150 656d416c6c6f7765
00005158 64496e64292900  
0000515f 01               23352		.byte	1
00005160 9805             23353		.byte	152,5
00005162 46626c4d656d4973 23354		.strz	"FblMemIsAllowed(mask) ((gAllowedInd & (tFblMemAllowedInd)(mask)) == (tFblMemAllowedInd)(mask))"
0000516a 416c6c6f77656428
00005172 6d61736b29202828
0000517a 67416c6c6f776564
00005182 496e642026202874
0000518a 46626c4d656d416c
00005192 6c6f776564496e64
0000519a 29286d61736b2929
000051a2 203d3d2028744662
000051aa 6c4d656d416c6c6f
000051b2 776564496e642928
000051ba 6d61736b292900  
000051c1 01               23355		.byte	1
000051c2 9e05             23356		.byte	158,5
000051c4 46424c5f4d454d5f 23357		.strz	"FBL_MEM_EXT_STATUS_NONE 0x00u"
000051cc 4558545f53544154
000051d4 55535f4e4f4e4520
000051dc 307830307500    
000051e2 01               23358		.byte	1
000051e3 a005             23359		.byte	160,5
000051e5 46424c5f4d454d5f 23360		.strz	"FBL_MEM_SET_STATUS(status,var) FBL_MEM_SET_EXT_STATUS(status, FBL_MEM_EXT_STATUS_NONE, var)"
000051ed 5345545f53544154
000051f5 5553287374617475
000051fd 732c766172292046
00005205 424c5f4d454d5f53
0000520d 45545f4558545f53
00005215 5441545553287374
0000521d 617475732c204642
00005225 4c5f4d454d5f4558
0000522d 545f535441545553
00005235 5f4e4f4e452c2076
0000523d 61722900        
00005241 01               23361		.byte	1
00005242 a405             23362		.byte	164,5
00005244 46424c5f4d454d5f 23363		.strz	"FBL_MEM_SET_EXT_STATUS(status,ext,var) { FBL_MEM_EXT_STATUS_ ## status(ext); (var) = kFblMemStatus_ ## status; }"
0000524c 5345545f4558545f
00005254 5354415455532873
0000525c 74617475732c6578
00005264 742c76617229207b
0000526c 2046424c5f4d454d
00005274 5f4558545f535441
0000527c 5455535f20232320
00005284 7374617475732865
0000528c 7874293b20287661
00005294 7229203d206b4662
0000529c 6c4d656d53746174
000052a4 75735f2023232073
000052ac 74617475733b207d
000052b4 00              
000052b5 01               23364		.byte	1
000052b6 a905             23365		.byte	169,5
000052b8 46424c5f4d454d5f 23366		.strz	"FBL_MEM_SET_EXT_INFO(type,info) FBL_MEM_EXT_STATUS_ ## type(info)"
000052c0 5345545f4558545f
000052c8 494e464f28747970
000052d0 652c696e666f2920
000052d8 46424c5f4d454d5f
000052e0 4558545f53544154
000052e8 55535f2023232074
000052f0 79706528696e666f
000052f8 2900            
000052fa 01               23367		.byte	1
000052fb b205             23368		.byte	178,5
000052fd 6b46626c4d656d41 23369		.strz	"kFblMemAssertParameterOutOfRange 0x01u"
00005305 7373657274506172
0000530d 616d657465724f75
00005315 744f6652616e6765
0000531d 20307830317500  
00005324 01               23370		.byte	1
00005325 ba05             23371		.byte	186,5
00005327 5f5f4170706c4662 23372		.strz	"__ApplFblMemEnterCriticalSection() "
0000532f 6c4d656d456e7465
00005337 7243726974696361
0000533f 6c53656374696f6e
00005347 28292000        
0000534b 01               23373		.byte	1
0000534c c105             23374		.byte	193,5
0000534e 5f5f4170706c4662 23375		.strz	"__ApplFblMemLeaveCriticalSection() "
00005356 6c4d656d4c656176
0000535e 6543726974696361
00005366 6c53656374696f6e
0000536e 28292000        
00005372 01               23376		.byte	1
00005373 8b07             23377		.byte	139,7
00005375 46424c4c49425f4d 23378		.strz	"FBLLIB_MEM_START_SEC_VAR "
0000537d 454d5f5354415254
00005385 5f5345435f564152
0000538d 2000            
0000538f 03               23379		.byte	3
00005390 8c07             23380		.byte	140,7
00005392 18               23381		.byte	24
00005393 01               23382		.byte	1
00005394 2b               23383		.byte	43
00005395 46424c5f4d454d4d 23384		.strz	"FBL_MEMMAP_ERROR "
0000539d 41505f4552524f52
000053a5 2000            
000053a7 04               23385		.byte	4
000053a8 01               23386		.byte	1
000053a9 8208             23387		.byte	130,8
000053ab 46424c4c49425f4d 23388		.strz	"FBLLIB_MEM_STOP_SEC_VAR "
000053b3 454d5f53544f505f
000053bb 5345435f56415220
000053c3 00              
000053c4 03               23389		.byte	3
000053c5 8308             23390		.byte	131,8
000053c7 18               23391		.byte	24
000053c8 01               23392		.byte	1
000053c9 2b               23393		.byte	43
000053ca 46424c5f4d454d4d 23394		.strz	"FBL_MEMMAP_ERROR "
000053d2 41505f4552524f52
000053da 2000            
000053dc 04               23395		.byte	4

                                   Fri Apr 10 08:32:15 2020           Page 419
                                   Fri Apr 10 08:32:14 2020   gh_00008cc1.si
000053dd 01               23396		.byte	1
000053de 8508             23397		.byte	133,8
000053e0 46424c4c49425f4d 23398		.strz	"FBLLIB_MEM_START_SEC_CONST "
000053e8 454d5f5354415254
000053f0 5f5345435f434f4e
000053f8 53542000        
000053fc 03               23399		.byte	3
000053fd 8608             23400		.byte	134,8
000053ff 18               23401		.byte	24
00005400 01               23402		.byte	1
00005401 2b               23403		.byte	43
00005402 46424c5f4d454d4d 23404		.strz	"FBL_MEMMAP_ERROR "
0000540a 41505f4552524f52
00005412 2000            
00005414 04               23405		.byte	4
00005415 01               23406		.byte	1
00005416 ce08             23407		.byte	206,8
00005418 46424c4c49425f4d 23408		.strz	"FBLLIB_MEM_STOP_SEC_CONST "
00005420 454d5f53544f505f
00005428 5345435f434f4e53
00005430 542000          
00005433 03               23409		.byte	3
00005434 cf08             23410		.byte	207,8
00005436 18               23411		.byte	24
00005437 01               23412		.byte	1
00005438 2b               23413		.byte	43
00005439 46424c5f4d454d4d 23414		.strz	"FBL_MEMMAP_ERROR "
00005441 41505f4552524f52
00005449 2000            
0000544b 04               23415		.byte	4
0000544c 01               23416		.byte	1
0000544d 8725             23417		.byte	135,37
0000544f 46424c4c49425f4d 23418		.strz	"FBLLIB_MEM_RAMCODE_START_SEC_CODE "
00005457 454d5f52414d434f
0000545f 44455f5354415254
00005467 5f5345435f434f44
0000546f 452000          
00005472 03               23419		.byte	3
00005473 8825             23420		.byte	136,37
00005475 18               23421		.byte	24
00005476 01               23422		.byte	1
00005477 2b               23423		.byte	43
00005478 46424c5f4d454d4d 23424		.strz	"FBL_MEMMAP_ERROR "
00005480 41505f4552524f52
00005488 2000            
0000548a 04               23425		.byte	4
0000548b 01               23426		.byte	1
0000548c 9725             23427		.byte	151,37
0000548e 46424c4c49425f4d 23428		.strz	"FBLLIB_MEM_RAMCODE_STOP_SEC_CODE "
00005496 454d5f52414d434f
0000549e 44455f53544f505f
000054a6 5345435f434f4445
000054ae 2000            
000054b0 03               23429		.byte	3
000054b1 9825             23430		.byte	152,37
000054b3 18               23431		.byte	24
000054b4 01               23432		.byte	1
000054b5 2b               23433		.byte	43
000054b6 46424c5f4d454d4d 23434		.strz	"FBL_MEMMAP_ERROR "
000054be 41505f4552524f52
000054c6 2000            
000054c8 04               23435		.byte	4
000054c9 04               23436		.byte	4
000054ca 00               23437		.byte	0
                          23438		.section	.debug_abbrev
0000019e 00               23439		.byte	0
                          23440		.section	.debug_info
                          23441	.Ldw_end:
