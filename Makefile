##############################################################################
# This file is automatically generated and can be overwritten, do no change
# this file manually.
##############################################################################
# Build global options
# NOTE: Can be overridden externally.
#

ifeq ($(OS),Windows_NT)
WINDOWS := yes
PATH_SEPARATOR=;
else
WINDOWS := no
PATH_SEPARATOR=:
endif

COMPILER=ghs

# Compiler options here.
ifeq ($(USE_OPT),)
  USE_OPT = -Ospeed -Onounroll  --ee -ansi --no_coverage_analysis -check=nomemory -inline_prologue -std=c99 -G -dual_debug --gnu_asm -gnu99
endif

# C specific options here (added to USE_OPT).
ifeq ($(USE_COPT),)
  USE_COPT = -w
endif

# C++ specific options here (added to USE_OPT).
ifeq ($(USE_CPPOPT),)
  USE_CPPOPT = -fno-rtti -fno-exceptions
endif

# Enable this if you want the linker to remove unused code and data.
ifeq ($(USE_LINK_GC),)
  USE_LINK_GC = yes
endif

# Enable this if you want to use the C++ linker.
ifeq ($(USE_CPLUSPLUS_LINKER),)
  USE_CPLUSPLUS_LINKER = no
endif

# Linker options here.
ifeq ($(USE_LDOPT),)
  USE_LDOPT = 
endif

# If enabled, this option allows to compile the application in VLE mode.
ifeq ($(USE_VLE),)
  USE_VLE = yes
endif

# Enable this if you want to see the full log while compiling.
ifeq ($(USE_VERBOSE_COMPILE),)
  USE_VERBOSE_COMPILE = yes
endif

ifeq ($(USE_VERBOSE_COMPILE),yes)
  AT = 
else
  AT = @
  .SILENT:
endif

# Enable this if you want to create static library.
ifeq ($(CREATE_LIB),)
  CREATE_LIB = false
endif

#
# Build global options
##############################################################################

##############################################################################
# Project, sources and paths
#

# Define project name here
PROJECT = out

# Imported source files
include components/components.mak

# Checks if there is a user mak file in the project directory.
ifneq ($(wildcard user.mak),)
    include user.mak
endif

# Default linker script file
LDSCRIPT = application.ld

# Override with user.ld if it does exist
ifneq ($(wildcard user.ld),)
LDSCRIPT = user.ld
endif

# Override with compiler specific linker script if it does exist
# COMPILER = freegcc, hightec, ghs
ifneq ($(wildcard user_$(COMPILER).ld),)
LDSCRIPT = user_$(COMPILER).ld
endif

# Source files located under ./source are automatically added.
rwildcard = $(wildcard $1$2) $(foreach d,$(wildcard $1*),$(call rwildcard,$d/,$2))
AUTO_C_SRC = $(call rwildcard,./source/,*.c)
AUTO_CPP_SRC = $(call rwildcard,./source/,*.cpp)
AUTO_ASM_SRC = $(call rwildcard,./source/,*.s)
AUTO_INCLUDES = $(sort $(dir $(call rwildcard,./source/,*)))

# C sources here.
CSRC =      $(LIB_C_SRC) \
            $(APP_C_SRC) \
            $(U_C_SRC) \
            $(AUTO_C_SRC) \
            ./components/components.c

# C++ sources here.
CPPSRC =    $(LIB_CPP_SRC) \
            $(APP_CPP_SRC) \
            $(U_CPP_SRC) \
            $(AUTO_CPP_SRC)

# List ASM source files here.
ASMSRC =    $(LIB_ASM_SRC) \
            $(APP_ASM_SRC) \
            $(U_ASM_SRC) \
            $(AUTO_ASM_SRC)

# Inclusion paths.
INCDIR =    $(LIB_INCLUDES) \
            $(APP_INCLUDES) \
            $(AUTO_INCLUDES) \
            ./components

#
# Project, sources and paths
##############################################################################

##############################################################################
# Compiler settings
#


 
ifeq ($(GHS_PATH),)
  $(error Please specify a valid path into GHS_PATH for ccppc (GHS) compiler)
endif
# Convertion of GHS path in Unix-like format.
U_GHS_PATH = $(subst \,/,$(GHS_PATH))
MCU  = ppc5746mz0
C_COMPILER = $(U_GHS_PATH)ccppc
CXX_COMPILER = $(U_GHS_PATH)cxppc

ifeq ($(USE_CPLUSPLUS_LINKER),yes)
# C++ Linker
DRIVER = $(U_GHS_PATH)cxppc
else
# Standard C Linker
DRIVER = $(U_GHS_PATH)ccppc
endif

CC   = $(C_COMPILER)
CPPC = $(CXX_COMPILER)
# Enable loading with g++ only if you need C++ runtime support.
# NOTE: You can use C++ even without C++ support if you are careful. C++
#       runtime support makes code size explode.
LD   = $(DRIVER)
AS   = $(C_COMPILER) 
OD   = $(U_GHS_PATH)gdump
SZ   = $(U_GHS_PATH)gsize
HEX  = $(U_GHS_PATH)gsrec -hex386 
MOT  = $(U_GHS_PATH)gsrec
BIN  = $(U_GHS_PATH)gmemfile

# Define C warning options here
CWARN =  --ghstd=last

# Define C++ warning options here
CPPWARN = --ghstd=last

# include ./components/spc570sxx_platform_component_rla/lib/rsc/rules.mk
##############################################################################
# Processing options coming from the upper Makefile.
#

# Compiler options
OPT = $(USE_OPT)
COPT = $(USE_COPT)
CPPOPT = $(USE_CPPOPT)

# Garbage collection
ifeq ($(USE_LINK_GC),yes)
  OPT +=  --no_commons
  LDOPT := -delete 
endif

# Linker extra options
ifneq ($(USE_LDOPT),)
  LDOPT := $(LDOPT) $(USE_LDOPT)
endif

# Link time optimizations
ifeq ($(USE_LTO),yes)
  OPT += -Owholeprogram
endif

# VLE option handling.
ifeq ($(USE_VLE),yes)
  DDEFS += -DPPC_USE_VLE
  DADEFS += -DPPC_USE_VLE
endif

# Output directory and files
ifeq ($(BUILDDIR),)
  BUILDDIR = build
endif
ifeq ($(BUILDDIR),.)
  BUILDDIR = build
endif
OUTFILES = $(BUILDDIR)/$(PROJECT).elf $(BUILDDIR)/$(PROJECT).hex \
           $(BUILDDIR)/$(PROJECT).mot $(BUILDDIR)/$(PROJECT).bin \
           $(BUILDDIR)/$(PROJECT).dmp
ifeq ($(CREATE_LIB),true)
OUTFILES += $(BUILDDIR)/$(PROJECT).a
endif

# Source files groups and paths
SRC	      = $(CSRC)$(CPPSRC)
SRCPATHS  = $(sort $(dir $(ASMXSRC)) $(dir $(ASMSRC)) $(dir $(SRC)))

# Various directories
OBJDIR    = $(BUILDDIR)/obj
LSTDIR    = $(BUILDDIR)/lst
MCSDIR    = $(BUILDDIR)/mcs

# Object files groups
COBJS     = $(addprefix $(OBJDIR)/, $(notdir $(CSRC:.c=.o)))
CPPOBJS   = $(addprefix $(OBJDIR)/, $(notdir $(CPPSRC:.cpp=.o)))
ASMOBJS   = $(addprefix $(OBJDIR)/, $(notdir $(ASMSRC:.s=.o)))
ASMXOBJS  = $(addprefix $(OBJDIR)/, $(notdir $(ASMXSRC:.S=.o)))
OBJS	  = $(ASMXOBJS) $(ASMOBJS) $(COBJS) $(CPPOBJS)

# Paths
IINCDIR   = $(patsubst %,-I%,$(INCDIR) $(DINCDIR) $(UINCDIR) $(GHS_PATH)/ansi)
LLIBDIR   = $(patsubst %,-L%,$(DLIBDIR) $(ULIBDIR))

# Macros
DEFS      = $(DDEFS) $(UDEFS)
ADEFS 	  = $(DADEFS) $(UADEFS)

# Libs
LIBS      = $(DLIBS) $(ULIBS)

# Various settings
MCFLAGS   = -cpu=$(MCU)

ODFLAGS	  = -ysec

WARN   = --incorrect_pragma_warnings --unknown_pragma_warnings --prototype_warnings --diag_error 236
LIST   = -list -tmp=$(OBJDIR)  
ASFLAGS     = $(MCFLAGS) $(OPT) $(LIST) -list=$(LSTDIR)/$(notdir $(<:.s=.lst))  $(ADEFS) $(WARN)  -preprocess_assembly_files
ASXFLAGS    = $(MCFLAGS) $(OPT) $(LIST) -list=$(LSTDIR)/$(notdir $(<:.S=.lst))  $(ADEFS) $(WARN)  -preprocess_assembly_files    
CFLAGS      = $(MCFLAGS) $(OPT) $(COPT)   $(CWARN)   $(LIST) -list=$(LSTDIR)/$(notdir $(<:.c=.lst))   $(DEFS)               
CPPSFLAGS   = $(MCFLAGS) $(OPT) $(CPPOPT) $(CPPWARN) $(LIST) -list=$(LSTDIR)/$(notdir $(<:.cpp=.lst)) $(DEFS)                                

LDFLAGS   = $(MCFLAGS) $(OPT) -nostartfiles $(LLIBDIR) 
LDFLAGS   += -map=$(BUILDDIR)/$(PROJECT).map
LDFLAGS   += -Mx
LDFLAGS   += $(LDOPT)
LDFLAGS   += $(LDSCRIPT)

# Generate dependency information
ASFLAGS  += -MD 
ASXFLAGS += -MD 
CFLAGS   += -MD 
CPPFLAGS += -MD 

# Paths where to search for sources
VPATH     = $(SRCPATHS)

#
# Makefile rules
#

all: $(OBJS) $(MCS_OBJS) $(ENGINE_MCS_OBJS) $(OUTFILES) MAKE_ALL_RULE_HOOK

MAKE_ALL_RULE_HOOK:

# Build MCS code if GTM component is present
# otherwise just use an empty rule.
build_mcs_code::

$(OBJS): | $(BUILDDIR)

$(BUILDDIR) $(OBJDIR) $(LSTDIR) $(MCSDIR):
	mkdir -p $(MCSDIR) $(OBJDIR) $(LSTDIR) && $(MAKE) build_mcs_code
	@echo Compiler Options:
	@echo "  CFLAGS  = $(CFLAGS)"
	@echo "  INCLUDE = $(IINCDIR)"
	@echo

$(CPPOBJS) : $(OBJDIR)/%.o : %.cpp Makefile
	@echo Compiling $(<F)
	$(AT)$(CPPC) -c $(CPPFLAGS) -I. $(IINCDIR) $< -o $@

$(COBJS) : $(OBJDIR)/%.o : %.c Makefile
	@echo Compiling $(<F)
	$(AT)$(CC) -c $(CFLAGS) -I. $(IINCDIR) $< -o $@

$(ASMOBJS) : $(OBJDIR)/%.o : %.s Makefile
	@echo Compiling $(<F)
	$(AT)$(AS) -c $(ASFLAGS) -I. $(IINCDIR) $< -o $@

$(ASMXOBJS) : $(OBJDIR)/%.o : %.S Makefile
	@echo Compiling $(<F)
	$(AT)$(CC) -c $(ASXFLAGS) -I. $(IINCDIR) -filetype.assembly $< -o $@

#
# If GTM-IP component is present, add MCS compiler tools and rules
#
-include ./components/spc5_gtm_component_rla/mak/rules.mk

#
# If Security component is present, add rules to generate HSM binary firmware
#
-include ./components/spc5_security_component_rla/mak/rules.mk

%.elf: $(OBJS) $(MCS_OBJS) $(ENGINE_MCS_OBJS) $(LDSCRIPT)
	@echo Linking $@
	$(AT)$(LD) $(OBJS) $(MCS_OBJS) $(ENGINE_MCS_OBJS) $(LIBS) $(LDFLAGS) -o $@

%.hex: %.elf $(LDSCRIPT)
	@echo Creating $@
	$(AT)$(HEX)  -o $@ $<

%.mot: %.elf $(LDSCRIPT)
	@echo Creating $@
	$(AT)$(MOT) $< -o $@

%.bin: %.elf $(LDSCRIPT)
	@echo Creating $@
	$(AT)$(BIN) $< -o $@

%.dmp: %.elf $(LDSCRIPT)
	@echo Creating $@
	$(AT)$(OD) $(ODFLAGS) $< > $@
	@echo
	$(AT)$(SZ)  -table -totals  $<
	@echo
	@echo Done

ifeq ($(CREATE_LIB),true)	
%.a: %.elf $(LDSCRIPT)	
	@echo Creating $@
	$(AT)$(CC) build/obj/*.o  -archive -o $@ 
endif

clean:
	@echo Cleaning
	-rm -fR $(BUILDDIR)
	@echo
	@echo Done

# lint-nt must be accessible from your PATH
LINT_TOOL = lint-nt
LINT_OPTIONS = pclint/co-gcc.lnt pclint/au-misra3.lnt pclint/waivers.lnt

define AWK_CMD =
/search starts/{inc=1; next}/End of search list./{inc=0; next}{if (inc>0) { a = $$1; printf(gensub(/(.*)$$/, "--i\\\\1", "g", a)) }}
endef
define GET_INCLUDE_PATHS_CMD = 
$(shell $(TRGT)cpp -v 2>&1 | gawk '$(AWK_CMD)' > pclint/gcc-include-path.lnt)
endef

misra: pclint/gcc-include-path.lnt pclint/lint_cmac.h pclint/lint_cppmac.h
	@echo
	@echo $(LINT_TOOL) $(LINT_OPTIONS) $(subst \,/,$(IINCDIR)) $(subst \,/,$(SRC)) > misra.txt
	$(AT)$(LINT_TOOL) $(LINT_OPTIONS) $(subst \,/,$(IINCDIR)) $(subst \,/,$(SRC)) >> misra.txt
	@echo
	@echo Start MISRA Check...
	@echo See results in misra.txt

.PHONY: pclint/gcc-include-path.lnt
pclint/gcc-include-path.lnt:
	@echo
	@echo Generate pclint/gcc-include-path.lnt for current compiler 
	$(AT)$(GET_INCLUDE_PATHS_CMD)

.PHONY: pclint/lint_cmac.h
pclint/lint_cmac.h:
	@echo
	@echo Generate pclint/lint_cmac.h for current compiler 
	@touch t.c 
	$(AT)$(CC) -E t.c > pclint/lint_cmac.h
	@rm t.c

.PHONY: pclint/lint_cppmac.h
pclint/lint_cppmac.h:
	@echo
	@echo Generate pclint/lint_cppmac.h for current compiler
	@touch t.cpp 
	$(AT)$(CPPC) -E t.cpp > pclint/lint_cppmac.h
	@rm t.cpp

#
# Include the dependency files, should be the last of the makefile
#
-include $(shell mkdir .dep 2>/dev/null) $(wildcard .dep/*)

#
# Include the dependency files, should be the last of the makefile
#
  -include $(OBJS:.o=.d)

# *** EOF ***

